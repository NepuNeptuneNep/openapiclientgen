//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AddBridgeOutputsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string BridgeArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BridgeOutput[] Outputs { get; set; }
	}
	
	/// <summary>
	/// The output of the bridge.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BridgeOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public BridgeFlowOutput FlowOutput { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BridgeNetworkOutput NetworkOutput { get; set; }
	}
	
	/// <summary>
	/// The output of the bridge. A flow output is delivered to the AWS cloud.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BridgeFlowOutput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string FlowArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string FlowSourceArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// The output of the bridge. A network output is delivered to your premises.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BridgeNetworkOutput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string IpAddress { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string NetworkName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Port { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Protocol Protocol { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Ttl { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Protocol
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="zixi-push")]
		zixiMinuspush = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="rtp-fec")]
		rtpMinusfec = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="rtp")]
		rtp = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="zixi-pull")]
		zixiMinuspull = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="rist")]
		rist = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="st2110-jpegxs")]
		st2110Minusjpegxs = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cdi")]
		cdi = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="srt-listener")]
		srtMinuslistener = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="srt-caller")]
		srtMinuscaller = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fujitsu-qos")]
		fujitsuMinusqos = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="udp")]
		udp = 10,
	}
	
	/// <summary>
	/// Add an output to a bridge.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AddBridgeOutputRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AddBridgeNetworkOutputRequest NetworkOutput { get; set; }
	}
	
	/// <summary>
	/// Add a network output to an existing bridge.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AddBridgeNetworkOutputRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string IpAddress { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string NetworkName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Port { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Protocol Protocol { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Ttl { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BadRequestException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InternalServerErrorException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ForbiddenException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NotFoundException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServiceUnavailableException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TooManyRequestsException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConflictException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AddBridgeSourcesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string BridgeArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BridgeSource[] Sources { get; set; }
	}
	
	/// <summary>
	/// The bridge's source.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BridgeSource
	{
		
		[System.Runtime.Serialization.DataMember()]
		public BridgeFlowSource FlowSource { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BridgeNetworkSource NetworkSource { get; set; }
	}
	
	/// <summary>
	/// The source of the bridge. A flow source originates in MediaConnect as an existing cloud flow.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BridgeFlowSource
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string FlowArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VpcInterfaceAttachment FlowVpcInterfaceAttachment { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OutputArn { get; set; }
	}
	
	/// <summary>
	/// The settings for attaching a VPC interface to an resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VpcInterfaceAttachment
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string VpcInterfaceName { get; set; }
	}
	
	/// <summary>
	/// The source of the bridge. A network source originates at your premises.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BridgeNetworkSource
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string MulticastIp { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string NetworkName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Port { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Protocol Protocol { get; set; }
	}
	
	/// <summary>
	/// Add a source to an existing bridge.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AddBridgeSourceRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AddBridgeFlowSourceRequest FlowSource { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AddBridgeNetworkSourceRequest NetworkSource { get; set; }
	}
	
	/// <summary>
	/// Add a flow source to an existing bridge.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AddBridgeFlowSourceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string FlowArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VpcInterfaceAttachment FlowVpcInterfaceAttachment { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Add a network source to an existing bridge.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AddBridgeNetworkSourceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string MulticastIp { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string NetworkName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Port { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Protocol Protocol { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AddFlowMediaStreamsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string FlowArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MediaStream[] MediaStreams { get; set; }
	}
	
	/// <summary>
	/// A single track or stream of media that contains video, audio, or ancillary data. After you add a media stream to a flow, you can associate it with sources and outputs on that flow, as long as they use the CDI protocol or the ST 2110 JPEG XS protocol. Each source or output can consist of one or many media streams.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MediaStream
	{
		
		[System.Runtime.Serialization.DataMember()]
		public MediaStreamAttributes Attributes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ClockRate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Fmt { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int MediaStreamId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string MediaStreamName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MediaStreamType MediaStreamType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VideoFormat { get; set; }
	}
	
	/// <summary>
	/// Attributes that are related to the media stream.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MediaStreamAttributes
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Fmtp Fmtp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Lang { get; set; }
	}
	
	/// <summary>
	/// FMTP
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Fmtp
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ChannelOrder { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Colorimetry Colorimetry { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ExactFramerate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Par { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Range Range { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ScanMode ScanMode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tcs Tcs { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Colorimetry
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BT601")]
		BT601 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BT709")]
		BT709 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BT2020")]
		BT2020 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BT2100")]
		BT2100 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ST2065-1")]
		ST2065Minus1 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ST2065-3")]
		ST2065Minus3 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="XYZ")]
		XYZ = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Range
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NARROW")]
		NARROW = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FULL")]
		FULL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FULLPROTECT")]
		FULLPROTECT = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ScanMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="progressive")]
		progressive = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="interlace")]
		interlace = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="progressive-segmented-frame")]
		progressiveMinussegmentedMinusframe = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Tcs
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SDR")]
		SDR = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PQ")]
		PQ = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HLG")]
		HLG = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LINEAR")]
		LINEAR = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BT2100LINPQ")]
		BT2100LINPQ = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BT2100LINHLG")]
		BT2100LINHLG = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ST2065-1")]
		ST2065Minus1 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ST428-1")]
		ST428Minus1 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DENSITY")]
		DENSITY = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum MediaStreamType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="video")]
		video = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="audio")]
		audio = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ancillary-data")]
		ancillaryMinusdata = 2,
	}
	
	/// <summary>
	/// The media stream that you want to add to the flow.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AddMediaStreamRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public MediaStreamAttributesRequest Attributes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ClockRate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int MediaStreamId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string MediaStreamName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MediaStreamType MediaStreamType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VideoFormat { get; set; }
	}
	
	/// <summary>
	/// Attributes that are related to the media stream.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MediaStreamAttributesRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public FmtpRequest Fmtp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Lang { get; set; }
	}
	
	/// <summary>
	/// The settings that you want to use to define the media stream.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FmtpRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ChannelOrder { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Colorimetry Colorimetry { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ExactFramerate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Par { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Range Range { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ScanMode ScanMode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tcs Tcs { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AddFlowOutputsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string FlowArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Output[] Outputs { get; set; }
	}
	
	/// <summary>
	/// The settings for an output.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Output
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DataTransferSubscriberFeePercent { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Destination { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Encryption Encryption { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EntitlementArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ListenerAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MediaLiveInputArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MediaStreamOutputConfiguration[] MediaStreamOutputConfigurations { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string OutputArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Port { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Transport Transport { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VpcInterfaceAttachment VpcInterfaceAttachment { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BridgeArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> BridgePorts { get; set; }
	}
	
	/// <summary>
	/// Information about the encryption of the flow.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Encryption
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Algorithm Algorithm { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ConstantInitializationVector { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DeviceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public KeyType KeyType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Region { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SecretArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Algorithm
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="aes128")]
		aes128 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="aes192")]
		aes192 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="aes256")]
		aes256 = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum KeyType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="speke")]
		speke = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="static-key")]
		staticMinuskey = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="srt-password")]
		srtMinuspassword = 2,
	}
	
	/// <summary>
	/// The media stream that is associated with the output, and the parameters for that association.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MediaStreamOutputConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DestinationConfiguration[] DestinationConfigurations { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public EncodingName EncodingName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EncodingParameters EncodingParameters { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string MediaStreamName { get; set; }
	}
	
	/// <summary>
	/// The transport parameters that are associated with an outbound media stream.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinationConfiguration
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DestinationIp { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int DestinationPort { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Interface Interface { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string OutboundIp { get; set; }
	}
	
	/// <summary>
	/// The VPC interface that is used for the media stream associated with the source or output.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Interface
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum EncodingName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="jxsv")]
		jxsv = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="raw")]
		raw = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="smpte291")]
		smpte291 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pcm")]
		pcm = 3,
	}
	
	/// <summary>
	/// A collection of parameters that determine how MediaConnect will convert the content. These fields only apply to outputs on flows that have a CDI source.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EncodingParameters
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public double CompressionFactor { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public EncoderProfile EncoderProfile { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum EncoderProfile
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="main")]
		main = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="high")]
		high = 1,
	}
	
	/// <summary>
	/// Attributes related to the transport stream that are used in a source or output.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Transport
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] CidrAllowList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxBitrate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxLatency { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxSyncBuffer { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MinLatency { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Protocol Protocol { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RemoteId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SenderControlPort { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SenderIpAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SmoothingLatency { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceListenerAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SourceListenerPort { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StreamId { get; set; }
	}
	
	/// <summary>
	/// The output that you want to add to this flow.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AddOutputRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] CidrAllowList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Destination { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Encryption Encryption { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxLatency { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MediaStreamOutputConfigurationRequest[] MediaStreamOutputConfigurations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MinLatency { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Port { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Protocol Protocol { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RemoteId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SenderControlPort { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SmoothingLatency { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StreamId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VpcInterfaceAttachment VpcInterfaceAttachment { get; set; }
	}
	
	/// <summary>
	/// The media stream that you want to associate with the output, and the parameters for that association.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MediaStreamOutputConfigurationRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DestinationConfigurationRequest[] DestinationConfigurations { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public EncodingName EncodingName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EncodingParametersRequest EncodingParameters { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string MediaStreamName { get; set; }
	}
	
	/// <summary>
	/// The transport parameters that you want to associate with an outbound media stream.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinationConfigurationRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DestinationIp { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int DestinationPort { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public InterfaceRequest Interface { get; set; }
	}
	
	/// <summary>
	/// The VPC interface that you want to designate where the media stream is coming from or going to.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InterfaceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// A collection of parameters that determine how MediaConnect will convert the content. These fields only apply to outputs on flows that have a CDI source.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EncodingParametersRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public double CompressionFactor { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public EncoderProfile EncoderProfile { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AddFlowOutputs420Exception
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AddFlowSourcesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string FlowArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Source[] Sources { get; set; }
	}
	
	/// <summary>
	/// The settings for the source of the flow.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Source
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DataTransferSubscriberFeePercent { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Encryption Decryption { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EntitlementArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IngestIp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> IngestPort { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MediaStreamSourceConfiguration[] MediaStreamSourceConfigurations { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SenderControlPort { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SenderIpAddress { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SourceArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Transport Transport { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VpcInterfaceName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string WhitelistCidr { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public GatewayBridgeSource GatewayBridgeSource { get; set; }
	}
	
	/// <summary>
	/// The media stream that is associated with the source, and the parameters for that association.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MediaStreamSourceConfiguration
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public EncodingName EncodingName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InputConfiguration[] InputConfigurations { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string MediaStreamName { get; set; }
	}
	
	/// <summary>
	/// The transport parameters that are associated with an incoming media stream.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InputConfiguration
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string InputIp { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int InputPort { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Interface Interface { get; set; }
	}
	
	/// <summary>
	/// The source configuration for cloud flows receiving a stream from a bridge.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GatewayBridgeSource
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string BridgeArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VpcInterfaceAttachment VpcInterfaceAttachment { get; set; }
	}
	
	/// <summary>
	/// The settings for the source of the flow.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SetSourceRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Encryption Decryption { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EntitlementArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> IngestPort { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxBitrate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxLatency { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxSyncBuffer { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MediaStreamSourceConfigurationRequest[] MediaStreamSourceConfigurations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MinLatency { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Protocol Protocol { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SenderControlPort { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SenderIpAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceListenerAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SourceListenerPort { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StreamId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VpcInterfaceName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string WhitelistCidr { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SetGatewayBridgeSourceRequest GatewayBridgeSource { get; set; }
	}
	
	/// <summary>
	/// The definition of a media stream that you want to associate with the source.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MediaStreamSourceConfigurationRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public EncodingName EncodingName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InputConfigurationRequest[] InputConfigurations { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string MediaStreamName { get; set; }
	}
	
	/// <summary>
	/// The transport parameters that you want to associate with an incoming media stream.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InputConfigurationRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int InputPort { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public InterfaceRequest Interface { get; set; }
	}
	
	/// <summary>
	/// The source configuration for cloud flows receiving a stream from a bridge.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SetGatewayBridgeSourceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string BridgeArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VpcInterfaceAttachment VpcInterfaceAttachment { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AddFlowVpcInterfacesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string FlowArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VpcInterface[] VpcInterfaces { get; set; }
	}
	
	/// <summary>
	/// The settings for a VPC Source.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VpcInterface
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] NetworkInterfaceIds { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public NetworkInterfaceType NetworkInterfaceType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] SecurityGroupIds { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SubnetId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum NetworkInterfaceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ena")]
		ena = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="efa")]
		efa = 1,
	}
	
	/// <summary>
	/// Desired VPC Interface for a Flow
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VpcInterfaceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NetworkInterfaceType NetworkInterfaceType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] SecurityGroupIds { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SubnetId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateBridgeResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Bridge Bridge { get; set; }
	}
	
	/// <summary>
	/// A Bridge is the connection between your datacenter's Instances and the AWS cloud. A bridge can be used to send video from the AWS cloud to your datacenter or from your datacenter to the AWS cloud.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Bridge
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string BridgeArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MessageDetail[] BridgeMessages { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public BridgeState BridgeState { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EgressGatewayBridge EgressGatewayBridge { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public IngressGatewayBridge IngressGatewayBridge { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BridgeOutput[] Outputs { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PlacementArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FailoverConfig SourceFailoverConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BridgeSource[] Sources { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MessageDetail
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Code { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum BridgeState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CREATING")]
		CREATING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="STANDBY")]
		STANDBY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="STARTING")]
		STARTING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DEPLOYING")]
		DEPLOYING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ACTIVE")]
		ACTIVE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="STOPPING")]
		STOPPING = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DELETING")]
		DELETING = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DELETED")]
		DELETED = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="START_FAILED")]
		START_FAILED = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="START_PENDING")]
		START_PENDING = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="STOP_FAILED")]
		STOP_FAILED = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UPDATING")]
		UPDATING = 11,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EgressGatewayBridge
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string InstanceId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int MaxBitrate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class IngressGatewayBridge
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string InstanceId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int MaxBitrate { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int MaxOutputs { get; set; }
	}
	
	/// <summary>
	/// The settings for source failover.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FailoverConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public FailoverMode FailoverMode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> RecoveryWindow { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SourcePriority SourcePriority { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public State State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum FailoverMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MERGE")]
		MERGE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FAILOVER")]
		FAILOVER = 1,
	}
	
	/// <summary>
	/// The priority you want to assign to a source. You can have a primary stream and a backup stream or two equally prioritized streams.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SourcePriority
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string PrimarySource { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum State
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ENABLED")]
		ENABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DISABLED")]
		DISABLED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateBridge420Exception
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateFlowResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Flow Flow { get; set; }
	}
	
	/// <summary>
	/// The settings for a flow, including its source, outputs, and entitlements.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Flow
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AvailabilityZone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EgressIp { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Entitlement[] Entitlements { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string FlowArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MediaStream[] MediaStreams { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Output[] Outputs { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Source Source { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FailoverConfig SourceFailoverConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Source[] Sources { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Status Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VpcInterface[] VpcInterfaces { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Maintenance Maintenance { get; set; }
	}
	
	/// <summary>
	/// The settings for a flow entitlement.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Entitlement
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DataTransferSubscriberFeePercent { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Encryption Encryption { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EntitlementArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public State EntitlementStatus { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] Subscribers { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Status
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="STANDBY")]
		STANDBY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ACTIVE")]
		ACTIVE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UPDATING")]
		UPDATING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DELETING")]
		DELETING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="STARTING")]
		STARTING = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="STOPPING")]
		STOPPING = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ERROR")]
		ERROR = 6,
	}
	
	/// <summary>
	/// The maintenance setting of a flow
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Maintenance
	{
		
		[System.Runtime.Serialization.DataMember()]
		public MaintenanceDay MaintenanceDay { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MaintenanceDeadline { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MaintenanceScheduledDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MaintenanceStartHour { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum MaintenanceDay
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Monday")]
		Monday = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Tuesday")]
		Tuesday = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Wednesday")]
		Wednesday = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Thursday")]
		Thursday = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Friday")]
		Friday = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Saturday")]
		Saturday = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Sunday")]
		Sunday = 6,
	}
	
	/// <summary>
	/// The entitlements that you want to grant on a flow.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GrantEntitlementRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DataTransferSubscriberFeePercent { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Encryption Encryption { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public State EntitlementStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] Subscribers { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateFlow420Exception
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateGatewayResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Gateway Gateway { get; set; }
	}
	
	/// <summary>
	/// The settings for a gateway, including its networks.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Gateway
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] EgressCidrBlocks { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string GatewayArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MessageDetail[] GatewayMessages { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public GatewayState GatewayState { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public GatewayNetwork[] Networks { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum GatewayState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CREATING")]
		CREATING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ACTIVE")]
		ACTIVE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UPDATING")]
		UPDATING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ERROR")]
		ERROR = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DELETING")]
		DELETING = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DELETED")]
		DELETED = 5,
	}
	
	/// <summary>
	/// The network settings for a gateway.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GatewayNetwork
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string CidrBlock { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateGateway420Exception
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteBridgeResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string BridgeArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteFlowResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string FlowArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Status Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteGatewayResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string GatewayArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeregisterGatewayInstanceResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string GatewayInstanceArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InstanceState InstanceState { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum InstanceState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="REGISTERING")]
		REGISTERING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ACTIVE")]
		ACTIVE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DEREGISTERING")]
		DEREGISTERING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DEREGISTERED")]
		DEREGISTERED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="REGISTRATION_ERROR")]
		REGISTRATION_ERROR = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DEREGISTRATION_ERROR")]
		DEREGISTRATION_ERROR = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeBridgeResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Bridge Bridge { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeFlowResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Flow Flow { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Messages Messages { get; set; }
	}
	
	/// <summary>
	/// Messages that provide the state of the flow.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Messages
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] Errors { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeGatewayResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Gateway Gateway { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeGatewayInstanceResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public GatewayInstance GatewayInstance { get; set; }
	}
	
	/// <summary>
	/// The settings for an instance in a gateway.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GatewayInstance
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public BridgePlacement BridgePlacement { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ConnectionStatus ConnectionStatus { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string GatewayArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string GatewayInstanceArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string InstanceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MessageDetail[] InstanceMessages { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public InstanceState InstanceState { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int RunningBridgeCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum BridgePlacement
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AVAILABLE")]
		AVAILABLE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LOCKED")]
		LOCKED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ConnectionStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CONNECTED")]
		CONNECTED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DISCONNECTED")]
		DISCONNECTED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeOfferingResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Offering Offering { get; set; }
	}
	
	/// <summary>
	/// A savings plan that reserves a certain amount of outbound bandwidth usage at a discounted rate each month over a period of time.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Offering
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string CurrencyCode { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Duration { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DurationUnits DurationUnits { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string OfferingArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string OfferingDescription { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PricePerUnit { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public PriceUnits PriceUnits { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ResourceSpecification ResourceSpecification { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DurationUnits
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MONTHS")]
		MONTHS = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PriceUnits
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HOURLY")]
		HOURLY = 0,
	}
	
	/// <summary>
	/// A definition of what is being billed for, including the type and amount.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceSpecification
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ReservedBitrate { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ResourceType ResourceType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ResourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Mbps_Outbound_Bandwidth")]
		Mbps_Outbound_Bandwidth = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeReservationResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Reservation Reservation { get; set; }
	}
	
	/// <summary>
	/// A pricing agreement for a discounted rate for a specific outbound bandwidth that your MediaConnect account will use each month over a specific time period. The discounted rate in the reservation applies to outbound bandwidth for all flows from your account until your account reaches the amount of bandwidth in your reservation. If you use more outbound bandwidth than the agreed upon amount in a single month, the overage is charged at the on-demand rate.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Reservation
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string CurrencyCode { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Duration { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DurationUnits DurationUnits { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string End { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string OfferingArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string OfferingDescription { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PricePerUnit { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public PriceUnits PriceUnits { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ReservationArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ReservationName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ReservationState ReservationState { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ResourceSpecification ResourceSpecification { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Start { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ReservationState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ACTIVE")]
		ACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EXPIRED")]
		EXPIRED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PROCESSING")]
		PROCESSING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CANCELED")]
		CANCELED = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GrantFlowEntitlementsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Entitlement[] Entitlements { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FlowArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GrantFlowEntitlements420Exception
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListBridgesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ListedBridge[] Bridges { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Displays details of the selected bridge.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListedBridge
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string BridgeArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public BridgeState BridgeState { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string BridgeType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PlacementArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListEntitlementsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ListedEntitlement[] Entitlements { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// An entitlement that has been granted to you from other AWS accounts.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListedEntitlement
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DataTransferSubscriberFeePercent { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EntitlementArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EntitlementName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListFlowsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ListedFlow[] Flows { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Provides a summary of a flow, including its ARN, Availability Zone, and source type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListedFlow
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AvailabilityZone { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string FlowArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public SourceType SourceType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Status Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Maintenance Maintenance { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum SourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OWNED")]
		OWNED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ENTITLED")]
		ENTITLED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListGatewayInstancesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ListedGatewayInstance[] Instances { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Provides a summary of an instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListedGatewayInstance
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string GatewayArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string GatewayInstanceArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string InstanceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InstanceState InstanceState { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListGatewaysResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ListedGateway[] Gateways { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Provides a summary of a gateway, including its name, ARN, and status.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListedGateway
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string GatewayArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public GatewayState GatewayState { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListOfferingsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Offering[] Offerings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListReservationsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Reservation[] Reservations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListTagsForResourceResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public @__mapOf__string Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class @__mapOf__string
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PurchaseOfferingResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Reservation Reservation { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RemoveBridgeOutputResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string BridgeArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OutputName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RemoveBridgeSourceResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string BridgeArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RemoveFlowMediaStreamResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string FlowArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MediaStreamName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RemoveFlowOutputResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string FlowArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OutputArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RemoveFlowSourceResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string FlowArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RemoveFlowVpcInterfaceResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string FlowArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] NonDeletedNetworkInterfaceIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VpcInterfaceName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RevokeFlowEntitlementResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string EntitlementArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FlowArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StartFlowResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string FlowArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Status Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StopFlowResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string FlowArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Status Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateBridgeResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Bridge Bridge { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateBridgeOutputResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string BridgeArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BridgeOutput Output { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateBridgeSourceResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string BridgeArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BridgeSource Source { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateBridgeStateResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string BridgeArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DesiredState DesiredState { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DesiredState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ACTIVE")]
		ACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="STANDBY")]
		STANDBY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DELETED")]
		DELETED = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateFlowResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Flow Flow { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateFlowEntitlementResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Entitlement Entitlement { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FlowArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateFlowMediaStreamResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string FlowArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MediaStream MediaStream { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateFlowOutputResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string FlowArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Output Output { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateFlowSourceResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string FlowArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Source Source { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateGatewayInstanceResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public BridgePlacement BridgePlacement { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GatewayInstanceArn { get; set; }
	}
	
	/// <summary>
	/// A request to add outputs to the specified bridge.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AddBridgeOutputsRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AddBridgeOutputRequest[] Outputs { get; set; }
	}
	
	/// <summary>
	/// A request to add sources to the specified bridge.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AddBridgeSourcesRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AddBridgeSourceRequest[] Sources { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AddEgressGatewayBridgeRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int MaxBitrate { get; set; }
	}
	
	/// <summary>
	/// A request to add media streams to the flow.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AddFlowMediaStreamsRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AddMediaStreamRequest[] MediaStreams { get; set; }
	}
	
	/// <summary>
	/// A request to add outputs to the specified flow.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AddFlowOutputsRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AddOutputRequest[] Outputs { get; set; }
	}
	
	/// <summary>
	/// A request to add sources to the flow.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AddFlowSourcesRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public SetSourceRequest[] Sources { get; set; }
	}
	
	/// <summary>
	/// A request to add VPC interfaces to the flow.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AddFlowVpcInterfacesRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public VpcInterfaceRequest[] VpcInterfaces { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AddIngressGatewayBridgeRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int MaxBitrate { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int MaxOutputs { get; set; }
	}
	
	/// <summary>
	/// Create maintenance setting for a flow
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AddMaintenance
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MaintenanceDay MaintenanceDay { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string MaintenanceStartHour { get; set; }
	}
	
	/// <summary>
	/// Creates a new bridge. The request must include one source.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateBridgeRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AddEgressGatewayBridgeRequest EgressGatewayBridge { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AddIngressGatewayBridgeRequest IngressGatewayBridge { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AddBridgeOutputRequest[] Outputs { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PlacementArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FailoverConfig SourceFailoverConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AddBridgeSourceRequest[] Sources { get; set; }
	}
	
	/// <summary>
	/// Creates a new flow. The request must include one source. The request optionally can include outputs (up to 50) and entitlements (up to 50).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateFlowRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AvailabilityZone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public GrantEntitlementRequest[] Entitlements { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AddMediaStreamRequest[] MediaStreams { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AddOutputRequest[] Outputs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SetSourceRequest Source { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FailoverConfig SourceFailoverConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SetSourceRequest[] Sources { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VpcInterfaceRequest[] VpcInterfaces { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AddMaintenance Maintenance { get; set; }
	}
	
	/// <summary>
	/// Creates a new gateway. The request must include at least one network (up to 4).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateGatewayRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] EgressCidrBlocks { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public GatewayNetwork[] Networks { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteBridgeRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteFlowRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteGatewayRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeregisterGatewayInstanceRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeBridgeRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeFlowRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeGatewayInstanceRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeGatewayRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeOfferingRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeReservationRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum EntitlementStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ENABLED")]
		ENABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DISABLED")]
		DISABLED = 1,
	}
	
	/// <summary>
	/// A request to grant entitlements on a flow.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GrantFlowEntitlementsRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public GrantEntitlementRequest[] Entitlements { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListBridgesRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListEntitlementsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListFlowsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListGatewayInstancesRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListGatewaysRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListOfferingsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListReservationsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListTagsForResourceRequest
	{
	}
	
	/// <summary>
	/// A request to purchase a offering.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PurchaseOfferingRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ReservationName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Start { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RemoveBridgeOutputRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RemoveBridgeSourceRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RemoveFlowMediaStreamRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RemoveFlowOutputRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RemoveFlowSourceRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RemoveFlowVpcInterfaceRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RevokeFlowEntitlementRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StartFlowRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StopFlowRequest
	{
	}
	
	/// <summary>
	/// The tags to add to the resource. A tag is an array of key-value pairs. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TagResourceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public @__mapOf__string Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UntagResourceRequest
	{
	}
	
	/// <summary>
	/// Update the flow source of the bridge.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateBridgeFlowSourceRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string FlowArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VpcInterfaceAttachment FlowVpcInterfaceAttachment { get; set; }
	}
	
	/// <summary>
	/// Update an existing network output.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateBridgeNetworkOutputRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string IpAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NetworkName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Port { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Protocol Protocol { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Ttl { get; set; }
	}
	
	/// <summary>
	/// Update the network source of the bridge.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateBridgeNetworkSourceRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string MulticastIp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NetworkName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Port { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Protocol Protocol { get; set; }
	}
	
	/// <summary>
	/// The fields that you want to update in the bridge output.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateBridgeOutputRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public UpdateBridgeNetworkOutputRequest NetworkOutput { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateEgressGatewayBridgeRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxBitrate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateIngressGatewayBridgeRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxBitrate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxOutputs { get; set; }
	}
	
	/// <summary>
	/// The settings for source failover.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateFailoverConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public FailoverMode FailoverMode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> RecoveryWindow { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SourcePriority SourcePriority { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public State State { get; set; }
	}
	
	/// <summary>
	/// A request to update the bridge.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateBridgeRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public UpdateEgressGatewayBridgeRequest EgressGatewayBridge { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UpdateIngressGatewayBridgeRequest IngressGatewayBridge { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UpdateFailoverConfig SourceFailoverConfig { get; set; }
	}
	
	/// <summary>
	/// The fields that you want to update in the bridge source.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateBridgeSourceRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public UpdateBridgeFlowSourceRequest FlowSource { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UpdateBridgeNetworkSourceRequest NetworkSource { get; set; }
	}
	
	/// <summary>
	/// A request to update the bridge state.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateBridgeStateRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DesiredState DesiredState { get; set; }
	}
	
	/// <summary>
	/// Information about the encryption of the flow.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateEncryption
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Algorithm Algorithm { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ConstantInitializationVector { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DeviceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public KeyType KeyType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Region { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SecretArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Url { get; set; }
	}
	
	/// <summary>
	/// The entitlement fields that you want to update.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateFlowEntitlementRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UpdateEncryption Encryption { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public State EntitlementStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Subscribers { get; set; }
	}
	
	/// <summary>
	/// The fields that you want to update in the media stream.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateFlowMediaStreamRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public MediaStreamAttributesRequest Attributes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ClockRate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MediaStreamType MediaStreamType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VideoFormat { get; set; }
	}
	
	/// <summary>
	/// The fields that you want to update in the output.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateFlowOutputRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] CidrAllowList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Destination { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UpdateEncryption Encryption { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxLatency { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MediaStreamOutputConfigurationRequest[] MediaStreamOutputConfigurations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MinLatency { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Port { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Protocol Protocol { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RemoteId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SenderControlPort { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SenderIpAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SmoothingLatency { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StreamId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VpcInterfaceAttachment VpcInterfaceAttachment { get; set; }
	}
	
	/// <summary>
	/// Update maintenance setting for a flow
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateMaintenance
	{
		
		[System.Runtime.Serialization.DataMember()]
		public MaintenanceDay MaintenanceDay { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MaintenanceScheduledDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MaintenanceStartHour { get; set; }
	}
	
	/// <summary>
	/// A request to update flow.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateFlowRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public UpdateFailoverConfig SourceFailoverConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UpdateMaintenance Maintenance { get; set; }
	}
	
	/// <summary>
	/// The source configuration for cloud flows receiving a stream from a bridge.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateGatewayBridgeSourceRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string BridgeArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VpcInterfaceAttachment VpcInterfaceAttachment { get; set; }
	}
	
	/// <summary>
	/// A request to update the source of a flow.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateFlowSourceRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public UpdateEncryption Decryption { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EntitlementArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> IngestPort { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxBitrate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxLatency { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxSyncBuffer { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MediaStreamSourceConfigurationRequest[] MediaStreamSourceConfigurations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MinLatency { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Protocol Protocol { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SenderControlPort { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SenderIpAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceListenerAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SourceListenerPort { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StreamId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VpcInterfaceName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string WhitelistCidr { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UpdateGatewayBridgeSourceRequest GatewayBridgeSource { get; set; }
	}
	
	/// <summary>
	/// A request to update gateway instance state.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateGatewayInstanceRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public BridgePlacement BridgePlacement { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Adds outputs to an existing bridge.
		/// AddBridgeOutputs v1/bridges/{bridgeArn}/outputs
		/// </summary>
		/// <param name="bridgeArn">The ARN of the bridge that you want to update.</param>
		public async Task AddBridgeOutputsAsync(string bridgeArn, AddBridgeOutputsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/bridges/"+ (bridgeArn==null? "" : System.Uri.EscapeDataString(bridgeArn))+"/outputs";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Adds sources to an existing bridge.
		/// AddBridgeSources v1/bridges/{bridgeArn}/sources
		/// </summary>
		/// <param name="bridgeArn">The ARN of the bridge that you want to update.</param>
		public async Task AddBridgeSourcesAsync(string bridgeArn, AddBridgeSourcesPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/bridges/"+ (bridgeArn==null? "" : System.Uri.EscapeDataString(bridgeArn))+"/sources";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Adds media streams to an existing flow. After you add a media stream to a flow, you can associate it with a source and/or an output that uses the ST 2110 JPEG XS or CDI protocol.
		/// AddFlowMediaStreams v1/flows/{flowArn}/mediaStreams
		/// </summary>
		/// <param name="flowArn">The Amazon Resource Name (ARN) of the flow.</param>
		public async Task AddFlowMediaStreamsAsync(string flowArn, AddFlowMediaStreamsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/flows/"+ (flowArn==null? "" : System.Uri.EscapeDataString(flowArn))+"/mediaStreams";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Adds outputs to an existing flow. You can create up to 50 outputs per flow.
		/// AddFlowOutputs v1/flows/{flowArn}/outputs
		/// </summary>
		/// <param name="flowArn">The flow that you want to add outputs to.</param>
		public async Task AddFlowOutputsAsync(string flowArn, AddFlowOutputsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/flows/"+ (flowArn==null? "" : System.Uri.EscapeDataString(flowArn))+"/outputs";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Adds Sources to flow
		/// AddFlowSources v1/flows/{flowArn}/source
		/// </summary>
		/// <param name="flowArn">The flow that you want to mutate.</param>
		public async Task AddFlowSourcesAsync(string flowArn, AddFlowSourcesPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/flows/"+ (flowArn==null? "" : System.Uri.EscapeDataString(flowArn))+"/source";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Adds VPC interfaces to flow
		/// AddFlowVpcInterfaces v1/flows/{flowArn}/vpcInterfaces
		/// </summary>
		/// <param name="flowArn">The flow that you want to mutate.</param>
		public async Task AddFlowVpcInterfacesAsync(string flowArn, AddFlowVpcInterfacesPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/flows/"+ (flowArn==null? "" : System.Uri.EscapeDataString(flowArn))+"/vpcInterfaces";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a new bridge. The request must include one source.
		/// CreateBridge v1/bridges
		/// </summary>
		public async Task CreateBridgeAsync(CreateBridgePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/bridges";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Displays a list of bridges that are associated with this account and an optionally specified Arn. This request returns a paginated result.
		/// ListBridges v1/bridges
		/// </summary>
		/// <param name="filterArn">Filter the list results to display only the bridges associated with the selected Amazon Resource Name (ARN).</param>
		/// <param name="maxResults">The maximum number of results to return per API request. For example, you submit a ListBridges request with MaxResults set at 5. Although 20 items match your request, the service returns no more than the first 5 items. (The service also returns a NextToken value that you can use to fetch the next batch of results.) The service might return fewer results than the MaxResults value. If MaxResults is not included in the request, the service defaults to pagination with a maximum of 10 results per page.
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="nextToken">The token that identifies which batch of results that you want to see. For example, you submit a ListBridges request with MaxResults set at 5. The service returns the first batch of results (up to 5) and a NextToken value. To see the next batch of results, you can submit the ListBridges request a second time and specify the NextToken value.</param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListBridgesResponse> ListBridgesAsync(string filterArn, int maxResults, string nextToken, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/bridges?filterArn=" + (filterArn==null? "" : System.Uri.EscapeDataString(filterArn))+"&maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListBridgesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new flow. The request must include one source. The request optionally can include outputs (up to 50) and entitlements (up to 50).
		/// CreateFlow v1/flows
		/// </summary>
		public async Task CreateFlowAsync(CreateFlowPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/flows";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Displays a list of flows that are associated with this account. This request returns a paginated result.
		/// ListFlows v1/flows
		/// </summary>
		/// <param name="maxResults">The maximum number of results to return per API request. For example, you submit a ListFlows request with MaxResults set at 5. Although 20 items match your request, the service returns no more than the first 5 items. (The service also returns a NextToken value that you can use to fetch the next batch of results.) The service might return fewer results than the MaxResults value. If MaxResults is not included in the request, the service defaults to pagination with a maximum of 10 results per page.
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="nextToken">The token that identifies which batch of results that you want to see. For example, you submit a ListFlows request with MaxResults set at 5. The service returns the first batch of results (up to 5) and a NextToken value. To see the next batch of results, you can submit the ListFlows request a second time and specify the NextToken value.</param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListFlowsResponse> ListFlowsAsync(int maxResults, string nextToken, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/flows?maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListFlowsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new gateway. The request must include at least one network (up to 4).
		/// CreateGateway v1/gateways
		/// </summary>
		public async Task CreateGatewayAsync(CreateGatewayPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/gateways";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Displays a list of gateways that are associated with this account. This request returns a paginated result.
		/// ListGateways v1/gateways
		/// </summary>
		/// <param name="maxResults">The maximum number of results to return per API request. For example, you submit a ListGateways request with MaxResults set at 5. Although 20 items match your request, the service returns no more than the first 5 items. (The service also returns a NextToken value that you can use to fetch the next batch of results.) The service might return fewer results than the MaxResults value. If MaxResults is not included in the request, the service defaults to pagination with a maximum of 10 results per page.
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="nextToken">The token that identifies which batch of results that you want to see. For example, you submit a ListGateways request with MaxResults set at 5. The service returns the first batch of results (up to 5) and a NextToken value. To see the next batch of results, you can submit the ListGateways request a second time and specify the NextToken value.</param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListGatewaysResponse> ListGatewaysAsync(int maxResults, string nextToken, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/gateways?maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListGatewaysResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a bridge. Before you can delete a bridge, you must stop the bridge.
		/// DeleteBridge v1/bridges/{bridgeArn}
		/// </summary>
		/// <param name="bridgeArn">The ARN of the bridge that you want to delete.</param>
		/// <returns>Success</returns>
		public async Task<DeleteBridgeResponse> DeleteBridgeAsync(string bridgeArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/bridges/"+ (bridgeArn==null? "" : System.Uri.EscapeDataString(bridgeArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteBridgeResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Displays the details of a bridge.
		/// DescribeBridge v1/bridges/{bridgeArn}
		/// </summary>
		/// <param name="bridgeArn">The ARN of the bridge that you want to describe.</param>
		/// <returns>Success</returns>
		public async Task<DescribeBridgeResponse> DescribeBridgeAsync(string bridgeArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/bridges/"+ (bridgeArn==null? "" : System.Uri.EscapeDataString(bridgeArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeBridgeResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the bridge
		/// UpdateBridge v1/bridges/{bridgeArn}
		/// </summary>
		/// <param name="bridgeArn">The Amazon Resource Number (ARN) of the bridge that you want to update.</param>
		public async Task UpdateBridgeAsync(string bridgeArn, UpdateBridgePutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/bridges/"+ (bridgeArn==null? "" : System.Uri.EscapeDataString(bridgeArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a flow. Before you can delete a flow, you must stop the flow.
		/// DeleteFlow v1/flows/{flowArn}
		/// </summary>
		/// <param name="flowArn">The ARN of the flow that you want to delete.</param>
		public async Task DeleteFlowAsync(string flowArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/flows/"+ (flowArn==null? "" : System.Uri.EscapeDataString(flowArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Displays the details of a flow. The response includes the flow ARN, name, and Availability Zone, as well as details about the source, outputs, and entitlements.
		/// DescribeFlow v1/flows/{flowArn}
		/// </summary>
		/// <param name="flowArn">The ARN of the flow that you want to describe.</param>
		/// <returns>Success</returns>
		public async Task<DescribeFlowResponse> DescribeFlowAsync(string flowArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/flows/"+ (flowArn==null? "" : System.Uri.EscapeDataString(flowArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeFlowResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates flow
		/// UpdateFlow v1/flows/{flowArn}
		/// </summary>
		/// <param name="flowArn">The flow that you want to update.</param>
		public async Task UpdateFlowAsync(string flowArn, UpdateFlowPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/flows/"+ (flowArn==null? "" : System.Uri.EscapeDataString(flowArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a gateway. Before you can delete a gateway, you must deregister its instances and delete its bridges.
		/// DeleteGateway v1/gateways/{gatewayArn}
		/// </summary>
		/// <param name="gatewayArn">The ARN of the gateway that you want to delete.</param>
		/// <returns>Success</returns>
		public async Task<DeleteGatewayResponse> DeleteGatewayAsync(string gatewayArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/gateways/"+ (gatewayArn==null? "" : System.Uri.EscapeDataString(gatewayArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteGatewayResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Displays the details of a gateway. The response includes the gateway ARN, name, and CIDR blocks, as well as details about the networks.
		/// DescribeGateway v1/gateways/{gatewayArn}
		/// </summary>
		/// <param name="gatewayArn">The Amazon Resource Name (ARN) of the gateway that you want to describe.</param>
		/// <returns>Success</returns>
		public async Task<DescribeGatewayResponse> DescribeGatewayAsync(string gatewayArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/gateways/"+ (gatewayArn==null? "" : System.Uri.EscapeDataString(gatewayArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeGatewayResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deregisters an instance. Before you deregister an instance, all bridges running on the instance must be stopped. If you want to deregister an instance without stopping the bridges, you must use the --force option.
		/// DeregisterGatewayInstance v1/gateway-instances/{gatewayInstanceArn}
		/// </summary>
		/// <param name="force">Force the deregistration of an instance. Force will deregister an instance, even if there are bridges running on it.</param>
		/// <param name="gatewayInstanceArn">The Amazon Resource Name (ARN) of the gateway that contains the instance that you want to deregister.</param>
		public async Task DeregisterGatewayInstanceAsync(bool force, string gatewayInstanceArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/gateway-instances/"+ (gatewayInstanceArn==null? "" : System.Uri.EscapeDataString(gatewayInstanceArn))+"?force="+force;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Displays the details of an instance.
		/// DescribeGatewayInstance v1/gateway-instances/{gatewayInstanceArn}
		/// </summary>
		/// <param name="gatewayInstanceArn">The Amazon Resource Name (ARN) of the gateway instance that you want to describe.</param>
		/// <returns>Success</returns>
		public async Task<DescribeGatewayInstanceResponse> DescribeGatewayInstanceAsync(string gatewayInstanceArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/gateway-instances/"+ (gatewayInstanceArn==null? "" : System.Uri.EscapeDataString(gatewayInstanceArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeGatewayInstanceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the configuration of an existing Gateway Instance.
		/// UpdateGatewayInstance v1/gateway-instances/{gatewayInstanceArn}
		/// </summary>
		/// <param name="gatewayInstanceArn">The Amazon Resource Name (ARN) of the instance that you want to update.</param>
		/// <returns>Success</returns>
		public async Task<UpdateGatewayInstanceResponse> UpdateGatewayInstanceAsync(string gatewayInstanceArn, UpdateGatewayInstancePutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/gateway-instances/"+ (gatewayInstanceArn==null? "" : System.Uri.EscapeDataString(gatewayInstanceArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateGatewayInstanceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Displays the details of an offering. The response includes the offering description, duration, outbound bandwidth, price, and Amazon Resource Name (ARN).
		/// DescribeOffering v1/offerings/{offeringArn}
		/// </summary>
		/// <param name="offeringArn">The Amazon Resource Name (ARN) of the offering.</param>
		/// <returns>Success</returns>
		public async Task<DescribeOfferingResponse> DescribeOfferingAsync(string offeringArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/offerings/"+ (offeringArn==null? "" : System.Uri.EscapeDataString(offeringArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeOfferingResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Submits a request to purchase an offering. If you already have an active reservation, you can't purchase another offering.
		/// PurchaseOffering v1/offerings/{offeringArn}
		/// </summary>
		/// <param name="offeringArn">The Amazon Resource Name (ARN) of the offering.</param>
		public async Task PurchaseOfferingAsync(string offeringArn, PurchaseOfferingPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/offerings/"+ (offeringArn==null? "" : System.Uri.EscapeDataString(offeringArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Displays the details of a reservation. The response includes the reservation name, state, start date and time, and the details of the offering that make up the rest of the reservation (such as price, duration, and outbound bandwidth).
		/// DescribeReservation v1/reservations/{reservationArn}
		/// </summary>
		/// <param name="reservationArn">The Amazon Resource Name (ARN) of the reservation.</param>
		/// <returns>Success</returns>
		public async Task<DescribeReservationResponse> DescribeReservationAsync(string reservationArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/reservations/"+ (reservationArn==null? "" : System.Uri.EscapeDataString(reservationArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeReservationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Grants entitlements to an existing flow.
		/// GrantFlowEntitlements v1/flows/{flowArn}/entitlements
		/// </summary>
		/// <param name="flowArn">The flow that you want to grant entitlements on.</param>
		/// <returns>Success</returns>
		public async Task<GrantFlowEntitlementsResponse> GrantFlowEntitlementsAsync(string flowArn, GrantFlowEntitlementsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/flows/"+ (flowArn==null? "" : System.Uri.EscapeDataString(flowArn))+"/entitlements";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GrantFlowEntitlementsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Displays a list of all entitlements that have been granted to this account. This request returns 20 results per page.
		/// ListEntitlements v1/entitlements
		/// </summary>
		/// <param name="maxResults">The maximum number of results to return per API request. For example, you submit a ListEntitlements request with MaxResults set at 5. Although 20 items match your request, the service returns no more than the first 5 items. (The service also returns a NextToken value that you can use to fetch the next batch of results.) The service might return fewer results than the MaxResults value. If MaxResults is not included in the request, the service defaults to pagination with a maximum of 20 results per page.
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="nextToken">The token that identifies which batch of results that you want to see. For example, you submit a ListEntitlements request with MaxResults set at 5. The service returns the first batch of results (up to 5) and a NextToken value. To see the next batch of results, you can submit the ListEntitlements request a second time and specify the NextToken value.</param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListEntitlementsResponse> ListEntitlementsAsync(int maxResults, string nextToken, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/entitlements?maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListEntitlementsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Displays a list of instances associated with the AWS account. This request returns a paginated result. You can use the filterArn property to display only the instances associated with the selected Gateway Amazon Resource Name (ARN).
		/// ListGatewayInstances v1/gateway-instances
		/// </summary>
		/// <param name="filterArn">Filter the list results to display only the instances associated with the selected Gateway Amazon Resource Name (ARN).</param>
		/// <param name="maxResults">The maximum number of results to return per API request. For example, you submit a ListInstances request with MaxResults set at 5. Although 20 items match your request, the service returns no more than the first 5 items. (The service also returns a NextToken value that you can use to fetch the next batch of results.) The service might return fewer results than the MaxResults value. If MaxResults is not included in the request, the service defaults to pagination with a maximum of 10 results per page.
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="nextToken">The token that identifies which batch of results that you want to see. For example, you submit a ListInstances request with MaxResults set at 5. The service returns the first batch of results (up to 5) and a NextToken value. To see the next batch of results, you can submit the ListInstances request a second time and specify the NextToken value.</param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListGatewayInstancesResponse> ListGatewayInstancesAsync(string filterArn, int maxResults, string nextToken, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/gateway-instances?filterArn=" + (filterArn==null? "" : System.Uri.EscapeDataString(filterArn))+"&maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListGatewayInstancesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Displays a list of all offerings that are available to this account in the current AWS Region. If you have an active reservation (which means you've purchased an offering that has already started and hasn't expired yet), your account isn't eligible for other offerings.
		/// ListOfferings v1/offerings
		/// </summary>
		/// <param name="maxResults">The maximum number of results to return per API request. For example, you submit a ListOfferings request with MaxResults set at 5. Although 20 items match your request, the service returns no more than the first 5 items. (The service also returns a NextToken value that you can use to fetch the next batch of results.) The service might return fewer results than the MaxResults value. If MaxResults is not included in the request, the service defaults to pagination with a maximum of 10 results per page.
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="nextToken">The token that identifies which batch of results that you want to see. For example, you submit a ListOfferings request with MaxResults set at 5. The service returns the first batch of results (up to 5) and a NextToken value. To see the next batch of results, you can submit the ListOfferings request a second time and specify the NextToken value.</param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListOfferingsResponse> ListOfferingsAsync(int maxResults, string nextToken, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/offerings?maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListOfferingsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Displays a list of all reservations that have been purchased by this account in the current AWS Region. This list includes all reservations in all states (such as active and expired).
		/// ListReservations v1/reservations
		/// </summary>
		/// <param name="maxResults">The maximum number of results to return per API request. For example, you submit a ListReservations request with MaxResults set at 5. Although 20 items match your request, the service returns no more than the first 5 items. (The service also returns a NextToken value that you can use to fetch the next batch of results.) The service might return fewer results than the MaxResults value. If MaxResults is not included in the request, the service defaults to pagination with a maximum of 10 results per page.
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="nextToken">The token that identifies which batch of results that you want to see. For example, you submit a ListReservations request with MaxResults set at 5. The service returns the first batch of results (up to 5) and a NextToken value. To see the next batch of results, you can submit the ListOfferings request a second time and specify the NextToken value.</param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListReservationsResponse> ListReservationsAsync(int maxResults, string nextToken, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/reservations?maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListReservationsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all tags on an AWS Elemental MediaConnect resource
		/// ListTagsForResource tags/{resourceArn}
		/// </summary>
		/// <param name="resourceArn">The Amazon Resource Name (ARN) that identifies the AWS Elemental MediaConnect resource for which to list the tags.</param>
		/// <returns>Success</returns>
		public async Task<ListTagsForResourceResponse> ListTagsForResourceAsync(string resourceArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+ (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListTagsForResourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Associates the specified tags to a resource with the specified resourceArn. If existing tags on a resource are not specified in the request parameters, they are not changed. When a resource is deleted, the tags associated with that resource are deleted as well.
		/// TagResource tags/{resourceArn}
		/// </summary>
		/// <param name="resourceArn">The Amazon Resource Name (ARN) that identifies the AWS Elemental MediaConnect resource to which to add tags.</param>
		public async Task TagResourceAsync(string resourceArn, TagResourcePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+ (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Removes an output from a bridge.
		/// RemoveBridgeOutput v1/bridges/{bridgeArn}/outputs/{outputName}
		/// </summary>
		/// <param name="bridgeArn">The ARN of the bridge that you want to update.</param>
		/// <param name="outputName">The name of the bridge output that you want to remove.</param>
		public async Task RemoveBridgeOutputAsync(string bridgeArn, string outputName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/bridges/"+ (bridgeArn==null? "" : System.Uri.EscapeDataString(bridgeArn))+"/outputs/"+ (outputName==null? "" : System.Uri.EscapeDataString(outputName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing bridge output.
		/// UpdateBridgeOutput v1/bridges/{bridgeArn}/outputs/{outputName}
		/// </summary>
		/// <param name="bridgeArn">The ARN of the bridge that you want to update.</param>
		/// <param name="outputName">The name of the bridge output that you want to update.</param>
		public async Task UpdateBridgeOutputAsync(string bridgeArn, string outputName, UpdateBridgeOutputPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/bridges/"+ (bridgeArn==null? "" : System.Uri.EscapeDataString(bridgeArn))+"/outputs/"+ (outputName==null? "" : System.Uri.EscapeDataString(outputName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Removes a source from a bridge.
		/// RemoveBridgeSource v1/bridges/{bridgeArn}/sources/{sourceName}
		/// </summary>
		/// <param name="bridgeArn">The ARN of the bridge that you want to update.</param>
		/// <param name="sourceName">The name of the bridge source that you want to remove.</param>
		public async Task RemoveBridgeSourceAsync(string bridgeArn, string sourceName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/bridges/"+ (bridgeArn==null? "" : System.Uri.EscapeDataString(bridgeArn))+"/sources/"+ (sourceName==null? "" : System.Uri.EscapeDataString(sourceName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing bridge source.
		/// UpdateBridgeSource v1/bridges/{bridgeArn}/sources/{sourceName}
		/// </summary>
		/// <param name="bridgeArn">The ARN of the bridge that you want to update.</param>
		/// <param name="sourceName">The name of the source that you want to update.</param>
		public async Task UpdateBridgeSourceAsync(string bridgeArn, string sourceName, UpdateBridgeSourcePutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/bridges/"+ (bridgeArn==null? "" : System.Uri.EscapeDataString(bridgeArn))+"/sources/"+ (sourceName==null? "" : System.Uri.EscapeDataString(sourceName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Removes a media stream from a flow. This action is only available if the media stream is not associated with a source or output.
		/// RemoveFlowMediaStream v1/flows/{flowArn}/mediaStreams/{mediaStreamName}
		/// </summary>
		/// <param name="flowArn">The Amazon Resource Name (ARN) of the flow.</param>
		/// <param name="mediaStreamName">The name of the media stream that you want to remove.</param>
		/// <returns>Success</returns>
		public async Task<RemoveFlowMediaStreamResponse> RemoveFlowMediaStreamAsync(string flowArn, string mediaStreamName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/flows/"+ (flowArn==null? "" : System.Uri.EscapeDataString(flowArn))+"/mediaStreams/"+ (mediaStreamName==null? "" : System.Uri.EscapeDataString(mediaStreamName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RemoveFlowMediaStreamResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing media stream.
		/// UpdateFlowMediaStream v1/flows/{flowArn}/mediaStreams/{mediaStreamName}
		/// </summary>
		/// <param name="flowArn">The Amazon Resource Name (ARN) of the flow.</param>
		/// <param name="mediaStreamName">The name of the media stream that you want to update.</param>
		public async Task UpdateFlowMediaStreamAsync(string flowArn, string mediaStreamName, UpdateFlowMediaStreamPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/flows/"+ (flowArn==null? "" : System.Uri.EscapeDataString(flowArn))+"/mediaStreams/"+ (mediaStreamName==null? "" : System.Uri.EscapeDataString(mediaStreamName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Removes an output from an existing flow. This request can be made only on an output that does not have an entitlement associated with it. If the output has an entitlement, you must revoke the entitlement instead. When an entitlement is revoked from a flow, the service automatically removes the associated output.
		/// RemoveFlowOutput v1/flows/{flowArn}/outputs/{outputArn}
		/// </summary>
		/// <param name="flowArn">The flow that you want to remove an output from.</param>
		/// <param name="outputArn">The ARN of the output that you want to remove.</param>
		public async Task RemoveFlowOutputAsync(string flowArn, string outputArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/flows/"+ (flowArn==null? "" : System.Uri.EscapeDataString(flowArn))+"/outputs/"+ (outputArn==null? "" : System.Uri.EscapeDataString(outputArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing flow output.
		/// UpdateFlowOutput v1/flows/{flowArn}/outputs/{outputArn}
		/// </summary>
		/// <param name="flowArn">The flow that is associated with the output that you want to update.</param>
		/// <param name="outputArn">The ARN of the output that you want to update.</param>
		public async Task UpdateFlowOutputAsync(string flowArn, string outputArn, UpdateFlowOutputPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/flows/"+ (flowArn==null? "" : System.Uri.EscapeDataString(flowArn))+"/outputs/"+ (outputArn==null? "" : System.Uri.EscapeDataString(outputArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Removes a source from an existing flow. This request can be made only if there is more than one source on the flow.
		/// RemoveFlowSource v1/flows/{flowArn}/source/{sourceArn}
		/// </summary>
		/// <param name="flowArn">The flow that you want to remove a source from.</param>
		/// <param name="sourceArn">The ARN of the source that you want to remove.</param>
		public async Task RemoveFlowSourceAsync(string flowArn, string sourceArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/flows/"+ (flowArn==null? "" : System.Uri.EscapeDataString(flowArn))+"/source/"+ (sourceArn==null? "" : System.Uri.EscapeDataString(sourceArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the source of a flow.
		/// UpdateFlowSource v1/flows/{flowArn}/source/{sourceArn}
		/// </summary>
		/// <param name="flowArn">The flow that is associated with the source that you want to update.</param>
		/// <param name="sourceArn">The ARN of the source that you want to update.</param>
		public async Task UpdateFlowSourceAsync(string flowArn, string sourceArn, UpdateFlowSourcePutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/flows/"+ (flowArn==null? "" : System.Uri.EscapeDataString(flowArn))+"/source/"+ (sourceArn==null? "" : System.Uri.EscapeDataString(sourceArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Removes a VPC Interface from an existing flow. This request can be made only on a VPC interface that does not have a Source or Output associated with it. If the VPC interface is referenced by a Source or Output, you must first delete or update the Source or Output to no longer reference the VPC interface.
		/// RemoveFlowVpcInterface v1/flows/{flowArn}/vpcInterfaces/{vpcInterfaceName}
		/// </summary>
		/// <param name="flowArn">The flow that you want to remove a VPC interface from.</param>
		/// <param name="vpcInterfaceName">The name of the VPC interface that you want to remove.</param>
		/// <returns>Success</returns>
		public async Task<RemoveFlowVpcInterfaceResponse> RemoveFlowVpcInterfaceAsync(string flowArn, string vpcInterfaceName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/flows/"+ (flowArn==null? "" : System.Uri.EscapeDataString(flowArn))+"/vpcInterfaces/"+ (vpcInterfaceName==null? "" : System.Uri.EscapeDataString(vpcInterfaceName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RemoveFlowVpcInterfaceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Revokes an entitlement from a flow. Once an entitlement is revoked, the content becomes unavailable to the subscriber and the associated output is removed.
		/// RevokeFlowEntitlement v1/flows/{flowArn}/entitlements/{entitlementArn}
		/// </summary>
		/// <param name="entitlementArn">The ARN of the entitlement that you want to revoke.</param>
		/// <param name="flowArn">The flow that you want to revoke an entitlement from.</param>
		public async Task RevokeFlowEntitlementAsync(string entitlementArn, string flowArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/flows/"+ (flowArn==null? "" : System.Uri.EscapeDataString(flowArn))+"/entitlements/"+ (entitlementArn==null? "" : System.Uri.EscapeDataString(entitlementArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// You can change an entitlement's description, subscribers, and encryption. If you change the subscribers, the service will remove the outputs that are are used by the subscribers that are removed.
		/// UpdateFlowEntitlement v1/flows/{flowArn}/entitlements/{entitlementArn}
		/// </summary>
		/// <param name="entitlementArn">The ARN of the entitlement that you want to update.</param>
		/// <param name="flowArn">The flow that is associated with the entitlement that you want to update.</param>
		public async Task UpdateFlowEntitlementAsync(string entitlementArn, string flowArn, UpdateFlowEntitlementPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/flows/"+ (flowArn==null? "" : System.Uri.EscapeDataString(flowArn))+"/entitlements/"+ (entitlementArn==null? "" : System.Uri.EscapeDataString(entitlementArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Starts a flow.
		/// StartFlow v1/flows/start/{flowArn}
		/// </summary>
		/// <param name="flowArn">The ARN of the flow that you want to start.</param>
		public async Task StartFlowAsync(string flowArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/flows/start/"+ (flowArn==null? "" : System.Uri.EscapeDataString(flowArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Stops a flow.
		/// StopFlow v1/flows/stop/{flowArn}
		/// </summary>
		/// <param name="flowArn">The ARN of the flow that you want to stop.</param>
		public async Task StopFlowAsync(string flowArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/flows/stop/"+ (flowArn==null? "" : System.Uri.EscapeDataString(flowArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes specified tags from a resource.
		/// UntagResource tags/{resourceArn}#tagKeys
		/// </summary>
		/// <param name="resourceArn">The Amazon Resource Name (ARN) that identifies the AWS Elemental MediaConnect resource from which to delete tags.</param>
		/// <param name="tagKeys">The keys of the tags to be removed.</param>
		public async Task UntagResourceAsync(string resourceArn, string[] tagKeys, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+ (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn))+"#tagKeys&"+string.Join("&", tagKeys.Select(z => $"tagKeys={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the bridge state
		/// UpdateBridgeState v1/bridges/{bridgeArn}/state
		/// </summary>
		/// <param name="bridgeArn">The ARN of the bridge that you want to update.</param>
		public async Task UpdateBridgeStateAsync(string bridgeArn, UpdateBridgeStatePutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/bridges/"+ (bridgeArn==null? "" : System.Uri.EscapeDataString(bridgeArn))+"/state";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
	
	public class AddBridgeOutputsPostBody
	{
		
		/// <summary>
		/// The outputs that you want to add to this bridge.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="outputs")]
		public AddBridgeOutputRequest[] Outputs { get; set; }
	}
	
	public class AddBridgeSourcesPostBody
	{
		
		/// <summary>
		/// The sources that you want to add to this bridge.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sources")]
		public AddBridgeSourceRequest[] Sources { get; set; }
	}
	
	public class AddFlowMediaStreamsPostBody
	{
		
		/// <summary>
		/// The media streams that you want to add to the flow.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mediaStreams")]
		public AddMediaStreamRequest[] MediaStreams { get; set; }
	}
	
	public class AddFlowOutputsPostBody
	{
		
		/// <summary>
		/// A list of outputs that you want to add.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="outputs")]
		public AddOutputRequest[] Outputs { get; set; }
	}
	
	public class AddFlowSourcesPostBody
	{
		
		/// <summary>
		/// A list of sources that you want to add.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sources")]
		public SetSourceRequest[] Sources { get; set; }
	}
	
	public class AddFlowVpcInterfacesPostBody
	{
		
		/// <summary>
		/// A list of VPC interfaces that you want to add.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="vpcInterfaces")]
		public VpcInterfaceRequest[] VpcInterfaces { get; set; }
	}
	
	public class CreateBridgePostBody
	{
		
		/// <summary>
		/// Create a bridge with the egress bridge type. An egress bridge is a cloud-to-ground bridge. The content comes from an existing MediaConnect flow and is delivered to your premises.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="egressGatewayBridge")]
		public CreateBridgePostBodyEgressGatewayBridge EgressGatewayBridge { get; set; }
		
		/// <summary>
		/// Create a bridge with the ingress bridge type. An ingress bridge is a ground-to-cloud bridge. The content originates at your premises and is delivered to the cloud.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ingressGatewayBridge")]
		public CreateBridgePostBodyIngressGatewayBridge IngressGatewayBridge { get; set; }
		
		/// <summary>
		/// The name of the bridge. This name can not be modified after the bridge is created.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The outputs that you want to add to this bridge.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outputs")]
		public AddBridgeOutputRequest[] Outputs { get; set; }
		
		/// <summary>
		/// The bridge placement Amazon Resource Number (ARN).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="placementArn")]
		public string PlacementArn { get; set; }
		
		/// <summary>
		/// The settings for source failover.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceFailoverConfig")]
		public CreateBridgePostBodySourceFailoverConfig SourceFailoverConfig { get; set; }
		
		/// <summary>
		/// The sources that you want to add to this bridge.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sources")]
		public AddBridgeSourceRequest[] Sources { get; set; }
	}
	
	public class CreateBridgePostBodyEgressGatewayBridge
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxBitrate { get; set; }
	}
	
	public class CreateBridgePostBodyIngressGatewayBridge
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxBitrate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxOutputs { get; set; }
	}
	
	public class CreateBridgePostBodySourceFailoverConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public FailoverMode FailoverMode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> RecoveryWindow { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SourcePriority SourcePriority { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public State State { get; set; }
	}
	
	public class CreateFlowPostBody
	{
		
		/// <summary>
		/// The Availability Zone that you want to create the flow in. These options are limited to the Availability Zones within the current AWS Region.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availabilityZone")]
		public string AvailabilityZone { get; set; }
		
		/// <summary>
		/// The entitlements that you want to grant on a flow.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entitlements")]
		public GrantEntitlementRequest[] Entitlements { get; set; }
		
		/// <summary>
		/// The media streams that you want to add to the flow. You can associate these media streams with sources and outputs on the flow.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mediaStreams")]
		public AddMediaStreamRequest[] MediaStreams { get; set; }
		
		/// <summary>
		/// The name of the flow.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The outputs that you want to add to this flow.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outputs")]
		public AddOutputRequest[] Outputs { get; set; }
		
		/// <summary>
		/// The settings for the source of the flow.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source")]
		public CreateFlowPostBodySource Source { get; set; }
		
		/// <summary>
		/// The settings for source failover.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceFailoverConfig")]
		public CreateFlowPostBodySourceFailoverConfig SourceFailoverConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sources")]
		public SetSourceRequest[] Sources { get; set; }
		
		/// <summary>
		/// The VPC interfaces you want on the flow.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vpcInterfaces")]
		public VpcInterfaceRequest[] VpcInterfaces { get; set; }
		
		/// <summary>
		/// Create maintenance setting for a flow
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maintenance")]
		public CreateFlowPostBodyMaintenance Maintenance { get; set; }
	}
	
	public class CreateFlowPostBodySource
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Encryption Decryption { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EntitlementArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> IngestPort { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxBitrate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxLatency { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxSyncBuffer { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MediaStreamSourceConfigurationRequest[] MediaStreamSourceConfigurations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MinLatency { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Protocol Protocol { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SenderControlPort { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SenderIpAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceListenerAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SourceListenerPort { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StreamId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VpcInterfaceName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string WhitelistCidr { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SetGatewayBridgeSourceRequest GatewayBridgeSource { get; set; }
	}
	
	public class CreateFlowPostBodySourceFailoverConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public FailoverMode FailoverMode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> RecoveryWindow { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SourcePriority SourcePriority { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public State State { get; set; }
	}
	
	public class CreateFlowPostBodyMaintenance
	{
		
		[System.Runtime.Serialization.DataMember()]
		public MaintenanceDay MaintenanceDay { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MaintenanceStartHour { get; set; }
	}
	
	public class CreateGatewayPostBody
	{
		
		/// <summary>
		/// The range of IP addresses that are allowed to contribute content or initiate output requests for flows communicating with this gateway. These IP addresses should be in the form of a Classless Inter-Domain Routing (CIDR) block; for example, 10.0.0.0/16.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="egressCidrBlocks")]
		public string[] EgressCidrBlocks { get; set; }
		
		/// <summary>
		/// The name of the gateway. This name can not be modified after the gateway is created.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The list of networks that you want to add.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="networks")]
		public GatewayNetwork[] Networks { get; set; }
	}
	
	public class UpdateBridgePutBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="egressGatewayBridge")]
		public UpdateBridgePutBodyEgressGatewayBridge EgressGatewayBridge { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ingressGatewayBridge")]
		public UpdateBridgePutBodyIngressGatewayBridge IngressGatewayBridge { get; set; }
		
		/// <summary>
		/// The settings for source failover.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceFailoverConfig")]
		public UpdateBridgePutBodySourceFailoverConfig SourceFailoverConfig { get; set; }
	}
	
	public class UpdateBridgePutBodyEgressGatewayBridge
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxBitrate { get; set; }
	}
	
	public class UpdateBridgePutBodyIngressGatewayBridge
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxBitrate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxOutputs { get; set; }
	}
	
	public class UpdateBridgePutBodySourceFailoverConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public FailoverMode FailoverMode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> RecoveryWindow { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SourcePriority SourcePriority { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public State State { get; set; }
	}
	
	public class UpdateFlowPutBody
	{
		
		/// <summary>
		/// The settings for source failover.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceFailoverConfig")]
		public UpdateFlowPutBodySourceFailoverConfig SourceFailoverConfig { get; set; }
		
		/// <summary>
		/// Update maintenance setting for a flow
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maintenance")]
		public UpdateFlowPutBodyMaintenance Maintenance { get; set; }
	}
	
	public class UpdateFlowPutBodySourceFailoverConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public FailoverMode FailoverMode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> RecoveryWindow { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SourcePriority SourcePriority { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public State State { get; set; }
	}
	
	public class UpdateFlowPutBodyMaintenance
	{
		
		[System.Runtime.Serialization.DataMember()]
		public MaintenanceDay MaintenanceDay { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MaintenanceScheduledDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MaintenanceStartHour { get; set; }
	}
	
	public class UpdateGatewayInstancePutBody
	{
		
		/// <summary>
		/// The availability of the instance to host new bridges. The bridgePlacement property can be LOCKED or AVAILABLE. If it is LOCKED, no new bridges can be deployed to this instance. If it is AVAILABLE, new bridges can be added to this instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bridgePlacement")]
		public BridgePlacement BridgePlacement { get; set; }
	}
	
	public class PurchaseOfferingPostBody
	{
		
		/// <summary>
		/// The name that you want to use for the reservation.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reservationName")]
		public string ReservationName { get; set; }
		
		/// <summary>
		/// The date and time that you want the reservation to begin, in Coordinated Universal Time (UTC). You can specify any date and time between 12:00am on the first day of the current month to the current time on today's date, inclusive. Specify the start in a 24-hour notation. Use the following format: YYYY-MM-DDTHH:mm:SSZ, where T and Z are literal characters. For example, to specify 11:30pm on March 5, 2020, enter 2020-03-05T23:30:00Z.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="start")]
		public string Start { get; set; }
	}
	
	public class GrantFlowEntitlementsPostBody
	{
		
		/// <summary>
		/// The list of entitlements that you want to grant.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="entitlements")]
		public GrantEntitlementRequest[] Entitlements { get; set; }
	}
	
	public class TagResourcePostBody
	{
		
		/// <summary>
		/// A map from tag keys to values. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public class UpdateBridgeOutputPutBody
	{
		
		/// <summary>
		/// Update an existing network output.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="networkOutput")]
		public UpdateBridgeOutputPutBodyNetworkOutput NetworkOutput { get; set; }
	}
	
	public class UpdateBridgeOutputPutBodyNetworkOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string IpAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NetworkName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Port { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Protocol Protocol { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Ttl { get; set; }
	}
	
	public class UpdateBridgeSourcePutBody
	{
		
		/// <summary>
		/// Update the flow source of the bridge.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="flowSource")]
		public UpdateBridgeSourcePutBodyFlowSource FlowSource { get; set; }
		
		/// <summary>
		/// Update the network source of the bridge.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="networkSource")]
		public UpdateBridgeSourcePutBodyNetworkSource NetworkSource { get; set; }
	}
	
	public class UpdateBridgeSourcePutBodyFlowSource
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string FlowArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VpcInterfaceAttachment FlowVpcInterfaceAttachment { get; set; }
	}
	
	public class UpdateBridgeSourcePutBodyNetworkSource
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string MulticastIp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NetworkName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Port { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Protocol Protocol { get; set; }
	}
	
	public class UpdateFlowMediaStreamPutBody
	{
		
		/// <summary>
		/// Attributes that are related to the media stream.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public UpdateFlowMediaStreamPutBodyAttributes Attributes { get; set; }
		
		/// <summary>
		/// The sample rate (in Hz) for the stream. If the media stream type is video or ancillary data, set this value to 90000. If the media stream type is audio, set this value to either 48000 or 96000.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clockRate")]
		public System.Nullable<System.Int32> ClockRate { get; set; }
		
		/// <summary>
		/// Description
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The type of media stream.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mediaStreamType")]
		public System.Nullable<UpdateFlowMediaStreamPutBodyMediaStreamType> MediaStreamType { get; set; }
		
		/// <summary>
		/// The resolution of the video.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="videoFormat")]
		public string VideoFormat { get; set; }
	}
	
	public class UpdateFlowMediaStreamPutBodyAttributes
	{
		
		[System.Runtime.Serialization.DataMember()]
		public FmtpRequest Fmtp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Lang { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum UpdateFlowMediaStreamPutBodyMediaStreamType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="video")]
		video = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="audio")]
		audio = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ancillary-data")]
		ancillaryMinusdata = 2,
	}
	
	public class UpdateFlowOutputPutBody
	{
		
		/// <summary>
		/// The range of IP addresses that should be allowed to initiate output requests to this flow. These IP addresses should be in the form of a Classless Inter-Domain Routing (CIDR) block; for example, 10.0.0.0/16.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cidrAllowList")]
		public string[] CidrAllowList { get; set; }
		
		/// <summary>
		/// A description of the output. This description appears only on the AWS Elemental MediaConnect console and will not be seen by the end user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The IP address where you want to send the output.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destination")]
		public string Destination { get; set; }
		
		/// <summary>
		/// Information about the encryption of the flow.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="encryption")]
		public UpdateFlowOutputPutBodyEncryption Encryption { get; set; }
		
		/// <summary>
		/// The maximum latency in milliseconds. This parameter applies only to RIST-based, Zixi-based, and Fujitsu-based streams.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxLatency")]
		public System.Nullable<System.Int32> MaxLatency { get; set; }
		
		/// <summary>
		/// The media streams that are associated with the output, and the parameters for those associations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mediaStreamOutputConfigurations")]
		public MediaStreamOutputConfigurationRequest[] MediaStreamOutputConfigurations { get; set; }
		
		/// <summary>
		/// The minimum latency in milliseconds for SRT-based streams. In streams that use the SRT protocol, this value that you set on your MediaConnect source or output represents the minimal potential latency of that connection. The latency of the stream is set to the highest number between the sender’s minimum latency and the receiver’s minimum latency.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minLatency")]
		public System.Nullable<System.Int32> MinLatency { get; set; }
		
		/// <summary>
		/// The port to use when content is distributed to this output.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="port")]
		public System.Nullable<System.Int32> Port { get; set; }
		
		/// <summary>
		/// The protocol to use for the output.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="protocol")]
		public System.Nullable<UpdateFlowOutputPutBodyProtocol> Protocol { get; set; }
		
		/// <summary>
		/// The remote ID for the Zixi-pull stream.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="remoteId")]
		public string RemoteId { get; set; }
		
		/// <summary>
		/// The port that the flow uses to send outbound requests to initiate connection with the sender.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="senderControlPort")]
		public System.Nullable<System.Int32> SenderControlPort { get; set; }
		
		/// <summary>
		/// The IP address that the flow communicates with to initiate connection with the sender.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="senderIpAddress")]
		public string SenderIpAddress { get; set; }
		
		/// <summary>
		/// The smoothing latency in milliseconds for RIST, RTP, and RTP-FEC streams.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="smoothingLatency")]
		public System.Nullable<System.Int32> SmoothingLatency { get; set; }
		
		/// <summary>
		/// The stream ID that you want to use for this transport. This parameter applies only to Zixi and SRT caller-based streams.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="streamId")]
		public string StreamId { get; set; }
		
		/// <summary>
		/// The settings for attaching a VPC interface to an resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vpcInterfaceAttachment")]
		public UpdateFlowOutputPutBodyVpcInterfaceAttachment VpcInterfaceAttachment { get; set; }
	}
	
	public class UpdateFlowOutputPutBodyEncryption
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Algorithm Algorithm { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ConstantInitializationVector { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DeviceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public KeyType KeyType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Region { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SecretArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum UpdateFlowOutputPutBodyProtocol
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="zixi-push")]
		zixiMinuspush = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="rtp-fec")]
		rtpMinusfec = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="rtp")]
		rtp = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="zixi-pull")]
		zixiMinuspull = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="rist")]
		rist = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="st2110-jpegxs")]
		st2110Minusjpegxs = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cdi")]
		cdi = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="srt-listener")]
		srtMinuslistener = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="srt-caller")]
		srtMinuscaller = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fujitsu-qos")]
		fujitsuMinusqos = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="udp")]
		udp = 10,
	}
	
	public class UpdateFlowOutputPutBodyVpcInterfaceAttachment
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string VpcInterfaceName { get; set; }
	}
	
	public class UpdateFlowSourcePutBody
	{
		
		/// <summary>
		/// Information about the encryption of the flow.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="decryption")]
		public UpdateFlowSourcePutBodyDecryption Decryption { get; set; }
		
		/// <summary>
		/// A description for the source. This value is not used or seen outside of the current AWS Elemental MediaConnect account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The ARN of the entitlement that allows you to subscribe to this flow. The entitlement is set by the flow originator, and the ARN is generated as part of the originator's flow.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entitlementArn")]
		public string EntitlementArn { get; set; }
		
		/// <summary>
		/// The port that the flow will be listening on for incoming content.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ingestPort")]
		public System.Nullable<System.Int32> IngestPort { get; set; }
		
		/// <summary>
		/// The smoothing max bitrate (in bps) for RIST, RTP, and RTP-FEC streams.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxBitrate")]
		public System.Nullable<System.Int32> MaxBitrate { get; set; }
		
		/// <summary>
		/// The maximum latency in milliseconds. This parameter applies only to RIST-based, Zixi-based, and Fujitsu-based streams.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxLatency")]
		public System.Nullable<System.Int32> MaxLatency { get; set; }
		
		/// <summary>
		/// The size of the buffer (in milliseconds) to use to sync incoming source data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxSyncBuffer")]
		public System.Nullable<System.Int32> MaxSyncBuffer { get; set; }
		
		/// <summary>
		/// The media streams that are associated with the source, and the parameters for those associations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mediaStreamSourceConfigurations")]
		public MediaStreamSourceConfigurationRequest[] MediaStreamSourceConfigurations { get; set; }
		
		/// <summary>
		/// The minimum latency in milliseconds for SRT-based streams. In streams that use the SRT protocol, this value that you set on your MediaConnect source or output represents the minimal potential latency of that connection. The latency of the stream is set to the highest number between the sender’s minimum latency and the receiver’s minimum latency.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minLatency")]
		public System.Nullable<System.Int32> MinLatency { get; set; }
		
		/// <summary>
		/// The protocol that is used by the source.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="protocol")]
		public System.Nullable<UpdateFlowSourcePutBodyProtocol> Protocol { get; set; }
		
		/// <summary>
		/// The port that the flow uses to send outbound requests to initiate connection with the sender.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="senderControlPort")]
		public System.Nullable<System.Int32> SenderControlPort { get; set; }
		
		/// <summary>
		/// The IP address that the flow communicates with to initiate connection with the sender.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="senderIpAddress")]
		public string SenderIpAddress { get; set; }
		
		/// <summary>
		/// Source IP or domain name for SRT-caller protocol.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceListenerAddress")]
		public string SourceListenerAddress { get; set; }
		
		/// <summary>
		/// Source port for SRT-caller protocol.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceListenerPort")]
		public System.Nullable<System.Int32> SourceListenerPort { get; set; }
		
		/// <summary>
		/// The stream ID that you want to use for this transport. This parameter applies only to Zixi and SRT caller-based streams.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="streamId")]
		public string StreamId { get; set; }
		
		/// <summary>
		/// The name of the VPC interface to use for this source.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vpcInterfaceName")]
		public string VpcInterfaceName { get; set; }
		
		/// <summary>
		/// The range of IP addresses that should be allowed to contribute content to your source. These IP addresses should be in the form of a Classless Inter-Domain Routing (CIDR) block; for example, 10.0.0.0/16.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="whitelistCidr")]
		public string WhitelistCidr { get; set; }
		
		/// <summary>
		/// The source configuration for cloud flows receiving a stream from a bridge.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gatewayBridgeSource")]
		public UpdateFlowSourcePutBodyGatewayBridgeSource GatewayBridgeSource { get; set; }
	}
	
	public class UpdateFlowSourcePutBodyDecryption
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Algorithm Algorithm { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ConstantInitializationVector { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DeviceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public KeyType KeyType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Region { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SecretArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum UpdateFlowSourcePutBodyProtocol
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="zixi-push")]
		zixiMinuspush = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="rtp-fec")]
		rtpMinusfec = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="rtp")]
		rtp = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="zixi-pull")]
		zixiMinuspull = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="rist")]
		rist = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="st2110-jpegxs")]
		st2110Minusjpegxs = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cdi")]
		cdi = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="srt-listener")]
		srtMinuslistener = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="srt-caller")]
		srtMinuscaller = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fujitsu-qos")]
		fujitsuMinusqos = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="udp")]
		udp = 10,
	}
	
	public class UpdateFlowSourcePutBodyGatewayBridgeSource
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string BridgeArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VpcInterfaceAttachment VpcInterfaceAttachment { get; set; }
	}
	
	public class UpdateFlowEntitlementPutBody
	{
		
		/// <summary>
		/// A description of the entitlement. This description appears only on the AWS Elemental MediaConnect console and will not be seen by the subscriber or end user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Information about the encryption of the flow.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="encryption")]
		public UpdateFlowEntitlementPutBodyEncryption Encryption { get; set; }
		
		/// <summary>
		/// An indication of whether you want to enable the entitlement to allow access, or disable it to stop streaming content to the subscriber’s flow temporarily. If you don’t specify the entitlementStatus field in your request, MediaConnect leaves the value unchanged.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entitlementStatus")]
		public State EntitlementStatus { get; set; }
		
		/// <summary>
		/// The AWS account IDs that you want to share your content with. The receiving accounts (subscribers) will be allowed to create their own flow using your content as the source.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subscribers")]
		public string[] Subscribers { get; set; }
	}
	
	public class UpdateFlowEntitlementPutBodyEncryption
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Algorithm Algorithm { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ConstantInitializationVector { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DeviceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public KeyType KeyType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Region { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SecretArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Url { get; set; }
	}
	
	public class UpdateBridgeStatePutBody
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="desiredState")]
		public DesiredState DesiredState { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
