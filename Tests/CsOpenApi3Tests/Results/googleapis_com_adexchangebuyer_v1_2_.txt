//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Configuration data for an Ad Exchange buyer account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Account
	{
		
		/// <summary>
		/// Your bidder locations that have distinct URLs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bidderLocation")]
		public AccountBidderLocation[] AccountBidderLocation { get; set; }
		
		/// <summary>
		/// The nid parameter value used in cookie match requests. Please contact your technical account manager if you need to change this.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cookieMatchingNid")]
		public string CookieMatchingNid { get; set; }
		
		/// <summary>
		/// The base URL used in cookie match requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cookieMatchingUrl")]
		public string CookieMatchingUrl { get; set; }
		
		/// <summary>
		/// Account id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Resource type.
		/// </summary>
		[System.ComponentModel.DefaultValue("adexchangebuyer#account")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "adexchangebuyer#account";
		
		/// <summary>
		/// The maximum number of active creatives that an account can have, where a creative is active if it was inserted or bid with in the last 30 days. Please contact your technical account manager if you need to change this.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maximumActiveCreatives")]
		public System.Nullable<System.Int32> MaximumActiveCreatives { get; set; }
		
		/// <summary>
		/// The sum of all bidderLocation.maximumQps values cannot exceed this. Please contact your technical account manager if you need to change this.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maximumTotalQps")]
		public System.Nullable<System.Int32> MaximumTotalQps { get; set; }
		
		/// <summary>
		/// The number of creatives that this account inserted or bid with in the last 30 days.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numberActiveCreatives")]
		public System.Nullable<System.Int32> NumberActiveCreatives { get; set; }
	}
	
	public class AccountBidderLocation
	{
		
		/// <summary>
		/// The maximum queries per second the Ad Exchange will send.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maximumQps")]
		public System.Nullable<System.Int32> MaximumQps { get; set; }
		
		/// <summary>
		/// The geographical region the Ad Exchange should send requests from. Only used by some quota systems, but always setting the value is recommended. Allowed values:  
		///- ASIA 
		///- EUROPE 
		///- US_EAST 
		///- US_WEST
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="region")]
		public string Region { get; set; }
		
		/// <summary>
		/// The URL to which the Ad Exchange will send bid requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	/// <summary>
	/// An account feed lists Ad Exchange buyer accounts that the user has access to. Each entry in the feed corresponds to a single buyer account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AccountsList
	{
		
		/// <summary>
		/// A list of accounts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Account[] Items { get; set; }
		
		/// <summary>
		/// Resource type.
		/// </summary>
		[System.ComponentModel.DefaultValue("adexchangebuyer#accountsList")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "adexchangebuyer#accountsList";
	}
	
	/// <summary>
	/// A creative and its classification data.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Creative
	{
		
		/// <summary>
		/// The HTML snippet that displays the ad when inserted in the web page. If set, videoURL should not be set.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string HTMLSnippet { get; set; }
		
		/// <summary>
		/// Account id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public System.Nullable<System.Int32> AccountId { get; set; }
		
		/// <summary>
		/// Detected advertiser id, if any. Read-only. This field should not be set in requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="advertiserId")]
		public string[] AdvertiserId { get; set; }
		
		/// <summary>
		/// The name of the company being advertised in the creative.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="advertiserName")]
		public string AdvertiserName { get; set; }
		
		/// <summary>
		/// The agency id for this creative.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="agencyId")]
		public string AgencyId { get; set; }
		
		/// <summary>
		/// The last upload timestamp of this creative if it was uploaded via API. Read-only. The value of this field is generated, and will be ignored for uploads. (formatted RFC 3339 timestamp).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apiUploadTimestamp")]
		public System.Nullable<System.DateTimeOffset> ApiUploadTimestamp { get; set; }
		
		/// <summary>
		/// All attributes for the ads that may be shown from this snippet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attribute")]
		public int[] Attribute { get; set; }
		
		/// <summary>
		/// A buyer-specific id identifying the creative in this ad.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buyerCreativeId")]
		public string BuyerCreativeId { get; set; }
		
		/// <summary>
		/// The set of destination urls for the snippet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clickThroughUrl")]
		public string[] ClickThroughUrl { get; set; }
		
		/// <summary>
		/// Shows any corrections that were applied to this creative. Read-only. This field should not be set in requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="corrections")]
		public CreativeCorrections[] CreativeCorrections { get; set; }
		
		/// <summary>
		/// The reasons for disapproval, if any. Note that not all disapproval reasons may be categorized, so it is possible for the creative to have a status of DISAPPROVED with an empty list for disapproval_reasons. In this case, please reach out to your TAM to help debug the issue. Read-only. This field should not be set in requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disapprovalReasons")]
		public CreativeDisapprovalReasons[] CreativeDisapprovalReasons { get; set; }
		
		/// <summary>
		/// The filtering reasons for the creative. Read-only. This field should not be set in requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filteringReasons")]
		public CreativeFilteringReasons FilteringReasons { get; set; }
		
		/// <summary>
		/// Ad height.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="height")]
		public System.Nullable<System.Int32> Height { get; set; }
		
		/// <summary>
		/// The set of urls to be called to record an impression.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="impressionTrackingUrl")]
		public string[] ImpressionTrackingUrl { get; set; }
		
		/// <summary>
		/// Resource type.
		/// </summary>
		[System.ComponentModel.DefaultValue("adexchangebuyer#creative")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "adexchangebuyer#creative";
		
		/// <summary>
		/// Detected product categories, if any. Read-only. This field should not be set in requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productCategories")]
		public int[] ProductCategories { get; set; }
		
		/// <summary>
		/// All restricted categories for the ads that may be shown from this snippet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="restrictedCategories")]
		public int[] RestrictedCategories { get; set; }
		
		/// <summary>
		/// Detected sensitive categories, if any. Read-only. This field should not be set in requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sensitiveCategories")]
		public int[] SensitiveCategories { get; set; }
		
		/// <summary>
		/// Creative serving status. Read-only. This field should not be set in requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// All vendor types for the ads that may be shown from this snippet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vendorType")]
		public int[] VendorType { get; set; }
		
		/// <summary>
		/// The version for this creative. Read-only. This field should not be set in requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<System.Int32> Version { get; set; }
		
		/// <summary>
		/// The url to fetch a video ad. If set, HTMLSnippet should not be set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="videoURL")]
		public string VideoURL { get; set; }
		
		/// <summary>
		/// Ad width.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="width")]
		public System.Nullable<System.Int32> Width { get; set; }
	}
	
	public class CreativeCorrections
	{
		
		/// <summary>
		/// Additional details about the correction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string[] Details { get; set; }
		
		/// <summary>
		/// The type of correction that was applied to the creative.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
	}
	
	public class CreativeDisapprovalReasons
	{
		
		/// <summary>
		/// Additional details about the reason for disapproval.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string[] Details { get; set; }
		
		/// <summary>
		/// The categorized reason for disapproval.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
	}
	
	public class CreativeFilteringReasons
	{
		
		/// <summary>
		/// The date in ISO 8601 format for the data. The data is collected from 00:00:00 to 23:59:59 in PST.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date")]
		public string Date { get; set; }
		
		/// <summary>
		/// The filtering reasons.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reasons")]
		public CreativeFilteringReasonsReasons[] CreativeFilteringReasonsReasons { get; set; }
	}
	
	public class CreativeFilteringReasonsReasons
	{
		
		/// <summary>
		/// The number of times the creative was filtered for the status. The count is aggregated across all publishers on the exchange.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filteringCount")]
		public string FilteringCount { get; set; }
		
		/// <summary>
		/// The filtering status code. Please refer to the creative-status-codes.txt file for different statuses.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filteringStatus")]
		public System.Nullable<System.Int32> FilteringStatus { get; set; }
	}
	
	/// <summary>
	/// The creatives feed lists the active creatives for the Ad Exchange buyer accounts that the user has access to. Each entry in the feed corresponds to a single creative.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreativesList
	{
		
		/// <summary>
		/// A list of creatives.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Creative[] Items { get; set; }
		
		/// <summary>
		/// Resource type.
		/// </summary>
		[System.ComponentModel.DefaultValue("adexchangebuyer#creativesList")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "adexchangebuyer#creativesList";
		
		/// <summary>
		/// Continuation token used to page through creatives. To retrieve the next page of results, set the next request's "pageToken" value to this.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Retrieves the authenticated user's list of accounts.
		/// Adexchangebuyer_accounts_list accounts
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<AccountsList> Adexchangebuyer_accounts_listAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "accounts";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AccountsList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets one account by ID.
		/// Adexchangebuyer_accounts_get accounts/{id}
		/// </summary>
		/// <param name="id">The account id</param>
		/// <returns>Successful response</returns>
		public async Task<Account> Adexchangebuyer_accounts_getAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "accounts/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Account>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing account. This method supports patch semantics.
		/// Adexchangebuyer_accounts_patch accounts/{id}
		/// </summary>
		/// <param name="id">The account id</param>
		/// <returns>Successful response</returns>
		public async Task<Account> Adexchangebuyer_accounts_patchAsync(int id, Account requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "accounts/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Account>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates an existing account.
		/// Adexchangebuyer_accounts_update accounts/{id}
		/// </summary>
		/// <param name="id">The account id</param>
		/// <returns>Successful response</returns>
		public async Task<Account> Adexchangebuyer_accounts_updateAsync(int id, Account requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "accounts/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Account>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of the authenticated user's active creatives. A creative will be available 30-40 minutes after submission.
		/// Adexchangebuyer_creatives_list creatives
		/// </summary>
		/// <param name="maxResults">Maximum number of entries returned on one result page. If not set, the default is 100. Optional.</param>
		/// <param name="pageToken">A continuation token, used to page through ad clients. To retrieve the next page, set this parameter to the value of "nextPageToken" from the previous response. Optional.</param>
		/// <param name="statusFilter">When specified, only creatives having the given status are returned.</param>
		/// <returns>Successful response</returns>
		public async Task<CreativesList> Adexchangebuyer_creatives_listAsync(int maxResults, string pageToken, Adexchangebuyer_creatives_listStatusFilter statusFilter, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "creatives?maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&statusFilter=" + statusFilter;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreativesList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Submit a new creative.
		/// Adexchangebuyer_creatives_insert creatives
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<Creative> Adexchangebuyer_creatives_insertAsync(Creative requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "creatives";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Creative>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets the status for a single creative. A creative will be available 30-40 minutes after submission.
		/// Adexchangebuyer_creatives_get creatives/{accountId}/{buyerCreativeId}
		/// </summary>
		/// <param name="accountId">The id for the account that will serve this creative.</param>
		/// <param name="buyerCreativeId">The buyer-specific id for this creative.</param>
		/// <returns>Successful response</returns>
		public async Task<Creative> Adexchangebuyer_creatives_getAsync(int accountId, string buyerCreativeId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "creatives/"+accountId+"/"+ (buyerCreativeId==null? "" : System.Uri.EscapeDataString(buyerCreativeId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Creative>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum Adexchangebuyer_creatives_listStatusFilter
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="approved")]
		approved = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="disapproved")]
		disapproved = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="not_checked")]
		not_checked = 2,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
