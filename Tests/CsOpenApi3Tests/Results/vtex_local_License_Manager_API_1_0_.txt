//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Successful response for `/api/vlm/account`
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccountResponse
	{
		
		/// <summary>
		/// Account name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountName")]
		public string AccountName { get; set; }
		
		/// <summary>
		/// Address of contact
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address")]
		public string Address { get; set; }
		
		/// <summary>
		/// Deprecated. Check appKeys object for all appKeys
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appKey")]
		public AccountResponseAppKey AppKey { get; set; }
		
		/// <summary>
		/// Array of application keys
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appKeys")]
		public AppKeyItems[] AppKeys { get; set; }
		
		/// <summary>
		/// City of contact
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		/// <summary>
		/// CNPJ (Tax ID) of account
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cnpj")]
		public string Cnpj { get; set; }
		
		/// <summary>
		/// Company name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="companyName")]
		public string CompanyName { get; set; }
		
		/// <summary>
		/// Additional address of contact
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="complement")]
		public string Complement { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contact")]
		public AccountResponseContact Contact { get; set; }
		
		/// <summary>
		/// Country of contact
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// The date when the account was created
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creationDate")]
		public System.Nullable<System.DateTimeOffset> CreationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultUrl")]
		public string DefaultUrl { get; set; }
		
		/// <summary>
		/// Neighborhood of contact
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="district")]
		public string District { get; set; }
		
		/// <summary>
		/// If logo has been setup
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hasLogo")]
		public System.Nullable<System.Boolean> HasLogo { get; set; }
		
		/// <summary>
		/// If it has a parent account
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="haveParentAccount")]
		public System.Nullable<System.Boolean> HaveParentAccount { get; set; }
		
		/// <summary>
		/// Hosts of all stores
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hosts")]
		public string[] Hosts { get; set; }
		
		/// <summary>
		/// ID of the account
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The date when the account was deactivated
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inactivationDate")]
		public System.Nullable<System.DateTimeOffset> InactivationDate { get; set; }
		
		/// <summary>
		/// If account is active or not
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public System.Nullable<System.Boolean> IsActive { get; set; }
		
		/// <summary>
		/// If it is in production
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isOperating")]
		public System.Nullable<System.Boolean> IsOperating { get; set; }
		
		/// <summary>
		/// Licenses of the account
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="licenses")]
		public LicenseItems[] Licenses { get; set; }
		
		/// <summary>
		/// Filename of account logo
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logo")]
		public string Logo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lv")]
		public string Lv { get; set; }
		
		/// <summary>
		/// Trading name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Number of the address of contact
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="number")]
		public string Number { get; set; }
		
		/// <summary>
		/// The date when the account went into production
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operationDate")]
		public System.Nullable<System.DateTimeOffset> OperationDate { get; set; }
		
		/// <summary>
		/// The ID of the parent account
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parentAccountId")]
		public string ParentAccountId { get; set; }
		
		/// <summary>
		/// The name of the parent account
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parentAccountName")]
		public string ParentAccountName { get; set; }
		
		/// <summary>
		/// Zip Code of contact
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postalCode")]
		public string PostalCode { get; set; }
		
		/// <summary>
		/// Array of objects representing a store
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sites")]
		public SiteItems[] Sites { get; set; }
		
		/// <summary>
		/// Object representing the sponsor user
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sponsor")]
		public AccountResponseSponsor Sponsor { get; set; }
		
		/// <summary>
		/// State/Province of contact
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		/// <summary>
		/// Telephone of contact
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="telephone")]
		public string Telephone { get; set; }
		
		/// <summary>
		/// Trading name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tradingName")]
		public string TradingName { get; set; }
	}
	
	public class AccountResponseAppKey
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="token")]
		public string Token { get; set; }
	}
	
	/// <summary>
	/// Object representing application keys
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AppKeyItems
	{
		
		/// <summary>
		/// AppKey (Access Key in the license manager UI)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appKey")]
		public string AppKey { get; set; }
		
		/// <summary>
		/// AppToken. For security reasons, should always be null.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appToken")]
		public string AppToken { get; set; }
		
		/// <summary>
		/// Creation date of the application key
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdIn")]
		public System.Nullable<System.DateTimeOffset> CreatedIn { get; set; }
		
		/// <summary>
		/// ID of the application key
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// If the application key is active
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public System.Nullable<System.Boolean> IsActive { get; set; }
		
		/// <summary>
		/// If the application key is blocked
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isBlocked")]
		public System.Nullable<System.Boolean> IsBlocked { get; set; }
		
		/// <summary>
		/// Label of the application key
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
	}
	
	public class AccountResponseContact
	{
		
		/// <summary>
		/// Email of the contact
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// Name of the contact
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Phone of the contact
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phone")]
		public string Phone { get; set; }
	}
	
	/// <summary>
	/// Object representing licenses
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LicenseItems
	{
		
		[System.Runtime.Serialization.DataMember(Name="expiration")]
		public System.Nullable<System.DateTimeOffset> Expiration { get; set; }
		
		/// <summary>
		/// ID of the category of the license
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Double> Id { get; set; }
		
		/// <summary>
		/// If the license is purchased
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isPurchased")]
		public System.Nullable<System.Boolean> IsPurchased { get; set; }
		
		/// <summary>
		/// Name of the category of the license
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Array of products
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="products")]
		public LicenseItemsProducts[] LicenseItemsProducts { get; set; }
	}
	
	public class LicenseItemsProducts
	{
		
		[System.Runtime.Serialization.DataMember(Name="domains")]
		public string[] Domains { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endpoints")]
		public LicenseItemsProductsEndpoints Endpoints { get; set; }
		
		/// <summary>
		/// ID of the product
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Double> Id { get; set; }
		
		/// <summary>
		/// Name of the product
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	public class LicenseItemsProductsEndpoints
	{
		
		[System.Runtime.Serialization.DataMember(Name="consoleUrl")]
		public string ConsoleUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="webApiUrl")]
		public string WebApiUrl { get; set; }
	}
	
	/// <summary>
	/// Object containing complete information from a store
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SiteItems
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string LV { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="aliases")]
		public string[] Aliases { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="domains")]
		public string[] Domains { get; set; }
		
		/// <summary>
		/// Hosts associated to the store
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hosts")]
		public string[] Hosts { get; set; }
		
		/// <summary>
		/// ID of the store
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Double> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="logo")]
		public string Logo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="monetaryUnitId")]
		public System.Nullable<System.Double> MonetaryUnitId { get; set; }
		
		/// <summary>
		/// Store name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Trading name of the store
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tradingName")]
		public string TradingName { get; set; }
	}
	
	public class AccountResponseSponsor
	{
		
		/// <summary>
		/// Email of the sponsor user
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// Name of the sponsor user
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Phone of the sponsor user
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phone")]
		public string Phone { get; set; }
	}
	
	/// <summary>
	/// Request body for creating users
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateUserRequest
	{
		
		/// <summary>
		/// Email of the user
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// Name of the user
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Request body for creating new application key (/api/vlm/appkeys)
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreatenewappkeyRequest
	{
		
		/// <summary>
		/// Label for application key
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
	}
	
	/// <summary>
	/// Response body of sucessful call to /api/vlm/appkeys
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreatenewappkeyResponse
	{
		
		/// <summary>
		/// AppKey (Access Key in the license manager UI)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="appKey")]
		public string AppKey { get; set; }
		
		/// <summary>
		/// Secret of application key
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="appToken")]
		public string AppToken { get; set; }
		
		/// <summary>
		/// Date of creation of application key
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="createdIn")]
		public System.DateTimeOffset CreatedIn { get; set; }
		
		/// <summary>
		/// ID of application key
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// If the application key is active
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public bool IsActive { get; set; }
		
		/// <summary>
		/// Label for application key
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
	}
	
	/// <summary>
	/// Response body for getting all application keys from the account
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Getappkeysfromaccount
	{
		
		/// <summary>
		/// AppKey (Access Key in the license manager UI)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="appKey")]
		public string AppKey { get; set; }
		
		/// <summary>
		/// Date of creation of application key
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="createdIn")]
		public System.DateTimeOffset CreatedIn { get; set; }
		
		/// <summary>
		/// ID of application key
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// If the application key is active
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public bool IsActive { get; set; }
		
		/// <summary>
		/// Label for application key
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
	}
	
	/// <summary>
	/// Response body for listing all roles
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListRolesResponse
	{
		
		/// <summary>
		/// Array of role objects
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public RoleItems[] Items { get; set; }
		
		/// <summary>
		/// Paging object
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paging")]
		public Paging Paging { get; set; }
	}
	
	/// <summary>
	/// Object representing roles
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RoleItems
	{
		
		/// <summary>
		/// ID of the role
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// If the role is admin
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isAdmin")]
		public System.Nullable<System.Boolean> IsAdmin { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="logins")]
		public string Logins { get; set; }
		
		/// <summary>
		/// Name of the role
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Array of product objects
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="products")]
		public ProductItems[] Products { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resources")]
		public string Resources { get; set; }
		
		/// <summary>
		/// Returns 1 for custom roles, and 0 otherwise
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="roleType")]
		public System.Nullable<System.Int32> RoleType { get; set; }
	}
	
	/// <summary>
	/// Object representing products
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProductItems
	{
		
		[System.Runtime.Serialization.DataMember(Name="categoryId")]
		public string CategoryId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="categoryName")]
		public string CategoryName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="consoleUrlMask")]
		public string ConsoleUrlMask { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Name of the product
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="productResources")]
		public string ProductResources { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="urlConfiguration")]
		public string UrlConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="webApiUrlMask")]
		public string WebApiUrlMask { get; set; }
	}
	
	/// <summary>
	/// Paging object
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Paging
	{
		
		/// <summary>
		/// Current page number
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="page")]
		public int Page { get; set; }
		
		/// <summary>
		/// Total of pages
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pages")]
		public int Pages { get; set; }
		
		/// <summary>
		/// Items per page
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="perPage")]
		public int PerPage { get; set; }
		
		/// <summary>
		/// Total of items
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="total")]
		public int Total { get; set; }
	}
	
	/// <summary>
	/// Response body for listing all users
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListUsersResponse
	{
		
		/// <summary>
		/// Array of user objects
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public UserItems[] Items { get; set; }
		
		/// <summary>
		/// Paging object
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paging")]
		public Paging Paging { get; set; }
	}
	
	/// <summary>
	/// Object representing users
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UserItems
	{
		
		/// <summary>
		/// Array of account names
		/// Maximum items: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountNames")]
		[System.ComponentModel.DataAnnotations.MaxLength(0)]
		public string[] AccountNames { get; set; }
		
		/// <summary>
		/// Email of the user
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// ID of the user
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// If user is admin
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isAdmin")]
		public System.Nullable<System.Boolean> IsAdmin { get; set; }
		
		/// <summary>
		/// If user is blocked
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isBlocked")]
		public System.Nullable<System.Boolean> IsBlocked { get; set; }
		
		/// <summary>
		/// For internal use only
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isReliable")]
		public System.Nullable<System.Boolean> IsReliable { get; set; }
		
		/// <summary>
		/// Name of the user
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Array of roles
		/// Maximum items: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="roles")]
		[System.ComponentModel.DataAnnotations.MaxLength(0)]
		public string[] Roles { get; set; }
	}
	
	/// <summary>
	/// Object containing summarized information from a store
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StoreItems
	{
		
		/// <summary>
		/// Array of hosts corresponding to the store
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hosts")]
		public string[] Hosts { get; set; }
		
		/// <summary>
		/// ID of the store
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Double> Id { get; set; }
		
		/// <summary>
		/// Name of the store
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Request body for activating/deactivating application keys
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateappkeyRequest
	{
		
		/// <summary>
		/// If the application key should be active or inactive
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public bool IsActive { get; set; }
	}
	
	/// <summary>
	/// Object representing VLMError
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VLMError
	{
		
		/// <summary>
		/// Details of error
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Detais { get; set; }
		
		/// <summary>
		/// Status code of HTTP response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> HttpStatusCode { get; set; }
		
		/// <summary>
		/// Error message
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
		
		/// <summary>
		/// Error code for License Manager
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> VLMErrorCode { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Get List of Users
		/// Returns a list of registered users. The response is divided in pages. The query parameter `numItems` defines the number of items in each page, and consequently the amount of pages for the whole list.
		/// GetListUsers api/license-manager/site/pvt/logins/list/paged
		/// </summary>
		/// <param name="numItems">Number of items in the returned page</param>
		/// <param name="pageNumber">Which page from the whole list will be returned</param>
		/// <param name="sort">Chooses the field that the list will be sorted by</param>
		/// <param name="sortType">Defines the sorting order. `ASC` is used for ascendant order. `DSC` is used for descendant order</param>
		/// <returns>Success</returns>
		public async Task<ListUsersResponse> GetListUsersAsync(int numItems, int pageNumber, string sort, string sortType, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/license-manager/site/pvt/logins/list/paged?numItems="+numItems+"&pageNumber="+pageNumber+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort))+"&sortType=" + (sortType==null? "" : System.Uri.EscapeDataString(sortType));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListUsersResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get List of Roles
		/// Returns a list of available roles. The response is divided in pages. The query parameter `numItems` defines the number of items in each page, and consequently the amount of pages for the whole list.
		/// GetListRoles api/license-manager/site/pvt/roles/list/paged
		/// </summary>
		/// <param name="numItems">Number of items in the returned page</param>
		/// <param name="pageNumber">Which page from the whole list will be returned</param>
		/// <param name="sort">Chooses the field that the list will be sorted by</param>
		/// <param name="sortType">Defines the sorting order. ASC is used for ascendant order. DSC is used for descendant order</param>
		/// <returns>Success</returns>
		public async Task<ListRolesResponse> GetListRolesAsync(int numItems, int pageNumber, string sort, string sortType, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/license-manager/site/pvt/roles/list/paged?numItems="+numItems+"&pageNumber="+pageNumber+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort))+"&sortType=" + (sortType==null? "" : System.Uri.EscapeDataString(sortType));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListRolesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create User
		/// Allows you to create a user by providing an email (mandatory) and name (optional). The email must be in a valid format. The success response will contain the generated `userId` for that user.
		/// CreateUser api/license-manager/users
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateUserReturn> CreateUserAsync(CreateUserRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/license-manager/users";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CreateUserReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get User
		/// Allows you to get a user from the database, using the `userId` as the identifier.
		/// GetUser api/license-manager/users/{userId}
		/// </summary>
		/// <param name="userId">ID from queried user.</param>
		/// <returns>Success</returns>
		public async Task<GetUserReturn> GetUserAsync(string userId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/license-manager/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetUserReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Roles by User/appKey
		/// Gets roles of a particular user or application key.
		/// GetRolesbyUser api/license-manager/users/{userId}/roles
		/// </summary>
		/// <param name="userId">ID corresponding to the user</param>
		/// <returns>Success</returns>
		public async Task<GetRolesbyUserReturn[]> GetRolesbyUserAsync(string userId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/license-manager/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/roles";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetRolesbyUserReturn[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Put Roles in User/appKey
		/// Allows you to add roles to a particular user or application key by specifying the list of roles' IDs on the request's body.
		/// PutRolesinUser api/license-manager/users/{userId}/roles
		/// </summary>
		/// <param name="userId">ID corresponding to the user</param>
		/// <param name="requestBody">List of roles' IDs to add to the user or application key.</param>
		public async Task PutRolesinUserAsync(string userId, int[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/license-manager/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/roles";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove Role from User/appKey
		/// Allows you to remove a role from a specific user or application key. This method only allows the removal of one role per request. The role's ID must be specified on the request path, not on the request body.
		/// 
		/// > Note that a successful response returns a `204` response with an empty body. A deletion on a role or user that does not exist will also return a `204`. Thus, this method should not be used to verify the existence of a specific user or role.
		/// RemoveRolefromUser api/license-manager/users/{userId}/roles/{roleId}
		/// </summary>
		/// <param name="userId">ID corresponding to the user</param>
		/// <param name="roleId">ID of the role which will be removed from the user</param>
		public async Task RemoveRolefromUserAsync(string userId, string roleId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/license-manager/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/roles/"+ (roleId==null? "" : System.Uri.EscapeDataString(roleId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get information about account
		/// Retrieves information from an account, such as company and sponsor user details, stores, and appTokens.
		/// 
		/// This endpoint only accepts requests from the host list designated for that store. If you want to try this request from this portal, be sure to add it to the list. Learn how to add hosts to the list in [How to manage accounts](https://help.vtex.com/en/tutorial/how-to-manage-accounts--tutorials_6285#).
		/// GetAccount api/vlm/account
		/// </summary>
		/// <returns>Success</returns>
		public async Task<AccountResponse> GetAccountAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/vlm/account";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AccountResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Stores
		/// Gets the stores and respective hosts of the account
		/// GetByAccount api/vlm/account/stores
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StoreItems[]> GetByAccountAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/vlm/account/stores";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<StoreItems[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get appKeys from account
		/// Gets all application keys from an account.
		/// Getappkeysfromaccount api/vlm/appkeys
		/// </summary>
		/// <returns>Success</returns>
		public async Task<Getappkeysfromaccount[]> GetappkeysfromaccountAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/vlm/appkeys";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Getappkeysfromaccount[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create new appkey
		/// Creates a new pair of `appKey` and `appToken`.
		/// Createnewappkey api/vlm/appkeys
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreatenewappkeyResponse> CreatenewappkeyAsync(CreatenewappkeyRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/vlm/appkeys";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CreatenewappkeyResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update appkey
		/// Activates or deactivates an `appKey` by its ID.
		/// Updateappkey api/vlm/appkeys/{id}
		/// </summary>
		/// <param name="id">ID from the appKey which will be updated</param>
		/// <param name="requestBody">Request body for updating AppKeys</param>
		/// <returns>Success</returns>
		public async Task UpdateappkeyAsync(string id, UpdateappkeyRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/vlm/appkeys/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public class CreateUserReturn
	{
		
		/// <summary>
		/// Email of user
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// ID of user
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Name of user
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	public class GetUserReturn
	{
		
		/// <summary>
		/// Email of user
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// ID of user
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Name of user
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	public class GetRolesbyUserReturn
	{
		
		/// <summary>
		/// ID of role
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Name of role
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
