//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// The AcceptDomainTransferFromAnotherAwsAccount response includes the following element.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AcceptDomainTransferFromAnotherAwsAccountResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string OperationId { get; set; }
	}
	
	/// <summary>
	/// The AcceptDomainTransferFromAnotherAwsAccount request includes the following elements.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AcceptDomainTransferFromAnotherAwsAccountRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DomainName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Password { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidInput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OperationLimitExceeded
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DomainLimitExceeded
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UnsupportedTLD
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AssociateDelegationSignerToDomainResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string OperationId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AssociateDelegationSignerToDomainRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DomainName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DnssecSigningAttributes SigningAttributes { get; set; }
	}
	
	/// <summary>
	/// Information about a delegation signer (DS) record that was created in the registry by <a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_AssociateDelegationSignerToDomain.html">AssociateDelegationSignerToDomain</a>. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DnssecSigningAttributes
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Algorithm { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Flags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PublicKey { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DuplicateRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TLDRulesViolation
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DnssecLimitExceeded
	{
	}
	
	/// <summary>
	/// The <code>CancelDomainTransferToAnotherAwsAccount</code> response includes the following element.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CancelDomainTransferToAnotherAwsAccountResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string OperationId { get; set; }
	}
	
	/// <summary>
	/// The CancelDomainTransferToAnotherAwsAccount request includes the following element.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CancelDomainTransferToAnotherAwsAccountRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DomainName { get; set; }
	}
	
	/// <summary>
	/// The CheckDomainAvailability response includes the following elements.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CheckDomainAvailabilityResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DomainAvailability Availability { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DomainAvailability
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AVAILABLE")]
		AVAILABLE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AVAILABLE_RESERVED")]
		AVAILABLE_RESERVED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AVAILABLE_PREORDER")]
		AVAILABLE_PREORDER = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNAVAILABLE")]
		UNAVAILABLE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNAVAILABLE_PREMIUM")]
		UNAVAILABLE_PREMIUM = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNAVAILABLE_RESTRICTED")]
		UNAVAILABLE_RESTRICTED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RESERVED")]
		RESERVED = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DONT_KNOW")]
		DONT_KNOW = 7,
	}
	
	/// <summary>
	/// The CheckDomainAvailability request contains the following elements.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CheckDomainAvailabilityRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DomainName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IdnLangCode { get; set; }
	}
	
	/// <summary>
	/// The CheckDomainTransferability response includes the following elements.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CheckDomainTransferabilityResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DomainTransferability Transferability { get; set; }
	}
	
	/// <summary>
	/// A complex type that contains information about whether the specified domain can be transferred to Route 53.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DomainTransferability
	{
		
		/// <summary>
		/// <p>Whether the domain name can be transferred to Route 53.</p> <note> <p>You can transfer only domains that have a value of <code>TRANSFERABLE</code> or <code>Transferable</code>.</p> </note> <p>Valid values:</p> <dl> <dt>TRANSFERABLE</dt> <dd> <p>The domain name can be transferred to Route 53.</p> </dd> <dt>UNTRANSFERRABLE</dt> <dd> <p>The domain name can't be transferred to Route 53.</p> </dd> <dt>DONT_KNOW</dt> <dd> <p>Reserved for future use.</p> </dd> <dt>DOMAIN_IN_OWN_ACCOUNT</dt> <dd> <p>The domain already exists in the current Amazon Web Services account.</p> </dd> <dt>DOMAIN_IN_ANOTHER_ACCOUNT</dt> <dd> <p> the domain exists in another Amazon Web Services account.</p> </dd> <dt>PREMIUM_DOMAIN</dt> <dd> <p>Premium domain transfer is not supported.</p> </dd> </dl>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<DomainTransferabilityTransferable> Transferable { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DomainTransferabilityTransferable
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TRANSFERABLE")]
		TRANSFERABLE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNTRANSFERABLE")]
		UNTRANSFERABLE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DONT_KNOW")]
		DONT_KNOW = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DOMAIN_IN_OWN_ACCOUNT")]
		DOMAIN_IN_OWN_ACCOUNT = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DOMAIN_IN_ANOTHER_ACCOUNT")]
		DOMAIN_IN_ANOTHER_ACCOUNT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PREMIUM_DOMAIN")]
		PREMIUM_DOMAIN = 5,
	}
	
	/// <summary>
	/// The CheckDomainTransferability request contains the following elements.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CheckDomainTransferabilityRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DomainName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AuthCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteDomainResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string OperationId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteDomainRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DomainName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteTagsForDomainResponse
	{
	}
	
	/// <summary>
	/// The DeleteTagsForDomainRequest includes the following elements.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteTagsForDomainRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DomainName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] TagsToDelete { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DisableDomainAutoRenewResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DisableDomainAutoRenewRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DomainName { get; set; }
	}
	
	/// <summary>
	/// The DisableDomainTransferLock response includes the following element.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DisableDomainTransferLockResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string OperationId { get; set; }
	}
	
	/// <summary>
	/// The DisableDomainTransferLock request includes the following element.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DisableDomainTransferLockRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DomainName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DisassociateDelegationSignerFromDomainResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string OperationId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DisassociateDelegationSignerFromDomainRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DomainName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EnableDomainAutoRenewResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EnableDomainAutoRenewRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DomainName { get; set; }
	}
	
	/// <summary>
	/// The EnableDomainTransferLock response includes the following elements.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EnableDomainTransferLockResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string OperationId { get; set; }
	}
	
	/// <summary>
	/// A request to set the transfer lock for the specified domain.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EnableDomainTransferLockRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DomainName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetContactReachabilityStatusResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="domainName")]
		public string DomainName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ReachabilityStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ReachabilityStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PENDING")]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DONE")]
		DONE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EXPIRED")]
		EXPIRED = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetContactReachabilityStatusRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="domainName")]
		public string DomainName { get; set; }
	}
	
	/// <summary>
	/// The GetDomainDetail response includes the following elements.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetDomainDetailResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DomainName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Nameserver[] Nameservers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AutoRenew { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ContactDetail AdminContact { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ContactDetail RegistrantContact { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ContactDetail TechContact { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AdminPrivacy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> RegistrantPrivacy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> TechPrivacy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RegistrarName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string WhoIsServer { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RegistrarUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AbuseContactEmail { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AbuseContactPhone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RegistryDomainId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset UpdatedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset ExpirationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Reseller { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DnsSec { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] StatusList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DnssecKey[] DnssecKeys { get; set; }
	}
	
	/// <summary>
	/// Name server includes the following elements.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Nameserver
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] GlueIps { get; set; }
	}
	
	/// <summary>
	/// ContactDetail includes the following elements.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContactDetail
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string FirstName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LastName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ContactType ContactType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OrganizationName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AddressLine1 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AddressLine2 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string City { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CountryCode CountryCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ZipCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PhoneNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Fax { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ExtraParam[] ExtraParams { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ContactType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PERSON")]
		PERSON = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="COMPANY")]
		COMPANY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ASSOCIATION")]
		ASSOCIATION = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PUBLIC_BODY")]
		PUBLIC_BODY = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RESELLER")]
		RESELLER = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CountryCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AC")]
		AC = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AD")]
		AD = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AE")]
		AE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AF")]
		AF = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AG")]
		AG = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AI")]
		AI = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AL")]
		AL = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AM")]
		AM = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AN")]
		AN = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AO")]
		AO = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AQ")]
		AQ = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AR")]
		AR = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AS")]
		AS = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AT")]
		AT = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AU")]
		AU = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AW")]
		AW = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AX")]
		AX = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AZ")]
		AZ = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BA")]
		BA = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BB")]
		BB = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BD")]
		BD = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BE")]
		BE = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BF")]
		BF = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BG")]
		BG = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BH")]
		BH = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BI")]
		BI = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BJ")]
		BJ = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BL")]
		BL = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BM")]
		BM = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BN")]
		BN = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BO")]
		BO = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BQ")]
		BQ = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BR")]
		BR = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BS")]
		BS = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BT")]
		BT = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BV")]
		BV = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BW")]
		BW = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BY")]
		BY = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BZ")]
		BZ = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CA")]
		CA = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CC")]
		CC = 40,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CD")]
		CD = 41,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CF")]
		CF = 42,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CG")]
		CG = 43,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CH")]
		CH = 44,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CI")]
		CI = 45,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CK")]
		CK = 46,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CL")]
		CL = 47,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CM")]
		CM = 48,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CN")]
		CN = 49,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CO")]
		CO = 50,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CR")]
		CR = 51,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CU")]
		CU = 52,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CV")]
		CV = 53,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CW")]
		CW = 54,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CX")]
		CX = 55,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CY")]
		CY = 56,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CZ")]
		CZ = 57,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DE")]
		DE = 58,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DJ")]
		DJ = 59,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DK")]
		DK = 60,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DM")]
		DM = 61,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DO")]
		DO = 62,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DZ")]
		DZ = 63,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EC")]
		EC = 64,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EE")]
		EE = 65,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EG")]
		EG = 66,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EH")]
		EH = 67,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ER")]
		ER = 68,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ES")]
		ES = 69,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ET")]
		ET = 70,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FI")]
		FI = 71,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FJ")]
		FJ = 72,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FK")]
		FK = 73,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FM")]
		FM = 74,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FO")]
		FO = 75,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FR")]
		FR = 76,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GA")]
		GA = 77,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GB")]
		GB = 78,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GD")]
		GD = 79,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GE")]
		GE = 80,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GF")]
		GF = 81,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GG")]
		GG = 82,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GH")]
		GH = 83,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GI")]
		GI = 84,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GL")]
		GL = 85,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GM")]
		GM = 86,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GN")]
		GN = 87,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GP")]
		GP = 88,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GQ")]
		GQ = 89,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GR")]
		GR = 90,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GS")]
		GS = 91,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GT")]
		GT = 92,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GU")]
		GU = 93,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GW")]
		GW = 94,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GY")]
		GY = 95,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HK")]
		HK = 96,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HM")]
		HM = 97,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HN")]
		HN = 98,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HR")]
		HR = 99,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HT")]
		HT = 100,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HU")]
		HU = 101,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ID")]
		ID = 102,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IE")]
		IE = 103,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IL")]
		IL = 104,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IM")]
		IM = 105,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IN")]
		IN = 106,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IO")]
		IO = 107,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IQ")]
		IQ = 108,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IR")]
		IR = 109,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IS")]
		IS = 110,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IT")]
		IT = 111,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="JE")]
		JE = 112,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="JM")]
		JM = 113,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="JO")]
		JO = 114,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="JP")]
		JP = 115,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="KE")]
		KE = 116,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="KG")]
		KG = 117,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="KH")]
		KH = 118,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="KI")]
		KI = 119,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="KM")]
		KM = 120,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="KN")]
		KN = 121,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="KP")]
		KP = 122,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="KR")]
		KR = 123,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="KW")]
		KW = 124,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="KY")]
		KY = 125,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="KZ")]
		KZ = 126,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LA")]
		LA = 127,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LB")]
		LB = 128,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LC")]
		LC = 129,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LI")]
		LI = 130,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LK")]
		LK = 131,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LR")]
		LR = 132,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LS")]
		LS = 133,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LT")]
		LT = 134,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LU")]
		LU = 135,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LV")]
		LV = 136,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LY")]
		LY = 137,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MA")]
		MA = 138,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MC")]
		MC = 139,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MD")]
		MD = 140,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ME")]
		ME = 141,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MF")]
		MF = 142,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MG")]
		MG = 143,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MH")]
		MH = 144,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MK")]
		MK = 145,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ML")]
		ML = 146,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MM")]
		MM = 147,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MN")]
		MN = 148,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MO")]
		MO = 149,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MP")]
		MP = 150,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MQ")]
		MQ = 151,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MR")]
		MR = 152,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MS")]
		MS = 153,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MT")]
		MT = 154,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MU")]
		MU = 155,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MV")]
		MV = 156,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MW")]
		MW = 157,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MX")]
		MX = 158,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MY")]
		MY = 159,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MZ")]
		MZ = 160,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NA")]
		NA = 161,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NC")]
		NC = 162,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NE")]
		NE = 163,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NF")]
		NF = 164,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NG")]
		NG = 165,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NI")]
		NI = 166,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NL")]
		NL = 167,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NO")]
		NO = 168,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NP")]
		NP = 169,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NR")]
		NR = 170,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NU")]
		NU = 171,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NZ")]
		NZ = 172,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OM")]
		OM = 173,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PA")]
		PA = 174,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PE")]
		PE = 175,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PF")]
		PF = 176,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PG")]
		PG = 177,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PH")]
		PH = 178,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PK")]
		PK = 179,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PL")]
		PL = 180,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PM")]
		PM = 181,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PN")]
		PN = 182,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PR")]
		PR = 183,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PS")]
		PS = 184,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PT")]
		PT = 185,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PW")]
		PW = 186,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PY")]
		PY = 187,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="QA")]
		QA = 188,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RE")]
		RE = 189,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RO")]
		RO = 190,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RS")]
		RS = 191,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RU")]
		RU = 192,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RW")]
		RW = 193,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SA")]
		SA = 194,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SB")]
		SB = 195,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SC")]
		SC = 196,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SD")]
		SD = 197,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SE")]
		SE = 198,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SG")]
		SG = 199,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SH")]
		SH = 200,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SI")]
		SI = 201,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SJ")]
		SJ = 202,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SK")]
		SK = 203,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SL")]
		SL = 204,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SM")]
		SM = 205,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SN")]
		SN = 206,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SO")]
		SO = 207,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SR")]
		SR = 208,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SS")]
		SS = 209,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ST")]
		ST = 210,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SV")]
		SV = 211,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SX")]
		SX = 212,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SY")]
		SY = 213,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SZ")]
		SZ = 214,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TC")]
		TC = 215,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TD")]
		TD = 216,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TF")]
		TF = 217,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TG")]
		TG = 218,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TH")]
		TH = 219,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TJ")]
		TJ = 220,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TK")]
		TK = 221,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TL")]
		TL = 222,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TM")]
		TM = 223,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TN")]
		TN = 224,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TO")]
		TO = 225,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TP")]
		TP = 226,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TR")]
		TR = 227,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TT")]
		TT = 228,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TV")]
		TV = 229,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TW")]
		TW = 230,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TZ")]
		TZ = 231,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UA")]
		UA = 232,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UG")]
		UG = 233,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="US")]
		US = 234,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UY")]
		UY = 235,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UZ")]
		UZ = 236,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VA")]
		VA = 237,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VC")]
		VC = 238,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VE")]
		VE = 239,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VG")]
		VG = 240,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VI")]
		VI = 241,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VN")]
		VN = 242,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VU")]
		VU = 243,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="WF")]
		WF = 244,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="WS")]
		WS = 245,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="YE")]
		YE = 246,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="YT")]
		YT = 247,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ZA")]
		ZA = 248,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ZM")]
		ZM = 249,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ZW")]
		ZW = 250,
	}
	
	/// <summary>
	/// ExtraParam includes the following elements.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ExtraParam
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ExtraParamName Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ExtraParamName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DUNS_NUMBER")]
		DUNS_NUMBER = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BRAND_NUMBER")]
		BRAND_NUMBER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BIRTH_DEPARTMENT")]
		BIRTH_DEPARTMENT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BIRTH_DATE_IN_YYYY_MM_DD")]
		BIRTH_DATE_IN_YYYY_MM_DD = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BIRTH_COUNTRY")]
		BIRTH_COUNTRY = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BIRTH_CITY")]
		BIRTH_CITY = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DOCUMENT_NUMBER")]
		DOCUMENT_NUMBER = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AU_ID_NUMBER")]
		AU_ID_NUMBER = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AU_ID_TYPE")]
		AU_ID_TYPE = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CA_LEGAL_TYPE")]
		CA_LEGAL_TYPE = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CA_BUSINESS_ENTITY_TYPE")]
		CA_BUSINESS_ENTITY_TYPE = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CA_LEGAL_REPRESENTATIVE")]
		CA_LEGAL_REPRESENTATIVE = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CA_LEGAL_REPRESENTATIVE_CAPACITY")]
		CA_LEGAL_REPRESENTATIVE_CAPACITY = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ES_IDENTIFICATION")]
		ES_IDENTIFICATION = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ES_IDENTIFICATION_TYPE")]
		ES_IDENTIFICATION_TYPE = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ES_LEGAL_FORM")]
		ES_LEGAL_FORM = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FI_BUSINESS_NUMBER")]
		FI_BUSINESS_NUMBER = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FI_ID_NUMBER")]
		FI_ID_NUMBER = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FI_NATIONALITY")]
		FI_NATIONALITY = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FI_ORGANIZATION_TYPE")]
		FI_ORGANIZATION_TYPE = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IT_NATIONALITY")]
		IT_NATIONALITY = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IT_PIN")]
		IT_PIN = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IT_REGISTRANT_ENTITY_TYPE")]
		IT_REGISTRANT_ENTITY_TYPE = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RU_PASSPORT_DATA")]
		RU_PASSPORT_DATA = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SE_ID_NUMBER")]
		SE_ID_NUMBER = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SG_ID_NUMBER")]
		SG_ID_NUMBER = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VAT_NUMBER")]
		VAT_NUMBER = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UK_CONTACT_TYPE")]
		UK_CONTACT_TYPE = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UK_COMPANY_NUMBER")]
		UK_COMPANY_NUMBER = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EU_COUNTRY_OF_CITIZENSHIP")]
		EU_COUNTRY_OF_CITIZENSHIP = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AU_PRIORITY_TOKEN")]
		AU_PRIORITY_TOKEN = 30,
	}
	
	/// <summary>
	/// <p>Information about the DNSSEC key.</p> <p>You get this from your DNS provider and then give it to Route 53 (by using <a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_AssociateDelegationSignerToDomain.html">AssociateDelegationSignerToDomain</a>) to pass it to the registry to establish the chain of trust.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DnssecKey
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Algorithm { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Flags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PublicKey { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DigestType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Digest { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> KeyTag { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
	}
	
	/// <summary>
	/// The GetDomainDetail request includes the following element.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetDomainDetailRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DomainName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetDomainSuggestionsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DomainSuggestion[] SuggestionsList { get; set; }
	}
	
	/// <summary>
	/// Information about one suggested domain name.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DomainSuggestion
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DomainName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Availability { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetDomainSuggestionsRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DomainName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int SuggestionCount { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool OnlyAvailable { get; set; }
	}
	
	/// <summary>
	/// The GetOperationDetail response includes the following elements.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetOperationDetailResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string OperationId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OperationStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DomainName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OperationType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset SubmittedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastUpdatedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StatusFlag StatusFlag { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum OperationStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SUBMITTED")]
		SUBMITTED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IN_PROGRESS")]
		IN_PROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ERROR")]
		ERROR = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SUCCESSFUL")]
		SUCCESSFUL = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FAILED")]
		FAILED = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum OperationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="REGISTER_DOMAIN")]
		REGISTER_DOMAIN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DELETE_DOMAIN")]
		DELETE_DOMAIN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TRANSFER_IN_DOMAIN")]
		TRANSFER_IN_DOMAIN = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UPDATE_DOMAIN_CONTACT")]
		UPDATE_DOMAIN_CONTACT = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UPDATE_NAMESERVER")]
		UPDATE_NAMESERVER = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CHANGE_PRIVACY_PROTECTION")]
		CHANGE_PRIVACY_PROTECTION = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DOMAIN_LOCK")]
		DOMAIN_LOCK = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ENABLE_AUTORENEW")]
		ENABLE_AUTORENEW = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DISABLE_AUTORENEW")]
		DISABLE_AUTORENEW = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ADD_DNSSEC")]
		ADD_DNSSEC = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="REMOVE_DNSSEC")]
		REMOVE_DNSSEC = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EXPIRE_DOMAIN")]
		EXPIRE_DOMAIN = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TRANSFER_OUT_DOMAIN")]
		TRANSFER_OUT_DOMAIN = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CHANGE_DOMAIN_OWNER")]
		CHANGE_DOMAIN_OWNER = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RENEW_DOMAIN")]
		RENEW_DOMAIN = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PUSH_DOMAIN")]
		PUSH_DOMAIN = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INTERNAL_TRANSFER_OUT_DOMAIN")]
		INTERNAL_TRANSFER_OUT_DOMAIN = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INTERNAL_TRANSFER_IN_DOMAIN")]
		INTERNAL_TRANSFER_IN_DOMAIN = 17,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum StatusFlag
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PENDING_ACCEPTANCE")]
		PENDING_ACCEPTANCE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PENDING_CUSTOMER_ACTION")]
		PENDING_CUSTOMER_ACTION = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PENDING_AUTHORIZATION")]
		PENDING_AUTHORIZATION = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PENDING_PAYMENT_VERIFICATION")]
		PENDING_PAYMENT_VERIFICATION = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PENDING_SUPPORT_CASE")]
		PENDING_SUPPORT_CASE = 4,
	}
	
	/// <summary>
	/// The <a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_GetOperationDetail.html">GetOperationDetail</a> request includes the following element.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetOperationDetailRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string OperationId { get; set; }
	}
	
	/// <summary>
	/// The ListDomains response includes the following elements.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListDomainsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DomainSummary[] Domains { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextPageMarker { get; set; }
	}
	
	/// <summary>
	/// Summary information about one domain.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DomainSummary
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DomainName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AutoRenew { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> TransferLock { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset Expiry { get; set; }
	}
	
	/// <summary>
	/// The ListDomains request includes the following elements.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListDomainsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public FilterCondition[] FilterConditions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SortCondition SortCondition { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxItems { get; set; }
	}
	
	/// <summary>
	/// Information for the filtering of a list of domains returned by <a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains__ListDomains.html">ListDomains</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FilterCondition
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ListDomainsAttributeName Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Operator Operator { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ListDomainsAttributeName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DomainName")]
		DomainName = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Expiry")]
		Expiry = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Operator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LE")]
		LE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GE")]
		GE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BEGINS_WITH")]
		BEGINS_WITH = 2,
	}
	
	/// <summary>
	/// Information for sorting a list of domains.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SortCondition
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ListDomainsAttributeName Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public SortOrder SortOrder { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum SortOrder
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ASC")]
		ASC = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DESC")]
		DESC = 1,
	}
	
	/// <summary>
	/// The ListOperations response includes the following elements.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListOperationsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public OperationSummary[] Operations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextPageMarker { get; set; }
	}
	
	/// <summary>
	/// OperationSummary includes the following elements.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OperationSummary
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string OperationId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OperationStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OperationType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset SubmittedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DomainName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StatusFlag StatusFlag { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastUpdatedDate { get; set; }
	}
	
	/// <summary>
	/// The ListOperations request includes the following elements.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListOperationsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset SubmittedSince { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxItems { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OperationStatus[] Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OperationType[] Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ListOperationsSortAttributeName SortBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SortOrder SortOrder { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ListOperationsSortAttributeName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SubmittedDate")]
		SubmittedDate = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListPricesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DomainPrice[] Prices { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextPageMarker { get; set; }
	}
	
	/// <summary>
	/// Information about the domain price associated with a TLD.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DomainPrice
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PriceWithCurrency RegistrationPrice { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PriceWithCurrency TransferPrice { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PriceWithCurrency RenewalPrice { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PriceWithCurrency ChangeOwnershipPrice { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PriceWithCurrency RestorationPrice { get; set; }
	}
	
	/// <summary>
	/// Currency-specific price information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PriceWithCurrency
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public double Price { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Currency { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListPricesRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Tld { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxItems { get; set; }
	}
	
	/// <summary>
	/// The ListTagsForDomain response includes the following elements.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListTagsForDomainResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] TagList { get; set; }
	}
	
	/// <summary>
	/// Each tag includes the following elements.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Tag
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// The ListTagsForDomainRequest includes the following elements.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListTagsForDomainRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DomainName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PushDomainRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DomainName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Target { get; set; }
	}
	
	/// <summary>
	/// The RegisterDomain response includes the following element.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RegisterDomainResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string OperationId { get; set; }
	}
	
	/// <summary>
	/// The RegisterDomain request includes the following elements.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RegisterDomainRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DomainName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IdnLangCode { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int DurationInYears { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AutoRenew { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ContactDetail AdminContact { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ContactDetail RegistrantContact { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ContactDetail TechContact { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> PrivacyProtectAdminContact { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> PrivacyProtectRegistrantContact { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> PrivacyProtectTechContact { get; set; }
	}
	
	/// <summary>
	/// The RejectDomainTransferFromAnotherAwsAccount response includes the following element.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RejectDomainTransferFromAnotherAwsAccountResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string OperationId { get; set; }
	}
	
	/// <summary>
	/// The RejectDomainTransferFromAnotherAwsAccount request includes the following element.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RejectDomainTransferFromAnotherAwsAccountRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DomainName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RenewDomainResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string OperationId { get; set; }
	}
	
	/// <summary>
	/// A <code>RenewDomain</code> request includes the number of years that you want to renew for and the current expiration year.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RenewDomainRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DomainName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DurationInYears { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int CurrentExpiryYear { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResendContactReachabilityEmailResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="domainName")]
		public string DomainName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="emailAddress")]
		public string EmailAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isAlreadyVerified")]
		public System.Nullable<System.Boolean> IsAlreadyVerified { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResendContactReachabilityEmailRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="domainName")]
		public string DomainName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResendOperationAuthorizationRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string OperationId { get; set; }
	}
	
	/// <summary>
	/// The RetrieveDomainAuthCode response includes the following element.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RetrieveDomainAuthCodeResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AuthCode { get; set; }
	}
	
	/// <summary>
	/// A request for the authorization code for the specified domain. To transfer a domain to another registrar, you provide this value to the new registrar.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RetrieveDomainAuthCodeRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DomainName { get; set; }
	}
	
	/// <summary>
	/// The TransferDomain response includes the following element.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TransferDomainResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string OperationId { get; set; }
	}
	
	/// <summary>
	/// The TransferDomain request includes the following elements.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TransferDomainRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DomainName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IdnLangCode { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int DurationInYears { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Nameserver[] Nameservers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AuthCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AutoRenew { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ContactDetail AdminContact { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ContactDetail RegistrantContact { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ContactDetail TechContact { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> PrivacyProtectAdminContact { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> PrivacyProtectRegistrantContact { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> PrivacyProtectTechContact { get; set; }
	}
	
	/// <summary>
	/// The <code>TransferDomainToAnotherAwsAccount</code> response includes the following elements.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TransferDomainToAnotherAwsAccountResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string OperationId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Password { get; set; }
	}
	
	/// <summary>
	/// The TransferDomainToAnotherAwsAccount request includes the following elements.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TransferDomainToAnotherAwsAccountRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DomainName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AccountId { get; set; }
	}
	
	/// <summary>
	/// The UpdateDomainContact response includes the following element.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateDomainContactResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string OperationId { get; set; }
	}
	
	/// <summary>
	/// The UpdateDomainContact request includes the following elements.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateDomainContactRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DomainName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ContactDetail AdminContact { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ContactDetail RegistrantContact { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ContactDetail TechContact { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Consent Consent { get; set; }
	}
	
	/// <summary>
	///  Customer's consent for the owner change request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Consent
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public double MaxPrice { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Currency { get; set; }
	}
	
	/// <summary>
	/// The UpdateDomainContactPrivacy response includes the following element.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateDomainContactPrivacyResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string OperationId { get; set; }
	}
	
	/// <summary>
	/// The UpdateDomainContactPrivacy request includes the following elements.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateDomainContactPrivacyRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DomainName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AdminPrivacy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> RegistrantPrivacy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> TechPrivacy { get; set; }
	}
	
	/// <summary>
	/// The UpdateDomainNameservers response includes the following element.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateDomainNameserversResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string OperationId { get; set; }
	}
	
	/// <summary>
	/// <p>Replaces the current set of name servers for the domain with the specified set of name servers. If you use Amazon Route 53 as your DNS service, specify the four name servers in the delegation set for the hosted zone for the domain.</p> <p>If successful, this operation returns an operation ID that you can use to track the progress and completion of the action. If the request is not completed successfully, the domain registrant will be notified by email. </p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateDomainNameserversRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DomainName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FIAuthKey { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Nameserver[] Nameservers { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateTagsForDomainResponse
	{
	}
	
	/// <summary>
	/// The UpdateTagsForDomainRequest includes the following elements.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateTagsForDomainRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DomainName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] TagsToUpdate { get; set; }
	}
	
	/// <summary>
	/// The ViewBilling response includes the following elements.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ViewBillingResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextPageMarker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BillingRecord[] BillingRecords { get; set; }
	}
	
	/// <summary>
	/// Information for one billing record.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BillingRecord
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DomainName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OperationType Operation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InvoiceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset BillDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Price { get; set; }
	}
	
	/// <summary>
	/// The ViewBilling request includes the following elements.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ViewBillingRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset Start { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset End { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxItems { get; set; }
	}
	
	/// <summary>
	/// <p>Whether the domain name can be transferred to Route 53.</p> <note> <p>You can transfer only domains that have a value of <code>TRANSFERABLE</code> or <code>Transferable</code>.</p> </note> <p>Valid values:</p> <dl> <dt>TRANSFERABLE</dt> <dd> <p>The domain name can be transferred to Route 53.</p> </dd> <dt>UNTRANSFERRABLE</dt> <dd> <p>The domain name can't be transferred to Route 53.</p> </dd> <dt>DONT_KNOW</dt> <dd> <p>Reserved for future use.</p> </dd> <dt>DOMAIN_IN_OWN_ACCOUNT</dt> <dd> <p>The domain already exists in the current Amazon Web Services account.</p> </dd> <dt>DOMAIN_IN_ANOTHER_ACCOUNT</dt> <dd> <p> the domain exists in another Amazon Web Services account.</p> </dd> <dt>PREMIUM_DOMAIN</dt> <dd> <p>Premium domain transfer is not supported.</p> </dd> </dl>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Transferable
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TRANSFERABLE")]
		TRANSFERABLE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNTRANSFERABLE")]
		UNTRANSFERABLE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DONT_KNOW")]
		DONT_KNOW = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DOMAIN_IN_OWN_ACCOUNT")]
		DOMAIN_IN_OWN_ACCOUNT = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DOMAIN_IN_ANOTHER_ACCOUNT")]
		DOMAIN_IN_ANOTHER_ACCOUNT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PREMIUM_DOMAIN")]
		PREMIUM_DOMAIN = 5,
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// <p>Accepts the transfer of a domain from another Amazon Web Services account to the currentAmazon Web Services account. You initiate a transfer between Amazon Web Services accounts using <a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_TransferDomainToAnotherAwsAccount.html">TransferDomainToAnotherAwsAccount</a>.</p> <p>If you use the CLI command at <a href="https://docs.aws.amazon.com/cli/latest/reference/route53domains/accept-domain-transfer-from-another-aws-account.html">accept-domain-transfer-from-another-aws-account</a>, use JSON format as input instead of text because otherwise CLI will throw an error from domain transfer input that includes single quotes.</p> <p>Use either <a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_ListOperations.html">ListOperations</a> or <a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_GetOperationDetail.html">GetOperationDetail</a> to determine whether the operation succeeded. <a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_GetOperationDetail.html">GetOperationDetail</a> provides additional information, for example, <code>Domain Transfer from Aws Account 111122223333 has been cancelled</code>. </p>
		/// AcceptDomainTransferFromAnotherAwsAccount #X-Amz-Target=Route53Domains_v20140515.AcceptDomainTransferFromAnotherAwsAccount
		/// </summary>
		/// <returns>Success</returns>
		public async Task<AcceptDomainTransferFromAnotherAwsAccountResponse> AcceptDomainTransferFromAnotherAwsAccountAsync(AcceptDomainTransferFromAnotherAwsAccountRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Route53Domains_v20140515.AcceptDomainTransferFromAnotherAwsAccount";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AcceptDomainTransferFromAnotherAwsAccountResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p> Creates a delegation signer (DS) record in the registry zone for this domain name.</p> <p>Note that creating DS record at the registry impacts DNSSEC validation of your DNS records. This action may render your domain name unavailable on the internet if the steps are completed in the wrong order, or with incorrect timing. For more information about DNSSEC signing, see <a href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-configuring-dnssec.html">Configuring DNSSEC signing</a> in the <i>Route 53 developer guide</i>.</p>
		/// AssociateDelegationSignerToDomain #X-Amz-Target=Route53Domains_v20140515.AssociateDelegationSignerToDomain
		/// </summary>
		/// <returns>Success</returns>
		public async Task<AssociateDelegationSignerToDomainResponse> AssociateDelegationSignerToDomainAsync(AssociateDelegationSignerToDomainRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Route53Domains_v20140515.AssociateDelegationSignerToDomain";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AssociateDelegationSignerToDomainResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Cancels the transfer of a domain from the current Amazon Web Services account to another Amazon Web Services account. You initiate a transfer betweenAmazon Web Services accounts using <a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_TransferDomainToAnotherAwsAccount.html">TransferDomainToAnotherAwsAccount</a>. </p> <important> <p>You must cancel the transfer before the other Amazon Web Services account accepts the transfer using <a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_AcceptDomainTransferFromAnotherAwsAccount.html">AcceptDomainTransferFromAnotherAwsAccount</a>.</p> </important> <p>Use either <a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_ListOperations.html">ListOperations</a> or <a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_GetOperationDetail.html">GetOperationDetail</a> to determine whether the operation succeeded. <a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_GetOperationDetail.html">GetOperationDetail</a> provides additional information, for example, <code>Domain Transfer from Aws Account 111122223333 has been cancelled</code>. </p>
		/// CancelDomainTransferToAnotherAwsAccount #X-Amz-Target=Route53Domains_v20140515.CancelDomainTransferToAnotherAwsAccount
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CancelDomainTransferToAnotherAwsAccountResponse> CancelDomainTransferToAnotherAwsAccountAsync(CancelDomainTransferToAnotherAwsAccountRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Route53Domains_v20140515.CancelDomainTransferToAnotherAwsAccount";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CancelDomainTransferToAnotherAwsAccountResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// This operation checks the availability of one domain name. Note that if the availability status of a domain is pending, you must submit another request to determine the availability of the domain name.
		/// CheckDomainAvailability #X-Amz-Target=Route53Domains_v20140515.CheckDomainAvailability
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CheckDomainAvailabilityResponse> CheckDomainAvailabilityAsync(CheckDomainAvailabilityRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Route53Domains_v20140515.CheckDomainAvailability";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CheckDomainAvailabilityResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Checks whether a domain name can be transferred to Amazon Route 53.
		/// CheckDomainTransferability #X-Amz-Target=Route53Domains_v20140515.CheckDomainTransferability
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CheckDomainTransferabilityResponse> CheckDomainTransferabilityAsync(CheckDomainTransferabilityRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Route53Domains_v20140515.CheckDomainTransferability";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CheckDomainTransferabilityResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>This operation deletes the specified domain. This action is permanent. For more information, see <a href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/domain-delete.html">Deleting a domain name registration</a>.</p> <p>To transfer the domain registration to another registrar, use the transfer process that’s provided by the registrar to which you want to transfer the registration. Otherwise, the following apply:</p> <ol> <li> <p>You can’t get a refund for the cost of a deleted domain registration.</p> </li> <li> <p>The registry for the top-level domain might hold the domain name for a brief time before releasing it for other users to register (varies by registry). </p> </li> <li> <p>When the registration has been deleted, we'll send you a confirmation to the registrant contact. The email will come from <code>noreply@domainnameverification.net</code> or <code>noreply@registrar.amazon.com</code>.</p> </li> </ol>
		/// DeleteDomain #X-Amz-Target=Route53Domains_v20140515.DeleteDomain
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteDomainResponse> DeleteDomainAsync(DeleteDomainRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Route53Domains_v20140515.DeleteDomain";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteDomainResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>This operation deletes the specified tags for a domain.</p> <p>All tag operations are eventually consistent; subsequent operations might not immediately represent all issued operations.</p>
		/// DeleteTagsForDomain #X-Amz-Target=Route53Domains_v20140515.DeleteTagsForDomain
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteTagsForDomainResponse> DeleteTagsForDomainAsync(DeleteTagsForDomainRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Route53Domains_v20140515.DeleteTagsForDomain";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteTagsForDomainResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// This operation disables automatic renewal of domain registration for the specified domain.
		/// DisableDomainAutoRenew #X-Amz-Target=Route53Domains_v20140515.DisableDomainAutoRenew
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DisableDomainAutoRenewResponse> DisableDomainAutoRenewAsync(DisableDomainAutoRenewRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Route53Domains_v20140515.DisableDomainAutoRenew";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DisableDomainAutoRenewResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// This operation removes the transfer lock on the domain (specifically the <code>clientTransferProhibited</code> status) to allow domain transfers. We recommend you refrain from performing this action unless you intend to transfer the domain to a different registrar. Successful submission returns an operation ID that you can use to track the progress and completion of the action. If the request is not completed successfully, the domain registrant will be notified by email.
		/// DisableDomainTransferLock #X-Amz-Target=Route53Domains_v20140515.DisableDomainTransferLock
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DisableDomainTransferLockResponse> DisableDomainTransferLockAsync(DisableDomainTransferLockRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Route53Domains_v20140515.DisableDomainTransferLock";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DisableDomainTransferLockResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a delegation signer (DS) record in the registry zone for this domain name.
		/// DisassociateDelegationSignerFromDomain #X-Amz-Target=Route53Domains_v20140515.DisassociateDelegationSignerFromDomain
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DisassociateDelegationSignerFromDomainResponse> DisassociateDelegationSignerFromDomainAsync(DisassociateDelegationSignerFromDomainRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Route53Domains_v20140515.DisassociateDelegationSignerFromDomain";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DisassociateDelegationSignerFromDomainResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>This operation configures Amazon Route 53 to automatically renew the specified domain before the domain registration expires. The cost of renewing your domain registration is billed to your Amazon Web Services account.</p> <p>The period during which you can renew a domain name varies by TLD. For a list of TLDs and their renewal policies, see <a href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/registrar-tld-list.html">Domains That You Can Register with Amazon Route 53</a> in the <i>Amazon Route 53 Developer Guide</i>. Route 53 requires that you renew before the end of the renewal period so we can complete processing before the deadline.</p>
		/// EnableDomainAutoRenew #X-Amz-Target=Route53Domains_v20140515.EnableDomainAutoRenew
		/// </summary>
		/// <returns>Success</returns>
		public async Task<EnableDomainAutoRenewResponse> EnableDomainAutoRenewAsync(EnableDomainAutoRenewRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Route53Domains_v20140515.EnableDomainAutoRenew";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<EnableDomainAutoRenewResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// This operation sets the transfer lock on the domain (specifically the <code>clientTransferProhibited</code> status) to prevent domain transfers. Successful submission returns an operation ID that you can use to track the progress and completion of the action. If the request is not completed successfully, the domain registrant will be notified by email.
		/// EnableDomainTransferLock #X-Amz-Target=Route53Domains_v20140515.EnableDomainTransferLock
		/// </summary>
		/// <returns>Success</returns>
		public async Task<EnableDomainTransferLockResponse> EnableDomainTransferLockAsync(EnableDomainTransferLockRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Route53Domains_v20140515.EnableDomainTransferLock";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<EnableDomainTransferLockResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>For operations that require confirmation that the email address for the registrant contact is valid, such as registering a new domain, this operation returns information about whether the registrant contact has responded.</p> <p>If you want us to resend the email, use the <code>ResendContactReachabilityEmail</code> operation.</p>
		/// GetContactReachabilityStatus #X-Amz-Target=Route53Domains_v20140515.GetContactReachabilityStatus
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetContactReachabilityStatusResponse> GetContactReachabilityStatusAsync(GetContactReachabilityStatusRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Route53Domains_v20140515.GetContactReachabilityStatus";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetContactReachabilityStatusResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// This operation returns detailed information about a specified domain that is associated with the current Amazon Web Services account. Contact information for the domain is also returned as part of the output.
		/// GetDomainDetail #X-Amz-Target=Route53Domains_v20140515.GetDomainDetail
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetDomainDetailResponse> GetDomainDetailAsync(GetDomainDetailRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Route53Domains_v20140515.GetDomainDetail";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetDomainDetailResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// The GetDomainSuggestions operation returns a list of suggested domain names.
		/// GetDomainSuggestions #X-Amz-Target=Route53Domains_v20140515.GetDomainSuggestions
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetDomainSuggestionsResponse> GetDomainSuggestionsAsync(GetDomainSuggestionsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Route53Domains_v20140515.GetDomainSuggestions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetDomainSuggestionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// This operation returns the current status of an operation that is not completed.
		/// GetOperationDetail #X-Amz-Target=Route53Domains_v20140515.GetOperationDetail
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetOperationDetailResponse> GetOperationDetailAsync(GetOperationDetailRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Route53Domains_v20140515.GetOperationDetail";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetOperationDetailResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// This operation returns all the domain names registered with Amazon Route 53 for the current Amazon Web Services account if no filtering conditions are used.
		/// ListDomains #X-Amz-Target=Route53Domains_v20140515.ListDomains
		/// </summary>
		/// <param name="MaxItems">Pagination limit</param>
		/// <param name="Marker">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListDomainsResponse> ListDomainsAsync(string MaxItems, string Marker, ListDomainsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Route53Domains_v20140515.ListDomains?MaxItems=" + (MaxItems==null? "" : System.Uri.EscapeDataString(MaxItems))+"&Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListDomainsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns information about all of the operations that return an operation ID and that have ever been performed on domains that were registered by the current account. </p> <p>This command runs only in the us-east-1 Region.</p>
		/// ListOperations #X-Amz-Target=Route53Domains_v20140515.ListOperations
		/// </summary>
		/// <param name="MaxItems">Pagination limit</param>
		/// <param name="Marker">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListOperationsResponse> ListOperationsAsync(string MaxItems, string Marker, ListOperationsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Route53Domains_v20140515.ListOperations?MaxItems=" + (MaxItems==null? "" : System.Uri.EscapeDataString(MaxItems))+"&Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListOperationsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Lists the following prices for either all the TLDs supported by Route 53, or the specified TLD:</p> <ul> <li> <p>Registration</p> </li> <li> <p>Transfer</p> </li> <li> <p>Owner change</p> </li> <li> <p>Domain renewal</p> </li> <li> <p>Domain restoration</p> </li> </ul>
		/// ListPrices #X-Amz-Target=Route53Domains_v20140515.ListPrices
		/// </summary>
		/// <param name="MaxItems">Pagination limit</param>
		/// <param name="Marker">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListPricesResponse> ListPricesAsync(string MaxItems, string Marker, ListPricesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Route53Domains_v20140515.ListPrices?MaxItems=" + (MaxItems==null? "" : System.Uri.EscapeDataString(MaxItems))+"&Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListPricesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>This operation returns all of the tags that are associated with the specified domain.</p> <p>All tag operations are eventually consistent; subsequent operations might not immediately represent all issued operations.</p>
		/// ListTagsForDomain #X-Amz-Target=Route53Domains_v20140515.ListTagsForDomain
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ListTagsForDomainResponse> ListTagsForDomainAsync(ListTagsForDomainRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Route53Domains_v20140515.ListTagsForDomain";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListTagsForDomainResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p> Moves a domain from Amazon Web Services to another registrar. </p> <p>Supported actions:</p> <ul> <li> <p>Changes the IPS tags of a .uk domain, and pushes it to transit. Transit means that the domain is ready to be transferred to another registrar.</p> </li> </ul>
		/// PushDomain #X-Amz-Target=Route53Domains_v20140515.PushDomain
		/// </summary>
		/// <returns>Success</returns>
		public async Task PushDomainAsync(PushDomainRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Route53Domains_v20140515.PushDomain";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>This operation registers a domain. For some top-level domains (TLDs), this operation requires extra parameters.</p> <p>When you register a domain, Amazon Route 53 does the following:</p> <ul> <li> <p>Creates a Route 53 hosted zone that has the same name as the domain. Route 53 assigns four name servers to your hosted zone and automatically updates your domain registration with the names of these name servers.</p> </li> <li> <p>Enables auto renew, so your domain registration will renew automatically each year. We'll notify you in advance of the renewal date so you can choose whether to renew the registration.</p> </li> <li> <p>Optionally enables privacy protection, so WHOIS queries return contact for the registrar or the phrase "REDACTED FOR PRIVACY", or "On behalf of &lt;domain name&gt; owner." If you don't enable privacy protection, WHOIS queries return the information that you entered for the administrative, registrant, and technical contacts.</p> <note> <p>While some domains may allow different privacy settings per contact, we recommend specifying the same privacy setting for all contacts.</p> </note> </li> <li> <p>If registration is successful, returns an operation ID that you can use to track the progress and completion of the action. If the request is not completed successfully, the domain registrant is notified by email.</p> </li> <li> <p>Charges your Amazon Web Services account an amount based on the top-level domain. For more information, see <a href="http://aws.amazon.com/route53/pricing/">Amazon Route 53 Pricing</a>.</p> </li> </ul>
		/// RegisterDomain #X-Amz-Target=Route53Domains_v20140515.RegisterDomain
		/// </summary>
		/// <returns>Success</returns>
		public async Task<RegisterDomainResponse> RegisterDomainAsync(RegisterDomainRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Route53Domains_v20140515.RegisterDomain";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RegisterDomainResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Rejects the transfer of a domain from another Amazon Web Services account to the current Amazon Web Services account. You initiate a transfer betweenAmazon Web Services accounts using <a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_TransferDomainToAnotherAwsAccount.html">TransferDomainToAnotherAwsAccount</a>. </p> <p>Use either <a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_ListOperations.html">ListOperations</a> or <a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_GetOperationDetail.html">GetOperationDetail</a> to determine whether the operation succeeded. <a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_GetOperationDetail.html">GetOperationDetail</a> provides additional information, for example, <code>Domain Transfer from Aws Account 111122223333 has been cancelled</code>. </p>
		/// RejectDomainTransferFromAnotherAwsAccount #X-Amz-Target=Route53Domains_v20140515.RejectDomainTransferFromAnotherAwsAccount
		/// </summary>
		/// <returns>Success</returns>
		public async Task<RejectDomainTransferFromAnotherAwsAccountResponse> RejectDomainTransferFromAnotherAwsAccountAsync(RejectDomainTransferFromAnotherAwsAccountRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Route53Domains_v20140515.RejectDomainTransferFromAnotherAwsAccount";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RejectDomainTransferFromAnotherAwsAccountResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>This operation renews a domain for the specified number of years. The cost of renewing your domain is billed to your Amazon Web Services account.</p> <p>We recommend that you renew your domain several weeks before the expiration date. Some TLD registries delete domains before the expiration date if you haven't renewed far enough in advance. For more information about renewing domain registration, see <a href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/domain-renew.html">Renewing Registration for a Domain</a> in the <i>Amazon Route 53 Developer Guide</i>.</p>
		/// RenewDomain #X-Amz-Target=Route53Domains_v20140515.RenewDomain
		/// </summary>
		/// <returns>Success</returns>
		public async Task<RenewDomainResponse> RenewDomainAsync(RenewDomainRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Route53Domains_v20140515.RenewDomain";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RenewDomainResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// For operations that require confirmation that the email address for the registrant contact is valid, such as registering a new domain, this operation resends the confirmation email to the current email address for the registrant contact.
		/// ResendContactReachabilityEmail #X-Amz-Target=Route53Domains_v20140515.ResendContactReachabilityEmail
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ResendContactReachabilityEmailResponse> ResendContactReachabilityEmailAsync(ResendContactReachabilityEmailRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Route53Domains_v20140515.ResendContactReachabilityEmail";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ResendContactReachabilityEmailResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Resend the form of authorization email for this operation.
		/// ResendOperationAuthorization #X-Amz-Target=Route53Domains_v20140515.ResendOperationAuthorization
		/// </summary>
		/// <returns>Success</returns>
		public async Task ResendOperationAuthorizationAsync(ResendOperationAuthorizationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Route53Domains_v20140515.ResendOperationAuthorization";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// This operation returns the authorization code for the domain. To transfer a domain to another registrar, you provide this value to the new registrar.
		/// RetrieveDomainAuthCode #X-Amz-Target=Route53Domains_v20140515.RetrieveDomainAuthCode
		/// </summary>
		/// <returns>Success</returns>
		public async Task<RetrieveDomainAuthCodeResponse> RetrieveDomainAuthCodeAsync(RetrieveDomainAuthCodeRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Route53Domains_v20140515.RetrieveDomainAuthCode";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RetrieveDomainAuthCodeResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Transfers a domain from another registrar to Amazon Route 53. </p> <p>For more information about transferring domains, see the following topics:</p> <ul> <li> <p>For transfer requirements, a detailed procedure, and information about viewing the status of a domain that you're transferring to Route 53, see <a href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/domain-transfer-to-route-53.html">Transferring Registration for a Domain to Amazon Route 53</a> in the <i>Amazon Route 53 Developer Guide</i>.</p> </li> <li> <p>For information about how to transfer a domain from one Amazon Web Services account to another, see <a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_TransferDomainToAnotherAwsAccount.html">TransferDomainToAnotherAwsAccount</a>. </p> </li> <li> <p>For information about how to transfer a domain to another domain registrar, see <a href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/domain-transfer-from-route-53.html">Transferring a Domain from Amazon Route 53 to Another Registrar</a> in the <i>Amazon Route 53 Developer Guide</i>.</p> </li> </ul> <p>If the registrar for your domain is also the DNS service provider for the domain, we highly recommend that you transfer your DNS service to Route 53 or to another DNS service provider before you transfer your registration. Some registrars provide free DNS service when you purchase a domain registration. When you transfer the registration, the previous registrar will not renew your domain registration and could end your DNS service at any time.</p> <important> <p>If the registrar for your domain is also the DNS service provider for the domain and you don't transfer DNS service to another provider, your website, email, and the web applications associated with the domain might become unavailable.</p> </important> <p>If the transfer is successful, this method returns an operation ID that you can use to track the progress and completion of the action. If the transfer doesn't complete successfully, the domain registrant will be notified by email.</p>
		/// TransferDomain #X-Amz-Target=Route53Domains_v20140515.TransferDomain
		/// </summary>
		/// <returns>Success</returns>
		public async Task<TransferDomainResponse> TransferDomainAsync(TransferDomainRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Route53Domains_v20140515.TransferDomain";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TransferDomainResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Transfers a domain from the current Amazon Web Services account to another Amazon Web Services account. Note the following:</p> <ul> <li> <p>The Amazon Web Services account that you're transferring the domain to must accept the transfer. If the other account doesn't accept the transfer within 3 days, we cancel the transfer. See <a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_AcceptDomainTransferFromAnotherAwsAccount.html">AcceptDomainTransferFromAnotherAwsAccount</a>. </p> </li> <li> <p>You can cancel the transfer before the other account accepts it. See <a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_CancelDomainTransferToAnotherAwsAccount.html">CancelDomainTransferToAnotherAwsAccount</a>. </p> </li> <li> <p>The other account can reject the transfer. See <a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_RejectDomainTransferFromAnotherAwsAccount.html">RejectDomainTransferFromAnotherAwsAccount</a>. </p> </li> </ul> <important> <p>When you transfer a domain from one Amazon Web Services account to another, Route 53 doesn't transfer the hosted zone that is associated with the domain. DNS resolution isn't affected if the domain and the hosted zone are owned by separate accounts, so transferring the hosted zone is optional. For information about transferring the hosted zone to another Amazon Web Services account, see <a href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/hosted-zones-migrating.html">Migrating a Hosted Zone to a Different Amazon Web Services Account</a> in the <i>Amazon Route 53 Developer Guide</i>.</p> </important> <p>Use either <a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_ListOperations.html">ListOperations</a> or <a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_GetOperationDetail.html">GetOperationDetail</a> to determine whether the operation succeeded. <a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_GetOperationDetail.html">GetOperationDetail</a> provides additional information, for example, <code>Domain Transfer from Aws Account 111122223333 has been cancelled</code>. </p>
		/// TransferDomainToAnotherAwsAccount #X-Amz-Target=Route53Domains_v20140515.TransferDomainToAnotherAwsAccount
		/// </summary>
		/// <returns>Success</returns>
		public async Task<TransferDomainToAnotherAwsAccountResponse> TransferDomainToAnotherAwsAccountAsync(TransferDomainToAnotherAwsAccountRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Route53Domains_v20140515.TransferDomainToAnotherAwsAccount";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TransferDomainToAnotherAwsAccountResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>This operation updates the contact information for a particular domain. You must specify information for at least one contact: registrant, administrator, or technical.</p> <p>If the update is successful, this method returns an operation ID that you can use to track the progress and completion of the operation. If the request is not completed successfully, the domain registrant will be notified by email.</p>
		/// UpdateDomainContact #X-Amz-Target=Route53Domains_v20140515.UpdateDomainContact
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateDomainContactResponse> UpdateDomainContactAsync(UpdateDomainContactRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Route53Domains_v20140515.UpdateDomainContact";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateDomainContactResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>This operation updates the specified domain contact's privacy setting. When privacy protection is enabled, your contact information is replaced with contact information for the registrar or with the phrase "REDACTED FOR PRIVACY", or "On behalf of &lt;domain name&gt; owner."</p> <note> <p>While some domains may allow different privacy settings per contact, we recommend specifying the same privacy setting for all contacts.</p> </note> <p>This operation affects only the contact information for the specified contact type (administrative, registrant, or technical). If the request succeeds, Amazon Route 53 returns an operation ID that you can use with <a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_GetOperationDetail.html">GetOperationDetail</a> to track the progress and completion of the action. If the request doesn't complete successfully, the domain registrant will be notified by email.</p> <important> <p>By disabling the privacy service via API, you consent to the publication of the contact information provided for this domain via the public WHOIS database. You certify that you are the registrant of this domain name and have the authority to make this decision. You may withdraw your consent at any time by enabling privacy protection using either <code>UpdateDomainContactPrivacy</code> or the Route 53 console. Enabling privacy protection removes the contact information provided for this domain from the WHOIS database. For more information on our privacy practices, see <a href="https://aws.amazon.com/privacy/">https://aws.amazon.com/privacy/</a>.</p> </important>
		/// UpdateDomainContactPrivacy #X-Amz-Target=Route53Domains_v20140515.UpdateDomainContactPrivacy
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateDomainContactPrivacyResponse> UpdateDomainContactPrivacyAsync(UpdateDomainContactPrivacyRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Route53Domains_v20140515.UpdateDomainContactPrivacy";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateDomainContactPrivacyResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>This operation replaces the current set of name servers for the domain with the specified set of name servers. If you use Amazon Route 53 as your DNS service, specify the four name servers in the delegation set for the hosted zone for the domain.</p> <p>If successful, this operation returns an operation ID that you can use to track the progress and completion of the action. If the request is not completed successfully, the domain registrant will be notified by email.</p>
		/// UpdateDomainNameservers #X-Amz-Target=Route53Domains_v20140515.UpdateDomainNameservers
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateDomainNameserversResponse> UpdateDomainNameserversAsync(UpdateDomainNameserversRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Route53Domains_v20140515.UpdateDomainNameservers";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateDomainNameserversResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>This operation adds or updates tags for a specified domain.</p> <p>All tag operations are eventually consistent; subsequent operations might not immediately represent all issued operations.</p>
		/// UpdateTagsForDomain #X-Amz-Target=Route53Domains_v20140515.UpdateTagsForDomain
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateTagsForDomainResponse> UpdateTagsForDomainAsync(UpdateTagsForDomainRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Route53Domains_v20140515.UpdateTagsForDomain";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateTagsForDomainResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns all the domain-related billing records for the current Amazon Web Services account for a specified period
		/// ViewBilling #X-Amz-Target=Route53Domains_v20140515.ViewBilling
		/// </summary>
		/// <param name="MaxItems">Pagination limit</param>
		/// <param name="Marker">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ViewBillingResponse> ViewBillingAsync(string MaxItems, string Marker, ViewBillingRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Route53Domains_v20140515.ViewBilling?MaxItems=" + (MaxItems==null? "" : System.Uri.EscapeDataString(MaxItems))+"&Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ViewBillingResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
	
	public enum AcceptDomainTransferFromAnotherAwsAccountX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Route53Domains_v20140515.AcceptDomainTransferFromAnotherAwsAccount")]
		Route53Domains_v20140515_AcceptDomainTransferFromAnotherAwsAccount = 0,
	}
	
	public enum AssociateDelegationSignerToDomainX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Route53Domains_v20140515.AssociateDelegationSignerToDomain")]
		Route53Domains_v20140515_AssociateDelegationSignerToDomain = 0,
	}
	
	public enum CancelDomainTransferToAnotherAwsAccountX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Route53Domains_v20140515.CancelDomainTransferToAnotherAwsAccount")]
		Route53Domains_v20140515_CancelDomainTransferToAnotherAwsAccount = 0,
	}
	
	public enum CheckDomainAvailabilityX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Route53Domains_v20140515.CheckDomainAvailability")]
		Route53Domains_v20140515_CheckDomainAvailability = 0,
	}
	
	public enum CheckDomainTransferabilityX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Route53Domains_v20140515.CheckDomainTransferability")]
		Route53Domains_v20140515_CheckDomainTransferability = 0,
	}
	
	public enum DeleteDomainX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Route53Domains_v20140515.DeleteDomain")]
		Route53Domains_v20140515_DeleteDomain = 0,
	}
	
	public enum DeleteTagsForDomainX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Route53Domains_v20140515.DeleteTagsForDomain")]
		Route53Domains_v20140515_DeleteTagsForDomain = 0,
	}
	
	public enum DisableDomainAutoRenewX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Route53Domains_v20140515.DisableDomainAutoRenew")]
		Route53Domains_v20140515_DisableDomainAutoRenew = 0,
	}
	
	public enum DisableDomainTransferLockX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Route53Domains_v20140515.DisableDomainTransferLock")]
		Route53Domains_v20140515_DisableDomainTransferLock = 0,
	}
	
	public enum DisassociateDelegationSignerFromDomainX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Route53Domains_v20140515.DisassociateDelegationSignerFromDomain")]
		Route53Domains_v20140515_DisassociateDelegationSignerFromDomain = 0,
	}
	
	public enum EnableDomainAutoRenewX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Route53Domains_v20140515.EnableDomainAutoRenew")]
		Route53Domains_v20140515_EnableDomainAutoRenew = 0,
	}
	
	public enum EnableDomainTransferLockX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Route53Domains_v20140515.EnableDomainTransferLock")]
		Route53Domains_v20140515_EnableDomainTransferLock = 0,
	}
	
	public enum GetContactReachabilityStatusX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Route53Domains_v20140515.GetContactReachabilityStatus")]
		Route53Domains_v20140515_GetContactReachabilityStatus = 0,
	}
	
	public enum GetDomainDetailX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Route53Domains_v20140515.GetDomainDetail")]
		Route53Domains_v20140515_GetDomainDetail = 0,
	}
	
	public enum GetDomainSuggestionsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Route53Domains_v20140515.GetDomainSuggestions")]
		Route53Domains_v20140515_GetDomainSuggestions = 0,
	}
	
	public enum GetOperationDetailX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Route53Domains_v20140515.GetOperationDetail")]
		Route53Domains_v20140515_GetOperationDetail = 0,
	}
	
	public enum ListDomainsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Route53Domains_v20140515.ListDomains")]
		Route53Domains_v20140515_ListDomains = 0,
	}
	
	public enum ListOperationsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Route53Domains_v20140515.ListOperations")]
		Route53Domains_v20140515_ListOperations = 0,
	}
	
	public enum ListPricesX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Route53Domains_v20140515.ListPrices")]
		Route53Domains_v20140515_ListPrices = 0,
	}
	
	public enum ListTagsForDomainX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Route53Domains_v20140515.ListTagsForDomain")]
		Route53Domains_v20140515_ListTagsForDomain = 0,
	}
	
	public enum PushDomainX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Route53Domains_v20140515.PushDomain")]
		Route53Domains_v20140515_PushDomain = 0,
	}
	
	public enum RegisterDomainX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Route53Domains_v20140515.RegisterDomain")]
		Route53Domains_v20140515_RegisterDomain = 0,
	}
	
	public enum RejectDomainTransferFromAnotherAwsAccountX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Route53Domains_v20140515.RejectDomainTransferFromAnotherAwsAccount")]
		Route53Domains_v20140515_RejectDomainTransferFromAnotherAwsAccount = 0,
	}
	
	public enum RenewDomainX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Route53Domains_v20140515.RenewDomain")]
		Route53Domains_v20140515_RenewDomain = 0,
	}
	
	public enum ResendContactReachabilityEmailX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Route53Domains_v20140515.ResendContactReachabilityEmail")]
		Route53Domains_v20140515_ResendContactReachabilityEmail = 0,
	}
	
	public enum ResendOperationAuthorizationX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Route53Domains_v20140515.ResendOperationAuthorization")]
		Route53Domains_v20140515_ResendOperationAuthorization = 0,
	}
	
	public enum RetrieveDomainAuthCodeX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Route53Domains_v20140515.RetrieveDomainAuthCode")]
		Route53Domains_v20140515_RetrieveDomainAuthCode = 0,
	}
	
	public enum TransferDomainX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Route53Domains_v20140515.TransferDomain")]
		Route53Domains_v20140515_TransferDomain = 0,
	}
	
	public enum TransferDomainToAnotherAwsAccountX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Route53Domains_v20140515.TransferDomainToAnotherAwsAccount")]
		Route53Domains_v20140515_TransferDomainToAnotherAwsAccount = 0,
	}
	
	public enum UpdateDomainContactX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Route53Domains_v20140515.UpdateDomainContact")]
		Route53Domains_v20140515_UpdateDomainContact = 0,
	}
	
	public enum UpdateDomainContactPrivacyX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Route53Domains_v20140515.UpdateDomainContactPrivacy")]
		Route53Domains_v20140515_UpdateDomainContactPrivacy = 0,
	}
	
	public enum UpdateDomainNameserversX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Route53Domains_v20140515.UpdateDomainNameservers")]
		Route53Domains_v20140515_UpdateDomainNameservers = 0,
	}
	
	public enum UpdateTagsForDomainX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Route53Domains_v20140515.UpdateTagsForDomain")]
		Route53Domains_v20140515_UpdateTagsForDomain = 0,
	}
	
	public enum ViewBillingX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Route53Domains_v20140515.ViewBilling")]
		Route53Domains_v20140515_ViewBilling = 0,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
