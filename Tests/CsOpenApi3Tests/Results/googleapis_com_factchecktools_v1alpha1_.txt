//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Information about the claim.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoogleFactcheckingFactchecktoolsV1alpha1Claim
	{
		
		/// <summary>
		/// The date that the claim was made.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="claimDate")]
		public string ClaimDate { get; set; }
		
		/// <summary>
		/// One or more reviews of this claim (namely, a fact-checking article).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="claimReview")]
		public GoogleFactcheckingFactchecktoolsV1alpha1ClaimReview[] ClaimReview { get; set; }
		
		/// <summary>
		/// A person or organization stating the claim. For instance, "John Doe".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="claimant")]
		public string Claimant { get; set; }
		
		/// <summary>
		/// The claim text. For instance, "Crime has doubled in the last 2 years."
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
	}
	
	/// <summary>
	/// Information about a claim review.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoogleFactcheckingFactchecktoolsV1alpha1ClaimReview
	{
		
		/// <summary>
		/// The language this review was written in. For instance, "en" or "de".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="languageCode")]
		public string LanguageCode { get; set; }
		
		/// <summary>
		/// Information about the publisher.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publisher")]
		public GoogleFactcheckingFactchecktoolsV1alpha1Publisher Publisher { get; set; }
		
		/// <summary>
		/// The date the claim was reviewed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reviewDate")]
		public string ReviewDate { get; set; }
		
		/// <summary>
		/// Textual rating. For instance, "Mostly false".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="textualRating")]
		public string TextualRating { get; set; }
		
		/// <summary>
		/// The title of this claim review, if it can be determined.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// The URL of this claim review.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	/// <summary>
	/// Information about the publisher.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoogleFactcheckingFactchecktoolsV1alpha1Publisher
	{
		
		/// <summary>
		/// The name of this publisher. For instance, "Awesome Fact Checks".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Host-level site name, without the protocol or "www" prefix. For instance, "awesomefactchecks.com". This value of this field is based purely on the claim review URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="site")]
		public string Site { get; set; }
	}
	
	/// <summary>
	/// Information about the claim author.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoogleFactcheckingFactchecktoolsV1alpha1ClaimAuthor
	{
		
		/// <summary>
		/// Corresponds to `ClaimReview.itemReviewed.author.image`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageUrl")]
		public string ImageUrl { get; set; }
		
		/// <summary>
		/// Corresponds to `ClaimReview.itemReviewed.author.jobTitle`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jobTitle")]
		public string JobTitle { get; set; }
		
		/// <summary>
		/// A person or organization stating the claim. For instance, "John Doe". Corresponds to `ClaimReview.itemReviewed.author.name`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Corresponds to `ClaimReview.itemReviewed.author.sameAs`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sameAs")]
		public string SameAs { get; set; }
	}
	
	/// <summary>
	/// Information about the claim rating.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoogleFactcheckingFactchecktoolsV1alpha1ClaimRating
	{
		
		/// <summary>
		/// For numeric ratings, the best value possible in the scale from worst to best. Corresponds to `ClaimReview.reviewRating.bestRating`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bestRating")]
		public System.Nullable<System.Int32> BestRating { get; set; }
		
		/// <summary>
		/// Corresponds to `ClaimReview.reviewRating.image`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageUrl")]
		public string ImageUrl { get; set; }
		
		/// <summary>
		/// Corresponds to `ClaimReview.reviewRating.ratingExplanation`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ratingExplanation")]
		public string RatingExplanation { get; set; }
		
		/// <summary>
		/// A numeric rating of this claim, in the range worstRating â€” bestRating inclusive. Corresponds to `ClaimReview.reviewRating.ratingValue`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ratingValue")]
		public System.Nullable<System.Int32> RatingValue { get; set; }
		
		/// <summary>
		/// The truthfulness rating as a human-readible short word or phrase. Corresponds to `ClaimReview.reviewRating.alternateName`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="textualRating")]
		public string TextualRating { get; set; }
		
		/// <summary>
		/// For numeric ratings, the worst value possible in the scale from worst to best. Corresponds to `ClaimReview.reviewRating.worstRating`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="worstRating")]
		public System.Nullable<System.Int32> WorstRating { get; set; }
	}
	
	/// <summary>
	/// Information about the claim review author.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewAuthor
	{
		
		/// <summary>
		/// Corresponds to `ClaimReview.author.image`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageUrl")]
		public string ImageUrl { get; set; }
		
		/// <summary>
		/// Name of the organization that is publishing the fact check. Corresponds to `ClaimReview.author.name`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Fields for an individual `ClaimReview` element. Except for sub-messages that group fields together, each of these fields correspond those in https://schema.org/ClaimReview. We list the precise mapping for each field.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup
	{
		
		/// <summary>
		/// A list of links to works in which this claim appears, aside from the one specified in `claim_first_appearance`. Corresponds to `ClaimReview.itemReviewed[@type=Claim].appearance.url`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="claimAppearances")]
		public string[] ClaimAppearances { get; set; }
		
		/// <summary>
		/// Information about the claim author.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="claimAuthor")]
		public GoogleFactcheckingFactchecktoolsV1alpha1ClaimAuthor ClaimAuthor { get; set; }
		
		/// <summary>
		/// The date when the claim was made or entered public discourse. Corresponds to `ClaimReview.itemReviewed.datePublished`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="claimDate")]
		public string ClaimDate { get; set; }
		
		/// <summary>
		/// A link to a work in which this claim first appears. Corresponds to `ClaimReview.itemReviewed[@type=Claim].firstAppearance.url`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="claimFirstAppearance")]
		public string ClaimFirstAppearance { get; set; }
		
		/// <summary>
		/// The location where this claim was made. Corresponds to `ClaimReview.itemReviewed.name`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="claimLocation")]
		public string ClaimLocation { get; set; }
		
		/// <summary>
		/// A short summary of the claim being evaluated. Corresponds to `ClaimReview.claimReviewed`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="claimReviewed")]
		public string ClaimReviewed { get; set; }
		
		/// <summary>
		/// Information about the claim rating.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rating")]
		public GoogleFactcheckingFactchecktoolsV1alpha1ClaimRating Rating { get; set; }
		
		/// <summary>
		/// This field is optional, and will default to the page URL. We provide this field to allow you the override the default value, but the only permitted override is the page URL plus an optional anchor link ("page jump"). Corresponds to `ClaimReview.url`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	/// <summary>
	/// Holds one or more instances of `ClaimReview` markup for a webpage.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkupPage
	{
		
		/// <summary>
		/// Information about the claim review author.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="claimReviewAuthor")]
		public GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewAuthor ClaimReviewAuthor { get; set; }
		
		/// <summary>
		/// A list of individual claim reviews for this page. Each item in the list corresponds to one `ClaimReview` element.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="claimReviewMarkups")]
		public GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup[] ClaimReviewMarkups { get; set; }
		
		/// <summary>
		/// The name of this `ClaimReview` markup page resource, in the form of `pages/{page_id}`. Except for update requests, this field is output-only and should not be set by the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The URL of the page associated with this `ClaimReview` markup. While every individual `ClaimReview` has its own URL field, semantically this is a page-level field, and each `ClaimReview` on this page will use this value unless individually overridden. Corresponds to `ClaimReview.url`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pageUrl")]
		public string PageUrl { get; set; }
		
		/// <summary>
		/// The date when the fact check was published. Similar to the URL, semantically this is a page-level field, and each `ClaimReview` on this page will contain the same value. Corresponds to `ClaimReview.datePublished`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publishDate")]
		public string PublishDate { get; set; }
		
		/// <summary>
		/// The version ID for this markup. Except for update requests, this field is output-only and should not be set by the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="versionId")]
		public string VersionId { get; set; }
	}
	
	/// <summary>
	/// Response from searching fact-checked claims.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoogleFactcheckingFactchecktoolsV1alpha1FactCheckedClaimSearchResponse
	{
		
		/// <summary>
		/// The list of claims and all of their associated information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="claims")]
		public GoogleFactcheckingFactchecktoolsV1alpha1Claim[] Claims { get; set; }
		
		/// <summary>
		/// The next pagination token in the Search response. It should be used as the `page_token` for the following request. An empty value means no more results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Response from listing `ClaimReview` markup.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoogleFactcheckingFactchecktoolsV1alpha1ListClaimReviewMarkupPagesResponse
	{
		
		/// <summary>
		/// The result list of pages of `ClaimReview` markup.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="claimReviewMarkupPages")]
		public GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkupPage[] ClaimReviewMarkupPages { get; set; }
		
		/// <summary>
		/// The next pagination token in the Search response. It should be used as the `page_token` for the following request. An empty value means no more results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoogleProtobufEmpty
	{
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Search through fact-checked claims.
		/// Factchecktools_claims_search v1alpha1/claims:search
		/// </summary>
		/// <param name="languageCode">The BCP-47 language code, such as "en-US" or "sr-Latn". Can be used to restrict results by language, though we do not currently consider the region.</param>
		/// <param name="maxAgeDays">The maximum age of the returned search results, in days. Age is determined by either claim date or review date, whichever is newer.</param>
		/// <param name="offset">An integer that specifies the current offset (that is, starting result location) in search results. This field is only considered if `page_token` is unset. For example, 0 means to return results starting from the first matching result, and 10 means to return from the 11th result.</param>
		/// <param name="pageSize">The pagination size. We will return up to that many results. Defaults to 10 if not set.</param>
		/// <param name="pageToken">The pagination token. You may provide the `next_page_token` returned from a previous List request, if any, in order to get the next page. All other fields must have the same values as in the previous request.</param>
		/// <param name="query">Textual query string. Required unless `review_publisher_site_filter` is specified.</param>
		/// <param name="reviewPublisherSiteFilter">The review publisher site to filter results by, e.g. nytimes.com.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleFactcheckingFactchecktoolsV1alpha1FactCheckedClaimSearchResponse> Factchecktools_claims_searchAsync(string languageCode, int maxAgeDays, int offset, int pageSize, string pageToken, string query, string reviewPublisherSiteFilter, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1alpha1/claims:search?languageCode=" + (languageCode==null? "" : System.Uri.EscapeDataString(languageCode))+"&maxAgeDays="+maxAgeDays+"&offset="+offset+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&reviewPublisherSiteFilter=" + (reviewPublisherSiteFilter==null? "" : System.Uri.EscapeDataString(reviewPublisherSiteFilter));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GoogleFactcheckingFactchecktoolsV1alpha1FactCheckedClaimSearchResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List the `ClaimReview` markup pages for a specific URL or for an organization.
		/// Factchecktools_pages_list v1alpha1/pages
		/// </summary>
		/// <param name="offset">An integer that specifies the current offset (that is, starting result location) in search results. This field is only considered if `page_token` is unset, and if the request is not for a specific URL. For example, 0 means to return results starting from the first matching result, and 10 means to return from the 11th result.</param>
		/// <param name="organization">The organization for which we want to fetch markups for. For instance, "site.com". Cannot be specified along with an URL.</param>
		/// <param name="pageSize">The pagination size. We will return up to that many results. Defaults to 10 if not set. Has no effect if a URL is requested.</param>
		/// <param name="pageToken">The pagination token. You may provide the `next_page_token` returned from a previous List request, if any, in order to get the next page. All other fields must have the same values as in the previous request.</param>
		/// <param name="url">The URL from which to get `ClaimReview` markup. There will be at most one result. If markup is associated with a more canonical version of the URL provided, we will return that URL instead. Cannot be specified along with an organization.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleFactcheckingFactchecktoolsV1alpha1ListClaimReviewMarkupPagesResponse> Factchecktools_pages_listAsync(int offset, string organization, int pageSize, string pageToken, string url, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1alpha1/pages?offset="+offset+"&organization=" + (organization==null? "" : System.Uri.EscapeDataString(organization))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&url=" + (url==null? "" : System.Uri.EscapeDataString(url));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GoogleFactcheckingFactchecktoolsV1alpha1ListClaimReviewMarkupPagesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create `ClaimReview` markup on a page.
		/// Factchecktools_pages_create v1alpha1/pages
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkupPage> Factchecktools_pages_createAsync(GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkupPage requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1alpha1/pages";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkupPage>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete all `ClaimReview` markup on a page.
		/// Factchecktools_pages_delete v1alpha1/{name}
		/// </summary>
		/// <param name="name">The name of the resource to delete, in the form of `pages/{page_id}`.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleProtobufEmpty> Factchecktools_pages_deleteAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1alpha1/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GoogleProtobufEmpty>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all `ClaimReview` markup on a page.
		/// Factchecktools_pages_get v1alpha1/{name}
		/// </summary>
		/// <param name="name">The name of the resource to get, in the form of `pages/{page_id}`.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkupPage> Factchecktools_pages_getAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1alpha1/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkupPage>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update for all `ClaimReview` markup on a page Note that this is a full update. To retain the existing `ClaimReview` markup on a page, first perform a Get operation, then modify the returned markup, and finally call Update with the entire `ClaimReview` markup as the body.
		/// Factchecktools_pages_update v1alpha1/{name}
		/// </summary>
		/// <param name="name">The name of this `ClaimReview` markup page resource, in the form of `pages/{page_id}`. Except for update requests, this field is output-only and should not be set by the user.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkupPage> Factchecktools_pages_updateAsync(string name, GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkupPage requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1alpha1/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkupPage>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
