//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Error
	{
		
		/// <summary>
		/// The error category
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="category")]
		public string Category { get; set; }
		
		/// <summary>
		/// Context about the error condition
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="context")]
		public System.Collections.Generic.Dictionary<string, string[]> Context { get; set; }
		
		/// <summary>
		/// A unique identifier for the request. Include this value with any error reports or support tickets
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="correlationId")]
		public string CorrelationId { get; set; }
		
		/// <summary>
		/// further information about the error
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public ErrorDetail[] Errors { get; set; }
		
		/// <summary>
		/// A map of link names to associated URIs containing documentation about the error or recommended remediation steps
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="links")]
		public System.Collections.Generic.Dictionary<string, string> Links { get; set; }
		
		/// <summary>
		/// A human readable message describing the error along with remediation steps where appropriate
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// A specific category that contains more specific detail about the error
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subCategory")]
		public string SubCategory { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ErrorDetail
	{
		
		/// <summary>
		/// The status code associated with the error detail
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// Context about the error condition
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="context")]
		public System.Collections.Generic.Dictionary<string, string[]> Context { get; set; }
		
		/// <summary>
		/// The name of the field or parameter in which the error was found.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="in")]
		public string In { get; set; }
		
		/// <summary>
		/// A human readable message describing the error along with remediation steps where appropriate
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// A specific category that contains more specific detail about the error
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subCategory")]
		public string SubCategory { get; set; }
	}
	
	/// <summary>
	/// The status of a subscription for a contact.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PublicSubscriptionStatus
	{
		
		/// <summary>
		/// The ID of the brand that the subscription is associated with, if there is one.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="brandId")]
		public System.Nullable<System.Int64> BrandId { get; set; }
		
		/// <summary>
		/// A description of the subscription.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The ID for the subscription.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The legal reason for the current status of the subscription.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="legalBasis")]
		public System.Nullable<PublicSubscriptionStatusLegalBasis> LegalBasis { get; set; }
		
		/// <summary>
		/// A more detailed explanation to go with the legal basis.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="legalBasisExplanation")]
		public string LegalBasisExplanation { get; set; }
		
		/// <summary>
		/// The name of the subscription.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The name of the preferences group that the subscription is associated with.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="preferenceGroupName")]
		public string PreferenceGroupName { get; set; }
		
		/// <summary>
		/// Where the status is determined from e.g. PORTAL_WIDE_STATUS if the contact opted out from the portal.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceOfStatus")]
		public PublicSubscriptionStatusSourceOfStatus SourceOfStatus { get; set; }
		
		/// <summary>
		/// Whether the contact is subscribed.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public PublicSubscriptionStatusStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PublicSubscriptionStatusLegalBasis
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEGITIMATE_INTEREST_PQL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEGITIMATE_INTEREST_CLIENT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PERFORMANCE_OF_CONTRACT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONSENT_WITH_NOTICE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NON_GDPR = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROCESS_AND_STORE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEGITIMATE_INTEREST_OTHER = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PublicSubscriptionStatusSourceOfStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PORTAL_WIDE_STATUS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BRAND_WIDE_STATUS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUBSCRIPTION_STATUS = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PublicSubscriptionStatusStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUBSCRIBED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_SUBSCRIBED = 1,
	}
	
	/// <summary>
	/// A collection of subscription statuses for a contact.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PublicSubscriptionStatusesResponse
	{
		
		/// <summary>
		/// Email address of the contact.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="recipient")]
		public string Recipient { get; set; }
		
		/// <summary>
		/// A list of all of the contact's subscriptions statuses.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="subscriptionStatuses")]
		public PublicSubscriptionStatus[] SubscriptionStatuses { get; set; }
	}
	
	/// <summary>
	/// A request to change the status of a contact's subscription.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PublicUpdateSubscriptionStatusRequest
	{
		
		/// <summary>
		/// Contact's email address.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="emailAddress")]
		public string EmailAddress { get; set; }
		
		/// <summary>
		/// Legal basis for updating the contact's status (required for GDPR enabled portals).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="legalBasis")]
		public PublicSubscriptionStatusLegalBasis LegalBasis { get; set; }
		
		/// <summary>
		/// A more detailed explanation to go with the legal basis (required for GDPR enabled portals).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="legalBasisExplanation")]
		public string LegalBasisExplanation { get; set; }
		
		/// <summary>
		/// ID of the subscription being updated for the contact.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="subscriptionId")]
		public string SubscriptionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SubscriptionDefinition
	{
		
		/// <summary>
		/// The method or technology used to contact.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="communicationMethod")]
		public string CommunicationMethod { get; set; }
		
		/// <summary>
		/// Time at which the definition was created.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		/// <summary>
		/// A description of the subscription.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The ID of the definition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Whether the definition is active or archived.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public bool IsActive { get; set; }
		
		/// <summary>
		/// A subscription definition created by HubSpot.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isDefault")]
		public bool IsDefault { get; set; }
		
		/// <summary>
		/// A default description that is used by some HubSpot tools and cannot be edited.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isInternal")]
		public bool IsInternal { get; set; }
		
		/// <summary>
		/// The name of the subscription.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The purpose of this subscription or the department in your organization that uses it.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="purpose")]
		public string Purpose { get; set; }
		
		/// <summary>
		/// Time at which the definition was last updated.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="updatedAt")]
		public System.DateTimeOffset UpdatedAt { get; set; }
	}
	
	/// <summary>
	/// A collection of subscription definitions for the portal.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SubscriptionDefinitionsResponse
	{
		
		/// <summary>
		/// A list of all subscription definitions.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="subscriptionDefinitions")]
		public SubscriptionDefinition[] SubscriptionDefinitions { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Get subscription definitions
		/// Get a list of all subscription definitions for the portal
		/// Get_Slashcommunication_preferencesSlashv3Slashdefinitions_getPage communication-preferences/v3/definitions
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<SubscriptionDefinitionsResponse> Get_Slashcommunication_preferencesSlashv3Slashdefinitions_getPageAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "communication-preferences/v3/definitions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SubscriptionDefinitionsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get subscription statuses for a contact
		/// Returns a list of subscriptions and their status for a given contact.
		/// Get_Slashcommunication_preferencesSlashv3SlashstatusSlashemailSlashemailAddress_getEmailStatus communication-preferences/v3/status/email/{emailAddress}
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<PublicSubscriptionStatusesResponse> Get_Slashcommunication_preferencesSlashv3SlashstatusSlashemailSlashemailAddress_getEmailStatusAsync(string emailAddress, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "communication-preferences/v3/status/email/"+ (emailAddress==null? "" : System.Uri.EscapeDataString(emailAddress));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PublicSubscriptionStatusesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Subscribe a contact
		/// Subscribes a contact to the given subscription type. This API is not valid to use for subscribing a contact at a brand or portal level and will return an error.
		/// Post_Slashcommunication_preferencesSlashv3Slashsubscribe_subscribe communication-preferences/v3/subscribe
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<PublicSubscriptionStatus> Post_Slashcommunication_preferencesSlashv3Slashsubscribe_subscribeAsync(PublicUpdateSubscriptionStatusRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "communication-preferences/v3/subscribe";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PublicSubscriptionStatus>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Unsubscribe a contact
		/// Unsubscribes a contact from the given subscription type. This API is not valid to use for unsubscribing a contact at a brand or portal level and will return an error.
		/// Post_Slashcommunication_preferencesSlashv3Slashunsubscribe_unsubscribe communication-preferences/v3/unsubscribe
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<PublicSubscriptionStatus> Post_Slashcommunication_preferencesSlashv3Slashunsubscribe_unsubscribeAsync(PublicUpdateSubscriptionStatusRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "communication-preferences/v3/unsubscribe";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PublicSubscriptionStatus>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
