//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Comparators
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LessThan")]
		LessThan = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LessThanOrEqualTo")]
		LessThanOrEqualTo = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EqualTo")]
		EqualTo = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GreaterThanOrEqualTo")]
		GreaterThanOrEqualTo = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GreaterThan")]
		GreaterThan = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DivisionGroupByPartyViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="content")]
		public PartyVoteResultViewModel[] Content { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contentCount")]
		public System.Nullable<System.Int32> ContentCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="date")]
		public System.Nullable<System.DateTimeOffset> Date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="divisionId")]
		public System.Nullable<System.Int32> DivisionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="notContent")]
		public PartyVoteResultViewModel[] NotContent { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="notContentCount")]
		public System.Nullable<System.Int32> NotContentCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="number")]
		public System.Nullable<System.Int32> Number { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PartyVoteResultViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="partyName")]
		public string PartyName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="voteCount")]
		public System.Nullable<System.Int32> VoteCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DivisionViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="amendmentMotionNotes")]
		public string AmendmentMotionNotes { get; set; }
		
		/// <summary>
		/// Authoritative content count is the official count. This is the teller content count when tellers are present, but member content count when there are no tellers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authoritativeContentCount")]
		public System.Nullable<System.Int32> AuthoritativeContentCount { get; set; }
		
		/// <summary>
		/// Authoritative not content count is the official count. This is the teller not content count when tellers are present, but member not content count when there are no tellers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authoritativeNotContentCount")]
		public System.Nullable<System.Int32> AuthoritativeNotContentCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contentTellers")]
		public MemberViewModel[] ContentTellers { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contents")]
		public MemberViewModel[] Contents { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="date")]
		public System.Nullable<System.DateTimeOffset> Date { get; set; }
		
		/// <summary>
		/// Whether the division had tellers or not
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="divisionHadTellers")]
		public System.Nullable<System.Boolean> DivisionHadTellers { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="divisionId")]
		public System.Nullable<System.Int32> DivisionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="divisionWasExclusivelyRemote")]
		public System.Nullable<System.Boolean> DivisionWasExclusivelyRemote { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isGovernmentContent")]
		public System.Nullable<System.Boolean> IsGovernmentContent { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isGovernmentWin")]
		public System.Nullable<System.Boolean> IsGovernmentWin { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isHouse")]
		public System.Nullable<System.Boolean> IsHouse { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isWhipped")]
		public System.Nullable<System.Boolean> IsWhipped { get; set; }
		
		/// <summary>
		/// Member content count is the total tally of all members that voted content
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="memberContentCount")]
		public System.Nullable<System.Int32> MemberContentCount { get; set; }
		
		/// <summary>
		/// Member not content count is the total tally of all members that voted not content
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="memberNotContentCount")]
		public System.Nullable<System.Int32> MemberNotContentCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="notContentTellers")]
		public MemberViewModel[] NotContentTellers { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="notContents")]
		public MemberViewModel[] NotContents { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="notes")]
		public string Notes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="number")]
		public System.Nullable<System.Int32> Number { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="remoteVotingEnd")]
		public System.Nullable<System.DateTimeOffset> RemoteVotingEnd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="remoteVotingStart")]
		public System.Nullable<System.DateTimeOffset> RemoteVotingStart { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sponsoringMemberId")]
		public System.Nullable<System.Int32> SponsoringMemberId { get; set; }
		
		/// <summary>
		/// Content count is count recorded by the tellers
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tellerContentCount")]
		public System.Nullable<System.Int32> TellerContentCount { get; set; }
		
		/// <summary>
		/// Not Content count recorded by the tellers
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tellerNotContentCount")]
		public System.Nullable<System.Int32> TellerNotContentCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MemberViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="listAs")]
		public string ListAs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="memberFrom")]
		public string MemberFrom { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="memberId")]
		public System.Nullable<System.Int32> MemberId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="party")]
		public string Party { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="partyAbbreviation")]
		public string PartyAbbreviation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="partyColour")]
		public string PartyColour { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="partyIsMainParty")]
		public System.Nullable<System.Boolean> PartyIsMainParty { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MemberVotingRecordViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="memberId")]
		public System.Nullable<System.Int32> MemberId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="memberWasContent")]
		public System.Nullable<System.Boolean> MemberWasContent { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="memberWasTeller")]
		public System.Nullable<System.Boolean> MemberWasTeller { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="publishedDivision")]
		public DivisionViewModel PublishedDivision { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Return Divisions results grouped by party
		/// Get a list of Divisions which contain grouped by party
		/// DataDivisionsGroupedbypartyGetBySearchTermAndMemberIdAndIncludeWhenMemberWasTellerAndStartDateAndEndDateAndDivisionNumberAndTotalVotesCast_ComparatorAndTotalVotesCast_ValueToCompareAndMajority_ComparatorAndMajority_ValueToCompare data/Divisions/groupedbyparty
		/// </summary>
		/// <param name="SearchTerm">Divisions containing search term within title or number</param>
		/// <param name="MemberId">Divisions returning Member with Member ID voting records</param>
		/// <param name="IncludeWhenMemberWasTeller">Divisions where member was a teller as well as if they actually voted</param>
		/// <param name="StartDate">Divisions where division date in one or after date provided. Date format is yyyy-MM-dd</param>
		/// <param name="EndDate">Divisions where division date in one or before date provided. Date format is yyyy-MM-dd</param>
		/// <param name="DivisionNumber">Division Number - as specified by the House, unique within a session. This is different to the division id which uniquely identifies a division in this system and is passed to the GET division endpoint</param>
		/// <param name="TotalVotesCast_Comparator">comparison operator to use</param>
		/// <param name="TotalVotesCast_ValueToCompare">value to compare to with the operator provided</param>
		/// <param name="Majority_Comparator">comparison operator to use</param>
		/// <param name="Majority_ValueToCompare">value to compare to with the operator provided</param>
		/// <returns>List of divisions with votes grouped by party</returns>
		public async Task<DivisionGroupByPartyViewModel> DataDivisionsGroupedbypartyGetBySearchTermAndMemberIdAndIncludeWhenMemberWasTellerAndStartDateAndEndDateAndDivisionNumberAndTotalVotesCast_ComparatorAndTotalVotesCast_ValueToCompareAndMajority_ComparatorAndMajority_ValueToCompareAsync(string SearchTerm, int MemberId, bool IncludeWhenMemberWasTeller, System.DateTimeOffset StartDate, System.DateTimeOffset EndDate, int DivisionNumber, Comparators TotalVotesCast_Comparator, int TotalVotesCast_ValueToCompare, Comparators Majority_Comparator, int Majority_ValueToCompare, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "data/Divisions/groupedbyparty?SearchTerm=" + (SearchTerm==null? "" : System.Uri.EscapeDataString(SearchTerm))+"&MemberId="+MemberId+"&IncludeWhenMemberWasTeller="+IncludeWhenMemberWasTeller+"&StartDate=" + StartDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&EndDate=" + EndDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&DivisionNumber="+DivisionNumber+"&TotalVotesCast.Comparator=" + TotalVotesCast_Comparator+"&TotalVotesCast.ValueToCompare="+TotalVotesCast_ValueToCompare+"&Majority.Comparator=" + Majority_Comparator+"&Majority.ValueToCompare="+Majority_ValueToCompare;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DivisionGroupByPartyViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Return voting records for a Member
		/// Get a list of voting records for a Member.
		/// DataDivisionsMembervotingGetByMemberIdAndSearchTermAndIncludeWhenMemberWasTellerAndStartDateAndEndDateAndDivisionNumberAndTotalVotesCast_ComparatorAndTotalVotesCast_ValueToCompareAndMajority_ComparatorAndMajority_ValueToCompareAndSkipAndTake data/Divisions/membervoting
		/// </summary>
		/// <param name="MemberId">Id number of a Member whose voting records are to be returned
		/// Minimum: 1
		/// Maximum: 2147483647
		// </param>
		/// <param name="SearchTerm">Divisions containing search term within title or number</param>
		/// <param name="IncludeWhenMemberWasTeller">Divisions where member was a teller as well as if they actually voted</param>
		/// <param name="StartDate">Divisions where division date in one or after date provided. Date format is yyyy-MM-dd</param>
		/// <param name="EndDate">Divisions where division date in one or before date provided. Date format is yyyy-MM-dd</param>
		/// <param name="DivisionNumber">Division Number - as specified by the House, unique within a session. This is different to the division id which uniquely identifies a division in this system and is passed to the GET division endpoint</param>
		/// <param name="TotalVotesCast_Comparator">comparison operator to use</param>
		/// <param name="TotalVotesCast_ValueToCompare">value to compare to with the operator provided</param>
		/// <param name="Majority_Comparator">comparison operator to use</param>
		/// <param name="Majority_ValueToCompare">value to compare to with the operator provided</param>
		/// <param name="skip">The number of records to skip. Must be a positive integer. Default is 0</param>
		/// <param name="take">The number of records to return per page. Must be more than 0. Default is 25</param>
		/// <returns>List of voting records for a member</returns>
		public async Task<MemberVotingRecordViewModel> DataDivisionsMembervotingGetByMemberIdAndSearchTermAndIncludeWhenMemberWasTellerAndStartDateAndEndDateAndDivisionNumberAndTotalVotesCast_ComparatorAndTotalVotesCast_ValueToCompareAndMajority_ComparatorAndMajority_ValueToCompareAndSkipAndTakeAsync(int MemberId, string SearchTerm, bool IncludeWhenMemberWasTeller, System.DateTimeOffset StartDate, System.DateTimeOffset EndDate, int DivisionNumber, Comparators TotalVotesCast_Comparator, int TotalVotesCast_ValueToCompare, Comparators Majority_Comparator, int Majority_ValueToCompare, int skip, int take, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "data/Divisions/membervoting?MemberId="+MemberId+"&SearchTerm=" + (SearchTerm==null? "" : System.Uri.EscapeDataString(SearchTerm))+"&IncludeWhenMemberWasTeller="+IncludeWhenMemberWasTeller+"&StartDate=" + StartDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&EndDate=" + EndDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&DivisionNumber="+DivisionNumber+"&TotalVotesCast.Comparator=" + TotalVotesCast_Comparator+"&TotalVotesCast.ValueToCompare="+TotalVotesCast_ValueToCompare+"&Majority.Comparator=" + Majority_Comparator+"&Majority.ValueToCompare="+Majority_ValueToCompare+"&skip="+skip+"&take="+take;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<MemberVotingRecordViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Return a list of Divisions
		/// Get a list of Divisions which meet the specified criteria.
		/// DataDivisionsSearchGetBySearchTermAndMemberIdAndIncludeWhenMemberWasTellerAndStartDateAndEndDateAndDivisionNumberAndTotalVotesCast_ComparatorAndTotalVotesCast_ValueToCompareAndMajority_ComparatorAndMajority_ValueToCompareAndSkipAndTake data/Divisions/search
		/// </summary>
		/// <param name="SearchTerm">Divisions containing search term within title or number</param>
		/// <param name="MemberId">Divisions returning Member with Member ID voting records</param>
		/// <param name="IncludeWhenMemberWasTeller">Divisions where member was a teller as well as if they actually voted</param>
		/// <param name="StartDate">Divisions where division date in one or after date provided. Date format is yyyy-MM-dd</param>
		/// <param name="EndDate">Divisions where division date in one or before date provided. Date format is yyyy-MM-dd</param>
		/// <param name="DivisionNumber">Division Number - as specified by the House, unique within a session. This is different to the division id which uniquely identifies a division in this system and is passed to the GET division endpoint</param>
		/// <param name="TotalVotesCast_Comparator">comparison operator to use</param>
		/// <param name="TotalVotesCast_ValueToCompare">value to compare to with the operator provided</param>
		/// <param name="Majority_Comparator">comparison operator to use</param>
		/// <param name="Majority_ValueToCompare">value to compare to with the operator provided</param>
		/// <param name="skip">The number of records to skip. Must be a positive integer. Default is 0</param>
		/// <param name="take">The number of records to return per page. Must be more than 0. Default is 25</param>
		/// <returns>List of divisions matching specified parameters</returns>
		public async Task<DivisionViewModel[]> DataDivisionsSearchGetBySearchTermAndMemberIdAndIncludeWhenMemberWasTellerAndStartDateAndEndDateAndDivisionNumberAndTotalVotesCast_ComparatorAndTotalVotesCast_ValueToCompareAndMajority_ComparatorAndMajority_ValueToCompareAndSkipAndTakeAsync(string SearchTerm, int MemberId, bool IncludeWhenMemberWasTeller, System.DateTimeOffset StartDate, System.DateTimeOffset EndDate, int DivisionNumber, Comparators TotalVotesCast_Comparator, int TotalVotesCast_ValueToCompare, Comparators Majority_Comparator, int Majority_ValueToCompare, int skip, int take, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "data/Divisions/search?SearchTerm=" + (SearchTerm==null? "" : System.Uri.EscapeDataString(SearchTerm))+"&MemberId="+MemberId+"&IncludeWhenMemberWasTeller="+IncludeWhenMemberWasTeller+"&StartDate=" + StartDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&EndDate=" + EndDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&DivisionNumber="+DivisionNumber+"&TotalVotesCast.Comparator=" + TotalVotesCast_Comparator+"&TotalVotesCast.ValueToCompare="+TotalVotesCast_ValueToCompare+"&Majority.Comparator=" + Majority_Comparator+"&Majority.ValueToCompare="+Majority_ValueToCompare+"&skip="+skip+"&take="+take;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DivisionViewModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Return total results count
		/// Get total count of Divisions meeting the specified query, useful for paging lists etc...
		/// DataDivisionsSearchTotalResultsGetBySearchTermAndMemberIdAndIncludeWhenMemberWasTellerAndStartDateAndEndDateAndDivisionNumberAndTotalVotesCast_ComparatorAndTotalVotesCast_ValueToCompareAndMajority_ComparatorAndMajority_ValueToCompare data/Divisions/searchTotalResults
		/// </summary>
		/// <param name="SearchTerm">Divisions containing search term within title or number</param>
		/// <param name="MemberId">Divisions returning Member with Member ID voting records</param>
		/// <param name="IncludeWhenMemberWasTeller">Divisions where member was a teller as well as if they actually voted</param>
		/// <param name="StartDate">Divisions where division date in one or after date provided. Date format is yyyy-MM-dd</param>
		/// <param name="EndDate">Divisions where division date in one or before date provided. Date format is yyyy-MM-dd</param>
		/// <param name="DivisionNumber">Division Number - as specified by the House, unique within a session. This is different to the division id which uniquely identifies a division in this system and is passed to the GET division endpoint</param>
		/// <param name="TotalVotesCast_Comparator">comparison operator to use</param>
		/// <param name="TotalVotesCast_ValueToCompare">value to compare to with the operator provided</param>
		/// <param name="Majority_Comparator">comparison operator to use</param>
		/// <param name="Majority_ValueToCompare">value to compare to with the operator provided</param>
		/// <returns>Division with id matching given divisionId</returns>
		public async Task<int> DataDivisionsSearchTotalResultsGetBySearchTermAndMemberIdAndIncludeWhenMemberWasTellerAndStartDateAndEndDateAndDivisionNumberAndTotalVotesCast_ComparatorAndTotalVotesCast_ValueToCompareAndMajority_ComparatorAndMajority_ValueToCompareAsync(string SearchTerm, int MemberId, bool IncludeWhenMemberWasTeller, System.DateTimeOffset StartDate, System.DateTimeOffset EndDate, int DivisionNumber, Comparators TotalVotesCast_Comparator, int TotalVotesCast_ValueToCompare, Comparators Majority_Comparator, int Majority_ValueToCompare, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "data/Divisions/searchTotalResults?SearchTerm=" + (SearchTerm==null? "" : System.Uri.EscapeDataString(SearchTerm))+"&MemberId="+MemberId+"&IncludeWhenMemberWasTeller="+IncludeWhenMemberWasTeller+"&StartDate=" + StartDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&EndDate=" + EndDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&DivisionNumber="+DivisionNumber+"&TotalVotesCast.Comparator=" + TotalVotesCast_Comparator+"&TotalVotesCast.ValueToCompare="+TotalVotesCast_ValueToCompare+"&Majority.Comparator=" + Majority_Comparator+"&Majority.ValueToCompare="+Majority_ValueToCompare;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<int>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Return a Division
		/// Get a single Division which has the Id specified.
		/// DataDivisions_divisionIdGet data/Divisions/{divisionId}
		/// </summary>
		/// <param name="divisionId">Division with ID specified</param>
		/// <returns>Division with id matching given divisionId</returns>
		public async Task<DivisionViewModel> DataDivisions_divisionIdGetAsync(int divisionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "data/Divisions/"+divisionId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DivisionViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
