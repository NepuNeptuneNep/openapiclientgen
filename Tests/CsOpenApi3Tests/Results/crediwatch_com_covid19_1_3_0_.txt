//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetStatus
	{
		
		[System.ComponentModel.DefaultValue("Not Available")]
		[System.Runtime.Serialization.DataMember(Name="answered_by")]
		public string Answered_by { get; set; } = "Not Available";
		
		[System.ComponentModel.DefaultValue("Call cant be placed")]
		[System.Runtime.Serialization.DataMember(Name="error")]
		public string Error { get; set; } = "Call cant be placed";
		
		[System.Runtime.Serialization.DataMember(Name="option_selected")]
		public string Option_selected { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="phone_number")]
		public string Phone_number { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="previously_verified_at")]
		public string Previously_verified_at { get; set; }
		
		[System.ComponentModel.DefaultValue("Not Available")]
		[System.Runtime.Serialization.DataMember(Name="progress")]
		public string Progress { get; set; } = "Not Available";
		
		[System.ComponentModel.DefaultValue("Not Available")]
		[System.Runtime.Serialization.DataMember(Name="token")]
		public string Token { get; set; } = "Not Available";
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class HTTPValidationError
	{
		
		[System.Runtime.Serialization.DataMember(Name="detail")]
		public ValidationError[] Detail { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ValidationError
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="loc")]
		public string[] Loc { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="msg")]
		public string Msg { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PlaceCall
	{
		
		[System.ComponentModel.DefaultValue("Not Available")]
		[System.Runtime.Serialization.DataMember(Name="answered_by")]
		public string Answered_by { get; set; } = "Not Available";
		
		[System.ComponentModel.DefaultValue("Call cant be placed")]
		[System.Runtime.Serialization.DataMember(Name="error")]
		public string Error { get; set; } = "Call cant be placed";
		
		[System.Runtime.Serialization.DataMember(Name="option_selected")]
		public string Option_selected { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="phone_number")]
		public string Phone_number { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="previously_verified_at")]
		public string Previously_verified_at { get; set; }
		
		[System.ComponentModel.DefaultValue("Not Available")]
		[System.Runtime.Serialization.DataMember(Name="progress")]
		public string Progress { get; set; } = "Not Available";
		
		[System.ComponentModel.DefaultValue("Not Available")]
		[System.Runtime.Serialization.DataMember(Name="token")]
		public string Token { get; set; } = "Not Available";
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StatusCall
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public GetStatus Data { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public VerifyNameMeta Meta { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VerifyNameMeta
	{
		
		[System.ComponentModel.DefaultValue("111111111111111111111111")]
		[System.Runtime.Serialization.DataMember(Name="job_id")]
		public string Job_id { get; set; } = "111111111111111111111111";
		
		[System.Runtime.Serialization.DataMember(Name="job_time")]
		public System.Nullable<System.Int32> Job_time { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="query")]
		public string Query { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VerifyName
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public VerifyNameData[] Data { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public VerifyNameMeta Meta { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VerifyNameData
	{
		
		[System.ComponentModel.DefaultValue("Not Available")]
		[System.Runtime.Serialization.DataMember(Name="business_name")]
		public string Business_name { get; set; } = "Not Available";
		
		[System.ComponentModel.DefaultValue("Not Available")]
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; } = "Not Available";
		
		[System.Runtime.Serialization.DataMember(Name="department_code_and_type")]
		public string[] Department_code_and_type { get; set; }
		
		[System.ComponentModel.DefaultValue("Not Available")]
		[System.Runtime.Serialization.DataMember(Name="entity_type")]
		public string Entity_type { get; set; } = "Not Available";
		
		[System.Runtime.Serialization.DataMember(Name="is_gstn_verified")]
		public System.Nullable<System.Boolean> Is_gstn_verified { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nature_of_business")]
		public string[] Nature_of_business { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pincode")]
		public System.Nullable<System.Int32> Pincode { get; set; }
		
		[System.ComponentModel.DefaultValue("Not Available")]
		[System.Runtime.Serialization.DataMember(Name="registration_date")]
		public string Registration_date { get; set; } = "Not Available";
		
		[System.ComponentModel.DefaultValue("Not Available")]
		[System.Runtime.Serialization.DataMember(Name="registration_type")]
		public string Registration_type { get; set; } = "Not Available";
		
		[System.ComponentModel.DefaultValue("Not Available")]
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; } = "Not Available";
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VerifyPhone
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public PlaceCall Data { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public VerifyNameMeta Meta { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Status Call
		/// Status_call_api_v1_status_call_get api/v1/status/call
		/// </summary>
		/// <returns>Successful Response</returns>
		public async Task<StatusCall> Status_call_api_v1_status_call_getAsync(string query, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/status/call?query=" + (query==null? "" : System.Uri.EscapeDataString(query));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StatusCall>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Status Sku
		/// Status_sku_api_v1_status_sku_get api/v1/status/sku
		/// </summary>
		/// <returns>Successful Response</returns>
		public async Task<StatusCall> Status_sku_api_v1_status_sku_getAsync(string query, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/status/sku?query=" + (query==null? "" : System.Uri.EscapeDataString(query));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StatusCall>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Verify Name
		/// Verify_name_api_v1_verify_name_get api/v1/verify/name
		/// </summary>
		/// <returns>Successful Response</returns>
		public async Task<VerifyName> Verify_name_api_v1_verify_name_getAsync(string query, string state, string city, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/verify/name?query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&state=" + (state==null? "" : System.Uri.EscapeDataString(state))+"&city=" + (city==null? "" : System.Uri.EscapeDataString(city));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<VerifyName>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Verify Business
		/// Verify_business_api_v1_verify_phone_get api/v1/verify/phone
		/// </summary>
		/// <returns>Successful Response</returns>
		public async Task<VerifyPhone> Verify_business_api_v1_verify_phone_getAsync(string query, object locking_period, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/verify/phone?query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&locking_period=" + locking_period;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<VerifyPhone>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Verify Sku
		/// Verify_sku_api_v1_verify_sku_get api/v1/verify/sku
		/// </summary>
		/// <returns>Successful Response</returns>
		public async Task<VerifyPhone> Verify_sku_api_v1_verify_sku_getAsync(string query, object locking_period, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/verify/sku?query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&locking_period=" + locking_period;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<VerifyPhone>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
