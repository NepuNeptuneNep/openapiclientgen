//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Describes a single AS2 connection in all of it variations
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AS2Transport
	{
		
		/// <summary>
		/// A description of the content of the message. Usually, the same for all messages.
		/// </summary>
		[System.ComponentModel.DefaultValue("SARS-CoV-2 Electronic Lab Results")]
		[System.Runtime.Serialization.DataMember(Name="contentDescription")]
		public string ContentDescription { get; set; } = "SARS-CoV-2 Electronic Lab Results";
		
		/// <summary>
		/// The MIME type of the message
		/// </summary>
		[System.ComponentModel.DefaultValue("application/hl7-v2")]
		[System.Runtime.Serialization.DataMember(Name="mimeType")]
		public string MimeType { get; set; } = "application/hl7-v2";
		
		/// <summary>
		/// The AS2 id of the receiver. Usually, the same for all senders.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiverId")]
		public string ReceiverId { get; set; }
		
		/// <summary>
		/// The URL to the AS2 end-point
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiverUrl")]
		public string ReceiverUrl { get; set; }
		
		/// <summary>
		/// The email address to contact someone about the message
		/// </summary>
		[System.ComponentModel.DefaultValue("reportstream@cdc.gov")]
		[System.Runtime.Serialization.DataMember(Name="senderEmail")]
		public string SenderEmail { get; set; } = "reportstream@cdc.gov";
		
		/// <summary>
		/// The AS2 id of the sender. Usually, assigned by receiver to PRIME.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="senderId")]
		public string SenderId { get; set; }
		
		/// <summary>
		/// The discriminator
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Moves results to a Azure Blob Store. Typcially used for HHS Protect interfaces.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BlobStoreTransport
	{
		
		/// <summary>
		/// This name of the Azure container
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="containerName")]
		public string ContainerName { get; set; }
		
		/// <summary>
		/// This looks for an env var with this name. env var value is the connection string
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="storageName")]
		public string StorageName { get; set; }
		
		/// <summary>
		/// The discriminator
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// A custom configuration for a custom schema
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomConfiguration
	{
		
		/// <summary>
		/// The format of the serializer
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="format")]
		public CustomConfigurationFormat Format { get; set; }
		
		/// <summary>
		/// The format to use for the file name generated by the translation
		/// </summary>
		[System.ComponentModel.DefaultValue("standard")]
		[System.Runtime.Serialization.DataMember(Name="nameFormat")]
		public string NameFormat { get; set; } = "standard";
		
		/// <summary>
		/// The name of the receiving organization in the message
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="receivingOrganization")]
		public string ReceivingOrganization { get; set; }
		
		/// <summary>
		/// The name of the custom schema
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="schemaName")]
		public string SchemaName { get; set; }
		
		/// <summary>
		/// The transport to use
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transport")]
		public SFTPTransport Transport { get; set; }
		
		/// <summary>
		/// The discrimenator
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum CustomConfigurationFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CSV = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HL7 = 1,
	}
	
	/// <summary>
	/// Describes a single SFTP connection in all of it variations
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SFTPTransport
	{
		
		/// <summary>
		/// The file path to place the report
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="filePath")]
		public string FilePath { get; set; }
		
		/// <summary>
		/// Host name and domain
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="host")]
		public string Host { get; set; }
		
		/// <summary>
		/// The port to use
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="port")]
		public double Port { get; set; }
		
		/// <summary>
		/// The discriminator
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Destination
	{
		
		/// <summary>
		/// The number of reports being sent to this destination
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemCount")]
		public System.Nullable<System.Int32> ItemCount { get; set; }
		
		/// <summary>
		/// The name of the organization reciving the report
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="organization")]
		public string Organization { get; set; }
		
		/// <summary>
		/// The organization id (i.e. {state abbreviation}-phd)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="organization_id")]
		public string Organization_id { get; set; }
		
		/// <summary>
		/// The time at which the report will be sent
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sending_at")]
		public System.Nullable<System.DateTimeOffset> Sending_at { get; set; }
		
		/// <summary>
		/// The service used for delivering the report
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="service")]
		public string Service { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Detail
	{
		
		/// <summary>
		/// The details of the error
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="detail")]
		public string Detail1 { get; set; }
		
		/// <summary>
		/// Depends on scope, either the item's id (message_id) or the report's id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Does the error apply to one item
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scope")]
		public System.Nullable<DetailScope> Scope { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum DetailScope
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Parameter = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Report = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Item = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ItemRouting
	{
		
		/// <summary>
		/// The organization and service destinations
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destinations")]
		public string[] Destinations { get; set; }
		
		/// <summary>
		/// the index of the item in the submitted report (0 based)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reportIndex")]
		public System.Nullable<System.Int32> ReportIndex { get; set; }
		
		/// <summary>
		/// The tracking id provided by the sender defined in the schema, null otherwise
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trackingId")]
		public string TrackingId { get; set; }
	}
	
	/// <summary>
	/// A transport type that does not do anything
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NullTransport
	{
		
		/// <summary>
		/// A dummy value
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dummy")]
		public string Dummy { get; set; }
		
		/// <summary>
		/// The discriminator
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// An organization connected to data hub
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Organization
	{
		
		/// <summary>
		/// the county name (must match FIPS name)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="countyName")]
		public string CountyName { get; set; }
		
		/// <summary>
		/// the displayable description of the organization
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="jurisdiction")]
		public OrganizationJurisdiction Jurisdiction { get; set; }
		
		/// <summary>
		/// The metadata associated with an setting
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public SettingMetadata Meta { get; set; }
		
		/// <summary>
		/// the unique id for the organization
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// the two letter code for the organization
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stateCode")]
		public string StateCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum OrganizationJurisdiction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		National = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		State = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		County = 2,
	}
	
	/// <summary>
	/// The metadata associated with an setting
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SettingMetadata
	{
		
		/// <summary>
		/// the time that the particular revision was created
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public string CreatedAt { get; set; }
		
		/// <summary>
		/// the user who created the particular revision
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public string CreatedBy { get; set; }
		
		/// <summary>
		/// the version number of the object
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<System.Double> Version { get; set; }
	}
	
	/// <summary>
	/// A receiver of reports from the data hub
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Receiver
	{
		
		/// <summary>
		/// Display ready description of the receiver
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// What items to include in the report.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jurisdictionalFilters")]
		public ReceiverJurisdictionalFilters[] ReceiverJurisdictionalFilters { get; set; }
		
		/// <summary>
		/// The metadata associated with an setting
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public SettingMetadata Meta { get; set; }
		
		/// <summary>
		/// The unique name for the receiver. Should include the organization name as a prefix.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The name of the organization that this receiver belongs to
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="organizationName")]
		public string OrganizationName { get; set; }
		
		/// <summary>
		/// When the report is sent if not immediately
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="timing")]
		public ReceiverTiming Timing { get; set; }
		
		/// <summary>
		/// The topic of for this receiver. Must match the supported topics.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="topic")]
		public string Topic { get; set; }
		
		/// <summary>
		/// How the report is translated from the sender. A report can be sent in multiple ways.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="translations")]
		public string[] Translations { get; set; }
	}
	
	public class ReceiverJurisdictionalFilters
	{
		
		/// <summary>
		/// Ensure that the result does not match
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="doesNotMatch")]
		public System.Nullable<System.Boolean> DoesNotMatch { get; set; }
		
		/// <summary>
		/// What fields to match in the filter
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="matchFields")]
		public System.Nullable<ReceiverJurisdictionalFiltersMatchFields> MatchFields { get; set; }
		
		/// <summary>
		/// What is the value to match against
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="matchValues")]
		public string[] MatchValues { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ReceiverJurisdictionalFiltersMatchFields
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FACILITY_OR_PATIENT_ADDRESS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FACILITY_ADDRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FACILITY_NAME = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ABNORMAL_VALUE = 3,
	}
	
	public class ReceiverTiming
	{
		
		/// <summary>
		/// The UTC hour to send a daily batch
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dailyAt")]
		public System.Nullable<System.Double> DailyAt { get; set; }
		
		/// <summary>
		/// How often send a report
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="frequency")]
		public ReceiverTimingFrequency Frequency { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ReceiverTimingFrequency
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REAL_TIME = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HOURLY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DAILY = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RedoxConfiguration
	{
	}
	
	/// <summary>
	/// Describe the Redox transport
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RedoxTransport
	{
		
		/// <summary>
		/// the base URL to send the Redox message. If missing, production Redox URL is used
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="baseUrl")]
		public string BaseUrl { get; set; }
		
		/// <summary>
		/// The discriminator
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Report
	{
		
		/// <summary>
		/// total destinations recieving the report(s)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destinationCount")]
		public System.Nullable<System.Int32> DestinationCount { get; set; }
		
		/// <summary>
		/// where the report is being sent to
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destinations")]
		public Destination[] Destinations { get; set; }
		
		/// <summary>
		/// total errors found during initial validation.  There may be multiple errors per item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errorCount")]
		public System.Nullable<System.Int32> ErrorCount { get; set; }
		
		/// <summary>
		/// a list of errors in the report
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Detail[] Errors { get; set; }
		
		/// <summary>
		/// the id for the report assigned by the Hub
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// total number of individual reports sent to the Hub (in a csv, the number of data lines sent)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reportItemCount")]
		public System.Nullable<System.Int32> ReportItemCount { get; set; }
		
		/// <summary>
		/// The receiver destination names for each item in the report. This is displayed when verbose=true is present on the query string.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="routing")]
		public ItemRouting[] Routing { get; set; }
		
		/// <summary>
		/// the timestamp for this report submission
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public string Timestamp { get; set; }
		
		/// <summary>
		/// the topic configured for the client organization sender
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="topic")]
		public string Topic { get; set; }
		
		/// <summary>
		/// total warnings found during initial validation.  There may be multiple warnings per item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="warningCount")]
		public System.Nullable<System.Int32> WarningCount { get; set; }
		
		/// <summary>
		/// a list of warnings in the report
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="warnings")]
		public Detail[] Warnings { get; set; }
	}
	
	/// <summary>
	/// An sender of reports to the data hub
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Sender
	{
		
		/// <summary>
		/// Display ready description of the sender
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// the payload format
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="format")]
		public SenderFormat Format { get; set; }
		
		/// <summary>
		/// The metadata associated with an setting
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public SettingMetadata Meta { get; set; }
		
		/// <summary>
		/// Unique name for the senders, includes the orgninzation name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Name of the organization that this sender belongs to
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="organizationName")]
		public string OrganizationName { get; set; }
		
		/// <summary>
		/// the schema name for this sender
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="schema")]
		public string Schema { get; set; }
		
		/// <summary>
		/// Topic of for this sender. Must match the supported topics.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="topic")]
		public string Topic { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum SenderFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CSV = 0,
	}
	
	/// <summary>
	/// A standard HL7 configuration
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StandardHL7Configuration
	{
		
		/// <summary>
		/// A comma delimited list of HL7 fields to convert to the yyyMMddHHmmss format
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="convertTimestampToDateTime")]
		public string ConvertTimestampToDateTime { get; set; }
		
		/// <summary>
		/// Default the AOE result to UNK
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultAoeToUnknown")]
		public System.Nullable<System.Boolean> DefaultAoeToUnknown { get; set; }
		
		/// <summary>
		/// Include the AOE
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="includeAOE")]
		public bool IncludeAOE { get; set; }
		
		/// <summary>
		/// The format to use for the file name generated by the translation
		/// </summary>
		[System.ComponentModel.DefaultValue("standard")]
		[System.Runtime.Serialization.DataMember(Name="nameFormat")]
		public string NameFormat { get; set; } = "standard";
		
		/// <summary>
		/// How to format phone numbers (XTN fields)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phoneNumberFormatting")]
		public System.Nullable<StandardHL7ConfigurationPhoneNumberFormatting> PhoneNumberFormatting { get; set; }
		
		/// <summary>
		/// The receiving application name (needed for HL7 formats)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="receivingApplicationName")]
		public string ReceivingApplicationName { get; set; }
		
		/// <summary>
		/// The receiving application OID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="receivingApplicationOID")]
		public string ReceivingApplicationOID { get; set; }
		
		/// <summary>
		/// The receiving facility name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="receivingFacilityName")]
		public string ReceivingFacilityName { get; set; }
		
		/// <summary>
		/// The receiving facility name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="receivingFacilityOID")]
		public string ReceivingFacilityOID { get; set; }
		
		/// <summary>
		/// The name of the receiving organization in the message
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="receivingOrganization")]
		public string ReceivingOrganization { get; set; }
		
		/// <summary>
		/// The reporting facility id (if different from CDC PRIME's OID)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reportingFacilityId")]
		public string ReportingFacilityId { get; set; }
		
		/// <summary>
		/// The reporting facility id type (if different from OID)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reportingFacilityIdType")]
		public string ReportingFacilityIdType { get; set; }
		
		/// <summary>
		/// The reporting facility name (if different from CDC PRIME)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reportingFacilityName")]
		public string ReportingFacilityName { get; set; }
		
		/// <summary>
		/// Suppress the AOE OBX results
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suppressAoe")]
		public System.Nullable<System.Boolean> SuppressAoe { get; set; }
		
		/// <summary>
		/// A comma delimited list of HL7 fields to suppress
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suppressHl7Fields")]
		public string SuppressHl7Fields { get; set; }
		
		/// <summary>
		/// Suppress QST component is AOE OBX segments
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suppressQstForAoe")]
		public System.Nullable<System.Boolean> SuppressQstForAoe { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transport")]
		public SFTPTransport Transport { get; set; }
		
		/// <summary>
		/// Truncate the HD fields to HD_TRUNCATION_LIMIT
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="truncateHDNamespaceIds")]
		public System.Nullable<System.Boolean> TruncateHDNamespaceIds { get; set; }
		
		/// <summary>
		/// The discrimenator
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// Use BHS and FHS header
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="useBatchHeaders")]
		public bool UseBatchHeaders { get; set; }
		
		/// <summary>
		/// A comma delimited list of element names that should use blank instead of unknown
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="useBlankInsteadOfUnknown")]
		public string UseBlankInsteadOfUnknown { get; set; }
		
		/// <summary>
		/// Use the PID-14 field for patient email instead of the standard PID-13 field
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="usePid14ForPatientEmail")]
		public System.Nullable<System.Boolean> UsePid14ForPatientEmail { get; set; }
		
		/// <summary>
		/// Set a test process mode flag
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="useTestProcessingMode")]
		public System.Nullable<System.Boolean> UseTestProcessingMode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum StandardHL7ConfigurationPhoneNumberFormatting
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STANDARD = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ONLY_DIGITS_IN_COMPONENT_ONE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AREA_LOCAL_IN_COMPONENT_ONE = 2,
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// The settings for all organizations of the system. Must have admin access.
		/// SettingsOrganizationsGet settings/organizations
		/// </summary>
		/// <returns>OK</returns>
		public async Task<Organization[]> SettingsOrganizationsGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "settings/organizations";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Organization[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete an organization (and the associated receivers and senders)
		/// SettingsOrganizations_organizationNameDelete settings/organizations/{organizationName}
		/// </summary>
		/// <param name="organizationName">The name of the organization</param>
		/// <returns>OK, the organization setting was deleted</returns>
		public async Task<Organization> SettingsOrganizations_organizationNameDeleteAsync(string organizationName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "settings/organizations/"+ (organizationName==null? "" : System.Uri.EscapeDataString(organizationName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Organization>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// A single organization settings
		/// SettingsOrganizations_organizationNameGet settings/organizations/{organizationName}
		/// </summary>
		/// <param name="organizationName">The name of the organization</param>
		/// <returns>OK</returns>
		public async Task<Organization> SettingsOrganizations_organizationNameGetAsync(string organizationName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "settings/organizations/"+ (organizationName==null? "" : System.Uri.EscapeDataString(organizationName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Organization>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create or update the direct settings associated with an organization
		/// SettingsOrganizations_organizationNamePut settings/organizations/{organizationName}
		/// </summary>
		/// <param name="organizationName">The name of the organization</param>
		/// <returns>OK, the organization setting was updated</returns>
		public async Task<Organization> SettingsOrganizations_organizationNamePutAsync(string organizationName, Organization requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "settings/organizations/"+ (organizationName==null? "" : System.Uri.EscapeDataString(organizationName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Organization>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// A list of receivers and their current settings
		/// SettingsOrganizations_organizationNameReceiversGet settings/organizations/{organizationName}/receivers
		/// </summary>
		/// <param name="organizationName">Fetch receivers with this organization name</param>
		/// <returns>OK</returns>
		public async Task<Receiver[]> SettingsOrganizations_organizationNameReceiversGetAsync(string organizationName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "settings/organizations/"+ (organizationName==null? "" : System.Uri.EscapeDataString(organizationName))+"/receivers";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Receiver[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a receiver
		/// SettingsOrganizations_organizationNameReceivers_receiverNameDelete settings/organizations/{organizationName}/receivers/{receiverName}
		/// </summary>
		/// <param name="organizationName">the organization name</param>
		/// <param name="receiverName">The name of the receiver</param>
		/// <returns>OK, the receiver was deleted</returns>
		public async Task<Receiver> SettingsOrganizations_organizationNameReceivers_receiverNameDeleteAsync(string organizationName, string receiverName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "settings/organizations/"+ (organizationName==null? "" : System.Uri.EscapeDataString(organizationName))+"/receivers/"+ (receiverName==null? "" : System.Uri.EscapeDataString(receiverName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Receiver>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// The settings of a single of receiver
		/// SettingsOrganizations_organizationNameReceivers_receiverNameGet settings/organizations/{organizationName}/receivers/{receiverName}
		/// </summary>
		/// <param name="organizationName">Create receivers under this organization name</param>
		/// <param name="receiverName">The name of the receiver</param>
		/// <returns>OK</returns>
		public async Task<Receiver> SettingsOrganizations_organizationNameReceivers_receiverNameGetAsync(string organizationName, string receiverName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "settings/organizations/"+ (organizationName==null? "" : System.Uri.EscapeDataString(organizationName))+"/receivers/"+ (receiverName==null? "" : System.Uri.EscapeDataString(receiverName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Receiver>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a single reciever
		/// SettingsOrganizations_organizationNameReceivers_receiverNamePut settings/organizations/{organizationName}/receivers/{receiverName}
		/// </summary>
		/// <param name="organizationName">Create receivers under this organization name</param>
		/// <param name="receiverName">The name of the receiver</param>
		/// <returns>OK, the receiver setting was updated</returns>
		public async Task<Receiver> SettingsOrganizations_organizationNameReceivers_receiverNamePutAsync(string organizationName, string receiverName, Receiver requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "settings/organizations/"+ (organizationName==null? "" : System.Uri.EscapeDataString(organizationName))+"/receivers/"+ (receiverName==null? "" : System.Uri.EscapeDataString(receiverName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Receiver>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// A list of senders
		/// SettingsOrganizations_organizationNameSendersGet settings/organizations/{organizationName}/senders
		/// </summary>
		/// <param name="organizationName">Fetch senders with this organization name</param>
		/// <returns>OK</returns>
		public async Task<Sender[]> SettingsOrganizations_organizationNameSendersGetAsync(string organizationName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "settings/organizations/"+ (organizationName==null? "" : System.Uri.EscapeDataString(organizationName))+"/senders";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Sender[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a sender
		/// SettingsOrganizations_organizationNameSenders_senderNameDelete settings/organizations/{organizationName}/senders/{senderName}
		/// </summary>
		/// <param name="organizationName">the organization name</param>
		/// <param name="senderName">The name of a sender to the data hub</param>
		/// <returns>OK, the sender was deleted</returns>
		public async Task<Sender> SettingsOrganizations_organizationNameSenders_senderNameDeleteAsync(string organizationName, string senderName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "settings/organizations/"+ (organizationName==null? "" : System.Uri.EscapeDataString(organizationName))+"/senders/"+ (senderName==null? "" : System.Uri.EscapeDataString(senderName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Sender>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// The settings of a single of sender
		/// SettingsOrganizations_organizationNameSenders_senderNameGet settings/organizations/{organizationName}/senders/{senderName}
		/// </summary>
		/// <param name="organizationName">Fetch senders with this organization name</param>
		/// <param name="senderName">The name of a sender to the data hub</param>
		/// <returns>OK</returns>
		public async Task<Sender> SettingsOrganizations_organizationNameSenders_senderNameGetAsync(string organizationName, string senderName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "settings/organizations/"+ (organizationName==null? "" : System.Uri.EscapeDataString(organizationName))+"/senders/"+ (senderName==null? "" : System.Uri.EscapeDataString(senderName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Sender>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a single sender
		/// SettingsOrganizations_organizationNameSenders_senderNamePut settings/organizations/{organizationName}/senders/{senderName}
		/// </summary>
		/// <param name="organizationName">Fetch senders with this organization name</param>
		/// <param name="senderName">The name of a sender to the data hub</param>
		/// <returns>OK</returns>
		public async Task<Sender[]> SettingsOrganizations_organizationNameSenders_senderNamePutAsync(string organizationName, string senderName, Sender requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "settings/organizations/"+ (organizationName==null? "" : System.Uri.EscapeDataString(organizationName))+"/senders/"+ (senderName==null? "" : System.Uri.EscapeDataString(senderName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Sender[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
	
	public enum ReportsPostByClientAndOptionAnd_defaultAndRouteToOption
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ValidatePayload = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CheckConnections = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SendImmediately = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SkipSend = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SkipInvalidItems = 4,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
