//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// The request message for language detection.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DetectLanguageRequest
	{
		
		/// <summary>
		/// The input text upon which to perform language detection. Repeat this
		///parameter to perform language detection on multiple text inputs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="q")]
		public string[] Q { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DetectionsListResponse
	{
		
		/// <summary>
		/// A detections contains detection results of several text
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="detections")]
		public DetectionsResourceElement[][] Detections { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DetectionsResourceElement
	{
		
		/// <summary>
		/// The confidence of the detection result of this language.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="confidence")]
		public System.Nullable<System.Single> Confidence { get; set; }
		
		/// <summary>
		/// A boolean to indicate is the language detection result reliable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isReliable")]
		public System.Nullable<System.Boolean> IsReliable { get; set; }
		
		/// <summary>
		/// The language we detected.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="language")]
		public string Language { get; set; }
	}
	
	/// <summary>
	/// The request message for discovering supported languages.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetSupportedLanguagesRequest
	{
		
		/// <summary>
		/// The language to use to return localized, human readable names of supported
		///languages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="target")]
		public string Target { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LanguagesListResponse
	{
		
		/// <summary>
		/// List of source/target languages supported by the translation API. If target parameter is unspecified, the list is sorted by the ASCII code point order of the language code. If target parameter is specified, the list is sorted by the collation order of the language name in the target language.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="languages")]
		public LanguagesResource[] Languages { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LanguagesResource
	{
		
		/// <summary>
		/// Supported language code, generally consisting of its ISO 639-1
		///identifier. (E.g. 'en', 'ja'). In certain cases, BCP-47 codes including
		///language + region identifiers are returned (e.g. 'zh-TW' and 'zh-CH')
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="language")]
		public string Language { get; set; }
		
		/// <summary>
		/// Human readable name of the language localized to the target language.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// The main translation request message for the Cloud Translation API.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TranslateTextRequest
	{
		
		/// <summary>
		/// The format of the source text, in either HTML (default) or plain-text. A
		///value of "html" indicates HTML and a value of "text" indicates plain-text.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="format")]
		public string Format { get; set; }
		
		/// <summary>
		/// The `model` type requested for this translation. Valid values are
		///listed in public documentation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="model")]
		public string Model { get; set; }
		
		/// <summary>
		/// The input text to translate. Repeat this parameter to perform translation
		///operations on multiple text inputs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="q")]
		public string[] Q { get; set; }
		
		/// <summary>
		/// The language of the source text, set to one of the language codes listed in
		///Language Support. If the source language is not specified, the API will
		///attempt to identify the source language automatically and return it within
		///the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string Source { get; set; }
		
		/// <summary>
		/// The language to use for translation of the input text, set to one of the
		///language codes listed in Language Support.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="target")]
		public string Target { get; set; }
	}
	
	/// <summary>
	/// The main language translation response message.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TranslationsListResponse
	{
		
		/// <summary>
		/// Translations contains list of translation results of given text
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="translations")]
		public TranslationsResource[] Translations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TranslationsResource
	{
		
		/// <summary>
		/// The source language of the initial request, detected automatically, if
		///no source language was passed within the initial request. If the
		///source language was passed, auto-detection of the language will not
		///occur and this field will be empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="detectedSourceLanguage")]
		public string DetectedSourceLanguage { get; set; }
		
		/// <summary>
		/// The `model` type used for this translation. Valid values are
		///listed in public documentation. Can be different from requested `model`.
		///Present only if specific model type was explicitly requested.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="model")]
		public string Model { get; set; }
		
		/// <summary>
		/// Text translated into the target language.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="translatedText")]
		public string TranslatedText { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Translates input text, returning translated text.
		/// Language_translations_list v2
		/// </summary>
		/// <param name="q">The input text to translate. Repeat this parameter to perform translation
		///operations on multiple text inputs.</param>
		/// <param name="target">The language to use for translation of the input text, set to one of the
		///language codes listed in Language Support.</param>
		/// <param name="cid">The customization id for translate</param>
		/// <param name="format">The format of the source text, in either HTML (default) or plain-text. A
		///value of "html" indicates HTML and a value of "text" indicates plain-text.</param>
		/// <param name="model">The `model` type requested for this translation. Valid values are
		///listed in public documentation.</param>
		/// <param name="source">The language of the source text, set to one of the language codes listed in
		///Language Support. If the source language is not specified, the API will
		///attempt to identify the source language automatically and return it within
		///the response.</param>
		/// <returns>Successful response</returns>
		public async Task<TranslationsListResponse> Language_translations_listAsync(string[] q, string target, string[] cid, Language_translations_listFormat format, string model, string source, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2?"+string.Join("&", q.Select(z => $"q={System.Uri.EscapeDataString(z.ToString())}"))+"&target=" + (target==null? "" : System.Uri.EscapeDataString(target))+"&"+string.Join("&", cid.Select(z => $"cid={System.Uri.EscapeDataString(z.ToString())}"))+"&format=" + format+"&model=" + (model==null? "" : System.Uri.EscapeDataString(model))+"&source=" + (source==null? "" : System.Uri.EscapeDataString(source));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TranslationsListResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Translates input text, returning translated text.
		/// Language_translations_translate v2
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<TranslationsListResponse> Language_translations_translateAsync(TranslateTextRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TranslationsListResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Detects the language of text within a request.
		/// Language_detections_list v2/detect
		/// </summary>
		/// <param name="q">The input text upon which to perform language detection. Repeat this
		///parameter to perform language detection on multiple text inputs.</param>
		/// <returns>Successful response</returns>
		public async Task<DetectionsListResponse> Language_detections_listAsync(string[] q, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/detect?"+string.Join("&", q.Select(z => $"q={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DetectionsListResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Detects the language of text within a request.
		/// Language_detections_detect v2/detect
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<DetectionsListResponse> Language_detections_detectAsync(DetectLanguageRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/detect";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DetectionsListResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of supported languages for translation.
		/// Language_languages_list v2/languages
		/// </summary>
		/// <param name="model">The model type for which supported languages should be returned.</param>
		/// <param name="target">The language to use to return localized, human readable names of supported
		///languages.</param>
		/// <returns>Successful response</returns>
		public async Task<LanguagesListResponse> Language_languages_listAsync(string model, string target, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/languages?model=" + (model==null? "" : System.Uri.EscapeDataString(model))+"&target=" + (target==null? "" : System.Uri.EscapeDataString(target));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LanguagesListResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum Language_translations_listFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		html = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		text = 1,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
