//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Create a random Riddle entry.
		/// Private_RiddlesDeleteById riddle
		/// </summary>
		/// <param name="id">Riddle ID</param>
		/// <returns>200  response</returns>
		public async Task Private_RiddlesDeleteByIdAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "riddle?id=" + (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a Riddle entry for a given id. Retrieves a riddle question and answer based on the id.
		/// Private_RiddlesGetById riddle
		/// </summary>
		/// <param name="id">ID of the riddle to fetch</param>
		/// <returns>200  response</returns>
		public async Task Private_RiddlesGetByIdAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "riddle?id=" + (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a random Riddle entry. Same as 'PUT' but can be used when some of the client libraries don't support 'PUT'.
		/// Private_RiddlesPostByQuestionAndCategoryAndAnswer riddle
		/// </summary>
		/// <param name="question">Riddle Question</param>
		/// <param name="category">Category of the riddle</param>
		/// <param name="answer">Answer(s) to the riddle question</param>
		/// <returns>200  response</returns>
		public async Task Private_RiddlesPostByQuestionAndCategoryAndAnswerAsync(string question, string category, string answer, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "riddle?question=" + (question==null? "" : System.Uri.EscapeDataString(question))+"&category=" + (category==null? "" : System.Uri.EscapeDataString(category))+"&answer=" + (answer==null? "" : System.Uri.EscapeDataString(answer));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a random Riddle entry.
		/// Private_RiddlesPutByQuestionAndCategoryAndAnswer riddle
		/// </summary>
		/// <param name="question">Riddle Question</param>
		/// <param name="category">Category of the riddle</param>
		/// <param name="answer">Answer(s) to the riddle question</param>
		/// <returns>200  response</returns>
		public async Task Private_RiddlesPutByQuestionAndCategoryAndAnswerAsync(string question, string category, string answer, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "riddle?question=" + (question==null? "" : System.Uri.EscapeDataString(question))+"&category=" + (category==null? "" : System.Uri.EscapeDataString(category))+"&answer=" + (answer==null? "" : System.Uri.EscapeDataString(answer));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a random riddle for a given category(optional)
		/// Random_RiddleGetByCategory riddle/random
		/// </summary>
		/// <param name="category">Category to get the riddle from</param>
		/// <returns>200  response</returns>
		public async Task Random_RiddleGetByCategoryAsync(string category, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "riddle/random?category=" + (category==null? "" : System.Uri.EscapeDataString(category));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Search for random riddle which has the text in the query, for a given category(optional).
		/// Random_RiddleGetByQueryAndCategory riddle/search
		/// </summary>
		/// <param name="query">Text to search for in the riddle</param>
		/// <param name="category">Category to get the riddle from</param>
		/// <returns>200  response</returns>
		public async Task Random_RiddleGetByQueryAndCategoryAsync(string query, string category, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "riddle/search?query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&category=" + (category==null? "" : System.Uri.EscapeDataString(category));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
