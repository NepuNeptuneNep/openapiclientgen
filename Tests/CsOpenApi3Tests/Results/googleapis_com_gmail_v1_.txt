//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Auto-forwarding settings for an account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AutoForwarding
	{
		
		/// <summary>
		/// The state that a message should be left in after it has been forwarded.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disposition")]
		public System.Nullable<AutoForwardingDisposition> Disposition { get; set; }
		
		/// <summary>
		/// Email address to which all incoming messages are forwarded. This email address must be a verified member of the forwarding addresses.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="emailAddress")]
		public string EmailAddress { get; set; }
		
		/// <summary>
		/// Whether all incoming mail is automatically forwarded to another address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AutoForwardingDisposition
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="dispositionUnspecified")]
		dispositionUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="leaveInInbox")]
		leaveInInbox = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="archive")]
		archive = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="trash")]
		trash = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="markRead")]
		markRead = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchDeleteMessagesRequest
	{
		
		/// <summary>
		/// The IDs of the messages to delete.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ids")]
		public string[] Ids { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchModifyMessagesRequest
	{
		
		/// <summary>
		/// A list of label IDs to add to messages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addLabelIds")]
		public string[] AddLabelIds { get; set; }
		
		/// <summary>
		/// The IDs of the messages to modify. There is a limit of 1000 ids per request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ids")]
		public string[] Ids { get; set; }
		
		/// <summary>
		/// A list of label IDs to remove from messages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="removeLabelIds")]
		public string[] RemoveLabelIds { get; set; }
	}
	
	/// <summary>
	/// The client-side encryption (CSE) configuration for the email address of an authenticated user. Gmail uses CSE configurations to save drafts of client-side encrypted email messages, and to sign and send encrypted email messages.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CseIdentity
	{
		
		/// <summary>
		/// The email address for the sending identity. The email address must be the primary email address of the authenticated user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="emailAddress")]
		public string EmailAddress { get; set; }
		
		/// <summary>
		/// If a key pair is associated, the ID of the key pair, CseKeyPair.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primaryKeyPairId")]
		public string PrimaryKeyPairId { get; set; }
		
		/// <summary>
		/// The configuration of a CSE identity that uses different key pairs for signing and encryption.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="signAndEncryptKeyPairs")]
		public SignAndEncryptKeyPairs SignAndEncryptKeyPairs { get; set; }
	}
	
	/// <summary>
	/// The configuration of a CSE identity that uses different key pairs for signing and encryption.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SignAndEncryptKeyPairs
	{
		
		/// <summary>
		/// The ID of the CseKeyPair that encrypts signed outgoing mail.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="encryptionKeyPairId")]
		public string EncryptionKeyPairId { get; set; }
		
		/// <summary>
		/// The ID of the CseKeyPair that signs outgoing mail.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="signingKeyPairId")]
		public string SigningKeyPairId { get; set; }
	}
	
	/// <summary>
	/// A client-side encryption S/MIME key pair, which is comprised of a public key, its certificate chain, and metadata for its paired private key. Gmail uses the key pair to complete the following tasks: - Sign outgoing client-side encrypted messages. - Save and reopen drafts of client-side encrypted messages. - Save and reopen sent messages. - Decrypt incoming or archived S/MIME messages.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CseKeyPair
	{
		
		/// <summary>
		/// Output only. If a key pair is set to `DISABLED`, the time that the key pair's state changed from `ENABLED` to `DISABLED`. This field is present only when the key pair is in state `DISABLED`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disableTime")]
		public string DisableTime { get; set; }
		
		/// <summary>
		/// Output only. The current state of the key pair.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enablementState")]
		public System.Nullable<CseKeyPairEnablementState> EnablementState { get; set; }
		
		/// <summary>
		/// Output only. The immutable ID for the client-side encryption S/MIME key pair.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keyPairId")]
		public string KeyPairId { get; set; }
		
		/// <summary>
		/// Output only. The public key and its certificate chain, in [PEM](https://en.wikipedia.org/wiki/Privacy-Enhanced_Mail) format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pem")]
		public string Pem { get; set; }
		
		/// <summary>
		/// Input only. The public key and its certificate chain. The chain must be in [PKCS#7](https://en.wikipedia.org/wiki/PKCS_7) format and use PEM encoding and ASCII armor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pkcs7")]
		public string Pkcs7 { get; set; }
		
		/// <summary>
		/// Metadata for instances of this key pair's private key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="privateKeyMetadata")]
		public CsePrivateKeyMetadata[] PrivateKeyMetadata { get; set; }
		
		/// <summary>
		/// Output only. The email address identities that are specified on the leaf certificate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subjectEmailAddresses")]
		public string[] SubjectEmailAddresses { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CseKeyPairEnablementState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="stateUnspecified")]
		stateUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="enabled")]
		enabled = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="disabled")]
		disabled = 2,
	}
	
	/// <summary>
	/// Metadata for a private key instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CsePrivateKeyMetadata
	{
		
		/// <summary>
		/// Metadata for hardware keys.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hardwareKeyMetadata")]
		public HardwareKeyMetadata HardwareKeyMetadata { get; set; }
		
		/// <summary>
		/// Metadata for private keys managed by an external key access control list service. For details about managing key access, see [Google Workspace CSE API Reference](https://developers.google.com/workspace/cse/reference).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kaclsKeyMetadata")]
		public KaclsKeyMetadata KaclsKeyMetadata { get; set; }
		
		/// <summary>
		/// Output only. The immutable ID for the private key metadata instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="privateKeyMetadataId")]
		public string PrivateKeyMetadataId { get; set; }
	}
	
	/// <summary>
	/// Metadata for hardware keys.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HardwareKeyMetadata
	{
		
		/// <summary>
		/// Description about the hardware key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
	}
	
	/// <summary>
	/// Metadata for private keys managed by an external key access control list service. For details about managing key access, see [Google Workspace CSE API Reference](https://developers.google.com/workspace/cse/reference).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class KaclsKeyMetadata
	{
		
		/// <summary>
		/// Opaque data generated and used by the key access control list service. Maximum size: 8 KiB.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kaclsData")]
		public string KaclsData { get; set; }
		
		/// <summary>
		/// The URI of the key access control list service that manages the private key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kaclsUri")]
		public string KaclsUri { get; set; }
	}
	
	/// <summary>
	/// Settings for a delegate. Delegates can read, send, and delete messages, as well as view and add contacts, for the delegator's account. See "Set up mail delegation" for more information about delegates.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Delegate
	{
		
		/// <summary>
		/// The email address of the delegate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="delegateEmail")]
		public string DelegateEmail { get; set; }
		
		/// <summary>
		/// Indicates whether this address has been verified and can act as a delegate for the account. Read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verificationStatus")]
		public System.Nullable<DelegateVerificationStatus> VerificationStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DelegateVerificationStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="verificationStatusUnspecified")]
		verificationStatusUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="accepted")]
		accepted = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pending")]
		pending = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="rejected")]
		rejected = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="expired")]
		expired = 4,
	}
	
	/// <summary>
	/// Requests to turn off a client-side encryption key pair.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DisableCseKeyPairRequest
	{
	}
	
	/// <summary>
	/// A draft email in the user's mailbox.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Draft
	{
		
		/// <summary>
		/// The immutable ID of the draft.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// An email message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public Message Message { get; set; }
	}
	
	/// <summary>
	/// An email message.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Message
	{
		
		/// <summary>
		/// The ID of the last history record that modified this message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="historyId")]
		public string HistoryId { get; set; }
		
		/// <summary>
		/// The immutable ID of the message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The internal message creation timestamp (epoch ms), which determines ordering in the inbox. For normal SMTP-received email, this represents the time the message was originally accepted by Google, which is more reliable than the `Date` header. However, for API-migrated mail, it can be configured by client to be based on the `Date` header.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="internalDate")]
		public string InternalDate { get; set; }
		
		/// <summary>
		/// List of IDs of labels applied to this message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labelIds")]
		public string[] LabelIds { get; set; }
		
		/// <summary>
		/// A single MIME message part.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payload")]
		public MessagePart Payload { get; set; }
		
		/// <summary>
		/// The entire email message in an RFC 2822 formatted and base64url encoded string. Returned in `messages.get` and `drafts.get` responses when the `format=RAW` parameter is supplied.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="raw")]
		public string Raw { get; set; }
		
		/// <summary>
		/// Estimated size in bytes of the message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sizeEstimate")]
		public System.Nullable<System.Int32> SizeEstimate { get; set; }
		
		/// <summary>
		/// A short part of the message text.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="snippet")]
		public string Snippet { get; set; }
		
		/// <summary>
		/// The ID of the thread the message belongs to. To add a message or draft to a thread, the following criteria must be met: 1. The requested `threadId` must be specified on the `Message` or `Draft.Message` you supply with your request. 2. The `References` and `In-Reply-To` headers must be set in compliance with the [RFC 2822](https://tools.ietf.org/html/rfc2822) standard. 3. The `Subject` headers must match. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="threadId")]
		public string ThreadId { get; set; }
	}
	
	/// <summary>
	/// A single MIME message part.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MessagePart
	{
		
		/// <summary>
		/// The body of a single MIME message part.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="body")]
		public MessagePartBody Body { get; set; }
		
		/// <summary>
		/// The filename of the attachment. Only present if this message part represents an attachment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filename")]
		public string Filename { get; set; }
		
		/// <summary>
		/// List of headers on this message part. For the top-level message part, representing the entire message payload, it will contain the standard RFC 2822 email headers such as `To`, `From`, and `Subject`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="headers")]
		public MessagePartHeader[] Headers { get; set; }
		
		/// <summary>
		/// The MIME type of the message part.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mimeType")]
		public string MimeType { get; set; }
		
		/// <summary>
		/// The immutable ID of the message part.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="partId")]
		public string PartId { get; set; }
		
		/// <summary>
		/// The child MIME message parts of this part. This only applies to container MIME message parts, for example `multipart/*`. For non- container MIME message part types, such as `text/plain`, this field is empty. For more information, see RFC 1521.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parts")]
		public MessagePart[] Parts { get; set; }
	}
	
	/// <summary>
	/// The body of a single MIME message part.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MessagePartBody
	{
		
		/// <summary>
		/// When present, contains the ID of an external attachment that can be retrieved in a separate `messages.attachments.get` request. When not present, the entire content of the message part body is contained in the data field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attachmentId")]
		public string AttachmentId { get; set; }
		
		/// <summary>
		/// The body data of a MIME message part as a base64url encoded string. May be empty for MIME container types that have no message body or when the body data is sent as a separate attachment. An attachment ID is present if the body data is contained in a separate attachment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string Data { get; set; }
		
		/// <summary>
		/// Number of bytes for the message part data (encoding notwithstanding).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="size")]
		public System.Nullable<System.Int32> Size { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MessagePartHeader
	{
		
		/// <summary>
		/// The name of the header before the `:` separator. For example, `To`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The value of the header after the `:` separator. For example, `someuser@example.com`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// Requests to turn on a client-side encryption key pair.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EnableCseKeyPairRequest
	{
	}
	
	/// <summary>
	/// Resource definition for Gmail filters. Filters apply to specific messages instead of an entire email thread.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Filter
	{
		
		/// <summary>
		/// A set of actions to perform on a message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="action")]
		public FilterAction Action { get; set; }
		
		/// <summary>
		/// Message matching criteria.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="criteria")]
		public FilterCriteria Criteria { get; set; }
		
		/// <summary>
		/// The server assigned ID of the filter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	/// <summary>
	/// A set of actions to perform on a message.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FilterAction
	{
		
		/// <summary>
		/// List of labels to add to the message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addLabelIds")]
		public string[] AddLabelIds { get; set; }
		
		/// <summary>
		/// Email address that the message should be forwarded to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="forward")]
		public string Forward { get; set; }
		
		/// <summary>
		/// List of labels to remove from the message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="removeLabelIds")]
		public string[] RemoveLabelIds { get; set; }
	}
	
	/// <summary>
	/// Message matching criteria.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FilterCriteria
	{
		
		/// <summary>
		/// Whether the response should exclude chats.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="excludeChats")]
		public System.Nullable<System.Boolean> ExcludeChats { get; set; }
		
		/// <summary>
		/// The sender's display name or email address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="from")]
		public string From { get; set; }
		
		/// <summary>
		/// Whether the message has any attachment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hasAttachment")]
		public System.Nullable<System.Boolean> HasAttachment { get; set; }
		
		/// <summary>
		/// Only return messages not matching the specified query. Supports the same query format as the Gmail search box. For example, `"from:someuser@example.com rfc822msgid: is:unread"`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="negatedQuery")]
		public string NegatedQuery { get; set; }
		
		/// <summary>
		/// Only return messages matching the specified query. Supports the same query format as the Gmail search box. For example, `"from:someuser@example.com rfc822msgid: is:unread"`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="query")]
		public string Query { get; set; }
		
		/// <summary>
		/// The size of the entire RFC822 message in bytes, including all headers and attachments.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="size")]
		public System.Nullable<System.Int32> Size { get; set; }
		
		/// <summary>
		/// How the message size in bytes should be in relation to the size field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sizeComparison")]
		public System.Nullable<FilterCriteriaSizeComparison> SizeComparison { get; set; }
		
		/// <summary>
		/// Case-insensitive phrase found in the message's subject. Trailing and leading whitespace are be trimmed and adjacent spaces are collapsed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subject")]
		public string Subject { get; set; }
		
		/// <summary>
		/// The recipient's display name or email address. Includes recipients in the "to", "cc", and "bcc" header fields. You can use simply the local part of the email address. For example, "example" and "example@" both match "example@gmail.com". This field is case-insensitive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="to")]
		public string To { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum FilterCriteriaSizeComparison
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="unspecified")]
		unspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="smaller")]
		smaller = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="larger")]
		larger = 2,
	}
	
	/// <summary>
	/// Settings for a forwarding address.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ForwardingAddress
	{
		
		/// <summary>
		/// An email address to which messages can be forwarded.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="forwardingEmail")]
		public string ForwardingEmail { get; set; }
		
		/// <summary>
		/// Indicates whether this address has been verified and is usable for forwarding. Read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verificationStatus")]
		public System.Nullable<ForwardingAddressVerificationStatus> VerificationStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ForwardingAddressVerificationStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="verificationStatusUnspecified")]
		verificationStatusUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="accepted")]
		accepted = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pending")]
		pending = 2,
	}
	
	/// <summary>
	/// A record of a change to the user's mailbox. Each history change may affect multiple messages in multiple ways.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class History
	{
		
		/// <summary>
		/// The mailbox sequence ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Labels added to messages in this history record.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labelsAdded")]
		public HistoryLabelAdded[] LabelsAdded { get; set; }
		
		/// <summary>
		/// Labels removed from messages in this history record.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labelsRemoved")]
		public HistoryLabelRemoved[] LabelsRemoved { get; set; }
		
		/// <summary>
		/// List of messages changed in this history record. The fields for specific change types, such as `messagesAdded` may duplicate messages in this field. We recommend using the specific change-type fields instead of this.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="messages")]
		public Message[] Messages { get; set; }
		
		/// <summary>
		/// Messages added to the mailbox in this history record.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="messagesAdded")]
		public HistoryMessageAdded[] MessagesAdded { get; set; }
		
		/// <summary>
		/// Messages deleted (not Trashed) from the mailbox in this history record.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="messagesDeleted")]
		public HistoryMessageDeleted[] MessagesDeleted { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HistoryLabelAdded
	{
		
		/// <summary>
		/// Label IDs added to the message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labelIds")]
		public string[] LabelIds { get; set; }
		
		/// <summary>
		/// An email message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public Message Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HistoryLabelRemoved
	{
		
		/// <summary>
		/// Label IDs removed from the message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labelIds")]
		public string[] LabelIds { get; set; }
		
		/// <summary>
		/// An email message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public Message Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HistoryMessageAdded
	{
		
		/// <summary>
		/// An email message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public Message Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HistoryMessageDeleted
	{
		
		/// <summary>
		/// An email message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public Message Message { get; set; }
	}
	
	/// <summary>
	/// IMAP settings for an account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ImapSettings
	{
		
		/// <summary>
		/// If this value is true, Gmail will immediately expunge a message when it is marked as deleted in IMAP. Otherwise, Gmail will wait for an update from the client before expunging messages marked as deleted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoExpunge")]
		public System.Nullable<System.Boolean> AutoExpunge { get; set; }
		
		/// <summary>
		/// Whether IMAP is enabled for the account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		/// <summary>
		/// The action that will be executed on a message when it is marked as deleted and expunged from the last visible IMAP folder.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expungeBehavior")]
		public System.Nullable<ImapSettingsExpungeBehavior> ExpungeBehavior { get; set; }
		
		/// <summary>
		/// An optional limit on the number of messages that an IMAP folder may contain. Legal values are 0, 1000, 2000, 5000 or 10000. A value of zero is interpreted to mean that there is no limit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxFolderSize")]
		public System.Nullable<System.Int32> MaxFolderSize { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ImapSettingsExpungeBehavior
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="expungeBehaviorUnspecified")]
		expungeBehaviorUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="archive")]
		archive = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="trash")]
		trash = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="deleteForever")]
		deleteForever = 3,
	}
	
	/// <summary>
	/// Labels are used to categorize messages and threads within the user's mailbox. The maximum number of labels supported for a user's mailbox is 10,000.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Label
	{
		
		[System.Runtime.Serialization.DataMember(Name="color")]
		public LabelColor Color { get; set; }
		
		/// <summary>
		/// The immutable ID of the label.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The visibility of the label in the label list in the Gmail web interface.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labelListVisibility")]
		public System.Nullable<LabelLabelListVisibility> LabelListVisibility { get; set; }
		
		/// <summary>
		/// The visibility of messages with this label in the message list in the Gmail web interface.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="messageListVisibility")]
		public System.Nullable<LabelMessageListVisibility> MessageListVisibility { get; set; }
		
		/// <summary>
		/// The total number of messages with the label.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="messagesTotal")]
		public System.Nullable<System.Int32> MessagesTotal { get; set; }
		
		/// <summary>
		/// The number of unread messages with the label.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="messagesUnread")]
		public System.Nullable<System.Int32> MessagesUnread { get; set; }
		
		/// <summary>
		/// The display name of the label.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The total number of threads with the label.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="threadsTotal")]
		public System.Nullable<System.Int32> ThreadsTotal { get; set; }
		
		/// <summary>
		/// The number of unread threads with the label.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="threadsUnread")]
		public System.Nullable<System.Int32> ThreadsUnread { get; set; }
		
		/// <summary>
		/// The owner type for the label. User labels are created by the user and can be modified and deleted by the user and can be applied to any message or thread. System labels are internally created and cannot be added, modified, or deleted. System labels may be able to be applied to or removed from messages and threads under some circumstances but this is not guaranteed. For example, users can apply and remove the `INBOX` and `UNREAD` labels from messages and threads, but cannot apply or remove the `DRAFTS` or `SENT` labels from messages or threads.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<LabelType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LabelColor
	{
		
		/// <summary>
		/// The background color represented as hex string #RRGGBB (ex #000000). This field is required in order to set the color of a label. Only the following predefined set of color values are allowed: \#000000, #434343, #666666, #999999, #cccccc, #efefef, #f3f3f3, #ffffff, \#fb4c2f, #ffad47, #fad165, #16a766, #43d692, #4a86e8, #a479e2, #f691b3, \#f6c5be, #ffe6c7, #fef1d1, #b9e4d0, #c6f3de, #c9daf8, #e4d7f5, #fcdee8, \#efa093, #ffd6a2, #fce8b3, #89d3b2, #a0eac9, #a4c2f4, #d0bcf1, #fbc8d9, \#e66550, #ffbc6b, #fcda83, #44b984, #68dfa9, #6d9eeb, #b694e8, #f7a7c0, \#cc3a21, #eaa041, #f2c960, #149e60, #3dc789, #3c78d8, #8e63ce, #e07798, \#ac2b16, #cf8933, #d5ae49, #0b804b, #2a9c68, #285bac, #653e9b, #b65775, \#822111, #a46a21, #aa8831, #076239, #1a764d, #1c4587, #41236d, #83334c \#464646, #e7e7e7, #0d3472, #b6cff5, #0d3b44, #98d7e4, #3d188e, #e3d7ff, \#711a36, #fbd3e0, #8a1c0a, #f2b2a8, #7a2e0b, #ffc8af, #7a4706, #ffdeb5, \#594c05, #fbe983, #684e07, #fdedc1, #0b4f30, #b3efd3, #04502e, #a2dcc1, \#c2c2c2, #4986e7, #2da2bb, #b99aff, #994a64, #f691b2, #ff7537, #ffad46, \#662e37, #ebdbde, #cca6ac, #094228, #42d692, #16a765
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="backgroundColor")]
		public string BackgroundColor { get; set; }
		
		/// <summary>
		/// The text color of the label, represented as hex string. This field is required in order to set the color of a label. Only the following predefined set of color values are allowed: \#000000, #434343, #666666, #999999, #cccccc, #efefef, #f3f3f3, #ffffff, \#fb4c2f, #ffad47, #fad165, #16a766, #43d692, #4a86e8, #a479e2, #f691b3, \#f6c5be, #ffe6c7, #fef1d1, #b9e4d0, #c6f3de, #c9daf8, #e4d7f5, #fcdee8, \#efa093, #ffd6a2, #fce8b3, #89d3b2, #a0eac9, #a4c2f4, #d0bcf1, #fbc8d9, \#e66550, #ffbc6b, #fcda83, #44b984, #68dfa9, #6d9eeb, #b694e8, #f7a7c0, \#cc3a21, #eaa041, #f2c960, #149e60, #3dc789, #3c78d8, #8e63ce, #e07798, \#ac2b16, #cf8933, #d5ae49, #0b804b, #2a9c68, #285bac, #653e9b, #b65775, \#822111, #a46a21, #aa8831, #076239, #1a764d, #1c4587, #41236d, #83334c \#464646, #e7e7e7, #0d3472, #b6cff5, #0d3b44, #98d7e4, #3d188e, #e3d7ff, \#711a36, #fbd3e0, #8a1c0a, #f2b2a8, #7a2e0b, #ffc8af, #7a4706, #ffdeb5, \#594c05, #fbe983, #684e07, #fdedc1, #0b4f30, #b3efd3, #04502e, #a2dcc1, \#c2c2c2, #4986e7, #2da2bb, #b99aff, #994a64, #f691b2, #ff7537, #ffad46, \#662e37, #ebdbde, #cca6ac, #094228, #42d692, #16a765
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="textColor")]
		public string TextColor { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum LabelLabelListVisibility
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="labelShow")]
		labelShow = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="labelShowIfUnread")]
		labelShowIfUnread = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="labelHide")]
		labelHide = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum LabelMessageListVisibility
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="show")]
		show = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="hide")]
		hide = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum LabelType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="system")]
		system = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="user")]
		user = 1,
	}
	
	/// <summary>
	/// Language settings for an account. These settings correspond to the "Language settings" feature in the web interface.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LanguageSettings
	{
		
		/// <summary>
		/// The language to display Gmail in, formatted as an RFC 3066 Language Tag (for example `en-GB`, `fr` or `ja` for British English, French, or Japanese respectively). The set of languages supported by Gmail evolves over time, so please refer to the "Language" dropdown in the Gmail settings for all available options, as described in the language settings help article. A table of sample values is also provided in the Managing Language Settings guide Not all Gmail clients can display the same set of languages. In the case that a user's display language is not available for use on a particular client, said client automatically chooses to display in the closest supported variant (or a reasonable default).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayLanguage")]
		public string DisplayLanguage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListCseIdentitiesResponse
	{
		
		/// <summary>
		/// One page of the list of CSE identities configured for the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cseIdentities")]
		public CseIdentity[] CseIdentities { get; set; }
		
		/// <summary>
		/// Pagination token to be passed to a subsequent ListCseIdentities call in order to retrieve the next page of identities. If this value is not returned or is the empty string, then no further pages remain.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListCseKeyPairsResponse
	{
		
		/// <summary>
		/// One page of the list of CSE key pairs installed for the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cseKeyPairs")]
		public CseKeyPair[] CseKeyPairs { get; set; }
		
		/// <summary>
		/// Pagination token to be passed to a subsequent ListCseKeyPairs call in order to retrieve the next page of key pairs. If this value is not returned, then no further pages remain.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Response for the ListDelegates method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListDelegatesResponse
	{
		
		/// <summary>
		/// List of the user's delegates (with any verification status). If an account doesn't have delegates, this field doesn't appear.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="delegates")]
		public Delegate[] Delegates { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListDraftsResponse
	{
		
		/// <summary>
		/// List of drafts. Note that the `Message` property in each `Draft` resource only contains an `id` and a `threadId`. The messages.get method can fetch additional message details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="drafts")]
		public Draft[] Drafts { get; set; }
		
		/// <summary>
		/// Token to retrieve the next page of results in the list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// Estimated total number of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resultSizeEstimate")]
		public System.Nullable<System.UInt32> ResultSizeEstimate { get; set; }
	}
	
	/// <summary>
	/// Response for the ListFilters method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListFiltersResponse
	{
		
		/// <summary>
		/// List of a user's filters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filter")]
		public Filter[] Filter { get; set; }
	}
	
	/// <summary>
	/// Response for the ListForwardingAddresses method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListForwardingAddressesResponse
	{
		
		/// <summary>
		/// List of addresses that may be used for forwarding.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="forwardingAddresses")]
		public ForwardingAddress[] ForwardingAddresses { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListHistoryResponse
	{
		
		/// <summary>
		/// List of history records. Any `messages` contained in the response will typically only have `id` and `threadId` fields populated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="history")]
		public History[] History { get; set; }
		
		/// <summary>
		/// The ID of the mailbox's current history record.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="historyId")]
		public string HistoryId { get; set; }
		
		/// <summary>
		/// Page token to retrieve the next page of results in the list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListLabelsResponse
	{
		
		/// <summary>
		/// List of labels. Note that each label resource only contains an `id`, `name`, `messageListVisibility`, `labelListVisibility`, and `type`. The labels.get method can fetch additional label details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public Label[] Labels { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListMessagesResponse
	{
		
		/// <summary>
		/// List of messages. Note that each message resource contains only an `id` and a `threadId`. Additional message details can be fetched using the messages.get method.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="messages")]
		public Message[] Messages { get; set; }
		
		/// <summary>
		/// Token to retrieve the next page of results in the list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// Estimated total number of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resultSizeEstimate")]
		public System.Nullable<System.UInt32> ResultSizeEstimate { get; set; }
	}
	
	/// <summary>
	/// Response for the ListSendAs method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListSendAsResponse
	{
		
		/// <summary>
		/// List of send-as aliases.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sendAs")]
		public SendAs[] SendAs { get; set; }
	}
	
	/// <summary>
	/// Settings associated with a send-as alias, which can be either the primary login address associated with the account or a custom "from" address. Send-as aliases correspond to the "Send Mail As" feature in the web interface.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SendAs
	{
		
		/// <summary>
		/// A name that appears in the "From:" header for mail sent using this alias. For custom "from" addresses, when this is empty, Gmail will populate the "From:" header with the name that is used for the primary address associated with the account. If the admin has disabled the ability for users to update their name format, requests to update this field for the primary login will silently fail.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Whether this address is selected as the default "From:" address in situations such as composing a new message or sending a vacation auto-reply. Every Gmail account has exactly one default send-as address, so the only legal value that clients may write to this field is `true`. Changing this from `false` to `true` for an address will result in this field becoming `false` for the other previous default address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isDefault")]
		public System.Nullable<System.Boolean> IsDefault { get; set; }
		
		/// <summary>
		/// Whether this address is the primary address used to login to the account. Every Gmail account has exactly one primary address, and it cannot be deleted from the collection of send-as aliases. This field is read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isPrimary")]
		public System.Nullable<System.Boolean> IsPrimary { get; set; }
		
		/// <summary>
		/// An optional email address that is included in a "Reply-To:" header for mail sent using this alias. If this is empty, Gmail will not generate a "Reply-To:" header.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="replyToAddress")]
		public string ReplyToAddress { get; set; }
		
		/// <summary>
		/// The email address that appears in the "From:" header for mail sent using this alias. This is read-only for all operations except create.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sendAsEmail")]
		public string SendAsEmail { get; set; }
		
		/// <summary>
		/// An optional HTML signature that is included in messages composed with this alias in the Gmail web UI. This signature is added to new emails only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="signature")]
		public string Signature { get; set; }
		
		/// <summary>
		/// Configuration for communication with an SMTP service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="smtpMsa")]
		public SmtpMsa SmtpMsa { get; set; }
		
		/// <summary>
		/// Whether Gmail should treat this address as an alias for the user's primary email address. This setting only applies to custom "from" aliases.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="treatAsAlias")]
		public System.Nullable<System.Boolean> TreatAsAlias { get; set; }
		
		/// <summary>
		/// Indicates whether this address has been verified for use as a send-as alias. Read-only. This setting only applies to custom "from" aliases.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verificationStatus")]
		public ForwardingAddressVerificationStatus VerificationStatus { get; set; }
	}
	
	/// <summary>
	/// Configuration for communication with an SMTP service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SmtpMsa
	{
		
		/// <summary>
		/// The hostname of the SMTP service. Required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="host")]
		public string Host { get; set; }
		
		/// <summary>
		/// The password that will be used for authentication with the SMTP service. This is a write-only field that can be specified in requests to create or update SendAs settings; it is never populated in responses.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		/// <summary>
		/// The port of the SMTP service. Required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="port")]
		public System.Nullable<System.Int32> Port { get; set; }
		
		/// <summary>
		/// The protocol that will be used to secure communication with the SMTP service. Required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="securityMode")]
		public System.Nullable<SmtpMsaSecurityMode> SecurityMode { get; set; }
		
		/// <summary>
		/// The username that will be used for authentication with the SMTP service. This is a write-only field that can be specified in requests to create or update SendAs settings; it is never populated in responses.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum SmtpMsaSecurityMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="securityModeUnspecified")]
		securityModeUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="none")]
		none = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ssl")]
		ssl = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="starttls")]
		starttls = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListSmimeInfoResponse
	{
		
		/// <summary>
		/// List of SmimeInfo.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="smimeInfo")]
		public SmimeInfo[] SmimeInfo { get; set; }
	}
	
	/// <summary>
	/// An S/MIME email config.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SmimeInfo
	{
		
		/// <summary>
		/// Encrypted key password, when key is encrypted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="encryptedKeyPassword")]
		public string EncryptedKeyPassword { get; set; }
		
		/// <summary>
		/// When the certificate expires (in milliseconds since epoch).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expiration")]
		public string Expiration { get; set; }
		
		/// <summary>
		/// The immutable ID for the SmimeInfo.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Whether this SmimeInfo is the default one for this user's send-as address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isDefault")]
		public System.Nullable<System.Boolean> IsDefault { get; set; }
		
		/// <summary>
		/// The S/MIME certificate issuer's common name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="issuerCn")]
		public string IssuerCn { get; set; }
		
		/// <summary>
		/// PEM formatted X509 concatenated certificate string (standard base64 encoding). Format used for returning key, which includes public key as well as certificate chain (not private key).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pem")]
		public string Pem { get; set; }
		
		/// <summary>
		/// PKCS#12 format containing a single private/public key pair and certificate chain. This format is only accepted from client for creating a new SmimeInfo and is never returned, because the private key is not intended to be exported. PKCS#12 may be encrypted, in which case encryptedKeyPassword should be set appropriately.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pkcs12")]
		public string Pkcs12 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListThreadsResponse
	{
		
		/// <summary>
		/// Page token to retrieve the next page of results in the list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// Estimated total number of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resultSizeEstimate")]
		public System.Nullable<System.UInt32> ResultSizeEstimate { get; set; }
		
		/// <summary>
		/// List of threads. Note that each thread resource does not contain a list of `messages`. The list of `messages` for a given thread can be fetched using the threads.get method.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="threads")]
		public Thread[] Threads { get; set; }
	}
	
	/// <summary>
	/// A collection of messages representing a conversation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Thread
	{
		
		/// <summary>
		/// The ID of the last history record that modified this thread.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="historyId")]
		public string HistoryId { get; set; }
		
		/// <summary>
		/// The unique ID of the thread.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The list of messages in the thread.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="messages")]
		public Message[] Messages { get; set; }
		
		/// <summary>
		/// A short part of the message text.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="snippet")]
		public string Snippet { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModifyMessageRequest
	{
		
		/// <summary>
		/// A list of IDs of labels to add to this message. You can add up to 100 labels with each update.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addLabelIds")]
		public string[] AddLabelIds { get; set; }
		
		/// <summary>
		/// A list IDs of labels to remove from this message. You can remove up to 100 labels with each update.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="removeLabelIds")]
		public string[] RemoveLabelIds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModifyThreadRequest
	{
		
		/// <summary>
		/// A list of IDs of labels to add to this thread. You can add up to 100 labels with each update.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addLabelIds")]
		public string[] AddLabelIds { get; set; }
		
		/// <summary>
		/// A list of IDs of labels to remove from this thread. You can remove up to 100 labels with each update.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="removeLabelIds")]
		public string[] RemoveLabelIds { get; set; }
	}
	
	/// <summary>
	/// Request to obliterate a CSE key pair.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ObliterateCseKeyPairRequest
	{
	}
	
	/// <summary>
	/// POP settings for an account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PopSettings
	{
		
		/// <summary>
		/// The range of messages which are accessible via POP.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accessWindow")]
		public System.Nullable<PopSettingsAccessWindow> AccessWindow { get; set; }
		
		/// <summary>
		/// The action that will be executed on a message after it has been fetched via POP.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disposition")]
		public AutoForwardingDisposition Disposition { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PopSettingsAccessWindow
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="accessWindowUnspecified")]
		accessWindowUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="disabled")]
		disabled = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fromNowOn")]
		fromNowOn = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="allMail")]
		allMail = 3,
	}
	
	/// <summary>
	/// Profile for a Gmail user.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Profile
	{
		
		/// <summary>
		/// The user's email address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="emailAddress")]
		public string EmailAddress { get; set; }
		
		/// <summary>
		/// The ID of the mailbox's current history record.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="historyId")]
		public string HistoryId { get; set; }
		
		/// <summary>
		/// The total number of messages in the mailbox.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="messagesTotal")]
		public System.Nullable<System.Int32> MessagesTotal { get; set; }
		
		/// <summary>
		/// The total number of threads in the mailbox.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="threadsTotal")]
		public System.Nullable<System.Int32> ThreadsTotal { get; set; }
	}
	
	/// <summary>
	/// Vacation auto-reply settings for an account. These settings correspond to the "Vacation responder" feature in the web interface.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VacationSettings
	{
		
		/// <summary>
		/// Flag that controls whether Gmail automatically replies to messages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableAutoReply")]
		public System.Nullable<System.Boolean> EnableAutoReply { get; set; }
		
		/// <summary>
		/// An optional end time for sending auto-replies (epoch ms). When this is specified, Gmail will automatically reply only to messages that it receives before the end time. If both `startTime` and `endTime` are specified, `startTime` must precede `endTime`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public string EndTime { get; set; }
		
		/// <summary>
		/// Response body in HTML format. Gmail will sanitize the HTML before storing it. If both `response_body_plain_text` and `response_body_html` are specified, `response_body_html` will be used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="responseBodyHtml")]
		public string ResponseBodyHtml { get; set; }
		
		/// <summary>
		/// Response body in plain text format. If both `response_body_plain_text` and `response_body_html` are specified, `response_body_html` will be used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="responseBodyPlainText")]
		public string ResponseBodyPlainText { get; set; }
		
		/// <summary>
		/// Optional text to prepend to the subject line in vacation responses. In order to enable auto-replies, either the response subject or the response body must be nonempty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="responseSubject")]
		public string ResponseSubject { get; set; }
		
		/// <summary>
		/// Flag that determines whether responses are sent to recipients who are not in the user's list of contacts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="restrictToContacts")]
		public System.Nullable<System.Boolean> RestrictToContacts { get; set; }
		
		/// <summary>
		/// Flag that determines whether responses are sent to recipients who are outside of the user's domain. This feature is only available for Google Workspace users.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="restrictToDomain")]
		public System.Nullable<System.Boolean> RestrictToDomain { get; set; }
		
		/// <summary>
		/// An optional start time for sending auto-replies (epoch ms). When this is specified, Gmail will automatically reply only to messages that it receives after the start time. If both `startTime` and `endTime` are specified, `startTime` must precede `endTime`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public string StartTime { get; set; }
	}
	
	/// <summary>
	/// Set up or update a new push notification watch on this user's mailbox.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WatchRequest
	{
		
		/// <summary>
		/// Filtering behavior of `labelIds list` specified. This field is deprecated because it caused incorrect behavior in some cases; use `label_filter_behavior` instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labelFilterAction")]
		public System.Nullable<WatchRequestLabelFilterAction> LabelFilterAction { get; set; }
		
		/// <summary>
		/// Filtering behavior of `labelIds list` specified. This field replaces `label_filter_action`; if set, `label_filter_action` is ignored.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labelFilterBehavior")]
		public WatchRequestLabelFilterAction LabelFilterBehavior { get; set; }
		
		/// <summary>
		/// List of label_ids to restrict notifications about. By default, if unspecified, all changes are pushed out. If specified then dictates which labels are required for a push notification to be generated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labelIds")]
		public string[] LabelIds { get; set; }
		
		/// <summary>
		/// A fully qualified Google Cloud Pub/Sub API topic name to publish the events to. This topic name **must** already exist in Cloud Pub/Sub and you **must** have already granted gmail "publish" permission on it. For example, "projects/my-project-identifier/topics/my-topic-name" (using the Cloud Pub/Sub "v1" topic naming format). Note that the "my-project-identifier" portion must exactly match your Google developer project id (the one executing this watch request).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="topicName")]
		public string TopicName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum WatchRequestLabelFilterAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="include")]
		include = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="exclude")]
		exclude = 1,
	}
	
	/// <summary>
	/// Push notification watch response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WatchResponse
	{
		
		/// <summary>
		/// When Gmail will stop sending notifications for mailbox updates (epoch millis). Call `watch` again before this time to renew the watch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expiration")]
		public string Expiration { get; set; }
		
		/// <summary>
		/// The ID of the mailbox's current history record.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="historyId")]
		public string HistoryId { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Lists the drafts in the user's mailbox.
		/// Gmail_users_drafts_list gmail/v1/users/{userId}/drafts
		/// </summary>
		/// <param name="userId">The user's email address. The special value `me` can be used to indicate the authenticated user.</param>
		/// <param name="includeSpamTrash">Include drafts from `SPAM` and `TRASH` in the results.</param>
		/// <param name="maxResults">Maximum number of drafts to return. This field defaults to 100. The maximum allowed value for this field is 500.</param>
		/// <param name="pageToken">Page token to retrieve a specific page of results in the list.</param>
		/// <param name="q">Only return draft messages matching the specified query. Supports the same query format as the Gmail search box. For example, `"from:someuser@example.com rfc822msgid: is:unread"`.</param>
		/// <returns>Successful response</returns>
		public async Task<ListDraftsResponse> Gmail_users_drafts_listAsync(string userId, bool includeSpamTrash, int maxResults, string pageToken, string q, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "gmail/v1/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/drafts&includeSpamTrash="+includeSpamTrash+"&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&q=" + (q==null? "" : System.Uri.EscapeDataString(q));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListDraftsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Immediately and permanently deletes the specified draft. Does not simply trash it.
		/// Gmail_users_drafts_delete gmail/v1/users/{userId}/drafts/{id}
		/// </summary>
		/// <param name="userId">The user's email address. The special value `me` can be used to indicate the authenticated user.</param>
		/// <param name="id">The ID of the draft to delete.</param>
		/// <returns>Successful response</returns>
		public async Task Gmail_users_drafts_deleteAsync(string userId, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "gmail/v1/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/drafts/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the specified draft.
		/// Gmail_users_drafts_get gmail/v1/users/{userId}/drafts/{id}
		/// </summary>
		/// <param name="userId">The user's email address. The special value `me` can be used to indicate the authenticated user.</param>
		/// <param name="id">The ID of the draft to retrieve.</param>
		/// <param name="format">The format to return the draft in.</param>
		/// <returns>Successful response</returns>
		public async Task<Draft> Gmail_users_drafts_getAsync(string userId, string id, Gmail_users_drafts_getFormat format, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "gmail/v1/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/drafts/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&format=" + format;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Draft>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the history of all changes to the given mailbox. History results are returned in chronological order (increasing `historyId`).
		/// Gmail_users_history_list gmail/v1/users/{userId}/history
		/// </summary>
		/// <param name="userId">The user's email address. The special value `me` can be used to indicate the authenticated user.</param>
		/// <param name="historyTypes">History types to be returned by the function</param>
		/// <param name="labelId">Only return messages with a label matching the ID.</param>
		/// <param name="maxResults">Maximum number of history records to return. This field defaults to 100. The maximum allowed value for this field is 500.</param>
		/// <param name="pageToken">Page token to retrieve a specific page of results in the list.</param>
		/// <param name="startHistoryId">Required. Returns history records after the specified `startHistoryId`. The supplied `startHistoryId` should be obtained from the `historyId` of a message, thread, or previous `list` response. History IDs increase chronologically but are not contiguous with random gaps in between valid IDs. Supplying an invalid or out of date `startHistoryId` typically returns an `HTTP 404` error code. A `historyId` is typically valid for at least a week, but in some rare circumstances may be valid for only a few hours. If you receive an `HTTP 404` error response, your application should perform a full sync. If you receive no `nextPageToken` in the response, there are no updates to retrieve and you can store the returned `historyId` for a future request.</param>
		/// <returns>Successful response</returns>
		public async Task<ListHistoryResponse> Gmail_users_history_listAsync(string userId, string[] historyTypes, string labelId, int maxResults, string pageToken, string startHistoryId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "gmail/v1/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/history&"+string.Join("&", historyTypes.Select(z => $"historyTypes={System.Uri.EscapeDataString(z.ToString())}"))+"&labelId=" + (labelId==null? "" : System.Uri.EscapeDataString(labelId))+"&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&startHistoryId=" + (startHistoryId==null? "" : System.Uri.EscapeDataString(startHistoryId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListHistoryResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all labels in the user's mailbox.
		/// Gmail_users_labels_list gmail/v1/users/{userId}/labels
		/// </summary>
		/// <param name="userId">The user's email address. The special value `me` can be used to indicate the authenticated user.</param>
		/// <returns>Successful response</returns>
		public async Task<ListLabelsResponse> Gmail_users_labels_listAsync(string userId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "gmail/v1/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/labels";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListLabelsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new label.
		/// Gmail_users_labels_create gmail/v1/users/{userId}/labels
		/// </summary>
		/// <param name="userId">The user's email address. The special value `me` can be used to indicate the authenticated user.</param>
		/// <returns>Successful response</returns>
		public async Task<Label> Gmail_users_labels_createAsync(string userId, Label requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "gmail/v1/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/labels";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Label>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Immediately and permanently deletes the specified label and removes it from any messages and threads that it is applied to.
		/// Gmail_users_labels_delete gmail/v1/users/{userId}/labels/{id}
		/// </summary>
		/// <param name="userId">The user's email address. The special value `me` can be used to indicate the authenticated user.</param>
		/// <param name="id">The ID of the label to delete.</param>
		/// <returns>Successful response</returns>
		public async Task Gmail_users_labels_deleteAsync(string userId, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "gmail/v1/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/labels/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the specified label.
		/// Gmail_users_labels_get gmail/v1/users/{userId}/labels/{id}
		/// </summary>
		/// <param name="userId">The user's email address. The special value `me` can be used to indicate the authenticated user.</param>
		/// <param name="id">The ID of the label to retrieve.</param>
		/// <returns>Successful response</returns>
		public async Task<Label> Gmail_users_labels_getAsync(string userId, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "gmail/v1/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/labels/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Label>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Patch the specified label.
		/// Gmail_users_labels_patch gmail/v1/users/{userId}/labels/{id}
		/// </summary>
		/// <param name="userId">The user's email address. The special value `me` can be used to indicate the authenticated user.</param>
		/// <param name="id">The ID of the label to update.</param>
		/// <returns>Successful response</returns>
		public async Task<Label> Gmail_users_labels_patchAsync(string userId, string id, Label requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "gmail/v1/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/labels/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Label>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates the specified label.
		/// Gmail_users_labels_update gmail/v1/users/{userId}/labels/{id}
		/// </summary>
		/// <param name="userId">The user's email address. The special value `me` can be used to indicate the authenticated user.</param>
		/// <param name="id">The ID of the label to update.</param>
		/// <returns>Successful response</returns>
		public async Task<Label> Gmail_users_labels_updateAsync(string userId, string id, Label requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "gmail/v1/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/labels/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Label>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the messages in the user's mailbox.
		/// Gmail_users_messages_list gmail/v1/users/{userId}/messages
		/// </summary>
		/// <param name="userId">The user's email address. The special value `me` can be used to indicate the authenticated user.</param>
		/// <param name="includeSpamTrash">Include messages from `SPAM` and `TRASH` in the results.</param>
		/// <param name="labelIds">Only return messages with labels that match all of the specified label IDs. Messages in a thread might have labels that other messages in the same thread don't have. To learn more, see [Manage labels on messages and threads](https://developers.google.com/gmail/api/guides/labels#manage_labels_on_messages_threads).</param>
		/// <param name="maxResults">Maximum number of messages to return. This field defaults to 100. The maximum allowed value for this field is 500.</param>
		/// <param name="pageToken">Page token to retrieve a specific page of results in the list.</param>
		/// <param name="q">Only return messages matching the specified query. Supports the same query format as the Gmail search box. For example, `"from:someuser@example.com rfc822msgid: is:unread"`. Parameter cannot be used when accessing the api using the gmail.metadata scope.</param>
		/// <returns>Successful response</returns>
		public async Task<ListMessagesResponse> Gmail_users_messages_listAsync(string userId, bool includeSpamTrash, string[] labelIds, int maxResults, string pageToken, string q, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "gmail/v1/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/messages&includeSpamTrash="+includeSpamTrash+"&"+string.Join("&", labelIds.Select(z => $"labelIds={System.Uri.EscapeDataString(z.ToString())}"))+"&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&q=" + (q==null? "" : System.Uri.EscapeDataString(q));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListMessagesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes many messages by message ID. Provides no guarantees that messages were not already deleted or even existed at all.
		/// Gmail_users_messages_batchDelete gmail/v1/users/{userId}/messages/batchDelete
		/// </summary>
		/// <param name="userId">The user's email address. The special value `me` can be used to indicate the authenticated user.</param>
		/// <returns>Successful response</returns>
		public async Task Gmail_users_messages_batchDeleteAsync(string userId, BatchDeleteMessagesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "gmail/v1/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/messages/batchDelete";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Modifies the labels on the specified messages.
		/// Gmail_users_messages_batchModify gmail/v1/users/{userId}/messages/batchModify
		/// </summary>
		/// <param name="userId">The user's email address. The special value `me` can be used to indicate the authenticated user.</param>
		/// <returns>Successful response</returns>
		public async Task Gmail_users_messages_batchModifyAsync(string userId, BatchModifyMessagesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "gmail/v1/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/messages/batchModify";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Immediately and permanently deletes the specified message. This operation cannot be undone. Prefer `messages.trash` instead.
		/// Gmail_users_messages_delete gmail/v1/users/{userId}/messages/{id}
		/// </summary>
		/// <param name="userId">The user's email address. The special value `me` can be used to indicate the authenticated user.</param>
		/// <param name="id">The ID of the message to delete.</param>
		/// <returns>Successful response</returns>
		public async Task Gmail_users_messages_deleteAsync(string userId, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "gmail/v1/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/messages/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the specified message.
		/// Gmail_users_messages_get gmail/v1/users/{userId}/messages/{id}
		/// </summary>
		/// <param name="userId">The user's email address. The special value `me` can be used to indicate the authenticated user.</param>
		/// <param name="id">The ID of the message to retrieve. This ID is usually retrieved using `messages.list`. The ID is also contained in the result when a message is inserted (`messages.insert`) or imported (`messages.import`).</param>
		/// <param name="format">The format to return the message in.</param>
		/// <param name="metadataHeaders">When given and format is `METADATA`, only include headers specified.</param>
		/// <returns>Successful response</returns>
		public async Task<Message> Gmail_users_messages_getAsync(string userId, string id, Gmail_users_drafts_getFormat format, string[] metadataHeaders, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "gmail/v1/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/messages/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&format=" + format+"&"+string.Join("&", metadataHeaders.Select(z => $"metadataHeaders={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Message>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Modifies the labels on the specified message.
		/// Gmail_users_messages_modify gmail/v1/users/{userId}/messages/{id}/modify
		/// </summary>
		/// <param name="userId">The user's email address. The special value `me` can be used to indicate the authenticated user.</param>
		/// <param name="id">The ID of the message to modify.</param>
		/// <returns>Successful response</returns>
		public async Task<Message> Gmail_users_messages_modifyAsync(string userId, string id, ModifyMessageRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "gmail/v1/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/messages/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/modify";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Message>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Moves the specified message to the trash.
		/// Gmail_users_messages_trash gmail/v1/users/{userId}/messages/{id}/trash
		/// </summary>
		/// <param name="userId">The user's email address. The special value `me` can be used to indicate the authenticated user.</param>
		/// <param name="id">The ID of the message to Trash.</param>
		/// <returns>Successful response</returns>
		public async Task<Message> Gmail_users_messages_trashAsync(string userId, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "gmail/v1/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/messages/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/trash";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Message>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Removes the specified message from the trash.
		/// Gmail_users_messages_untrash gmail/v1/users/{userId}/messages/{id}/untrash
		/// </summary>
		/// <param name="userId">The user's email address. The special value `me` can be used to indicate the authenticated user.</param>
		/// <param name="id">The ID of the message to remove from Trash.</param>
		/// <returns>Successful response</returns>
		public async Task<Message> Gmail_users_messages_untrashAsync(string userId, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "gmail/v1/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/messages/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/untrash";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Message>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the specified message attachment.
		/// Gmail_users_messages_attachments_get gmail/v1/users/{userId}/messages/{messageId}/attachments/{id}
		/// </summary>
		/// <param name="userId">The user's email address. The special value `me` can be used to indicate the authenticated user.</param>
		/// <param name="messageId">The ID of the message containing the attachment.</param>
		/// <param name="id">The ID of the attachment.</param>
		/// <returns>Successful response</returns>
		public async Task<MessagePartBody> Gmail_users_messages_attachments_getAsync(string userId, string messageId, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "gmail/v1/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/messages/"+ (messageId==null? "" : System.Uri.EscapeDataString(messageId))+"/attachments/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<MessagePartBody>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the current user's Gmail profile.
		/// Gmail_users_getProfile gmail/v1/users/{userId}/profile
		/// </summary>
		/// <param name="userId">The user's email address. The special value `me` can be used to indicate the authenticated user.</param>
		/// <returns>Successful response</returns>
		public async Task<Profile> Gmail_users_getProfileAsync(string userId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "gmail/v1/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/profile";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Profile>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the auto-forwarding setting for the specified account.
		/// Gmail_users_settings_getAutoForwarding gmail/v1/users/{userId}/settings/autoForwarding
		/// </summary>
		/// <param name="userId">User's email address. The special value "me" can be used to indicate the authenticated user.</param>
		/// <returns>Successful response</returns>
		public async Task<AutoForwarding> Gmail_users_settings_getAutoForwardingAsync(string userId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "gmail/v1/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/settings/autoForwarding";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AutoForwarding>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the auto-forwarding setting for the specified account. A verified forwarding address must be specified when auto-forwarding is enabled. This method is only available to service account clients that have been delegated domain-wide authority.
		/// Gmail_users_settings_updateAutoForwarding gmail/v1/users/{userId}/settings/autoForwarding
		/// </summary>
		/// <param name="userId">User's email address. The special value "me" can be used to indicate the authenticated user.</param>
		/// <returns>Successful response</returns>
		public async Task<AutoForwarding> Gmail_users_settings_updateAutoForwardingAsync(string userId, AutoForwarding requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "gmail/v1/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/settings/autoForwarding";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AutoForwarding>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the client-side encrypted identities for an authenticated user.
		/// Gmail_users_settings_cse_identities_list gmail/v1/users/{userId}/settings/cse/identities
		/// </summary>
		/// <param name="userId">The requester's primary email address. To indicate the authenticated user, you can use the special value `me`.</param>
		/// <param name="pageSize">The number of identities to return. If not provided, the page size will default to 20 entries.</param>
		/// <param name="pageToken">Pagination token indicating which page of identities to return. If the token is not supplied, then the API will return the first page of results.</param>
		/// <returns>Successful response</returns>
		public async Task<ListCseIdentitiesResponse> Gmail_users_settings_cse_identities_listAsync(string userId, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "gmail/v1/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/settings/cse/identities&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListCseIdentitiesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates and configures a client-side encryption identity that's authorized to send mail from the user account. Google publishes the S/MIME certificate to a shared domain-wide directory so that people within a Google Workspace organization can encrypt and send mail to the identity.
		/// Gmail_users_settings_cse_identities_create gmail/v1/users/{userId}/settings/cse/identities
		/// </summary>
		/// <param name="userId">The requester's primary email address. To indicate the authenticated user, you can use the special value `me`.</param>
		/// <returns>Successful response</returns>
		public async Task<CseIdentity> Gmail_users_settings_cse_identities_createAsync(string userId, CseIdentity requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "gmail/v1/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/settings/cse/identities";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CseIdentity>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a client-side encryption identity. The authenticated user can no longer use the identity to send encrypted messages. You cannot restore the identity after you delete it. Instead, use the CreateCseIdentity method to create another identity with the same configuration.
		/// Gmail_users_settings_cse_identities_delete gmail/v1/users/{userId}/settings/cse/identities/{cseEmailAddress}
		/// </summary>
		/// <param name="userId">The requester's primary email address. To indicate the authenticated user, you can use the special value `me`.</param>
		/// <param name="cseEmailAddress">The primary email address associated with the client-side encryption identity configuration that's removed.</param>
		/// <returns>Successful response</returns>
		public async Task Gmail_users_settings_cse_identities_deleteAsync(string userId, string cseEmailAddress, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "gmail/v1/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/settings/cse/identities/"+ (cseEmailAddress==null? "" : System.Uri.EscapeDataString(cseEmailAddress));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a client-side encryption identity configuration.
		/// Gmail_users_settings_cse_identities_get gmail/v1/users/{userId}/settings/cse/identities/{cseEmailAddress}
		/// </summary>
		/// <param name="userId">The requester's primary email address. To indicate the authenticated user, you can use the special value `me`.</param>
		/// <param name="cseEmailAddress">The primary email address associated with the client-side encryption identity configuration that's retrieved.</param>
		/// <returns>Successful response</returns>
		public async Task<CseIdentity> Gmail_users_settings_cse_identities_getAsync(string userId, string cseEmailAddress, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "gmail/v1/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/settings/cse/identities/"+ (cseEmailAddress==null? "" : System.Uri.EscapeDataString(cseEmailAddress));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CseIdentity>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Associates a different key pair with an existing client-side encryption identity. The updated key pair must validate against Google's [S/MIME certificate profiles](https://support.google.com/a/answer/7300887).
		/// Gmail_users_settings_cse_identities_patch gmail/v1/users/{userId}/settings/cse/identities/{emailAddress}
		/// </summary>
		/// <param name="userId">The requester's primary email address. To indicate the authenticated user, you can use the special value `me`.</param>
		/// <param name="emailAddress">The email address of the client-side encryption identity to update.</param>
		/// <returns>Successful response</returns>
		public async Task<CseIdentity> Gmail_users_settings_cse_identities_patchAsync(string userId, string emailAddress, CseIdentity requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "gmail/v1/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/settings/cse/identities/"+ (emailAddress==null? "" : System.Uri.EscapeDataString(emailAddress));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CseIdentity>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists client-side encryption key pairs for an authenticated user.
		/// Gmail_users_settings_cse_keypairs_list gmail/v1/users/{userId}/settings/cse/keypairs
		/// </summary>
		/// <param name="userId">The requester's primary email address. To indicate the authenticated user, you can use the special value `me`.</param>
		/// <param name="pageSize">The number of key pairs to return. If not provided, the page size will default to 20 entries.</param>
		/// <param name="pageToken">Pagination token indicating which page of key pairs to return. If the token is not supplied, then the API will return the first page of results.</param>
		/// <returns>Successful response</returns>
		public async Task<ListCseKeyPairsResponse> Gmail_users_settings_cse_keypairs_listAsync(string userId, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "gmail/v1/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/settings/cse/keypairs&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListCseKeyPairsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates and uploads a client-side encryption S/MIME public key certificate chain and private key metadata for the authenticated user.
		/// Gmail_users_settings_cse_keypairs_create gmail/v1/users/{userId}/settings/cse/keypairs
		/// </summary>
		/// <param name="userId">The requester's primary email address. To indicate the authenticated user, you can use the special value `me`.</param>
		/// <returns>Successful response</returns>
		public async Task<CseKeyPair> Gmail_users_settings_cse_keypairs_createAsync(string userId, CseKeyPair requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "gmail/v1/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/settings/cse/keypairs";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CseKeyPair>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves an existing client-side encryption key pair.
		/// Gmail_users_settings_cse_keypairs_get gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}
		/// </summary>
		/// <param name="userId">The requester's primary email address. To indicate the authenticated user, you can use the special value `me`.</param>
		/// <param name="keyPairId">The identifier of the key pair to retrieve.</param>
		/// <returns>Successful response</returns>
		public async Task<CseKeyPair> Gmail_users_settings_cse_keypairs_getAsync(string userId, string keyPairId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "gmail/v1/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/settings/cse/keypairs/"+ (keyPairId==null? "" : System.Uri.EscapeDataString(keyPairId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CseKeyPair>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Turns off a client-side encryption key pair. The authenticated user can no longer use the key pair to decrypt incoming CSE message texts or sign outgoing CSE mail. To regain access, use the EnableCseKeyPair to turn on the key pair. After 30 days, you can permanently delete the key pair by using the ObliterateCseKeyPair method.
		/// Gmail_users_settings_cse_keypairs_disable gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}:disable
		/// </summary>
		/// <param name="userId">The requester's primary email address. To indicate the authenticated user, you can use the special value `me`.</param>
		/// <param name="keyPairId">The identifier of the key pair to turn off.</param>
		/// <returns>Successful response</returns>
		public async Task<CseKeyPair> Gmail_users_settings_cse_keypairs_disableAsync(string userId, string keyPairId, DisableCseKeyPairRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "gmail/v1/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/settings/cse/keypairs/"+ (keyPairId==null? "" : System.Uri.EscapeDataString(keyPairId))+":disable";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CseKeyPair>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Turns on a client-side encryption key pair that was turned off. The key pair becomes active again for any associated client-side encryption identities.
		/// Gmail_users_settings_cse_keypairs_enable gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}:enable
		/// </summary>
		/// <param name="userId">The requester's primary email address. To indicate the authenticated user, you can use the special value `me`.</param>
		/// <param name="keyPairId">The identifier of the key pair to turn on.</param>
		/// <returns>Successful response</returns>
		public async Task<CseKeyPair> Gmail_users_settings_cse_keypairs_enableAsync(string userId, string keyPairId, EnableCseKeyPairRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "gmail/v1/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/settings/cse/keypairs/"+ (keyPairId==null? "" : System.Uri.EscapeDataString(keyPairId))+":enable";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CseKeyPair>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a client-side encryption key pair permanently and immediately. You can only permanently delete key pairs that have been turned off for more than 30 days. To turn off a key pair, use the DisableCseKeyPair method. Gmail can't restore or decrypt any messages that were encrypted by an obliterated key. Authenticated users and Google Workspace administrators lose access to reading the encrypted messages.
		/// Gmail_users_settings_cse_keypairs_obliterate gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}:obliterate
		/// </summary>
		/// <param name="userId">The requester's primary email address. To indicate the authenticated user, you can use the special value `me`.</param>
		/// <param name="keyPairId">The identifier of the key pair to obliterate.</param>
		/// <returns>Successful response</returns>
		public async Task Gmail_users_settings_cse_keypairs_obliterateAsync(string userId, string keyPairId, ObliterateCseKeyPairRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "gmail/v1/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/settings/cse/keypairs/"+ (keyPairId==null? "" : System.Uri.EscapeDataString(keyPairId))+":obliterate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the delegates for the specified account. This method is only available to service account clients that have been delegated domain-wide authority.
		/// Gmail_users_settings_delegates_list gmail/v1/users/{userId}/settings/delegates
		/// </summary>
		/// <param name="userId">User's email address. The special value "me" can be used to indicate the authenticated user.</param>
		/// <returns>Successful response</returns>
		public async Task<ListDelegatesResponse> Gmail_users_settings_delegates_listAsync(string userId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "gmail/v1/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/settings/delegates";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListDelegatesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Adds a delegate with its verification status set directly to `accepted`, without sending any verification email. The delegate user must be a member of the same Google Workspace organization as the delegator user. Gmail imposes limitations on the number of delegates and delegators each user in a Google Workspace organization can have. These limits depend on your organization, but in general each user can have up to 25 delegates and up to 10 delegators. Note that a delegate user must be referred to by their primary email address, and not an email alias. Also note that when a new delegate is created, there may be up to a one minute delay before the new delegate is available for use. This method is only available to service account clients that have been delegated domain-wide authority.
		/// Gmail_users_settings_delegates_create gmail/v1/users/{userId}/settings/delegates
		/// </summary>
		/// <param name="userId">User's email address. The special value "me" can be used to indicate the authenticated user.</param>
		/// <returns>Successful response</returns>
		public async Task<Delegate> Gmail_users_settings_delegates_createAsync(string userId, Delegate requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "gmail/v1/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/settings/delegates";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Delegate>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Removes the specified delegate (which can be of any verification status), and revokes any verification that may have been required for using it. Note that a delegate user must be referred to by their primary email address, and not an email alias. This method is only available to service account clients that have been delegated domain-wide authority.
		/// Gmail_users_settings_delegates_delete gmail/v1/users/{userId}/settings/delegates/{delegateEmail}
		/// </summary>
		/// <param name="userId">User's email address. The special value "me" can be used to indicate the authenticated user.</param>
		/// <param name="delegateEmail">The email address of the user to be removed as a delegate.</param>
		/// <returns>Successful response</returns>
		public async Task Gmail_users_settings_delegates_deleteAsync(string userId, string delegateEmail, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "gmail/v1/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/settings/delegates/"+ (delegateEmail==null? "" : System.Uri.EscapeDataString(delegateEmail));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the specified delegate. Note that a delegate user must be referred to by their primary email address, and not an email alias. This method is only available to service account clients that have been delegated domain-wide authority.
		/// Gmail_users_settings_delegates_get gmail/v1/users/{userId}/settings/delegates/{delegateEmail}
		/// </summary>
		/// <param name="userId">User's email address. The special value "me" can be used to indicate the authenticated user.</param>
		/// <param name="delegateEmail">The email address of the user whose delegate relationship is to be retrieved.</param>
		/// <returns>Successful response</returns>
		public async Task<Delegate> Gmail_users_settings_delegates_getAsync(string userId, string delegateEmail, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "gmail/v1/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/settings/delegates/"+ (delegateEmail==null? "" : System.Uri.EscapeDataString(delegateEmail));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Delegate>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the message filters of a Gmail user.
		/// Gmail_users_settings_filters_list gmail/v1/users/{userId}/settings/filters
		/// </summary>
		/// <param name="userId">User's email address. The special value "me" can be used to indicate the authenticated user.</param>
		/// <returns>Successful response</returns>
		public async Task<ListFiltersResponse> Gmail_users_settings_filters_listAsync(string userId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "gmail/v1/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/settings/filters";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListFiltersResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a filter. Note: you can only create a maximum of 1,000 filters.
		/// Gmail_users_settings_filters_create gmail/v1/users/{userId}/settings/filters
		/// </summary>
		/// <param name="userId">User's email address. The special value "me" can be used to indicate the authenticated user.</param>
		/// <returns>Successful response</returns>
		public async Task<Filter> Gmail_users_settings_filters_createAsync(string userId, Filter requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "gmail/v1/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/settings/filters";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Filter>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Immediately and permanently deletes the specified filter.
		/// Gmail_users_settings_filters_delete gmail/v1/users/{userId}/settings/filters/{id}
		/// </summary>
		/// <param name="userId">User's email address. The special value "me" can be used to indicate the authenticated user.</param>
		/// <param name="id">The ID of the filter to be deleted.</param>
		/// <returns>Successful response</returns>
		public async Task Gmail_users_settings_filters_deleteAsync(string userId, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "gmail/v1/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/settings/filters/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a filter.
		/// Gmail_users_settings_filters_get gmail/v1/users/{userId}/settings/filters/{id}
		/// </summary>
		/// <param name="userId">User's email address. The special value "me" can be used to indicate the authenticated user.</param>
		/// <param name="id">The ID of the filter to be fetched.</param>
		/// <returns>Successful response</returns>
		public async Task<Filter> Gmail_users_settings_filters_getAsync(string userId, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "gmail/v1/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/settings/filters/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Filter>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the forwarding addresses for the specified account.
		/// Gmail_users_settings_forwardingAddresses_list gmail/v1/users/{userId}/settings/forwardingAddresses
		/// </summary>
		/// <param name="userId">User's email address. The special value "me" can be used to indicate the authenticated user.</param>
		/// <returns>Successful response</returns>
		public async Task<ListForwardingAddressesResponse> Gmail_users_settings_forwardingAddresses_listAsync(string userId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "gmail/v1/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/settings/forwardingAddresses";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListForwardingAddressesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a forwarding address. If ownership verification is required, a message will be sent to the recipient and the resource's verification status will be set to `pending`; otherwise, the resource will be created with verification status set to `accepted`. This method is only available to service account clients that have been delegated domain-wide authority.
		/// Gmail_users_settings_forwardingAddresses_create gmail/v1/users/{userId}/settings/forwardingAddresses
		/// </summary>
		/// <param name="userId">User's email address. The special value "me" can be used to indicate the authenticated user.</param>
		/// <returns>Successful response</returns>
		public async Task<ForwardingAddress> Gmail_users_settings_forwardingAddresses_createAsync(string userId, ForwardingAddress requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "gmail/v1/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/settings/forwardingAddresses";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ForwardingAddress>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified forwarding address and revokes any verification that may have been required. This method is only available to service account clients that have been delegated domain-wide authority.
		/// Gmail_users_settings_forwardingAddresses_delete gmail/v1/users/{userId}/settings/forwardingAddresses/{forwardingEmail}
		/// </summary>
		/// <param name="userId">User's email address. The special value "me" can be used to indicate the authenticated user.</param>
		/// <param name="forwardingEmail">The forwarding address to be deleted.</param>
		/// <returns>Successful response</returns>
		public async Task Gmail_users_settings_forwardingAddresses_deleteAsync(string userId, string forwardingEmail, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "gmail/v1/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/settings/forwardingAddresses/"+ (forwardingEmail==null? "" : System.Uri.EscapeDataString(forwardingEmail));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the specified forwarding address.
		/// Gmail_users_settings_forwardingAddresses_get gmail/v1/users/{userId}/settings/forwardingAddresses/{forwardingEmail}
		/// </summary>
		/// <param name="userId">User's email address. The special value "me" can be used to indicate the authenticated user.</param>
		/// <param name="forwardingEmail">The forwarding address to be retrieved.</param>
		/// <returns>Successful response</returns>
		public async Task<ForwardingAddress> Gmail_users_settings_forwardingAddresses_getAsync(string userId, string forwardingEmail, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "gmail/v1/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/settings/forwardingAddresses/"+ (forwardingEmail==null? "" : System.Uri.EscapeDataString(forwardingEmail));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ForwardingAddress>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets IMAP settings.
		/// Gmail_users_settings_getImap gmail/v1/users/{userId}/settings/imap
		/// </summary>
		/// <param name="userId">User's email address. The special value "me" can be used to indicate the authenticated user.</param>
		/// <returns>Successful response</returns>
		public async Task<ImapSettings> Gmail_users_settings_getImapAsync(string userId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "gmail/v1/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/settings/imap";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ImapSettings>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates IMAP settings.
		/// Gmail_users_settings_updateImap gmail/v1/users/{userId}/settings/imap
		/// </summary>
		/// <param name="userId">User's email address. The special value "me" can be used to indicate the authenticated user.</param>
		/// <returns>Successful response</returns>
		public async Task<ImapSettings> Gmail_users_settings_updateImapAsync(string userId, ImapSettings requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "gmail/v1/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/settings/imap";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ImapSettings>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets language settings.
		/// Gmail_users_settings_getLanguage gmail/v1/users/{userId}/settings/language
		/// </summary>
		/// <param name="userId">User's email address. The special value "me" can be used to indicate the authenticated user.</param>
		/// <returns>Successful response</returns>
		public async Task<LanguageSettings> Gmail_users_settings_getLanguageAsync(string userId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "gmail/v1/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/settings/language";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LanguageSettings>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates language settings. If successful, the return object contains the `displayLanguage` that was saved for the user, which may differ from the value passed into the request. This is because the requested `displayLanguage` may not be directly supported by Gmail but have a close variant that is, and so the variant may be chosen and saved instead.
		/// Gmail_users_settings_updateLanguage gmail/v1/users/{userId}/settings/language
		/// </summary>
		/// <param name="userId">User's email address. The special value "me" can be used to indicate the authenticated user.</param>
		/// <returns>Successful response</returns>
		public async Task<LanguageSettings> Gmail_users_settings_updateLanguageAsync(string userId, LanguageSettings requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "gmail/v1/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/settings/language";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LanguageSettings>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets POP settings.
		/// Gmail_users_settings_getPop gmail/v1/users/{userId}/settings/pop
		/// </summary>
		/// <param name="userId">User's email address. The special value "me" can be used to indicate the authenticated user.</param>
		/// <returns>Successful response</returns>
		public async Task<PopSettings> Gmail_users_settings_getPopAsync(string userId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "gmail/v1/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/settings/pop";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PopSettings>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates POP settings.
		/// Gmail_users_settings_updatePop gmail/v1/users/{userId}/settings/pop
		/// </summary>
		/// <param name="userId">User's email address. The special value "me" can be used to indicate the authenticated user.</param>
		/// <returns>Successful response</returns>
		public async Task<PopSettings> Gmail_users_settings_updatePopAsync(string userId, PopSettings requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "gmail/v1/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/settings/pop";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PopSettings>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the send-as aliases for the specified account. The result includes the primary send-as address associated with the account as well as any custom "from" aliases.
		/// Gmail_users_settings_sendAs_list gmail/v1/users/{userId}/settings/sendAs
		/// </summary>
		/// <param name="userId">User's email address. The special value "me" can be used to indicate the authenticated user.</param>
		/// <returns>Successful response</returns>
		public async Task<ListSendAsResponse> Gmail_users_settings_sendAs_listAsync(string userId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "gmail/v1/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/settings/sendAs";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListSendAsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a custom "from" send-as alias. If an SMTP MSA is specified, Gmail will attempt to connect to the SMTP service to validate the configuration before creating the alias. If ownership verification is required for the alias, a message will be sent to the email address and the resource's verification status will be set to `pending`; otherwise, the resource will be created with verification status set to `accepted`. If a signature is provided, Gmail will sanitize the HTML before saving it with the alias. This method is only available to service account clients that have been delegated domain-wide authority.
		/// Gmail_users_settings_sendAs_create gmail/v1/users/{userId}/settings/sendAs
		/// </summary>
		/// <param name="userId">User's email address. The special value "me" can be used to indicate the authenticated user.</param>
		/// <returns>Successful response</returns>
		public async Task<SendAs> Gmail_users_settings_sendAs_createAsync(string userId, SendAs requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "gmail/v1/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/settings/sendAs";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SendAs>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified send-as alias. Revokes any verification that may have been required for using it. This method is only available to service account clients that have been delegated domain-wide authority.
		/// Gmail_users_settings_sendAs_delete gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}
		/// </summary>
		/// <param name="userId">User's email address. The special value "me" can be used to indicate the authenticated user.</param>
		/// <param name="sendAsEmail">The send-as alias to be deleted.</param>
		/// <returns>Successful response</returns>
		public async Task Gmail_users_settings_sendAs_deleteAsync(string userId, string sendAsEmail, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "gmail/v1/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/settings/sendAs/"+ (sendAsEmail==null? "" : System.Uri.EscapeDataString(sendAsEmail));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the specified send-as alias. Fails with an HTTP 404 error if the specified address is not a member of the collection.
		/// Gmail_users_settings_sendAs_get gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}
		/// </summary>
		/// <param name="userId">User's email address. The special value "me" can be used to indicate the authenticated user.</param>
		/// <param name="sendAsEmail">The send-as alias to be retrieved.</param>
		/// <returns>Successful response</returns>
		public async Task<SendAs> Gmail_users_settings_sendAs_getAsync(string userId, string sendAsEmail, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "gmail/v1/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/settings/sendAs/"+ (sendAsEmail==null? "" : System.Uri.EscapeDataString(sendAsEmail));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SendAs>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Patch the specified send-as alias.
		/// Gmail_users_settings_sendAs_patch gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}
		/// </summary>
		/// <param name="userId">User's email address. The special value "me" can be used to indicate the authenticated user.</param>
		/// <param name="sendAsEmail">The send-as alias to be updated.</param>
		/// <returns>Successful response</returns>
		public async Task<SendAs> Gmail_users_settings_sendAs_patchAsync(string userId, string sendAsEmail, SendAs requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "gmail/v1/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/settings/sendAs/"+ (sendAsEmail==null? "" : System.Uri.EscapeDataString(sendAsEmail));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SendAs>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates a send-as alias. If a signature is provided, Gmail will sanitize the HTML before saving it with the alias. Addresses other than the primary address for the account can only be updated by service account clients that have been delegated domain-wide authority.
		/// Gmail_users_settings_sendAs_update gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}
		/// </summary>
		/// <param name="userId">User's email address. The special value "me" can be used to indicate the authenticated user.</param>
		/// <param name="sendAsEmail">The send-as alias to be updated.</param>
		/// <returns>Successful response</returns>
		public async Task<SendAs> Gmail_users_settings_sendAs_updateAsync(string userId, string sendAsEmail, SendAs requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "gmail/v1/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/settings/sendAs/"+ (sendAsEmail==null? "" : System.Uri.EscapeDataString(sendAsEmail));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SendAs>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists S/MIME configs for the specified send-as alias.
		/// Gmail_users_settings_sendAs_smimeInfo_list gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo
		/// </summary>
		/// <param name="userId">The user's email address. The special value `me` can be used to indicate the authenticated user.</param>
		/// <param name="sendAsEmail">The email address that appears in the "From:" header for mail sent using this alias.</param>
		/// <returns>Successful response</returns>
		public async Task<ListSmimeInfoResponse> Gmail_users_settings_sendAs_smimeInfo_listAsync(string userId, string sendAsEmail, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "gmail/v1/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/settings/sendAs/"+ (sendAsEmail==null? "" : System.Uri.EscapeDataString(sendAsEmail))+"/smimeInfo";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListSmimeInfoResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Insert (upload) the given S/MIME config for the specified send-as alias. Note that pkcs12 format is required for the key.
		/// Gmail_users_settings_sendAs_smimeInfo_insert gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo
		/// </summary>
		/// <param name="userId">The user's email address. The special value `me` can be used to indicate the authenticated user.</param>
		/// <param name="sendAsEmail">The email address that appears in the "From:" header for mail sent using this alias.</param>
		/// <returns>Successful response</returns>
		public async Task<SmimeInfo> Gmail_users_settings_sendAs_smimeInfo_insertAsync(string userId, string sendAsEmail, SmimeInfo requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "gmail/v1/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/settings/sendAs/"+ (sendAsEmail==null? "" : System.Uri.EscapeDataString(sendAsEmail))+"/smimeInfo";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SmimeInfo>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified S/MIME config for the specified send-as alias.
		/// Gmail_users_settings_sendAs_smimeInfo_delete gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}
		/// </summary>
		/// <param name="userId">The user's email address. The special value `me` can be used to indicate the authenticated user.</param>
		/// <param name="sendAsEmail">The email address that appears in the "From:" header for mail sent using this alias.</param>
		/// <param name="id">The immutable ID for the SmimeInfo.</param>
		/// <returns>Successful response</returns>
		public async Task Gmail_users_settings_sendAs_smimeInfo_deleteAsync(string userId, string sendAsEmail, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "gmail/v1/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/settings/sendAs/"+ (sendAsEmail==null? "" : System.Uri.EscapeDataString(sendAsEmail))+"/smimeInfo/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the specified S/MIME config for the specified send-as alias.
		/// Gmail_users_settings_sendAs_smimeInfo_get gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}
		/// </summary>
		/// <param name="userId">The user's email address. The special value `me` can be used to indicate the authenticated user.</param>
		/// <param name="sendAsEmail">The email address that appears in the "From:" header for mail sent using this alias.</param>
		/// <param name="id">The immutable ID for the SmimeInfo.</param>
		/// <returns>Successful response</returns>
		public async Task<SmimeInfo> Gmail_users_settings_sendAs_smimeInfo_getAsync(string userId, string sendAsEmail, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "gmail/v1/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/settings/sendAs/"+ (sendAsEmail==null? "" : System.Uri.EscapeDataString(sendAsEmail))+"/smimeInfo/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SmimeInfo>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Sets the default S/MIME config for the specified send-as alias.
		/// Gmail_users_settings_sendAs_smimeInfo_setDefault gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}/setDefault
		/// </summary>
		/// <param name="userId">The user's email address. The special value `me` can be used to indicate the authenticated user.</param>
		/// <param name="sendAsEmail">The email address that appears in the "From:" header for mail sent using this alias.</param>
		/// <param name="id">The immutable ID for the SmimeInfo.</param>
		/// <returns>Successful response</returns>
		public async Task Gmail_users_settings_sendAs_smimeInfo_setDefaultAsync(string userId, string sendAsEmail, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "gmail/v1/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/settings/sendAs/"+ (sendAsEmail==null? "" : System.Uri.EscapeDataString(sendAsEmail))+"/smimeInfo/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/setDefault";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Sends a verification email to the specified send-as alias address. The verification status must be `pending`. This method is only available to service account clients that have been delegated domain-wide authority.
		/// Gmail_users_settings_sendAs_verify gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/verify
		/// </summary>
		/// <param name="userId">User's email address. The special value "me" can be used to indicate the authenticated user.</param>
		/// <param name="sendAsEmail">The send-as alias to be verified.</param>
		/// <returns>Successful response</returns>
		public async Task Gmail_users_settings_sendAs_verifyAsync(string userId, string sendAsEmail, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "gmail/v1/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/settings/sendAs/"+ (sendAsEmail==null? "" : System.Uri.EscapeDataString(sendAsEmail))+"/verify";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets vacation responder settings.
		/// Gmail_users_settings_getVacation gmail/v1/users/{userId}/settings/vacation
		/// </summary>
		/// <param name="userId">User's email address. The special value "me" can be used to indicate the authenticated user.</param>
		/// <returns>Successful response</returns>
		public async Task<VacationSettings> Gmail_users_settings_getVacationAsync(string userId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "gmail/v1/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/settings/vacation";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<VacationSettings>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates vacation responder settings.
		/// Gmail_users_settings_updateVacation gmail/v1/users/{userId}/settings/vacation
		/// </summary>
		/// <param name="userId">User's email address. The special value "me" can be used to indicate the authenticated user.</param>
		/// <returns>Successful response</returns>
		public async Task<VacationSettings> Gmail_users_settings_updateVacationAsync(string userId, VacationSettings requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "gmail/v1/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/settings/vacation";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<VacationSettings>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Stop receiving push notifications for the given user mailbox.
		/// Gmail_users_stop gmail/v1/users/{userId}/stop
		/// </summary>
		/// <param name="userId">The user's email address. The special value `me` can be used to indicate the authenticated user.</param>
		/// <returns>Successful response</returns>
		public async Task Gmail_users_stopAsync(string userId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "gmail/v1/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/stop";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the threads in the user's mailbox.
		/// Gmail_users_threads_list gmail/v1/users/{userId}/threads
		/// </summary>
		/// <param name="userId">The user's email address. The special value `me` can be used to indicate the authenticated user.</param>
		/// <param name="includeSpamTrash">Include threads from `SPAM` and `TRASH` in the results.</param>
		/// <param name="labelIds">Only return threads with labels that match all of the specified label IDs.</param>
		/// <param name="maxResults">Maximum number of threads to return. This field defaults to 100. The maximum allowed value for this field is 500.</param>
		/// <param name="pageToken">Page token to retrieve a specific page of results in the list.</param>
		/// <param name="q">Only return threads matching the specified query. Supports the same query format as the Gmail search box. For example, `"from:someuser@example.com rfc822msgid: is:unread"`. Parameter cannot be used when accessing the api using the gmail.metadata scope.</param>
		/// <returns>Successful response</returns>
		public async Task<ListThreadsResponse> Gmail_users_threads_listAsync(string userId, bool includeSpamTrash, string[] labelIds, int maxResults, string pageToken, string q, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "gmail/v1/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/threads&includeSpamTrash="+includeSpamTrash+"&"+string.Join("&", labelIds.Select(z => $"labelIds={System.Uri.EscapeDataString(z.ToString())}"))+"&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&q=" + (q==null? "" : System.Uri.EscapeDataString(q));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListThreadsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Immediately and permanently deletes the specified thread. Any messages that belong to the thread are also deleted. This operation cannot be undone. Prefer `threads.trash` instead.
		/// Gmail_users_threads_delete gmail/v1/users/{userId}/threads/{id}
		/// </summary>
		/// <param name="userId">The user's email address. The special value `me` can be used to indicate the authenticated user.</param>
		/// <param name="id">ID of the Thread to delete.</param>
		/// <returns>Successful response</returns>
		public async Task Gmail_users_threads_deleteAsync(string userId, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "gmail/v1/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/threads/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the specified thread.
		/// Gmail_users_threads_get gmail/v1/users/{userId}/threads/{id}
		/// </summary>
		/// <param name="userId">The user's email address. The special value `me` can be used to indicate the authenticated user.</param>
		/// <param name="id">The ID of the thread to retrieve.</param>
		/// <param name="format">The format to return the messages in.</param>
		/// <param name="metadataHeaders">When given and format is METADATA, only include headers specified.</param>
		/// <returns>Successful response</returns>
		public async Task<Thread> Gmail_users_threads_getAsync(string userId, string id, Gmail_users_threads_getFormat format, string[] metadataHeaders, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "gmail/v1/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/threads/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&format=" + format+"&"+string.Join("&", metadataHeaders.Select(z => $"metadataHeaders={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Thread>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Modifies the labels applied to the thread. This applies to all messages in the thread.
		/// Gmail_users_threads_modify gmail/v1/users/{userId}/threads/{id}/modify
		/// </summary>
		/// <param name="userId">The user's email address. The special value `me` can be used to indicate the authenticated user.</param>
		/// <param name="id">The ID of the thread to modify.</param>
		/// <returns>Successful response</returns>
		public async Task<Thread> Gmail_users_threads_modifyAsync(string userId, string id, ModifyThreadRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "gmail/v1/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/threads/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/modify";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Thread>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Moves the specified thread to the trash. Any messages that belong to the thread are also moved to the trash.
		/// Gmail_users_threads_trash gmail/v1/users/{userId}/threads/{id}/trash
		/// </summary>
		/// <param name="userId">The user's email address. The special value `me` can be used to indicate the authenticated user.</param>
		/// <param name="id">The ID of the thread to Trash.</param>
		/// <returns>Successful response</returns>
		public async Task<Thread> Gmail_users_threads_trashAsync(string userId, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "gmail/v1/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/threads/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/trash";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Thread>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Removes the specified thread from the trash. Any messages that belong to the thread are also removed from the trash.
		/// Gmail_users_threads_untrash gmail/v1/users/{userId}/threads/{id}/untrash
		/// </summary>
		/// <param name="userId">The user's email address. The special value `me` can be used to indicate the authenticated user.</param>
		/// <param name="id">The ID of the thread to remove from Trash.</param>
		/// <returns>Successful response</returns>
		public async Task<Thread> Gmail_users_threads_untrashAsync(string userId, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "gmail/v1/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/threads/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/untrash";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Thread>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Set up or update a push notification watch on the given user mailbox.
		/// Gmail_users_watch gmail/v1/users/{userId}/watch
		/// </summary>
		/// <param name="userId">The user's email address. The special value `me` can be used to indicate the authenticated user.</param>
		/// <returns>Successful response</returns>
		public async Task<WatchResponse> Gmail_users_watchAsync(string userId, WatchRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "gmail/v1/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/watch";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WatchResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
	
	public enum Gmail_users_drafts_getFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="minimal")]
		minimal = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="full")]
		full = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="raw")]
		raw = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="metadata")]
		metadata = 3,
	}
	
	public enum Gmail_users_messages_insertInternalDateSource
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="receivedTime")]
		receivedTime = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="dateHeader")]
		dateHeader = 1,
	}
	
	public enum Gmail_users_threads_getFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="full")]
		full = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="metadata")]
		metadata = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="minimal")]
		minimal = 2,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
