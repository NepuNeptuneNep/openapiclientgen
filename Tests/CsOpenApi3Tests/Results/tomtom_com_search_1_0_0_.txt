//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Additional Data
		/// Search_versionNumberAdditionalData__extGetByGeometriesAndGeometriesZoom search/{versionNumber}/additionalData.{ext}
		/// </summary>
		/// <param name="versionNumber">Service version number. The current value is 2.</param>
		/// <param name="ext">Expected response format.</param>
		/// <param name="geometries">Comma separated list of geometry UUIDs, previously retrieved from an Search API request.</param>
		/// <param name="geometriesZoom">Defines the precision of the geometries.</param>
		/// <returns>OK: additional data were retrieved and the body of the response contains requested data.</returns>
		public async Task Search_versionNumberAdditionalData__extGetByGeometriesAndGeometriesZoomAsync(Search_versionNumberAdditionalData__extGetByGeometriesAndGeometriesZoomVersionNumber versionNumber, Search_versionNumberAdditionalData__extGetByGeometriesAndGeometriesZoomExt ext, string geometries, Search_versionNumberAdditionalData__extGetByGeometriesAndGeometriesZoomGeometriesZoom geometriesZoom, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "search/"+versionNumber+"/additionalData."+ext+"?geometries=" + (geometries==null? "" : System.Uri.EscapeDataString(geometries))+"&geometriesZoom="+geometriesZoom;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Low Bandwith Category Search
		/// Search_versionNumberCS_category__extGetByTypeaheadAndLimitAndOfsAndCountrySetAndLatAndLonAndRadiusAndTopLeftAndBtmRightAndLanguageAndIdxSetAndView search/{versionNumber}/cS/{category}.{ext}
		/// </summary>
		/// <param name="versionNumber">Service version number. The current value is 2.</param>
		/// <param name="category">Query string. Must be properly URL encoded.</param>
		/// <param name="ext">Expected response format.</param>
		/// <param name="typeahead">If the "typeahead" flag is set, the query will be interpreted as a partial input and the search will enter <b>predictive</b> mode.</param>
		/// <param name="limit">Maximum number of search results that will be returned.
		/// Maximum: 100
		// </param>
		/// <param name="ofs">Starting offset of the returned results within the full result set.
		/// Maximum: 1900
		// </param>
		/// <param name="countrySet">Comma separated string of country codes. This will limit the search to the specified countries.</param>
		/// <param name="lat">Latitude where results should be biased.
		///NOTE: supplying a lat/lon without a radius will return search results biased to that point.</param>
		/// <param name="lon">Longitude where results should be biased
		///NOTE: supplying a lat/lon without a radius will return search results biased to that point.</param>
		/// <param name="radius">If radius <b>and</b> position are set, the results will be constrained to the defined area. The radius parameter is specified in meters.</param>
		/// <param name="topLeft">Top left position of the bounding box. This is specified as a comma separated string composed of lat., lon.</param>
		/// <param name="btmRight">Bottom right position of the bounding box. This is specified as a comma separated string composed of lat., lon.</param>
		/// <param name="language">Language in which search results should be returned. Should be one of <a href="/search-api/search-api-documentation/supported-languages">supported IETF language tags</a>, case insensitive.</param>
		/// <param name="idxSet">A comma separated list of indexes which should be utilized for the search. Item order does not matter. Available indexes are:
		///  - <b>Addr</b> = Address range interpolation (when there is no PAD)
		///  - <b>Geo</b> = Geographies
		///  - <b>PAD</b> = Point Addresses
		///  - <b>POI</b> = Points of interest
		///  - <b>Str</b> = Streets
		///  - <b>Xstr</b> = Cross Streets (intersections)</param>
		/// <param name="view">Geopolitical View.</param>
		/// <returns>OK: the search successfully returned zero or more results.</returns>
		public async Task Search_versionNumberCS_category__extGetByTypeaheadAndLimitAndOfsAndCountrySetAndLatAndLonAndRadiusAndTopLeftAndBtmRightAndLanguageAndIdxSetAndViewAsync(
					Search_versionNumberCS_category__extGetByTypeaheadAndLimitAndOfsAndCountrySetAndLatAndLonAndRadiusAndTopLeftAndBtmRightAndLanguageAndIdxSetAndViewVersionNumber versionNumber, 
					string category, 
					Search_versionNumberCS_category__extGetByTypeaheadAndLimitAndOfsAndCountrySetAndLatAndLonAndRadiusAndTopLeftAndBtmRightAndLanguageAndIdxSetAndViewExt ext, 
					bool typeahead, 
					int limit, 
					int ofs, 
					string countrySet, 
					float lat, 
					float lon, 
					int radius, 
					string topLeft, 
					string btmRight, 
					string language, 
					string idxSet, 
					Search_versionNumberCS_category__extGetByTypeaheadAndLimitAndOfsAndCountrySetAndLatAndLonAndRadiusAndTopLeftAndBtmRightAndLanguageAndIdxSetAndViewView view, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "search/"+versionNumber+"/cS/"+ (category==null? "" : System.Uri.EscapeDataString(category))+"."+ext+"&typeahead="+typeahead+"&limit="+limit+"&ofs="+ofs+"&countrySet=" + (countrySet==null? "" : System.Uri.EscapeDataString(countrySet))+"&lat="+lat+"&lon="+lon+"&radius="+radius+"&topLeft=" + (topLeft==null? "" : System.Uri.EscapeDataString(topLeft))+"&btmRight=" + (btmRight==null? "" : System.Uri.EscapeDataString(btmRight))+"&language=" + (language==null? "" : System.Uri.EscapeDataString(language))+"&idxSet=" + (idxSet==null? "" : System.Uri.EscapeDataString(idxSet))+"&view=" + view;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Category Search
		/// Search_versionNumberCategorySearch_query__extGetByTypeaheadAndLimitAndOfsAndCountrySetAndLatAndLonAndRadiusAndTopLeftAndBtmRightAndLanguageAndExtendedPostalCodesForAndView search/{versionNumber}/categorySearch/{query}.{ext}
		/// </summary>
		/// <param name="versionNumber">Service version number. The current value is 2.</param>
		/// <param name="query">Query string. Must be properly URL encoded.</param>
		/// <param name="ext">Expected response format.</param>
		/// <param name="typeahead">If the "typeahead" flag is set, the query will be interpreted as a partial input and the search will enter <b>predictive</b> mode.</param>
		/// <param name="limit">Maximum number of search results that will be returned.
		/// Maximum: 100
		// </param>
		/// <param name="ofs">Starting offset of the returned results within the full result set.
		/// Maximum: 1900
		// </param>
		/// <param name="countrySet">Comma separated string of country codes. This will limit the search to the specified countries.</param>
		/// <param name="lat">Latitude where results should be biased.
		///NOTE: supplying a lat/lon without a radius will return search results biased to that point.</param>
		/// <param name="lon">Longitude where results should be biased
		///NOTE: supplying a lat/lon without a radius will return search results biased to that point.</param>
		/// <param name="radius">If radius <b>and</b> position are set, the results will be constrained to the defined area. The radius parameter is specified in meters.</param>
		/// <param name="topLeft">Top left position of the bounding box. This is specified as a comma separated string composed of lat., lon.</param>
		/// <param name="btmRight">Bottom right position of the bounding box. This is specified as a comma separated string composed of lat., lon.</param>
		/// <param name="language">Language in which search results should be returned. Should be one of <a href="/search-api/search-api-documentation/supported-languages">supported IETF language tags</a>, case insensitive.</param>
		/// <param name="extendedPostalCodesFor">Indexes for which extended postal codes should be included in the results. Available indexes are:
		///  - <b>Addr</b> = Address ranges
		///  - <b>Geo</b> = Geographies
		///  - <b>PAD</b> = Point Addresses
		///  - <b>POI</b> = Points of Interest
		///  - <b>Str</b> = Streets
		///  - <b>XStr</b> = Cross Streets (intersections)</param>
		/// <param name="view">Geopolitical View.</param>
		/// <returns>OK: the search successfully returned zero or more results.</returns>
		public async Task Search_versionNumberCategorySearch_query__extGetByTypeaheadAndLimitAndOfsAndCountrySetAndLatAndLonAndRadiusAndTopLeftAndBtmRightAndLanguageAndExtendedPostalCodesForAndViewAsync(
					Search_versionNumberCategorySearch_query__extGetByTypeaheadAndLimitAndOfsAndCountrySetAndLatAndLonAndRadiusAndTopLeftAndBtmRightAndLanguageAndExtendedPostalCodesForAndViewVersionNumber versionNumber, 
					string query, 
					Search_versionNumberCS_category__extGetByTypeaheadAndLimitAndOfsAndCountrySetAndLatAndLonAndRadiusAndTopLeftAndBtmRightAndLanguageAndIdxSetAndViewExt ext, 
					bool typeahead, 
					int limit, 
					int ofs, 
					string countrySet, 
					float lat, 
					float lon, 
					int radius, 
					string topLeft, 
					string btmRight, 
					string language, 
					string extendedPostalCodesFor, 
					Search_versionNumberCS_category__extGetByTypeaheadAndLimitAndOfsAndCountrySetAndLatAndLonAndRadiusAndTopLeftAndBtmRightAndLanguageAndIdxSetAndViewView view, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "search/"+versionNumber+"/categorySearch/"+ (query==null? "" : System.Uri.EscapeDataString(query))+"."+ext+"&typeahead="+typeahead+"&limit="+limit+"&ofs="+ofs+"&countrySet=" + (countrySet==null? "" : System.Uri.EscapeDataString(countrySet))+"&lat="+lat+"&lon="+lon+"&radius="+radius+"&topLeft=" + (topLeft==null? "" : System.Uri.EscapeDataString(topLeft))+"&btmRight=" + (btmRight==null? "" : System.Uri.EscapeDataString(btmRight))+"&language=" + (language==null? "" : System.Uri.EscapeDataString(language))+"&extendedPostalCodesFor=" + (extendedPostalCodesFor==null? "" : System.Uri.EscapeDataString(extendedPostalCodesFor))+"&view=" + view;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Geocode
		/// Search_versionNumberGeocode_query__extGetByStoreResultAndTypeaheadAndLimitAndOfsAndCountrySetAndLatAndLonAndRadiusAndTopLeftAndBtmRightAndLanguageAndExtendedPostalCodesForAndView search/{versionNumber}/geocode/{query}.{ext}
		/// </summary>
		/// <param name="versionNumber">Service version number. The current value is 2.</param>
		/// <param name="query">Query string. Must be properly URL encoded.</param>
		/// <param name="ext">Expected response format.</param>
		/// <param name="storeResult">If the "storeResult" flag is set, the query will be interpreted as a stored geocode and will be billed according to the terms of use.</param>
		/// <param name="typeahead">If the "typeahead" flag is set, the query will be interpreted as a partial input and the search will enter <b>predictive</b> mode.</param>
		/// <param name="limit">Maximum number of search results that will be returned.
		/// Maximum: 100
		// </param>
		/// <param name="ofs">Starting offset of the returned results within the full result set.
		/// Maximum: 1900
		// </param>
		/// <param name="countrySet">Comma separated string of country codes. This will limit the search to the specified countries.</param>
		/// <param name="lat">Latitude where results should be biased.
		///NOTE: supplying a lat/lon without a radius will return search results biased to that point.</param>
		/// <param name="lon">Longitude where results should be biased
		///NOTE: supplying a lat/lon without a radius will return search results biased to that point.</param>
		/// <param name="radius">If radius <b>and</b> position are set, the results will be constrained to the defined area. The radius parameter is specified in meters.</param>
		/// <param name="topLeft">Top left position of the bounding box. This is specified as a comma separated string composed of lat., lon.</param>
		/// <param name="btmRight">Bottom right position of the bounding box. This is specified as a comma separated string composed of lat., lon.</param>
		/// <param name="language">Language in which search results should be returned. Should be one of <a href="/search-api/search-api-documentation/supported-languages">supported IETF language tags</a>, case insensitive.</param>
		/// <param name="extendedPostalCodesFor">Indexes for which extended postal codes should be included in the results. Available indexes are:
		///  - <b>Addr</b> = Address ranges
		///  - <b>Geo</b> = Geographies
		///  - <b>PAD</b> = Point Addresses
		///  - <b>POI</b> = Points of Interest
		///  - <b>Str</b> = Streets
		///  - <b>XStr</b> = Cross Streets (intersections)</param>
		/// <param name="view">Geopolitical View.</param>
		/// <returns>OK: the search successfully returned zero or more results.</returns>
		public async Task Search_versionNumberGeocode_query__extGetByStoreResultAndTypeaheadAndLimitAndOfsAndCountrySetAndLatAndLonAndRadiusAndTopLeftAndBtmRightAndLanguageAndExtendedPostalCodesForAndViewAsync(
					Search_versionNumberGeocode_query__extGetByStoreResultAndTypeaheadAndLimitAndOfsAndCountrySetAndLatAndLonAndRadiusAndTopLeftAndBtmRightAndLanguageAndExtendedPostalCodesForAndViewVersionNumber versionNumber, 
					string query, 
					Search_versionNumberCS_category__extGetByTypeaheadAndLimitAndOfsAndCountrySetAndLatAndLonAndRadiusAndTopLeftAndBtmRightAndLanguageAndIdxSetAndViewExt ext, 
					bool storeResult, 
					bool typeahead, 
					int limit, 
					int ofs, 
					string countrySet, 
					float lat, 
					float lon, 
					int radius, 
					string topLeft, 
					string btmRight, 
					string language, 
					string extendedPostalCodesFor, 
					Search_versionNumberCS_category__extGetByTypeaheadAndLimitAndOfsAndCountrySetAndLatAndLonAndRadiusAndTopLeftAndBtmRightAndLanguageAndIdxSetAndViewView view, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "search/"+versionNumber+"/geocode/"+ (query==null? "" : System.Uri.EscapeDataString(query))+"."+ext+"&storeResult="+storeResult+"&typeahead="+typeahead+"&limit="+limit+"&ofs="+ofs+"&countrySet=" + (countrySet==null? "" : System.Uri.EscapeDataString(countrySet))+"&lat="+lat+"&lon="+lon+"&radius="+radius+"&topLeft=" + (topLeft==null? "" : System.Uri.EscapeDataString(topLeft))+"&btmRight=" + (btmRight==null? "" : System.Uri.EscapeDataString(btmRight))+"&language=" + (language==null? "" : System.Uri.EscapeDataString(language))+"&extendedPostalCodesFor=" + (extendedPostalCodesFor==null? "" : System.Uri.EscapeDataString(extendedPostalCodesFor))+"&view=" + view;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Geometry Filter
		/// Search_versionNumberGeometryFilter__extGetByGeometryListAndPoiList search/{versionNumber}/geometryFilter.{ext}
		/// </summary>
		/// <param name="versionNumber">Service version number. The current value is 2.</param>
		/// <param name="ext">Expected response format.</param>
		/// <param name="geometryList">List of geometries to filter by. Available types are CIRCLE (with the radius expressed in meters) and POLYGON.</param>
		/// <param name="poiList">List of POIs to filter. The only required attribute of a POI is position, everything else is optional and will be echoed back when passed in.</param>
		/// <returns>OK: the search successfully returned zero or more results.</returns>
		public async Task Search_versionNumberGeometryFilter__extGetByGeometryListAndPoiListAsync(Search_versionNumberGeometryFilter__extGetByGeometryListAndPoiListVersionNumber versionNumber, Search_versionNumberCS_category__extGetByTypeaheadAndLimitAndOfsAndCountrySetAndLatAndLonAndRadiusAndTopLeftAndBtmRightAndLanguageAndIdxSetAndViewExt ext, string geometryList, string poiList, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "search/"+versionNumber+"/geometryFilter."+ext+"?geometryList=" + (geometryList==null? "" : System.Uri.EscapeDataString(geometryList))+"&poiList=" + (poiList==null? "" : System.Uri.EscapeDataString(poiList));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Geometry Filter
		/// Search_versionNumberGeometryFilter__extPost search/{versionNumber}/geometryFilter.{ext}
		/// </summary>
		/// <param name="versionNumber">Service version number. The current value is 2.</param>
		/// <param name="ext">Expected response format.</param>
		/// <returns>OK: the search successfully returned zero or more results.</returns>
		public async Task Search_versionNumberGeometryFilter__extPostAsync(Search_versionNumberGeometryFilter__extPostVersionNumber versionNumber, Search_versionNumberCS_category__extGetByTypeaheadAndLimitAndOfsAndCountrySetAndLatAndLonAndRadiusAndTopLeftAndBtmRightAndLanguageAndIdxSetAndViewExt ext, Search_versionNumberGeometryFilter__extPostPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "search/"+versionNumber+"/geometryFilter."+ext;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Geometry Search
		/// Search_versionNumberGeometrySearch_query__extGetByGeometryListAndLimitAndLanguageAndExtendedPostalCodesForAndIdxSet search/{versionNumber}/geometrySearch/{query}.{ext}
		/// </summary>
		/// <param name="versionNumber">Service version number. The current value is 2.</param>
		/// <param name="query">Query string. Must be properly URL encoded.</param>
		/// <param name="ext">Expected response format.</param>
		/// <param name="geometryList">List of geometries to filter by. Available types are CIRCLE (with the radius expressed in meters) and POLYGON.</param>
		/// <param name="limit">Maximum number of search results that will be returned.
		/// Maximum: 100
		// </param>
		/// <param name="language">Language in which search results should be returned. Should be one of <a href="/search-api/search-api-documentation/supported-languages">supported IETF language tags</a>, case insensitive.</param>
		/// <param name="extendedPostalCodesFor">Indexes for which extended postal codes should be included in the results. Available indexes are:
		///  - <b>Addr</b> = Address ranges
		///  - <b>Geo</b> = Geographies
		///  - <b>PAD</b> = Point Addresses
		///  - <b>POI</b> = Points of Interest
		///  - <b>Str</b> = Streets
		///  - <b>XStr</b> = Cross Streets (intersections)</param>
		/// <param name="idxSet">A comma separated list of indexes which should be utilized for the search. Item order does not matter. Available indexes are:
		///  - <b>Addr</b> = Address range interpolation (when there is no PAD)
		///  - <b>Geo</b> = Geographies
		///  - <b>PAD</b> = Point Addresses
		///  - <b>POI</b> = Points of interest
		///  - <b>Str</b> = Streets
		///  - <b>Xstr</b> = Cross Streets (intersections)</param>
		/// <returns>OK: the search successfully returned zero or more results.</returns>
		public async Task Search_versionNumberGeometrySearch_query__extGetByGeometryListAndLimitAndLanguageAndExtendedPostalCodesForAndIdxSetAsync(Search_versionNumberGeometrySearch_query__extGetByGeometryListAndLimitAndLanguageAndExtendedPostalCodesForAndIdxSetVersionNumber versionNumber, string query, Search_versionNumberCS_category__extGetByTypeaheadAndLimitAndOfsAndCountrySetAndLatAndLonAndRadiusAndTopLeftAndBtmRightAndLanguageAndIdxSetAndViewExt ext, string geometryList, int limit, string language, string extendedPostalCodesFor, string idxSet, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "search/"+versionNumber+"/geometrySearch/"+ (query==null? "" : System.Uri.EscapeDataString(query))+"."+ext+"&geometryList=" + (geometryList==null? "" : System.Uri.EscapeDataString(geometryList))+"&limit="+limit+"&language=" + (language==null? "" : System.Uri.EscapeDataString(language))+"&extendedPostalCodesFor=" + (extendedPostalCodesFor==null? "" : System.Uri.EscapeDataString(extendedPostalCodesFor))+"&idxSet=" + (idxSet==null? "" : System.Uri.EscapeDataString(idxSet));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Geometry Search
		/// Search_versionNumberGeometrySearch_query__extPostByLimitAndLanguageAndExtendedPostalCodesForAndIdxSet search/{versionNumber}/geometrySearch/{query}.{ext}
		/// </summary>
		/// <param name="versionNumber">Service version number. The current value is 2.</param>
		/// <param name="query">Query string. Must be properly URL encoded.</param>
		/// <param name="ext">Expected response format.</param>
		/// <param name="limit">Maximum number of search results that will be returned.
		/// Maximum: 100
		// </param>
		/// <param name="language">Language in which search results should be returned. Should be one of <a href="/search-api/search-api-documentation/supported-languages">supported IETF language tags</a>, case insensitive.</param>
		/// <param name="extendedPostalCodesFor">Indexes for which extended postal codes should be included in the results. Available indexes are:
		///  - <b>Addr</b> = Address ranges
		///  - <b>Geo</b> = Geographies
		///  - <b>PAD</b> = Point Addresses
		///  - <b>POI</b> = Points of Interest
		///  - <b>Str</b> = Streets
		///  - <b>XStr</b> = Cross Streets (intersections)</param>
		/// <param name="idxSet">A comma separated list of indexes which should be utilized for the search. Item order does not matter. Available indexes are:
		///  - <b>Addr</b> = Address range interpolation (when there is no PAD)
		///  - <b>Geo</b> = Geographies
		///  - <b>PAD</b> = Point Addresses
		///  - <b>POI</b> = Points of interest
		///  - <b>Str</b> = Streets
		///  - <b>Xstr</b> = Cross Streets (intersections)</param>
		/// <returns>OK: the search successfully returned zero or more results.</returns>
		public async Task Search_versionNumberGeometrySearch_query__extPostByLimitAndLanguageAndExtendedPostalCodesForAndIdxSetAsync(Search_versionNumberGeometrySearch_query__extPostByLimitAndLanguageAndExtendedPostalCodesForAndIdxSetVersionNumber versionNumber, string query, Search_versionNumberCS_category__extGetByTypeaheadAndLimitAndOfsAndCountrySetAndLatAndLonAndRadiusAndTopLeftAndBtmRightAndLanguageAndIdxSetAndViewExt ext, int limit, string language, string extendedPostalCodesFor, string idxSet, Search_versionNumberGeometrySearch_query__extPostByLimitAndLanguageAndExtendedPostalCodesForAndIdxSetPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "search/"+versionNumber+"/geometrySearch/"+ (query==null? "" : System.Uri.EscapeDataString(query))+"."+ext+"&limit="+limit+"&language=" + (language==null? "" : System.Uri.EscapeDataString(language))+"&extendedPostalCodesFor=" + (extendedPostalCodesFor==null? "" : System.Uri.EscapeDataString(extendedPostalCodesFor))+"&idxSet=" + (idxSet==null? "" : System.Uri.EscapeDataString(idxSet));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Nearby Search
		/// Search_versionNumberNearbySearch__extGetByLatAndLonAndLimitAndOfsAndCountrySetAndRadiusAndTopLeftAndBtmRightAndLanguageAndExtendedPostalCodesForAndMinFuzzyLevelAndMaxFuzzyLevelAndIdxSetAndView search/{versionNumber}/nearbySearch/.{ext}
		/// </summary>
		/// <param name="versionNumber">Service version number. The current value is 2.</param>
		/// <param name="ext">Expected response format.</param>
		/// <param name="lat">Latitude where results should be biased.
		///NOTE: supplying a lat/lon without a radius will return search results biased to that point.</param>
		/// <param name="lon">Longitude where results should be biased
		///NOTE: supplying a lat/lon without a radius will return search results biased to that point.</param>
		/// <param name="limit">Maximum number of search results that will be returned.
		/// Maximum: 100
		// </param>
		/// <param name="ofs">Starting offset of the returned results within the full result set.
		/// Maximum: 1900
		// </param>
		/// <param name="countrySet">Comma separated string of country codes. This will limit the search to the specified countries.</param>
		/// <param name="radius">If radius and position are set, the results will be constrained to the defined area. The radius parameter is specified in meters.
		/// Maximum: 50000
		// </param>
		/// <param name="topLeft">Top left position of the bounding box. This is specified as a comma separated string composed of lat., lon.</param>
		/// <param name="btmRight">Bottom right position of the bounding box. This is specified as a comma separated string composed of lat., lon.</param>
		/// <param name="language">Language in which search results should be returned. Should be one of <a href="/search-api/search-api-documentation/supported-languages">supported IETF language tags</a>, case insensitive.</param>
		/// <param name="extendedPostalCodesFor">Indexes for which extended postal codes should be included in the results. Available indexes are:
		///  - <b>Addr</b> = Address ranges
		///  - <b>Geo</b> = Geographies
		///  - <b>PAD</b> = Point Addresses
		///  - <b>POI</b> = Points of Interest
		///  - <b>Str</b> = Streets
		///  - <b>XStr</b> = Cross Streets (intersections)</param>
		/// <param name="minFuzzyLevel">Minimum fuzziness level to be used.
		/// Minimum: 1
		/// Maximum: 4
		// </param>
		/// <param name="maxFuzzyLevel">Maximum fuzziness level to be used.
		/// Minimum: 1
		/// Maximum: 4
		// </param>
		/// <param name="idxSet">A comma separated list of indexes which should be utilized for the search. Item order does not matter. Available indexes are:
		///  - <b>Addr</b> = Address range interpolation (when there is no PAD)
		///  - <b>Geo</b> = Geographies
		///  - <b>PAD</b> = Point Addresses
		///  - <b>POI</b> = Points of interest
		///  - <b>Str</b> = Streets
		///  - <b>Xstr</b> = Cross Streets (intersections)</param>
		/// <param name="view">Geopolitical View.</param>
		/// <returns>OK: the search successfully returned zero or more results.</returns>
		public async Task Search_versionNumberNearbySearch__extGetByLatAndLonAndLimitAndOfsAndCountrySetAndRadiusAndTopLeftAndBtmRightAndLanguageAndExtendedPostalCodesForAndMinFuzzyLevelAndMaxFuzzyLevelAndIdxSetAndViewAsync(
					Search_versionNumberNearbySearch__extGetByLatAndLonAndLimitAndOfsAndCountrySetAndRadiusAndTopLeftAndBtmRightAndLanguageAndExtendedPostalCodesForAndMinFuzzyLevelAndMaxFuzzyLevelAndIdxSetAndViewVersionNumber versionNumber, 
					Search_versionNumberCS_category__extGetByTypeaheadAndLimitAndOfsAndCountrySetAndLatAndLonAndRadiusAndTopLeftAndBtmRightAndLanguageAndIdxSetAndViewExt ext, 
					float lat, 
					float lon, 
					int limit, 
					int ofs, 
					string countrySet, 
					int radius, 
					string topLeft, 
					string btmRight, 
					string language, 
					string extendedPostalCodesFor, 
					int minFuzzyLevel, 
					int maxFuzzyLevel, 
					string idxSet, 
					Search_versionNumberCS_category__extGetByTypeaheadAndLimitAndOfsAndCountrySetAndLatAndLonAndRadiusAndTopLeftAndBtmRightAndLanguageAndIdxSetAndViewView view, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "search/"+versionNumber+"/nearbySearch/."+ext+"?lat="+lat+"&lon="+lon+"&limit="+limit+"&ofs="+ofs+"&countrySet=" + (countrySet==null? "" : System.Uri.EscapeDataString(countrySet))+"&radius="+radius+"&topLeft=" + (topLeft==null? "" : System.Uri.EscapeDataString(topLeft))+"&btmRight=" + (btmRight==null? "" : System.Uri.EscapeDataString(btmRight))+"&language=" + (language==null? "" : System.Uri.EscapeDataString(language))+"&extendedPostalCodesFor=" + (extendedPostalCodesFor==null? "" : System.Uri.EscapeDataString(extendedPostalCodesFor))+"&minFuzzyLevel="+minFuzzyLevel+"&maxFuzzyLevel="+maxFuzzyLevel+"&idxSet=" + (idxSet==null? "" : System.Uri.EscapeDataString(idxSet))+"&view=" + view;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Points of Interest Search
		/// Search_versionNumberPoiSearch_query__extGetByTypeaheadAndLimitAndOfsAndCountrySetAndLatAndLonAndRadiusAndTopLeftAndBtmRightAndLanguageAndExtendedPostalCodesForAndView search/{versionNumber}/poiSearch/{query}.{ext}
		/// </summary>
		/// <param name="versionNumber">Service version number. The current value is 2.</param>
		/// <param name="query">Query string. Must be properly URL encoded.</param>
		/// <param name="ext">Expected response format.</param>
		/// <param name="typeahead">If the "typeahead" flag is set, the query will be interpreted as a partial input and the search will enter <b>predictive</b> mode.</param>
		/// <param name="limit">Maximum number of search results that will be returned.
		/// Maximum: 100
		// </param>
		/// <param name="ofs">Starting offset of the returned results within the full result set.
		/// Maximum: 1900
		// </param>
		/// <param name="countrySet">Comma separated string of country codes. This will limit the search to the specified countries.</param>
		/// <param name="lat">Latitude where results should be biased.
		///NOTE: supplying a lat/lon without a radius will return search results biased to that point.</param>
		/// <param name="lon">Longitude where results should be biased
		///NOTE: supplying a lat/lon without a radius will return search results biased to that point.</param>
		/// <param name="radius">If radius <b>and</b> position are set, the results will be constrained to the defined area. The radius parameter is specified in meters.</param>
		/// <param name="topLeft">Top left position of the bounding box. This is specified as a comma separated string composed of lat., lon.</param>
		/// <param name="btmRight">Bottom right position of the bounding box. This is specified as a comma separated string composed of lat., lon.</param>
		/// <param name="language">Language in which search results should be returned. Should be one of <a href="/search-api/search-api-documentation/supported-languages">supported IETF language tags</a>, case insensitive.</param>
		/// <param name="extendedPostalCodesFor">Indexes for which extended postal codes should be included in the results. Available indexes are:
		///  - <b>Addr</b> = Address ranges
		///  - <b>Geo</b> = Geographies
		///  - <b>PAD</b> = Point Addresses
		///  - <b>POI</b> = Points of Interest
		///  - <b>Str</b> = Streets
		///  - <b>XStr</b> = Cross Streets (intersections)</param>
		/// <param name="view">Geopolitical View.</param>
		/// <returns>OK: the search successfully returned zero or more results.</returns>
		public async Task Search_versionNumberPoiSearch_query__extGetByTypeaheadAndLimitAndOfsAndCountrySetAndLatAndLonAndRadiusAndTopLeftAndBtmRightAndLanguageAndExtendedPostalCodesForAndViewAsync(
					Search_versionNumberPoiSearch_query__extGetByTypeaheadAndLimitAndOfsAndCountrySetAndLatAndLonAndRadiusAndTopLeftAndBtmRightAndLanguageAndExtendedPostalCodesForAndViewVersionNumber versionNumber, 
					string query, 
					Search_versionNumberCS_category__extGetByTypeaheadAndLimitAndOfsAndCountrySetAndLatAndLonAndRadiusAndTopLeftAndBtmRightAndLanguageAndIdxSetAndViewExt ext, 
					bool typeahead, 
					int limit, 
					int ofs, 
					string countrySet, 
					float lat, 
					float lon, 
					int radius, 
					string topLeft, 
					string btmRight, 
					string language, 
					string extendedPostalCodesFor, 
					Search_versionNumberCS_category__extGetByTypeaheadAndLimitAndOfsAndCountrySetAndLatAndLonAndRadiusAndTopLeftAndBtmRightAndLanguageAndIdxSetAndViewView view, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "search/"+versionNumber+"/poiSearch/"+ (query==null? "" : System.Uri.EscapeDataString(query))+"."+ext+"&typeahead="+typeahead+"&limit="+limit+"&ofs="+ofs+"&countrySet=" + (countrySet==null? "" : System.Uri.EscapeDataString(countrySet))+"&lat="+lat+"&lon="+lon+"&radius="+radius+"&topLeft=" + (topLeft==null? "" : System.Uri.EscapeDataString(topLeft))+"&btmRight=" + (btmRight==null? "" : System.Uri.EscapeDataString(btmRight))+"&language=" + (language==null? "" : System.Uri.EscapeDataString(language))+"&extendedPostalCodesFor=" + (extendedPostalCodesFor==null? "" : System.Uri.EscapeDataString(extendedPostalCodesFor))+"&view=" + view;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Cross Street lookup
		/// Search_versionNumberReverseGeocodeCrossStreet_position__extGetByLimitAndSpatialKeysAndHeadingAndRadiusAndLanguage search/{versionNumber}/reverseGeocode/crossStreet/{position}.{ext}
		/// </summary>
		/// <param name="versionNumber">Service version number. The current value is 2.</param>
		/// <param name="position">This is specified as a comma separated string composed of lat., lon.</param>
		/// <param name="ext">Expected response format.</param>
		/// <param name="limit">Maximum number of cross-streets to return.
		/// Minimum: 0
		/// Maximum: 100
		// </param>
		/// <param name="spatialKeys">If the "spatialKeys" flag is set, the response will also contain a proprietary geospatial keys for a specified location.</param>
		/// <param name="heading">The directional heading in degrees, usually similar to the course along a road segment. Entered in degrees, measured clockwise from north (so north is 0, east is 90, etc.)</param>
		/// <param name="radius">The maximum distance in meters from the specified position for the reverse geocoder to consider.</param>
		/// <param name="language">Language in which search results should be returned. Should be one of <a href="/search-api/search-api-documentation/supported-languages">supported IETF language tags</a>, case insensitive.</param>
		/// <returns>OK: the search successfully returned zero or more results.</returns>
		public async Task Search_versionNumberReverseGeocodeCrossStreet_position__extGetByLimitAndSpatialKeysAndHeadingAndRadiusAndLanguageAsync(Search_versionNumberReverseGeocodeCrossStreet_position__extGetByLimitAndSpatialKeysAndHeadingAndRadiusAndLanguageVersionNumber versionNumber, string position, Search_versionNumberCS_category__extGetByTypeaheadAndLimitAndOfsAndCountrySetAndLatAndLonAndRadiusAndTopLeftAndBtmRightAndLanguageAndIdxSetAndViewExt ext, int limit, bool spatialKeys, float heading, int radius, string language, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "search/"+versionNumber+"/reverseGeocode/crossStreet/"+ (position==null? "" : System.Uri.EscapeDataString(position))+"."+ext+"&limit="+limit+"&spatialKeys="+spatialKeys+"&heading="+heading+"&radius="+radius+"&language=" + (language==null? "" : System.Uri.EscapeDataString(language));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Reverse Geocode
		/// Search_versionNumberReverseGeocode_position__extGetBySpatialKeysAndReturnSpeedLimitAndHeadingAndRadiusAndNumberAndReturnRoadUseAndRoadUseAndCallback search/{versionNumber}/reverseGeocode/{position}.{ext}
		/// </summary>
		/// <param name="versionNumber">Service version number. The current value is 2.</param>
		/// <param name="position">This is specified as a comma separated string composed of lat., lon.</param>
		/// <param name="ext">Expected response format.</param>
		/// <param name="spatialKeys">If the "spatialKeys" flag is set, the response will also contain a proprietary geospatial keys for a specified location.</param>
		/// <param name="returnSpeedLimit">To enable return of the posted speed limit (where available).</param>
		/// <param name="heading">The directional heading in degrees, usually similar to the course along a road segment. Entered in degrees, measured clockwise from north (so north is 0, east is 90, etc.)</param>
		/// <param name="radius">The maximum distance in meters from the specified position for the reverse geocoder to consider.</param>
		/// <param name="number">If a number is sent in along with the request, the response may include the side of the street (Left/Right) and an offset position for that number.</param>
		/// <param name="returnRoadUse">Enables return of the road use array for reverse geocodes at street level.</param>
		/// <param name="roadUse">Restricts reverse geocodes to a certain type of road use. The road use array for reverse geocodes can be one or more of: ["LimitedAccess", "Arterial", "Terminal", "Ramp", "Rotary", "LocalStreet"].</param>
		/// <param name="callback">Specifies the jsonp callback method.</param>
		/// <returns>OK: the search successfully returned zero or more results.</returns>
		public async Task Search_versionNumberReverseGeocode_position__extGetBySpatialKeysAndReturnSpeedLimitAndHeadingAndRadiusAndNumberAndReturnRoadUseAndRoadUseAndCallbackAsync(Search_versionNumberReverseGeocode_position__extGetBySpatialKeysAndReturnSpeedLimitAndHeadingAndRadiusAndNumberAndReturnRoadUseAndRoadUseAndCallbackVersionNumber versionNumber, string position, Search_versionNumberCS_category__extGetByTypeaheadAndLimitAndOfsAndCountrySetAndLatAndLonAndRadiusAndTopLeftAndBtmRightAndLanguageAndIdxSetAndViewExt ext, bool spatialKeys, bool returnSpeedLimit, float heading, int radius, string number, bool returnRoadUse, string roadUse, string callback, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "search/"+versionNumber+"/reverseGeocode/"+ (position==null? "" : System.Uri.EscapeDataString(position))+"."+ext+"&spatialKeys="+spatialKeys+"&returnSpeedLimit="+returnSpeedLimit+"&heading="+heading+"&radius="+radius+"&number=" + (number==null? "" : System.Uri.EscapeDataString(number))+"&returnRoadUse="+returnRoadUse+"&roadUse=" + (roadUse==null? "" : System.Uri.EscapeDataString(roadUse))+"&callback=" + (callback==null? "" : System.Uri.EscapeDataString(callback));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Routed Filter
		/// Search_versionNumberRoutedFilter_position_heading__extGetByPoiListAndRoutingTimeout search/{versionNumber}/routedFilter/{position}/{heading}.{ext}
		/// </summary>
		/// <param name="versionNumber">Service version number. The current value is 2.</param>
		/// <param name="position">This is specified as a comma separated string composed of lat., lon.</param>
		/// <param name="heading">The directional heading in degrees, usually similar to the course along a road segment. Entered in degrees, measured clockwise from north (so north is 0, east is 90, etc.)</param>
		/// <param name="ext">Expected response format.</param>
		/// <param name="poiList">List of POIs to filter. The only required attribute of a POI is position, everything else is optional and will be echoed back when passed in.</param>
		/// <param name="routingTimeout">Only return results that arrive from routing engine within this time limit.</param>
		/// <returns>OK: the search successfully returned zero or more results.</returns>
		public async Task Search_versionNumberRoutedFilter_position_heading__extGetByPoiListAndRoutingTimeoutAsync(Search_versionNumberRoutedFilter_position_heading__extGetByPoiListAndRoutingTimeoutVersionNumber versionNumber, string position, float heading, Search_versionNumberCS_category__extGetByTypeaheadAndLimitAndOfsAndCountrySetAndLatAndLonAndRadiusAndTopLeftAndBtmRightAndLanguageAndIdxSetAndViewExt ext, string poiList, int routingTimeout, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "search/"+versionNumber+"/routedFilter/"+ (position==null? "" : System.Uri.EscapeDataString(position))+"/"+heading+"."+ext+"&poiList=" + (poiList==null? "" : System.Uri.EscapeDataString(poiList))+"&routingTimeout="+routingTimeout;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Routed Filter
		/// Search_versionNumberRoutedFilter_position_heading__extPostByRoutingTimeout search/{versionNumber}/routedFilter/{position}/{heading}.{ext}
		/// </summary>
		/// <param name="versionNumber">Service version number. The current value is 2.</param>
		/// <param name="position">This is specified as a comma separated string composed of lat., lon.</param>
		/// <param name="heading">The directional heading in degrees, usually similar to the course along a road segment. Entered in degrees, measured clockwise from north (so north is 0, east is 90, etc.)</param>
		/// <param name="ext">Expected response format.</param>
		/// <param name="routingTimeout">Only return results that arrive from routing engine within this time limit.</param>
		/// <returns>OK: the search successfully returned zero or more results.</returns>
		public async Task Search_versionNumberRoutedFilter_position_heading__extPostByRoutingTimeoutAsync(Search_versionNumberRoutedFilter_position_heading__extPostByRoutingTimeoutVersionNumber versionNumber, string position, float heading, Search_versionNumberCS_category__extGetByTypeaheadAndLimitAndOfsAndCountrySetAndLatAndLonAndRadiusAndTopLeftAndBtmRightAndLanguageAndIdxSetAndViewExt ext, int routingTimeout, Search_versionNumberRoutedFilter_position_heading__extPostByRoutingTimeoutPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "search/"+versionNumber+"/routedFilter/"+ (position==null? "" : System.Uri.EscapeDataString(position))+"/"+heading+"."+ext+"&routingTimeout="+routingTimeout;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Routed Search
		/// Search_versionNumberRoutedSearch_query_position_heading__extGetByTypeaheadAndLimitAndMultiplierAndRoutingTimeoutAndLanguageAndExtendedPostalCodesForAndIdxSet search/{versionNumber}/routedSearch/{query}/{position}/{heading}.{ext}
		/// </summary>
		/// <param name="versionNumber">Service version number. The current value is 2.</param>
		/// <param name="query">Query string. Must be properly URL encoded.</param>
		/// <param name="position">This is specified as a comma separated string composed of lat., lon.</param>
		/// <param name="heading">The directional heading in degrees, usually similar to the course along a road segment. Entered in degrees, measured clockwise from north (so north is 0, east is 90, etc.)</param>
		/// <param name="ext">Expected response format.</param>
		/// <param name="typeahead">If the "typeahead" flag is set, the query will be interpreted as a partial input and the search will enter <b>predictive</b> mode.</param>
		/// <param name="limit">Maximum number of search results that will be returned.
		/// Maximum: 100
		// </param>
		/// <param name="multiplier">Multiplies the limit by N to gather more candidate POIs, which will then be sorted by drive distance, returning only the top candidates according to the limit.</param>
		/// <param name="routingTimeout">Only return results that arrive from routing engine within this time limit.</param>
		/// <param name="language">Language in which search results should be returned. Should be one of <a href="/search-api/search-api-documentation/supported-languages">supported IETF language tags</a>, case insensitive.</param>
		/// <param name="extendedPostalCodesFor">Indexes for which extended postal codes should be included in the results. Available indexes are:
		///  - <b>Addr</b> = Address ranges
		///  - <b>Geo</b> = Geographies
		///  - <b>PAD</b> = Point Addresses
		///  - <b>POI</b> = Points of Interest
		///  - <b>Str</b> = Streets
		///  - <b>XStr</b> = Cross Streets (intersections)</param>
		/// <param name="idxSet">A comma separated list of indexes which should be utilized for the search. Item order does not matter. Available indexes are:
		///  - <b>Addr</b> = Address range interpolation (when there is no PAD)
		///  - <b>Geo</b> = Geographies
		///  - <b>PAD</b> = Point Addresses
		///  - <b>POI</b> = Points of interest
		///  - <b>Str</b> = Streets
		///  - <b>Xstr</b> = Cross Streets (intersections)</param>
		/// <returns>OK: the search successfully returned zero or more results.</returns>
		public async Task Search_versionNumberRoutedSearch_query_position_heading__extGetByTypeaheadAndLimitAndMultiplierAndRoutingTimeoutAndLanguageAndExtendedPostalCodesForAndIdxSetAsync(Search_versionNumberRoutedSearch_query_position_heading__extGetByTypeaheadAndLimitAndMultiplierAndRoutingTimeoutAndLanguageAndExtendedPostalCodesForAndIdxSetVersionNumber versionNumber, string query, string position, float heading, Search_versionNumberCS_category__extGetByTypeaheadAndLimitAndOfsAndCountrySetAndLatAndLonAndRadiusAndTopLeftAndBtmRightAndLanguageAndIdxSetAndViewExt ext, bool typeahead, int limit, int multiplier, int routingTimeout, string language, string extendedPostalCodesFor, string idxSet, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "search/"+versionNumber+"/routedSearch/"+ (query==null? "" : System.Uri.EscapeDataString(query))+"/"+ (position==null? "" : System.Uri.EscapeDataString(position))+"/"+heading+"."+ext+"&typeahead="+typeahead+"&limit="+limit+"&multiplier="+multiplier+"&routingTimeout="+routingTimeout+"&language=" + (language==null? "" : System.Uri.EscapeDataString(language))+"&extendedPostalCodesFor=" + (extendedPostalCodesFor==null? "" : System.Uri.EscapeDataString(extendedPostalCodesFor))+"&idxSet=" + (idxSet==null? "" : System.Uri.EscapeDataString(idxSet));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Low bandwith Search
		/// Search_versionNumberS_query__extGetByTypeaheadAndLimitAndOfsAndCountrySetAndLatAndLonAndRadiusAndTopLeftAndBtmRightAndLanguageAndIdxSetAndView search/{versionNumber}/s/{query}.{ext}
		/// </summary>
		/// <param name="versionNumber">Service version number. The current value is 2.</param>
		/// <param name="query">Query string. Must be properly URL encoded.</param>
		/// <param name="ext">Expected response format.</param>
		/// <param name="typeahead">If the "typeahead" flag is set, the query will be interpreted as a partial input and the search will enter <b>predictive</b> mode.</param>
		/// <param name="limit">Maximum number of search results that will be returned.
		/// Maximum: 100
		// </param>
		/// <param name="ofs">Starting offset of the returned results within the full result set.
		/// Maximum: 1900
		// </param>
		/// <param name="countrySet">Comma separated string of country codes. This will limit the search to the specified countries.</param>
		/// <param name="lat">Latitude where results should be biased.
		///NOTE: supplying a lat/lon without a radius will return search results biased to that point.</param>
		/// <param name="lon">Longitude where results should be biased
		///NOTE: supplying a lat/lon without a radius will return search results biased to that point.</param>
		/// <param name="radius">If radius <b>and</b> position are set, the results will be constrained to the defined area. The radius parameter is specified in meters.</param>
		/// <param name="topLeft">Top left position of the bounding box. This is specified as a comma separated string composed of lat., lon.</param>
		/// <param name="btmRight">Bottom right position of the bounding box. This is specified as a comma separated string composed of lat., lon.</param>
		/// <param name="language">Language in which search results should be returned. Should be one of <a href="/search-api/search-api-documentation/supported-languages">supported IETF language tags</a>, case insensitive.</param>
		/// <param name="idxSet">A comma separated list of indexes which should be utilized for the search. Item order does not matter. Available indexes are:
		///  - <b>Addr</b> = Address range interpolation (when there is no PAD)
		///  - <b>Geo</b> = Geographies
		///  - <b>PAD</b> = Point Addresses
		///  - <b>POI</b> = Points of interest
		///  - <b>Str</b> = Streets
		///  - <b>Xstr</b> = Cross Streets (intersections)</param>
		/// <param name="view">Geopolitical View.</param>
		/// <returns>OK: the search successfully returned zero or more results.</returns>
		public async Task Search_versionNumberS_query__extGetByTypeaheadAndLimitAndOfsAndCountrySetAndLatAndLonAndRadiusAndTopLeftAndBtmRightAndLanguageAndIdxSetAndViewAsync(
					Search_versionNumberS_query__extGetByTypeaheadAndLimitAndOfsAndCountrySetAndLatAndLonAndRadiusAndTopLeftAndBtmRightAndLanguageAndIdxSetAndViewVersionNumber versionNumber, 
					string query, 
					Search_versionNumberCS_category__extGetByTypeaheadAndLimitAndOfsAndCountrySetAndLatAndLonAndRadiusAndTopLeftAndBtmRightAndLanguageAndIdxSetAndViewExt ext, 
					bool typeahead, 
					int limit, 
					int ofs, 
					string countrySet, 
					float lat, 
					float lon, 
					int radius, 
					string topLeft, 
					string btmRight, 
					string language, 
					string idxSet, 
					Search_versionNumberCS_category__extGetByTypeaheadAndLimitAndOfsAndCountrySetAndLatAndLonAndRadiusAndTopLeftAndBtmRightAndLanguageAndIdxSetAndViewView view, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "search/"+versionNumber+"/s/"+ (query==null? "" : System.Uri.EscapeDataString(query))+"."+ext+"&typeahead="+typeahead+"&limit="+limit+"&ofs="+ofs+"&countrySet=" + (countrySet==null? "" : System.Uri.EscapeDataString(countrySet))+"&lat="+lat+"&lon="+lon+"&radius="+radius+"&topLeft=" + (topLeft==null? "" : System.Uri.EscapeDataString(topLeft))+"&btmRight=" + (btmRight==null? "" : System.Uri.EscapeDataString(btmRight))+"&language=" + (language==null? "" : System.Uri.EscapeDataString(language))+"&idxSet=" + (idxSet==null? "" : System.Uri.EscapeDataString(idxSet))+"&view=" + view;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Fuzzy Search
		/// Search_versionNumberSearch_query__extGetByTypeaheadAndLimitAndOfsAndCountrySetAndLatAndLonAndRadiusAndTopLeftAndBtmRightAndLanguageAndExtendedPostalCodesForAndMinFuzzyLevelAndMaxFuzzyLevelAndIdxSetAndView search/{versionNumber}/search/{query}.{ext}
		/// </summary>
		/// <param name="versionNumber">Service version number. The current value is 2.</param>
		/// <param name="query">Query string. Must be properly URL encoded.
		///
		///To perform a reverse geocode, the user can provide latitude and longitude coordinates directly in the query. More information can be found <a href="/search-api/search-api-documentation-search/fuzzy-search#AdditionalInfo">here</a>.</param>
		/// <param name="ext">Expected response format.</param>
		/// <param name="typeahead">If the "typeahead" flag is set, the query will be interpreted as a partial input and the search will enter <b>predictive</b> mode.</param>
		/// <param name="limit">Maximum number of search results that will be returned.
		/// Maximum: 100
		// </param>
		/// <param name="ofs">Starting offset of the returned results within the full result set.
		/// Maximum: 1900
		// </param>
		/// <param name="countrySet">Comma separated string of country codes. This will limit the search to the specified countries.</param>
		/// <param name="lat">Latitude where results should be biased.
		///NOTE: supplying a lat/lon without a radius will return search results biased to that point.</param>
		/// <param name="lon">Longitude where results should be biased
		///NOTE: supplying a lat/lon without a radius will return search results biased to that point.</param>
		/// <param name="radius">If radius <b>and</b> position are set, the results will be constrained to the defined area. The radius parameter is specified in meters.</param>
		/// <param name="topLeft">Top left position of the bounding box. This is specified as a comma separated string composed of lat., lon.</param>
		/// <param name="btmRight">Bottom right position of the bounding box. This is specified as a comma separated string composed of lat., lon.</param>
		/// <param name="language">Language in which search results should be returned. Should be one of <a href="/search-api/search-api-documentation/supported-languages">supported IETF language tags</a>, case insensitive.</param>
		/// <param name="extendedPostalCodesFor">Indexes for which extended postal codes should be included in the results. Available indexes are:
		///  - <b>Addr</b> = Address ranges
		///  - <b>Geo</b> = Geographies
		///  - <b>PAD</b> = Point Addresses
		///  - <b>POI</b> = Points of Interest
		///  - <b>Str</b> = Streets
		///  - <b>XStr</b> = Cross Streets (intersections)</param>
		/// <param name="minFuzzyLevel">Minimum fuzziness level to be used.
		/// Minimum: 1
		/// Maximum: 4
		// </param>
		/// <param name="maxFuzzyLevel">Maximum fuzziness level to be used.
		/// Minimum: 1
		/// Maximum: 4
		// </param>
		/// <param name="idxSet">A comma separated list of indexes which should be utilized for the search. Item order does not matter. Available indexes are:
		///  - <b>Addr</b> = Address range interpolation (when there is no PAD)
		///  - <b>Geo</b> = Geographies
		///  - <b>PAD</b> = Point Addresses
		///  - <b>POI</b> = Points of interest
		///  - <b>Str</b> = Streets
		///  - <b>Xstr</b> = Cross Streets (intersections)</param>
		/// <param name="view">Geopolitical View.</param>
		/// <returns>OK: the search successfully returned zero or more results.</returns>
		public async Task Search_versionNumberSearch_query__extGetByTypeaheadAndLimitAndOfsAndCountrySetAndLatAndLonAndRadiusAndTopLeftAndBtmRightAndLanguageAndExtendedPostalCodesForAndMinFuzzyLevelAndMaxFuzzyLevelAndIdxSetAndViewAsync(
					Search_versionNumberSearch_query__extGetByTypeaheadAndLimitAndOfsAndCountrySetAndLatAndLonAndRadiusAndTopLeftAndBtmRightAndLanguageAndExtendedPostalCodesForAndMinFuzzyLevelAndMaxFuzzyLevelAndIdxSetAndViewVersionNumber versionNumber, 
					string query, 
					Search_versionNumberCS_category__extGetByTypeaheadAndLimitAndOfsAndCountrySetAndLatAndLonAndRadiusAndTopLeftAndBtmRightAndLanguageAndIdxSetAndViewExt ext, 
					bool typeahead, 
					int limit, 
					int ofs, 
					string countrySet, 
					float lat, 
					float lon, 
					int radius, 
					string topLeft, 
					string btmRight, 
					string language, 
					string extendedPostalCodesFor, 
					int minFuzzyLevel, 
					int maxFuzzyLevel, 
					string idxSet, 
					Search_versionNumberCS_category__extGetByTypeaheadAndLimitAndOfsAndCountrySetAndLatAndLonAndRadiusAndTopLeftAndBtmRightAndLanguageAndIdxSetAndViewView view, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "search/"+versionNumber+"/search/"+ (query==null? "" : System.Uri.EscapeDataString(query))+"."+ext+"&typeahead="+typeahead+"&limit="+limit+"&ofs="+ofs+"&countrySet=" + (countrySet==null? "" : System.Uri.EscapeDataString(countrySet))+"&lat="+lat+"&lon="+lon+"&radius="+radius+"&topLeft=" + (topLeft==null? "" : System.Uri.EscapeDataString(topLeft))+"&btmRight=" + (btmRight==null? "" : System.Uri.EscapeDataString(btmRight))+"&language=" + (language==null? "" : System.Uri.EscapeDataString(language))+"&extendedPostalCodesFor=" + (extendedPostalCodesFor==null? "" : System.Uri.EscapeDataString(extendedPostalCodesFor))+"&minFuzzyLevel="+minFuzzyLevel+"&maxFuzzyLevel="+maxFuzzyLevel+"&idxSet=" + (idxSet==null? "" : System.Uri.EscapeDataString(idxSet))+"&view=" + view;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Along Route Search
		/// Search_versionNumberSearchAlongRoute_query__extPostByMaxDetourTimeAndLimit search/{versionNumber}/searchAlongRoute/{query}.{ext}
		/// </summary>
		/// <param name="versionNumber">Service version number. The current value is 2.</param>
		/// <param name="query">Query string. Must be properly URL encoded.</param>
		/// <param name="ext">Expected response format.</param>
		/// <param name="maxDetourTime">Maximum detour time
		/// Maximum: 3600
		// </param>
		/// <param name="limit">Maximum number of search results that will be returned.
		/// Maximum: 100
		// </param>
		/// <returns>OK: the search successfully returned zero or more results.</returns>
		public async Task Search_versionNumberSearchAlongRoute_query__extPostByMaxDetourTimeAndLimitAsync(Search_versionNumberSearchAlongRoute_query__extPostByMaxDetourTimeAndLimitVersionNumber versionNumber, string query, Search_versionNumberCS_category__extGetByTypeaheadAndLimitAndOfsAndCountrySetAndLatAndLonAndRadiusAndTopLeftAndBtmRightAndLanguageAndIdxSetAndViewExt ext, int maxDetourTime, int limit, Search_versionNumberSearchAlongRoute_query__extPostByMaxDetourTimeAndLimitPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "search/"+versionNumber+"/searchAlongRoute/"+ (query==null? "" : System.Uri.EscapeDataString(query))+"."+ext+"&maxDetourTime="+maxDetourTime+"&limit="+limit;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Structured Geocode
		/// Search_versionNumberStructuredGeocode__extGetByCountryCodeAndLimitAndOfsAndStreetNumberAndStreetNameAndCrossStreetAndMunicipalityAndMunicipalitySubdivisionAndCountryTertiarySubdivisionAndCountrySecondarySubdivisionAndCountrySubdivisionAndPostalCodeAndLanguageAndExtendedPostalCodesFor search/{versionNumber}/structuredGeocode.{ext}
		/// </summary>
		/// <param name="versionNumber">Service version number. The current value is 2.</param>
		/// <param name="ext">Expected response format.</param>
		/// <param name="countryCode">2 or 3 letter country code (e.g.: FR, ES).</param>
		/// <param name="limit">Maximum number of search results that will be returned.
		/// Maximum: 100
		// </param>
		/// <param name="ofs">Starting offset of the returned results within the full result set.
		/// Maximum: 1900
		// </param>
		/// <param name="streetNumber">The street number for the structured address.</param>
		/// <param name="streetName">The street name for the structured address.</param>
		/// <param name="crossStreet">The cross street name for the structured address.</param>
		/// <param name="municipality">The municipality (city/town) for the structured address.</param>
		/// <param name="municipalitySubdivision">The municipality subdivision (sub/super city) for the structured address.</param>
		/// <param name="countryTertiarySubdivision">The named area for the structured address.</param>
		/// <param name="countrySecondarySubdivision">The county for the structured address.</param>
		/// <param name="countrySubdivision">The state or province for the structured address.</param>
		/// <param name="postalCode">The zip code or postal code for the structured address.</param>
		/// <param name="language">Language in which search results should be returned. Should be one of <a href="/search-api/search-api-documentation/supported-languages">supported IETF language tags</a>, case insensitive.</param>
		/// <param name="extendedPostalCodesFor">Indexes for which extended postal codes should be included in the results. Available indexes are:
		///  - <b>Addr</b> = Address ranges
		///  - <b>Geo</b> = Geographies
		///  - <b>PAD</b> = Point Addresses
		///  - <b>POI</b> = Points of Interest
		///  - <b>Str</b> = Streets
		///  - <b>XStr</b> = Cross Streets (intersections)</param>
		/// <returns>OK: the search successfully returned zero or more results.</returns>
		public async Task Search_versionNumberStructuredGeocode__extGetByCountryCodeAndLimitAndOfsAndStreetNumberAndStreetNameAndCrossStreetAndMunicipalityAndMunicipalitySubdivisionAndCountryTertiarySubdivisionAndCountrySecondarySubdivisionAndCountrySubdivisionAndPostalCodeAndLanguageAndExtendedPostalCodesForAsync(
					Search_versionNumberStructuredGeocode__extGetByCountryCodeAndLimitAndOfsAndStreetNumberAndStreetNameAndCrossStreetAndMunicipalityAndMunicipalitySubdivisionAndCountryTertiarySubdivisionAndCountrySecondarySubdivisionAndCountrySubdivisionAndPostalCodeAndLanguageAndExtendedPostalCodesForVersionNumber versionNumber, 
					Search_versionNumberCS_category__extGetByTypeaheadAndLimitAndOfsAndCountrySetAndLatAndLonAndRadiusAndTopLeftAndBtmRightAndLanguageAndIdxSetAndViewExt ext, 
					string countryCode, 
					int limit, 
					int ofs, 
					string streetNumber, 
					string streetName, 
					string crossStreet, 
					string municipality, 
					string municipalitySubdivision, 
					string countryTertiarySubdivision, 
					string countrySecondarySubdivision, 
					string countrySubdivision, 
					string postalCode, 
					string language, 
					string extendedPostalCodesFor, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "search/"+versionNumber+"/structuredGeocode."+ext+"?countryCode=" + (countryCode==null? "" : System.Uri.EscapeDataString(countryCode))+"&limit="+limit+"&ofs="+ofs+"&streetNumber=" + (streetNumber==null? "" : System.Uri.EscapeDataString(streetNumber))+"&streetName=" + (streetName==null? "" : System.Uri.EscapeDataString(streetName))+"&crossStreet=" + (crossStreet==null? "" : System.Uri.EscapeDataString(crossStreet))+"&municipality=" + (municipality==null? "" : System.Uri.EscapeDataString(municipality))+"&municipalitySubdivision=" + (municipalitySubdivision==null? "" : System.Uri.EscapeDataString(municipalitySubdivision))+"&countryTertiarySubdivision=" + (countryTertiarySubdivision==null? "" : System.Uri.EscapeDataString(countryTertiarySubdivision))+"&countrySecondarySubdivision=" + (countrySecondarySubdivision==null? "" : System.Uri.EscapeDataString(countrySecondarySubdivision))+"&countrySubdivision=" + (countrySubdivision==null? "" : System.Uri.EscapeDataString(countrySubdivision))+"&postalCode=" + (postalCode==null? "" : System.Uri.EscapeDataString(postalCode))+"&language=" + (language==null? "" : System.Uri.EscapeDataString(language))+"&extendedPostalCodesFor=" + (extendedPostalCodesFor==null? "" : System.Uri.EscapeDataString(extendedPostalCodesFor));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
	
	public enum Search_versionNumberAdditionalData__extGetByGeometriesAndGeometriesZoomVersionNumber
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
	}
	
	public enum Search_versionNumberAdditionalData__extGetByGeometriesAndGeometriesZoomExt
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="json")]
		json = 0,
	}
	
	public enum Search_versionNumberAdditionalData__extGetByGeometriesAndGeometriesZoomGeometriesZoom
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_5 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_6 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_7 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_8 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_9 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_10 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_11 = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_12 = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_13 = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_14 = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_15 = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_16 = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_17 = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_18 = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_19 = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_20 = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_21 = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_22 = 22,
	}
	
	public enum Search_versionNumberCS_category__extGetByTypeaheadAndLimitAndOfsAndCountrySetAndLatAndLonAndRadiusAndTopLeftAndBtmRightAndLanguageAndIdxSetAndViewVersionNumber
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
	}
	
	public enum Search_versionNumberCS_category__extGetByTypeaheadAndLimitAndOfsAndCountrySetAndLatAndLonAndRadiusAndTopLeftAndBtmRightAndLanguageAndIdxSetAndViewExt
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="json")]
		json = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="jsonp")]
		jsonp = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="js")]
		js = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="xml")]
		xml = 3,
	}
	
	public enum Search_versionNumberCS_category__extGetByTypeaheadAndLimitAndOfsAndCountrySetAndLatAndLonAndRadiusAndTopLeftAndBtmRightAndLanguageAndIdxSetAndViewView
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Unified")]
		Unified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IN")]
		IN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PK")]
		PK = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IL")]
		IL = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MA")]
		MA = 4,
	}
	
	public enum Search_versionNumberCategorySearch_query__extGetByTypeaheadAndLimitAndOfsAndCountrySetAndLatAndLonAndRadiusAndTopLeftAndBtmRightAndLanguageAndExtendedPostalCodesForAndViewVersionNumber
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
	}
	
	public enum Search_versionNumberGeocode_query__extGetByStoreResultAndTypeaheadAndLimitAndOfsAndCountrySetAndLatAndLonAndRadiusAndTopLeftAndBtmRightAndLanguageAndExtendedPostalCodesForAndViewVersionNumber
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
	}
	
	public enum Search_versionNumberGeometryFilter__extGetByGeometryListAndPoiListVersionNumber
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
	}
	
	public enum Search_versionNumberGeometryFilter__extPostVersionNumber
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
	}
	
	public class Search_versionNumberGeometryFilter__extPostPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="geometryList")]
		public Search_versionNumberGeometryFilter__extPostPostBodyGeometryList[] Search_versionNumberGeometryFilter__extPostPostBodyGeometryList { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="poiList")]
		public Search_versionNumberGeometryFilter__extPostPostBodyPoiList[] Search_versionNumberGeometryFilter__extPostPostBodyPoiList { get; set; }
	}
	
	public class Search_versionNumberGeometryFilter__extPostPostBodyGeometryList
	{
		
		[System.Runtime.Serialization.DataMember(Name="position")]
		public string Position { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="radius")]
		public System.Nullable<System.Int32> Radius { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vertices")]
		public string[] Vertices { get; set; }
	}
	
	public class Search_versionNumberGeometryFilter__extPostPostBodyPoiList
	{
		
		[System.Runtime.Serialization.DataMember(Name="address")]
		public Search_versionNumberGeometryFilter__extPostPostBodyPoiListAddress Address { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="poi")]
		public Search_versionNumberGeometryFilter__extPostPostBodyPoiListPoi Poi { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="position")]
		public Search_versionNumberGeometryFilter__extPostPostBodyPoiListPosition Position { get; set; }
	}
	
	public class Search_versionNumberGeometryFilter__extPostPostBodyPoiListAddress
	{
		
		[System.Runtime.Serialization.DataMember(Name="freeformAddress")]
		public string FreeformAddress { get; set; }
	}
	
	public class Search_versionNumberGeometryFilter__extPostPostBodyPoiListPoi
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	public class Search_versionNumberGeometryFilter__extPostPostBodyPoiListPosition
	{
		
		[System.Runtime.Serialization.DataMember(Name="lat")]
		public System.Nullable<System.Single> Lat { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lon")]
		public System.Nullable<System.Single> Lon { get; set; }
	}
	
	public enum Search_versionNumberGeometrySearch_query__extGetByGeometryListAndLimitAndLanguageAndExtendedPostalCodesForAndIdxSetVersionNumber
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
	}
	
	public enum Search_versionNumberGeometrySearch_query__extPostByLimitAndLanguageAndExtendedPostalCodesForAndIdxSetVersionNumber
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
	}
	
	public class Search_versionNumberGeometrySearch_query__extPostByLimitAndLanguageAndExtendedPostalCodesForAndIdxSetPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="geometryList")]
		public Search_versionNumberGeometrySearch_query__extPostByLimitAndLanguageAndExtendedPostalCodesForAndIdxSetPostBodyGeometryList[] Search_versionNumberGeometrySearch_query__extPostByLimitAndLanguageAndExtendedPostalCodesForAndIdxSetPostBodyGeometryList { get; set; }
	}
	
	public class Search_versionNumberGeometrySearch_query__extPostByLimitAndLanguageAndExtendedPostalCodesForAndIdxSetPostBodyGeometryList
	{
		
		[System.Runtime.Serialization.DataMember(Name="position")]
		public string Position { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="radius")]
		public System.Nullable<System.Int32> Radius { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vertices")]
		public string[] Vertices { get; set; }
	}
	
	public enum Search_versionNumberNearbySearch__extGetByLatAndLonAndLimitAndOfsAndCountrySetAndRadiusAndTopLeftAndBtmRightAndLanguageAndExtendedPostalCodesForAndMinFuzzyLevelAndMaxFuzzyLevelAndIdxSetAndViewVersionNumber
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
	}
	
	public enum Search_versionNumberPoiSearch_query__extGetByTypeaheadAndLimitAndOfsAndCountrySetAndLatAndLonAndRadiusAndTopLeftAndBtmRightAndLanguageAndExtendedPostalCodesForAndViewVersionNumber
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
	}
	
	public enum Search_versionNumberReverseGeocodeCrossStreet_position__extGetByLimitAndSpatialKeysAndHeadingAndRadiusAndLanguageVersionNumber
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
	}
	
	public enum Search_versionNumberReverseGeocode_position__extGetBySpatialKeysAndReturnSpeedLimitAndHeadingAndRadiusAndNumberAndReturnRoadUseAndRoadUseAndCallbackVersionNumber
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
	}
	
	public enum Search_versionNumberRoutedFilter_position_heading__extGetByPoiListAndRoutingTimeoutVersionNumber
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
	}
	
	public enum Search_versionNumberRoutedFilter_position_heading__extPostByRoutingTimeoutVersionNumber
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
	}
	
	public class Search_versionNumberRoutedFilter_position_heading__extPostByRoutingTimeoutPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="poiList")]
		public Search_versionNumberRoutedFilter_position_heading__extPostByRoutingTimeoutPostBodyPoiList[] Search_versionNumberRoutedFilter_position_heading__extPostByRoutingTimeoutPostBodyPoiList { get; set; }
	}
	
	public class Search_versionNumberRoutedFilter_position_heading__extPostByRoutingTimeoutPostBodyPoiList
	{
		
		[System.Runtime.Serialization.DataMember(Name="address")]
		public Search_versionNumberRoutedFilter_position_heading__extPostByRoutingTimeoutPostBodyPoiListAddress Address { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="poi")]
		public Search_versionNumberRoutedFilter_position_heading__extPostByRoutingTimeoutPostBodyPoiListPoi Poi { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="position")]
		public Search_versionNumberRoutedFilter_position_heading__extPostByRoutingTimeoutPostBodyPoiListPosition Position { get; set; }
	}
	
	public class Search_versionNumberRoutedFilter_position_heading__extPostByRoutingTimeoutPostBodyPoiListAddress
	{
		
		[System.Runtime.Serialization.DataMember(Name="freeformAddress")]
		public string FreeformAddress { get; set; }
	}
	
	public class Search_versionNumberRoutedFilter_position_heading__extPostByRoutingTimeoutPostBodyPoiListPoi
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	public class Search_versionNumberRoutedFilter_position_heading__extPostByRoutingTimeoutPostBodyPoiListPosition
	{
		
		[System.Runtime.Serialization.DataMember(Name="lat")]
		public System.Nullable<System.Single> Lat { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lon")]
		public System.Nullable<System.Single> Lon { get; set; }
	}
	
	public enum Search_versionNumberRoutedSearch_query_position_heading__extGetByTypeaheadAndLimitAndMultiplierAndRoutingTimeoutAndLanguageAndExtendedPostalCodesForAndIdxSetVersionNumber
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
	}
	
	public enum Search_versionNumberS_query__extGetByTypeaheadAndLimitAndOfsAndCountrySetAndLatAndLonAndRadiusAndTopLeftAndBtmRightAndLanguageAndIdxSetAndViewVersionNumber
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
	}
	
	public enum Search_versionNumberSearch_query__extGetByTypeaheadAndLimitAndOfsAndCountrySetAndLatAndLonAndRadiusAndTopLeftAndBtmRightAndLanguageAndExtendedPostalCodesForAndMinFuzzyLevelAndMaxFuzzyLevelAndIdxSetAndViewVersionNumber
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
	}
	
	public enum Search_versionNumberSearchAlongRoute_query__extPostByMaxDetourTimeAndLimitVersionNumber
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
	}
	
	public class Search_versionNumberSearchAlongRoute_query__extPostByMaxDetourTimeAndLimitPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="route")]
		public Search_versionNumberSearchAlongRoute_query__extPostByMaxDetourTimeAndLimitPostBodyRoute Route { get; set; }
	}
	
	public class Search_versionNumberSearchAlongRoute_query__extPostByMaxDetourTimeAndLimitPostBodyRoute
	{
		
		[System.Runtime.Serialization.DataMember(Name="points")]
		public Search_versionNumberSearchAlongRoute_query__extPostByMaxDetourTimeAndLimitPostBodyRoutePoints[] Search_versionNumberSearchAlongRoute_query__extPostByMaxDetourTimeAndLimitPostBodyRoutePoints { get; set; }
	}
	
	public class Search_versionNumberSearchAlongRoute_query__extPostByMaxDetourTimeAndLimitPostBodyRoutePoints
	{
		
		[System.Runtime.Serialization.DataMember(Name="lat")]
		public System.Nullable<System.Single> Lat { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lon")]
		public System.Nullable<System.Single> Lon { get; set; }
	}
	
	public enum Search_versionNumberStructuredGeocode__extGetByCountryCodeAndLimitAndOfsAndStreetNumberAndStreetNameAndCrossStreetAndMunicipalityAndMunicipalitySubdivisionAndCountryTertiarySubdivisionAndCountrySecondarySubdivisionAndCountrySubdivisionAndPostalCodeAndLanguageAndExtendedPostalCodesForVersionNumber
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
