//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Lists the geographical areas (e.g. districts) that can be used to filter events.
		/// AreasGetByFormat areas
		/// </summary>
		/// <param name="format">The format of the response</param>
		/// <returns>List of packages</returns>
		public async Task AreasGetByFormatAsync(AreasGetByFormatFormat format, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "areas?format=" + format;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists road events
		/// The events resource provides information about road events (e.g. accidents, construction, special events). The response is a list of event elements matching the filtering parameters if any are provided.
		/// EventsGetByFormatAndStatusAndSeverityAndJurisdictionAndEvent_typeAndCreatedAndUpdatedAndRoad_nameAndArea_idAndBbox events
		/// </summary>
		/// <param name="format">The format of the response</param>
		/// <param name="status">Limits the response to events having a given status.</param>
		/// <param name="severity">Limits the response to events tagged with one of the listed severity values. The possible values are: [MINOR, MODERATE, MAJOR].  Multiple values may be listed, and should be separated by a comma. The default is to return events of any severity.</param>
		/// <param name="jurisdiction">Limits the response to events reported by a given jurisdiction. The value given must be specified as the ID of a jurisdiction returned by the /jurisdiction resource. The default is to return events from all jurisdictions.</param>
		/// <param name="event_type">Limits the response to events tagged with one of the listed event types.  The possible values include: [CONSTRUCTION, INCIDENT, SPECIAL_EVENT, WEATHER_CONDITION].  Multiple values may be listed, and should be separated by a comma. The default is to return events of all types.</param>
		/// <param name="created">Limits the response to events based on the date and time that the event was created (first recorded). The date/time must be specified in ISO 8601 format, and may be prefixed by one of the following operators [<, <=, >, >=] to indicate 'before', 'before or equal to', 'after' or 'after or equal to' respectively.  For example, >2013-12-01T12:00:00Z requests all events create after Dec. 1, 2015 at 12pm (noon) Coordinated Universal Time.  The default is to return events with any creation time.</param>
		/// <param name="updated">Limits the response to events based on the date and time that the event was last updated. The date/time must be specified in ISO 8601 format, and may be prefixed by one of the following operators [<, <=, >, >=] to indicate 'before', 'before or equal to', 'after' or 'after or equal to' respectively.  For example, >2013-12-01T12:00:00Z requests all events updated after Dec. 1, 2015 at 12pm (noon) Coordinated Universal Time. The default is to return events with any update time</param>
		/// <param name="road_name">Limits the response to events on a given road as specified by the road name.  An example of a valid road name is 'Highway 1'. The default is to return events on all roads.</param>
		/// <param name="area_id">Limits the response to events within one of the specified areas.  An area must be specified as the ID of an item returned by the /areas resource. For example: an area_id of 'drivebc.ca/1' limits events to those within the Lower Mainland District.  The default is to return events in all areas.</param>
		/// <param name="bbox">Limits the response to events that fall within the specified geographical bounding box.  The bbox format must be '[min longitude],[min latitude],[max longitude],[max latitude]' with WGS84 coordinates.  For example: -123.45,48.99,-122.45,49.49.  The default is to return events in all geographical locations.</param>
		/// <returns>List of packages</returns>
		public async Task EventsGetByFormatAndStatusAndSeverityAndJurisdictionAndEvent_typeAndCreatedAndUpdatedAndRoad_nameAndArea_idAndBboxAsync(AreasGetByFormatFormat format, EventsGetByFormatAndStatusAndSeverityAndJurisdictionAndEvent_typeAndCreatedAndUpdatedAndRoad_nameAndArea_idAndBboxStatus status, string severity, string jurisdiction, EventsGetByFormatAndStatusAndSeverityAndJurisdictionAndEvent_typeAndCreatedAndUpdatedAndRoad_nameAndArea_idAndBboxEvent_type event_type, string created, string updated, string road_name, string area_id, string bbox, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "events?format=" + format+"&status=" + status+"&severity=" + (severity==null? "" : System.Uri.EscapeDataString(severity))+"&jurisdiction=" + (jurisdiction==null? "" : System.Uri.EscapeDataString(jurisdiction))+"&event_type=" + event_type+"&created=" + (created==null? "" : System.Uri.EscapeDataString(created))+"&updated=" + (updated==null? "" : System.Uri.EscapeDataString(updated))+"&road_name=" + (road_name==null? "" : System.Uri.EscapeDataString(road_name))+"&area_id=" + (area_id==null? "" : System.Uri.EscapeDataString(area_id))+"&bbox=" + (bbox==null? "" : System.Uri.EscapeDataString(bbox));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the jurisdictions publishing data through this Open511 API implementation
		/// JurisdictionGetByFormat jurisdiction
		/// </summary>
		/// <param name="format">The format of the response</param>
		/// <returns>List of packages</returns>
		public async Task JurisdictionGetByFormatAsync(AreasGetByFormatFormat format, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "jurisdiction?format=" + format;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Provides the geographical boundaries for all the jurisdictions.
		/// JurisdictiongeographyGetByFormat jurisdictiongeography
		/// </summary>
		/// <param name="format">The format of the response</param>
		/// <returns>List of packages</returns>
		public async Task JurisdictiongeographyGetByFormatAsync(AreasGetByFormatFormat format, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "jurisdictiongeography?format=" + format;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum AreasGetByFormatFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="json")]
		json = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="xml")]
		xml = 1,
	}
	
	public enum EventsGetByFormatAndStatusAndSeverityAndJurisdictionAndEvent_typeAndCreatedAndUpdatedAndRoad_nameAndArea_idAndBboxStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ALL")]
		ALL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ACTIVE")]
		ACTIVE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ARCHIVED")]
		ARCHIVED = 2,
	}
	
	public enum EventsGetByFormatAndStatusAndSeverityAndJurisdictionAndEvent_typeAndCreatedAndUpdatedAndRoad_nameAndArea_idAndBboxEvent_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CONSTRUCTION")]
		CONSTRUCTION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SPECIAL_EVENT")]
		SPECIAL_EVENT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INCIDENT")]
		INCIDENT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="WEATHER_CONDITION")]
		WEATHER_CONDITION = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ROAD_CONDITION")]
		ROAD_CONDITION = 4,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
