//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// An Api is a top-level description of an API. Apis are produced by producers and are commitments to provide services.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Api
	{
		
		/// <summary>
		/// Annotations attach non-identifying metadata to resources. Annotation keys and values are less restricted than those of labels, but should be generally used for small values of broad interest. Larger, topic- specific metadata should be stored in Artifacts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="annotations")]
		public System.Collections.Generic.Dictionary<string, string> Annotations { get; set; }
		
		/// <summary>
		/// A user-definable description of the availability of this service. Format: free-form, but we expect single words that describe availability, e.g. "NONE", "TESTING", "PREVIEW", "GENERAL", "DEPRECATED", "SHUTDOWN".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availability")]
		public string Availability { get; set; }
		
		/// <summary>
		/// Output only. Creation timestamp.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public System.Nullable<System.DateTimeOffset> CreateTime { get; set; }
		
		/// <summary>
		/// A detailed description.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Human-meaningful name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Labels attach identifying metadata to resources. Identifying metadata can be used to filter list operations. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. No more than 64 user labels can be associated with one resource (System labels are excluded). See https://goo.gl/xmQnxf for more information and examples of labels. System reserved label keys are prefixed with "apigeeregistry.googleapis.com/" and cannot be changed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// Resource name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The recommended deployment of the API. Format: apis/{api}/deployments/{deployment}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recommendedDeployment")]
		public string RecommendedDeployment { get; set; }
		
		/// <summary>
		/// The recommended version of the API. Format: apis/{api}/versions/{version}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recommendedVersion")]
		public string RecommendedVersion { get; set; }
		
		/// <summary>
		/// Output only. Last update timestamp.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public System.Nullable<System.DateTimeOffset> UpdateTime { get; set; }
	}
	
	/// <summary>
	/// An ApiDeployment describes a service running at particular address that provides a particular version of an API. ApiDeployments have revisions which correspond to different configurations of a single deployment in time. Revision identifiers should be updated whenever the served API spec or endpoint address changes.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApiDeployment
	{
		
		/// <summary>
		/// Text briefly describing how to access the endpoint. Changes to this value will not affect the revision.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accessGuidance")]
		public string AccessGuidance { get; set; }
		
		/// <summary>
		/// Annotations attach non-identifying metadata to resources. Annotation keys and values are less restricted than those of labels, but should be generally used for small values of broad interest. Larger, topic- specific metadata should be stored in Artifacts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="annotations")]
		public System.Collections.Generic.Dictionary<string, string> Annotations { get; set; }
		
		/// <summary>
		/// The full resource name (including revision id) of the spec of the API being served by the deployment. Changes to this value will update the revision. Format: apis/{api}/deployments/{deployment}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apiSpecRevision")]
		public string ApiSpecRevision { get; set; }
		
		/// <summary>
		/// Output only. Creation timestamp; when the deployment resource was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public System.Nullable<System.DateTimeOffset> CreateTime { get; set; }
		
		/// <summary>
		/// A detailed description.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Human-meaningful name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// The address where the deployment is serving. Changes to this value will update the revision.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endpointUri")]
		public string EndpointUri { get; set; }
		
		/// <summary>
		/// The address of the external channel of the API (e.g. the Developer Portal). Changes to this value will not affect the revision.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="externalChannelUri")]
		public string ExternalChannelUri { get; set; }
		
		/// <summary>
		/// Text briefly identifying the intended audience of the API. Changes to this value will not affect the revision.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="intendedAudience")]
		public string IntendedAudience { get; set; }
		
		/// <summary>
		/// Labels attach identifying metadata to resources. Identifying metadata can be used to filter list operations. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. No more than 64 user labels can be associated with one resource (System labels are excluded). See https://goo.gl/xmQnxf for more information and examples of labels. System reserved label keys are prefixed with "registry.googleapis.com/" and cannot be changed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// Resource name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Output only. Revision creation timestamp; when the represented revision was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="revisionCreateTime")]
		public System.Nullable<System.DateTimeOffset> RevisionCreateTime { get; set; }
		
		/// <summary>
		/// Output only. Immutable. The revision ID of the deployment. A new revision is committed whenever the deployment contents are changed. The format is an 8-character hexadecimal string.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="revisionId")]
		public string RevisionId { get; set; }
		
		/// <summary>
		/// Output only. Last update timestamp: when the represented revision was last modified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="revisionUpdateTime")]
		public System.Nullable<System.DateTimeOffset> RevisionUpdateTime { get; set; }
	}
	
	/// <summary>
	/// An ApiSpec describes a version of an API in a structured way. ApiSpecs provide formal descriptions that consumers can use to use a version. ApiSpec resources are intended to be fully-resolved descriptions of an ApiVersion. When specs consist of multiple files, these should be bundled together (e.g. in a zip archive) and stored as a unit. Multiple specs can exist to provide representations in different API description formats. Synchronization of these representations would be provided by tooling and background services.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApiSpec
	{
		
		/// <summary>
		/// Annotations attach non-identifying metadata to resources. Annotation keys and values are less restricted than those of labels, but should be generally used for small values of broad interest. Larger, topic- specific metadata should be stored in Artifacts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="annotations")]
		public System.Collections.Generic.Dictionary<string, string> Annotations { get; set; }
		
		/// <summary>
		/// Input only. The contents of the spec. Provided by API callers when specs are created or updated. To access the contents of a spec, use GetApiSpecContents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contents")]
		public string Contents { get; set; }
		
		/// <summary>
		/// Output only. Creation timestamp; when the spec resource was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public System.Nullable<System.DateTimeOffset> CreateTime { get; set; }
		
		/// <summary>
		/// A detailed description.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// A possibly-hierarchical name used to refer to the spec from other specs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filename")]
		public string Filename { get; set; }
		
		/// <summary>
		/// Output only. A SHA-256 hash of the spec's contents. If the spec is gzipped, this is the hash of the uncompressed spec.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hash")]
		public string Hash { get; set; }
		
		/// <summary>
		/// Labels attach identifying metadata to resources. Identifying metadata can be used to filter list operations. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. No more than 64 user labels can be associated with one resource (System labels are excluded). See https://goo.gl/xmQnxf for more information and examples of labels. System reserved label keys are prefixed with "apigeeregistry.googleapis.com/" and cannot be changed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// A style (format) descriptor for this spec that is specified as a Media Type (https://en.wikipedia.org/wiki/Media_type). Possible values include "application/vnd.apigee.proto", "application/vnd.apigee.openapi", and "application/vnd.apigee.graphql", with possible suffixes representing compression types. These hypothetical names are defined in the vendor tree defined in RFC6838 (https://tools.ietf.org/html/rfc6838) and are not final. Content types can specify compression. Currently only GZip compression is supported (indicated with "+gzip").
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mimeType")]
		public string MimeType { get; set; }
		
		/// <summary>
		/// Resource name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Output only. Revision creation timestamp; when the represented revision was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="revisionCreateTime")]
		public System.Nullable<System.DateTimeOffset> RevisionCreateTime { get; set; }
		
		/// <summary>
		/// Output only. Immutable. The revision ID of the spec. A new revision is committed whenever the spec contents are changed. The format is an 8-character hexadecimal string.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="revisionId")]
		public string RevisionId { get; set; }
		
		/// <summary>
		/// Output only. Last update timestamp: when the represented revision was last modified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="revisionUpdateTime")]
		public System.Nullable<System.DateTimeOffset> RevisionUpdateTime { get; set; }
		
		/// <summary>
		/// Output only. The size of the spec file in bytes. If the spec is gzipped, this is the size of the uncompressed spec.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sizeBytes")]
		public System.Nullable<System.Int32> SizeBytes { get; set; }
		
		/// <summary>
		/// The original source URI of the spec (if one exists). This is an external location that can be used for reference purposes but which may not be authoritative since this external resource may change after the spec is retrieved.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceUri")]
		public string SourceUri { get; set; }
	}
	
	/// <summary>
	/// An ApiVersion describes a particular version of an API. ApiVersions are what consumers actually use.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApiVersion
	{
		
		/// <summary>
		/// Annotations attach non-identifying metadata to resources. Annotation keys and values are less restricted than those of labels, but should be generally used for small values of broad interest. Larger, topic- specific metadata should be stored in Artifacts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="annotations")]
		public System.Collections.Generic.Dictionary<string, string> Annotations { get; set; }
		
		/// <summary>
		/// Output only. Creation timestamp.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public System.Nullable<System.DateTimeOffset> CreateTime { get; set; }
		
		/// <summary>
		/// A detailed description.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Human-meaningful name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Labels attach identifying metadata to resources. Identifying metadata can be used to filter list operations. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. No more than 64 user labels can be associated with one resource (System labels are excluded). See https://goo.gl/xmQnxf for more information and examples of labels. System reserved label keys are prefixed with "apigeeregistry.googleapis.com/" and cannot be changed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// Resource name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// A user-definable description of the lifecycle phase of this API version. Format: free-form, but we expect single words that describe API maturity, e.g. "CONCEPT", "DESIGN", "DEVELOPMENT", "STAGING", "PRODUCTION", "DEPRECATED", "RETIRED".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		/// <summary>
		/// Output only. Last update timestamp.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public System.Nullable<System.DateTimeOffset> UpdateTime { get; set; }
	}
	
	/// <summary>
	/// Artifacts of resources. Artifacts are unique (single-value) per resource and are used to store metadata that is too large or numerous to be stored directly on the resource. Since artifacts are stored separately from parent resources, they should generally be used for metadata that is needed infrequently, i.e. not for display in primary views of the resource but perhaps displayed or downloaded upon request. The ListArtifacts method allows artifacts to be quickly enumerated and checked for presence without downloading their (potentially-large) contents.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Artifact
	{
		
		/// <summary>
		/// Input only. The contents of the artifact. Provided by API callers when artifacts are created or replaced. To access the contents of an artifact, use GetArtifactContents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contents")]
		public string Contents { get; set; }
		
		/// <summary>
		/// Output only. Creation timestamp.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public System.Nullable<System.DateTimeOffset> CreateTime { get; set; }
		
		/// <summary>
		/// Output only. A SHA-256 hash of the artifact's contents. If the artifact is gzipped, this is the hash of the uncompressed artifact.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hash")]
		public string Hash { get; set; }
		
		/// <summary>
		/// A content type specifier for the artifact. Content type specifiers are Media Types (https://en.wikipedia.org/wiki/Media_type) with a possible "schema" parameter that specifies a schema for the stored information. Content types can specify compression. Currently only GZip compression is supported (indicated with "+gzip").
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mimeType")]
		public string MimeType { get; set; }
		
		/// <summary>
		/// Resource name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Output only. The size of the artifact in bytes. If the artifact is gzipped, this is the size of the uncompressed artifact.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sizeBytes")]
		public System.Nullable<System.Int32> SizeBytes { get; set; }
		
		/// <summary>
		/// Output only. Last update timestamp.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public System.Nullable<System.DateTimeOffset> UpdateTime { get; set; }
	}
	
	/// <summary>
	/// Contains an arbitrary serialized message along with a @type that describes the type of the serialized message.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleProtobufAny
	{
		
		/// <summary>
		/// The type of the serialized message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@type")]
		public string _type { get; set; }
	}
	
	/// <summary>
	/// Response message for ListApiDeploymentRevisionsResponse.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListApiDeploymentRevisionsResponse
	{
		
		/// <summary>
		/// The revisions of the deployment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apiDeployments")]
		public ApiDeployment[] ApiDeployments { get; set; }
		
		/// <summary>
		/// A token that can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Response message for ListApiDeployments.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListApiDeploymentsResponse
	{
		
		/// <summary>
		/// The deployments from the specified publisher.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apiDeployments")]
		public ApiDeployment[] ApiDeployments { get; set; }
		
		/// <summary>
		/// A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Response message for ListApiSpecRevisionsResponse.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListApiSpecRevisionsResponse
	{
		
		/// <summary>
		/// The revisions of the spec.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apiSpecs")]
		public ApiSpec[] ApiSpecs { get; set; }
		
		/// <summary>
		/// A token that can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Response message for ListApiSpecs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListApiSpecsResponse
	{
		
		/// <summary>
		/// The specs from the specified publisher.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apiSpecs")]
		public ApiSpec[] ApiSpecs { get; set; }
		
		/// <summary>
		/// A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Response message for ListApiVersions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListApiVersionsResponse
	{
		
		/// <summary>
		/// The versions from the specified publisher.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apiVersions")]
		public ApiVersion[] ApiVersions { get; set; }
		
		/// <summary>
		/// A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Response message for ListApis.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListApisResponse
	{
		
		/// <summary>
		/// The APIs from the specified publisher.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apis")]
		public Api[] Apis { get; set; }
		
		/// <summary>
		/// A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Response message for ListArtifacts.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListArtifactsResponse
	{
		
		/// <summary>
		/// The artifacts from the specified publisher.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="artifacts")]
		public Artifact[] Artifacts { get; set; }
		
		/// <summary>
		/// A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Request message for RollbackApiDeployment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RollbackApiDeploymentRequest
	{
		
		/// <summary>
		/// Required. The deployment being rolled back.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required. The revision ID to roll back to. It must be a revision of the same deployment.   Example: c7cfa2a8
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="revisionId")]
		public string RevisionId { get; set; }
	}
	
	/// <summary>
	/// Request message for RollbackApiSpec.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RollbackApiSpecRequest
	{
		
		/// <summary>
		/// Required. The spec being rolled back.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required. The revision ID to roll back to. It must be a revision of the same spec.   Example: c7cfa2a8
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="revisionId")]
		public string RevisionId { get; set; }
	}
	
	/// <summary>
	/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Status
	{
		
		/// <summary>
		/// The status code, which should be an enum value of [google.rpc.Code][google.rpc.Code].
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		/// <summary>
		/// A list of messages that carry the error details.  There is a common set of message types for APIs to use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public GoogleProtobufAny[] Details { get; set; }
		
		/// <summary>
		/// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the [google.rpc.Status.details][google.rpc.Status.details] field, or localized by the client.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// Request message for TagApiDeploymentRevision.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TagApiDeploymentRevisionRequest
	{
		
		/// <summary>
		/// Required. The name of the deployment to be tagged, including the revision ID.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required. The tag to apply. The tag should be at most 40 characters, and match `[a-z][a-z0-9-]{3,39}`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tag")]
		public string Tag { get; set; }
	}
	
	/// <summary>
	/// Request message for TagApiSpecRevision.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TagApiSpecRevisionRequest
	{
		
		/// <summary>
		/// Required. The name of the spec to be tagged, including the revision ID.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required. The tag to apply. The tag should be at most 40 characters, and match `[a-z][a-z0-9-]{3,39}`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tag")]
		public string Tag { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// ListApis returns matching APIs.
		/// Registry_ListApis v1/projects/{project}/locations/{location}/apis
		/// </summary>
		/// <param name="project">The project id.</param>
		/// <param name="location">The location id.</param>
		/// <param name="pageSize">The maximum number of APIs to return. The service may return fewer than this value. If unspecified, at most 50 values will be returned. The maximum is 1000; values above 1000 will be coerced to 1000.</param>
		/// <param name="pageToken">A page token, received from a previous `ListApis` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListApis` must match the call that provided the page token.</param>
		/// <param name="filter">An expression that can be used to filter the list. Filters use the Common Expression Language and can refer to all message fields.</param>
		/// <returns>OK</returns>
		public async Task<ListApisResponse> Registry_ListApisAsync(string project, string location, int pageSize, string pageToken, string filter, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/locations/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/apis&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListApisResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// CreateApi creates a specified API.
		/// Registry_CreateApi v1/projects/{project}/locations/{location}/apis
		/// </summary>
		/// <param name="project">The project id.</param>
		/// <param name="location">The location id.</param>
		/// <param name="apiId">Required. The ID to use for the api, which will become the final component of the api's resource name. This value should be 4-63 characters, and valid characters are /[a-z][0-9]-/. Following AIP-162, IDs must not have the form of a UUID.</param>
		/// <returns>OK</returns>
		public async Task<Api> Registry_CreateApiAsync(string project, string location, string apiId, Api requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/locations/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/apis&apiId=" + (apiId==null? "" : System.Uri.EscapeDataString(apiId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Api>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// DeleteApi removes a specified API and all of the resources that it
		/// owns.
		/// Registry_DeleteApi v1/projects/{project}/locations/{location}/apis/{api}
		/// </summary>
		/// <param name="project">The project id.</param>
		/// <param name="location">The location id.</param>
		/// <param name="api">The api id.</param>
		/// <param name="force">If set to true, any child resources will also be deleted. (Otherwise, the request will only work if there are no child resources.)</param>
		/// <returns>OK</returns>
		public async Task Registry_DeleteApiAsync(string project, string location, string api, bool force, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/locations/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/apis/"+ (api==null? "" : System.Uri.EscapeDataString(api))+"&force="+force;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// GetApi returns a specified API.
		/// Registry_GetApi v1/projects/{project}/locations/{location}/apis/{api}
		/// </summary>
		/// <param name="project">The project id.</param>
		/// <param name="location">The location id.</param>
		/// <param name="api">The api id.</param>
		/// <returns>OK</returns>
		public async Task<Api> Registry_GetApiAsync(string project, string location, string api, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/locations/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/apis/"+ (api==null? "" : System.Uri.EscapeDataString(api));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Api>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// UpdateApi can be used to modify a specified API.
		/// Registry_UpdateApi v1/projects/{project}/locations/{location}/apis/{api}
		/// </summary>
		/// <param name="project">The project id.</param>
		/// <param name="location">The location id.</param>
		/// <param name="api">The api id.</param>
		/// <param name="updateMask">The list of fields to be updated. If omitted, all fields are updated that are set in the request message (fields set to default values are ignored). If a "*" is specified, all fields are updated, including fields that are unspecified/default in the request.</param>
		/// <param name="allowMissing">If set to true, and the api is not found, a new api_versions will be created. In this situation, `update_mask` is ignored.</param>
		/// <returns>OK</returns>
		public async Task<Api> Registry_UpdateApiAsync(string project, string location, string api, string updateMask, bool allowMissing, Api requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/locations/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/apis/"+ (api==null? "" : System.Uri.EscapeDataString(api))+"&updateMask=" + (updateMask==null? "" : System.Uri.EscapeDataString(updateMask))+"&allowMissing="+allowMissing;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Api>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ListApiDeployments returns matching deployments.
		/// Registry_ListApiDeployments v1/projects/{project}/locations/{location}/apis/{api}/deployments
		/// </summary>
		/// <param name="project">The project id.</param>
		/// <param name="location">The location id.</param>
		/// <param name="api">The api id.</param>
		/// <param name="pageSize">The maximum number of deployments to return. The service may return fewer than this value. If unspecified, at most 50 values will be returned. The maximum is 1000; values above 1000 will be coerced to 1000.</param>
		/// <param name="pageToken">A page token, received from a previous `ListApiDeployments` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListApiDeployments` must match the call that provided the page token.</param>
		/// <param name="filter">An expression that can be used to filter the list. Filters use the Common Expression Language and can refer to all message fields.</param>
		/// <returns>OK</returns>
		public async Task<ListApiDeploymentsResponse> Registry_ListApiDeploymentsAsync(string project, string location, string api, int pageSize, string pageToken, string filter, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/locations/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/apis/"+ (api==null? "" : System.Uri.EscapeDataString(api))+"/deployments&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListApiDeploymentsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// CreateApiDeployment creates a specified deployment.
		/// Registry_CreateApiDeployment v1/projects/{project}/locations/{location}/apis/{api}/deployments
		/// </summary>
		/// <param name="project">The project id.</param>
		/// <param name="location">The location id.</param>
		/// <param name="api">The api id.</param>
		/// <param name="apiDeploymentId">Required. The ID to use for the deployment, which will become the final component of the deployment's resource name. This value should be 4-63 characters, and valid characters are /[a-z][0-9]-/. Following AIP-162, IDs must not have the form of a UUID.</param>
		/// <returns>OK</returns>
		public async Task<ApiDeployment> Registry_CreateApiDeploymentAsync(string project, string location, string api, string apiDeploymentId, ApiDeployment requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/locations/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/apis/"+ (api==null? "" : System.Uri.EscapeDataString(api))+"/deployments&apiDeploymentId=" + (apiDeploymentId==null? "" : System.Uri.EscapeDataString(apiDeploymentId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ApiDeployment>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// DeleteApiDeployment removes a specified deployment, all revisions, and all
		/// child resources (e.g. artifacts).
		/// Registry_DeleteApiDeployment v1/projects/{project}/locations/{location}/apis/{api}/deployments/{deployment}
		/// </summary>
		/// <param name="project">The project id.</param>
		/// <param name="location">The location id.</param>
		/// <param name="api">The api id.</param>
		/// <param name="deployment">The deployment id.</param>
		/// <param name="force">If set to true, any child resources will also be deleted. (Otherwise, the request will only work if there are no child resources.)</param>
		/// <returns>OK</returns>
		public async Task Registry_DeleteApiDeploymentAsync(string project, string location, string api, string deployment, bool force, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/locations/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/apis/"+ (api==null? "" : System.Uri.EscapeDataString(api))+"/deployments/"+ (deployment==null? "" : System.Uri.EscapeDataString(deployment))+"&force="+force;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// GetApiDeployment returns a specified deployment.
		/// Registry_GetApiDeployment v1/projects/{project}/locations/{location}/apis/{api}/deployments/{deployment}
		/// </summary>
		/// <param name="project">The project id.</param>
		/// <param name="location">The location id.</param>
		/// <param name="api">The api id.</param>
		/// <param name="deployment">The deployment id.</param>
		/// <returns>OK</returns>
		public async Task<ApiDeployment> Registry_GetApiDeploymentAsync(string project, string location, string api, string deployment, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/locations/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/apis/"+ (api==null? "" : System.Uri.EscapeDataString(api))+"/deployments/"+ (deployment==null? "" : System.Uri.EscapeDataString(deployment));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ApiDeployment>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// UpdateApiDeployment can be used to modify a specified deployment.
		/// Registry_UpdateApiDeployment v1/projects/{project}/locations/{location}/apis/{api}/deployments/{deployment}
		/// </summary>
		/// <param name="project">The project id.</param>
		/// <param name="location">The location id.</param>
		/// <param name="api">The api id.</param>
		/// <param name="deployment">The deployment id.</param>
		/// <param name="updateMask">The list of fields to be updated. If omitted, all fields are updated that are set in the request message (fields set to default values are ignored). If a "*" is specified, all fields are updated, including fields that are unspecified/default in the request.</param>
		/// <param name="allowMissing">If set to true, and the deployment is not found, a new deployment will be created. In this situation, `update_mask` is ignored.</param>
		/// <returns>OK</returns>
		public async Task<ApiDeployment> Registry_UpdateApiDeploymentAsync(string project, string location, string api, string deployment, string updateMask, bool allowMissing, ApiDeployment requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/locations/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/apis/"+ (api==null? "" : System.Uri.EscapeDataString(api))+"/deployments/"+ (deployment==null? "" : System.Uri.EscapeDataString(deployment))+"&updateMask=" + (updateMask==null? "" : System.Uri.EscapeDataString(updateMask))+"&allowMissing="+allowMissing;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ApiDeployment>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// DeleteApiDeploymentRevision deletes a revision of a deployment.
		/// Registry_DeleteApiDeploymentRevision v1/projects/{project}/locations/{location}/apis/{api}/deployments/{deployment}:deleteRevision
		/// </summary>
		/// <param name="project">The project id.</param>
		/// <param name="location">The location id.</param>
		/// <param name="api">The api id.</param>
		/// <param name="deployment">The deployment id.</param>
		/// <returns>OK</returns>
		public async Task<ApiDeployment> Registry_DeleteApiDeploymentRevisionAsync(string project, string location, string api, string deployment, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/locations/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/apis/"+ (api==null? "" : System.Uri.EscapeDataString(api))+"/deployments/"+ (deployment==null? "" : System.Uri.EscapeDataString(deployment))+":deleteRevision";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ApiDeployment>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ListApiDeploymentRevisions lists all revisions of a deployment.
		/// Revisions are returned in descending order of revision creation time.
		/// Registry_ListApiDeploymentRevisions v1/projects/{project}/locations/{location}/apis/{api}/deployments/{deployment}:listRevisions
		/// </summary>
		/// <param name="project">The project id.</param>
		/// <param name="location">The location id.</param>
		/// <param name="api">The api id.</param>
		/// <param name="deployment">The deployment id.</param>
		/// <param name="pageSize">The maximum number of revisions to return per page.</param>
		/// <param name="pageToken">The page token, received from a previous ListApiDeploymentRevisions call. Provide this to retrieve the subsequent page.</param>
		/// <returns>OK</returns>
		public async Task<ListApiDeploymentRevisionsResponse> Registry_ListApiDeploymentRevisionsAsync(string project, string location, string api, string deployment, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/locations/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/apis/"+ (api==null? "" : System.Uri.EscapeDataString(api))+"/deployments/"+ (deployment==null? "" : System.Uri.EscapeDataString(deployment))+":listRevisions&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListApiDeploymentRevisionsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// RollbackApiDeployment sets the current revision to a specified prior
		/// revision. Note that this creates a new revision with a new revision ID.
		/// Registry_RollbackApiDeployment v1/projects/{project}/locations/{location}/apis/{api}/deployments/{deployment}:rollback
		/// </summary>
		/// <param name="project">The project id.</param>
		/// <param name="location">The location id.</param>
		/// <param name="api">The api id.</param>
		/// <param name="deployment">The deployment id.</param>
		/// <returns>OK</returns>
		public async Task<ApiDeployment> Registry_RollbackApiDeploymentAsync(string project, string location, string api, string deployment, RollbackApiDeploymentRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/locations/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/apis/"+ (api==null? "" : System.Uri.EscapeDataString(api))+"/deployments/"+ (deployment==null? "" : System.Uri.EscapeDataString(deployment))+":rollback";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ApiDeployment>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// TagApiDeploymentRevision adds a tag to a specified revision of a
		/// deployment.
		/// Registry_TagApiDeploymentRevision v1/projects/{project}/locations/{location}/apis/{api}/deployments/{deployment}:tagRevision
		/// </summary>
		/// <param name="project">The project id.</param>
		/// <param name="location">The location id.</param>
		/// <param name="api">The api id.</param>
		/// <param name="deployment">The deployment id.</param>
		/// <returns>OK</returns>
		public async Task<ApiDeployment> Registry_TagApiDeploymentRevisionAsync(string project, string location, string api, string deployment, TagApiDeploymentRevisionRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/locations/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/apis/"+ (api==null? "" : System.Uri.EscapeDataString(api))+"/deployments/"+ (deployment==null? "" : System.Uri.EscapeDataString(deployment))+":tagRevision";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ApiDeployment>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ListApiVersions returns matching versions.
		/// Registry_ListApiVersions v1/projects/{project}/locations/{location}/apis/{api}/versions
		/// </summary>
		/// <param name="project">The project id.</param>
		/// <param name="location">The location id.</param>
		/// <param name="api">The api id.</param>
		/// <param name="pageSize">The maximum number of versions to return. The service may return fewer than this value. If unspecified, at most 50 values will be returned. The maximum is 1000; values above 1000 will be coerced to 1000.</param>
		/// <param name="pageToken">A page token, received from a previous `ListApiVersions` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListApiVersions` must match the call that provided the page token.</param>
		/// <param name="filter">An expression that can be used to filter the list. Filters use the Common Expression Language and can refer to all message fields.</param>
		/// <returns>OK</returns>
		public async Task<ListApiVersionsResponse> Registry_ListApiVersionsAsync(string project, string location, string api, int pageSize, string pageToken, string filter, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/locations/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/apis/"+ (api==null? "" : System.Uri.EscapeDataString(api))+"/versions&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListApiVersionsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// CreateApiVersion creates a specified version.
		/// Registry_CreateApiVersion v1/projects/{project}/locations/{location}/apis/{api}/versions
		/// </summary>
		/// <param name="project">The project id.</param>
		/// <param name="location">The location id.</param>
		/// <param name="api">The api id.</param>
		/// <param name="apiVersionId">Required. The ID to use for the version, which will become the final component of the version's resource name. This value should be 4-63 characters, and valid characters are /[a-z][0-9]-/. Following AIP-162, IDs must not have the form of a UUID.</param>
		/// <returns>OK</returns>
		public async Task<ApiVersion> Registry_CreateApiVersionAsync(string project, string location, string api, string apiVersionId, ApiVersion requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/locations/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/apis/"+ (api==null? "" : System.Uri.EscapeDataString(api))+"/versions&apiVersionId=" + (apiVersionId==null? "" : System.Uri.EscapeDataString(apiVersionId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ApiVersion>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// DeleteApiVersion removes a specified version and all of the resources that
		/// it owns.
		/// Registry_DeleteApiVersion v1/projects/{project}/locations/{location}/apis/{api}/versions/{version}
		/// </summary>
		/// <param name="project">The project id.</param>
		/// <param name="location">The location id.</param>
		/// <param name="api">The api id.</param>
		/// <param name="version">The version id.</param>
		/// <param name="force">If set to true, any child resources will also be deleted. (Otherwise, the request will only work if there are no child resources.)</param>
		/// <returns>OK</returns>
		public async Task Registry_DeleteApiVersionAsync(string project, string location, string api, string version, bool force, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/locations/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/apis/"+ (api==null? "" : System.Uri.EscapeDataString(api))+"/versions/"+ (version==null? "" : System.Uri.EscapeDataString(version))+"&force="+force;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// GetApiVersion returns a specified version.
		/// Registry_GetApiVersion v1/projects/{project}/locations/{location}/apis/{api}/versions/{version}
		/// </summary>
		/// <param name="project">The project id.</param>
		/// <param name="location">The location id.</param>
		/// <param name="api">The api id.</param>
		/// <param name="version">The version id.</param>
		/// <returns>OK</returns>
		public async Task<ApiVersion> Registry_GetApiVersionAsync(string project, string location, string api, string version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/locations/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/apis/"+ (api==null? "" : System.Uri.EscapeDataString(api))+"/versions/"+ (version==null? "" : System.Uri.EscapeDataString(version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ApiVersion>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// UpdateApiVersion can be used to modify a specified version.
		/// Registry_UpdateApiVersion v1/projects/{project}/locations/{location}/apis/{api}/versions/{version}
		/// </summary>
		/// <param name="project">The project id.</param>
		/// <param name="location">The location id.</param>
		/// <param name="api">The api id.</param>
		/// <param name="version">The version id.</param>
		/// <param name="updateMask">The list of fields to be updated. If omitted, all fields are updated that are set in the request message (fields set to default values are ignored). If a "*" is specified, all fields are updated, including fields that are unspecified/default in the request.</param>
		/// <param name="allowMissing">If set to true, and the version is not found, a new version will be created. In this situation, `update_mask` is ignored.</param>
		/// <returns>OK</returns>
		public async Task<ApiVersion> Registry_UpdateApiVersionAsync(string project, string location, string api, string version, string updateMask, bool allowMissing, ApiVersion requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/locations/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/apis/"+ (api==null? "" : System.Uri.EscapeDataString(api))+"/versions/"+ (version==null? "" : System.Uri.EscapeDataString(version))+"&updateMask=" + (updateMask==null? "" : System.Uri.EscapeDataString(updateMask))+"&allowMissing="+allowMissing;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ApiVersion>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ListApiSpecs returns matching specs.
		/// Registry_ListApiSpecs v1/projects/{project}/locations/{location}/apis/{api}/versions/{version}/specs
		/// </summary>
		/// <param name="project">The project id.</param>
		/// <param name="location">The location id.</param>
		/// <param name="api">The api id.</param>
		/// <param name="version">The version id.</param>
		/// <param name="pageSize">The maximum number of specs to return. The service may return fewer than this value. If unspecified, at most 50 values will be returned. The maximum is 1000; values above 1000 will be coerced to 1000.</param>
		/// <param name="pageToken">A page token, received from a previous `ListApiSpecs` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListApiSpecs` must match the call that provided the page token.</param>
		/// <param name="filter">An expression that can be used to filter the list. Filters use the Common Expression Language and can refer to all message fields except contents.</param>
		/// <returns>OK</returns>
		public async Task<ListApiSpecsResponse> Registry_ListApiSpecsAsync(string project, string location, string api, string version, int pageSize, string pageToken, string filter, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/locations/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/apis/"+ (api==null? "" : System.Uri.EscapeDataString(api))+"/versions/"+ (version==null? "" : System.Uri.EscapeDataString(version))+"/specs&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListApiSpecsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// CreateApiSpec creates a specified spec.
		/// Registry_CreateApiSpec v1/projects/{project}/locations/{location}/apis/{api}/versions/{version}/specs
		/// </summary>
		/// <param name="project">The project id.</param>
		/// <param name="location">The location id.</param>
		/// <param name="api">The api id.</param>
		/// <param name="version">The version id.</param>
		/// <param name="apiSpecId">Required. The ID to use for the spec, which will become the final component of the spec's resource name. This value should be 4-63 characters, and valid characters are /[a-z][0-9]-/. Following AIP-162, IDs must not have the form of a UUID.</param>
		/// <returns>OK</returns>
		public async Task<ApiSpec> Registry_CreateApiSpecAsync(string project, string location, string api, string version, string apiSpecId, ApiSpec requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/locations/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/apis/"+ (api==null? "" : System.Uri.EscapeDataString(api))+"/versions/"+ (version==null? "" : System.Uri.EscapeDataString(version))+"/specs&apiSpecId=" + (apiSpecId==null? "" : System.Uri.EscapeDataString(apiSpecId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ApiSpec>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// DeleteApiSpec removes a specified spec, all revisions, and all child
		/// resources (e.g. artifacts).
		/// Registry_DeleteApiSpec v1/projects/{project}/locations/{location}/apis/{api}/versions/{version}/specs/{spec}
		/// </summary>
		/// <param name="project">The project id.</param>
		/// <param name="location">The location id.</param>
		/// <param name="api">The api id.</param>
		/// <param name="version">The version id.</param>
		/// <param name="spec">The spec id.</param>
		/// <param name="force">If set to true, any child resources will also be deleted. (Otherwise, the request will only work if there are no child resources.)</param>
		/// <returns>OK</returns>
		public async Task Registry_DeleteApiSpecAsync(string project, string location, string api, string version, string spec, bool force, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/locations/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/apis/"+ (api==null? "" : System.Uri.EscapeDataString(api))+"/versions/"+ (version==null? "" : System.Uri.EscapeDataString(version))+"/specs/"+ (spec==null? "" : System.Uri.EscapeDataString(spec))+"&force="+force;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// GetApiSpec returns a specified spec.
		/// Registry_GetApiSpec v1/projects/{project}/locations/{location}/apis/{api}/versions/{version}/specs/{spec}
		/// </summary>
		/// <param name="project">The project id.</param>
		/// <param name="location">The location id.</param>
		/// <param name="api">The api id.</param>
		/// <param name="version">The version id.</param>
		/// <param name="spec">The spec id.</param>
		/// <returns>OK</returns>
		public async Task<ApiSpec> Registry_GetApiSpecAsync(string project, string location, string api, string version, string spec, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/locations/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/apis/"+ (api==null? "" : System.Uri.EscapeDataString(api))+"/versions/"+ (version==null? "" : System.Uri.EscapeDataString(version))+"/specs/"+ (spec==null? "" : System.Uri.EscapeDataString(spec));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ApiSpec>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// UpdateApiSpec can be used to modify a specified spec.
		/// Registry_UpdateApiSpec v1/projects/{project}/locations/{location}/apis/{api}/versions/{version}/specs/{spec}
		/// </summary>
		/// <param name="project">The project id.</param>
		/// <param name="location">The location id.</param>
		/// <param name="api">The api id.</param>
		/// <param name="version">The version id.</param>
		/// <param name="spec">The spec id.</param>
		/// <param name="updateMask">The list of fields to be updated. If omitted, all fields are updated that are set in the request message (fields set to default values are ignored). If a "*" is specified, all fields are updated, including fields that are unspecified/default in the request.</param>
		/// <param name="allowMissing">If set to true, and the spec is not found, a new spec will be created. In this situation, `update_mask` is ignored.</param>
		/// <returns>OK</returns>
		public async Task<ApiSpec> Registry_UpdateApiSpecAsync(string project, string location, string api, string version, string spec, string updateMask, bool allowMissing, ApiSpec requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/locations/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/apis/"+ (api==null? "" : System.Uri.EscapeDataString(api))+"/versions/"+ (version==null? "" : System.Uri.EscapeDataString(version))+"/specs/"+ (spec==null? "" : System.Uri.EscapeDataString(spec))+"&updateMask=" + (updateMask==null? "" : System.Uri.EscapeDataString(updateMask))+"&allowMissing="+allowMissing;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ApiSpec>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// DeleteApiSpecRevision deletes a revision of a spec.
		/// Registry_DeleteApiSpecRevision v1/projects/{project}/locations/{location}/apis/{api}/versions/{version}/specs/{spec}:deleteRevision
		/// </summary>
		/// <param name="project">The project id.</param>
		/// <param name="location">The location id.</param>
		/// <param name="api">The api id.</param>
		/// <param name="version">The version id.</param>
		/// <param name="spec">The spec id.</param>
		/// <returns>OK</returns>
		public async Task<ApiSpec> Registry_DeleteApiSpecRevisionAsync(string project, string location, string api, string version, string spec, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/locations/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/apis/"+ (api==null? "" : System.Uri.EscapeDataString(api))+"/versions/"+ (version==null? "" : System.Uri.EscapeDataString(version))+"/specs/"+ (spec==null? "" : System.Uri.EscapeDataString(spec))+":deleteRevision";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ApiSpec>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// GetApiSpecContents returns the contents of a specified spec.
		/// If specs are stored with GZip compression, the default behavior
		/// is to return the spec uncompressed (the mime_type response field
		/// indicates the exact format returned).
		/// Registry_GetApiSpecContents v1/projects/{project}/locations/{location}/apis/{api}/versions/{version}/specs/{spec}:getContents
		/// </summary>
		/// <param name="project">The project id.</param>
		/// <param name="location">The location id.</param>
		/// <param name="api">The api id.</param>
		/// <param name="version">The version id.</param>
		/// <param name="spec">The spec id.</param>
		/// <returns>OK</returns>
		public async Task Registry_GetApiSpecContentsAsync(string project, string location, string api, string version, string spec, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/locations/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/apis/"+ (api==null? "" : System.Uri.EscapeDataString(api))+"/versions/"+ (version==null? "" : System.Uri.EscapeDataString(version))+"/specs/"+ (spec==null? "" : System.Uri.EscapeDataString(spec))+":getContents";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ListApiSpecRevisions lists all revisions of a spec.
		/// Revisions are returned in descending order of revision creation time.
		/// Registry_ListApiSpecRevisions v1/projects/{project}/locations/{location}/apis/{api}/versions/{version}/specs/{spec}:listRevisions
		/// </summary>
		/// <param name="project">The project id.</param>
		/// <param name="location">The location id.</param>
		/// <param name="api">The api id.</param>
		/// <param name="version">The version id.</param>
		/// <param name="spec">The spec id.</param>
		/// <param name="pageSize">The maximum number of revisions to return per page.</param>
		/// <param name="pageToken">The page token, received from a previous ListApiSpecRevisions call. Provide this to retrieve the subsequent page.</param>
		/// <returns>OK</returns>
		public async Task<ListApiSpecRevisionsResponse> Registry_ListApiSpecRevisionsAsync(string project, string location, string api, string version, string spec, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/locations/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/apis/"+ (api==null? "" : System.Uri.EscapeDataString(api))+"/versions/"+ (version==null? "" : System.Uri.EscapeDataString(version))+"/specs/"+ (spec==null? "" : System.Uri.EscapeDataString(spec))+":listRevisions&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListApiSpecRevisionsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// RollbackApiSpec sets the current revision to a specified prior revision.
		/// Note that this creates a new revision with a new revision ID.
		/// Registry_RollbackApiSpec v1/projects/{project}/locations/{location}/apis/{api}/versions/{version}/specs/{spec}:rollback
		/// </summary>
		/// <param name="project">The project id.</param>
		/// <param name="location">The location id.</param>
		/// <param name="api">The api id.</param>
		/// <param name="version">The version id.</param>
		/// <param name="spec">The spec id.</param>
		/// <returns>OK</returns>
		public async Task<ApiSpec> Registry_RollbackApiSpecAsync(string project, string location, string api, string version, string spec, RollbackApiSpecRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/locations/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/apis/"+ (api==null? "" : System.Uri.EscapeDataString(api))+"/versions/"+ (version==null? "" : System.Uri.EscapeDataString(version))+"/specs/"+ (spec==null? "" : System.Uri.EscapeDataString(spec))+":rollback";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ApiSpec>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// TagApiSpecRevision adds a tag to a specified revision of a spec.
		/// Registry_TagApiSpecRevision v1/projects/{project}/locations/{location}/apis/{api}/versions/{version}/specs/{spec}:tagRevision
		/// </summary>
		/// <param name="project">The project id.</param>
		/// <param name="location">The location id.</param>
		/// <param name="api">The api id.</param>
		/// <param name="version">The version id.</param>
		/// <param name="spec">The spec id.</param>
		/// <returns>OK</returns>
		public async Task<ApiSpec> Registry_TagApiSpecRevisionAsync(string project, string location, string api, string version, string spec, TagApiSpecRevisionRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/locations/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/apis/"+ (api==null? "" : System.Uri.EscapeDataString(api))+"/versions/"+ (version==null? "" : System.Uri.EscapeDataString(version))+"/specs/"+ (spec==null? "" : System.Uri.EscapeDataString(spec))+":tagRevision";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ApiSpec>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ListArtifacts returns matching artifacts.
		/// Registry_ListArtifacts v1/projects/{project}/locations/{location}/artifacts
		/// </summary>
		/// <param name="project">The project id.</param>
		/// <param name="location">The location id.</param>
		/// <param name="pageSize">The maximum number of artifacts to return. The service may return fewer than this value. If unspecified, at most 50 values will be returned. The maximum is 1000; values above 1000 will be coerced to 1000.</param>
		/// <param name="pageToken">A page token, received from a previous `ListArtifacts` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListArtifacts` must match the call that provided the page token.</param>
		/// <param name="filter">An expression that can be used to filter the list. Filters use the Common Expression Language and can refer to all message fields except contents.</param>
		/// <returns>OK</returns>
		public async Task<ListArtifactsResponse> Registry_ListArtifactsAsync(string project, string location, int pageSize, string pageToken, string filter, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/locations/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/artifacts&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListArtifactsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// CreateArtifact creates a specified artifact.
		/// Registry_CreateArtifact v1/projects/{project}/locations/{location}/artifacts
		/// </summary>
		/// <param name="project">The project id.</param>
		/// <param name="location">The location id.</param>
		/// <param name="artifactId">Required. The ID to use for the artifact, which will become the final component of the artifact's resource name. This value should be 4-63 characters, and valid characters are /[a-z][0-9]-/. Following AIP-162, IDs must not have the form of a UUID.</param>
		/// <returns>OK</returns>
		public async Task<Artifact> Registry_CreateArtifactAsync(string project, string location, string artifactId, Artifact requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/locations/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/artifacts&artifactId=" + (artifactId==null? "" : System.Uri.EscapeDataString(artifactId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Artifact>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// DeleteArtifact removes a specified artifact.
		/// Registry_DeleteArtifact v1/projects/{project}/locations/{location}/artifacts/{artifact}
		/// </summary>
		/// <param name="project">The project id.</param>
		/// <param name="location">The location id.</param>
		/// <param name="artifact">The artifact id.</param>
		/// <returns>OK</returns>
		public async Task Registry_DeleteArtifactAsync(string project, string location, string artifact, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/locations/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/artifacts/"+ (artifact==null? "" : System.Uri.EscapeDataString(artifact));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// GetArtifact returns a specified artifact.
		/// Registry_GetArtifact v1/projects/{project}/locations/{location}/artifacts/{artifact}
		/// </summary>
		/// <param name="project">The project id.</param>
		/// <param name="location">The location id.</param>
		/// <param name="artifact">The artifact id.</param>
		/// <returns>OK</returns>
		public async Task<Artifact> Registry_GetArtifactAsync(string project, string location, string artifact, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/locations/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/artifacts/"+ (artifact==null? "" : System.Uri.EscapeDataString(artifact));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Artifact>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ReplaceArtifact can be used to replace a specified artifact.
		/// Registry_ReplaceArtifact v1/projects/{project}/locations/{location}/artifacts/{artifact}
		/// </summary>
		/// <param name="project">The project id.</param>
		/// <param name="location">The location id.</param>
		/// <param name="artifact">The artifact id.</param>
		/// <returns>OK</returns>
		public async Task<Artifact> Registry_ReplaceArtifactAsync(string project, string location, string artifact, Artifact requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/locations/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/artifacts/"+ (artifact==null? "" : System.Uri.EscapeDataString(artifact));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Artifact>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// GetArtifactContents returns the contents of a specified artifact.
		/// If artifacts are stored with GZip compression, the default behavior
		/// is to return the artifact uncompressed (the mime_type response field
		/// indicates the exact format returned).
		/// Registry_GetArtifactContents v1/projects/{project}/locations/{location}/artifacts/{artifact}:getContents
		/// </summary>
		/// <param name="project">The project id.</param>
		/// <param name="location">The location id.</param>
		/// <param name="artifact">The artifact id.</param>
		/// <returns>OK</returns>
		public async Task Registry_GetArtifactContentsAsync(string project, string location, string artifact, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/locations/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/artifacts/"+ (artifact==null? "" : System.Uri.EscapeDataString(artifact))+":getContents";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
