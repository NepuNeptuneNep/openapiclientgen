//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Activity_3_1
	{
		
		/// <summary>
		/// The category that this event occurred for. This will be preset for only "category" activity types.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="category")]
		public Category Category { get; set; }
		
		/// <summary>
		/// The channel that this event occurred for. This will be present for only "channel" activity types.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channel")]
		public Channel Channel { get; set; }
		
		/// <summary>
		/// Video associated with ths activity.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clip")]
		public Video Clip { get; set; }
		
		/// <summary>
		/// The group that this event occurred for. This will be present for only "group" activity types.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="group")]
		public Group Group { get; set; }
		
		/// <summary>
		/// The activity's metadata.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public Activity_3_1Metadata Metadata { get; set; }
		
		/// <summary>
		/// The tag that this event occurred for. This will be present for only "tag" activity types.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tag")]
		public Tag Tag { get; set; }
		
		/// <summary>
		/// Time that the event occurred.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="time")]
		public string Time { get; set; }
		
		/// <summary>
		/// Activity type
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public Activity_3_1Type Type { get; set; }
		
		/// <summary>
		/// The user that this event occurred for. This will be present for "like", "appearance", and "share" activity types.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="user")]
		public User User { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Category
	{
		
		/// <summary>
		/// The active icon for the category.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="icon")]
		public Picture Icon { get; set; }
		
		/// <summary>
		/// The last time, in ISO 8601 format, that a video was featured.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="last_video_featured_time")]
		public string Last_video_featured_time { get; set; }
		
		/// <summary>
		/// The URL to access the category in a browser.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="link")]
		public string Link { get; set; }
		
		/// <summary>
		/// Metadata about the category.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public CategoryMetadata Metadata { get; set; }
		
		/// <summary>
		/// The display name that identifies the category.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The container of this category's parent category, if the current category is a subcategory.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="parent")]
		public CategoryParent Parent { get; set; }
		
		/// <summary>
		/// The active picture for this category; defaults to vertical color bars.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pictures")]
		public Picture Pictures { get; set; }
		
		/// <summary>
		/// The resource key of the category.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resource_key")]
		public string Resource_key { get; set; }
		
		/// <summary>
		/// All the subcategories that belong to this category, if the current category is a top-level parent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subcategories")]
		public CategorySubcategories[] CategorySubcategories { get; set; }
		
		/// <summary>
		/// Whether the category isn't a subcategory of another category.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="top_level")]
		public bool Top_level { get; set; }
		
		/// <summary>
		/// The unique identifier to access the category resource.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Picture
	{
		
		/// <summary>
		/// Whether this picture is the active picture for its parent resource.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="active")]
		public bool Active { get; set; }
		
		/// <summary>
		/// The upload URL for the picture. This field appears when you create the picture resource for the first time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="link")]
		public string Link { get; set; }
		
		/// <summary>
		/// The picture's resource key string.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resource_key")]
		public string Resource_key { get; set; }
		
		/// <summary>
		/// An array containing reference information about all available image files.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sizes")]
		public PictureSizes[] PictureSizes { get; set; }
		
		/// <summary>
		/// The type of the picture:
		///
		///Option descriptions:
		/// * `caution` - An image that is appropriate for all ages.
		/// * `custom` - A custom image for the video.
		/// * `default` - The default image for the video.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public PictureType Type { get; set; }
		
		/// <summary>
		/// The picture's URI.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	public class PictureSizes
	{
		
		/// <summary>
		/// The height of the image.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="height")]
		public System.Nullable<System.Double> Height { get; set; }
		
		/// <summary>
		/// The direct link to the image.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="link")]
		public string Link { get; set; }
		
		/// <summary>
		/// The direct link to the image with a play button overlay.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="link_with_play_button")]
		public string Link_with_play_button { get; set; }
		
		/// <summary>
		/// The width of the image.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="width")]
		public double Width { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum PictureType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		caution = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		custom = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="default")]
		_default = 2,
	}
	
	public class CategoryMetadata
	{
		
		/// <summary>
		/// A collection of information that is connected to this resource.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="connections")]
		public CategoryMetadataConnections Connections { get; set; }
		
		/// <summary>
		/// The permissible actions related to the category.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="interactions")]
		public CategoryMetadataInteractions Interactions { get; set; }
	}
	
	public class CategoryMetadataConnections
	{
		
		/// <summary>
		/// Information about the channels related to this category.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="channels")]
		public CategoryMetadataConnectionsChannels Channels { get; set; }
		
		/// <summary>
		/// Information about the groups related to this category.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="groups")]
		public CategoryMetadataConnectionsGroups Groups { get; set; }
		
		/// <summary>
		/// Information about the users related to this category.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="users")]
		public CategoryMetadataConnectionsUsers Users { get; set; }
		
		/// <summary>
		/// Information about the videos related to this category.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="videos")]
		public CategoryMetadataConnectionsVideos Videos { get; set; }
	}
	
	public class CategoryMetadataConnectionsChannels
	{
		
		/// <summary>
		/// An array of HTTP methods permitted on this URI.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="options")]
		public string[] Options { get; set; }
		
		/// <summary>
		/// The total number of channels on this connection.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="total")]
		public double Total { get; set; }
		
		/// <summary>
		/// The API URI that resolves to the connection data.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	public class CategoryMetadataConnectionsGroups
	{
		
		/// <summary>
		/// An array of HTTP methods permitted on this URI.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="options")]
		public string[] Options { get; set; }
		
		/// <summary>
		/// The total number of groups on this connection.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="total")]
		public double Total { get; set; }
		
		/// <summary>
		/// The API URI that resolves to the connection data.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	public class CategoryMetadataConnectionsUsers
	{
		
		/// <summary>
		/// An array of HTTP methods permitted on this URI.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="options")]
		public string[] Options { get; set; }
		
		/// <summary>
		/// The total number of users on this connection.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="total")]
		public double Total { get; set; }
		
		/// <summary>
		/// The API URI that resolves to the connection data.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	public class CategoryMetadataConnectionsVideos
	{
		
		/// <summary>
		/// An array of HTTP methods permitted on this URI.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="options")]
		public string[] Options { get; set; }
		
		/// <summary>
		/// The total number of videos on this connection.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="total")]
		public double Total { get; set; }
		
		/// <summary>
		/// The API URI that resolves to the connection data.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	public class CategoryMetadataInteractions
	{
		
		/// <summary>
		/// An action indicating if the authenticated user has followed this category.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="follow")]
		public CategoryMetadataInteractionsFollow Follow { get; set; }
	}
	
	public class CategoryMetadataInteractionsFollow
	{
		
		/// <summary>
		/// Whether the authenticated user has followed this category.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="added")]
		public bool Added { get; set; }
		
		/// <summary>
		/// The time in ISO 8601 format that the user followed this category, or the null value if the user hasn't followed this category.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="added_time")]
		public string Added_time { get; set; }
		
		/// <summary>
		/// The URI for following or unfollowing this category: PUT to this URI to follow the category, or DELETE to this URI to unfollow the category.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	public class CategoryParent
	{
		
		/// <summary>
		/// The URL to access the parent category in a browser.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="link")]
		public string Link { get; set; }
		
		/// <summary>
		/// The display name that identifies the parent category.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The unique identifier to access the parent of this category resource.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	public class CategorySubcategories
	{
		
		/// <summary>
		/// The URL to access the subcategory in a browser.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="link")]
		public string Link { get; set; }
		
		/// <summary>
		/// The display name that identifies the subcategory.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The unique identifier to access the subcategory resource.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Channel
	{
		
		/// <summary>
		/// The categories to which this channel belongs as specified by the channel moderators.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="categories")]
		public Category[] Categories { get; set; }
		
		/// <summary>
		/// The time in ISO 8601 format when the channel was created.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="created_time")]
		public string Created_time { get; set; }
		
		/// <summary>
		/// A brief explanation of the channel's content.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The banner that appears by default at the top of the channel page.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="header")]
		public Picture Header { get; set; }
		
		/// <summary>
		/// The URL to access the channel in a browser.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="link")]
		public string Link { get; set; }
		
		/// <summary>
		/// Metadata about the channel.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public ChannelMetadata Metadata { get; set; }
		
		/// <summary>
		/// The time in ISO 8601 format when the album was last modified.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="modified_time")]
		public string Modified_time { get; set; }
		
		/// <summary>
		/// The display name that identifies the channel.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The active image for the channel; defaults to the thumbnail of the last video added to the channel.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pictures")]
		public Picture Pictures { get; set; }
		
		/// <summary>
		/// The privacy settings of the channel.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="privacy")]
		public ChannelPrivacy Privacy { get; set; }
		
		/// <summary>
		/// The channel resource key.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resource_key")]
		public string Resource_key { get; set; }
		
		/// <summary>
		/// An array of all tags assigned to this channel.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
		
		/// <summary>
		/// The unique identifier to access the channel resource.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
		
		/// <summary>
		/// The Vimeo user who owns the channel.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="user")]
		public User User { get; set; }
	}
	
	public class ChannelMetadata
	{
		
		/// <summary>
		/// A collection of information that is connected to this resource.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="connections")]
		public ChannelMetadataConnections Connections { get; set; }
		
		/// <summary>
		/// A list of resource URIs related to the channel.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="interactions")]
		public ChannelMetadataInteractions Interactions { get; set; }
	}
	
	public class ChannelMetadataConnections
	{
		
		/// <summary>
		/// Information provided to channel moderators about which users they have specifically permitted to access a private channel. This data requires a bearer token with the `private` scope.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="privacy_users")]
		public ChannelMetadataConnectionsPrivacy_users Privacy_users { get; set; }
		
		/// <summary>
		/// Information about the users following or moderating this channel.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="users")]
		public ChannelMetadataConnectionsUsers Users { get; set; }
		
		/// <summary>
		/// Information about the videos that belong to this channel.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="videos")]
		public ChannelMetadataConnectionsVideos Videos { get; set; }
	}
	
	public class ChannelMetadataConnectionsPrivacy_users
	{
		
		/// <summary>
		/// An array of HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="options")]
		public string[] Options { get; set; }
		
		/// <summary>
		/// The total number of users on this connection. This data requires a bearer token with the `private` scope.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="total")]
		public double Total { get; set; }
		
		/// <summary>
		/// The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	public class ChannelMetadataConnectionsUsers
	{
		
		/// <summary>
		/// An array of HTTP methods permitted on this URI.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="options")]
		public string[] Options { get; set; }
		
		/// <summary>
		/// The total number of users on this connection.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="total")]
		public double Total { get; set; }
		
		/// <summary>
		/// The API URI that resolves to the connection data.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	public class ChannelMetadataConnectionsVideos
	{
		
		/// <summary>
		/// An array of HTTP methods permitted on this URI.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="options")]
		public string[] Options { get; set; }
		
		/// <summary>
		/// The total number of videos on this connection.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="total")]
		public double Total { get; set; }
		
		/// <summary>
		/// The API URI that resolves to the connection data.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	public class ChannelMetadataInteractions
	{
		
		/// <summary>
		/// An action indicating that the authenticated user is the owner of the channel and may therefore add other users as channel moderators. This data requires a bearer token with the `private` scope.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="add_moderators")]
		public ChannelMetadataInteractionsAdd_moderators Add_moderators { get; set; }
		
		/// <summary>
		/// When a channel appears in the context of adding or removing a video from it (`/videos/{video_id}/available_channels`), include information about adding or removing the video. This data requires a bearer token with the `private` scope.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="add_to")]
		public ChannelMetadataInteractionsAdd_to Add_to { get; set; }
		
		/// <summary>
		/// An action indicating if the authenticated user has followed this channel. This data requires a bearer token with the `private` scope.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="follow")]
		public ChannelMetadataInteractionsFollow Follow { get; set; }
		
		/// <summary>
		/// An action indicating that the authenticated user is a moderator of the channel and may therefore add or remove videos from the channel. This data requires a bearer token with the `private` scope.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="moderate_videos")]
		public ChannelMetadataInteractionsModerate_videos Moderate_videos { get; set; }
	}
	
	public class ChannelMetadataInteractionsAdd_moderators
	{
		
		/// <summary>
		/// An array of HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="options")]
		public string[] Options { get; set; }
		
		/// <summary>
		/// The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	public class ChannelMetadataInteractionsAdd_to
	{
		
		/// <summary>
		/// An array of HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="options")]
		public string[] Options { get; set; }
		
		/// <summary>
		/// The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	public class ChannelMetadataInteractionsFollow
	{
		
		/// <summary>
		/// Whether the authenticated user has followed this channel. This data requires a bearer token with the `private` scope.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="added")]
		public bool Added { get; set; }
		
		/// <summary>
		/// The time in ISO 8601 format that the user followed this channel, or the null value if the user hasn't followed the channel. This data requires a bearer token with the `private` scope.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="added_time")]
		public string Added_time { get; set; }
		
		/// <summary>
		/// Whether the authenticated user is a moderator or subscriber. This data requires a bearer token with the `private` scope.
		///
		///Option descriptions:
		/// * `moderator` - The authenticated user is a moderator.
		/// * `subscriber` - The authenticated user is a subscriber.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<ChannelMetadataInteractionsFollowType> Type { get; set; }
		
		/// <summary>
		/// The URI for following or unfollowing this channel. PUT to this URI to follow the channel, or DELETE to this URI to unfollow the channel. This data requires a bearer token with the `private` scope.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ChannelMetadataInteractionsFollowType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		moderator = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		subscriber = 1,
	}
	
	public class ChannelMetadataInteractionsModerate_videos
	{
		
		/// <summary>
		/// An array of HTTP methods allowed on this URI. This data requires a bearer token with the `private` scope.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="options")]
		public string[] Options { get; set; }
		
		/// <summary>
		/// The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	public class ChannelPrivacy
	{
		
		/// <summary>
		/// Who can view the channel:
		///
		///Option descriptions:
		/// * `anybody` - Anyone can view the channel.
		/// * `moderators` - Only moderators can view the channel.
		/// * `users` - Only registered users can view the channel.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="view")]
		public ChannelPrivacyView View { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ChannelPrivacyView
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		anybody = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		moderators = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		users = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Tag
	{
		
		/// <summary>
		/// The normalized canonical tag name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="canonical")]
		public string Canonical { get; set; }
		
		/// <summary>
		/// Metadata about the group.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public TagMetadata Metadata { get; set; }
		
		/// <summary>
		/// The tag value.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The tag's resource key string.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resource_key")]
		public string Resource_key { get; set; }
		
		/// <summary>
		/// The canonical relative URI of the tag.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	public class TagMetadata
	{
		
		/// <summary>
		/// A collection of information that is connected to this resource.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="connections")]
		public TagMetadataConnections Connections { get; set; }
	}
	
	public class TagMetadataConnections
	{
		
		/// <summary>
		/// Information about the videos related to this tag.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="videos")]
		public TagMetadataConnectionsVideos Videos { get; set; }
	}
	
	public class TagMetadataConnectionsVideos
	{
		
		/// <summary>
		/// An array of HTTP methods permitted on this URI.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="options")]
		public string[] Options { get; set; }
		
		/// <summary>
		/// The total number of videos on this connection.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="total")]
		public double Total { get; set; }
		
		/// <summary>
		/// The API URI that resolves to the connection data.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class User
	{
		
		/// <summary>
		/// The user's account type:
		///
		///Option descriptions:
		/// * `basic` - The user has a Vimeo Basic subscription.
		/// * `business` - The user has a Vimeo Business subscription.
		/// * `live_business` - The user has a Vimeo Business Live subscription.
		/// * `live_premium` - The user has a Vimeo Premium subscription.
		/// * `live_pro` - The user has a Vimeo PRO Live subscription.
		/// * `plus` - The user has a Vimeo Plus subscription.
		/// * `pro` - The user has a Vimeo Pro subscription.
		/// * `pro_unlimited` - The user has a Vimeo PRO Unlimited subscription.
		/// * `producer` - The user has a Vimeo Producer subscription.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="account")]
		public UserAccount Account { get; set; }
		
		/// <summary>
		/// The user's bio.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="bio")]
		public string Bio { get; set; }
		
		/// <summary>
		/// The user's content filters:
		///
		///Option descriptions:
		/// * `drugs` - Drugs or alcohol use.
		/// * `language` - Profanity or sexually suggestive content.
		/// * `nudity` - Nudity.
		/// * `safe` - Suitable for all audiences.
		/// * `unrated` - No rating.
		/// * `violence` - Violent or graphic content.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="content_filter")]
		public string[] Content_filter { get; set; }
		
		/// <summary>
		/// The time in ISO 8601 format when the user account was created.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="created_time")]
		public string Created_time { get; set; }
		
		/// <summary>
		/// The user's email address. This data requires a bearer token with the `email` scope.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// The absolute URL of this user's profile page.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="link")]
		public string Link { get; set; }
		
		/// <summary>
		/// The user's location.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// The user's metadata.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public UserMetadata Metadata { get; set; }
		
		/// <summary>
		/// The user's display name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The active portrait of this user.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pictures")]
		public Picture Pictures { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="preferences")]
		public UserPreferences Preferences { get; set; }
		
		/// <summary>
		/// The user's resource key string.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resource_key")]
		public string Resource_key { get; set; }
		
		/// <summary>
		/// Appears only when the user has upload access and is looking at their own user record.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="upload_quota")]
		public UserUpload_quota Upload_quota { get; set; }
		
		/// <summary>
		/// The user's canonical relative URI.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
		
		/// <summary>
		/// The user's websites.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="websites")]
		public UserWebsites[] UserWebsites { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum UserAccount
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		basic = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		business = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		live_business = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		live_premium = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		live_pro = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		plus = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pro = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pro_unlimited = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		producer = 8,
	}
	
	public class UserMetadata
	{
		
		/// <summary>
		/// The list of resource URIs related to the user.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="connections")]
		public UserMetadataConnections Connections { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="interactions")]
		public UserMetadataInteractions Interactions { get; set; }
	}
	
	public class UserMetadataConnections
	{
		
		/// <summary>
		/// Information about the albums created by this user.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="albums")]
		public UserMetadataConnectionsAlbums Albums { get; set; }
		
		/// <summary>
		/// Information about the appearances of this user in other videos.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="appearances")]
		public UserMetadataConnectionsAppearances Appearances { get; set; }
		
		/// <summary>
		/// Information on the users that the current user has blocked. This data requires a bearer token with the `private` scope.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="block")]
		public UserMetadataConnectionsBlock Block { get; set; }
		
		/// <summary>
		/// Information about this user's followed categories.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="categories")]
		public UserMetadataConnectionsCategories Categories { get; set; }
		
		/// <summary>
		/// Information about this user's subscribed channels.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="channels")]
		public UserMetadataConnectionsChannels Channels { get; set; }
		
		/// <summary>
		/// Information about this user's feed.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="feed")]
		public UserMetadataConnectionsFeed Feed { get; set; }
		
		/// <summary>
		/// Information about this user's folders.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="folders")]
		public UserMetadataConnectionsFolders Folders { get; set; }
		
		/// <summary>
		/// Information about the user's followers.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="followers")]
		public UserMetadataConnectionsFollowers Followers { get; set; }
		
		/// <summary>
		/// Information about the users that the current user is following.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="following")]
		public UserMetadataConnectionsFollowing Following { get; set; }
		
		/// <summary>
		/// Information about the groups created by this user.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="groups")]
		public UserMetadataConnectionsGroups Groups { get; set; }
		
		/// <summary>
		/// Information about the videos that this user has liked.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="likes")]
		public UserMetadataConnectionsLikes Likes { get; set; }
		
		/// <summary>
		/// Information about the channels that this user moderates.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="moderated_channels")]
		public UserMetadataConnectionsModerated_channels Moderated_channels { get; set; }
		
		/// <summary>
		/// Information about this user's portraits.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pictures")]
		public UserMetadataConnectionsPictures Pictures { get; set; }
		
		/// <summary>
		/// Information about this user's portfolios.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="portfolios")]
		public UserMetadataConnectionsPortfolios Portfolios { get; set; }
		
		/// <summary>
		/// A collection of recommended channels for the current user to follow. This data requires a bearer token with the `private` scope.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="recommended_channels")]
		public UserMetadataConnectionsRecommended_channels Recommended_channels { get; set; }
		
		/// <summary>
		/// A Collection of recommended users for the current user to follow. This data requires a bearer token with the `private` scope.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="recommended_users")]
		public UserMetadataConnectionsRecommended_users Recommended_users { get; set; }
		
		/// <summary>
		/// Information about the videos that have been shared with this user.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="shared")]
		public UserMetadataConnectionsShared Shared { get; set; }
		
		/// <summary>
		/// Information about the videos uploaded by this user.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="videos")]
		public UserMetadataConnectionsVideos Videos { get; set; }
		
		/// <summary>
		/// Information about the videos that this user has watched.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="watched_videos")]
		public UserMetadataConnectionsWatched_videos Watched_videos { get; set; }
		
		/// <summary>
		/// Information about the videos that this user wants to watch later.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="watchlater")]
		public UserMetadataConnectionsWatchlater Watchlater { get; set; }
	}
	
	public class UserMetadataConnectionsAlbums
	{
		
		/// <summary>
		/// An array of HTTP methods permitted on this URI.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="options")]
		public string[] Options { get; set; }
		
		/// <summary>
		/// The total number of albums on this connection.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="total")]
		public double Total { get; set; }
		
		/// <summary>
		/// The API URI that resolves to the connection data.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	public class UserMetadataConnectionsAppearances
	{
		
		/// <summary>
		/// An array of HTTP methods permitted on this URI.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="options")]
		public string[] Options { get; set; }
		
		/// <summary>
		/// The total number of appearances on this connection.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="total")]
		public double Total { get; set; }
		
		/// <summary>
		/// The API URI that resolves to the connection data.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	public class UserMetadataConnectionsBlock
	{
		
		/// <summary>
		/// An array of HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="options")]
		public string[] Options { get; set; }
		
		/// <summary>
		/// The total number of blocked users on this connection. This data requires a bearer token with the `private` scope.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="total")]
		public double Total { get; set; }
		
		/// <summary>
		/// The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	public class UserMetadataConnectionsCategories
	{
		
		/// <summary>
		/// An array of HTTP methods permitted on this URI.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="options")]
		public string[] Options { get; set; }
		
		/// <summary>
		/// The total number of categories on this connection.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="total")]
		public double Total { get; set; }
		
		/// <summary>
		/// The API URI that resolves to the connection data.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	public class UserMetadataConnectionsChannels
	{
		
		/// <summary>
		/// An array of HTTP methods permitted on this URI.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="options")]
		public string[] Options { get; set; }
		
		/// <summary>
		/// The total number of channels on this connection.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="total")]
		public double Total { get; set; }
		
		/// <summary>
		/// The API URI that resolves to the connection data.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	public class UserMetadataConnectionsFeed
	{
		
		/// <summary>
		/// An array of HTTP methods permitted on this URI.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="options")]
		public string[] Options { get; set; }
		
		/// <summary>
		/// The API URI that resolves to the connection data.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	public class UserMetadataConnectionsFolders
	{
		
		/// <summary>
		/// An array of HTTP methods permitted on this URI.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="options")]
		public string[] Options { get; set; }
		
		/// <summary>
		/// The total number of folders on this connection.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="total")]
		public double Total { get; set; }
		
		/// <summary>
		/// The API URI that resolves to the connection data.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	public class UserMetadataConnectionsFollowers
	{
		
		/// <summary>
		/// An array of HTTP methods permitted on this URI.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="options")]
		public string[] Options { get; set; }
		
		/// <summary>
		/// The total number of followers on this connection.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="total")]
		public double Total { get; set; }
		
		/// <summary>
		/// The API URI that resolves to the connection data.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	public class UserMetadataConnectionsFollowing
	{
		
		/// <summary>
		/// An array of HTTP methods permitted on this URI.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="options")]
		public string[] Options { get; set; }
		
		/// <summary>
		/// The total number of users on this connection.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="total")]
		public double Total { get; set; }
		
		/// <summary>
		/// The API URI that resolves to the connection data.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	public class UserMetadataConnectionsGroups
	{
		
		/// <summary>
		/// An array of HTTP methods permitted on this URI.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="options")]
		public string[] Options { get; set; }
		
		/// <summary>
		/// The total number of groups on this connection.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="total")]
		public double Total { get; set; }
		
		/// <summary>
		/// The API URI that resolves to the connection data.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	public class UserMetadataConnectionsLikes
	{
		
		/// <summary>
		/// An array of HTTP methods permitted on this URI.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="options")]
		public string[] Options { get; set; }
		
		/// <summary>
		/// The total number of likes on this connection.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="total")]
		public double Total { get; set; }
		
		/// <summary>
		/// The API URI that resolves to the connection data.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	public class UserMetadataConnectionsModerated_channels
	{
		
		/// <summary>
		/// An array of HTTP methods permitted on this URI.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="options")]
		public string[] Options { get; set; }
		
		/// <summary>
		/// The total number of channels on this connection.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="total")]
		public double Total { get; set; }
		
		/// <summary>
		/// The API URI that resolves to the connection data.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	public class UserMetadataConnectionsPictures
	{
		
		/// <summary>
		/// An array of HTTP methods permitted on this URI.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="options")]
		public string[] Options { get; set; }
		
		/// <summary>
		/// The total number of pictures on this connection.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="total")]
		public double Total { get; set; }
		
		/// <summary>
		/// The API URI that resolves to the connection data.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	public class UserMetadataConnectionsPortfolios
	{
		
		/// <summary>
		/// An array of HTTP methods permitted on this URI.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="options")]
		public string[] Options { get; set; }
		
		/// <summary>
		/// The total number of portfolios on this connection.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="total")]
		public double Total { get; set; }
		
		/// <summary>
		/// The API URI that resolves to the connection data.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	public class UserMetadataConnectionsRecommended_channels
	{
		
		/// <summary>
		/// An array of HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="options")]
		public string[] Options { get; set; }
		
		/// <summary>
		/// The total number of channels on this connection. This data requires a bearer token with the `private` scope.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="total")]
		public double Total { get; set; }
		
		/// <summary>
		/// The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	public class UserMetadataConnectionsRecommended_users
	{
		
		/// <summary>
		/// An array of HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="options")]
		public string[] Options { get; set; }
		
		/// <summary>
		/// The total number of users on this connection. This data requires a bearer token with the `private` scope.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="total")]
		public double Total { get; set; }
		
		/// <summary>
		/// The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	public class UserMetadataConnectionsShared
	{
		
		/// <summary>
		/// An array of HTTP methods permitted on this URI.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="options")]
		public string[] Options { get; set; }
		
		/// <summary>
		/// The total number of videos on this connection.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="total")]
		public double Total { get; set; }
		
		/// <summary>
		/// The API URI that resolves to the connection data.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	public class UserMetadataConnectionsVideos
	{
		
		/// <summary>
		/// An array of HTTP methods permitted on this URI.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="options")]
		public string[] Options { get; set; }
		
		/// <summary>
		/// The total number of videos on this connection.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="total")]
		public double Total { get; set; }
		
		/// <summary>
		/// The API URI that resolves to the connection data.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	public class UserMetadataConnectionsWatched_videos
	{
		
		/// <summary>
		/// An array of HTTP methods permitted on this URI.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="options")]
		public string[] Options { get; set; }
		
		/// <summary>
		/// The total number of videos on this connection.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="total")]
		public double Total { get; set; }
		
		/// <summary>
		/// The API URI that resolves to the connection data.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	public class UserMetadataConnectionsWatchlater
	{
		
		/// <summary>
		/// An array of HTTP methods permitted on this URI.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="options")]
		public string[] Options { get; set; }
		
		/// <summary>
		/// The total number of videos on this connection.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="total")]
		public double Total { get; set; }
		
		/// <summary>
		/// The API URI that resolves to the connection data.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	public class UserMetadataInteractions
	{
		
		[System.Runtime.Serialization.DataMember(Name="add_privacy_user")]
		public UserMetadataInteractionsAdd_privacy_user Add_privacy_user { get; set; }
		
		/// <summary>
		/// Information related to the block status of this user.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="block")]
		public UserMetadataInteractionsBlock Block { get; set; }
		
		/// <summary>
		/// Information related to the followed status of this user.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="follow")]
		public UserMetadataInteractionsFollow Follow { get; set; }
		
		/// <summary>
		/// Information regarding where and how to report a user.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="report")]
		public UserMetadataInteractionsReport Report { get; set; }
	}
	
	public class UserMetadataInteractionsAdd_privacy_user
	{
		
		/// <summary>
		/// An array of the HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="options")]
		public string[] Options { get; set; }
		
		/// <summary>
		/// The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	public class UserMetadataInteractionsBlock
	{
		
		/// <summary>
		/// Whether a user is blocking the current user.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="added")]
		public bool Added { get; set; }
		
		/// <summary>
		/// The time in ISO 8601 format when the block occurred, or the null value if no block exists.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="added_time")]
		public string Added_time { get; set; }
		
		/// <summary>
		/// An array of the HTTP methods permitted on this URI.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="options")]
		public string[] Options { get; set; }
		
		/// <summary>
		/// The URI to block or unblock the user.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	public class UserMetadataInteractionsFollow
	{
		
		/// <summary>
		/// Whether a user is following the current user.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="added")]
		public bool Added { get; set; }
		
		/// <summary>
		/// An array of the HTTP methods permitted on this URI.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="options")]
		public string[] Options { get; set; }
		
		/// <summary>
		/// The URI to follow the user.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	public class UserMetadataInteractionsReport
	{
		
		/// <summary>
		/// An array of the HTTP methods permitted on this URI.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="options")]
		public string[] Options { get; set; }
		
		/// <summary>
		/// List of valid reasons for reporting a video.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string[] Reason { get; set; }
		
		/// <summary>
		/// The API URI that resolves to the connection data.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	public class UserPreferences
	{
		
		[System.Runtime.Serialization.DataMember(Name="videos")]
		public UserPreferencesVideos Videos { get; set; }
	}
	
	public class UserPreferencesVideos
	{
		
		[System.Runtime.Serialization.DataMember(Name="privacy")]
		public UserPreferencesVideosPrivacy Privacy { get; set; }
	}
	
	public class UserPreferencesVideosPrivacy
	{
		
		/// <summary>
		/// Whether other users can add the user's videos.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="add")]
		public System.Nullable<System.Boolean> Add { get; set; }
		
		/// <summary>
		/// The user's privacy preference for comments:
		///
		///Option descriptions:
		/// * `anybody` - Anyone can comment on the user's videos.
		/// * `contacts` - Only contacts can comment on the user's videos.
		/// * `nobody` - No one can comment on the user's videos.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="comments")]
		public System.Nullable<UserPreferencesVideosPrivacyComments> Comments { get; set; }
		
		/// <summary>
		/// Whether other users can download the user's videos.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="download")]
		public System.Nullable<System.Boolean> Download { get; set; }
		
		/// <summary>
		/// The user's privacy preference for embeds:
		///
		///Option descriptions:
		/// * `private` - Only the user can embed their own videos.
		/// * `public` - Anyone can embed the user's videos.
		/// * `whitelist` - Only those on the whitelist can embed the user's videos.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="embed")]
		public System.Nullable<UserPreferencesVideosPrivacyEmbed> Embed { get; set; }
		
		/// <summary>
		/// The user's privacy preference for views:
		///
		///Option descriptions:
		/// * `anybody` - Anyone can view the user's videos.
		/// * `contacts` - Only contacts can view the user's videos.
		/// * `disable` - Views are disabled for the user's videos.
		/// * `nobody` - No one except the user can view the user's videos.
		/// * `password` - Only those with the password can view the user's videos.
		/// * `unlisted` - Anybody can view the user's videos if they have a link.
		/// * `users` - Only other Vimeo members can view the user's videos.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="view")]
		public System.Nullable<UserPreferencesVideosPrivacyView> View { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum UserPreferencesVideosPrivacyComments
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		anybody = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		contacts = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		nobody = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum UserPreferencesVideosPrivacyEmbed
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="private")]
		_private = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="public")]
		_public = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		whitelist = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum UserPreferencesVideosPrivacyView
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		anybody = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		contacts = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		disable = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		nobody = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		password = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unlisted = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		users = 6,
	}
	
	public class UserUpload_quota
	{
		
		/// <summary>
		/// Information about the user's lifetime upload usage.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lifetime")]
		public UserUpload_quotaLifetime Lifetime { get; set; }
		
		/// <summary>
		/// Information about the user's usage for the current period.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="periodic")]
		public UserUpload_quotaPeriodic Periodic { get; set; }
		
		/// <summary>
		/// Information about the user's upload space remaining for the current period.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="space")]
		public UserUpload_quotaSpace Space { get; set; }
	}
	
	public class UserUpload_quotaLifetime
	{
		
		/// <summary>
		/// The number of bytes remaining in your lifetime maximum.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="free")]
		public System.Nullable<System.Double> Free { get; set; }
		
		/// <summary>
		/// The total number of bytes that you can upload across the lifetime of your account.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="max")]
		public System.Nullable<System.Double> Max { get; set; }
		
		/// <summary>
		/// The number of bytes that you've already uploaded against your lifetime limit.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="used")]
		public System.Nullable<System.Double> Used { get; set; }
	}
	
	public class UserUpload_quotaPeriodic
	{
		
		/// <summary>
		/// The number of bytes remaining in your upload quota for the current period.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="free")]
		public System.Nullable<System.Double> Free { get; set; }
		
		/// <summary>
		/// The total number of bytes that you can upload per period.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="max")]
		public System.Nullable<System.Double> Max { get; set; }
		
		/// <summary>
		/// The time in ISO 8601 format when your upload quota resets.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reset_date")]
		public string Reset_date { get; set; }
		
		/// <summary>
		/// The number of bytes that you've already uploaded against your quota in the current period.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="used")]
		public System.Nullable<System.Double> Used { get; set; }
	}
	
	public class UserUpload_quotaSpace
	{
		
		/// <summary>
		/// The number of bytes remaining in your upload quota.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="free")]
		public double Free { get; set; }
		
		/// <summary>
		/// The maximum number of bytes allotted to your upload quota.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="max")]
		public System.Nullable<System.Double> Max { get; set; }
		
		/// <summary>
		/// Whether the values of the upload_quota.space fields are for the lifetime quota or the periodic quota.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="showing")]
		public UserUpload_quotaSpaceShowing Showing { get; set; }
		
		/// <summary>
		/// The number of bytes that you've already uploaded against your quota.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="used")]
		public double Used { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum UserUpload_quotaSpaceShowing
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		lifetime = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		periodic = 1,
	}
	
	public class UserWebsites
	{
		
		/// <summary>
		/// The website's description.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The URL of the website.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="link")]
		public string Link { get; set; }
		
		/// <summary>
		/// The name of the website.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Video
	{
		
		/// <summary>
		/// The categories to which this video belongs.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="categories")]
		public Category[] Categories { get; set; }
		
		/// <summary>
		/// The content ratings of this video.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="content_rating")]
		public string[] Content_rating { get; set; }
		
		/// <summary>
		/// The context of the video's subscription, if this video is part of a subscription.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="context")]
		public VideoContext Context { get; set; }
		
		/// <summary>
		/// The time in ISO 8601 format when the video was created.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="created_time")]
		public string Created_time { get; set; }
		
		/// <summary>
		/// A brief explanation of the video's content.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The video's duration in seconds.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="duration")]
		public double Duration { get; set; }
		
		/// <summary>
		/// Information about embedding this video.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="embed")]
		public Embed_settings Embed { get; set; }
		
		/// <summary>
		/// The video's height in pixels.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="height")]
		public double Height { get; set; }
		
		/// <summary>
		/// The video's primary language.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="language")]
		public string Language { get; set; }
		
		/// <summary>
		/// The time in ISO 8601 format when the user last modified the video.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="last_user_action_event_date")]
		public string Last_user_action_event_date { get; set; }
		
		/// <summary>
		/// The [Creative Commons](http://creativecommons.org/licenses/) license used for the video:
		///
		///Option descriptions:
		/// * `by` - Attribution
		/// * `by-nc` - Attribution Non-Commercial
		/// * `by-nc-nd` - Attribution Non-Commercial No Derivatives
		/// * `by-nc-sa` - Attribution Non-Commercial Share Alike
		/// * `by-nd` - Attribution No Derivatives
		/// * `by-sa` - Attribution Share Alike
		/// * `cc0` - Public Domain Dedication
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="license")]
		public VideoLicense License { get; set; }
		
		/// <summary>
		/// The link to the video.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="link")]
		public string Link { get; set; }
		
		/// <summary>
		/// The video's metadata.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public VideoMetadata Metadata { get; set; }
		
		/// <summary>
		/// The time in ISO 8601 format when the video metadata was last modified.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="modified_time")]
		public string Modified_time { get; set; }
		
		/// <summary>
		/// The video's title.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Information about the folder that contains this video.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parent_folder")]
		public Project Parent_folder { get; set; }
		
		/// <summary>
		/// The privacy-enabled password to watch this video. Only users can see their own video passwords. This data requires a bearer token with the `private` scope.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		/// <summary>
		/// The active picture for this video.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pictures")]
		public Picture Pictures { get; set; }
		
		/// <summary>
		/// The video's privacy setting.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="privacy")]
		public VideoPrivacy Privacy { get; set; }
		
		/// <summary>
		/// The time in ISO 8601 format when the video was released.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="release_time")]
		public string Release_time { get; set; }
		
		/// <summary>
		/// The resource key string of the video.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resource_key")]
		public string Resource_key { get; set; }
		
		/// <summary>
		/// 360 spatial data.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="spatial")]
		public VideoSpatial Spatial { get; set; }
		
		/// <summary>
		/// A collection of stats associated with this video.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="stats")]
		public VideoStats Stats { get; set; }
		
		/// <summary>
		/// The status code for the availability of the video. This field is deprecated in favor of `upload` and `transcode`.
		///
		///Option descriptions:
		/// * `available` - The video is available.
		/// * `quota_exceeded` - The user's quota is exceeded with this video.
		/// * `total_cap_exceeded` - The user has exceeded their total cap with this video.
		/// * `transcode_starting` - Transcoding is beginning for the video.
		/// * `transcoding` - Transcoding is underway for the video.
		/// * `transcoding_error` - There was an error in transcoding the video.
		/// * `unavailable` - The video is unavailable.
		/// * `uploading` - The video is being uploaded.
		/// * `uploading_error` - There was an error in uploading the video.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<VideoStatus> Status { get; set; }
		
		/// <summary>
		/// An array of all tags assigned to this video.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
		
		/// <summary>
		/// The transcode information for a video upload.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transcode")]
		public VideoTranscode Transcode { get; set; }
		
		/// <summary>
		/// The upload information for this video.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="upload")]
		public VideoUpload Upload { get; set; }
		
		/// <summary>
		/// The video's canonical relative URI.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
		
		/// <summary>
		/// The video owner.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="user")]
		public User User { get; set; }
		
		/// <summary>
		/// The video's width in pixels.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="width")]
		public double Width { get; set; }
	}
	
	public class VideoContext
	{
		
		/// <summary>
		/// The contextual action:
		///
		///Option descriptions:
		/// * `Added to` - An Added To action.
		/// * `Appearance by` - An Appearance By action.
		/// * `Liked by` - A Liked By action.
		/// * `Uploaded by` - An Unloaded By action.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="action")]
		public VideoContextAction Action { get; set; }
		
		/// <summary>
		/// The contextual resource: a user, group, or channel representation, or an object of a tag.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public string Resource { get; set; }
		
		/// <summary>
		/// The contextual resource type.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resource_type")]
		public string Resource_type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum VideoContextAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Added to")]
		Added_to = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Appearance by")]
		Appearance_by = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Liked by")]
		Liked_by = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Uploaded by")]
		Uploaded_by = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Embed_settings
	{
		
		/// <summary>
		/// A collection of information about the buttons that appear on the interface of the embeddable player.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="buttons")]
		public Embed_settingsButtons Buttons { get; set; }
		
		/// <summary>
		/// The primary player color, which controls the color of the progress bar, buttons, and more.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="color")]
		public string Color { get; set; }
		
		/// <summary>
		/// A collection of information about the logo in the corner of the embeddable player.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="logos")]
		public Embed_settingsLogos Logos { get; set; }
		
		/// <summary>
		/// Whether the playbar appears in the embeddable player for this video.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="playbar")]
		public bool Playbar { get; set; }
		
		/// <summary>
		/// Whether the speed controls appear in the embeddable player for this video.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="speed")]
		public bool Speed { get; set; }
		
		/// <summary>
		/// A collection of information relating to the embeddable player's title bar.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="title")]
		public Embed_settingsTitle Title { get; set; }
		
		/// <summary>
		/// The URI of the embed preset.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
		
		/// <summary>
		/// Whether the volume controls appear in the embeddable player for this video.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="volume")]
		public bool Volume { get; set; }
	}
	
	public class Embed_settingsButtons
	{
		
		/// <summary>
		/// Whether the Embed button appears in the embeddable player for this video.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="embed")]
		public bool Embed { get; set; }
		
		/// <summary>
		/// Whether the Fullscreen button appears in the embeddable player for this video.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fullscreen")]
		public bool Fullscreen { get; set; }
		
		/// <summary>
		/// Whether the HD button appears in the embeddable player for this video.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="hd")]
		public bool Hd { get; set; }
		
		/// <summary>
		/// Whether the Like button appears in the embeddable player for this video.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="like")]
		public bool Like { get; set; }
		
		/// <summary>
		/// Whether the Scaling button appears in the embeddable player for this video.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="scaling")]
		public bool Scaling { get; set; }
		
		/// <summary>
		/// Whether the Share button appears in the embeddable player for this video.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="share")]
		public bool Share { get; set; }
		
		/// <summary>
		/// Whether the Watch Later button appears in the embeddable player for this video.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="watchlater")]
		public bool Watchlater { get; set; }
	}
	
	public class Embed_settingsLogos
	{
		
		/// <summary>
		/// A collection of information relating to custom logos in the embeddable player.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="custom")]
		public Embed_settingsLogosCustom Custom { get; set; }
		
		/// <summary>
		/// Whether the Vimeo logo appears in the embeddable player for this video.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="vimeo")]
		public bool Vimeo { get; set; }
	}
	
	public class Embed_settingsLogosCustom
	{
		
		/// <summary>
		/// Whether the custom logo appears in the embeddable player.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="active")]
		public bool Active { get; set; }
		
		/// <summary>
		/// The URL that loads upon clicking the custom logo.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="link")]
		public string Link { get; set; }
		
		/// <summary>
		/// Whether the custom logo appears even when the player interface is hidden.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sticky")]
		public bool Sticky { get; set; }
	}
	
	public class Embed_settingsTitle
	{
		
		/// <summary>
		/// How the embeddable player handles the video title:
		///
		///Option descriptions:
		/// * `hide` - The title is hidden.
		/// * `show` - The title is shown.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public Embed_settingsTitleName Name { get; set; }
		
		/// <summary>
		/// How the embeddable player handles the video owner's information:
		///
		///Option descriptions:
		/// * `hide` - The owner's information is hidden.
		/// * `show` - The owner's information is shown.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="owner")]
		public Embed_settingsTitleName Owner { get; set; }
		
		/// <summary>
		/// How the embeddable player handles the video owner's portrait:
		///
		///Option descriptions:
		/// * `hide` - The owner's portrait is hidden
		/// * `show` - The owner's portrait is shown.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="portrait")]
		public Embed_settingsTitleName Portrait { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum Embed_settingsTitleName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		hide = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		show = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		user = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum VideoLicense
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		by = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="by-nc")]
		byMinusnc = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="by-nc-nd")]
		byMinusncMinusnd = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="by-nc-sa")]
		byMinusncMinussa = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="by-nd")]
		byMinusnd = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="by-sa")]
		byMinussa = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		cc0 = 6,
	}
	
	public class VideoMetadata
	{
		
		/// <summary>
		/// A list of resource URIs related to the video.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="connections")]
		public VideoMetadataConnections Connections { get; set; }
		
		/// <summary>
		/// A list of resource URIs related to the video.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="interactions")]
		public VideoMetadataInteractions Interactions { get; set; }
	}
	
	public class VideoMetadataConnections
	{
		
		/// <summary>
		/// Information about the comments on this video.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="comments")]
		public VideoMetadataConnectionsComments Comments { get; set; }
		
		/// <summary>
		/// Information about the users credited in this video.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="credits")]
		public VideoMetadataConnectionsCredits Credits { get; set; }
		
		/// <summary>
		/// Information about the users who have liked this video.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="likes")]
		public VideoMetadataConnectionsLikes Likes { get; set; }
		
		/// <summary>
		/// Information about this video's ondemand data.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ondemand")]
		public VideoMetadataConnectionsOndemand Ondemand { get; set; }
		
		/// <summary>
		/// Information about this video's thumbnails.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pictures")]
		public VideoMetadataConnectionsPictures Pictures { get; set; }
		
		/// <summary>
		/// The DRM playback status connection for this video.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="playback")]
		public VideoMetadataConnectionsPlayback Playback { get; set; }
		
		/// <summary>
		/// The recommendations for this video.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="recommendations")]
		public VideoMetadataConnectionsRecommendations Recommendations { get; set; }
		
		/// <summary>
		/// Related content for this video.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="related")]
		public VideoMetadataConnectionsRelated Related { get; set; }
		
		/// <summary>
		/// Information about the video's season.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="season")]
		public VideoMetadataConnectionsSeason Season { get; set; }
		
		/// <summary>
		/// Information about this video's text tracks.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="texttracks")]
		public VideoMetadataConnectionsTexttracks Texttracks { get; set; }
		
		/// <summary>
		/// Information about this video's VOD trailer.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="trailer")]
		public VideoMetadataConnectionsTrailer Trailer { get; set; }
		
		/// <summary>
		/// Information about the user privacy of this video, if the video privacy is `users`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="users_with_access")]
		public VideoMetadataConnectionsUsers_with_access Users_with_access { get; set; }
		
		/// <summary>
		/// Information about the versions of this video.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="versions")]
		public VideoMetadataConnectionsVersions Versions { get; set; }
	}
	
	public class VideoMetadataConnectionsComments
	{
		
		/// <summary>
		/// An array of HTTP methods permitted on this URI.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="options")]
		public string[] Options { get; set; }
		
		/// <summary>
		/// The total number of comments on this connection.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="total")]
		public double Total { get; set; }
		
		/// <summary>
		/// The API URI that resolves to the connection data.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	public class VideoMetadataConnectionsCredits
	{
		
		/// <summary>
		/// An array of HTTP methods permitted on this URI.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="options")]
		public string[] Options { get; set; }
		
		/// <summary>
		/// The total number of users on this connection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Double> Total { get; set; }
		
		/// <summary>
		/// The API URI that resolves to the connection data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	public class VideoMetadataConnectionsLikes
	{
		
		/// <summary>
		/// An array of HTTP methods permitted on this URI.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="options")]
		public string[] Options { get; set; }
		
		/// <summary>
		/// The total number of likes on this connection.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="total")]
		public double Total { get; set; }
		
		/// <summary>
		/// The API URI that resolves to the connection data.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	public class VideoMetadataConnectionsOndemand
	{
		
		/// <summary>
		/// An array of HTTP methods permitted on this URI.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="options")]
		public string[] Options { get; set; }
		
		/// <summary>
		/// The On Demand connection resource key.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resource_key")]
		public string Resource_key { get; set; }
		
		/// <summary>
		/// The API URI that resolves to the connection data.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	public class VideoMetadataConnectionsPictures
	{
		
		/// <summary>
		/// An array of HTTP methods allowed on this URI.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="options")]
		public string[] Options { get; set; }
		
		/// <summary>
		/// Total number of thumbnails on this connection.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="total")]
		public double Total { get; set; }
		
		/// <summary>
		/// The API URI that resolves to the connection data.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	public class VideoMetadataConnectionsPlayback
	{
		
		/// <summary>
		/// An array of HTTP methods permitted on this URI.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="options")]
		public string[] Options { get; set; }
		
		/// <summary>
		/// The API URI that resolves to the connection data.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	public class VideoMetadataConnectionsRecommendations
	{
		
		/// <summary>
		/// An array of HTTP methods allowed on this URI.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="options")]
		public string[] Options { get; set; }
		
		/// <summary>
		/// The API URI that resolves to the connection data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	public class VideoMetadataConnectionsRelated
	{
		
		/// <summary>
		/// An array of HTTP methods allowed on this URI.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="options")]
		public string[] Options { get; set; }
		
		/// <summary>
		/// The API URI that resolves to the connection data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	public class VideoMetadataConnectionsSeason
	{
		
		/// <summary>
		/// The name of this season.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// An array of HTTP methods permitted on this URI.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="options")]
		public string[] Options { get; set; }
		
		/// <summary>
		/// The API URI that resolves to the connection data.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	public class VideoMetadataConnectionsTexttracks
	{
		
		/// <summary>
		/// An array of HTTP methods permitted on this URI.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="options")]
		public string[] Options { get; set; }
		
		/// <summary>
		/// The total number of text tracks on this connection.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="total")]
		public double Total { get; set; }
		
		/// <summary>
		/// The API URI that resolves to the connection data.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	public class VideoMetadataConnectionsTrailer
	{
		
		/// <summary>
		/// An array of HTTP methods permitted on this URI.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="options")]
		public string[] Options { get; set; }
		
		/// <summary>
		/// The trailer connection resource key.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resource_key")]
		public string Resource_key { get; set; }
		
		/// <summary>
		/// The API URI that resolves to the connection data.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	public class VideoMetadataConnectionsUsers_with_access
	{
		
		/// <summary>
		/// An array of HTTP methods permitted on this URI.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="options")]
		public string[] Options { get; set; }
		
		/// <summary>
		/// The total number of users on this connection.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="total")]
		public double Total { get; set; }
		
		/// <summary>
		/// The API URI that resolves to the connection data.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	public class VideoMetadataConnectionsVersions
	{
		
		/// <summary>
		/// The URI of the current version of the video.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="current_uri")]
		public string Current_uri { get; set; }
		
		/// <summary>
		/// An array of HTTP methods permitted on this URI.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="options")]
		public string[] Options { get; set; }
		
		/// <summary>
		/// The total number of versions on this connection.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="total")]
		public double Total { get; set; }
		
		/// <summary>
		/// The API URI that resolves to the connection data.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	public class VideoMetadataInteractions
	{
		
		/// <summary>
		/// The Buy interaction for a On Demand video.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="buy")]
		public VideoMetadataInteractionsBuy Buy { get; set; }
		
		/// <summary>
		/// When a video is referenced by a channel URI, if the user is a moderator of the channel, include information about removing the video from the channel.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="channel")]
		public VideoMetadataInteractionsChannel Channel { get; set; }
		
		/// <summary>
		/// Information about whether the authenticated user has liked this video.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="like")]
		public VideoMetadataInteractionsLike Like { get; set; }
		
		/// <summary>
		/// The Rent interaction for an On Demand video.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="rent")]
		public VideoMetadataInteractionsRent Rent { get; set; }
		
		/// <summary>
		/// Information about where and how to report a video.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="report")]
		public VideoMetadataInteractionsReport Report { get; set; }
		
		/// <summary>
		/// Subscription information for an On Demand video.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subscribe")]
		public VideoMetadataInteractionsSubscribe Subscribe { get; set; }
		
		/// <summary>
		/// Information about removing this video from the user's list of watched videos.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="watched")]
		public VideoMetadataInteractionsWatched Watched { get; set; }
		
		/// <summary>
		/// Information about whether this video appears on the authenticated user's Watch Later list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="watchlater")]
		public VideoMetadataInteractionsWatchlater Watchlater { get; set; }
	}
	
	public class VideoMetadataInteractionsBuy
	{
		
		/// <summary>
		/// The currency code for the current user's region.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public string Currency { get; set; }
		
		/// <summary>
		/// Formatted price to display to buy an On Demand video.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="display_price")]
		public string Display_price { get; set; }
		
		/// <summary>
		/// The user's download access to this On Demand video:
		///
		///Option descriptions:
		/// * `available` - The video is available for download.
		/// * `purchased` - The user has purchased the video.
		/// * `restricted` - The user isn't permitted to download the video.
		/// * `unavailable` - The video isn't available for download.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="download")]
		public VideoMetadataInteractionsBuyDownload Download { get; set; }
		
		/// <summary>
		/// Whether the video has DRM.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="drm")]
		public bool Drm { get; set; }
		
		/// <summary>
		/// The URL to buy the On Demand video on Vimeo.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="link")]
		public string Link { get; set; }
		
		/// <summary>
		/// The numeric value of the price for buying the On Demand video.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="price")]
		public System.Nullable<System.Double> Price { get; set; }
		
		/// <summary>
		/// The time in ISO 8601 format when the On Demand video was purchased.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="purchase_time")]
		public string Purchase_time { get; set; }
		
		/// <summary>
		/// The user's streaming access to this On Demand video:
		///
		///Option descriptions:
		/// * `available` - The video is available for streaming.
		/// * `purchased` - The user has purchased the video.
		/// * `restricted` - The user isn't permitted to stream the video.
		/// * `unavailable` - The video isn't available for streaming
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="stream")]
		public VideoMetadataInteractionsBuyDownload Stream { get; set; }
		
		/// <summary>
		/// The product URI to purchase the On Demand video.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum VideoMetadataInteractionsBuyDownload
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		available = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		purchased = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		restricted = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unavailable = 3,
	}
	
	public class VideoMetadataInteractionsChannel
	{
		
		/// <summary>
		/// An array of HTTP methods permitted on this URI.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="options")]
		public string[] Options { get; set; }
		
		/// <summary>
		/// The API URI that resolves to the connection data.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	public class VideoMetadataInteractionsLike
	{
		
		/// <summary>
		/// Whether the user has liked the video.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="added")]
		public bool Added { get; set; }
		
		/// <summary>
		/// The time in ISO 8601 format when the user liked the video.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="added_time")]
		public string Added_time { get; set; }
		
		/// <summary>
		/// An array of HTTP methods permitted on this URI.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="options")]
		public string[] Options { get; set; }
		
		/// <summary>
		/// The API URI that resolves to the connection data.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	public class VideoMetadataInteractionsRent
	{
		
		/// <summary>
		/// The currency code for the current user's region.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public string Currency { get; set; }
		
		/// <summary>
		/// Formatted price to display to rent an On Demand video.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="display_price")]
		public string Display_price { get; set; }
		
		/// <summary>
		/// Whether the video has DRM.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="drm")]
		public bool Drm { get; set; }
		
		/// <summary>
		/// The time in ISO 8601 format when the rental period for the video expires.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="expires_time")]
		public string Expires_time { get; set; }
		
		/// <summary>
		/// The URL to rent the On Demand video on Vimeo.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="link")]
		public string Link { get; set; }
		
		/// <summary>
		/// The numeric value of the price for buying the On Demand video.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="price")]
		public System.Nullable<System.Double> Price { get; set; }
		
		/// <summary>
		/// The time in ISO 8601 format when the On Demand video was rented.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="purchase_time")]
		public string Purchase_time { get; set; }
		
		/// <summary>
		/// The user's streaming access to this On Demand video:
		///
		///Option descriptions:
		/// * `available` - The video is available for streaming.
		/// * `purchased` - The user has purchased the video.
		/// * `restricted` - The user isn't permitted to stream the video.
		/// * `unavailable` - The video isn't available for streaming.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="stream")]
		public VideoMetadataInteractionsBuyDownload Stream { get; set; }
		
		/// <summary>
		/// The product URI to rent the On Demand video.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	public class VideoMetadataInteractionsReport
	{
		
		/// <summary>
		/// An array of HTTP methods permitted on this URI.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="options")]
		public string[] Options { get; set; }
		
		/// <summary>
		/// A list of valid reasons for reporting a video.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string[] Reason { get; set; }
		
		/// <summary>
		/// The API URI that resolves to the connection data.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	public class VideoMetadataInteractionsSubscribe
	{
		
		/// <summary>
		/// Whether the video has DRM.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="drm")]
		public System.Nullable<System.Boolean> Drm { get; set; }
		
		/// <summary>
		/// The time in ISO 8601 format when the subscription expires.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expires_time")]
		public string Expires_time { get; set; }
		
		/// <summary>
		/// The tine in ISO 8601 format when the subscription was purchased.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="purchase_time")]
		public string Purchase_time { get; set; }
		
		/// <summary>
		/// The stream type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stream")]
		public string Stream { get; set; }
	}
	
	public class VideoMetadataInteractionsWatched
	{
		
		/// <summary>
		/// Whether the user has watched the video.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="added")]
		public bool Added { get; set; }
		
		/// <summary>
		/// The time in ISO 8601 format when the user watched the video.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="added_time")]
		public string Added_time { get; set; }
		
		/// <summary>
		/// An array of HTTP methods permitted on this URI.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="options")]
		public string[] Options { get; set; }
		
		/// <summary>
		/// The API URI that resolves to the connection data.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	public class VideoMetadataInteractionsWatchlater
	{
		
		/// <summary>
		/// Whether the user has added the video to their Watch later list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="added")]
		public bool Added { get; set; }
		
		/// <summary>
		/// The time in ISO 8601 format when the user added the video to their Watch Later list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="added_time")]
		public string Added_time { get; set; }
		
		/// <summary>
		/// An array of HTTP methods permitted on this URI.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="options")]
		public string[] Options { get; set; }
		
		/// <summary>
		/// The API URI that resolves to the connection data.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Project
	{
		
		/// <summary>
		/// The time in ISO 8601 format when the project was created.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="created_time")]
		public string Created_time { get; set; }
		
		/// <summary>
		/// The project's metadata.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public ProjectMetadata Metadata { get; set; }
		
		/// <summary>
		/// The time in ISO 8601 format when the project was last modified.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="modified_time")]
		public string Modified_time { get; set; }
		
		/// <summary>
		/// The name of the folder.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The resource key string of the project.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resource_key")]
		public string Resource_key { get; set; }
		
		/// <summary>
		/// The URI of the project.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
		
		/// <summary>
		/// The owner of the project.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="user")]
		public User User { get; set; }
	}
	
	public class ProjectMetadata
	{
		
		/// <summary>
		/// A list of resource URIs related to the project.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="connections")]
		public ProjectMetadataConnections Connections { get; set; }
	}
	
	public class ProjectMetadataConnections
	{
		
		/// <summary>
		/// A standard connection object indicating how to get all the videos in this project.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="videos")]
		public ProjectMetadataConnectionsVideos Videos { get; set; }
	}
	
	public class ProjectMetadataConnectionsVideos
	{
		
		/// <summary>
		/// An array of HTTP methods permitted on this URI.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="options")]
		public string[] Options { get; set; }
		
		/// <summary>
		/// The total number of videos on this connection.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="total")]
		public double Total { get; set; }
		
		/// <summary>
		/// The API URI that resolves to the connection data.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	public class VideoPrivacy
	{
		
		/// <summary>
		/// Whether the video can be added to collections.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="add")]
		public bool Add { get; set; }
		
		/// <summary>
		/// Who can comment on the video:
		///
		///Option descriptions:
		/// * `anybody` - Anyone can comment on the video.
		/// * `contacts` - Only contacts can comment on the video.
		/// * `nobody` - No one can comment on the video.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="comments")]
		public UserPreferencesVideosPrivacyComments Comments { get; set; }
		
		/// <summary>
		/// The video's download permission setting.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="download")]
		public bool Download { get; set; }
		
		/// <summary>
		/// The video's embed permission setting:
		///
		///Option descriptions:
		/// * `private` - The video is private.
		/// * `public` - Anyone can embed the video.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="embed")]
		public VideoPrivacyEmbed Embed { get; set; }
		
		/// <summary>
		/// The general privacy setting for the video:
		///
		///Option descriptions:
		/// * `anybody` - Anyone can view the video.
		/// * `contacts` - Only contacts can view the video.
		/// * `disable` - Hide from vimeo
		/// * `nobody` - No one besides the owner can view the video.
		/// * `password` - Anyone with the video's password can view the video.
		/// * `unlisted` - Not searchable from vimeo.com
		/// * `users` - Only people with a Vimeo account can view the video.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="view")]
		public UserPreferencesVideosPrivacyView View { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum VideoPrivacyEmbed
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="private")]
		_private = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="public")]
		_public = 1,
	}
	
	public class VideoSpatial
	{
		
		/// <summary>
		/// 360 director timeline.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="director_timeline")]
		public VideoSpatialDirector_timeline[] VideoSpatialDirector_timeline { get; set; }
		
		/// <summary>
		/// The 360 field of view, from 30 (minimum) to 90 (maximum). The default is 50.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="field_of_view")]
		public System.Nullable<System.Double> Field_of_view { get; set; }
		
		/// <summary>
		/// The 360 spatial projection:
		///
		///Option descriptions:
		/// * `cubical` - The spatial projection is cubical.
		/// * `cylindrical` - The spatial projection is cylindrical.
		/// * `dome` - The spatial projection is dome-shaped.
		/// * `equirectangular` - The spatial projection is equirectangular.
		/// * `pyramid` - The spatial projection is pyramid-shaped.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="projection")]
		public System.Nullable<VideoSpatialProjection> Projection { get; set; }
		
		/// <summary>
		/// The 360 stereo format:
		///
		///Option descriptions:
		/// * `left-right` - The stereo format is left-right.
		/// * `mono` - The audio is monaural.
		/// * `top-bottom` - The stereo format is top-bottom.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="stereo_format")]
		public System.Nullable<VideoSpatialStereo_format> Stereo_format { get; set; }
	}
	
	public class VideoSpatialDirector_timeline
	{
		
		/// <summary>
		/// The director timeline pitch, from -90 (minimum) to 90 (maximum).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pitch")]
		public System.Nullable<System.Double> Pitch { get; set; }
		
		/// <summary>
		/// The director timeline roll.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="roll")]
		public System.Nullable<System.Double> Roll { get; set; }
		
		/// <summary>
		/// The director timeline time code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="time_code")]
		public System.Nullable<System.Double> Time_code { get; set; }
		
		/// <summary>
		/// The director timeline yaw, from 0 (minimum) to 360 (maximum).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="yaw")]
		public System.Nullable<System.Double> Yaw { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum VideoSpatialProjection
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		cubical = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		cylindrical = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		dome = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		equirectangular = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pyramid = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum VideoSpatialStereo_format
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="left-right")]
		leftMinusright = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		mono = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="top-bottom")]
		topMinusbottom = 2,
	}
	
	public class VideoStats
	{
		
		/// <summary>
		/// The current total number of times that the video has been played.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="plays")]
		public System.Nullable<System.Double> Plays { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum VideoStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		available = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		quota_exceeded = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		total_cap_exceeded = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		transcode_starting = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		transcoding = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		transcoding_error = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unavailable = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		uploading = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		uploading_error = 8,
	}
	
	public class VideoTranscode
	{
		
		/// <summary>
		/// Status code for this video's availability.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<VideoTranscodeStatus> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum VideoTranscodeStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		complete = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		error = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		in_progress = 2,
	}
	
	public class VideoUpload
	{
		
		/// <summary>
		/// The approach for uploading the video.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="approach")]
		public System.Nullable<VideoUploadApproach> Approach { get; set; }
		
		/// <summary>
		/// The URI for completing the upload.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="complete_uri")]
		public string Complete_uri { get; set; }
		
		/// <summary>
		/// The HTML form for uploading a video through the post approach.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="form")]
		public string Form { get; set; }
		
		/// <summary>
		/// The link of the video to capture through the pull approach.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="link")]
		public string Link { get; set; }
		
		/// <summary>
		/// The redirect URL for the upload app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="redirect_url")]
		public string Redirect_url { get; set; }
		
		/// <summary>
		/// The file size in bytes of the uploaded video.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="size")]
		public System.Nullable<System.Double> Size { get; set; }
		
		/// <summary>
		/// The status code for the availability of the uploaded video:
		///
		///Option descriptions:
		/// * `complete` - The upload is complete.
		/// * `error` - The upload ended with an error.
		/// * `in_progress` - The upload is underway.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public VideoTranscodeStatus Status { get; set; }
		
		/// <summary>
		/// The link for sending video file data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="upload_link")]
		public string Upload_link { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum VideoUploadApproach
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		post = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pull = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		streaming = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		tus = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Group
	{
		
		/// <summary>
		/// The time in ISO 8601 format when the group was created.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="created_time")]
		public string Created_time { get; set; }
		
		/// <summary>
		/// The group's description.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The link to the group.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="link")]
		public string Link { get; set; }
		
		/// <summary>
		/// Metadata about the group.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public GroupMetadata Metadata { get; set; }
		
		/// <summary>
		/// The time in ISO 8601 format when the group was last modified.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="modified_time")]
		public string Modified_time { get; set; }
		
		/// <summary>
		/// The group's display name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The active picture for this group.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pictures")]
		public Picture Pictures { get; set; }
		
		/// <summary>
		/// The group's privacy settings.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="privacy")]
		public GroupPrivacy Privacy { get; set; }
		
		/// <summary>
		/// The resource key of the group.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resource_key")]
		public string Resource_key { get; set; }
		
		/// <summary>
		/// The canonical relative URI of this group.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
		
		/// <summary>
		/// The owner of the group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="user")]
		public User User { get; set; }
	}
	
	public class GroupMetadata
	{
		
		/// <summary>
		/// A collection of information that is connected to this resource.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="connections")]
		public GroupMetadataConnections Connections { get; set; }
		
		/// <summary>
		/// User actions that have involved the group. This data requires a bearer token with the `private` scope.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="interactions")]
		public GroupMetadataInteractions Interactions { get; set; }
	}
	
	public class GroupMetadataConnections
	{
		
		/// <summary>
		/// Information about the members or moderators of this group.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="users")]
		public GroupMetadataConnectionsUsers Users { get; set; }
		
		/// <summary>
		/// Information about the videos contained within this group.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="videos")]
		public GroupMetadataConnectionsVideos Videos { get; set; }
	}
	
	public class GroupMetadataConnectionsUsers
	{
		
		/// <summary>
		/// An array of HTTP methods permitted on this URI.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="options")]
		public string[] Options { get; set; }
		
		/// <summary>
		/// The total number of users on this connection.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="total")]
		public double Total { get; set; }
		
		/// <summary>
		/// The API URI that resolves to the connection data.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	public class GroupMetadataConnectionsVideos
	{
		
		/// <summary>
		/// An array of HTTP methods permitted on this URI.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="options")]
		public string[] Options { get; set; }
		
		/// <summary>
		/// The total number of videos on this connection.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="total")]
		public double Total { get; set; }
		
		/// <summary>
		/// The API URI that resolves to the connection data.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	public class GroupMetadataInteractions
	{
		
		/// <summary>
		/// An action indicating that someone has joined the group. This data requires a bearer token with the `private` scope.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="join")]
		public GroupMetadataInteractionsJoin Join { get; set; }
	}
	
	public class GroupMetadataInteractionsJoin
	{
		
		/// <summary>
		/// Whether the authenticated user has followed this group. This data requires a bearer token with the `private` scope.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="added")]
		public bool Added { get; set; }
		
		/// <summary>
		/// The time in ISO 8601 format when the user joined this group. This data requires a bearer token with the `private` scope.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="added_time")]
		public string Added_time { get; set; }
		
		/// <summary>
		/// The user's title, or the null value if not applicable. This data requires a bearer token with the `private` scope.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// Whether the authenticated user is a moderator or subscriber. This data requires a bearer token with the `private` scope.
		///
		///Option descriptions:
		/// * `member` - The authenticated user is a member.
		/// * `moderator` - The authenticated user is a moderator.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<GroupMetadataInteractionsJoinType> Type { get; set; }
		
		/// <summary>
		/// The URI for following. PUT to this URI to follow, or DELETE to this URI to unfollow. This data requires a bearer token with the `private` scope.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum GroupMetadataInteractionsJoinType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		member = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		moderator = 1,
	}
	
	public class GroupPrivacy
	{
		
		/// <summary>
		/// Who can comment on the group:
		///
		///Option descriptions:
		/// * `all` - Anyone can comment on the group.
		/// * `members` - Only members can comment on the group.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="comment")]
		public GroupPrivacyComment Comment { get; set; }
		
		/// <summary>
		/// Who can invite new members to the group:
		///
		///Option descriptions:
		/// * `all` - Anyone can invite new members to join.
		/// * `members` - Only group members can invite new members to join.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="invite")]
		public GroupPrivacyComment Invite { get; set; }
		
		/// <summary>
		/// Who can join the group:
		///
		///Option descriptions:
		/// * `anybody` - Anyone can join the group.
		/// * `members` - Only people with a Vimeo account can join the group.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="join")]
		public GroupPrivacyJoin Join { get; set; }
		
		/// <summary>
		/// Who can add videos to the group:
		///
		///Option descriptions:
		/// * `all` - Anyone can add videos to the group.
		/// * `members` - Only group members can add videos to the group.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="videos")]
		public GroupPrivacyComment Videos { get; set; }
		
		/// <summary>
		/// Who can view the group:
		///
		///Option descriptions:
		/// * `anybody` - Anyone can view the group.
		/// * `members` - Only group members can view the group.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="view")]
		public GroupPrivacyJoin View { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum GroupPrivacyComment
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		all = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		members = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum GroupPrivacyJoin
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		anybody = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		members = 1,
	}
	
	public class Activity_3_1Metadata
	{
		
		/// <summary>
		/// A list of resource URIs related to the activity.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="connections")]
		public Activity_3_1MetadataConnections Connections { get; set; }
	}
	
	public class Activity_3_1MetadataConnections
	{
		
		/// <summary>
		/// Related content for this activity.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="related")]
		public Activity_3_1MetadataConnectionsRelated Related { get; set; }
	}
	
	public class Activity_3_1MetadataConnectionsRelated
	{
		
		/// <summary>
		/// An array of HTTP methods permitted on this URI.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="options")]
		public string[] Options { get; set; }
		
		/// <summary>
		/// The API URI that resolves to the connection data.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum Activity_3_1Type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		appearance = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		category = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		channel = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		facebook_feed = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		group = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		like = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ondemand = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		share = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		tag = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		twitter_timeline = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		upload = 10,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Album
	{
		
		/// <summary>
		/// Whether an album should allow continuous play.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="allow_continuous_play")]
		public bool Allow_continuous_play { get; set; }
		
		/// <summary>
		/// Whether an album should allow downloads.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="allow_downloads")]
		public bool Allow_downloads { get; set; }
		
		/// <summary>
		/// Whether an album should allow sharing.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="allow_share")]
		public bool Allow_share { get; set; }
		
		/// <summary>
		/// Hexadecimal color code for the decorative color. For example, album videos use this color for player buttons.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="brand_color")]
		public string Brand_color { get; set; }
		
		/// <summary>
		/// The time in ISO 8601 format that the album was created.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="created_time")]
		public string Created_time { get; set; }
		
		/// <summary>
		/// The custom logo for this album.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="custom_logo")]
		public Picture Custom_logo { get; set; }
		
		/// <summary>
		/// A brief description of the album's content.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The custom domain a user has selected for their album.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="domain")]
		public string Domain { get; set; }
		
		/// <summary>
		/// The total duration in seconds of all the videos in the album.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="duration")]
		public double Duration { get; set; }
		
		/// <summary>
		/// Embed data for the album.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="embed")]
		public AlbumEmbed Embed { get; set; }
		
		/// <summary>
		/// Whether to show the album's custom brand color in the player of the album's embedded playlist.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="embed_brand_color")]
		public System.Nullable<System.Boolean> Embed_brand_color { get; set; }
		
		/// <summary>
		/// Whether to show the album's custom logo in the player of the album's embedded playlist.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="embed_custom_logo")]
		public System.Nullable<System.Boolean> Embed_custom_logo { get; set; }
		
		/// <summary>
		/// Whether to hide the Vimeo navigation when viewing the album.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="hide_nav")]
		public bool Hide_nav { get; set; }
		
		/// <summary>
		/// Whether to hide the Vimeo logo in the player of the album's embedded playlist.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="hide_vimeo_logo")]
		public System.Nullable<System.Boolean> Hide_vimeo_logo { get; set; }
		
		/// <summary>
		/// The album's layout preference
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="layout")]
		public AlbumLayout Layout { get; set; }
		
		/// <summary>
		/// The URL to access the album.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="link")]
		public string Link { get; set; }
		
		/// <summary>
		/// Metadata about the album.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public AlbumMetadata Metadata { get; set; }
		
		/// <summary>
		/// The time in ISO 8601 format when the album was last modified.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="modified_time")]
		public string Modified_time { get; set; }
		
		/// <summary>
		/// The album's display name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The active image for the album; defaults to the thumbnail of the last video added to the album.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pictures")]
		public Picture Pictures { get; set; }
		
		/// <summary>
		/// The privacy settings of the album.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="privacy")]
		public AlbumPrivacy Privacy { get; set; }
		
		/// <summary>
		/// The album resource key.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resource_key")]
		public string Resource_key { get; set; }
		
		/// <summary>
		/// Whether album videos should use the review mode URL.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="review_mode")]
		public bool Review_mode { get; set; }
		
		/// <summary>
		/// Sort type of the album.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sort")]
		public AlbumSort Sort { get; set; }
		
		/// <summary>
		/// The album's color theme preference
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="theme")]
		public AlbumTheme Theme { get; set; }
		
		/// <summary>
		/// The album's URI.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
		
		/// <summary>
		/// The custom Vimeo URL a user has selected for their album.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		/// <summary>
		/// Whether the user has opted in to use a custom domain for their album.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="use_custom_domain")]
		public bool Use_custom_domain { get; set; }
		
		/// <summary>
		/// The owner of the album.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="user")]
		public User User { get; set; }
		
		/// <summary>
		/// Whether an album should show the brand color in the web layout.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="web_brand_color")]
		public bool Web_brand_color { get; set; }
		
		/// <summary>
		/// Whether an album's custom logo should be shown in the web layout.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="web_custom_logo")]
		public bool Web_custom_logo { get; set; }
	}
	
	public class AlbumEmbed
	{
		
		/// <summary>
		/// The responsive HTML code to embed the playlist on a website. This is present only when `privacy.view` isn't password and when the album has embeddable videos.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="html")]
		public string Html { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum AlbumLayout
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		grid = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		player = 1,
	}
	
	public class AlbumMetadata
	{
		
		/// <summary>
		/// A collection of information that is connected to this resource.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="connections")]
		public AlbumMetadataConnections Connections { get; set; }
		
		/// <summary>
		/// A list of resource URIs related to the album.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="interactions")]
		public AlbumMetadataInteractions Interactions { get; set; }
	}
	
	public class AlbumMetadataConnections
	{
		
		/// <summary>
		/// Information about the videos that belong to this album.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="videos")]
		public AlbumMetadataConnectionsVideos Videos { get; set; }
	}
	
	public class AlbumMetadataConnectionsVideos
	{
		
		/// <summary>
		/// An array of the HTTP methods permitted on this URI.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="options")]
		public string[] Options { get; set; }
		
		/// <summary>
		/// The total number of videos on this connection.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="total")]
		public double Total { get; set; }
		
		/// <summary>
		/// The API URI that resolves to the connection data.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	public class AlbumMetadataInteractions
	{
		
		/// <summary>
		/// An action indicating that the authenticated user is an admin of the album and may therefore add custom thumbnails. This data requires a bearer token with the `private` scope.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="add_custom_thumbnails")]
		public AlbumMetadataInteractionsAdd_custom_thumbnails Add_custom_thumbnails { get; set; }
		
		/// <summary>
		/// An action indicating that the authenticated user is an admin of the album and may therefore add custom logos. This data requires a bearer token with the `private` scope.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="add_logos")]
		public AlbumMetadataInteractionsAdd_logos Add_logos { get; set; }
		
		/// <summary>
		/// An action indicating that the authenticated user is an admin of the album and may therefore add videos. This data requires a bearer token with the `private` scope.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="add_videos")]
		public AlbumMetadataInteractionsAdd_videos Add_videos { get; set; }
	}
	
	public class AlbumMetadataInteractionsAdd_custom_thumbnails
	{
		
		/// <summary>
		/// An array of HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="options")]
		public string[] Options { get; set; }
		
		/// <summary>
		/// The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	public class AlbumMetadataInteractionsAdd_logos
	{
		
		/// <summary>
		/// An array of HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="options")]
		public string[] Options { get; set; }
		
		/// <summary>
		/// The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	public class AlbumMetadataInteractionsAdd_videos
	{
		
		/// <summary>
		/// An array of HTTP methods allowed on this URI. This data requires a bearer token with the `private` scope.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="options")]
		public string[] Options { get; set; }
		
		/// <summary>
		/// The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	public class AlbumPrivacy
	{
		
		/// <summary>
		/// The privacy-enabled password to see this album. Present only when `privacy.view` is `password`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		/// <summary>
		/// Who can view the album:
		///
		///Option descriptions:
		/// * `anybody` - Anyone can view the album.
		/// * `embed_only` - Only owner can see album, can be embedded off-site
		/// * `password` - Only those with the password can view the album.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="view")]
		public AlbumPrivacyView View { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum AlbumPrivacyView
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		anybody = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		embed_only = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		password = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum AlbumSort
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		added_first = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		added_last = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		alphabetical = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		arranged = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		comments = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		likes = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		newest = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		oldest = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		plays = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum AlbumTheme
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		dark = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		standard = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Api_app
	{
		
		/// <summary>
		/// The name of the API app.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The canonical URI of the API app.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Auth
	{
		
		/// <summary>
		/// The access token string.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="access_token")]
		public string Access_token { get; set; }
		
		/// <summary>
		/// The API application associated with the token.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="app")]
		public Api_app App { get; set; }
		
		/// <summary>
		/// The date and time that the token expires.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expires_on")]
		public string Expires_on { get; set; }
		
		/// <summary>
		/// The refresh token string.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refresh_token")]
		public string Refresh_token { get; set; }
		
		/// <summary>
		/// The scope or scopes that the token supports.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="scope")]
		public string Scope { get; set; }
		
		/// <summary>
		/// The token type:
		///
		///Option descriptions:
		/// * `bearer` - The token is of the `bearer` type.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="token_type")]
		public AuthToken_type Token_type { get; set; }
		
		/// <summary>
		/// The user associated with the token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="user")]
		public User User { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum AuthToken_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		bearer = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Auth_error
	{
		
		/// <summary>
		/// The name of the error.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="error")]
		public string Error { get; set; }
		
		/// <summary>
		/// The description of the error.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="error_description")]
		public string Error_description { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Comment
	{
		
		/// <summary>
		/// The time in ISO 8601 format when the comment was posted.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="created_on")]
		public string Created_on { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public CommentMetadata Metadata { get; set; }
		
		/// <summary>
		/// The resource key string for the comment.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resource_key")]
		public string Resource_key { get; set; }
		
		/// <summary>
		/// The content of the comment.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
		
		/// <summary>
		/// The Vimeo content to which the comment relates:
		///
		///Option descriptions:
		/// * `video` - The comment is about a video.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public CommentType Type { get; set; }
		
		/// <summary>
		/// The unique identifier to access the comment resource.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
		
		/// <summary>
		/// The user who posted the comment.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="user")]
		public User User { get; set; }
	}
	
	public class CommentMetadata
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="connections")]
		public CommentMetadataConnections Connections { get; set; }
	}
	
	public class CommentMetadataConnections
	{
		
		/// <summary>
		/// Information about this comment's replies.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="replies")]
		public CommentMetadataConnectionsReplies Replies { get; set; }
	}
	
	public class CommentMetadataConnectionsReplies
	{
		
		/// <summary>
		/// An array of HTTP methods permitted on this URI.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="options")]
		public string[] Options { get; set; }
		
		/// <summary>
		/// The total number of replies on this connection.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="total")]
		public double Total { get; set; }
		
		/// <summary>
		/// The API URI that resolves to the connection data.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum CommentType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		video = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Content_rating
	{
		
		/// <summary>
		/// The code that uniquely identifies this content rating:
		///
		///Option descriptions:
		/// * `drugs` - Drug or alcohol use.
		/// * `language` - Profanity or sexually suggestive content.
		/// * `nudity` - Nudity.
		/// * `safe` - Suitable for all audiences.
		/// * `unrated` - No rating.
		/// * `violence` - Violent or graphic content.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="code")]
		public Content_ratingCode Code { get; set; }
		
		/// <summary>
		/// The description of this content rating.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The canonical relative URI of the content rating.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum Content_ratingCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		drugs = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		language = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		nudity = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		safe = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unrated = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		violence = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Creative_commons
	{
		
		/// <summary>
		/// The code that uniquely identifies this Creative Commons license:
		///
		///Option descriptions:
		/// * `by` - Attribution
		/// * `by-nc` - Attribution Non-Commercial
		/// * `by-nc-nd` - Attribution Non-Commercial No Derivatives
		/// * `by-nc-sa` - Attribution Non-Commercial Share Alike
		/// * `by-nd` - Attribution No Derivatives
		/// * `by-sa` - Attribution Share Alike
		/// * `cc0` - Public Domain Dedication
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="code")]
		public Creative_commonsCode Code { get; set; }
		
		/// <summary>
		/// The description of this Creative Commons license.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The canonical relative URI of the Creative Commons license.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum Creative_commonsCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		by = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="by-nc")]
		byMinusnc = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="by-nc-nd")]
		byMinusncMinusnd = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="by-nc-sa")]
		byMinusncMinussa = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="by-nd")]
		byMinusnd = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="by-sa")]
		byMinussa = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		cc0 = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Credit
	{
		
		/// <summary>
		/// The name of the person credited.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The character that this person portrayed, or the job that this person performed.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="role")]
		public string Role { get; set; }
		
		/// <summary>
		/// The unique identifier to access the credits resource.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
		
		/// <summary>
		/// The Vimeo user associated with this credit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="user")]
		public User User { get; set; }
		
		/// <summary>
		/// The video associated with this credit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="video")]
		public Video Video { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Domain
	{
		
		/// <summary>
		/// Whether to permit HD embeds on this domain.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="allow_hd")]
		public bool Allow_hd { get; set; }
		
		/// <summary>
		/// The domain name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="domain")]
		public string Domain1 { get; set; }
		
		/// <summary>
		/// The URI of the domain.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Endpoint
	{
		
		/// <summary>
		/// All HTTP methods permitted on this endpoint.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="methods")]
		public string[] Methods { get; set; }
		
		/// <summary>
		/// The path section of the URL, which, when appended to the API host `https:///api.vimeo.com`, builds a full API endpoint.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="path")]
		public string Path { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Error
	{
		
		/// <summary>
		/// The error message that developers receive.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="developer_message")]
		public string Developer_message { get; set; }
		
		/// <summary>
		/// The error message that non-developer users receive.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="error")]
		public string Error1 { get; set; }
		
		/// <summary>
		/// The error code.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="error_code")]
		public double Error_code { get; set; }
		
		/// <summary>
		/// A link to more information about the error.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="link")]
		public string Link { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Language
	{
		
		/// <summary>
		/// The code that represents this language.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// The name of the language.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Legacy_error
	{
		
		/// <summary>
		/// User-friendly error message
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="error")]
		public string Error { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class On_demand_genre
	{
		
		/// <summary>
		/// The canonical name or URL slug of the genre.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="canonical")]
		public string Canonical { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="interactions")]
		public On_demand_genreInteractions Interactions { get; set; }
		
		/// <summary>
		/// The Vimeo URL for this genre.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="link")]
		public string Link { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public On_demand_genreMetadata Metadata { get; set; }
		
		/// <summary>
		/// The descriptive name of the genre.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The relative URI of the On Demand genre.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	public class On_demand_genreInteractions
	{
		
		/// <summary>
		/// Interactions for On Demand pages that are in this genre.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="page")]
		public On_demand_genreInteractionsPage Page { get; set; }
	}
	
	public class On_demand_genreInteractionsPage
	{
		
		/// <summary>
		/// Whether this On Demand genre was added.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="added")]
		public bool Added { get; set; }
		
		/// <summary>
		/// An array of HTTP methods permitted on this URI.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="options")]
		public string[] Options { get; set; }
		
		/// <summary>
		/// The URI to access the On Demand page.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	public class On_demand_genreMetadata
	{
		
		/// <summary>
		/// A collection of information connected to this resource.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="connections")]
		public On_demand_genreMetadataConnections Connections { get; set; }
	}
	
	public class On_demand_genreMetadataConnections
	{
		
		/// <summary>
		/// Information about the On Demand pages related to this group.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pages")]
		public On_demand_genreMetadataConnectionsPages Pages { get; set; }
	}
	
	public class On_demand_genreMetadataConnectionsPages
	{
		
		/// <summary>
		/// An array of HTTP methods permitted on this URI.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="options")]
		public string[] Options { get; set; }
		
		/// <summary>
		/// The API URI that resolves to the connection data.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class On_demand_page
	{
		
		/// <summary>
		/// The background image for the On Demand page on Vimeo.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="background")]
		public Picture Background { get; set; }
		
		/// <summary>
		/// The primary and secondary colors used for rendering this On Demand page.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="colors")]
		public On_demand_pageColors Colors { get; set; }
		
		/// <summary>
		/// An array of the page's content ratings.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="content_rating")]
		public string[] Content_rating { get; set; }
		
		/// <summary>
		/// The time in ISO 8601 format when the page was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_time")]
		public string Created_time { get; set; }
		
		/// <summary>
		/// The description of this On Demand page.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The link to this page on its own domain.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="domain_link")]
		public string Domain_link { get; set; }
		
		/// <summary>
		/// Information about this On Demand page's episodes, if the page is for a series.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="episodes")]
		public On_demand_pageEpisodes Episodes { get; set; }
		
		/// <summary>
		/// This On Demand page's film, if it is a film.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="film")]
		public Video Film { get; set; }
		
		/// <summary>
		/// All the genres assigned to this page.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="genres")]
		public On_demand_genre[] Genres { get; set; }
		
		/// <summary>
		/// The link to the page on Vimeo.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="link")]
		public string Link { get; set; }
		
		/// <summary>
		/// Metadata about the On Demand page.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public On_demand_pageMetadata Metadata { get; set; }
		
		/// <summary>
		/// he time in ISO 8601 format when the page was last modified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modified_time")]
		public string Modified_time { get; set; }
		
		/// <summary>
		/// A descriptive title of this On Demand page.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The active poster for this On Demand page.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pictures")]
		public Picture Pictures { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="preorder")]
		public On_demand_pagePreorder Preorder { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="published")]
		public On_demand_pagePublished Published { get; set; }
		
		/// <summary>
		/// The rating of this page.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="rating")]
		public System.Nullable<System.Double> Rating { get; set; }
		
		/// <summary>
		/// The VOD resource key.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resource_key")]
		public string Resource_key { get; set; }
		
		/// <summary>
		/// The creator-designated SKU for this On Demand page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sku")]
		public string Sku { get; set; }
		
		/// <summary>
		/// Information about subscribing to this On Demand page, if enabled.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="subscription")]
		public On_demand_pageSubscription Subscription { get; set; }
		
		/// <summary>
		/// The graphical theme for this On Demand page.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="theme")]
		public string Theme { get; set; }
		
		/// <summary>
		/// The thumbnail image for the On Demand page on Vimeo.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="thumbnail")]
		public Picture Thumbnail { get; set; }
		
		/// <summary>
		/// The trailer for this On Demand page.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="trailer")]
		public Video Trailer { get; set; }
		
		/// <summary>
		/// Whether this On Demand page is for a film or a series.
		///
		///Option descriptions:
		/// * `film` - The On Demand page is for a film.
		/// * `series` - The On Demand page is for a series.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public On_demand_pageType Type { get; set; }
		
		/// <summary>
		/// The relative URI of the On Demand page.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
		
		/// <summary>
		/// The user who created this On Demand page.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="user")]
		public User User { get; set; }
	}
	
	public class On_demand_pageColors
	{
		
		/// <summary>
		/// The hexadecimal color code for the page's primary color.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="primary")]
		public string Primary { get; set; }
		
		/// <summary>
		/// The hexadecimal color code for the page's secondary color.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="secondary")]
		public string Secondary { get; set; }
	}
	
	public class On_demand_pageEpisodes
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="buy")]
		public On_demand_pageEpisodesBuy Buy { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="rent")]
		public On_demand_pageEpisodesRent Rent { get; set; }
	}
	
	public class On_demand_pageEpisodesBuy
	{
		
		/// <summary>
		/// Whether all the videos on this On Demand page can be purchased as a whole.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="active")]
		public bool Active { get; set; }
		
		/// <summary>
		/// The default price to buy an episode.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="price")]
		public System.Nullable<System.Double> Price { get; set; }
	}
	
	public class On_demand_pageEpisodesRent
	{
		
		/// <summary>
		/// Whether all the videos on this On Demand page can be rented as a whole.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="active")]
		public bool Active { get; set; }
		
		/// <summary>
		/// The rental period for the video:
		///
		///Option descriptions:
		/// * `1 day` - The rental period is one day.
		/// * `1 month` - The rental period is one month.
		/// * `1 week` - The rental period is one week.
		/// * `1 year` - The rental period is one year.
		/// * `2 day` - The rental period is two days.
		/// * `24 hour` - The rental period is 24 hours.
		/// * `3 day` - The rental period is three days.
		/// * `3 month` - The rental period is three months.
		/// * `30 day` - The rental period is 30 days.
		/// * `48 hour` - The rental period is 48 hours.
		/// * `6 month` - The rental period is six months.
		/// * `60 day` - The rental period is 60 days.
		/// * `7 day` - The rental period is 7 days.
		/// * `72 hour` - The rental period is 72 hours.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="period")]
		public System.Nullable<On_demand_pageEpisodesRentPeriod> Period { get; set; }
		
		/// <summary>
		/// The default price to rent an episode.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="price")]
		public System.Nullable<System.Double> Price { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum On_demand_pageEpisodesRentPeriod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1 day")]
		_1_day = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1 month")]
		_1_month = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1 week")]
		_1_week = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1 year")]
		_1_year = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2 day")]
		_2_day = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="24 hour")]
		_24_hour = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3 day")]
		_3_day = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3 month")]
		_3_month = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="30 day")]
		_30_day = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="48 hour")]
		_48_hour = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="6 month")]
		_6_month = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="60 day")]
		_60_day = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="7 day")]
		_7_day = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="72 hour")]
		_72_hour = 13,
	}
	
	public class On_demand_pageMetadata
	{
		
		/// <summary>
		/// A collection of information that is connected to this resource, including videos, genres, and pictures connections.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="connections")]
		public On_demand_pageMetadataConnections Connections { get; set; }
		
		/// <summary>
		/// The user's available purchase interactions.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="interactions")]
		public Purchase_interaction Interactions { get; set; }
	}
	
	public class On_demand_pageMetadataConnections
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public On_demand_pageMetadataConnectionsMetadata Metadata { get; set; }
	}
	
	public class On_demand_pageMetadataConnectionsMetadata
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="connections")]
		public On_demand_pageMetadataConnectionsMetadataConnections Connections { get; set; }
	}
	
	public class On_demand_pageMetadataConnectionsMetadataConnections
	{
		
		/// <summary>
		/// Information about the comments associated with this page.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="comments")]
		public On_demand_pageMetadataConnectionsMetadataConnectionsComments Comments { get; set; }
		
		/// <summary>
		/// Information about the genres associated with this page.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="genres")]
		public On_demand_pageMetadataConnectionsMetadataConnectionsGenres Genres { get; set; }
		
		/// <summary>
		/// Information about the likes associated with this page.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="likes")]
		public On_demand_pageMetadataConnectionsMetadataConnectionsLikes Likes { get; set; }
		
		/// <summary>
		/// Information about the pictures associated with this page.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pictures")]
		public On_demand_pageMetadataConnectionsMetadataConnectionsPictures Pictures { get; set; }
		
		/// <summary>
		/// Information about the seasons associated with this page.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="seasons")]
		public On_demand_pageMetadataConnectionsMetadataConnectionsSeasons Seasons { get; set; }
		
		/// <summary>
		/// Information about the videos associated with this page.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="videos")]
		public On_demand_pageMetadataConnectionsMetadataConnectionsVideos Videos { get; set; }
	}
	
	public class On_demand_pageMetadataConnectionsMetadataConnectionsComments
	{
		
		/// <summary>
		/// An array of HTTP methods permitted on this URI.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="options")]
		public string[] Options { get; set; }
		
		/// <summary>
		/// The total number of comments on this connection.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="total")]
		public double Total { get; set; }
		
		/// <summary>
		/// The API URI that resolves to the connection data.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	public class On_demand_pageMetadataConnectionsMetadataConnectionsGenres
	{
		
		/// <summary>
		/// An array of HTTP methods permitted on this URI.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="options")]
		public string[] Options { get; set; }
		
		/// <summary>
		/// The total number of genres on this connection.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="total")]
		public double Total { get; set; }
		
		/// <summary>
		/// The API URI that resolves to the connection data.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	public class On_demand_pageMetadataConnectionsMetadataConnectionsLikes
	{
		
		/// <summary>
		/// An array of HTTP methods permitted on this URI.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="options")]
		public string[] Options { get; set; }
		
		/// <summary>
		/// The total number of likes on this connection.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="total")]
		public double Total { get; set; }
		
		/// <summary>
		/// The API URI that resolves to the connection data.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	public class On_demand_pageMetadataConnectionsMetadataConnectionsPictures
	{
		
		/// <summary>
		/// An array of HTTP methods permitted on this URI.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="options")]
		public string[] Options { get; set; }
		
		/// <summary>
		/// The total number of pictures on this connection.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="total")]
		public double Total { get; set; }
		
		/// <summary>
		/// The API URI that resolves to the connection data.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	public class On_demand_pageMetadataConnectionsMetadataConnectionsSeasons
	{
		
		/// <summary>
		/// An array of HTTP methods permitted on this URI.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="options")]
		public string[] Options { get; set; }
		
		/// <summary>
		/// The total number of seasons on this connection.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="total")]
		public double Total { get; set; }
		
		/// <summary>
		/// The API URI that resolves to the connection data.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	public class On_demand_pageMetadataConnectionsMetadataConnectionsVideos
	{
		
		/// <summary>
		/// The total number of extra videos.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="extra_total")]
		public double Extra_total { get; set; }
		
		/// <summary>
		/// The total number of main videos.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="main_total")]
		public double Main_total { get; set; }
		
		/// <summary>
		/// An array of HTTP methods permitted on this URI.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="options")]
		public string[] Options { get; set; }
		
		/// <summary>
		/// The total number of videos on this connection.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="total")]
		public double Total { get; set; }
		
		/// <summary>
		/// The API URI that resolves to the connection data.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
		
		/// <summary>
		/// The total number of viewable videos.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="viewable_total")]
		public double Viewable_total { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Purchase_interaction
	{
		
		/// <summary>
		/// Information on purchasing this video.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buy")]
		public Purchase_interactionBuy Buy { get; set; }
		
		/// <summary>
		/// Information on renting this video.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rent")]
		public string Rent { get; set; }
		
		/// <summary>
		/// Information on subscribing to this video.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subscribe")]
		public Purchase_interactionSubscribe Subscribe { get; set; }
	}
	
	public class Purchase_interactionBuy
	{
		
		/// <summary>
		/// Whether the On Demand video for purchase has DRM.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="drm")]
		public System.Nullable<System.Boolean> Drm { get; set; }
	}
	
	public class Purchase_interactionSubscribe
	{
		
		/// <summary>
		/// Whether the On Demand subscription has DRM.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="drm")]
		public System.Nullable<System.Boolean> Drm { get; set; }
		
		/// <summary>
		/// The time in ISO 8601 format when the On Demand video will expire.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expires_time")]
		public string Expires_time { get; set; }
		
		/// <summary>
		/// The URL to purchase this On Demand subscription on Vimeo.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="link")]
		public string Link { get; set; }
		
		/// <summary>
		/// The time in ISO 8601 format when the On Demand was purchased.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="purchase_time")]
		public string Purchase_time { get; set; }
		
		/// <summary>
		/// The user's streaming access to this On Demand subscription:
		///
		///Option descriptions:
		/// * `available` - The On Demand subscription is available for streaming.
		/// * `purchased` - The On Demand subscription has been purchased.
		/// * `restricted` - Streaming for the On Demand subscription is restricted.
		/// * `unavailable` - The On Demand subscription is unavailable.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stream")]
		public VideoMetadataInteractionsBuyDownload Stream { get; set; }
		
		/// <summary>
		/// The On Demand subscription's product URI.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	public class On_demand_pagePreorder
	{
		
		/// <summary>
		/// Whether this page is available for preorder.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="active")]
		public bool Active { get; set; }
		
		/// <summary>
		/// The time in ISO 8601 format when the preorder was cancelled.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="cancel_time")]
		public string Cancel_time { get; set; }
		
		/// <summary>
		/// The time in ISO 8601 format when the preorder was released to the public.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="publish_time")]
		public string Publish_time { get; set; }
		
		/// <summary>
		/// The time in ISO 8601 format when the preorder started.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="time")]
		public string Time { get; set; }
	}
	
	public class On_demand_pagePublished
	{
		
		/// <summary>
		/// Whether this On Demand page has been published.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public bool Enabled { get; set; }
		
		/// <summary>
		/// The time in IS 8601 format when this page was published.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="time")]
		public string Time { get; set; }
	}
	
	public class On_demand_pageSubscription
	{
		
		/// <summary>
		/// Whether this product is active.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="active")]
		public bool Active { get; set; }
		
		/// <summary>
		/// The link to this product on Vimeo.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="link")]
		public string Link { get; set; }
		
		/// <summary>
		/// The product's rental period.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="period")]
		public string Period { get; set; }
		
		/// <summary>
		/// The accepted currencies and respective pricing for this product.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="price")]
		public string Price { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum On_demand_pageType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		film = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		series = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class On_demand_promotion
	{
		
		/// <summary>
		/// The type of access that this promotion grants:
		///
		///Option descriptions:
		/// * `default` - Grants discounts on existing product offerings.
		/// * `vip` - Grants free access either to VOD content before it is released or to access types that aren't part of the existing product offerings.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="access_type")]
		public On_demand_promotionAccess_type Access_type { get; set; }
		
		/// <summary>
		/// The type of discount for which this promotion can be used.
		///
		///Option descriptions:
		/// * `dollars` - The discount is a certain fixed amount.
		/// * `free` - The discount is the full purchase price. VIP access promotions always use this discount type.
		/// * `percent` - The discount is a certain percentage of the full price.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="discount_type")]
		public On_demand_promotionDiscount_type Discount_type { get; set; }
		
		/// <summary>
		/// Whether this promotion grants download access to On Demand content.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="download")]
		public bool Download { get; set; }
		
		/// <summary>
		/// The prefix string for batch codes, or the null value for single codes.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
		
		/// <summary>
		/// The video's metadata.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public On_demand_promotionMetadata Metadata { get; set; }
		
		/// <summary>
		/// The percentage amount that is deducted from the product price.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="percent_off")]
		public double Percent_off { get; set; }
		
		/// <summary>
		/// The type of product to which this promotion can be applied. Only `buy` and `rent` are available for the VIP access type:
		///
		///Option descriptions:
		/// * `any` - The promotion can be applied to any product.
		/// * `buy` - The promotion can be applied to a buyable single video.
		/// * `buy_episode` - The promotion can be applied to a buyable single episode.
		/// * `rent` - The promotion can be applied to a rentable single video.
		/// * `rent_episode` - The promotion can be applied to a rentable single episode.
		/// * `subscribe` - The promotion can be applied to a subscription.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="product_type")]
		public On_demand_promotionProduct_type Product_type { get; set; }
		
		/// <summary>
		/// The amount of time that the user has access to the VOD content after redeeming a promo code.
		///
		///Option descriptions:
		/// * `1_week` - Access lasts for one week.
		/// * `1_year` - Access lasts for one year.
		/// * `24_hour` - Access lasts for 24 hours.
		/// * `30_days` - Access lasts for 30 days.
		/// * `3_month` - Access lasts for 3 months.
		/// * `48_hour` - Access lasts for 48 hours.
		/// * `6_month` - Access lasts for 6 months.
		/// * `72_hour` - Access lasts for 72 hours.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="stream_period")]
		public System.Nullable<On_demand_promotionStream_period> Stream_period { get; set; }
		
		/// <summary>
		/// The total amount of times that this promotion can be used.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="total")]
		public double Total { get; set; }
		
		/// <summary>
		/// The way in which this promotion can generate promo codes:
		///
		///Option descriptions:
		/// * `batch` - Provides many unique promo codes that can only be used once each.
		/// * `batch_prefix` - Similar to `batch`, except that all codes have a similar prefix string. This mode is deprecated, yet it may still appear for some users.
		/// * `single` - Provides a single promo code with many uses.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public On_demand_promotionType Type { get; set; }
		
		/// <summary>
		/// The promotion's canonical relative URI.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum On_demand_promotionAccess_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="default")]
		_default = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		vip = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum On_demand_promotionDiscount_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		dollars = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		free = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		percent = 2,
	}
	
	public class On_demand_promotionMetadata
	{
		
		/// <summary>
		/// A list of resource URIs related to the On Demand promotion.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="connections")]
		public On_demand_promotionMetadataConnections Connections { get; set; }
	}
	
	public class On_demand_promotionMetadataConnections
	{
		
		/// <summary>
		/// Information about the codes associated with this promotion.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="codes")]
		public On_demand_promotionMetadataConnectionsCodes Codes { get; set; }
	}
	
	public class On_demand_promotionMetadataConnectionsCodes
	{
		
		/// <summary>
		/// An array of HTTP methods permitted on this URI.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="options")]
		public string[] Options { get; set; }
		
		/// <summary>
		/// The total number of uses on this connection.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="total")]
		public double Total { get; set; }
		
		/// <summary>
		/// The API URI that resolves to the connection data.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum On_demand_promotionProduct_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		any = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		buy = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		buy_episode = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		rent = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		rent_episode = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		subscribe = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum On_demand_promotionStream_period
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1_week")]
		_1_week = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1_year")]
		_1_year = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="24_hour")]
		_24_hour = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="30_days")]
		_30_days = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3_month")]
		_3_month = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="48_hour")]
		_48_hour = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="6_month")]
		_6_month = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="72_hour")]
		_72_hour = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum On_demand_promotionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		batch = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		batch_prefix = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		single = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class On_demand_promotion_code
	{
		
		/// <summary>
		/// A promotion code that can be redeemed on Vimeo.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// A link to redeem the promotion code instantly.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="link")]
		public string Link { get; set; }
		
		/// <summary>
		/// The total amount of times this code can be used.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="max_uses")]
		public double Max_uses { get; set; }
		
		/// <summary>
		/// The number of times that this code has been used.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uses")]
		public double Uses { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class On_demand_region
	{
		
		/// <summary>
		/// The ISO 3166-1 alpha-2 code for this country.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="country_code")]
		public string Country_code { get; set; }
		
		/// <summary>
		/// The descriptive name of this country.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="country_name")]
		public string Country_name { get; set; }
		
		/// <summary>
		/// The region container's relative URI.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class On_demand_season
	{
		
		/// <summary>
		/// The description for this season.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public On_demand_seasonMetadata Metadata { get; set; }
		
		/// <summary>
		/// The descriptive name of the season.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The position of the season relative to other seasons in the series.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="position")]
		public double Position { get; set; }
		
		/// <summary>
		/// The unique identifier for this On Demand season.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resource_key")]
		public string Resource_key { get; set; }
		
		/// <summary>
		/// The type of season.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// The season container's relative URI.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
		
		/// <summary>
		/// The creator of this On Demand page.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="user")]
		public User User { get; set; }
	}
	
	public class On_demand_seasonMetadata
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="connections")]
		public On_demand_seasonMetadataConnections Connections { get; set; }
	}
	
	public class On_demand_seasonMetadataConnections
	{
		
		/// <summary>
		/// The Videos connection.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="videos")]
		public On_demand_seasonMetadataConnectionsVideos Videos { get; set; }
	}
	
	public class On_demand_seasonMetadataConnectionsVideos
	{
		
		/// <summary>
		/// An array of HTTP methods permitted on this URI.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="options")]
		public string[] Options { get; set; }
		
		/// <summary>
		/// The total number of videos on this connection.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="total")]
		public double Total { get; set; }
		
		/// <summary>
		/// The API URI that resolves to the connection ∂data.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class On_demand_video
	{
		
		/// <summary>
		/// Information about purchasing this video.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="buy")]
		public On_demand_videoBuy Buy { get; set; }
		
		/// <summary>
		/// Description of the On Demand video.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The duration of the On Demand video.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="duration")]
		public string Duration { get; set; }
		
		/// <summary>
		/// The episode number of the On Demand video.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="episode")]
		public System.Nullable<System.Double> Episode { get; set; }
		
		/// <summary>
		/// An object containing information about how the authenticated user can interact with this On Demand page.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="interactions")]
		public On_demand_videoInteractions Interactions { get; set; }
		
		/// <summary>
		/// The link to this video on Vimeo.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="link")]
		public string Link { get; set; }
		
		/// <summary>
		/// Metadata information about this video.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public On_demand_videoMetadata Metadata { get; set; }
		
		/// <summary>
		/// The title of the On Demand video.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// An array of HTTP methods permitted on this URI.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="options")]
		public string[] Options { get; set; }
		
		/// <summary>
		/// The active picture for this video.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pictures")]
		public Picture Pictures { get; set; }
		
		/// <summary>
		/// The user's most recent play position in seconds for this video.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="play_progress")]
		public double Play_progress { get; set; }
		
		/// <summary>
		/// Describes the manual position of this video relative to the other videos owned by this On Demand page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="position")]
		public System.Nullable<System.Double> Position { get; set; }
		
		/// <summary>
		/// The time in ISO 8601 format when the On Demand video was created or published.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="release_date")]
		public string Release_date { get; set; }
		
		/// <summary>
		/// The year that this On Demand video was released.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="release_year")]
		public System.Nullable<System.Double> Release_year { get; set; }
		
		/// <summary>
		/// Information about renting this video.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="rent")]
		public On_demand_videoRent Rent { get; set; }
		
		/// <summary>
		/// The type of the On Demand video:
		///
		///Option descriptions:
		/// * `extra` - The On Demand video is an extra feature.
		/// * `main` - The On Demand video is a main feature.
		/// * `trailer` - The On Demand video is a trailer.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public On_demand_videoType Type { get; set; }
		
		/// <summary>
		/// The video container's relative URI.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
		
		/// <summary>
		/// The owner of the video.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="user")]
		public User User { get; set; }
	}
	
	public class On_demand_videoBuy
	{
		
		/// <summary>
		/// Whether this On Demand video can be purchased.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="active")]
		public bool Active { get; set; }
		
		/// <summary>
		/// A map of currency type to price.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="price")]
		public string Price { get; set; }
		
		/// <summary>
		/// Whether this On Demand video has been purchased.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="purchased")]
		public System.Nullable<System.Boolean> Purchased { get; set; }
	}
	
	public class On_demand_videoInteractions
	{
		
		/// <summary>
		/// Information about how the authenticated user can interact with the connection to the video's On Demand page.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="page")]
		public On_demand_videoInteractionsPage Page { get; set; }
	}
	
	public class On_demand_videoInteractionsPage
	{
		
		/// <summary>
		/// Whether this On Demand page was added.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="added")]
		public bool Added { get; set; }
		
		/// <summary>
		/// An array of HTTP methods permitted on this URI.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="options")]
		public string[] Options { get; set; }
		
		/// <summary>
		/// The URI to access the On Demand page.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	public class On_demand_videoMetadata
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="connections")]
		public On_demand_videoMetadataConnections Connections { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="interactions")]
		public On_demand_videoMetadataInteractions Interactions { get; set; }
	}
	
	public class On_demand_videoMetadataConnections
	{
		
		/// <summary>
		/// Information about this season.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="season")]
		public On_demand_videoMetadataConnectionsSeason Season { get; set; }
	}
	
	public class On_demand_videoMetadataConnectionsSeason
	{
		
		/// <summary>
		/// The name of the season on this connection.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// An array of HTTP methods permitted on this URI.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="options")]
		public string[] Options { get; set; }
		
		/// <summary>
		/// The API URI that resolves to the connection data.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	public class On_demand_videoMetadataInteractions
	{
		
		/// <summary>
		/// Information about the user's Like interactions with this video.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="likes")]
		public On_demand_videoMetadataInteractionsLikes Likes { get; set; }
		
		/// <summary>
		/// Information about the user's Watch Later interactions with this video.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="watchlater")]
		public On_demand_videoMetadataInteractionsWatchlater Watchlater { get; set; }
	}
	
	public class On_demand_videoMetadataInteractionsLikes
	{
		
		/// <summary>
		/// Whether the user has liked this video.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="added")]
		public bool Added { get; set; }
		
		/// <summary>
		/// The time in ISO 8601 format when the user liked this video.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="added_time")]
		public string Added_time { get; set; }
		
		/// <summary>
		/// The URI for the user to like this video.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	public class On_demand_videoMetadataInteractionsWatchlater
	{
		
		/// <summary>
		/// Whether the user has added this video to their Watch Later queue.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="added")]
		public bool Added { get; set; }
		
		/// <summary>
		/// The time in ISO 8601 format when the user added this video to their Watch Later queue.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="added_time")]
		public string Added_time { get; set; }
		
		/// <summary>
		/// The URI for the user to add this video to their Watch Later queue.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	public class On_demand_videoRent
	{
		
		/// <summary>
		/// Whether this On Demand video can be rented.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="active")]
		public bool Active { get; set; }
		
		/// <summary>
		/// A map of currency type to price.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="price")]
		public string Price { get; set; }
		
		/// <summary>
		/// Whether this On Demand video has been rented.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="purchased")]
		public System.Nullable<System.Boolean> Purchased { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum On_demand_videoType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		extra = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		main = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		trailer = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Play
	{
		
		/// <summary>
		/// Progressive files.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="progressive")]
		public PlayProgressive[] PlayProgressive { get; set; }
		
		/// <summary>
		/// The play status of the video:
		///
		///Option descriptions:
		/// * `playable` - The video is playable.
		/// * `purchase_required` - The video must be purchased.
		/// * `restricted` - Playback for the video is restricted.
		/// * `unavailable` - The video is unavailable.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public PlayStatus Status { get; set; }
	}
	
	public class PlayProgressive
	{
		
		/// <summary>
		/// The time in ISO 8601 format when this video file was created.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="created_time")]
		public string Created_time { get; set; }
		
		/// <summary>
		/// The FPS of the video file.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fps")]
		public double Fps { get; set; }
		
		/// <summary>
		/// The height in pixels of the video.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="height")]
		public System.Nullable<System.Double> Height { get; set; }
		
		/// <summary>
		/// The direct link to this video file.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="link")]
		public string Link { get; set; }
		
		/// <summary>
		/// The time in ISO 8601 format when the link to this video file expires.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="link_expiration_time")]
		public string Link_expiration_time { get; set; }
		
		/// <summary>
		/// The URLs for logging events.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="log")]
		public string Log { get; set; }
		
		/// <summary>
		/// The MD5 hash of the video file.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="md5")]
		public string Md5 { get; set; }
		
		/// <summary>
		/// The file size in bytes of this video.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="size")]
		public System.Nullable<System.Double> Size { get; set; }
		
		/// <summary>
		/// The type of the video file:
		///
		///Option descriptions:
		/// * `source` - The video is a source file.
		/// * `video/mp4` - The video is in MP4 format.
		/// * `video/webm` - The video is in WebM format.
		/// * `vp6/x-video` - The video is in VP6 format.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<PlayProgressiveType> Type { get; set; }
		
		/// <summary>
		/// The width in pixels of the video.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="width")]
		public System.Nullable<System.Double> Width { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum PlayProgressiveType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		source = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="video/mp4")]
		video_mp4 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="video/webm")]
		video_webm = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="vp6/x-video")]
		vp6_xMinusvideo = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum PlayStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		playable = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		purchase_required = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		restricted = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unavailable = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Portfolio
	{
		
		/// <summary>
		/// The time in ISO 8601 format when the portfolio was created.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="created_time")]
		public string Created_time { get; set; }
		
		/// <summary>
		/// The portfolio's description.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The link to the portfolio.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="link")]
		public string Link { get; set; }
		
		/// <summary>
		/// Metadata about the album.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public PortfolioMetadata Metadata { get; set; }
		
		/// <summary>
		/// The time in ISO 8601 format when the portfolio's data was last modified.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="modified_time")]
		public string Modified_time { get; set; }
		
		/// <summary>
		/// The display name of the portfolio.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The default video sort order for the portfolio:
		///
		///Option descriptions:
		/// * `alphabetical` - The default sort order is alphabetical by name.
		/// * `clips` - The default sort order is video creation date.
		/// * `modified` - The default sort order is the order in which the videos were modified.
		/// * `recent` - The default sort order is the order in which the videos were added.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sort")]
		public PortfolioSort Sort { get; set; }
		
		/// <summary>
		/// The canonical relative URI of the portfolio.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	public class PortfolioMetadata
	{
		
		/// <summary>
		/// A list of resource URIs related to the album.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="connections")]
		public PortfolioMetadataConnections Connections { get; set; }
	}
	
	public class PortfolioMetadataConnections
	{
		
		/// <summary>
		/// Information about the videos contained within this portfolio.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="videos")]
		public PortfolioMetadataConnectionsVideos Videos { get; set; }
	}
	
	public class PortfolioMetadataConnectionsVideos
	{
		
		/// <summary>
		/// An array of HTTP methods permitted on this URI.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="options")]
		public string[] Options { get; set; }
		
		/// <summary>
		/// The total number of videos on this connection.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="total")]
		public double Total { get; set; }
		
		/// <summary>
		/// The API URI that resolves to the connection data.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum PortfolioSort
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		alphabetical = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		clips = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		modified = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		recent = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Presets
	{
		
		/// <summary>
		/// Metadata about the album.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public PresetsMetadata Metadata { get; set; }
		
		/// <summary>
		/// The display name of the presets group.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The contents of the presets group.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="settings")]
		public PresetsSettings Settings { get; set; }
		
		/// <summary>
		/// The canonical relative URI of the presets object.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
		
		/// <summary>
		/// The owner of the preset.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="user")]
		public User User { get; set; }
	}
	
	public class PresetsMetadata
	{
		
		/// <summary>
		/// A list of resource URIs related to the album.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="connections")]
		public PresetsMetadataConnections Connections { get; set; }
	}
	
	public class PresetsMetadataConnections
	{
		
		/// <summary>
		/// Information about the videos in this preset.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="videos")]
		public PresetsMetadataConnectionsVideos Videos { get; set; }
	}
	
	public class PresetsMetadataConnectionsVideos
	{
		
		/// <summary>
		/// An array of HTTP methods permitted on this URI.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="options")]
		public string[] Options { get; set; }
		
		/// <summary>
		/// The total number of videos on this connection.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="total")]
		public double Total { get; set; }
		
		/// <summary>
		/// The API URI that resolves to the connection data.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	public class PresetsSettings
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="buttons")]
		public PresetsSettingsButtons Buttons { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="logos")]
		public PresetsSettingsLogos Logos { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="outro")]
		public PresetsSettingsOutro Outro { get; set; }
	}
	
	public class PresetsSettingsButtons
	{
		
		/// <summary>
		/// Whether the preset includes Embed button settings.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="embed")]
		public bool Embed { get; set; }
		
		/// <summary>
		/// Whether the preset includes HD button settings.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="hd")]
		public bool Hd { get; set; }
		
		/// <summary>
		/// Whether the preset includes Like button settings.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="like")]
		public bool Like { get; set; }
		
		/// <summary>
		/// Whether the present includes Share button settings.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="share")]
		public bool Share { get; set; }
		
		/// <summary>
		/// Whether the preset includes Vote button settings.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="vote")]
		public bool Vote { get; set; }
		
		/// <summary>
		/// Whether the preset includes Watch Later button settings.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="watchlater")]
		public bool Watchlater { get; set; }
	}
	
	public class PresetsSettingsLogos
	{
		
		/// <summary>
		/// Whether the preset includes custom logo settings.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="custom")]
		public bool Custom { get; set; }
		
		/// <summary>
		/// Whether the present includes sticky custom logo settings.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sticky_custom")]
		public bool Sticky_custom { get; set; }
		
		/// <summary>
		/// Whether the preset includes Vimeo logo settings.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="vimeo")]
		public bool Vimeo { get; set; }
	}
	
	public class PresetsSettingsOutro
	{
		
		/// <summary>
		/// A comma-separated list of video URIs. Present only if the type is `uploaded_clips`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clips")]
		public string Clips { get; set; }
		
		/// <summary>
		/// The outro link settings. Present only if the type is `link`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="link")]
		public PresetsSettingsOutroLink Link { get; set; }
		
		/// <summary>
		/// The outro text. Present only if the type is `text`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
		
		/// <summary>
		/// The preset outro type:
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public PresetsSettingsOutroType Type { get; set; }
		
		/// <summary>
		/// A comma-separated list of video URIs. Present only if type is `no idea`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="videos")]
		public string Videos { get; set; }
	}
	
	public class PresetsSettingsOutroLink
	{
		
		/// <summary>
		/// The name of the outro link.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The URL of the outro link.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum PresetsSettingsOutroType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		link = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="no idea")]
		no_idea = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		text = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		uploaded_clips = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		uploaded_videos = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Text_track
	{
		
		/// <summary>
		/// Whether this text track is active.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="active")]
		public bool Active { get; set; }
		
		/// <summary>
		/// The read-only URL of the text track file, intended for use with HLS playback.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="hls_link")]
		public string Hls_link { get; set; }
		
		/// <summary>
		/// The time in ISO 8601 format when the read-only HLS playback text track file expires.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="hls_link_expires_time")]
		public string Hls_link_expires_time { get; set; }
		
		/// <summary>
		/// The language code for this text track. To see a full list, request
		///`/languages?filter=texttrack`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="language")]
		public string Language { get; set; }
		
		/// <summary>
		/// The read-only URL of the text track file. You can upload to this link when you create it for the first time.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="link")]
		public string Link { get; set; }
		
		/// <summary>
		/// The time in ISO 8601 format when the text track link expires.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="link_expires_time")]
		public string Link_expires_time { get; set; }
		
		/// <summary>
		/// The descriptive name of this text track.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The type of the text track:
		///
		///Option descriptions:
		/// * `captions` - The text track is for captions.
		/// * `subtitles` - The text track is for subtitles.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<Text_trackType> Type { get; set; }
		
		/// <summary>
		/// The relative URI of the text track.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum Text_trackType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		captions = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		subtitles = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Upload_attempt
	{
		
		/// <summary>
		/// The video to upload.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clip")]
		public Video Clip { get; set; }
		
		/// <summary>
		/// The completion URI of the upload.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="complete_uri")]
		public string Complete_uri { get; set; }
		
		/// <summary>
		/// The HTML upload form.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="form")]
		public string Form { get; set; }
		
		/// <summary>
		/// The ticket identifier string for the upload.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ticket_id")]
		public string Ticket_id { get; set; }
		
		/// <summary>
		/// The upload URL.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="upload_link")]
		public string Upload_link { get; set; }
		
		/// <summary>
		/// The upload URI.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
		
		/// <summary>
		/// The owner of the uploaded video.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="user")]
		public User User { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Video_versions
	{
		
		/// <summary>
		/// Whether this video version is the currently active one.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="active")]
		public bool Active { get; set; }
		
		/// <summary>
		/// The API app associated with the video version.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="app")]
		public Api_app App { get; set; }
		
		/// <summary>
		/// The time in ISO 8601 for when the video version was created.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="created_time")]
		public string Created_time { get; set; }
		
		/// <summary>
		/// The duration of the video version in seconds.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="duration")]
		public System.Nullable<System.Double> Duration { get; set; }
		
		/// <summary>
		/// The file name of the video version.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="filename")]
		public string Filename { get; set; }
		
		/// <summary>
		/// The size in byes of the video version file.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="filesize")]
		public System.Nullable<System.Double> Filesize { get; set; }
		
		/// <summary>
		/// The video version's metadata.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public Video_versionsMetadata Metadata { get; set; }
		
		/// <summary>
		/// The time in ISO 8601 format when the video version was last modified.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="modified_time")]
		public string Modified_time { get; set; }
		
		/// <summary>
		/// The Play representation.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="play")]
		public Play Play { get; set; }
		
		/// <summary>
		/// The upload information for this version.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="upload")]
		public Video_versionsUpload Upload { get; set; }
		
		/// <summary>
		/// The time in ISO 8601 format when the video version was uploaded.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="upload_date")]
		public string Upload_date { get; set; }
		
		/// <summary>
		/// The version's canonical relative URI.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
		
		/// <summary>
		/// The owner of the video version.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="user")]
		public User User { get; set; }
	}
	
	public class Video_versionsMetadata
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="connections")]
		public Video_versionsMetadataConnections Connections { get; set; }
	}
	
	public class Video_versionsMetadataConnections
	{
		
		/// <summary>
		/// Data from video associated with version
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="video")]
		public Video_versionsMetadataConnectionsVideo Video { get; set; }
	}
	
	public class Video_versionsMetadataConnectionsVideo
	{
		
		/// <summary>
		/// An array of HTTP methods permitted on this URI.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="options")]
		public string[] Options { get; set; }
		
		/// <summary>
		/// The total number of videos on this connection.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="total")]
		public double Total { get; set; }
		
		/// <summary>
		/// The API URI that resolves to the connection data.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	public class Video_versionsUpload
	{
		
		/// <summary>
		/// The approach for uploading the video.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="approach")]
		public VideoUploadApproach Approach { get; set; }
		
		/// <summary>
		/// The URI for completing the upload.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="complete_uri")]
		public string Complete_uri { get; set; }
		
		/// <summary>
		/// The HTML form for uploading a video through the post approach.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="form")]
		public string Form { get; set; }
		
		/// <summary>
		/// The link of the video to capture through the pull approach.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="link")]
		public string Link { get; set; }
		
		/// <summary>
		/// The redirect URL for the upload app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="redirect_url")]
		public string Redirect_url { get; set; }
		
		/// <summary>
		/// The file size in bytes of the uploaded video.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="size")]
		public System.Nullable<System.Double> Size { get; set; }
		
		/// <summary>
		/// The status code for the availability of the uploaded video:
		///
		///Option descriptions:
		/// * `complete` - The upload is complete.
		/// * `error` - The upload ended with an error.
		/// * `in_progress` - The upload is underway.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public VideoTranscodeStatus Status { get; set; }
		
		/// <summary>
		/// The link for sending video file data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="upload_link")]
		public string Upload_link { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Get an API specification
		/// Get_endpoints 
		/// </summary>
		/// <param name="openapi">Return an OpenAPI specification.</param>
		/// <returns>Standard request.</returns>
		public async Task Get_endpointsAsync(bool openapi, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "?openapi="+openapi;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all categories
		/// This method gets all existing categories.
		/// Get_categories categories
		/// </summary>
		/// <param name="direction">The sort direction of the results.</param>
		/// <param name="page">The page number of the results to show.</param>
		/// <param name="per_page">The number of items to show on each page of results, up to a maximum of 100.</param>
		/// <param name="sort">The way to sort the results.</param>
		/// <returns>The categories were returned.</returns>
		public async Task Get_categoriesAsync(Get_categoriesDirection direction, double page, double per_page, Get_categoriesSort sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "categories?direction=" + direction+"&page="+page+"&per_page="+per_page+"&sort=" + sort;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a specific category
		/// Get_category categories/{category}
		/// </summary>
		/// <param name="category">The name of the category.</param>
		/// <returns>The category was returned.</returns>
		public async Task Get_categoryAsync(string category, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "categories/"+ (category==null? "" : System.Uri.EscapeDataString(category));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the channels in a category
		/// Get_category_channels categories/{category}/channels
		/// </summary>
		/// <param name="category">The name of the category.</param>
		/// <param name="direction">The sort direction of the results.</param>
		/// <param name="page">The page number of the results to show.</param>
		/// <param name="per_page">The number of items to show on each page of results, up to a maximum of 100.</param>
		/// <param name="query">The search query to use to filter the results.</param>
		/// <param name="sort">The way to sort the results.</param>
		/// <returns>The channels were returned.</returns>
		public async Task Get_category_channelsAsync(string category, Get_categoriesDirection direction, double page, double per_page, string query, Get_category_channelsSort sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "categories/"+ (category==null? "" : System.Uri.EscapeDataString(category))+"/channels&direction=" + direction+"&page="+page+"&per_page="+per_page+"&query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&sort=" + sort;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the groups in a category
		/// Get_category_groups categories/{category}/groups
		/// </summary>
		/// <param name="category">The name of the category.</param>
		/// <param name="direction">The sort direction of the results.</param>
		/// <param name="page">The page number of the results to show.</param>
		/// <param name="per_page">The number of items to show on each page of results, up to a maximum of 100.</param>
		/// <param name="query">The search query to use to filter the results.</param>
		/// <param name="sort">The way to sort the results.</param>
		/// <returns>The groups were returned.</returns>
		public async Task Get_category_groupsAsync(string category, Get_categoriesDirection direction, double page, double per_page, string query, Get_category_groupsSort sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "categories/"+ (category==null? "" : System.Uri.EscapeDataString(category))+"/groups&direction=" + direction+"&page="+page+"&per_page="+per_page+"&query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&sort=" + sort;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the videos in a category
		/// Get_category_videos categories/{category}/videos
		/// </summary>
		/// <param name="category">The name of the category.</param>
		/// <param name="direction">The sort direction of the results.</param>
		/// <param name="filter">The attribute by which to filter the results.
		///
		///Option descriptions:
		/// * `conditional_featured` - Featured (promoted) videos
		///</param>
		/// <param name="filter_embeddable">Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). Required only if **filter** is `embeddable`.</param>
		/// <param name="page">The page number of the results to show.</param>
		/// <param name="per_page">The number of items to show on each page of results, up to a maximum of 100.</param>
		/// <param name="query">The search query to use to filter the results.</param>
		/// <param name="sort">The way to sort the results.</param>
		/// <returns>The videos were returned.</returns>
		public async Task Get_category_videosAsync(string category, Get_categoriesDirection direction, Get_category_videosFilter filter, bool filter_embeddable, double page, double per_page, string query, Get_category_videosSort sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "categories/"+ (category==null? "" : System.Uri.EscapeDataString(category))+"/videos&direction=" + direction+"&filter=" + filter+"&filter_embeddable="+filter_embeddable+"&page="+page+"&per_page="+per_page+"&query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&sort=" + sort;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Check for a video in a category
		/// Check_category_for_video categories/{category}/videos/{video_id}
		/// </summary>
		/// <param name="category">The name of the category.</param>
		/// <param name="video_id">The ID of the video.</param>
		/// <returns>The video belongs to the category.</returns>
		public async Task Check_category_for_videoAsync(string category, double video_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "categories/"+ (category==null? "" : System.Uri.EscapeDataString(category))+"/videos/"+video_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all channels
		/// Get_channels channels
		/// </summary>
		/// <param name="direction">The sort direction of the results.</param>
		/// <param name="filter">The attribute by which to filter the results.</param>
		/// <param name="page">The page number of the results to show.</param>
		/// <param name="per_page">The number of items to show on each page of results, up to a maximum of 100.</param>
		/// <param name="query">The search query to use to filter the results.</param>
		/// <param name="sort">The way to sort the results.
		///
		///Option descriptions:
		/// * `relevant` - Relevant sorting is available only for search queries.
		///</param>
		/// <returns>The channels were returned.</returns>
		public async Task Get_channelsAsync(Get_categoriesDirection direction, Get_channelsFilter filter, double page, double per_page, string query, Get_channelsSort sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "channels?direction=" + direction+"&filter=" + filter+"&page="+page+"&per_page="+per_page+"&query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&sort=" + sort;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a channel
		/// Delete_channel channels/{channel_id}
		/// </summary>
		/// <param name="channel_id">The ID of the channel.</param>
		public async Task Delete_channelAsync(double channel_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "channels/"+channel_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a specific channel
		/// Get_channel channels/{channel_id}
		/// </summary>
		/// <param name="channel_id">The ID of the channel.</param>
		/// <returns>The channel was returned.</returns>
		public async Task Get_channelAsync(double channel_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "channels/"+channel_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the categories in a channel
		/// This method gets all the categories in the specified channel.
		/// Get_channel_categories channels/{channel_id}/categories
		/// </summary>
		/// <param name="channel_id">The ID of the channel.</param>
		/// <returns>The categories were returned.</returns>
		public async Task Get_channel_categoriesAsync(double channel_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "channels/"+channel_id+"/categories";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add a list of categories to a channel
		/// This method adds multiple categories to the specified channel.
		/// Add_channel_categories channels/{channel_id}/categories
		/// </summary>
		/// <param name="channel_id">The ID of the channel.</param>
		public async Task Add_channel_categoriesAsync(double channel_id, Add_channel_categoriesPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "channels/"+channel_id+"/categories";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Remove a category from a channel
		/// This method removes a single category from the specified channel.
		/// Delete_channel_category channels/{channel_id}/categories/{category}
		/// </summary>
		/// <param name="category">The name of the category.</param>
		/// <param name="channel_id">The ID of the channel.</param>
		public async Task Delete_channel_categoryAsync(string category, double channel_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "channels/"+channel_id+"/categories/"+ (category==null? "" : System.Uri.EscapeDataString(category));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Categorize a channel
		/// This method adds a channel to a category.
		/// Categorize_channel channels/{channel_id}/categories/{category}
		/// </summary>
		/// <param name="category">The name of the category.</param>
		/// <param name="channel_id">The ID of the channel.</param>
		public async Task Categorize_channelAsync(string category, double channel_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "channels/"+channel_id+"/categories/"+ (category==null? "" : System.Uri.EscapeDataString(category));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove a list of channel moderators
		/// Remove_channel_moderators channels/{channel_id}/moderators
		/// </summary>
		/// <param name="channel_id">The ID of the channel.</param>
		public async Task Remove_channel_moderatorsAsync(double channel_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "channels/"+channel_id+"/moderators";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the moderators in a channel
		/// Get_channel_moderators channels/{channel_id}/moderators
		/// </summary>
		/// <param name="channel_id">The ID of the channel.</param>
		/// <param name="direction">The sort direction of the results.</param>
		/// <param name="page">The page number of the results to show.</param>
		/// <param name="per_page">The number of items to show on each page of results, up to a maximum of 100.</param>
		/// <param name="query">The search query to use to filter the results.</param>
		/// <param name="sort">The way to sort the results.</param>
		/// <returns>The moderators were returned.</returns>
		public async Task Get_channel_moderatorsAsync(double channel_id, Get_categoriesDirection direction, double page, double per_page, string query, Get_channel_moderatorsSort sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "channels/"+channel_id+"/moderators?direction=" + direction+"&page="+page+"&per_page="+per_page+"&query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&sort=" + sort;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Replace the moderators of a channel
		/// Replace_channel_moderators channels/{channel_id}/moderators
		/// </summary>
		/// <param name="channel_id">The ID of the channel.</param>
		/// <returns>The moderators were replaced.</returns>
		public async Task<User[]> Replace_channel_moderatorsAsync(double channel_id, Replace_channel_moderatorsPatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "channels/"+channel_id+"/moderators";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<User[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Add a list of channel moderators
		/// Add_channel_moderators channels/{channel_id}/moderators
		/// </summary>
		/// <param name="channel_id">The ID of the channel.</param>
		/// <returns>The moderators were added.</returns>
		public async Task Add_channel_moderatorsAsync(double channel_id, Add_channel_moderatorsPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "channels/"+channel_id+"/moderators";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Remove a specific channel moderator
		/// Remove_channel_moderator channels/{channel_id}/moderators/{user_id}
		/// </summary>
		/// <param name="channel_id">The ID of the channel.</param>
		/// <param name="user_id">The ID of the user.</param>
		public async Task Remove_channel_moderatorAsync(double channel_id, double user_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "channels/"+channel_id+"/moderators/"+user_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a specific channel moderator
		/// Get_channel_moderator channels/{channel_id}/moderators/{user_id}
		/// </summary>
		/// <param name="channel_id">The ID of the channel.</param>
		/// <param name="user_id">The ID of the user.</param>
		/// <returns>The moderator was returned.</returns>
		public async Task Get_channel_moderatorAsync(double channel_id, double user_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "channels/"+channel_id+"/moderators/"+user_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add a specific channel moderator
		/// Add_channel_moderator channels/{channel_id}/moderators/{user_id}
		/// </summary>
		/// <param name="channel_id">The ID of the channel.</param>
		/// <param name="user_id">The ID of the user.</param>
		public async Task Add_channel_moderatorAsync(double channel_id, double user_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "channels/"+channel_id+"/moderators/"+user_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the users who can view a private channel
		/// This method gets all the users who have access to the specified private channel.
		/// Get_channel_privacy_users channels/{channel_id}/privacy/users
		/// </summary>
		/// <param name="channel_id">The ID of the channel.</param>
		/// <param name="direction">The sort direction of the results.</param>
		/// <param name="page">The page number of the results to show.</param>
		/// <param name="per_page">The number of items to show on each page of results, up to a maximum of 100.</param>
		/// <returns>The users were returned.</returns>
		public async Task Get_channel_privacy_usersAsync(double channel_id, Get_categoriesDirection direction, double page, double per_page, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "channels/"+channel_id+"/privacy/users?direction=" + direction+"&page="+page+"&per_page="+per_page;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Restrict a user from viewing a private channel
		/// This method prevents a single user from being able to access the specified private channel.
		/// Delete_channel_privacy_user channels/{channel_id}/privacy/users/{user_id}
		/// </summary>
		/// <param name="channel_id">The ID of the channel.</param>
		/// <param name="user_id">The ID of the user.</param>
		public async Task Delete_channel_privacy_userAsync(double channel_id, double user_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "channels/"+channel_id+"/privacy/users/"+user_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Permit a specific user to view a private channel
		/// This method gives a single user access to the specified private channel.
		/// Set_channel_privacy_user channels/{channel_id}/privacy/users/{user_id}
		/// </summary>
		/// <param name="channel_id">The ID of the channel.</param>
		/// <param name="user_id">The ID of the user.</param>
		/// <returns>The user can now view the private channel.</returns>
		public async Task Set_channel_privacy_userAsync(double channel_id, double user_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "channels/"+channel_id+"/privacy/users/"+user_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the tags that have been added to a channel
		/// This method gets all the tags that have been added to the specified channel.
		/// Get_channel_tags channels/{channel_id}/tags
		/// </summary>
		/// <param name="channel_id">The ID of the channel.</param>
		/// <returns>The tags were returned.</returns>
		public async Task Get_channel_tagsAsync(double channel_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "channels/"+channel_id+"/tags";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove a tag from a channel
		/// This method removes a single tag from the specified channel.
		/// Delete_tag_from_channel channels/{channel_id}/tags/{word}
		/// </summary>
		/// <param name="channel_id">The ID of the channel.</param>
		/// <param name="word">The word to use as the tag.</param>
		public async Task Delete_tag_from_channelAsync(double channel_id, string word, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "channels/"+channel_id+"/tags/"+ (word==null? "" : System.Uri.EscapeDataString(word));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Check if a tag has been added to a channel
		/// This method determines whether a specific tag has been added to the channel in question.
		/// Check_if_channel_has_tag channels/{channel_id}/tags/{word}
		/// </summary>
		/// <param name="channel_id">The ID of the channel.</param>
		/// <param name="word">The word to use as the tag.</param>
		public async Task Check_if_channel_has_tagAsync(double channel_id, string word, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "channels/"+channel_id+"/tags/"+ (word==null? "" : System.Uri.EscapeDataString(word));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add a specific tag to a channel
		/// This method adds a single tag to the specified channel.
		/// Add_channel_tag channels/{channel_id}/tags/{word}
		/// </summary>
		/// <param name="channel_id">The ID of the channel.</param>
		/// <param name="word">The word to use as the tag.</param>
		public async Task Add_channel_tagAsync(double channel_id, string word, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "channels/"+channel_id+"/tags/"+ (word==null? "" : System.Uri.EscapeDataString(word));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the followers of a channel
		/// Get_channel_subscribers channels/{channel_id}/users
		/// </summary>
		/// <param name="channel_id">The ID of the channel.</param>
		/// <param name="direction">The sort direction of the results.</param>
		/// <param name="filter">The attribute by which to filter the results.</param>
		/// <param name="page">The page number of the results to show.</param>
		/// <param name="per_page">The number of items to show on each page of results, up to a maximum of 100.</param>
		/// <param name="query">The search query to use to filter the results.</param>
		/// <param name="sort">The way to sort the results.</param>
		/// <returns>The followers were returned.</returns>
		public async Task Get_channel_subscribersAsync(double channel_id, Get_categoriesDirection direction, Get_channel_subscribersFilter filter, double page, double per_page, string query, Get_channel_moderatorsSort sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "channels/"+channel_id+"/users?direction=" + direction+"&filter=" + filter+"&page="+page+"&per_page="+per_page+"&query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&sort=" + sort;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove a list of videos from a channel
		/// Remove_videos_from_channel channels/{channel_id}/videos
		/// </summary>
		/// <param name="channel_id">The ID of the channel.</param>
		public async Task Remove_videos_from_channelAsync(double channel_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "channels/"+channel_id+"/videos";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the videos in a channel
		/// Get_channel_videos channels/{channel_id}/videos
		/// </summary>
		/// <param name="channel_id">The ID of the channel.</param>
		/// <param name="containing_uri">The page that contains the video URI.</param>
		/// <param name="direction">The sort direction of the results.</param>
		/// <param name="filter">The attribute by which to filter the results.</param>
		/// <param name="filter_embeddable">Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). Required only if **filter** is `embeddable`.</param>
		/// <param name="page">The page number of the results to show.</param>
		/// <param name="per_page">The number of items to show on each page of results, up to a maximum of 100.</param>
		/// <param name="query">The search query to use to filter the results.</param>
		/// <param name="sort">The way to sort the results.</param>
		/// <returns>The videos were returned.</returns>
		public async Task Get_channel_videosAsync(double channel_id, string containing_uri, Get_categoriesDirection direction, Get_channel_videosFilter filter, bool filter_embeddable, double page, double per_page, string query, Get_channel_videosSort sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "channels/"+channel_id+"/videos?containing_uri=" + (containing_uri==null? "" : System.Uri.EscapeDataString(containing_uri))+"&direction=" + direction+"&filter=" + filter+"&filter_embeddable="+filter_embeddable+"&page="+page+"&per_page="+per_page+"&query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&sort=" + sort;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add a list of videos to a channel
		/// Add_videos_to_channel channels/{channel_id}/videos
		/// </summary>
		/// <param name="channel_id">The ID of the channel.</param>
		/// <returns>The videos were added.</returns>
		public async Task Add_videos_to_channelAsync(double channel_id, Add_videos_to_channelPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "channels/"+channel_id+"/videos";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Remove a specific video from a channel
		/// Delete_video_from_channel channels/{channel_id}/videos/{video_id}
		/// </summary>
		/// <param name="channel_id">The ID of the channel.</param>
		/// <param name="video_id">The ID of the video.</param>
		public async Task Delete_video_from_channelAsync(double channel_id, double video_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "channels/"+channel_id+"/videos/"+video_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a specific video in a channel
		/// This method returns a specific video in a channel. You can use it to determine whether the video is in the channel.
		/// Get_channel_video channels/{channel_id}/videos/{video_id}
		/// </summary>
		/// <param name="channel_id">The ID of the channel.</param>
		/// <param name="video_id">The ID of the video.</param>
		/// <returns>The video was returned.</returns>
		public async Task Get_channel_videoAsync(double channel_id, double video_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "channels/"+channel_id+"/videos/"+video_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add a specific video to a channel
		/// Add_video_to_channel channels/{channel_id}/videos/{video_id}
		/// </summary>
		/// <param name="channel_id">The ID of the channel.</param>
		/// <param name="video_id">The ID of the video.</param>
		public async Task Add_video_to_channelAsync(double channel_id, double video_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "channels/"+channel_id+"/videos/"+video_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the comments on a video
		/// Get_comments_alt1 channels/{channel_id}/videos/{video_id}/comments
		/// </summary>
		/// <param name="channel_id">The ID of the channel.</param>
		/// <param name="video_id">The ID of the video.</param>
		/// <param name="direction">The sort direction of the results.</param>
		/// <param name="page">The page number of the results to show.</param>
		/// <param name="per_page">The number of items to show on each page of results, up to a maximum of 100.</param>
		/// <returns>The comments were returned.</returns>
		public async Task Get_comments_alt1Async(double channel_id, double video_id, Get_categoriesDirection direction, double page, double per_page, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "channels/"+channel_id+"/videos/"+video_id+"/comments?direction=" + direction+"&page="+page+"&per_page="+per_page;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the credited users in a video
		/// Get_video_credits_alt1 channels/{channel_id}/videos/{video_id}/credits
		/// </summary>
		/// <param name="channel_id">The ID of the channel.</param>
		/// <param name="video_id">The ID of the video.</param>
		/// <param name="direction">The sort direction of the results.</param>
		/// <param name="page">The page number of the results to show.</param>
		/// <param name="per_page">The number of items to show on each page of results, up to a maximum of 100.</param>
		/// <param name="query">The search query to use to filter the results.</param>
		/// <param name="sort">The way to sort the results.</param>
		/// <returns>The users were returned.</returns>
		public async Task Get_video_credits_alt1Async(double channel_id, double video_id, Get_categoriesDirection direction, double page, double per_page, string query, Get_channel_moderatorsSort sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "channels/"+channel_id+"/videos/"+video_id+"/credits?direction=" + direction+"&page="+page+"&per_page="+per_page+"&query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&sort=" + sort;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the users who have liked a video
		/// Get_video_likes_alt1 channels/{channel_id}/videos/{video_id}/likes
		/// </summary>
		/// <param name="channel_id">The ID of the channel.</param>
		/// <param name="video_id">The ID of the video.</param>
		/// <param name="direction">The sort direction of the results.</param>
		/// <param name="page">The page number of the results to show.</param>
		/// <param name="per_page">The number of items to show on each page of results, up to a maximum of 100.</param>
		/// <param name="sort">The way to sort the results.</param>
		/// <returns>The users were returned.</returns>
		public async Task Get_video_likes_alt1Async(double channel_id, double video_id, Get_categoriesDirection direction, double page, double per_page, Get_channel_moderatorsSort sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "channels/"+channel_id+"/videos/"+video_id+"/likes?direction=" + direction+"&page="+page+"&per_page="+per_page+"&sort=" + sort;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the thumbnails of a video
		/// Get_video_thumbnails_alt1 channels/{channel_id}/videos/{video_id}/pictures
		/// </summary>
		/// <param name="channel_id">The ID of the channel.</param>
		/// <param name="video_id">The ID of the video.</param>
		/// <param name="page">The page number of the results to show.</param>
		/// <param name="per_page">The number of items to show on each page of results, up to a maximum of 100.</param>
		/// <returns>The thumbnails were returned.</returns>
		public async Task Get_video_thumbnails_alt1Async(double channel_id, double video_id, double page, double per_page, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "channels/"+channel_id+"/videos/"+video_id+"/pictures?page="+page+"&per_page="+per_page;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the users who can view a user's private videos by default
		/// Get_video_privacy_users_alt1 channels/{channel_id}/videos/{video_id}/privacy/users
		/// </summary>
		/// <param name="channel_id">The ID of the channel.</param>
		/// <param name="video_id">The ID of the video.</param>
		/// <param name="page">The page number of the results to show.</param>
		/// <param name="per_page">The number of items to show on each page of results, up to a maximum of 100.</param>
		/// <returns>The users were returned.</returns>
		public async Task Get_video_privacy_users_alt1Async(double channel_id, double video_id, double page, double per_page, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "channels/"+channel_id+"/videos/"+video_id+"/privacy/users?page="+page+"&per_page="+per_page;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Permit a list of users to view a private video
		/// The body of this request should follow our
		/// [batch request format](https://developer.vimeo.com/api/common-formats#batch-requests). Each object must contain
		/// a single `URI` field, and the value of this field must be the URI of the user who can view this video.
		/// Add_video_privacy_users_alt1 channels/{channel_id}/videos/{video_id}/privacy/users
		/// </summary>
		/// <param name="channel_id">The ID of the channel.</param>
		/// <param name="video_id">The ID of the video.</param>
		/// <returns>The users can now view the private video.</returns>
		public async Task Add_video_privacy_users_alt1Async(double channel_id, double video_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "channels/"+channel_id+"/videos/"+video_id+"/privacy/users";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the text tracks of a video
		/// Get_text_tracks_alt1 channels/{channel_id}/videos/{video_id}/texttracks
		/// </summary>
		/// <param name="channel_id">The ID of the channel.</param>
		/// <param name="video_id">The ID of the video.</param>
		/// <returns>The text tracks were returned.</returns>
		public async Task Get_text_tracks_alt1Async(double channel_id, double video_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "channels/"+channel_id+"/videos/"+video_id+"/texttracks";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all content ratings
		/// Get_content_ratings contentratings
		/// </summary>
		/// <returns>The content ratings were returned.</returns>
		public async Task Get_content_ratingsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "contentratings";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all Creative Commons licenses
		/// Get_cc_licenses creativecommons
		/// </summary>
		/// <returns>The Creative Commons licenses were returned.</returns>
		public async Task Get_cc_licensesAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "creativecommons";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all groups
		/// Get_groups groups
		/// </summary>
		/// <param name="direction">The sort direction of the results.</param>
		/// <param name="filter">The attribute by which to filter the results.</param>
		/// <param name="page">The page number of the results to show.</param>
		/// <param name="per_page">The number of items to show on each page of results, up to a maximum of 100.</param>
		/// <param name="query">The search query to use to filter the results.</param>
		/// <param name="sort">The way to sort the results.
		///
		///Option descriptions:
		/// * `relevant` - Relevant sorting is available only for search queries.
		///</param>
		/// <returns>The groups were returned.</returns>
		public async Task Get_groupsAsync(Get_categoriesDirection direction, Get_channelsFilter filter, double page, double per_page, string query, Get_channelsSort sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "groups?direction=" + direction+"&filter=" + filter+"&page="+page+"&per_page="+per_page+"&query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&sort=" + sort;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a group
		/// Delete_group groups/{group_id}
		/// </summary>
		/// <param name="group_id">The ID of the group.</param>
		public async Task Delete_groupAsync(double group_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "groups/"+group_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a specific group
		/// Get_group groups/{group_id}
		/// </summary>
		/// <param name="group_id">The ID of the group.</param>
		/// <returns>The group was returned.</returns>
		public async Task Get_groupAsync(double group_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "groups/"+group_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the members of a group
		/// Get_group_members groups/{group_id}/users
		/// </summary>
		/// <param name="group_id">The ID of the group.</param>
		/// <param name="direction">The sort direction of the results.</param>
		/// <param name="filter">The attribute by which to filter the results.</param>
		/// <param name="page">The page number of the results to show.</param>
		/// <param name="per_page">The number of items to show on each page of results, up to a maximum of 100.</param>
		/// <param name="query">The search query to use to filter the results.</param>
		/// <param name="sort">The way to sort the results.</param>
		/// <returns>The members were returned.</returns>
		public async Task Get_group_membersAsync(double group_id, Get_categoriesDirection direction, Get_channel_subscribersFilter filter, double page, double per_page, string query, Get_channel_moderatorsSort sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "groups/"+group_id+"/users?direction=" + direction+"&filter=" + filter+"&page="+page+"&per_page="+per_page+"&query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&sort=" + sort;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the videos in a group
		/// Get_group_videos groups/{group_id}/videos
		/// </summary>
		/// <param name="group_id">The ID of the group.</param>
		/// <param name="direction">The sort direction of the results.</param>
		/// <param name="filter">The attribute by which to filter the results.</param>
		/// <param name="filter_embeddable">Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). Required only if **filter** is `embeddable`.</param>
		/// <param name="page">The page number of the results to show.</param>
		/// <param name="per_page">The number of items to show on each page of results, up to a maximum of 100.</param>
		/// <param name="query">The search query to use to filter the results.</param>
		/// <param name="sort">The way to sort the results.</param>
		/// <returns>The videos were returned.</returns>
		public async Task Get_group_videosAsync(double group_id, Get_categoriesDirection direction, Get_channel_videosFilter filter, bool filter_embeddable, double page, double per_page, string query, Get_group_videosSort sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "groups/"+group_id+"/videos?direction=" + direction+"&filter=" + filter+"&filter_embeddable="+filter_embeddable+"&page="+page+"&per_page="+per_page+"&query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&sort=" + sort;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove a video from a group
		/// Delete_video_from_group groups/{group_id}/videos/{video_id}
		/// </summary>
		/// <param name="group_id">The ID of the group.</param>
		/// <param name="video_id">The ID of the video.</param>
		public async Task Delete_video_from_groupAsync(double group_id, double video_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "groups/"+group_id+"/videos/"+video_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a specific video in a group
		/// Check if a group has a video.
		/// Get_group_video groups/{group_id}/videos/{video_id}
		/// </summary>
		/// <param name="group_id">The ID of the group.</param>
		/// <param name="video_id">The ID of the video.</param>
		/// <returns>The video was returned.</returns>
		public async Task Get_group_videoAsync(double group_id, double video_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "groups/"+group_id+"/videos/"+video_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add a video to a group
		/// Add_video_to_group groups/{group_id}/videos/{video_id}
		/// </summary>
		/// <param name="group_id">The ID of the group.</param>
		/// <param name="video_id">The ID of the video.</param>
		/// <returns>The video was added.</returns>
		public async Task Add_video_to_groupAsync(double group_id, double video_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "groups/"+group_id+"/videos/"+video_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all languages
		/// Get_languages languages
		/// </summary>
		/// <param name="filter">The attribute by which to filter the results.
		///
		///Option descriptions:
		/// * `texttracks` - Only return text track supported languages
		///</param>
		/// <returns>The languages were returned.</returns>
		public async Task Get_languagesAsync(Get_languagesFilter filter, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "languages?filter=" + filter;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a user
		/// Get_user_alt1 me
		/// </summary>
		/// <returns>The user was returned.</returns>
		public async Task Get_user_alt1Async(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the albums that belong to a user
		/// Get_albums_alt1 me/albums
		/// </summary>
		/// <param name="direction">The sort direction of the results.</param>
		/// <param name="page">The page number of the results to show.</param>
		/// <param name="per_page">The number of items to show on each page of results, up to a maximum of 100.</param>
		/// <param name="query">The search query to use to filter the results.</param>
		/// <param name="sort">The way to sort the results.</param>
		/// <returns>The albums were returned.</returns>
		public async Task<Album[]> Get_albums_alt1Async(Get_categoriesDirection direction, double page, double per_page, string query, Get_albums_alt1Sort sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/albums?direction=" + direction+"&page="+page+"&per_page="+per_page+"&query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&sort=" + sort;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Album[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete an album
		/// Delete_album_alt1 me/albums/{album_id}
		/// </summary>
		/// <param name="album_id">The ID of the album.</param>
		public async Task Delete_album_alt1Async(double album_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/albums/"+album_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a specific album
		/// Get_album_alt1 me/albums/{album_id}
		/// </summary>
		/// <param name="album_id">The ID of the album.</param>
		/// <returns>The album was returned.</returns>
		public async Task Get_album_alt1Async(double album_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/albums/"+album_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the videos in an album
		/// Get_album_videos_alt1 me/albums/{album_id}/videos
		/// </summary>
		/// <param name="album_id">The ID of the album.</param>
		/// <param name="containing_uri">The page containing the video URI.</param>
		/// <param name="direction">The sort direction of the results.</param>
		/// <param name="filter">The attribute by which to filter the results.</param>
		/// <param name="filter_embeddable">Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). Required only if **filter** is `embeddable`.</param>
		/// <param name="page">The page number of the results to show.</param>
		/// <param name="password">The password of the album.</param>
		/// <param name="per_page">The number of items to show on each page of results, up to a maximum of 100.</param>
		/// <param name="query">The search query to use to filter the results.</param>
		/// <param name="sort">The way to sort the results.</param>
		/// <param name="weak_search">Whether to include private videos in the search. Please note that a separate search service provides this functionality. The service performs a partial text search on the video's name.</param>
		/// <returns>The videos were returned.</returns>
		public async Task Get_album_videos_alt1Async(double album_id, string containing_uri, Get_categoriesDirection direction, Get_channel_videosFilter filter, bool filter_embeddable, double page, string password, double per_page, string query, Get_album_videos_alt1Sort sort, bool weak_search, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/albums/"+album_id+"/videos?containing_uri=" + (containing_uri==null? "" : System.Uri.EscapeDataString(containing_uri))+"&direction=" + direction+"&filter=" + filter+"&filter_embeddable="+filter_embeddable+"&page="+page+"&password=" + (password==null? "" : System.Uri.EscapeDataString(password))+"&per_page="+per_page+"&query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&sort=" + sort+"&weak_search="+weak_search;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Replace all the videos in an album
		/// This method replaces all the existing videos in an album with one or more videos.
		/// Replace_videos_in_album_alt1 me/albums/{album_id}/videos
		/// </summary>
		/// <param name="album_id">The ID of the album.</param>
		public async Task Replace_videos_in_album_alt1Async(double album_id, Replace_videos_in_album_alt1PutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/albums/"+album_id+"/videos";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Remove a video from an album
		/// Remove_video_from_album_alt1 me/albums/{album_id}/videos/{video_id}
		/// </summary>
		/// <param name="album_id">The ID of the album.</param>
		/// <param name="video_id">The ID of the video.</param>
		public async Task Remove_video_from_album_alt1Async(double album_id, double video_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/albums/"+album_id+"/videos/"+video_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a specific video in an album
		/// This method gets a single video from an album. You can use this method to determine whether the album contains the specified video.
		/// Get_album_video_alt1 me/albums/{album_id}/videos/{video_id}
		/// </summary>
		/// <param name="album_id">The ID of the album.</param>
		/// <param name="video_id">The ID of the video.</param>
		/// <param name="password">The password of the album.</param>
		/// <returns>The video was returned.</returns>
		public async Task Get_album_video_alt1Async(double album_id, double video_id, string password, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/albums/"+album_id+"/videos/"+video_id+"?password=" + (password==null? "" : System.Uri.EscapeDataString(password));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add a specific video to an album
		/// Add_video_to_album_alt1 me/albums/{album_id}/videos/{video_id}
		/// </summary>
		/// <param name="album_id">The ID of the album.</param>
		/// <param name="video_id">The ID of the video.</param>
		public async Task Add_video_to_album_alt1Async(double album_id, double video_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/albums/"+album_id+"/videos/"+video_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Set a video as the album thumbnail
		/// Set_video_as_album_thumbnail_alt1 me/albums/{album_id}/videos/{video_id}/set_album_thumbnail
		/// </summary>
		/// <param name="album_id">The ID of the album.</param>
		/// <param name="video_id">The ID of the video.</param>
		/// <returns>The album was updated with a new thumbnail.</returns>
		public async Task<Album> Set_video_as_album_thumbnail_alt1Async(double album_id, double video_id, Set_video_as_album_thumbnail_alt1PostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/albums/"+album_id+"/videos/"+video_id+"/set_album_thumbnail";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Album>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get all the videos in which a user appears
		/// Get_appearances_alt1 me/appearances
		/// </summary>
		/// <param name="direction">The sort direction of the results.</param>
		/// <param name="filter">The attribute by which to filter the results.</param>
		/// <param name="filter_embeddable">Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). Required only if **filter** is `embeddable`.</param>
		/// <param name="page">The page number of the results to show.</param>
		/// <param name="per_page">The number of items to show on each page of results, up to a maximum of 100.</param>
		/// <param name="query">The search query to use to filter the results.</param>
		/// <param name="sort">The way to sort the results.</param>
		/// <returns>The videos were returned.</returns>
		public async Task Get_appearances_alt1Async(Get_categoriesDirection direction, Get_channel_videosFilter filter, bool filter_embeddable, double page, double per_page, string query, Get_group_videosSort sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/appearances?direction=" + direction+"&filter=" + filter+"&filter_embeddable="+filter_embeddable+"&page="+page+"&per_page="+per_page+"&query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&sort=" + sort;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the categories that a user follows
		/// Get_category_subscriptions_alt1 me/categories
		/// </summary>
		/// <param name="direction">The sort direction of the results.</param>
		/// <param name="page">The page number of the results to show.</param>
		/// <param name="per_page">The number of items to show on each page of results, up to a maximum of 100.</param>
		/// <param name="sort">The way to sort the results.</param>
		/// <returns>The categories were returned.</returns>
		public async Task Get_category_subscriptions_alt1Async(Get_categoriesDirection direction, double page, double per_page, Get_category_subscriptions_alt1Sort sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/categories?direction=" + direction+"&page="+page+"&per_page="+per_page+"&sort=" + sort;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Unsubscribe a user from a category
		/// Unsubscribe_from_category_alt1 me/categories/{category}
		/// </summary>
		/// <param name="category">The name of the category.</param>
		public async Task Unsubscribe_from_category_alt1Async(string category, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/categories/"+ (category==null? "" : System.Uri.EscapeDataString(category));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Check if a user follows a category
		/// Check_if_user_subscribed_to_category_alt1 me/categories/{category}
		/// </summary>
		/// <param name="category">The name of the category.</param>
		public async Task Check_if_user_subscribed_to_category_alt1Async(string category, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/categories/"+ (category==null? "" : System.Uri.EscapeDataString(category));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Subscribe a user to a single category
		/// Subscribe_to_category_alt1 me/categories/{category}
		/// </summary>
		/// <param name="category">The name of the category.</param>
		public async Task Subscribe_to_category_alt1Async(double category, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/categories/"+category;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the channels to which a user subscribes
		/// Get_channel_subscriptions_alt1 me/channels
		/// </summary>
		/// <param name="direction">The sort direction of the results.</param>
		/// <param name="filter">The attribute by which to filter the results.</param>
		/// <param name="page">The page number of the results to show.</param>
		/// <param name="per_page">The number of items to show on each page of results, up to a maximum of 100.</param>
		/// <param name="query">The search query to use to filter the results.</param>
		/// <param name="sort">The way to sort the results.</param>
		/// <returns>The channels were returned.</returns>
		public async Task Get_channel_subscriptions_alt1Async(Get_categoriesDirection direction, Get_channel_subscriptions_alt1Filter filter, double page, double per_page, string query, Get_category_channelsSort sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/channels?direction=" + direction+"&filter=" + filter+"&page="+page+"&per_page="+per_page+"&query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&sort=" + sort;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Unsubscribe a user from a specific channel
		/// Unsubscribe_from_channel_alt1 me/channels/{channel_id}
		/// </summary>
		/// <param name="channel_id">The ID of the channel.</param>
		public async Task Unsubscribe_from_channel_alt1Async(double channel_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/channels/"+channel_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Check if a user follows a channel
		/// Check_if_user_subscribed_to_channel_alt1 me/channels/{channel_id}
		/// </summary>
		/// <param name="channel_id">The ID of the channel.</param>
		public async Task Check_if_user_subscribed_to_channel_alt1Async(double channel_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/channels/"+channel_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Subscribe a user to a specific channel
		/// Subscribe_to_channel_alt1 me/channels/{channel_id}
		/// </summary>
		/// <param name="channel_id">The ID of the channel.</param>
		public async Task Subscribe_to_channel_alt1Async(double channel_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/channels/"+channel_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the custom logos that belong to a user
		/// Get_custom_logos_alt1 me/customlogos
		/// </summary>
		/// <returns>The custom logos were returned.</returns>
		public async Task Get_custom_logos_alt1Async(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/customlogos";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add a custom logo
		/// Create_custom_logo_alt1 me/customlogos
		/// </summary>
		public async Task Create_custom_logo_alt1Async(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/customlogos";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a specific custom logo
		/// Get_custom_logo_alt1 me/customlogos/{logo_id}
		/// </summary>
		/// <param name="logo_id">The ID of the custom logo.</param>
		/// <returns>The custom logo was returned.</returns>
		public async Task Get_custom_logo_alt1Async(double logo_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/customlogos/"+logo_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all videos in a user's feed
		/// Get_feed_alt1 me/feed
		/// </summary>
		/// <param name="offset">Necessary for proper pagination. You shouldn't provide this value yourself, and instead use the pagination links in the feed response. Please see our [pagination documentation](https://developer.vimeo.com/api/common-formats#using-the-pagination-parameter) for more information.</param>
		/// <param name="page">The page number of the results to show.</param>
		/// <param name="per_page">The number of items to show on each page of results, up to a maximum of 100.</param>
		/// <param name="type">The feed type.</param>
		/// <returns>The videos were returned.</returns>
		public async Task Get_feed_alt1Async(string offset, double page, double per_page, Get_feed_alt1Type type, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/feed?offset=" + (offset==null? "" : System.Uri.EscapeDataString(offset))+"&page="+page+"&per_page="+per_page+"&type=" + type;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the followers of a user
		/// Get_followers_alt1 me/followers
		/// </summary>
		/// <param name="direction">The sort direction of the results.</param>
		/// <param name="page">The page number of the results to show.</param>
		/// <param name="per_page">The number of items to show on each page of results, up to a maximum of 100.</param>
		/// <param name="query">The search query to use to filter the results.</param>
		/// <param name="sort">The way to sort the results.</param>
		/// <returns>The user's followers were returned.</returns>
		public async Task Get_followers_alt1Async(Get_categoriesDirection direction, double page, double per_page, string query, Get_channel_moderatorsSort sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/followers?direction=" + direction+"&page="+page+"&per_page="+per_page+"&query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&sort=" + sort;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the users that a user is following
		/// Get_user_following_alt1 me/following
		/// </summary>
		/// <param name="direction">The sort direction of the results.</param>
		/// <param name="filter">The attribute by which to filter the results.</param>
		/// <param name="page">The page number of the results to show.</param>
		/// <param name="per_page">The number of items to show on each page of results, up to a maximum of 100.</param>
		/// <param name="query">The search query to use to filter the results.</param>
		/// <param name="sort">The way to sort the results.</param>
		/// <returns>The followed users were returned.</returns>
		public async Task Get_user_following_alt1Async(Get_categoriesDirection direction, Get_user_following_alt1Filter filter, double page, double per_page, string query, Get_channel_moderatorsSort sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/following?direction=" + direction+"&filter=" + filter+"&page="+page+"&per_page="+per_page+"&query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&sort=" + sort;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Follow a list of users
		/// Follow_users_alt1 me/following
		/// </summary>
		public async Task Follow_users_alt1Async(Follow_users_alt1PostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/following";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Unfollow a user
		/// Unfollow_user_alt1 me/following/{follow_user_id}
		/// </summary>
		/// <param name="follow_user_id">The ID of the following user.</param>
		public async Task Unfollow_user_alt1Async(double follow_user_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/following/"+follow_user_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Check if a user is following another user
		/// Check_if_user_is_following_alt1 me/following/{follow_user_id}
		/// </summary>
		/// <param name="follow_user_id">The ID of the following user.</param>
		public async Task Check_if_user_is_following_alt1Async(double follow_user_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/following/"+follow_user_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Follow a specific user
		/// Follow_user_alt1 me/following/{follow_user_id}
		/// </summary>
		/// <param name="follow_user_id">The ID of the following user.</param>
		public async Task Follow_user_alt1Async(double follow_user_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/following/"+follow_user_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the groups that a user has joined
		/// Get_user_groups_alt1 me/groups
		/// </summary>
		/// <param name="direction">The sort direction of the results.</param>
		/// <param name="filter">The attribute by which to filter the results.</param>
		/// <param name="page">The page number of the results to show.</param>
		/// <param name="per_page">The number of items to show on each page of results, up to a maximum of 100.</param>
		/// <param name="query">The search query to use to filter the results.</param>
		/// <param name="sort">The way to sort the results.</param>
		/// <returns>The groups were returned.</returns>
		public async Task Get_user_groups_alt1Async(Get_categoriesDirection direction, Get_channel_subscriptions_alt1Filter filter, double page, double per_page, string query, Get_category_groupsSort sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/groups?direction=" + direction+"&filter=" + filter+"&page="+page+"&per_page="+per_page+"&query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&sort=" + sort;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove a user from a group
		/// Leave_group_alt1 me/groups/{group_id}
		/// </summary>
		/// <param name="group_id">The ID of the group.</param>
		public async Task Leave_group_alt1Async(double group_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/groups/"+group_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Check if a user has joined a group
		/// Check_if_user_joined_group_alt1 me/groups/{group_id}
		/// </summary>
		/// <param name="group_id">The ID of the group.</param>
		public async Task Check_if_user_joined_group_alt1Async(double group_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/groups/"+group_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add a user to a group
		/// Join_group_alt1 me/groups/{group_id}
		/// </summary>
		/// <param name="group_id">The ID of the group.</param>
		public async Task Join_group_alt1Async(double group_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/groups/"+group_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the videos that a user has liked
		/// Get_likes_alt1 me/likes
		/// </summary>
		/// <param name="filter">The attribute by which to filter the results.</param>
		/// <param name="filter_embeddable">Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). Required only if **filter** is `embeddable`.</param>
		/// <param name="page">The page number of the results to show.</param>
		/// <param name="per_page">The number of items to show on each page of results, up to a maximum of 100.</param>
		/// <param name="query">The search query to use to filter the results.</param>
		/// <param name="sort">The way to sort the results.</param>
		/// <returns>The videos were returned.</returns>
		public async Task Get_likes_alt1Async(Get_channel_videosFilter filter, bool filter_embeddable, double page, double per_page, string query, Get_group_videosSort sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/likes?filter=" + filter+"&filter_embeddable="+filter_embeddable+"&page="+page+"&per_page="+per_page+"&query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&sort=" + sort;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Cause a user to unlike a video
		/// Unlike_video_alt1 me/likes/{video_id}
		/// </summary>
		/// <param name="video_id">The ID of the video.</param>
		public async Task Unlike_video_alt1Async(double video_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/likes/"+video_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Check if a user has liked a video
		/// Check_if_user_liked_video_alt1 me/likes/{video_id}
		/// </summary>
		/// <param name="video_id">The ID of the video.</param>
		public async Task Check_if_user_liked_video_alt1Async(double video_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/likes/"+video_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Cause a user to like a video
		/// Like_video_alt1 me/likes/{video_id}
		/// </summary>
		/// <param name="video_id">The ID of the video.</param>
		public async Task Like_video_alt1Async(double video_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/likes/"+video_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the On Demand pages of a user
		/// Get_user_vods_alt1 me/ondemand/pages
		/// </summary>
		/// <param name="direction">The sort direction of the results.</param>
		/// <param name="filter">The type of On Demand pages to return.</param>
		/// <param name="page">The page number of the results to show.</param>
		/// <param name="per_page">The number of items to show on each page of results, up to a maximum of 100.</param>
		/// <param name="sort">The way to sort the results.</param>
		/// <returns>The On Demand pages were returned.</returns>
		public async Task Get_user_vods_alt1Async(Get_categoriesDirection direction, On_demand_pageType filter, double page, double per_page, Get_user_vods_alt1Sort sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/ondemand/pages?direction=" + direction+"&filter=" + filter+"&page="+page+"&per_page="+per_page+"&sort=" + sort;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create an On Demand page
		/// Create_vod_alt1 me/ondemand/pages
		/// </summary>
		public async Task Create_vod_alt1Async(Create_vod_alt1PostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/ondemand/pages";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get all the On Demand purchases and rentals that a user has made
		/// Get_vod_purchases me/ondemand/purchases
		/// </summary>
		/// <param name="direction">The sort direction of the results.</param>
		/// <param name="filter">The type of On Demand videos to show.
		///
		///Option descriptions:
		/// * `important` - Will show all pages which are about to expire.
		///</param>
		/// <param name="page">The page number of the results to show.</param>
		/// <param name="per_page">The number of items to show on each page of results, up to a maximum of 100.</param>
		/// <param name="sort">The way to sort the results.</param>
		/// <returns>The purchases and rentals were returned.</returns>
		public async Task Get_vod_purchasesAsync(Get_categoriesDirection direction, Get_vod_purchasesFilter filter, double page, double per_page, Get_vod_purchasesSort sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/ondemand/purchases?direction=" + direction+"&filter=" + filter+"&page="+page+"&per_page="+per_page+"&sort=" + sort;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Check if a user has made a purchase or rental from an On Demand page
		/// Check_if_vod_was_purchased_alt1 me/ondemand/purchases/{ondemand_id}
		/// </summary>
		/// <param name="ondemand_id">The ID of the On Demand.</param>
		/// <returns>You have purchased the On Demand page.</returns>
		public async Task Check_if_vod_was_purchased_alt1Async(double ondemand_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/ondemand/purchases/"+ondemand_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the pictures that belong to a user
		/// Get_pictures_alt1 me/pictures
		/// </summary>
		/// <param name="page">The page number of the results to show.</param>
		/// <param name="per_page">The number of items to show on each page of results, up to a maximum of 100.</param>
		/// <returns>The pictures were returned.</returns>
		public async Task Get_pictures_alt1Async(double page, double per_page, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/pictures?page="+page+"&per_page="+per_page;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add a user picture
		/// Create_picture_alt1 me/pictures
		/// </summary>
		/// <returns>The user picture was created.</returns>
		public async Task Create_picture_alt1Async(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/pictures";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a user picture
		/// Delete_picture_alt1 me/pictures/{portraitset_id}
		/// </summary>
		/// <param name="portraitset_id">The ID of the picture.</param>
		public async Task Delete_picture_alt1Async(double portraitset_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/pictures/"+portraitset_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a specific user picture
		/// Get_picture_alt1 me/pictures/{portraitset_id}
		/// </summary>
		/// <param name="portraitset_id">The ID of the picture.</param>
		/// <returns>The picture was returned.</returns>
		public async Task Get_picture_alt1Async(double portraitset_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/pictures/"+portraitset_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the portfolios that belong to a user
		/// Get_portfolios_alt1 me/portfolios
		/// </summary>
		/// <param name="direction">The sort direction of the results.</param>
		/// <param name="page">The page number of the results to show.</param>
		/// <param name="per_page">The number of items to show on each page of results, up to a maximum of 100.</param>
		/// <param name="query">The search query to use to filter the results.</param>
		/// <param name="sort">The way to sort the results.</param>
		/// <returns>The portfolios were returned.</returns>
		public async Task Get_portfolios_alt1Async(Get_categoriesDirection direction, double page, double per_page, string query, Get_channel_moderatorsSort sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/portfolios?direction=" + direction+"&page="+page+"&per_page="+per_page+"&query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&sort=" + sort;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a specific portfolio
		/// Get_portfolio_alt1 me/portfolios/{portfolio_id}
		/// </summary>
		/// <param name="portfolio_id">The ID of the portfolio.</param>
		/// <returns>The portfolio was returned.</returns>
		public async Task Get_portfolio_alt1Async(double portfolio_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/portfolios/"+portfolio_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the videos in a portfolio
		/// Get_portfolio_videos_alt1 me/portfolios/{portfolio_id}/videos
		/// </summary>
		/// <param name="portfolio_id">The ID of the portfolio.</param>
		/// <param name="containing_uri">The page that contains the video URI.</param>
		/// <param name="filter">The attribute by which to filter the results.</param>
		/// <param name="filter_embeddable">Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). Required only if **filter** is `embeddable`.</param>
		/// <param name="page">The page number of the results to show.</param>
		/// <param name="per_page">The number of items to show on each page of results, up to a maximum of 100.</param>
		/// <param name="sort">The way to sort the results.
		///
		///Option descriptions:
		/// * `default` - This will sort to the default sort set on the portfolio.
		///</param>
		/// <returns>The videos were returned.</returns>
		public async Task Get_portfolio_videos_alt1Async(double portfolio_id, string containing_uri, Get_channel_videosFilter filter, bool filter_embeddable, double page, double per_page, Get_portfolio_videos_alt1Sort sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/portfolios/"+portfolio_id+"/videos?containing_uri=" + (containing_uri==null? "" : System.Uri.EscapeDataString(containing_uri))+"&filter=" + filter+"&filter_embeddable="+filter_embeddable+"&page="+page+"&per_page="+per_page+"&sort=" + sort;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove a video from a portfolio
		/// Delete_video_from_portfolio_alt1 me/portfolios/{portfolio_id}/videos/{video_id}
		/// </summary>
		/// <param name="portfolio_id">The ID of the portfolio.</param>
		/// <param name="video_id">The ID of the video.</param>
		public async Task Delete_video_from_portfolio_alt1Async(double portfolio_id, double video_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/portfolios/"+portfolio_id+"/videos/"+video_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a specific video in a portfolio
		/// Get_portfolio_video_alt1 me/portfolios/{portfolio_id}/videos/{video_id}
		/// </summary>
		/// <param name="portfolio_id">The ID of the portfolio.</param>
		/// <param name="video_id">The ID of the video.</param>
		/// <returns>The video was returned.</returns>
		public async Task Get_portfolio_video_alt1Async(double portfolio_id, double video_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/portfolios/"+portfolio_id+"/videos/"+video_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add a video to a portfolio
		/// Add_video_to_portfolio_alt1 me/portfolios/{portfolio_id}/videos/{video_id}
		/// </summary>
		/// <param name="portfolio_id">The ID of the portfolio.</param>
		/// <param name="video_id">The ID of the video.</param>
		public async Task Add_video_to_portfolio_alt1Async(double portfolio_id, double video_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/portfolios/"+portfolio_id+"/videos/"+video_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the embed presets that a user has created
		/// Get_embed_presets_alt1 me/presets
		/// </summary>
		/// <param name="page">The page number of the results to show.</param>
		/// <param name="per_page">The number of items to show on each page of results, up to a maximum of 100.</param>
		/// <returns>The embed presets were returned.</returns>
		public async Task Get_embed_presets_alt1Async(double page, double per_page, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/presets?page="+page+"&per_page="+per_page;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a specific embed preset
		/// Get_embed_preset_alt1 me/presets/{preset_id}
		/// </summary>
		/// <param name="preset_id">The ID of the preset.</param>
		/// <returns>The embed preset was returned.</returns>
		public async Task Get_embed_preset_alt1Async(double preset_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/presets/"+preset_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the videos that have been added to an embed preset
		/// Get_embed_preset_videos_alt1 me/presets/{preset_id}/videos
		/// </summary>
		/// <param name="preset_id">The ID of the preset.</param>
		/// <param name="page">The page number of the results to show.</param>
		/// <param name="per_page">The number of items to show on each page of results, up to a maximum of 100.</param>
		/// <returns>The videos were returned.</returns>
		public async Task Get_embed_preset_videos_alt1Async(double preset_id, double page, double per_page, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/presets/"+preset_id+"/videos?page="+page+"&per_page="+per_page;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the projects that belong to a user
		/// This method gets all the projects that belong to the specified user.
		/// Get_projects_alt1 me/projects
		/// </summary>
		/// <param name="direction">The sort direction of the results.</param>
		/// <param name="page">The page number of the results to show.</param>
		/// <param name="per_page">The number of items to show on each page of results, up to a maximum of 100.</param>
		/// <param name="sort">The way to sort the results.</param>
		/// <returns>The projects were returned.</returns>
		public async Task<Project[]> Get_projects_alt1Async(Get_categoriesDirection direction, double page, double per_page, Get_projects_alt1Sort sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/projects?direction=" + direction+"&page="+page+"&per_page="+per_page+"&sort=" + sort;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Project[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a project
		/// This method creates a new project for the specified user.
		/// Create_project_alt1 me/projects
		/// </summary>
		public async Task Create_project_alt1Async(Create_project_alt1PostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/projects";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a project
		/// This method deletes a project and optionally also the videos that it contains.
		/// Delete_project_alt1 me/projects/{project_id}
		/// </summary>
		/// <param name="project_id">The ID of the project.</param>
		/// <param name="should_delete_clips">Whether to delete all the videos in the project along with the project itself.</param>
		public async Task Delete_project_alt1Async(double project_id, bool should_delete_clips, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/projects/"+project_id+"?should_delete_clips="+should_delete_clips;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a specific project
		/// This method gets a single project that belongs to the specified user.
		/// Get_project_alt1 me/projects/{project_id}
		/// </summary>
		/// <param name="project_id">The ID of the project.</param>
		/// <returns>The project was returned.</returns>
		public async Task<Project> Get_project_alt1Async(double project_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/projects/"+project_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Project>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Edit a project
		/// This method edits an existing project.
		/// Edit_project_alt1 me/projects/{project_id}
		/// </summary>
		/// <param name="project_id">The ID of the project.</param>
		/// <returns>The project was edited.</returns>
		public async Task<Project> Edit_project_alt1Async(double project_id, Edit_project_alt1PatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/projects/"+project_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Project>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Remove a list of videos from a project
		/// This method removed multiple videos from the specified project.
		/// Remove_videos_from_project_alt1 me/projects/{project_id}/videos
		/// </summary>
		/// <param name="project_id">The ID of the project.</param>
		/// <param name="should_delete_clips">Whether to delete the videos when removing them from the project.</param>
		/// <param name="uris">A comma-separated list of the video URIs to remove.</param>
		public async Task Remove_videos_from_project_alt1Async(double project_id, bool should_delete_clips, string uris, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/projects/"+project_id+"/videos?should_delete_clips="+should_delete_clips+"&uris=" + (uris==null? "" : System.Uri.EscapeDataString(uris));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the videos in a project
		/// This method gets all the videos that belong to the specified project.
		/// Get_project_videos_alt1 me/projects/{project_id}/videos
		/// </summary>
		/// <param name="project_id">The ID of the project.</param>
		/// <param name="direction">The sort direction of the results.</param>
		/// <param name="page">The page number of the results to show.</param>
		/// <param name="per_page">The number of items to show on each page of results, up to a maximum of 100.</param>
		/// <param name="sort">The way to sort the results.</param>
		/// <returns>The videos were returned.</returns>
		public async Task<Video[]> Get_project_videos_alt1Async(double project_id, Get_categoriesDirection direction, double page, double per_page, Get_project_videos_alt1Sort sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/projects/"+project_id+"/videos?direction=" + direction+"&page="+page+"&per_page="+per_page+"&sort=" + sort;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Video[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add a list of videos to a project
		/// This method adds multiple videos to the specified project.
		/// Add_videos_to_project_alt1 me/projects/{project_id}/videos
		/// </summary>
		/// <param name="project_id">The ID of the project.</param>
		/// <param name="uris">A comma-separated list of video URIs to add.</param>
		public async Task Add_videos_to_project_alt1Async(double project_id, string uris, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/projects/"+project_id+"/videos?uris=" + (uris==null? "" : System.Uri.EscapeDataString(uris));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove a specific video from a project
		/// This method removes a single video from the specified project.
		/// Remove_video_from_project_alt1 me/projects/{project_id}/videos/{video_id}
		/// </summary>
		/// <param name="project_id">The ID of the project.</param>
		/// <param name="video_id">The ID of the video.</param>
		public async Task Remove_video_from_project_alt1Async(double project_id, double video_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/projects/"+project_id+"/videos/"+video_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add a specific video to a project
		/// This method adds a single video to the specified project.
		/// Add_video_to_project_alt1 me/projects/{project_id}/videos/{video_id}
		/// </summary>
		/// <param name="project_id">The ID of the project.</param>
		/// <param name="video_id">The ID of the video.</param>
		public async Task Add_video_to_project_alt1Async(double project_id, double video_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/projects/"+project_id+"/videos/"+video_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the videos that a user has uploaded
		/// Get_videos_alt1 me/videos
		/// </summary>
		/// <param name="containing_uri">The page that contains the video URI. Only available when not paired with `query`.</param>
		/// <param name="direction">The sort direction of the results.</param>
		/// <param name="filter">The attribute by which to filter the results.</param>
		/// <param name="filter_embeddable">Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). Required only if **filter** is `embeddable`.</param>
		/// <param name="filter_playable">Whether to filter by all playable videos or by all videos that are not  playable.</param>
		/// <param name="page">The page number of the results to show.</param>
		/// <param name="per_page">The number of items to show on each page of results, up to a maximum of 100.</param>
		/// <param name="query">The search query to use to filter the results.</param>
		/// <param name="sort">The way to sort the results.</param>
		/// <returns>The videos were returned.</returns>
		public async Task Get_videos_alt1Async(string containing_uri, Get_categoriesDirection direction, Get_videos_alt1Filter filter, bool filter_embeddable, bool filter_playable, double page, double per_page, string query, Get_videos_alt1Sort sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/videos?containing_uri=" + (containing_uri==null? "" : System.Uri.EscapeDataString(containing_uri))+"&direction=" + direction+"&filter=" + filter+"&filter_embeddable="+filter_embeddable+"&filter_playable="+filter_playable+"&page="+page+"&per_page="+per_page+"&query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&sort=" + sort;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Check if a user owns a video
		/// Check_if_user_owns_video_alt1 me/videos/{video_id}
		/// </summary>
		/// <param name="video_id">The ID of the video.</param>
		/// <returns>The user owns the video.</returns>
		public async Task Check_if_user_owns_video_alt1Async(double video_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/videos/"+video_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a user's watch history
		/// Delete_watch_history me/watched/videos
		/// </summary>
		public async Task Delete_watch_historyAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/watched/videos";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the videos that a user has watched
		/// Get_watch_history me/watched/videos
		/// </summary>
		/// <param name="page">The page number of the results to show.</param>
		/// <param name="per_page">The number of items to show on each page of results, up to a maximum of 100.</param>
		/// <returns>The videos were returned.</returns>
		public async Task Get_watch_historyAsync(double page, double per_page, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/watched/videos?page="+page+"&per_page="+per_page;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a specific video from a user's watch history
		/// Delete_from_watch_history me/watched/videos/{video_id}
		/// </summary>
		/// <param name="video_id">The ID of the video.</param>
		public async Task Delete_from_watch_historyAsync(double video_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/watched/videos/"+video_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the videos in a user's Watch Later queue
		/// Get_watch_later_queue_alt1 me/watchlater
		/// </summary>
		/// <param name="direction">The sort direction of the results.</param>
		/// <param name="filter">The attribute by which to filter the results.</param>
		/// <param name="filter_embeddable">Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). Required only if **filter** is `embeddable`.</param>
		/// <param name="page">The page number of the results to show.</param>
		/// <param name="per_page">The number of items to show on each page of results, up to a maximum of 100.</param>
		/// <param name="query">The search query to use to filter the results.</param>
		/// <param name="sort">The way to sort the results.</param>
		/// <returns>The videos were returned.</returns>
		public async Task Get_watch_later_queue_alt1Async(Get_categoriesDirection direction, Get_channel_videosFilter filter, bool filter_embeddable, double page, double per_page, string query, Get_group_videosSort sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/watchlater?direction=" + direction+"&filter=" + filter+"&filter_embeddable="+filter_embeddable+"&page="+page+"&per_page="+per_page+"&query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&sort=" + sort;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove a video from a user's Watch Later queue
		/// Delete_video_from_watch_later_alt1 me/watchlater/{video_id}
		/// </summary>
		/// <param name="video_id">The ID of the video.</param>
		public async Task Delete_video_from_watch_later_alt1Async(double video_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/watchlater/"+video_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Check if a user has added a specific video to their Watch Later queue
		/// Check_watch_later_queue_alt1 me/watchlater/{video_id}
		/// </summary>
		/// <param name="video_id">The ID of the video.</param>
		/// <returns>The video appears in the user's Watch Later queue.</returns>
		public async Task Check_watch_later_queue_alt1Async(double video_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/watchlater/"+video_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add a video to a user's Watch Later queue
		/// Add_video_to_watch_later_alt1 me/watchlater/{video_id}
		/// </summary>
		/// <param name="video_id">The ID of the video.</param>
		public async Task Add_video_to_watch_later_alt1Async(double video_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/watchlater/"+video_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Verify an OAuth 2 token
		/// Verify_token oauth/verify
		/// </summary>
		/// <returns>The token was verified.</returns>
		public async Task Verify_tokenAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "oauth/verify";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all On Demand genres
		/// Get_vod_genres ondemand/genres
		/// </summary>
		/// <returns>The On Demand genres were returned.</returns>
		public async Task Get_vod_genresAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ondemand/genres";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a specific On Demand genre
		/// Get_vod_genre ondemand/genres/{genre_id}
		/// </summary>
		/// <param name="genre_id">The ID of the genre.</param>
		/// <returns>The On Demand genre was returned.</returns>
		public async Task Get_vod_genreAsync(string genre_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ondemand/genres/"+ (genre_id==null? "" : System.Uri.EscapeDataString(genre_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the On Demand pages in a genre
		/// Get_genre_vods ondemand/genres/{genre_id}/pages
		/// </summary>
		/// <param name="genre_id">The ID of the genre.</param>
		/// <param name="direction">The sort direction of the results.</param>
		/// <param name="filter">The attribute by which to filter the results.</param>
		/// <param name="page">The page number of the results to show.</param>
		/// <param name="per_page">The number of items to show on each page of results, up to a maximum of 100.</param>
		/// <param name="query">The search query to use to filter the results.</param>
		/// <param name="sort">The way to sort the results.</param>
		/// <returns>The On Demand pages were returned.</returns>
		public async Task Get_genre_vodsAsync(string genre_id, Get_categoriesDirection direction, Get_genre_vodsFilter filter, double page, double per_page, string query, Get_genre_vodsSort sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ondemand/genres/"+ (genre_id==null? "" : System.Uri.EscapeDataString(genre_id))+"/pages&direction=" + direction+"&filter=" + filter+"&page="+page+"&per_page="+per_page+"&query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&sort=" + sort;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a specific On Demand page in a genre
		/// Check whether a genre contains an On Demand page.
		/// Get_genre_vod ondemand/genres/{genre_id}/pages/{ondemand_id}
		/// </summary>
		/// <param name="genre_id">The ID of the genre.</param>
		/// <param name="ondemand_id">The ID of the On Demand.</param>
		/// <returns>The On Demand page belongs to the genre.</returns>
		public async Task Get_genre_vodAsync(string genre_id, double ondemand_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ondemand/genres/"+ (genre_id==null? "" : System.Uri.EscapeDataString(genre_id))+"/pages/"+ondemand_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a draft of an On Demand page
		/// Delete_vod_draft ondemand/pages/{ondemand_id}
		/// </summary>
		/// <param name="ondemand_id">The ID of the On Demand.</param>
		public async Task Delete_vod_draftAsync(double ondemand_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ondemand/pages/"+ondemand_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a specific On Demand page
		/// Get_vod ondemand/pages/{ondemand_id}
		/// </summary>
		/// <param name="ondemand_id">The ID of the On Demand.</param>
		/// <returns>The On Demand page was returned.</returns>
		public async Task Get_vodAsync(double ondemand_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ondemand/pages/"+ondemand_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the backgrounds of an On Demand page
		/// Get_vod_backgrounds ondemand/pages/{ondemand_id}/backgrounds
		/// </summary>
		/// <param name="ondemand_id">The ID of the On Demand.</param>
		/// <param name="page">The page number of the results to show.</param>
		/// <param name="per_page">The number of items to show on each page of results, up to a maximum of 100.</param>
		/// <returns>The background images were returned.</returns>
		public async Task Get_vod_backgroundsAsync(double ondemand_id, double page, double per_page, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ondemand/pages/"+ondemand_id+"/backgrounds?page="+page+"&per_page="+per_page;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add a background to an On Demand page
		/// Create_vod_background ondemand/pages/{ondemand_id}/backgrounds
		/// </summary>
		/// <param name="ondemand_id">The ID of the On Demand.</param>
		/// <returns>The background was created.</returns>
		public async Task Create_vod_backgroundAsync(double ondemand_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ondemand/pages/"+ondemand_id+"/backgrounds";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove a background from an On Demand page
		/// Delete_vod_background ondemand/pages/{ondemand_id}/backgrounds/{background_id}
		/// </summary>
		/// <param name="background_id">The ID of the background.</param>
		/// <param name="ondemand_id">The ID of the On Demand.</param>
		public async Task Delete_vod_backgroundAsync(double background_id, double ondemand_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ondemand/pages/"+ondemand_id+"/backgrounds/"+background_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a specific background of an On Demand page
		/// Get_vod_background ondemand/pages/{ondemand_id}/backgrounds/{background_id}
		/// </summary>
		/// <param name="background_id">The ID of the background.</param>
		/// <param name="ondemand_id">The ID of the On Demand.</param>
		/// <returns>The background image was returned.</returns>
		public async Task Get_vod_backgroundAsync(double background_id, double ondemand_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ondemand/pages/"+ondemand_id+"/backgrounds/"+background_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the genres of an On Demand page
		/// Get_vod_genres_by_ondemand_id ondemand/pages/{ondemand_id}/genres
		/// </summary>
		/// <param name="ondemand_id">The ID of the On Demand.</param>
		/// <returns>The genres were returned.</returns>
		public async Task Get_vod_genres_by_ondemand_idAsync(double ondemand_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ondemand/pages/"+ondemand_id+"/genres";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove a genre from an On Demand page
		/// Delete_vod_genre ondemand/pages/{ondemand_id}/genres/{genre_id}
		/// </summary>
		/// <param name="genre_id">The ID of the genre.</param>
		/// <param name="ondemand_id">The ID of the On Demand.</param>
		public async Task Delete_vod_genreAsync(string genre_id, double ondemand_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ondemand/pages/"+ondemand_id+"/genres/"+ (genre_id==null? "" : System.Uri.EscapeDataString(genre_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Check whether an On Demand page belongs to a genre
		/// Get_vod_genre_by_ondemand_id ondemand/pages/{ondemand_id}/genres/{genre_id}
		/// </summary>
		/// <param name="genre_id">The ID of the genre.</param>
		/// <param name="ondemand_id">The ID of the On Demand.</param>
		/// <returns>The On Demand page's genre was returned.</returns>
		public async Task Get_vod_genre_by_ondemand_idAsync(string genre_id, double ondemand_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ondemand/pages/"+ondemand_id+"/genres/"+ (genre_id==null? "" : System.Uri.EscapeDataString(genre_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add a genre to an On Demand page
		/// Add_vod_genre ondemand/pages/{ondemand_id}/genres/{genre_id}
		/// </summary>
		/// <param name="genre_id">The ID of the genre.</param>
		/// <param name="ondemand_id">The ID of the On Demand.</param>
		public async Task Add_vod_genreAsync(string genre_id, double ondemand_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ondemand/pages/"+ondemand_id+"/genres/"+ (genre_id==null? "" : System.Uri.EscapeDataString(genre_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the users who have liked a video on an On Demand page
		/// This method gets all the users who have liked a particular video on an On Demand page.
		/// Get_vod_likes ondemand/pages/{ondemand_id}/likes
		/// </summary>
		/// <param name="ondemand_id">The ID of the On Demand page.</param>
		/// <param name="direction">The sort direction of the results.</param>
		/// <param name="filter">The attribute by which to filter the results.</param>
		/// <param name="page">The page number of the results to show.</param>
		/// <param name="per_page">The number of items to show on each page of results, up to a maximum of 100.</param>
		/// <param name="sort">The way to sort the results.</param>
		/// <returns>The users were returned.</returns>
		public async Task Get_vod_likesAsync(double ondemand_id, Get_categoriesDirection direction, On_demand_videoType filter, double page, double per_page, Get_channel_moderatorsSort sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ondemand/pages/"+ondemand_id+"/likes?direction=" + direction+"&filter=" + filter+"&page="+page+"&per_page="+per_page+"&sort=" + sort;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the posters of an On Demand page
		/// Get_vod_posters ondemand/pages/{ondemand_id}/pictures
		/// </summary>
		/// <param name="ondemand_id">The ID of the On Demand.</param>
		/// <param name="page">The page number of the results to show.</param>
		/// <param name="per_page">The number of items to show on each page of results, up to a maximum of 100.</param>
		/// <returns>The posters were returned.</returns>
		public async Task Get_vod_postersAsync(double ondemand_id, double page, double per_page, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ondemand/pages/"+ondemand_id+"/pictures?page="+page+"&per_page="+per_page;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add a poster to an On Demand page
		/// Add_vod_poster ondemand/pages/{ondemand_id}/pictures
		/// </summary>
		/// <param name="ondemand_id">The ID of the On Demand.</param>
		public async Task Add_vod_posterAsync(double ondemand_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ondemand/pages/"+ondemand_id+"/pictures";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a specific poster of an On Demand page
		/// Get_vod_poster ondemand/pages/{ondemand_id}/pictures/{poster_id}
		/// </summary>
		/// <param name="ondemand_id">The ID of the On Demand.</param>
		/// <param name="poster_id">The ID of the picture.</param>
		/// <returns>The poster was returned.</returns>
		public async Task Get_vod_posterAsync(double ondemand_id, double poster_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ondemand/pages/"+ondemand_id+"/pictures/"+poster_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the promotions on an On Demand page
		/// Get_vod_promotions ondemand/pages/{ondemand_id}/promotions
		/// </summary>
		/// <param name="ondemand_id">The ID of the On Demand.</param>
		/// <param name="filter">The filter to apply to the results.</param>
		/// <param name="page">The page number of the results to show.</param>
		/// <param name="per_page">The number of items to show on each page of results, up to a maximum of 100.</param>
		/// <returns>The promotions were returned.</returns>
		public async Task Get_vod_promotionsAsync(double ondemand_id, Get_vod_promotionsFilter filter, double page, double per_page, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ondemand/pages/"+ondemand_id+"/promotions?filter=" + filter+"&page="+page+"&per_page="+per_page;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove a promotion from an On Demand page
		/// Delete_vod_promotion ondemand/pages/{ondemand_id}/promotions/{promotion_id}
		/// </summary>
		/// <param name="ondemand_id">The ID of the On Demand.</param>
		/// <param name="promotion_id">The ID of the promotion.</param>
		public async Task Delete_vod_promotionAsync(double ondemand_id, double promotion_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ondemand/pages/"+ondemand_id+"/promotions/"+promotion_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a specific promotion on an On Demand page
		/// Get_vod_promotion ondemand/pages/{ondemand_id}/promotions/{promotion_id}
		/// </summary>
		/// <param name="ondemand_id">The ID of the On Demand.</param>
		/// <param name="promotion_id">The ID of the promotion.</param>
		/// <returns>The promotion was returned.</returns>
		public async Task Get_vod_promotionAsync(double ondemand_id, double promotion_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ondemand/pages/"+ondemand_id+"/promotions/"+promotion_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the codes of a promotion on an On Demand page
		/// Get_vod_promotion_codes ondemand/pages/{ondemand_id}/promotions/{promotion_id}/codes
		/// </summary>
		/// <param name="ondemand_id">The ID of the On Demand.</param>
		/// <param name="promotion_id">The ID of the promotion.</param>
		/// <param name="page">The page number of the results to show.</param>
		/// <param name="per_page">The number of items to show on each page of results, up to a maximum of 100.</param>
		/// <returns>The codes were returned.</returns>
		public async Task Get_vod_promotion_codesAsync(double ondemand_id, double promotion_id, double page, double per_page, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ondemand/pages/"+ondemand_id+"/promotions/"+promotion_id+"/codes?page="+page+"&per_page="+per_page;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove a list of regions from an On Demand page
		/// Delete_vod_regions ondemand/pages/{ondemand_id}/regions
		/// </summary>
		/// <param name="ondemand_id">The ID of the On Demand.</param>
		/// <returns>The On Demand regions were deleted.</returns>
		public async Task Delete_vod_regionsAsync(double ondemand_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ondemand/pages/"+ondemand_id+"/regions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the regions of an On Demand page
		/// Get_vod_regions ondemand/pages/{ondemand_id}/regions
		/// </summary>
		/// <param name="ondemand_id">The ID of the On Demand.</param>
		/// <returns>The regions were returned.</returns>
		public async Task Get_vod_regionsAsync(double ondemand_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ondemand/pages/"+ondemand_id+"/regions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove a specific region from an On Demand page
		/// Delete_vod_region ondemand/pages/{ondemand_id}/regions/{country}
		/// </summary>
		/// <param name="country">The country code.</param>
		/// <param name="ondemand_id">The ID of the On Demand.</param>
		public async Task Delete_vod_regionAsync(string country, double ondemand_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ondemand/pages/"+ondemand_id+"/regions/"+ (country==null? "" : System.Uri.EscapeDataString(country));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a specific region of an On Demand page
		/// Checks whether an On Demand page belongs to a region.
		/// Get_vod_region ondemand/pages/{ondemand_id}/regions/{country}
		/// </summary>
		/// <param name="country">The country code.</param>
		/// <param name="ondemand_id">The ID of the On Demand.</param>
		/// <returns>The On Demand page's region was returned.</returns>
		public async Task Get_vod_regionAsync(string country, double ondemand_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ondemand/pages/"+ondemand_id+"/regions/"+ (country==null? "" : System.Uri.EscapeDataString(country));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add a specific region to an On Demand page
		/// Add_vod_region ondemand/pages/{ondemand_id}/regions/{country}
		/// </summary>
		/// <param name="country">The country code.</param>
		/// <param name="ondemand_id">The ID of the On Demand.</param>
		public async Task Add_vod_regionAsync(string country, double ondemand_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ondemand/pages/"+ondemand_id+"/regions/"+ (country==null? "" : System.Uri.EscapeDataString(country));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the seasons on an On Demand page
		/// Get_vod_seasons ondemand/pages/{ondemand_id}/seasons
		/// </summary>
		/// <param name="ondemand_id">The ID of the On Demand.</param>
		/// <param name="direction">The sort direction of the results.</param>
		/// <param name="filter">The attribute by which to filter the results.</param>
		/// <param name="page">The page number of the results to show.</param>
		/// <param name="per_page">The number of items to show on each page of results, up to a maximum of 100.</param>
		/// <param name="sort">The way to sort the results.</param>
		/// <returns>The seasons were returned.</returns>
		public async Task Get_vod_seasonsAsync(double ondemand_id, Get_categoriesDirection direction, Get_vod_seasonsFilter filter, double page, double per_page, Get_vod_seasonsSort sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ondemand/pages/"+ondemand_id+"/seasons?direction=" + direction+"&filter=" + filter+"&page="+page+"&per_page="+per_page+"&sort=" + sort;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a specific season on an On Demand page
		/// Get_vod_season ondemand/pages/{ondemand_id}/seasons/{season_id}
		/// </summary>
		/// <param name="ondemand_id">The ID of the On Demand.</param>
		/// <param name="season_id">The ID of the season.</param>
		/// <returns>The season was returned.</returns>
		public async Task Get_vod_seasonAsync(double ondemand_id, double season_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ondemand/pages/"+ondemand_id+"/seasons/"+season_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the videos in a season on an On Demand page
		/// Get_vod_season_videos ondemand/pages/{ondemand_id}/seasons/{season_id}/videos
		/// </summary>
		/// <param name="ondemand_id">The ID of the On Demand.</param>
		/// <param name="season_id">The ID of the season.</param>
		/// <param name="filter">The attribute by which to filter the results.</param>
		/// <param name="page">The page number of the results to show.</param>
		/// <param name="per_page">The number of items to show on each page of results, up to a maximum of 100.</param>
		/// <param name="sort">The way to sort the results.</param>
		/// <returns>The videos were returned.</returns>
		public async Task Get_vod_season_videosAsync(double ondemand_id, double season_id, Get_vod_seasonsFilter filter, double page, double per_page, Get_vod_season_videosSort sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ondemand/pages/"+ondemand_id+"/seasons/"+season_id+"/videos?filter=" + filter+"&page="+page+"&per_page="+per_page+"&sort=" + sort;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the videos on an On Demand page
		/// Get_vod_videos ondemand/pages/{ondemand_id}/videos
		/// </summary>
		/// <param name="ondemand_id">The ID of the On Demand.</param>
		/// <param name="direction">The sort direction of the results.</param>
		/// <param name="filter">The attribute by which to filter the results.</param>
		/// <param name="page">The page number of the results to show.</param>
		/// <param name="per_page">The number of items to show on each page of results, up to a maximum of 100.</param>
		/// <param name="sort">The way to sort the results.</param>
		/// <returns>* The videos were returned.
		///* The videos were returned.</returns>
		public async Task Get_vod_videosAsync(double ondemand_id, Get_categoriesDirection direction, Get_vod_videosFilter filter, double page, double per_page, Get_vod_videosSort sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ondemand/pages/"+ondemand_id+"/videos?direction=" + direction+"&filter=" + filter+"&page="+page+"&per_page="+per_page+"&sort=" + sort;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove a video from an On Demand page
		/// Delete_video_from_vod ondemand/pages/{ondemand_id}/videos/{video_id}
		/// </summary>
		/// <param name="ondemand_id">The ID of the On Demand.</param>
		/// <param name="video_id">The ID of the video.</param>
		public async Task Delete_video_from_vodAsync(double ondemand_id, double video_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ondemand/pages/"+ondemand_id+"/videos/"+video_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a specific video on an On Demand page
		/// Get_vod_video ondemand/pages/{ondemand_id}/videos/{video_id}
		/// </summary>
		/// <param name="ondemand_id">The ID of the On Demand.</param>
		/// <param name="video_id">The ID of the video.</param>
		/// <returns>The video is on the On Demand page.</returns>
		public async Task Get_vod_videoAsync(double ondemand_id, double video_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ondemand/pages/"+ondemand_id+"/videos/"+video_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the On Demand regions
		/// Get_regions ondemand/regions
		/// </summary>
		/// <returns>The On Demand regions were returned.</returns>
		public async Task Get_regionsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ondemand/regions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a specific On Demand region
		/// Get_region ondemand/regions/{country}
		/// </summary>
		/// <param name="country">The country code.</param>
		/// <returns>The On Demand region was returned.</returns>
		public async Task Get_regionAsync(string country, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ondemand/regions/"+ (country==null? "" : System.Uri.EscapeDataString(country));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a specific tag
		/// Get_tag tags/{word}
		/// </summary>
		/// <param name="word">The tag to return.</param>
		/// <returns>The tag was returned.</returns>
		public async Task Get_tagAsync(string word, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+ (word==null? "" : System.Uri.EscapeDataString(word));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the videos with a specific tag
		/// Get_videos_with_tag tags/{word}/videos
		/// </summary>
		/// <param name="word">The tag word.</param>
		/// <param name="direction">The sort direction of the results.</param>
		/// <param name="page">The page number of the results to show.</param>
		/// <param name="per_page">The number of items to show on each page of results, up to a maximum of 100.</param>
		/// <param name="sort">The way to sort the results.</param>
		/// <returns>The videos were returned.</returns>
		public async Task Get_videos_with_tagAsync(string word, Get_categoriesDirection direction, double page, double per_page, Get_videos_with_tagSort sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+ (word==null? "" : System.Uri.EscapeDataString(word))+"/videos&direction=" + direction+"&page="+page+"&per_page="+per_page+"&sort=" + sort;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Revoke the current access token
		/// This method enables an app to notify the API that it is done with a token and that the token can be discarded.
		/// Delete_token tokens
		/// </summary>
		public async Task Delete_tokenAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tokens";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Search for users
		/// Search_users users
		/// </summary>
		/// <param name="direction">The sort direction of the results.</param>
		/// <param name="page">The page number of the results to show.</param>
		/// <param name="per_page">The number of items to show on each page of results, up to a maximum of 100.</param>
		/// <param name="query">The search query to use to filter the results.</param>
		/// <param name="sort">The way to sort the results.</param>
		/// <returns>The search results were returned.</returns>
		public async Task Search_usersAsync(Get_categoriesDirection direction, double page, double per_page, string query, Get_channelsSort sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users?direction=" + direction+"&page="+page+"&per_page="+per_page+"&query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&sort=" + sort;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a user
		/// Get_user users/{user_id}
		/// </summary>
		/// <param name="user_id">The ID of the user.</param>
		/// <returns>The user was returned.</returns>
		public async Task Get_userAsync(double user_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+user_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the albums that belong to a user
		/// Get_albums users/{user_id}/albums
		/// </summary>
		/// <param name="user_id">The ID of the user.</param>
		/// <param name="direction">The sort direction of the results.</param>
		/// <param name="page">The page number of the results to show.</param>
		/// <param name="per_page">The number of items to show on each page of results, up to a maximum of 100.</param>
		/// <param name="query">The search query to use to filter the results.</param>
		/// <param name="sort">The way to sort the results.</param>
		/// <returns>The albums were returned.</returns>
		public async Task<Album[]> Get_albumsAsync(double user_id, Get_categoriesDirection direction, double page, double per_page, string query, Get_albums_alt1Sort sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+user_id+"/albums?direction=" + direction+"&page="+page+"&per_page="+per_page+"&query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&sort=" + sort;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Album[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete an album
		/// Delete_album users/{user_id}/albums/{album_id}
		/// </summary>
		/// <param name="album_id">The ID of the album.</param>
		/// <param name="user_id">The ID of the user.</param>
		public async Task Delete_albumAsync(double album_id, double user_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+user_id+"/albums/"+album_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a specific album
		/// Get_album users/{user_id}/albums/{album_id}
		/// </summary>
		/// <param name="album_id">The ID of the album.</param>
		/// <param name="user_id">The ID of the user.</param>
		/// <returns>The album was returned.</returns>
		public async Task Get_albumAsync(double album_id, double user_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+user_id+"/albums/"+album_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the custom upload thumbnails of an album
		/// Get_album_custom_thumbs users/{user_id}/albums/{album_id}/custom_thumbnails
		/// </summary>
		/// <param name="album_id">The ID of the album.</param>
		/// <param name="user_id">The ID of the user.</param>
		/// <param name="page">The page number of the results to show.</param>
		/// <param name="per_page">The number of items to show on each page of results, up to a maximum of 100.</param>
		/// <returns>The custom uploaded thumbnails were returned.</returns>
		public async Task Get_album_custom_thumbsAsync(double album_id, double user_id, double page, double per_page, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+user_id+"/albums/"+album_id+"/custom_thumbnails?page="+page+"&per_page="+per_page;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add a custom uploaded thumbnail
		/// Create_album_custom_thumb users/{user_id}/albums/{album_id}/custom_thumbnails
		/// </summary>
		/// <param name="album_id">The ID of the album.</param>
		/// <param name="user_id">The ID of the user.</param>
		public async Task Create_album_custom_thumbAsync(double album_id, double user_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+user_id+"/albums/"+album_id+"/custom_thumbnails";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove a custom uploaded album thumbnail
		/// This method removes a custom uploaded thumbnail from the specified album.
		/// Delete_album_custom_thumbnail users/{user_id}/albums/{album_id}/custom_thumbnails/{thumbnail_id}
		/// </summary>
		/// <param name="album_id">The ID of the album.</param>
		/// <param name="thumbnail_id">The ID of the custom thumbnail.</param>
		/// <param name="user_id">The ID of the user.</param>
		public async Task Delete_album_custom_thumbnailAsync(double album_id, double thumbnail_id, double user_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+user_id+"/albums/"+album_id+"/custom_thumbnails/"+thumbnail_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a specific custom uploaded album thumbnail
		/// Get_album_custom_thumbnail users/{user_id}/albums/{album_id}/custom_thumbnails/{thumbnail_id}
		/// </summary>
		/// <param name="album_id">The ID of the album.</param>
		/// <param name="thumbnail_id">The ID of the custom thumbnail.</param>
		/// <param name="user_id">The ID of the user.</param>
		/// <returns>The custom thumbnail was returned.</returns>
		public async Task Get_album_custom_thumbnailAsync(double album_id, double thumbnail_id, double user_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+user_id+"/albums/"+album_id+"/custom_thumbnails/"+thumbnail_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the custom logos of an album
		/// Get_album_logos users/{user_id}/albums/{album_id}/logos
		/// </summary>
		/// <param name="album_id">The ID of the album.</param>
		/// <param name="user_id">The ID of the user.</param>
		/// <param name="page">The page number of the results to show.</param>
		/// <param name="per_page">The number of items to show on each page of results, up to a maximum of 100.</param>
		/// <returns>The custom logos were returned.</returns>
		public async Task Get_album_logosAsync(double album_id, double user_id, double page, double per_page, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+user_id+"/albums/"+album_id+"/logos?page="+page+"&per_page="+per_page;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add a custom album logo
		/// Create_album_logo users/{user_id}/albums/{album_id}/logos
		/// </summary>
		/// <param name="album_id">The ID of the album.</param>
		/// <param name="user_id">The ID of the user.</param>
		public async Task Create_album_logoAsync(double album_id, double user_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+user_id+"/albums/"+album_id+"/logos";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove a custom album logo
		/// This method removes a custom logo from the specified album.
		/// Delete_album_logo users/{user_id}/albums/{album_id}/logos/{logo_id}
		/// </summary>
		/// <param name="album_id">The ID of the album.</param>
		/// <param name="logo_id">The ID of the custom logo.</param>
		/// <param name="user_id">The ID of the user.</param>
		public async Task Delete_album_logoAsync(double album_id, double logo_id, double user_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+user_id+"/albums/"+album_id+"/logos/"+logo_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a specific custom album logo
		/// Get_album_logo users/{user_id}/albums/{album_id}/logos/{logo_id}
		/// </summary>
		/// <param name="album_id">The ID of the album.</param>
		/// <param name="logo_id">The ID of the custom logo.</param>
		/// <param name="user_id">The ID of the user.</param>
		/// <returns>The custom logo was returned.</returns>
		public async Task Get_album_logoAsync(double album_id, double logo_id, double user_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+user_id+"/albums/"+album_id+"/logos/"+logo_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the videos in an album
		/// Get_album_videos users/{user_id}/albums/{album_id}/videos
		/// </summary>
		/// <param name="album_id">The ID of the album.</param>
		/// <param name="user_id">The ID of the user.</param>
		/// <param name="containing_uri">The page containing the video URI.</param>
		/// <param name="direction">The sort direction of the results.</param>
		/// <param name="filter">The attribute by which to filter the results.</param>
		/// <param name="filter_embeddable">Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). Required only if **filter** is `embeddable`.</param>
		/// <param name="page">The page number of the results to show.</param>
		/// <param name="password">The password of the album.</param>
		/// <param name="per_page">The number of items to show on each page of results, up to a maximum of 100.</param>
		/// <param name="query">The search query to use to filter the results.</param>
		/// <param name="sort">The way to sort the results.</param>
		/// <param name="weak_search">Whether to include private videos in the search. Please note that a separate search service provides this functionality. The service performs a partial text search on the video's name.</param>
		/// <returns>The videos were returned.</returns>
		public async Task Get_album_videosAsync(double album_id, double user_id, string containing_uri, Get_categoriesDirection direction, Get_channel_videosFilter filter, bool filter_embeddable, double page, string password, double per_page, string query, Get_album_videosSort sort, bool weak_search, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+user_id+"/albums/"+album_id+"/videos?containing_uri=" + (containing_uri==null? "" : System.Uri.EscapeDataString(containing_uri))+"&direction=" + direction+"&filter=" + filter+"&filter_embeddable="+filter_embeddable+"&page="+page+"&password=" + (password==null? "" : System.Uri.EscapeDataString(password))+"&per_page="+per_page+"&query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&sort=" + sort+"&weak_search="+weak_search;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Replace all the videos in an album
		/// This method replaces all the existing videos in an album with one or more videos.
		/// Replace_videos_in_album users/{user_id}/albums/{album_id}/videos
		/// </summary>
		/// <param name="album_id">The ID of the album.</param>
		/// <param name="user_id">The ID of the user.</param>
		public async Task Replace_videos_in_albumAsync(double album_id, double user_id, Replace_videos_in_albumPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+user_id+"/albums/"+album_id+"/videos";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Remove a video from an album
		/// Remove_video_from_album users/{user_id}/albums/{album_id}/videos/{video_id}
		/// </summary>
		/// <param name="album_id">The ID of the album.</param>
		/// <param name="user_id">The ID of the user.</param>
		/// <param name="video_id">The ID of the video.</param>
		public async Task Remove_video_from_albumAsync(double album_id, double user_id, double video_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+user_id+"/albums/"+album_id+"/videos/"+video_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a specific video in an album
		/// This method gets a single video from an album. You can use this method to determine whether the album contains the specified video.
		/// Get_album_video users/{user_id}/albums/{album_id}/videos/{video_id}
		/// </summary>
		/// <param name="album_id">The ID of the album.</param>
		/// <param name="user_id">The ID of the user.</param>
		/// <param name="video_id">The ID of the video.</param>
		/// <param name="password">The password of the album.</param>
		/// <returns>The video was returned.</returns>
		public async Task Get_album_videoAsync(double album_id, double user_id, double video_id, string password, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+user_id+"/albums/"+album_id+"/videos/"+video_id+"?password=" + (password==null? "" : System.Uri.EscapeDataString(password));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add a specific video to an album
		/// Add_video_to_album users/{user_id}/albums/{album_id}/videos/{video_id}
		/// </summary>
		/// <param name="album_id">The ID of the album.</param>
		/// <param name="user_id">The ID of the user.</param>
		/// <param name="video_id">The ID of the video.</param>
		public async Task Add_video_to_albumAsync(double album_id, double user_id, double video_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+user_id+"/albums/"+album_id+"/videos/"+video_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Set a video as the album thumbnail
		/// Set_video_as_album_thumbnail users/{user_id}/albums/{album_id}/videos/{video_id}/set_album_thumbnail
		/// </summary>
		/// <param name="album_id">The ID of the album.</param>
		/// <param name="user_id">The ID of the user.</param>
		/// <param name="video_id">The ID of the video.</param>
		/// <returns>The album was updated with a new thumbnail.</returns>
		public async Task<Album> Set_video_as_album_thumbnailAsync(double album_id, double user_id, double video_id, Set_video_as_album_thumbnailPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+user_id+"/albums/"+album_id+"/videos/"+video_id+"/set_album_thumbnail";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Album>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get all the videos in which a user appears
		/// Get_appearances users/{user_id}/appearances
		/// </summary>
		/// <param name="user_id">The ID of the user.</param>
		/// <param name="direction">The sort direction of the results.</param>
		/// <param name="filter">The attribute by which to filter the results.</param>
		/// <param name="filter_embeddable">Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). Required only if **filter** is `embeddable`.</param>
		/// <param name="page">The page number of the results to show.</param>
		/// <param name="per_page">The number of items to show on each page of results, up to a maximum of 100.</param>
		/// <param name="query">The search query to use to filter the results.</param>
		/// <param name="sort">The way to sort the results.</param>
		/// <returns>The videos were returned.</returns>
		public async Task Get_appearancesAsync(double user_id, Get_categoriesDirection direction, Get_channel_videosFilter filter, bool filter_embeddable, double page, double per_page, string query, Get_group_videosSort sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+user_id+"/appearances?direction=" + direction+"&filter=" + filter+"&filter_embeddable="+filter_embeddable+"&page="+page+"&per_page="+per_page+"&query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&sort=" + sort;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the categories that a user follows
		/// Get_category_subscriptions users/{user_id}/categories
		/// </summary>
		/// <param name="user_id">The ID of the user.</param>
		/// <param name="direction">The sort direction of the results.</param>
		/// <param name="page">The page number of the results to show.</param>
		/// <param name="per_page">The number of items to show on each page of results, up to a maximum of 100.</param>
		/// <param name="sort">The way to sort the results.</param>
		/// <returns>The categories were returned.</returns>
		public async Task Get_category_subscriptionsAsync(double user_id, Get_categoriesDirection direction, double page, double per_page, Get_category_subscriptions_alt1Sort sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+user_id+"/categories?direction=" + direction+"&page="+page+"&per_page="+per_page+"&sort=" + sort;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Unsubscribe a user from a category
		/// Unsubscribe_from_category users/{user_id}/categories/{category}
		/// </summary>
		/// <param name="category">The name of the category.</param>
		/// <param name="user_id">The ID of the user.</param>
		public async Task Unsubscribe_from_categoryAsync(string category, double user_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+user_id+"/categories/"+ (category==null? "" : System.Uri.EscapeDataString(category));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Check if a user follows a category
		/// Check_if_user_subscribed_to_category users/{user_id}/categories/{category}
		/// </summary>
		/// <param name="category">The name of the category.</param>
		/// <param name="user_id">The ID of the user.</param>
		public async Task Check_if_user_subscribed_to_categoryAsync(string category, double user_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+user_id+"/categories/"+ (category==null? "" : System.Uri.EscapeDataString(category));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Subscribe a user to a single category
		/// Subscribe_to_category users/{user_id}/categories/{category}
		/// </summary>
		/// <param name="category">The name of the category.</param>
		/// <param name="user_id">The ID of the user.</param>
		public async Task Subscribe_to_categoryAsync(double category, double user_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+user_id+"/categories/"+category;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the channels to which a user subscribes
		/// Get_channel_subscriptions users/{user_id}/channels
		/// </summary>
		/// <param name="user_id">The ID of the user.</param>
		/// <param name="direction">The sort direction of the results.</param>
		/// <param name="filter">The attribute by which to filter the results.</param>
		/// <param name="page">The page number of the results to show.</param>
		/// <param name="per_page">The number of items to show on each page of results, up to a maximum of 100.</param>
		/// <param name="query">The search query to use to filter the results.</param>
		/// <param name="sort">The way to sort the results.</param>
		/// <returns>The channels were returned.</returns>
		public async Task Get_channel_subscriptionsAsync(double user_id, Get_categoriesDirection direction, Get_channel_subscriptions_alt1Filter filter, double page, double per_page, string query, Get_category_channelsSort sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+user_id+"/channels?direction=" + direction+"&filter=" + filter+"&page="+page+"&per_page="+per_page+"&query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&sort=" + sort;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Unsubscribe a user from a specific channel
		/// Unsubscribe_from_channel users/{user_id}/channels/{channel_id}
		/// </summary>
		/// <param name="channel_id">The ID of the channel.</param>
		/// <param name="user_id">The ID of the user.</param>
		public async Task Unsubscribe_from_channelAsync(double channel_id, double user_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+user_id+"/channels/"+channel_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Check if a user follows a channel
		/// Check_if_user_subscribed_to_channel users/{user_id}/channels/{channel_id}
		/// </summary>
		/// <param name="channel_id">The ID of the channel.</param>
		/// <param name="user_id">The ID of the user.</param>
		public async Task Check_if_user_subscribed_to_channelAsync(double channel_id, double user_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+user_id+"/channels/"+channel_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Subscribe a user to a specific channel
		/// Subscribe_to_channel users/{user_id}/channels/{channel_id}
		/// </summary>
		/// <param name="channel_id">The ID of the channel.</param>
		/// <param name="user_id">The ID of the user.</param>
		public async Task Subscribe_to_channelAsync(double channel_id, double user_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+user_id+"/channels/"+channel_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the custom logos that belong to a user
		/// Get_custom_logos users/{user_id}/customlogos
		/// </summary>
		/// <param name="user_id">The ID of the user.</param>
		/// <returns>The custom logos were returned.</returns>
		public async Task Get_custom_logosAsync(double user_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+user_id+"/customlogos";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add a custom logo
		/// Create_custom_logo users/{user_id}/customlogos
		/// </summary>
		/// <param name="user_id">The ID of the user.</param>
		public async Task Create_custom_logoAsync(double user_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+user_id+"/customlogos";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a specific custom logo
		/// Get_custom_logo users/{user_id}/customlogos/{logo_id}
		/// </summary>
		/// <param name="logo_id">The ID of the custom logo.</param>
		/// <param name="user_id">The ID of the user.</param>
		/// <returns>The custom logo was returned.</returns>
		public async Task Get_custom_logoAsync(double logo_id, double user_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+user_id+"/customlogos/"+logo_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all videos in a user's feed
		/// Get_feed users/{user_id}/feed
		/// </summary>
		/// <param name="user_id">The ID of the user.</param>
		/// <param name="offset">Necessary for proper pagination. You shouldn't provide this value yourself, and instead use the pagination links in the feed response. Please see our [pagination documentation](https://developer.vimeo.com/api/common-formats#using-the-pagination-parameter) for more information.</param>
		/// <param name="page">The page number of the results to show.</param>
		/// <param name="per_page">The number of items to show on each page of results, up to a maximum of 100.</param>
		/// <param name="type">The feed type.</param>
		/// <returns>The videos were returned.</returns>
		public async Task Get_feedAsync(double user_id, string offset, double page, double per_page, Get_feed_alt1Type type, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+user_id+"/feed?offset=" + (offset==null? "" : System.Uri.EscapeDataString(offset))+"&page="+page+"&per_page="+per_page+"&type=" + type;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the followers of a user
		/// Get_followers users/{user_id}/followers
		/// </summary>
		/// <param name="user_id">The ID of the user.</param>
		/// <param name="direction">The sort direction of the results.</param>
		/// <param name="page">The page number of the results to show.</param>
		/// <param name="per_page">The number of items to show on each page of results, up to a maximum of 100.</param>
		/// <param name="query">The search query to use to filter the results.</param>
		/// <param name="sort">The way to sort the results.</param>
		/// <returns>The user's followers were returned.</returns>
		public async Task Get_followersAsync(double user_id, Get_categoriesDirection direction, double page, double per_page, string query, Get_channel_moderatorsSort sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+user_id+"/followers?direction=" + direction+"&page="+page+"&per_page="+per_page+"&query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&sort=" + sort;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the users that a user is following
		/// Get_user_following users/{user_id}/following
		/// </summary>
		/// <param name="user_id">The ID of the user.</param>
		/// <param name="direction">The sort direction of the results.</param>
		/// <param name="filter">The attribute by which to filter the results.</param>
		/// <param name="page">The page number of the results to show.</param>
		/// <param name="per_page">The number of items to show on each page of results, up to a maximum of 100.</param>
		/// <param name="query">The search query to use to filter the results.</param>
		/// <param name="sort">The way to sort the results.</param>
		/// <returns>The followed users were returned.</returns>
		public async Task Get_user_followingAsync(double user_id, Get_categoriesDirection direction, Get_user_following_alt1Filter filter, double page, double per_page, string query, Get_channel_moderatorsSort sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+user_id+"/following?direction=" + direction+"&filter=" + filter+"&page="+page+"&per_page="+per_page+"&query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&sort=" + sort;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Follow a list of users
		/// Follow_users users/{user_id}/following
		/// </summary>
		/// <param name="user_id">The ID of the user.</param>
		public async Task Follow_usersAsync(double user_id, Follow_usersPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+user_id+"/following";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Unfollow a user
		/// Unfollow_user users/{user_id}/following/{follow_user_id}
		/// </summary>
		/// <param name="follow_user_id">The ID of the following user.</param>
		/// <param name="user_id">The ID of the user.</param>
		public async Task Unfollow_userAsync(double follow_user_id, double user_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+user_id+"/following/"+follow_user_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Check if a user is following another user
		/// Check_if_user_is_following users/{user_id}/following/{follow_user_id}
		/// </summary>
		/// <param name="follow_user_id">The ID of the following user.</param>
		/// <param name="user_id">The ID of the user.</param>
		public async Task Check_if_user_is_followingAsync(double follow_user_id, double user_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+user_id+"/following/"+follow_user_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Follow a specific user
		/// Follow_user users/{user_id}/following/{follow_user_id}
		/// </summary>
		/// <param name="follow_user_id">The ID of the following user.</param>
		/// <param name="user_id">The ID of the user.</param>
		public async Task Follow_userAsync(double follow_user_id, double user_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+user_id+"/following/"+follow_user_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the groups that a user has joined
		/// Get_user_groups users/{user_id}/groups
		/// </summary>
		/// <param name="user_id">The ID of the user.</param>
		/// <param name="direction">The sort direction of the results.</param>
		/// <param name="filter">The attribute by which to filter the results.</param>
		/// <param name="page">The page number of the results to show.</param>
		/// <param name="per_page">The number of items to show on each page of results, up to a maximum of 100.</param>
		/// <param name="query">The search query to use to filter the results.</param>
		/// <param name="sort">The way to sort the results.</param>
		/// <returns>The groups were returned.</returns>
		public async Task Get_user_groupsAsync(double user_id, Get_categoriesDirection direction, Get_channel_subscriptions_alt1Filter filter, double page, double per_page, string query, Get_category_groupsSort sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+user_id+"/groups?direction=" + direction+"&filter=" + filter+"&page="+page+"&per_page="+per_page+"&query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&sort=" + sort;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove a user from a group
		/// Leave_group users/{user_id}/groups/{group_id}
		/// </summary>
		/// <param name="group_id">The ID of the group.</param>
		/// <param name="user_id">The ID of the user.</param>
		public async Task Leave_groupAsync(double group_id, double user_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+user_id+"/groups/"+group_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Check if a user has joined a group
		/// Check_if_user_joined_group users/{user_id}/groups/{group_id}
		/// </summary>
		/// <param name="group_id">The ID of the group.</param>
		/// <param name="user_id">The ID of the user.</param>
		public async Task Check_if_user_joined_groupAsync(double group_id, double user_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+user_id+"/groups/"+group_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add a user to a group
		/// Join_group users/{user_id}/groups/{group_id}
		/// </summary>
		/// <param name="group_id">The ID of the group.</param>
		/// <param name="user_id">The ID of the user.</param>
		public async Task Join_groupAsync(double group_id, double user_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+user_id+"/groups/"+group_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the videos that a user has liked
		/// Get_likes users/{user_id}/likes
		/// </summary>
		/// <param name="user_id">The ID of the user.</param>
		/// <param name="filter">The attribute by which to filter the results.</param>
		/// <param name="filter_embeddable">Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). Required only if **filter** is `embeddable`.</param>
		/// <param name="page">The page number of the results to show.</param>
		/// <param name="per_page">The number of items to show on each page of results, up to a maximum of 100.</param>
		/// <param name="query">The search query to use to filter the results.</param>
		/// <param name="sort">The way to sort the results.</param>
		/// <returns>The videos were returned.</returns>
		public async Task Get_likesAsync(double user_id, Get_channel_videosFilter filter, bool filter_embeddable, double page, double per_page, string query, Get_group_videosSort sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+user_id+"/likes?filter=" + filter+"&filter_embeddable="+filter_embeddable+"&page="+page+"&per_page="+per_page+"&query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&sort=" + sort;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Cause a user to unlike a video
		/// Unlike_video users/{user_id}/likes/{video_id}
		/// </summary>
		/// <param name="user_id">The ID of the user.</param>
		/// <param name="video_id">The ID of the video.</param>
		public async Task Unlike_videoAsync(double user_id, double video_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+user_id+"/likes/"+video_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Check if a user has liked a video
		/// Check_if_user_liked_video users/{user_id}/likes/{video_id}
		/// </summary>
		/// <param name="user_id">The ID of the user.</param>
		/// <param name="video_id">The ID of the video.</param>
		public async Task Check_if_user_liked_videoAsync(double user_id, double video_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+user_id+"/likes/"+video_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Cause a user to like a video
		/// Like_video users/{user_id}/likes/{video_id}
		/// </summary>
		/// <param name="user_id">The ID of the user.</param>
		/// <param name="video_id">The ID of the video.</param>
		public async Task Like_videoAsync(double user_id, double video_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+user_id+"/likes/"+video_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the On Demand pages of a user
		/// Get_user_vods users/{user_id}/ondemand/pages
		/// </summary>
		/// <param name="user_id">The ID of the user.</param>
		/// <param name="direction">The sort direction of the results.</param>
		/// <param name="filter">The type of On Demand pages to return.</param>
		/// <param name="page">The page number of the results to show.</param>
		/// <param name="per_page">The number of items to show on each page of results, up to a maximum of 100.</param>
		/// <param name="sort">The way to sort the results.</param>
		/// <returns>The On Demand pages were returned.</returns>
		public async Task Get_user_vodsAsync(double user_id, Get_categoriesDirection direction, On_demand_pageType filter, double page, double per_page, Get_user_vodsSort sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+user_id+"/ondemand/pages?direction=" + direction+"&filter=" + filter+"&page="+page+"&per_page="+per_page+"&sort=" + sort;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create an On Demand page
		/// Create_vod users/{user_id}/ondemand/pages
		/// </summary>
		/// <param name="user_id">The ID of the user.</param>
		public async Task Create_vodAsync(double user_id, Create_vodPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+user_id+"/ondemand/pages";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Check if a user has made a purchase or rental from an On Demand page
		/// Check_if_vod_was_purchased users/{user_id}/ondemand/purchases
		/// </summary>
		/// <param name="user_id">The ID of the user.</param>
		/// <returns>You have purchased the On Demand page.</returns>
		public async Task Check_if_vod_was_purchasedAsync(double user_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+user_id+"/ondemand/purchases";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the pictures that belong to a user
		/// Get_pictures users/{user_id}/pictures
		/// </summary>
		/// <param name="user_id">The ID of the user.</param>
		/// <param name="page">The page number of the results to show.</param>
		/// <param name="per_page">The number of items to show on each page of results, up to a maximum of 100.</param>
		/// <returns>The pictures were returned.</returns>
		public async Task Get_picturesAsync(double user_id, double page, double per_page, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+user_id+"/pictures?page="+page+"&per_page="+per_page;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add a user picture
		/// Create_picture users/{user_id}/pictures
		/// </summary>
		/// <param name="user_id">The ID of the user.</param>
		/// <returns>The user picture was created.</returns>
		public async Task Create_pictureAsync(double user_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+user_id+"/pictures";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a user picture
		/// Delete_picture users/{user_id}/pictures/{portraitset_id}
		/// </summary>
		/// <param name="portraitset_id">The ID of the picture.</param>
		/// <param name="user_id">The ID of the user.</param>
		public async Task Delete_pictureAsync(double portraitset_id, double user_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+user_id+"/pictures/"+portraitset_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a specific user picture
		/// Get_picture users/{user_id}/pictures/{portraitset_id}
		/// </summary>
		/// <param name="portraitset_id">The ID of the picture.</param>
		/// <param name="user_id">The ID of the user.</param>
		/// <returns>The picture was returned.</returns>
		public async Task Get_pictureAsync(double portraitset_id, double user_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+user_id+"/pictures/"+portraitset_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the portfolios that belong to a user
		/// Get_portfolios users/{user_id}/portfolios
		/// </summary>
		/// <param name="user_id">The ID of the user.</param>
		/// <param name="direction">The sort direction of the results.</param>
		/// <param name="page">The page number of the results to show.</param>
		/// <param name="per_page">The number of items to show on each page of results, up to a maximum of 100.</param>
		/// <param name="query">The search query to use to filter the results.</param>
		/// <param name="sort">The way to sort the results.</param>
		/// <returns>The portfolios were returned.</returns>
		public async Task Get_portfoliosAsync(double user_id, Get_categoriesDirection direction, double page, double per_page, string query, Get_channel_moderatorsSort sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+user_id+"/portfolios?direction=" + direction+"&page="+page+"&per_page="+per_page+"&query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&sort=" + sort;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a specific portfolio
		/// Get_portfolio users/{user_id}/portfolios/{portfolio_id}
		/// </summary>
		/// <param name="portfolio_id">The ID of the portfolio.</param>
		/// <param name="user_id">The ID of the user.</param>
		/// <returns>The portfolio was returned.</returns>
		public async Task Get_portfolioAsync(double portfolio_id, double user_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+user_id+"/portfolios/"+portfolio_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the videos in a portfolio
		/// Get_portfolio_videos users/{user_id}/portfolios/{portfolio_id}/videos
		/// </summary>
		/// <param name="portfolio_id">The ID of the portfolio.</param>
		/// <param name="user_id">The ID of the user.</param>
		/// <param name="containing_uri">The page that contains the video URI.</param>
		/// <param name="filter">The attribute by which to filter the results.</param>
		/// <param name="filter_embeddable">Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). Required only if **filter** is `embeddable`.</param>
		/// <param name="page">The page number of the results to show.</param>
		/// <param name="per_page">The number of items to show on each page of results, up to a maximum of 100.</param>
		/// <param name="sort">The way to sort the results.
		///
		///Option descriptions:
		/// * `default` - This will sort to the default sort set on the portfolio.
		///</param>
		/// <returns>The videos were returned.</returns>
		public async Task Get_portfolio_videosAsync(double portfolio_id, double user_id, string containing_uri, Get_channel_videosFilter filter, bool filter_embeddable, double page, double per_page, Get_portfolio_videosSort sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+user_id+"/portfolios/"+portfolio_id+"/videos?containing_uri=" + (containing_uri==null? "" : System.Uri.EscapeDataString(containing_uri))+"&filter=" + filter+"&filter_embeddable="+filter_embeddable+"&page="+page+"&per_page="+per_page+"&sort=" + sort;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove a video from a portfolio
		/// Delete_video_from_portfolio users/{user_id}/portfolios/{portfolio_id}/videos/{video_id}
		/// </summary>
		/// <param name="portfolio_id">The ID of the portfolio.</param>
		/// <param name="user_id">The ID of the user.</param>
		/// <param name="video_id">The ID of the video.</param>
		public async Task Delete_video_from_portfolioAsync(double portfolio_id, double user_id, double video_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+user_id+"/portfolios/"+portfolio_id+"/videos/"+video_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a specific video in a portfolio
		/// Get_portfolio_video users/{user_id}/portfolios/{portfolio_id}/videos/{video_id}
		/// </summary>
		/// <param name="portfolio_id">The ID of the portfolio.</param>
		/// <param name="user_id">The ID of the user.</param>
		/// <param name="video_id">The ID of the video.</param>
		/// <returns>The video was returned.</returns>
		public async Task Get_portfolio_videoAsync(double portfolio_id, double user_id, double video_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+user_id+"/portfolios/"+portfolio_id+"/videos/"+video_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add a video to a portfolio
		/// Add_video_to_portfolio users/{user_id}/portfolios/{portfolio_id}/videos/{video_id}
		/// </summary>
		/// <param name="portfolio_id">The ID of the portfolio.</param>
		/// <param name="user_id">The ID of the user.</param>
		/// <param name="video_id">The ID of the video.</param>
		public async Task Add_video_to_portfolioAsync(double portfolio_id, double user_id, double video_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+user_id+"/portfolios/"+portfolio_id+"/videos/"+video_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the embed presets that a user has created
		/// Get_embed_presets users/{user_id}/presets
		/// </summary>
		/// <param name="user_id">The ID of the user.</param>
		/// <param name="page">The page number of the results to show.</param>
		/// <param name="per_page">The number of items to show on each page of results, up to a maximum of 100.</param>
		/// <returns>The embed presets were returned.</returns>
		public async Task Get_embed_presetsAsync(double user_id, double page, double per_page, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+user_id+"/presets?page="+page+"&per_page="+per_page;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a specific embed preset
		/// Get_embed_preset users/{user_id}/presets/{preset_id}
		/// </summary>
		/// <param name="preset_id">The ID of the preset.</param>
		/// <param name="user_id">The ID of the user.</param>
		/// <returns>The embed preset was returned.</returns>
		public async Task Get_embed_presetAsync(double preset_id, double user_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+user_id+"/presets/"+preset_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the videos that have been added to an embed preset
		/// Get_embed_preset_videos users/{user_id}/presets/{preset_id}/videos
		/// </summary>
		/// <param name="preset_id">The ID of the preset.</param>
		/// <param name="user_id">The ID of the user.</param>
		/// <param name="page">The page number of the results to show.</param>
		/// <param name="per_page">The number of items to show on each page of results, up to a maximum of 100.</param>
		/// <returns>The videos were returned.</returns>
		public async Task Get_embed_preset_videosAsync(double preset_id, double user_id, double page, double per_page, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+user_id+"/presets/"+preset_id+"/videos?page="+page+"&per_page="+per_page;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the projects that belong to a user
		/// This method gets all the projects that belong to the specified user.
		/// Get_projects users/{user_id}/projects
		/// </summary>
		/// <param name="user_id">The ID of the user.</param>
		/// <param name="direction">The sort direction of the results.</param>
		/// <param name="page">The page number of the results to show.</param>
		/// <param name="per_page">The number of items to show on each page of results, up to a maximum of 100.</param>
		/// <param name="sort">The way to sort the results.</param>
		/// <returns>The projects were returned.</returns>
		public async Task<Project[]> Get_projectsAsync(double user_id, Get_categoriesDirection direction, double page, double per_page, Get_projectsSort sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+user_id+"/projects?direction=" + direction+"&page="+page+"&per_page="+per_page+"&sort=" + sort;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Project[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a project
		/// This method creates a new project for the specified user.
		/// Create_project users/{user_id}/projects
		/// </summary>
		/// <param name="user_id">The ID of the user.</param>
		public async Task Create_projectAsync(double user_id, Create_projectPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+user_id+"/projects";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a project
		/// This method deletes a project and optionally also the videos that it contains.
		/// Delete_project users/{user_id}/projects/{project_id}
		/// </summary>
		/// <param name="project_id">The ID of the project.</param>
		/// <param name="user_id">The ID of the user.</param>
		/// <param name="should_delete_clips">Whether to delete all the videos in the project along with the project itself.</param>
		public async Task Delete_projectAsync(double project_id, double user_id, bool should_delete_clips, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+user_id+"/projects/"+project_id+"?should_delete_clips="+should_delete_clips;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a specific project
		/// This method gets a single project that belongs to the specified user.
		/// Get_project users/{user_id}/projects/{project_id}
		/// </summary>
		/// <param name="project_id">The ID of the project.</param>
		/// <param name="user_id">The ID of the user.</param>
		/// <returns>The project was returned.</returns>
		public async Task<Project> Get_projectAsync(double project_id, double user_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+user_id+"/projects/"+project_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Project>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Edit a project
		/// This method edits an existing project.
		/// Edit_project users/{user_id}/projects/{project_id}
		/// </summary>
		/// <param name="project_id">The ID of the project.</param>
		/// <param name="user_id">The ID of the user.</param>
		/// <returns>The project was edited.</returns>
		public async Task<Project> Edit_projectAsync(double project_id, double user_id, Edit_projectPatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+user_id+"/projects/"+project_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Project>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Remove a list of videos from a project
		/// This method removed multiple videos from the specified project.
		/// Remove_videos_from_project users/{user_id}/projects/{project_id}/videos
		/// </summary>
		/// <param name="project_id">The ID of the project.</param>
		/// <param name="user_id">The ID of the user.</param>
		/// <param name="should_delete_clips">Whether to delete the videos when removing them from the project.</param>
		/// <param name="uris">A comma-separated list of the video URIs to remove.</param>
		public async Task Remove_videos_from_projectAsync(double project_id, double user_id, bool should_delete_clips, string uris, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+user_id+"/projects/"+project_id+"/videos?should_delete_clips="+should_delete_clips+"&uris=" + (uris==null? "" : System.Uri.EscapeDataString(uris));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the videos in a project
		/// This method gets all the videos that belong to the specified project.
		/// Get_project_videos users/{user_id}/projects/{project_id}/videos
		/// </summary>
		/// <param name="project_id">The ID of the project.</param>
		/// <param name="user_id">The ID of the user.</param>
		/// <param name="direction">The sort direction of the results.</param>
		/// <param name="page">The page number of the results to show.</param>
		/// <param name="per_page">The number of items to show on each page of results, up to a maximum of 100.</param>
		/// <param name="sort">The way to sort the results.</param>
		/// <returns>The videos were returned.</returns>
		public async Task<Video[]> Get_project_videosAsync(double project_id, double user_id, Get_categoriesDirection direction, double page, double per_page, Get_project_videosSort sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+user_id+"/projects/"+project_id+"/videos?direction=" + direction+"&page="+page+"&per_page="+per_page+"&sort=" + sort;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Video[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add a list of videos to a project
		/// This method adds multiple videos to the specified project.
		/// Add_videos_to_project users/{user_id}/projects/{project_id}/videos
		/// </summary>
		/// <param name="project_id">The ID of the project.</param>
		/// <param name="user_id">The ID of the user.</param>
		/// <param name="uris">A comma-separated list of video URIs to add.</param>
		public async Task Add_videos_to_projectAsync(double project_id, double user_id, string uris, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+user_id+"/projects/"+project_id+"/videos?uris=" + (uris==null? "" : System.Uri.EscapeDataString(uris));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove a specific video from a project
		/// This method removes a single video from the specified project.
		/// Remove_video_from_project users/{user_id}/projects/{project_id}/videos/{video_id}
		/// </summary>
		/// <param name="project_id">The ID of the project.</param>
		/// <param name="user_id">The ID of the user.</param>
		/// <param name="video_id">The ID of the video.</param>
		public async Task Remove_video_from_projectAsync(double project_id, double user_id, double video_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+user_id+"/projects/"+project_id+"/videos/"+video_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add a specific video to a project
		/// This method adds a single video to the specified project.
		/// Add_video_to_project users/{user_id}/projects/{project_id}/videos/{video_id}
		/// </summary>
		/// <param name="project_id">The ID of the project.</param>
		/// <param name="user_id">The ID of the user.</param>
		/// <param name="video_id">The ID of the video.</param>
		public async Task Add_video_to_projectAsync(double project_id, double user_id, double video_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+user_id+"/projects/"+project_id+"/videos/"+video_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Complete a user's streaming upload
		/// Complete_streaming_upload users/{user_id}/uploads/{upload}
		/// </summary>
		/// <param name="upload">The ID of the upload attempt.</param>
		/// <param name="user_id">The ID of the user.</param>
		/// <param name="signature">The crypto signature of the completed upload.</param>
		/// <param name="video_file_id">The ID of the uploaded file.</param>
		public async Task Complete_streaming_uploadAsync(double upload, double user_id, string signature, double video_file_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+user_id+"/uploads/"+upload+"?signature=" + (signature==null? "" : System.Uri.EscapeDataString(signature))+"&video_file_id="+video_file_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a user's upload attempt
		/// Get_upload_attempt users/{user_id}/uploads/{upload}
		/// </summary>
		/// <param name="upload">The ID of the upload attempt.</param>
		/// <param name="user_id">The ID of the user.</param>
		/// <returns>The upload attempt was returned.</returns>
		public async Task Get_upload_attemptAsync(double upload, double user_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+user_id+"/uploads/"+upload;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the videos that a user has uploaded
		/// Get_videos users/{user_id}/videos
		/// </summary>
		/// <param name="user_id">The ID of the user.</param>
		/// <param name="containing_uri">The page that contains the video URI. Only available when not paired with `query`.</param>
		/// <param name="direction">The sort direction of the results.</param>
		/// <param name="filter">The attribute by which to filter the results.</param>
		/// <param name="filter_embeddable">Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). Required only if **filter** is `embeddable`.</param>
		/// <param name="filter_playable">Whether to filter by all playable videos or by all videos that are not  playable.</param>
		/// <param name="page">The page number of the results to show.</param>
		/// <param name="per_page">The number of items to show on each page of results, up to a maximum of 100.</param>
		/// <param name="query">The search query to use to filter the results.</param>
		/// <param name="sort">The way to sort the results.</param>
		/// <returns>The videos were returned.</returns>
		public async Task Get_videosAsync(double user_id, string containing_uri, Get_categoriesDirection direction, Get_videos_alt1Filter filter, bool filter_embeddable, bool filter_playable, double page, double per_page, string query, Get_videosSort sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+user_id+"/videos?containing_uri=" + (containing_uri==null? "" : System.Uri.EscapeDataString(containing_uri))+"&direction=" + direction+"&filter=" + filter+"&filter_embeddable="+filter_embeddable+"&filter_playable="+filter_playable+"&page="+page+"&per_page="+per_page+"&query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&sort=" + sort;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Check if a user owns a video
		/// Check_if_user_owns_video users/{user_id}/videos/{video_id}
		/// </summary>
		/// <param name="user_id">The ID of the user.</param>
		/// <param name="video_id">The ID of the video.</param>
		/// <returns>The user owns the video.</returns>
		public async Task Check_if_user_owns_videoAsync(double user_id, double video_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+user_id+"/videos/"+video_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the videos in a user's Watch Later queue
		/// Get_watch_later_queue users/{user_id}/watchlater
		/// </summary>
		/// <param name="user_id">The ID of the user.</param>
		/// <param name="direction">The sort direction of the results.</param>
		/// <param name="filter">The attribute by which to filter the results.</param>
		/// <param name="filter_embeddable">Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). Required only if **filter** is `embeddable`.</param>
		/// <param name="page">The page number of the results to show.</param>
		/// <param name="per_page">The number of items to show on each page of results, up to a maximum of 100.</param>
		/// <param name="query">The search query to use to filter the results.</param>
		/// <param name="sort">The way to sort the results.</param>
		/// <returns>The videos were returned.</returns>
		public async Task Get_watch_later_queueAsync(double user_id, Get_categoriesDirection direction, Get_channel_videosFilter filter, bool filter_embeddable, double page, double per_page, string query, Get_group_videosSort sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+user_id+"/watchlater?direction=" + direction+"&filter=" + filter+"&filter_embeddable="+filter_embeddable+"&page="+page+"&per_page="+per_page+"&query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&sort=" + sort;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove a video from a user's Watch Later queue
		/// Delete_video_from_watch_later users/{user_id}/watchlater/{video_id}
		/// </summary>
		/// <param name="user_id">The ID of the user.</param>
		/// <param name="video_id">The ID of the video.</param>
		public async Task Delete_video_from_watch_laterAsync(double user_id, double video_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+user_id+"/watchlater/"+video_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Check if a user has added a specific video to their Watch Later queue
		/// Check_watch_later_queue users/{user_id}/watchlater/{video_id}
		/// </summary>
		/// <param name="user_id">The ID of the user.</param>
		/// <param name="video_id">The ID of the video.</param>
		/// <returns>The video appears in the user's Watch Later queue.</returns>
		public async Task Check_watch_later_queueAsync(double user_id, double video_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+user_id+"/watchlater/"+video_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add a video to a user's Watch Later queue
		/// Add_video_to_watch_later users/{user_id}/watchlater/{video_id}
		/// </summary>
		/// <param name="user_id">The ID of the user.</param>
		/// <param name="video_id">The ID of the video.</param>
		public async Task Add_video_to_watch_laterAsync(double user_id, double video_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+user_id+"/watchlater/"+video_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Search for videos
		/// Search_videos videos
		/// </summary>
		/// <param name="direction">The sort direction of the results.</param>
		/// <param name="filter">The attribute by which to filter the results. `CC` and related filters target videos with the corresponding Creative Commons licenses. For more information, see our [Creative Commons](https://vimeo.com/creativecommons) page.</param>
		/// <param name="links">A comma-separated list of video URLs to find.</param>
		/// <param name="page">The page number of the results to show.</param>
		/// <param name="per_page">The number of items to show on each page of results, up to a maximum of 100.</param>
		/// <param name="query">Search query.</param>
		/// <param name="sort">The way to sort the results.</param>
		/// <param name="uris">The comma-separated list of videos to find.</param>
		/// <returns>The search results were returned.</returns>
		public async Task Search_videosAsync(Get_categoriesDirection direction, Search_videosFilter filter, string links, double page, double per_page, string query, Search_videosSort sort, string uris, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "videos?direction=" + direction+"&filter=" + filter+"&links=" + (links==null? "" : System.Uri.EscapeDataString(links))+"&page="+page+"&per_page="+per_page+"&query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&sort=" + sort+"&uris=" + (uris==null? "" : System.Uri.EscapeDataString(uris));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a video
		/// Delete_video videos/{video_id}
		/// </summary>
		/// <param name="video_id">The ID of the video.</param>
		public async Task Delete_videoAsync(double video_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "videos/"+video_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a specific video
		/// Get_video videos/{video_id}
		/// </summary>
		/// <param name="video_id">The ID of the video.</param>
		/// <returns>The video was returned.</returns>
		public async Task Get_videoAsync(double video_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "videos/"+video_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the channels to which a user can add or remove a specific video
		/// Get_available_video_channels videos/{video_id}/available_channels
		/// </summary>
		/// <param name="video_id">The ID of the video.</param>
		/// <returns>The channels were returned.</returns>
		public async Task Get_available_video_channelsAsync(double video_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "videos/"+video_id+"/available_channels";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the categories to which a video belongs
		/// Get_video_categories videos/{video_id}/categories
		/// </summary>
		/// <param name="video_id">The ID of the video.</param>
		/// <returns>The categories were returned.</returns>
		public async Task Get_video_categoriesAsync(double video_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "videos/"+video_id+"/categories";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the comments on a video
		/// Get_comments videos/{video_id}/comments
		/// </summary>
		/// <param name="video_id">The ID of the video.</param>
		/// <param name="direction">The sort direction of the results.</param>
		/// <param name="page">The page number of the results to show.</param>
		/// <param name="per_page">The number of items to show on each page of results, up to a maximum of 100.</param>
		/// <returns>The comments were returned.</returns>
		public async Task Get_commentsAsync(double video_id, Get_categoriesDirection direction, double page, double per_page, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "videos/"+video_id+"/comments?direction=" + direction+"&page="+page+"&per_page="+per_page;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a video comment
		/// Delete_comment videos/{video_id}/comments/{comment_id}
		/// </summary>
		/// <param name="comment_id">The ID of the comment.</param>
		/// <param name="video_id">The ID of the video.</param>
		public async Task Delete_commentAsync(double comment_id, double video_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "videos/"+video_id+"/comments/"+comment_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a specific video comment
		/// Get_comment videos/{video_id}/comments/{comment_id}
		/// </summary>
		/// <param name="comment_id">The ID of the comment.</param>
		/// <param name="video_id">The ID of the video.</param>
		/// <returns>The comment was returned.</returns>
		public async Task Get_commentAsync(double comment_id, double video_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "videos/"+video_id+"/comments/"+comment_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the replies to a video comment
		/// Get_comment_replies videos/{video_id}/comments/{comment_id}/replies
		/// </summary>
		/// <param name="comment_id">The ID of the comment.</param>
		/// <param name="video_id">The ID of the video.</param>
		/// <param name="page">The page number of the results to show.</param>
		/// <param name="per_page">The number of items to show on each page of results, up to a maximum of 100.</param>
		/// <returns>The replies were returned.</returns>
		public async Task Get_comment_repliesAsync(double comment_id, double video_id, double page, double per_page, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "videos/"+video_id+"/comments/"+comment_id+"/replies?page="+page+"&per_page="+per_page;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the credited users in a video
		/// Get_video_credits videos/{video_id}/credits
		/// </summary>
		/// <param name="video_id">The ID of the video.</param>
		/// <param name="direction">The sort direction of the results.</param>
		/// <param name="page">The page number of the results to show.</param>
		/// <param name="per_page">The number of items to show on each page of results, up to a maximum of 100.</param>
		/// <param name="query">The search query to use to filter the results.</param>
		/// <param name="sort">The way to sort the results.</param>
		/// <returns>The users were returned.</returns>
		public async Task Get_video_creditsAsync(double video_id, Get_categoriesDirection direction, double page, double per_page, string query, Get_channel_moderatorsSort sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "videos/"+video_id+"/credits?direction=" + direction+"&page="+page+"&per_page="+per_page+"&query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&sort=" + sort;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a credit for a user in a video
		/// Delete_video_credit videos/{video_id}/credits/{credit_id}
		/// </summary>
		/// <param name="credit_id">The ID of the credit.</param>
		/// <param name="video_id">The ID of the video.</param>
		public async Task Delete_video_creditAsync(double credit_id, double video_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "videos/"+video_id+"/credits/"+credit_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a specific credited user in a video
		/// Get_video_credit videos/{video_id}/credits/{credit_id}
		/// </summary>
		/// <param name="credit_id">The ID of the credit.</param>
		/// <param name="video_id">The ID of the video.</param>
		/// <returns>The credit was returned.</returns>
		public async Task Get_video_creditAsync(double credit_id, double video_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "videos/"+video_id+"/credits/"+credit_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the users who have liked a video
		/// Get_video_likes videos/{video_id}/likes
		/// </summary>
		/// <param name="video_id">The ID of the video.</param>
		/// <param name="direction">The sort direction of the results.</param>
		/// <param name="page">The page number of the results to show.</param>
		/// <param name="per_page">The number of items to show on each page of results, up to a maximum of 100.</param>
		/// <param name="sort">The way to sort the results.</param>
		/// <returns>The users were returned.</returns>
		public async Task Get_video_likesAsync(double video_id, Get_categoriesDirection direction, double page, double per_page, Get_channel_moderatorsSort sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "videos/"+video_id+"/likes?direction=" + direction+"&page="+page+"&per_page="+per_page+"&sort=" + sort;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the thumbnails of a video
		/// Get_video_thumbnails videos/{video_id}/pictures
		/// </summary>
		/// <param name="video_id">The ID of the video.</param>
		/// <param name="page">The page number of the results to show.</param>
		/// <param name="per_page">The number of items to show on each page of results, up to a maximum of 100.</param>
		/// <returns>The thumbnails were returned.</returns>
		public async Task Get_video_thumbnailsAsync(double video_id, double page, double per_page, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "videos/"+video_id+"/pictures?page="+page+"&per_page="+per_page;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a video thumbnail
		/// Delete_video_thumbnail videos/{video_id}/pictures/{picture_id}
		/// </summary>
		/// <param name="picture_id">The ID of the picture.</param>
		/// <param name="video_id">The ID of the video.</param>
		public async Task Delete_video_thumbnailAsync(double picture_id, double video_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "videos/"+video_id+"/pictures/"+picture_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a video thumbnail
		/// Get_video_thumbnail videos/{video_id}/pictures/{picture_id}
		/// </summary>
		/// <param name="picture_id">The ID of the picture.</param>
		/// <param name="video_id">The ID of the video.</param>
		/// <returns>The thumbnail was returned.</returns>
		public async Task Get_video_thumbnailAsync(double picture_id, double video_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "videos/"+video_id+"/pictures/"+picture_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove an embed preset from a video
		/// Delete_video_embed_preset videos/{video_id}/presets/{preset_id}
		/// </summary>
		/// <param name="preset_id">The ID of the preset.</param>
		/// <param name="video_id">The ID of the video.</param>
		public async Task Delete_video_embed_presetAsync(double preset_id, double video_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "videos/"+video_id+"/presets/"+preset_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Check if an embed preset has been added to a video
		/// Get_video_embed_preset videos/{video_id}/presets/{preset_id}
		/// </summary>
		/// <param name="preset_id">The ID of the preset.</param>
		/// <param name="video_id">The ID of the video.</param>
		public async Task Get_video_embed_presetAsync(double preset_id, double video_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "videos/"+video_id+"/presets/"+preset_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add an embed preset to a video
		/// Add_video_embed_preset videos/{video_id}/presets/{preset_id}
		/// </summary>
		/// <param name="preset_id">The ID of the preset.</param>
		/// <param name="video_id">The ID of the video.</param>
		public async Task Add_video_embed_presetAsync(double preset_id, double video_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "videos/"+video_id+"/presets/"+preset_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the domains on which a video can be embedded
		/// Get_video_privacy_domains videos/{video_id}/privacy/domains
		/// </summary>
		/// <param name="video_id">The ID of the video.</param>
		/// <param name="page">The page number of the results to show.</param>
		/// <param name="per_page">The number of items to show on each page of results, up to a maximum of 100.</param>
		/// <returns>The domains were returned.</returns>
		public async Task Get_video_privacy_domainsAsync(double video_id, double page, double per_page, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "videos/"+video_id+"/privacy/domains?page="+page+"&per_page="+per_page;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Restrict a video from being embedded on a domain
		/// Delete_video_privacy_domain videos/{video_id}/privacy/domains/{domain}
		/// </summary>
		/// <param name="domain">The domain name.</param>
		/// <param name="video_id">The ID of the video.</param>
		public async Task Delete_video_privacy_domainAsync(string domain, double video_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "videos/"+video_id+"/privacy/domains/"+ (domain==null? "" : System.Uri.EscapeDataString(domain));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Permit a video to be embedded on a domain
		/// If domain privacy is enabled for this video, this method permits the video to be embedded on the specified domain.
		/// Add_video_privacy_domain videos/{video_id}/privacy/domains/{domain}
		/// </summary>
		/// <param name="domain">The domain name.</param>
		/// <param name="video_id">The ID of the video.</param>
		public async Task Add_video_privacy_domainAsync(string domain, double video_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "videos/"+video_id+"/privacy/domains/"+ (domain==null? "" : System.Uri.EscapeDataString(domain));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the users who can view a user's private videos by default
		/// Get_video_privacy_users videos/{video_id}/privacy/users
		/// </summary>
		/// <param name="video_id">The ID of the video.</param>
		/// <param name="page">The page number of the results to show.</param>
		/// <param name="per_page">The number of items to show on each page of results, up to a maximum of 100.</param>
		/// <returns>The users were returned.</returns>
		public async Task Get_video_privacy_usersAsync(double video_id, double page, double per_page, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "videos/"+video_id+"/privacy/users?page="+page+"&per_page="+per_page;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Permit a list of users to view a private video
		/// The body of this request should follow our
		/// [batch request format](https://developer.vimeo.com/api/common-formats#batch-requests). Each object must contain
		/// a single `URI` field, and the value of this field must be the URI of the user who can view this video.
		/// Add_video_privacy_users videos/{video_id}/privacy/users
		/// </summary>
		/// <param name="video_id">The ID of the video.</param>
		/// <returns>The users can now view the private video.</returns>
		public async Task Add_video_privacy_usersAsync(double video_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "videos/"+video_id+"/privacy/users";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Restrict a user from viewing a private video
		/// Delete_video_privacy_user videos/{video_id}/privacy/users/{user_id}
		/// </summary>
		/// <param name="user_id">The ID of the user.</param>
		/// <param name="video_id">The ID of the video.</param>
		public async Task Delete_video_privacy_userAsync(double user_id, double video_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "videos/"+video_id+"/privacy/users/"+user_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Permit a specific user to view a private video
		/// Add_video_privacy_user videos/{video_id}/privacy/users/{user_id}
		/// </summary>
		/// <param name="user_id">The ID of the user.</param>
		/// <param name="video_id">The ID of the video.</param>
		/// <returns>The user can now view the private video.</returns>
		public async Task Add_video_privacy_userAsync(double user_id, double video_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "videos/"+video_id+"/privacy/users/"+user_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the tags of a video
		/// Get_video_tags videos/{video_id}/tags
		/// </summary>
		/// <param name="video_id">The ID of the video.</param>
		/// <returns>The tags were returned.</returns>
		public async Task Get_video_tagsAsync(double video_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "videos/"+video_id+"/tags";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove a tag from a video
		/// Delete_video_tag videos/{video_id}/tags/{word}
		/// </summary>
		/// <param name="video_id">The ID of the video.</param>
		/// <param name="word">The tag word.</param>
		public async Task Delete_video_tagAsync(double video_id, string word, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "videos/"+video_id+"/tags/"+ (word==null? "" : System.Uri.EscapeDataString(word));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Check if a tag has been added to a video
		/// Check_video_for_tag videos/{video_id}/tags/{word}
		/// </summary>
		/// <param name="video_id">The ID of the video.</param>
		/// <param name="word">The tag word.</param>
		public async Task Check_video_for_tagAsync(double video_id, string word, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "videos/"+video_id+"/tags/"+ (word==null? "" : System.Uri.EscapeDataString(word));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add a specific tag to a video
		/// Add_video_tag videos/{video_id}/tags/{word}
		/// </summary>
		/// <param name="video_id">The ID of the video.</param>
		/// <param name="word">The tag word.</param>
		public async Task Add_video_tagAsync(double video_id, string word, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "videos/"+video_id+"/tags/"+ (word==null? "" : System.Uri.EscapeDataString(word));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the text tracks of a video
		/// Get_text_tracks videos/{video_id}/texttracks
		/// </summary>
		/// <param name="video_id">The ID of the video.</param>
		/// <returns>The text tracks were returned.</returns>
		public async Task Get_text_tracksAsync(double video_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "videos/"+video_id+"/texttracks";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a text track
		/// Delete_text_track videos/{video_id}/texttracks/{texttrack_id}
		/// </summary>
		/// <param name="texttrack_id">The ID of the text track.</param>
		/// <param name="video_id">The ID of the video.</param>
		public async Task Delete_text_trackAsync(double texttrack_id, double video_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "videos/"+video_id+"/texttracks/"+texttrack_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a specific text track
		/// Get_text_track videos/{video_id}/texttracks/{texttrack_id}
		/// </summary>
		/// <param name="texttrack_id">The ID of the text track.</param>
		/// <param name="video_id">The ID of the video.</param>
		/// <returns>The text track was returned.</returns>
		public async Task Get_text_trackAsync(double texttrack_id, double video_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "videos/"+video_id+"/texttracks/"+texttrack_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add a new custom logo to a video
		/// Create_video_custom_logo videos/{video_id}/timelinethumbnails
		/// </summary>
		/// <param name="video_id">The ID of the video.</param>
		public async Task Create_video_custom_logoAsync(double video_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "videos/"+video_id+"/timelinethumbnails";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a custom video logo
		/// Get_video_custom_logo videos/{video_id}/timelinethumbnails/{thumbnail_id}
		/// </summary>
		/// <param name="thumbnail_id">The ID of the picture.</param>
		/// <param name="video_id">The ID of the video.</param>
		/// <returns>The custom logo was returned.</returns>
		public async Task Get_video_custom_logoAsync(double thumbnail_id, double video_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "videos/"+video_id+"/timelinethumbnails/"+thumbnail_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the related videos of a video
		/// Get_related_videos videos/{video_id}/videos
		/// </summary>
		/// <param name="video_id">The ID of the video.</param>
		/// <param name="filter">The attribute by which to filter the results.</param>
		/// <param name="page">The page number of the results to show.</param>
		/// <param name="per_page">The number of items to show on each page of results, up to a maximum of 100.</param>
		/// <returns>The related videos were returned.</returns>
		public async Task Get_related_videosAsync(double video_id, Get_related_videosFilter filter, double page, double per_page, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "videos/"+video_id+"/videos?filter=" + filter+"&page="+page+"&per_page="+per_page;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum Get_categoriesDirection
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		asc = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		desc = 1,
	}
	
	public enum Get_categoriesSort
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		last_video_featured_time = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		name = 1,
	}
	
	public enum Get_category_channelsSort
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		alphabetical = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		date = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		followers = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		videos = 3,
	}
	
	public enum Get_category_groupsSort
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		alphabetical = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		date = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		members = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		videos = 3,
	}
	
	public enum Get_category_videosFilter
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		conditional_featured = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		embeddable = 1,
	}
	
	public enum Get_category_videosSort
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		alphabetical = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		comments = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		date = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		duration = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		featured = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		likes = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		plays = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		relevant = 7,
	}
	
	public enum Get_channelsFilter
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		featured = 0,
	}
	
	public enum Get_channelsSort
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		alphabetical = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		date = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		followers = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		relevant = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		videos = 4,
	}
	
	public class Add_channel_categoriesPutBody
	{
		
		/// <summary>
		/// The array of category URIs to add.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="channels")]
		public string[] Channels { get; set; }
	}
	
	public enum Get_channel_moderatorsSort
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		alphabetical = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		date = 1,
	}
	
	public class Replace_channel_moderatorsPatchBody
	{
		
		/// <summary>
		/// The URI of the user to add as a moderator.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="user_uri")]
		public string User_uri { get; set; }
	}
	
	public class Add_channel_moderatorsPutBody
	{
		
		/// <summary>
		/// The URI of a user to add as a moderator.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="user_uri")]
		public string User_uri { get; set; }
	}
	
	public enum Get_channel_subscribersFilter
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		moderators = 0,
	}
	
	public enum Get_channel_videosFilter
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		embeddable = 0,
	}
	
	public enum Get_channel_videosSort
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		added = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		alphabetical = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		comments = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		date = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="default")]
		_default = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		duration = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		likes = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		manual = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		modified_time = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		plays = 9,
	}
	
	public class Add_videos_to_channelPutBody
	{
		
		/// <summary>
		/// The URI of a video to add.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="video_uri")]
		public string Video_uri { get; set; }
	}
	
	public enum Get_group_videosSort
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		alphabetical = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		comments = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		date = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		duration = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		likes = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		plays = 5,
	}
	
	public enum Get_languagesFilter
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		texttracks = 0,
	}
	
	public enum Get_albums_alt1Sort
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		alphabetical = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		date = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		duration = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		videos = 3,
	}
	
	public enum Get_album_videos_alt1Sort
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		alphabetical = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		comments = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		date = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="default")]
		_default = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		duration = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		likes = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		manual = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		modified_time = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		plays = 8,
	}
	
	public class Replace_videos_in_album_alt1PutBody
	{
		
		/// <summary>
		/// A comma-separated list of video URIs.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="videos")]
		public string Videos { get; set; }
	}
	
	public class Set_video_as_album_thumbnail_alt1PostBody
	{
		
		/// <summary>
		/// The video frame time in seconds to use as the album thumbnail.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="time_code")]
		public System.Nullable<System.Double> Time_code { get; set; }
	}
	
	public enum Get_category_subscriptions_alt1Sort
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		alphabetical = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		date = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		name = 2,
	}
	
	public enum Get_channel_subscriptions_alt1Filter
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		moderated = 0,
	}
	
	public enum Get_feed_alt1Type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		appears = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		category_featured = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		channel = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		facebook_feed = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		following = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		group = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		likes = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ondemand_publish = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		share = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		tagged_with = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		twitter_timeline = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		uploads = 11,
	}
	
	public enum Get_user_following_alt1Filter
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		online = 0,
	}
	
	public class Follow_users_alt1PostBody
	{
		
		/// <summary>
		/// An array of user URIs for the list of users to follow.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="users")]
		public string[] Users { get; set; }
	}
	
	public enum Get_user_vods_alt1Sort
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		added = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		alphabetical = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		date = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		modified_time = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		name = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="publish.time")]
		publish_time = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		rating = 6,
	}
	
	public class Create_vod_alt1PostBody
	{
		
		/// <summary>
		/// An array of accepted currencies.
		///
		///Option descriptions:
		/// * `AUD` - Australian Dollar
		/// * `CAD` - Canadian Dollar
		/// * `CHF` - Swiss Franc
		/// * `DKK` - Danish Krone
		/// * `EUR` - Euro
		/// * `GBP` - British Pound
		/// * `JPY` - Japanese Yen
		/// * `KRW` - South Korean Won
		/// * `NOK` - Norwegian Krone
		/// * `PLN` - Polish Zloty
		/// * `SEK` - Swedish Krona
		/// * `USD` - US Dollar
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accepted_currencies")]
		public System.Nullable<Create_vod_alt1PostBodyAccepted_currencies> Accepted_currencies { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="buy")]
		public Create_vod_alt1PostBodyBuy Buy { get; set; }
		
		/// <summary>
		/// One or more ratings, either as a comma-separated list or as a JSON array depending on the request format.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="content_rating")]
		public Content_ratingCode Content_rating { get; set; }
		
		/// <summary>
		/// The description of the On Demand page.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The custom domain of the On Demand page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="domain_link")]
		public string Domain_link { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="episodes")]
		public Create_vod_alt1PostBodyEpisodes Episodes { get; set; }
		
		/// <summary>
		/// The custom string to use in this On Demand page's Vimeo URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="link")]
		public string Link { get; set; }
		
		/// <summary>
		/// The name of the On Demand page.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rent")]
		public Create_vod_alt1PostBodyRent Rent { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subscription")]
		public Create_vod_alt1PostBodySubscription Subscription { get; set; }
		
		/// <summary>
		/// The type of On Demand page.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public On_demand_pageType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum Create_vod_alt1PostBodyAccepted_currencies
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUD = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CAD = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHF = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DKK = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EUR = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GBP = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JPY = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KRW = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOK = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PLN = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SEK = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USD = 11,
	}
	
	public class Create_vod_alt1PostBodyBuy
	{
		
		/// <summary>
		/// Whether the Buy action is active. *Required if `rent.active` is false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="active")]
		public System.Nullable<System.Boolean> Active { get; set; }
		
		/// <summary>
		/// Whether people who buy the video can download it. To use this field, `type` must be `film`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="download")]
		public System.Nullable<System.Boolean> Download { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="price")]
		public Create_vod_alt1PostBodyBuyPrice Price { get; set; }
	}
	
	public class Create_vod_alt1PostBodyBuyPrice
	{
		
		/// <summary>
		/// The purchase price of this video in AUD.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> AUD { get; set; }
		
		/// <summary>
		/// The purchase price of this video in CAD.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> CAD { get; set; }
		
		/// <summary>
		/// The purchase price of this video in CHF.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> CHF { get; set; }
		
		/// <summary>
		/// The purchase price of this video in DKK.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> DKK { get; set; }
		
		/// <summary>
		/// The purchase price of this video in EUR.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> EUR { get; set; }
		
		/// <summary>
		/// The purchase price of this video in GBP.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> GBP { get; set; }
		
		/// <summary>
		/// The purchase price of this video in JPY.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> JPY { get; set; }
		
		/// <summary>
		/// The purchase price of this video in KRW.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> KRW { get; set; }
		
		/// <summary>
		/// The purchase price of this video in NOK.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> NOK { get; set; }
		
		/// <summary>
		/// The purchase price of this video in PLN.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PLN { get; set; }
		
		/// <summary>
		/// The purchase price of this video in SEK.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> SEK { get; set; }
		
		/// <summary>
		/// The purchase price of this video in USD when `type` is `film`, or the purchase price of the entire collection in USD when `type` is `series`.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> USD { get; set; }
	}
	
	public class Create_vod_alt1PostBodyEpisodes
	{
		
		[System.Runtime.Serialization.DataMember(Name="buy")]
		public Create_vod_alt1PostBodyEpisodesBuy Buy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rent")]
		public Create_vod_alt1PostBodyEpisodesRent Rent { get; set; }
	}
	
	public class Create_vod_alt1PostBodyEpisodesBuy
	{
		
		/// <summary>
		/// Whether episodes can be bought.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="active")]
		public System.Nullable<System.Boolean> Active { get; set; }
		
		/// <summary>
		/// Whether people who buy the episode can download it. To use this field, `type` must be `series`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="download")]
		public System.Nullable<System.Boolean> Download { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="price")]
		public Create_vod_alt1PostBodyEpisodesBuyPrice Price { get; set; }
	}
	
	public class Create_vod_alt1PostBodyEpisodesBuyPrice
	{
		
		/// <summary>
		/// The purchase price per episode. *Required if `episodes.buy.active` is true.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> USD { get; set; }
	}
	
	public class Create_vod_alt1PostBodyEpisodesRent
	{
		
		/// <summary>
		/// Whether episodes can be rented
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="active")]
		public System.Nullable<System.Boolean> Active { get; set; }
		
		/// <summary>
		/// The period in which this episode can be rented for.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="period")]
		public System.Nullable<Create_vod_alt1PostBodyEpisodesRentPeriod> Period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="price")]
		public Create_vod_alt1PostBodyEpisodesRentPrice Price { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum Create_vod_alt1PostBodyEpisodesRentPeriod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1 week")]
		_1_week = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1 year")]
		_1_year = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="24 hour")]
		_24_hour = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3 month")]
		_3_month = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="30 day")]
		_30_day = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="48 hour")]
		_48_hour = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="6 month")]
		_6_month = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="72 hour")]
		_72_hour = 7,
	}
	
	public class Create_vod_alt1PostBodyEpisodesRentPrice
	{
		
		/// <summary>
		/// The default price to rent an episode. This field is applicable only when `type` is `series`. *Required if `episodes.rent.active` is true.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> USD { get; set; }
	}
	
	public class Create_vod_alt1PostBodyRent
	{
		
		/// <summary>
		/// Whether the video can be rented. *Required if `buy.active` is false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="active")]
		public System.Nullable<System.Boolean> Active { get; set; }
		
		/// <summary>
		/// The period in which this can be rented for.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="period")]
		public System.Nullable<Create_vod_alt1PostBodyRentPeriod> Period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="price")]
		public Create_vod_alt1PostBodyRentPrice Price { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum Create_vod_alt1PostBodyRentPeriod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1 week")]
		_1_week = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1 year")]
		_1_year = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="24 hour")]
		_24_hour = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3 month")]
		_3_month = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="30 day")]
		_30_day = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="48 hour")]
		_48_hour = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="6 month")]
		_6_month = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="72 hour")]
		_72_hour = 7,
	}
	
	public class Create_vod_alt1PostBodyRentPrice
	{
		
		/// <summary>
		/// The rental price of this video in AUD.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> AUD { get; set; }
		
		/// <summary>
		/// The rental price of this video in CAD.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> CAD { get; set; }
		
		/// <summary>
		/// The rental price of this video in CHF.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> CHF { get; set; }
		
		/// <summary>
		/// The rental price of this video in DKK.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> DKK { get; set; }
		
		/// <summary>
		/// The rental price of this video in EUR.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> EUR { get; set; }
		
		/// <summary>
		/// The rental price of this video in GBP.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> GBP { get; set; }
		
		/// <summary>
		/// The rental price of this video in JPY.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> JPY { get; set; }
		
		/// <summary>
		/// The rental price of this video in KRW.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> KRW { get; set; }
		
		/// <summary>
		/// The rental price of this video in NOK.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> NOK { get; set; }
		
		/// <summary>
		/// The rental price of this video in PLN.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PLN { get; set; }
		
		/// <summary>
		/// The rental price of this video in SEK.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> SEK { get; set; }
		
		/// <summary>
		/// The rental price of this video in USD when `type` is `film`, or the rental price of the entire collection in USD when `type` is `series`.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> USD { get; set; }
	}
	
	public class Create_vod_alt1PostBodySubscription
	{
		
		[System.Runtime.Serialization.DataMember(Name="monthly")]
		public Create_vod_alt1PostBodySubscriptionMonthly Monthly { get; set; }
	}
	
	public class Create_vod_alt1PostBodySubscriptionMonthly
	{
		
		/// <summary>
		/// Whether monthly subscription is active. *Required if `rent.active` and `buy.active` are false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="active")]
		public System.Nullable<System.Boolean> Active { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="price")]
		public Create_vod_alt1PostBodySubscriptionMonthlyPrice Price { get; set; }
	}
	
	public class Create_vod_alt1PostBodySubscriptionMonthlyPrice
	{
		
		/// <summary>
		/// The monthly subscription price in USD. *Required if `subscription.active` is true.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> USD { get; set; }
	}
	
	public enum Get_vod_purchasesFilter
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		all = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		expiring_soon = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		film = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		important = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		purchased = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		rented = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		series = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		subscription = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unwatched = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		watched = 9,
	}
	
	public enum Get_vod_purchasesSort
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		added = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		alphabetical = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		date = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		name = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		purchase_time = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		rating = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		release_date = 6,
	}
	
	public enum Get_portfolio_videos_alt1Sort
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		alphabetical = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		comments = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		date = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="default")]
		_default = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		likes = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		manual = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		plays = 6,
	}
	
	public enum Get_projects_alt1Sort
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		date = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="default")]
		_default = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		modified_time = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		name = 3,
	}
	
	public class Create_project_alt1PostBody
	{
		
		/// <summary>
		/// The name of the project.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	public class Edit_project_alt1PatchBody
	{
		
		/// <summary>
		/// The name of the project.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	public enum Get_project_videos_alt1Sort
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		alphabetical = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		date = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="default")]
		_default = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		duration = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		last_user_action_event_date = 4,
	}
	
	public enum Get_videos_alt1Filter
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		app_only = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		embeddable = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		featured = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		playable = 3,
	}
	
	public enum Get_videos_alt1Sort
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		alphabetical = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		comments = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		date = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="default")]
		_default = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		duration = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		last_user_action_event_date = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		likes = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		modified_time = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		plays = 8,
	}
	
	public enum Get_genre_vodsFilter
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		country = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		my_region = 1,
	}
	
	public enum Get_genre_vodsSort
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		alphabetical = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		date = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		name = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="publish.time")]
		publish_time = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		videos = 4,
	}
	
	public enum Get_vod_promotionsFilter
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		batch = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="default")]
		_default = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		single = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		vip = 3,
	}
	
	public enum Get_vod_seasonsFilter
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		viewable = 0,
	}
	
	public enum Get_vod_seasonsSort
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		date = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		manual = 1,
	}
	
	public enum Get_vod_season_videosSort
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		date = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="default")]
		_default = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		manual = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		name = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		purchase_time = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		release_date = 5,
	}
	
	public enum Get_vod_videosFilter
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		all = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		buy = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		expiring_soon = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		extra = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		main = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="main.viewable")]
		main_viewable = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		rent = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		trailer = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unwatched = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		viewable = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		watched = 10,
	}
	
	public enum Get_vod_videosSort
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		date = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="default")]
		_default = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		episode = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		manual = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		name = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		purchase_time = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		release_date = 6,
	}
	
	public enum Get_videos_with_tagSort
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		created_time = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		duration = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		name = 2,
	}
	
	public enum Get_album_videosSort
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		alphabetical = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		comments = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		date = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="default")]
		_default = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		duration = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		likes = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		manual = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		modified_time = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		plays = 8,
	}
	
	public class Replace_videos_in_albumPutBody
	{
		
		/// <summary>
		/// A comma-separated list of video URIs.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="videos")]
		public string Videos { get; set; }
	}
	
	public class Set_video_as_album_thumbnailPostBody
	{
		
		/// <summary>
		/// The video frame time in seconds to use as the album thumbnail.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="time_code")]
		public System.Nullable<System.Double> Time_code { get; set; }
	}
	
	public class Follow_usersPostBody
	{
		
		/// <summary>
		/// An array of user URIs for the list of users to follow.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="users")]
		public string[] Users { get; set; }
	}
	
	public enum Get_user_vodsSort
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		added = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		alphabetical = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		date = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		modified_time = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		name = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="publish.time")]
		publish_time = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		rating = 6,
	}
	
	public class Create_vodPostBody
	{
		
		/// <summary>
		/// An array of accepted currencies.
		///
		///Option descriptions:
		/// * `AUD` - Australian Dollar
		/// * `CAD` - Canadian Dollar
		/// * `CHF` - Swiss Franc
		/// * `DKK` - Danish Krone
		/// * `EUR` - Euro
		/// * `GBP` - British Pound
		/// * `JPY` - Japanese Yen
		/// * `KRW` - South Korean Won
		/// * `NOK` - Norwegian Krone
		/// * `PLN` - Polish Zloty
		/// * `SEK` - Swedish Krona
		/// * `USD` - US Dollar
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accepted_currencies")]
		public Create_vod_alt1PostBodyAccepted_currencies Accepted_currencies { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="buy")]
		public Create_vodPostBodyBuy Buy { get; set; }
		
		/// <summary>
		/// One or more ratings, either as a comma-separated list or as a JSON array depending on the request format.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="content_rating")]
		public Content_ratingCode Content_rating { get; set; }
		
		/// <summary>
		/// The description of the On Demand page.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The custom domain of the On Demand page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="domain_link")]
		public string Domain_link { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="episodes")]
		public Create_vodPostBodyEpisodes Episodes { get; set; }
		
		/// <summary>
		/// The custom string to use in this On Demand page's Vimeo URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="link")]
		public string Link { get; set; }
		
		/// <summary>
		/// The name of the On Demand page.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rent")]
		public Create_vodPostBodyRent Rent { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subscription")]
		public Create_vodPostBodySubscription Subscription { get; set; }
		
		/// <summary>
		/// The type of On Demand page.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public On_demand_pageType Type { get; set; }
	}
	
	public class Create_vodPostBodyBuy
	{
		
		/// <summary>
		/// Whether the Buy action is active. *Required if `rent.active` is false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="active")]
		public System.Nullable<System.Boolean> Active { get; set; }
		
		/// <summary>
		/// Whether people who buy the video can download it. To use this field, `type` must be `film`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="download")]
		public System.Nullable<System.Boolean> Download { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="price")]
		public Create_vodPostBodyBuyPrice Price { get; set; }
	}
	
	public class Create_vodPostBodyBuyPrice
	{
		
		/// <summary>
		/// The purchase price of this video in AUD.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> AUD { get; set; }
		
		/// <summary>
		/// The purchase price of this video in CAD.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> CAD { get; set; }
		
		/// <summary>
		/// The purchase price of this video in CHF.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> CHF { get; set; }
		
		/// <summary>
		/// The purchase price of this video in DKK.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> DKK { get; set; }
		
		/// <summary>
		/// The purchase price of this video in EUR.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> EUR { get; set; }
		
		/// <summary>
		/// The purchase price of this video in GBP.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> GBP { get; set; }
		
		/// <summary>
		/// The purchase price of this video in JPY.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> JPY { get; set; }
		
		/// <summary>
		/// The purchase price of this video in KRW.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> KRW { get; set; }
		
		/// <summary>
		/// The purchase price of this video in NOK.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> NOK { get; set; }
		
		/// <summary>
		/// The purchase price of this video in PLN.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PLN { get; set; }
		
		/// <summary>
		/// The purchase price of this video in SEK.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> SEK { get; set; }
		
		/// <summary>
		/// The purchase price of this video in USD when `type` is `film`, or the purchase price of the entire collection in USD when `type` is `series`.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> USD { get; set; }
	}
	
	public class Create_vodPostBodyEpisodes
	{
		
		[System.Runtime.Serialization.DataMember(Name="buy")]
		public Create_vodPostBodyEpisodesBuy Buy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rent")]
		public Create_vodPostBodyEpisodesRent Rent { get; set; }
	}
	
	public class Create_vodPostBodyEpisodesBuy
	{
		
		/// <summary>
		/// Whether episodes can be bought.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="active")]
		public System.Nullable<System.Boolean> Active { get; set; }
		
		/// <summary>
		/// Whether people who buy the episode can download it. To use this field, `type` must be `series`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="download")]
		public System.Nullable<System.Boolean> Download { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="price")]
		public Create_vodPostBodyEpisodesBuyPrice Price { get; set; }
	}
	
	public class Create_vodPostBodyEpisodesBuyPrice
	{
		
		/// <summary>
		/// The purchase price per episode. *Required if `episodes.buy.active` is true.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> USD { get; set; }
	}
	
	public class Create_vodPostBodyEpisodesRent
	{
		
		/// <summary>
		/// Whether episodes can be rented
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="active")]
		public System.Nullable<System.Boolean> Active { get; set; }
		
		/// <summary>
		/// The period in which this episode can be rented for.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="period")]
		public System.Nullable<Create_vodPostBodyEpisodesRentPeriod> Period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="price")]
		public Create_vodPostBodyEpisodesRentPrice Price { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum Create_vodPostBodyEpisodesRentPeriod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1 week")]
		_1_week = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1 year")]
		_1_year = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="24 hour")]
		_24_hour = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3 month")]
		_3_month = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="30 day")]
		_30_day = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="48 hour")]
		_48_hour = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="6 month")]
		_6_month = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="72 hour")]
		_72_hour = 7,
	}
	
	public class Create_vodPostBodyEpisodesRentPrice
	{
		
		/// <summary>
		/// The default price to rent an episode. This field is applicable only when `type` is `series`. *Required if `episodes.rent.active` is true.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> USD { get; set; }
	}
	
	public class Create_vodPostBodyRent
	{
		
		/// <summary>
		/// Whether the video can be rented. *Required if `buy.active` is false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="active")]
		public System.Nullable<System.Boolean> Active { get; set; }
		
		/// <summary>
		/// The period in which this can be rented for.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="period")]
		public System.Nullable<Create_vodPostBodyRentPeriod> Period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="price")]
		public Create_vodPostBodyRentPrice Price { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum Create_vodPostBodyRentPeriod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1 week")]
		_1_week = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1 year")]
		_1_year = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="24 hour")]
		_24_hour = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3 month")]
		_3_month = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="30 day")]
		_30_day = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="48 hour")]
		_48_hour = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="6 month")]
		_6_month = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="72 hour")]
		_72_hour = 7,
	}
	
	public class Create_vodPostBodyRentPrice
	{
		
		/// <summary>
		/// The rental price of this video in AUD.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> AUD { get; set; }
		
		/// <summary>
		/// The rental price of this video in CAD.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> CAD { get; set; }
		
		/// <summary>
		/// The rental price of this video in CHF.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> CHF { get; set; }
		
		/// <summary>
		/// The rental price of this video in DKK.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> DKK { get; set; }
		
		/// <summary>
		/// The rental price of this video in EUR.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> EUR { get; set; }
		
		/// <summary>
		/// The rental price of this video in GBP.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> GBP { get; set; }
		
		/// <summary>
		/// The rental price of this video in JPY.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> JPY { get; set; }
		
		/// <summary>
		/// The rental price of this video in KRW.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> KRW { get; set; }
		
		/// <summary>
		/// The rental price of this video in NOK.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> NOK { get; set; }
		
		/// <summary>
		/// The rental price of this video in PLN.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PLN { get; set; }
		
		/// <summary>
		/// The rental price of this video in SEK.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> SEK { get; set; }
		
		/// <summary>
		/// The rental price of this video in USD when `type` is `film`, or the rental price of the entire collection in USD when `type` is `series`.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> USD { get; set; }
	}
	
	public class Create_vodPostBodySubscription
	{
		
		[System.Runtime.Serialization.DataMember(Name="monthly")]
		public Create_vodPostBodySubscriptionMonthly Monthly { get; set; }
	}
	
	public class Create_vodPostBodySubscriptionMonthly
	{
		
		/// <summary>
		/// Whether monthly subscription is active. *Required if `rent.active` and `buy.active` are false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="active")]
		public System.Nullable<System.Boolean> Active { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="price")]
		public Create_vodPostBodySubscriptionMonthlyPrice Price { get; set; }
	}
	
	public class Create_vodPostBodySubscriptionMonthlyPrice
	{
		
		/// <summary>
		/// The monthly subscription price in USD. *Required if `subscription.active` is true.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> USD { get; set; }
	}
	
	public enum Get_portfolio_videosSort
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		alphabetical = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		comments = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		date = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="default")]
		_default = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		likes = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		manual = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		plays = 6,
	}
	
	public enum Get_projectsSort
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		date = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="default")]
		_default = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		modified_time = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		name = 3,
	}
	
	public class Create_projectPostBody
	{
		
		/// <summary>
		/// The name of the project.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	public class Edit_projectPatchBody
	{
		
		/// <summary>
		/// The name of the project.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	public enum Get_project_videosSort
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		alphabetical = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		date = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="default")]
		_default = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		duration = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		last_user_action_event_date = 4,
	}
	
	public enum Get_videosSort
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		alphabetical = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		comments = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		date = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="default")]
		_default = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		duration = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		last_user_action_event_date = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		likes = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		modified_time = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		plays = 8,
	}
	
	public enum Search_videosFilter
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CC = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CC-BY")]
		CCMinusBY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CC-BY-NC")]
		CCMinusBYMinusNC = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CC-BY-NC-ND")]
		CCMinusBYMinusNCMinusND = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CC-BY-NC-SA")]
		CCMinusBYMinusNCMinusSA = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CC-BY-ND")]
		CCMinusBYMinusND = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CC-BY-SA")]
		CCMinusBYMinusSA = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CC0 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		categories = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		duration = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="in-progress")]
		inMinusprogress = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		minimum_likes = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		trending = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		upload_date = 13,
	}
	
	public enum Search_videosSort
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		alphabetical = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		comments = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		date = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		duration = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		likes = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		plays = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		relevant = 6,
	}
	
	public enum Get_related_videosFilter
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		related = 0,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
