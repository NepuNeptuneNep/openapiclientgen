//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Address
	{
		
		/// <summary>
		/// City name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		/// <summary>
		/// Full country name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// Two-letter country abbreviation
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="country_code")]
		public string Country_code { get; set; }
		
		/// <summary>
		/// State abbreviation
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		/// <summary>
		/// Street number and name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="street")]
		public string Street { get; set; }
		
		/// <summary>
		/// Standard Values: HOME, WORK
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// ZIP code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="zip")]
		public string Zip { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Application_Settings
	{
		
		/// <summary>
		/// Backoff delay for a failed callback in milliseconds
		///This setting is used to configure the amount of time the backoff delays before retrying a failed callback. The backoff delay increases linearly by this value each time a callback fails to get a HTTPS 200 OK response. The backoff delay is capped by the max_callback_backoff_delay_ms setting.
		/// </summary>
		[System.ComponentModel.DefaultValue("3000")]
		[System.Runtime.Serialization.DataMember(Name="callback_backoff_delay_ms")]
		public string Callback_backoff_delay_ms { get; set; } = "3000";
		
		/// <summary>
		/// Stores callbacks on disk until they are successfully acknowledged by the Webhook or not. Restart required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="callback_persist")]
		public System.Nullable<System.Boolean> Callback_persist { get; set; }
		
		/// <summary>
		/// Multiconnect: Interval of the Master node monitoring of Coreapp nodes in seconds
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="heartbeat_interval")]
		public System.Nullable<System.Int32> Heartbeat_interval { get; set; }
		
		/// <summary>
		/// Maximum delay for a failed callback in milliseconds
		/// </summary>
		[System.ComponentModel.DefaultValue("900000")]
		[System.Runtime.Serialization.DataMember(Name="max_callback_backoff_delay_ms")]
		public string Max_callback_backoff_delay_ms { get; set; } = "900000";
		
		[System.Runtime.Serialization.DataMember(Name="media")]
		public Media Media { get; set; }
		
		/// <summary>
		/// Set to valid WhatsApp Group with users who wish to see alerts for critical errors and messages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="on_call_pager")]
		public string On_call_pager { get; set; }
		
		/// <summary>
		/// When true, removes messages from the local database after they are delivered to or read by the recipient. When false, saves all messages on local storage until they are explicitly deleted.
		///When messages are sent, they are stored in a local database. This database is used as the application's history. Since the business keeps its own history, you can specify whether you want message pass_through or not. Restart required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pass_through")]
		public System.Nullable<System.Boolean> Pass_through { get; set; }
		
		/// <summary>
		/// Receive a notification that a message is sent to server. When true, you will receive a message indicating that a message has been sent. If false (default), you will not receive notification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sent_status")]
		public System.Nullable<System.Boolean> Sent_status { get; set; }
		
		/// <summary>
		/// Multiconnect: Maximum amount of seconds a Master node waits for a Coreapp node to respond to a heartbeat before considering it unhealthy and starting the failover process.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unhealthy_interval")]
		public System.Nullable<System.Int32> Unhealthy_interval { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="webhooks")]
		public Webhooks Webhooks { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Media
	{
		
		/// <summary>
		/// An array specifying which types of media to automatically download.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="auto_download")]
		public string[] Auto_download { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Webhooks
	{
		
		/// <summary>
		/// Configures the maximum number of inflight callback requests that are sent out. Can be set to 6 (default), 12, 18, or 24.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="max_concurrent_requests")]
		public System.Nullable<WebhooksMax_concurrent_requests> Max_concurrent_requests { get; set; }
		
		/// <summary>
		/// Inbound and outbound notifications are routed to this URL. A HTTPS-based endpoint is required; HTTP will not work.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum WebhooksMax_concurrent_requests
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="6")]
		_6 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="12")]
		_12 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="18")]
		_18 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="24")]
		_24 = 3,
	}
	
	/// <summary>
	/// The media object containing audio
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Audio
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AudioById
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AudioByProvider
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="link")]
		public string Link { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="provider")]
		public Provider Provider { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Provider
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Backup_Settings
	{
		
		/// <summary>
		/// The data that has been backed up, encrypted for security.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string Data { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Backup_Settings_Request_Body
	{
		
		/// <summary>
		/// Used to encrypt backup data for security
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
	}
	
	/// <summary>
	/// Save the data value as that will be used along with your password to restore the information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Backup_Settings_Response
	{
		
		[System.Runtime.Serialization.DataMember(Name="settings")]
		public Backup_Settings Settings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Basic
	{
		
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Business_Profile
	{
		
		/// <summary>
		/// Address of the business
		///Maximum of 256 characters
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="address")]
		public string Address { get; set; }
		
		/// <summary>
		/// Description of the business
		///Maximum of 256 characters
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Email address to contact the business
		///Maximum of 128 characters
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// Industry of the business
		///Maximum of 128 characters
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="vertical")]
		public string Vertical { get; set; }
		
		/// <summary>
		/// URLs associated with business (e.g., website, Facebook page, Instagram)
		///Maximum of 2 websites with a maximum of 256 characters each
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="websites")]
		public string[] Websites { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Business_Settings
	{
		
		[System.Runtime.Serialization.DataMember(Name="business")]
		public Business_Settings_Business Business { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Business_Settings_Business
	{
		
		[System.Runtime.Serialization.DataMember(Name="profile")]
		public Business_Profile Profile { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Check_Contact
	{
		
		/// <summary>
		/// The value you sent in the contacts field of the JSON request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="input")]
		public string Input { get; set; }
		
		/// <summary>
		/// Status of the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<Check_ContactStatus> Status { get; set; }
		
		/// <summary>
		/// WhatsApp user identifier that can be used in other API calls. Only returned if the status is valid.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="wa_id")]
		public string Wa_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum Check_ContactStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		processing = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		valid = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		invalid = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Check_Contact_Request_Body
	{
		
		/// <summary>
		/// Blocking determines whether the request should wait for the processing to complete (synchronous) or not (asynchronous).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="blocking")]
		public System.Nullable<Check_Contact_Request_BodyBlocking> Blocking { get; set; }
		
		/// <summary>
		/// Array of contact phone numbers. The numbers can be in any standard telephone number format.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="contacts")]
		public string[] Contacts { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum Check_Contact_Request_BodyBlocking
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		no_wait = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		wait = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Check_Contact_Response
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Check_Health_Response
	{
		
		[System.Runtime.Serialization.DataMember(Name="health")]
		public Gateway_Status Health { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum Gateway_Status
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		connected = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		connecting = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		disconnected = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		uninitialized = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unregistered = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Config
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Config_Basic
	{
		
		[System.Runtime.Serialization.DataMember(Name="basic")]
		public Basic Basic { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Config_Bearer
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="bearer")]
		public string Bearer { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Contact
	{
		
		/// <summary>
		/// Full contact address(es)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addresses")]
		public Address[] Addresses { get; set; }
		
		/// <summary>
		/// YYYY-MM-DD formatted string
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="birthday")]
		public string Birthday { get; set; }
		
		/// <summary>
		/// Contact email address(es)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="emails")]
		public Email[] Emails { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ims")]
		public string[] Ims { get; set; }
		
		/// <summary>
		/// Full contact name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public Name Name { get; set; }
		
		/// <summary>
		/// Contact organization information
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="org")]
		public Org Org { get; set; }
		
		/// <summary>
		/// Contact phone number(s)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phones")]
		public Phone[] Phones { get; set; }
		
		/// <summary>
		/// Contact URL(s)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="urls")]
		public Url[] Urls { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Email
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email1 { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Full contact name
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Name
	{
		
		/// <summary>
		/// First name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="first_name")]
		public string First_name { get; set; }
		
		/// <summary>
		/// Full name as it normally appears
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="formatted_name")]
		public string Formatted_name { get; set; }
		
		/// <summary>
		/// Last name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="last_name")]
		public string Last_name { get; set; }
		
		/// <summary>
		/// Name preffix
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="prefix")]
		public string Prefix { get; set; }
		
		/// <summary>
		/// Name suffix
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suffix")]
		public string Suffix { get; set; }
	}
	
	/// <summary>
	/// Contact organization information
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Org
	{
		
		/// <summary>
		/// Name of the contact's company
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="company")]
		public string Company { get; set; }
		
		/// <summary>
		/// Name of the contact's department
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="department")]
		public string Department { get; set; }
		
		/// <summary>
		/// Contact's business title
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Phone
	{
		
		[System.Runtime.Serialization.DataMember(Name="phone")]
		public string Phone1 { get; set; }
		
		/// <summary>
		/// Standard Values: CELL, MAIN, IPHONE, HOME, WORK
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// WhatsApp ID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="wa_id")]
		public string Wa_id { get; set; }
	}
	
	/// <summary>
	/// Standard Values: HOME, WORK
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Url
	{
		
		/// <summary>
		/// Standard Values: HOME, WORK
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// URL
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url1 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Create_Group_Request_Body
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="subject")]
		public string Subject { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Create_User_Request_Body
	{
		
		/// <summary>
		/// username
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		/// <summary>
		/// password
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Currency
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount_1000")]
		public int Amount_1000 { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency_code")]
		public string Currency_code { get; set; }
	}
	
	/// <summary>
	/// Date/time by component
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Date_Time_Component
	{
		
		/// <summary>
		/// The day of month
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="day_of_month")]
		public System.Nullable<System.Int32> Day_of_month { get; set; }
		
		/// <summary>
		/// Both strings and numbers are accepted. If different from the value derived from the date (if specified), use the derived value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="day_of_week")]
		public System.Nullable<Date_Time_ComponentDay_of_week> Day_of_week { get; set; }
		
		/// <summary>
		/// The hour
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hour")]
		public System.Nullable<System.Int32> Hour { get; set; }
		
		/// <summary>
		/// The minute
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minute")]
		public System.Nullable<System.Int32> Minute { get; set; }
		
		/// <summary>
		/// The month
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="month")]
		public System.Nullable<System.Int32> Month { get; set; }
		
		/// <summary>
		/// The year
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="year")]
		public System.Nullable<System.Int32> Year { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum Date_Time_ComponentDay_of_week
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="5")]
		_5 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="6")]
		_6 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="7")]
		_7 = 6,
	}
	
	/// <summary>
	/// The Whatsapp Business API Client will attempt to format the date/time based on a specified localization.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Date_Time_Object
	{
		
		/// <summary>
		/// Date/time by component
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="component")]
		public Date_Time_Component Component { get; set; }
		
		/// <summary>
		/// Date/time by Unix epoch
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unix_epoch")]
		public Date_Time_Unix_Epoch Unix_epoch { get; set; }
	}
	
	/// <summary>
	/// Date/time by Unix epoch
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Date_Time_Unix_Epoch
	{
		
		/// <summary>
		/// Epoch timestamp in seconds
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public System.Nullable<System.Int32> Timestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Detailed_User_Response
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Detailed_User_Response_Item
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<Detailed_User_Response_ItemROLES> ROLES { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum Detailed_User_Response_ItemROLES
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ROLE_ADMIN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ROLE_USER = 1,
	}
	
	/// <summary>
	/// The media object containing a document
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Document
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DocumentById
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caption")]
		public string Caption { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="filename")]
		public string Filename { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DocumentByProvider
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caption")]
		public string Caption { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="filename")]
		public string Filename { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="link")]
		public string Link { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="provider")]
		public Provider Provider { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Enable_Two_Step_Request_Body
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pin")]
		public string Pin { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Error
	{
		
		/// <summary>
		/// See the https://developers.facebook.com/docs/whatsapp/api/errors for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		/// <summary>
		/// error detail
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string Details { get; set; }
		
		/// <summary>
		/// location for error detail
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="href")]
		public string Href { get; set; }
		
		/// <summary>
		/// error title
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Gateway_Node_Status
	{
		
		[System.Runtime.Serialization.DataMember(Name="gateway_status")]
		public string Gateway_status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="role")]
		public System.Nullable<Gateway_Node_StatusRole> Role { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum Gateway_Node_StatusRole
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		primary_master = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		secondary_master = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		coreapp = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Get_Business_Profile_Response
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Get_Media_Providers_Response
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Get_Profile_About_Response
	{
		
		[System.Runtime.Serialization.DataMember(Name="settings")]
		public Profile_About_Settings Settings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Profile_About_Settings
	{
		
		[System.Runtime.Serialization.DataMember(Name="profile")]
		public Profile_About_Settings_Profile Profile { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Profile_About_Settings_Profile
	{
		
		[System.Runtime.Serialization.DataMember(Name="about")]
		public Profile_About About { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Profile_About
	{
		
		/// <summary>
		/// Text to display in your profile's About section
		///The max length for the string is 139 characters.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Get_Profile_Photo_Response
	{
		
		[System.Runtime.Serialization.DataMember(Name="settings")]
		public Profile_Photo_Settings Settings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Profile_Photo_Settings
	{
		
		[System.Runtime.Serialization.DataMember(Name="profile")]
		public Profile_Photo_SettingsProfile Profile { get; set; }
	}
	
	public class Profile_Photo_SettingsProfile
	{
		
		[System.Runtime.Serialization.DataMember(Name="photo")]
		public Profile_Photo_SettingsProfilePhoto Photo { get; set; }
	}
	
	public class Profile_Photo_SettingsProfilePhoto
	{
		
		[System.Runtime.Serialization.DataMember(Name="link")]
		public string Link { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Group
	{
		
		/// <summary>
		/// timestamp
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creation_time")]
		public System.Nullable<System.Int32> Creation_time { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Group_Admin_Request_Body
	{
		
		/// <summary>
		/// The WhatsApp IDs of the people to be added or removed as group admins
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="wa_ids")]
		public string[] Wa_ids { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Group_Info
	{
		
		/// <summary>
		/// Group administrators
		///Lists IDs of the creator of the group and any administrators added
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="admins")]
		public string[] Admins { get; set; }
		
		/// <summary>
		/// Group creation time
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creation_time")]
		public System.Nullable<System.Int32> Creation_time { get; set; }
		
		/// <summary>
		/// ID of the creator of this group
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creator")]
		public string Creator { get; set; }
		
		/// <summary>
		/// Participants of the group
		///This is an array of all the IDs of the participants in the group. Initially, this will be the creator of the group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="participants")]
		public string[] Participants { get; set; }
		
		/// <summary>
		/// Subject of the group
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subject")]
		public string Subject { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Group_Invite
	{
		
		[System.Runtime.Serialization.DataMember(Name="link")]
		public string Link { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Group_Invite_Response
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Group_Response
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Groups_Response
	{
	}
	
	/// <summary>
	/// The containing element for the message content — Indicates that the message is highly structured. Parameters contained within provide the structure.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Hsm
	{
		
		/// <summary>
		/// The element name that indicates which template to use within the namespace
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="element_name")]
		public string Element_name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="language")]
		public Language Language { get; set; }
		
		/// <summary>
		/// This field is an array of values to apply to variables in the template
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="localizable_params")]
		public LocalizableParam[] Localizable_params { get; set; }
		
		/// <summary>
		/// The namespace that will be used
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="namespace")]
		public string Namespace { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Language
	{
		
		/// <summary>
		/// The code of the language or locale to use — Accepts both language and language_locale formats (e.g., en and en_US).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// The language policy the message should follow
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="policy")]
		public LanguagePolicy Policy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum LanguagePolicy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fallback = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deterministic = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LocalizableParam
	{
		
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public Currency Currency { get; set; }
		
		/// <summary>
		/// The Whatsapp Business API Client will attempt to format the date/time based on a specified localization.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date_time")]
		public Date_Time_Object Date_time { get; set; }
		
		/// <summary>
		/// Default text if localization fails
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="default")]
		public string Default { get; set; }
	}
	
	/// <summary>
	/// The media object containing an image
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Image
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ImageById
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caption")]
		public string Caption { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ImageByProvider
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caption")]
		public string Caption { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="link")]
		public string Link { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="provider")]
		public Provider Provider { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Location
	{
		
		/// <summary>
		/// Address of the location. Only displayed if name is present.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="address")]
		public string Address { get; set; }
		
		/// <summary>
		/// Latitude of the location
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="latitude")]
		public string Latitude { get; set; }
		
		/// <summary>
		/// Longitude of the location
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="longitude")]
		public string Longitude { get; set; }
		
		/// <summary>
		/// Name of the location
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Login_Admin_Request_Body
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="new_password")]
		public string New_password { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Mark_Message_As_Read_Request_Body
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue("read")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; } = "read";
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Media_Provider
	{
		
		[System.Runtime.Serialization.DataMember(Name="config")]
		public Config Config { get; set; }
		
		/// <summary>
		/// The name for the provider
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The type of provider
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Media_Provider_Settings
	{
		
		[System.Runtime.Serialization.DataMember(Name="application")]
		public Media_Provider_Settings_Application Application { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Media_Provider_Settings_Application
	{
		
		[System.Runtime.Serialization.DataMember(Name="media")]
		public Media_Provider_Settings_Application_Media Media { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Media_Provider_Settings_Application_Media
	{
		
		[System.Runtime.Serialization.DataMember(Name="providers")]
		public Media_Provider[] Providers { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Message
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Message_Context
	{
		
		/// <summary>
		/// Sender Whatsapp id of context-message
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="from")]
		public string From { get; set; }
		
		/// <summary>
		/// GroupId of context message
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="group_id")]
		public string Group_id { get; set; }
		
		/// <summary>
		/// message id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Whats app ids
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mentions")]
		public string[] Mentions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Message_Response
	{
	}
	
	/// <summary>
	/// type of the message
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum Message_Type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		audio = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		contacts = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		document = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		hsm = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		image = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		location = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		text = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		video = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		voice = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unknown = 9,
	}
	
	/// <summary>
	/// Contains generic information such as WhatsApp Business API Client version.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Meta
	{
		
		[System.Runtime.Serialization.DataMember(Name="api_status")]
		public System.Nullable<MetaApi_status> Api_status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum MetaApi_status
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deprecated = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		experimental = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		stable = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Profile_Photo_Settings_Profile
	{
		
		[System.Runtime.Serialization.DataMember(Name="photo")]
		public Profile_Photo_Settings_Profile_Photo Photo { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Profile_Photo_Settings_Profile_Photo
	{
		
		[System.Runtime.Serialization.DataMember(Name="link")]
		public string Link { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Register_Account_Request_Body
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Remove_Group_Participant_Request_Body
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="wa_ids")]
		public string[] Wa_ids { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Request_Code_Account
	{
		
		[System.Runtime.Serialization.DataMember(Name="vname")]
		public string Vname { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Request_Code_Request_Body
	{
		
		/// <summary>
		/// Numerical country code for the phone number you are registering
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="cc")]
		public string Cc { get; set; }
		
		/// <summary>
		/// Base64-encoded Verified Name certificate
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="cert")]
		public string Cert { get; set; }
		
		/// <summary>
		/// Method of receiving your registration code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="method")]
		public Request_Code_Request_BodyMethod Method { get; set; }
		
		/// <summary>
		/// Phone number you are registering, without the country code or plus symbol (+)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="phone_number")]
		public string Phone_number { get; set; }
		
		/// <summary>
		/// Existing 6-digit PIN — This is only required when two-factor verification is enabled on this account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pin")]
		public string Pin { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum Request_Code_Request_BodyMethod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		sms = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		voice = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Request_Code_Response
	{
		
		[System.Runtime.Serialization.DataMember(Name="account")]
		public Request_Code_Account[] Account { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Response
	{
		
		/// <summary>
		/// Only returned with a failed request. Contains an array of error objects that are present when there is an error. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// Contains generic information such as WhatsApp Business API Client version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public Meta Meta { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Restore_Settings_Request_Body
	{
		
		/// <summary>
		/// The data that was returned by the /v1/settings/backup API call
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string Data { get; set; }
		
		/// <summary>
		/// The password you used in the /v1/settings/backup API call to encrypt the backup data
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Send_Message_Request_Body
	{
		
		/// <summary>
		/// The media object containing audio
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="audio")]
		public Audio Audio { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contacts")]
		public Contact[] Contacts { get; set; }
		
		/// <summary>
		/// The media object containing a document
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="document")]
		public Document Document { get; set; }
		
		/// <summary>
		/// The containing element for the message content — Indicates that the message is highly structured. Parameters contained within provide the structure.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hsm")]
		public Hsm Hsm { get; set; }
		
		/// <summary>
		/// The media object containing an image
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="image")]
		public Image Image { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="location")]
		public Location Location { get; set; }
		
		/// <summary>
		/// Specifying preview_url in the request is optional when not including a URL in your message.
		///To include a URL preview, set preview_url to true in the message body and make sure the URL begins with http:// or https://. For more information, see the Sending URLs in Text Messages section.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="preview_url")]
		public System.Nullable<System.Boolean> Preview_url { get; set; }
		
		/// <summary>
		/// Determines whether the recipient is an individual or a group
		///Specifying recipient_type in the request is optional when the value is individual.
		///However, recipient_type is required when using group. If sending a text message to a group, see the Sending Group Messages documentation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recipient_type")]
		public System.Nullable<Send_Message_Request_BodyRecipient_type> Recipient_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="text")]
		public Text Text { get; set; }
		
		/// <summary>
		/// When recipient_type is individual, this field is the WhatsApp ID (phone number) returned from contacts endpoint. When recipient_type is group, this field is the WhatsApp group ID.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="to")]
		public string To { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ttl")]
		public string Ttl { get; set; }
		
		/// <summary>
		/// type of the message
		/// </summary>
		[System.ComponentModel.DefaultValue(Message_Type.text)]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public Message_Type Type { get; set; } = Message_Type.text;
		
		/// <summary>
		/// The media object containing a video
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="video")]
		public Video Video { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum Send_Message_Request_BodyRecipient_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		individual = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		group = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Text
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="body")]
		public string Body { get; set; }
	}
	
	/// <summary>
	/// The media object containing a video
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Video
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Set_Shards_Request_Body
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="cc")]
		public string Cc { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="phone_number")]
		public string Phone_number { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pin")]
		public string Pin { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="shards")]
		public Set_Shards_Request_BodyShards Shards { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum Set_Shards_Request_BodyShards
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="8")]
		_8 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="16")]
		_16 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="32")]
		_32 = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Update_Group_Info_Request_Body
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="subject")]
		public string Subject { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Update_User_Request_Body
	{
		
		/// <summary>
		/// password
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Upload_Media
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Upload_Media_Response
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class User_Login_Response
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class User_Login_Response_Item
	{
		
		/// <summary>
		/// Token expiration timestamp. By default, this is 7 days.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expires_after")]
		public System.Nullable<System.DateTimeOffset> Expires_after { get; set; }
		
		/// <summary>
		/// Authentication token to be used for all other WhatsApp Business API calls. The token must be sent in the authorization header in the format:
		///Authorization: Bearer <authentication-token>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="token")]
		public string Token { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class User_Response
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class User_Response_Item
	{
		
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum User_Role
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ROLE_ADMIN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ROLE_USER = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VideoById
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caption")]
		public string Caption { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VideoByProvider
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caption")]
		public string Caption { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="link")]
		public string Link { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="provider")]
		public Provider Provider { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Webhook_Audio
	{
		
		/// <summary>
		/// Optional. Only present if specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="caption")]
		public string Caption { get; set; }
		
		/// <summary>
		/// Absolute filename and location on media volume. This parameter is deprecated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="file")]
		public string File { get; set; }
		
		/// <summary>
		/// Filename on the sender's device. This will only be present in audio and document media messages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filename")]
		public string Filename { get; set; }
		
		/// <summary>
		/// ID of the media. Can be used to delete the media if stored locally on the client.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="link")]
		public string Link { get; set; }
		
		/// <summary>
		/// Mime type of media
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mime_type")]
		public string Mime_type { get; set; }
		
		/// <summary>
		/// Checksum
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sha256")]
		public string Sha256 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Webhook_Contact
	{
		
		[System.Runtime.Serialization.DataMember(Name="profile")]
		public Webhook_Contact_Profile Profile { get; set; }
		
		/// <summary>
		/// The WhatsApp ID of the contact
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="wa_id")]
		public string Wa_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Webhook_Contact_Profile
	{
		
		/// <summary>
		/// Optional. As of v2.21.4, contains the sender's profile name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Webhook_Document
	{
		
		/// <summary>
		/// Optional. Only present if specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="caption")]
		public string Caption { get; set; }
		
		/// <summary>
		/// Absolute filename and location on media volume. This parameter is deprecated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="file")]
		public string File { get; set; }
		
		/// <summary>
		/// Filename on the sender's device. This will only be present in audio and document media messages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filename")]
		public string Filename { get; set; }
		
		/// <summary>
		/// ID of the media. Can be used to delete the media if stored locally on the client.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="link")]
		public string Link { get; set; }
		
		/// <summary>
		/// Mime type of media
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mime_type")]
		public string Mime_type { get; set; }
		
		/// <summary>
		/// Checksum
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sha256")]
		public string Sha256 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Webhook_Event
	{
		
		[System.Runtime.Serialization.DataMember(Name="contacts")]
		public Webhook_Contact[] Contacts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="messages")]
		public Webhook_Message[] Messages { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statuses")]
		public Webhook_Status[] Statuses { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Webhook_Message
	{
		
		[System.Runtime.Serialization.DataMember(Name="audio")]
		public Webhook_Audio Audio { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contacts")]
		public Contact[] Contacts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="context")]
		public Message_Context Context { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="document")]
		public Webhook_Document Document { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// WhatsApp ID of the sender
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="from")]
		public string From { get; set; }
		
		/// <summary>
		/// Optional. WhatsApp group ID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="group_id")]
		public string Group_id { get; set; }
		
		/// <summary>
		/// Message ID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="image")]
		public Webhook_Image Image { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="location")]
		public Webhook_Location Location { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="system")]
		public Webhook_System System { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="text")]
		public Webhook_Text Text { get; set; }
		
		/// <summary>
		/// Message received timestamp
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public string Timestamp { get; set; }
		
		/// <summary>
		/// type of the message
		/// </summary>
		[System.ComponentModel.DefaultValue(Message_Type.text)]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public Message_Type Type { get; set; } = Message_Type.text;
		
		[System.Runtime.Serialization.DataMember(Name="video")]
		public Webhook_Video Video { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="voice")]
		public Webhook_Voice Voice { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Webhook_Image
	{
		
		/// <summary>
		/// Optional. Only present if specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="caption")]
		public string Caption { get; set; }
		
		/// <summary>
		/// Absolute filename and location on media volume. This parameter is deprecated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="file")]
		public string File { get; set; }
		
		/// <summary>
		/// ID of the media. Can be used to delete the media if stored locally on the client.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="link")]
		public string Link { get; set; }
		
		/// <summary>
		/// Mime type of media
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mime_type")]
		public string Mime_type { get; set; }
		
		/// <summary>
		/// Checksum
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sha256")]
		public string Sha256 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Webhook_Location
	{
		
		/// <summary>
		/// Address of the location
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address")]
		public string Address { get; set; }
		
		/// <summary>
		/// Latitude of location being sent
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="latitude")]
		public System.Nullable<System.Double> Latitude { get; set; }
		
		/// <summary>
		/// Longitude of location being sent
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="longitude")]
		public System.Nullable<System.Double> Longitude { get; set; }
		
		/// <summary>
		/// Name of the location
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// URL for the website where the user downloaded the location information
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Webhook_System
	{
		
		[System.Runtime.Serialization.DataMember(Name="body")]
		public string Body { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<Webhook_SystemType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum Webhook_SystemType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		group_created = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		group_user_promoted = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		group_user_demoted = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		group_user_joined = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		group_user_left = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		group_subject_changed = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		group_description_changed = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		group_icon_changed = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		group_icon_deleted = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		group_invite_link_revoked = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		user_identity_changed = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		group_user_changed_number = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		group_error_fetching_photo = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		group_error_adding_users = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		group_error_adding_user = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		group_error_full_adding_users = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		group_error_removing_user = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		broadcast_list_created = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		group_ended = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		group_error_blocked_adding_user = 19,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Webhook_Text
	{
		
		/// <summary>
		/// Message text
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="body")]
		public string Body { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Webhook_Video
	{
		
		/// <summary>
		/// Optional. Only present if specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="caption")]
		public string Caption { get; set; }
		
		/// <summary>
		/// Absolute filename and location on media volume. This parameter is deprecated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="file")]
		public string File { get; set; }
		
		/// <summary>
		/// ID of the media. Can be used to delete the media if stored locally on the client.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="link")]
		public string Link { get; set; }
		
		/// <summary>
		/// Mime type of media
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mime_type")]
		public string Mime_type { get; set; }
		
		/// <summary>
		/// Checksum
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sha256")]
		public string Sha256 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Webhook_Voice
	{
		
		/// <summary>
		/// Optional. Only present if specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="caption")]
		public string Caption { get; set; }
		
		/// <summary>
		/// Absolute filename and location on media volume. This parameter is deprecated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="file")]
		public string File { get; set; }
		
		/// <summary>
		/// ID of the media. Can be used to delete the media if stored locally on the client.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="link")]
		public string Link { get; set; }
		
		/// <summary>
		/// Mime type of media
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mime_type")]
		public string Mime_type { get; set; }
		
		/// <summary>
		/// Checksum
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sha256")]
		public string Sha256 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Webhook_Status
	{
		
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// Message ID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// WhatsApp ID of recipient
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recipient_id")]
		public string Recipient_id { get; set; }
		
		/// <summary>
		/// Status of message
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<Webhook_StatusStatus> Status { get; set; }
		
		/// <summary>
		/// Timestamp of the status message
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public string Timestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum Webhook_StatusStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		sent = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		delivered = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		read = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		failed = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deleted = 4,
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Request-Code
		/// RequestCode account
		/// </summary>
		public async Task RequestCodeAsync(Request_Code_Request_Body requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Set-Shards
		/// SetShards account/shards
		/// </summary>
		public async Task SetShardsAsync(Set_Shards_Request_Body requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/shards";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Register-Account
		/// RegisterAccount account/verify
		/// </summary>
		public async Task RegisterAccountAsync(Register_Account_Request_Body requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/verify";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Download-CA-Certificate
		/// DownloadCaCertificate certificates/external/ca
		/// </summary>
		public async Task<string> DownloadCaCertificateAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "certificates/external/ca";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete Webhook CA Certificate
		/// DeleteWebhookCaCertificate certificates/webhooks/ca
		/// </summary>
		public async Task DeleteWebhookCaCertificateAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "certificates/webhooks/ca";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Download Webhook CA Certificate
		/// DownloadWebhookCaCertificate certificates/webhooks/ca
		/// </summary>
		public async Task<string> DownloadWebhookCaCertificateAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "certificates/webhooks/ca";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Check-Contact
		/// CheckContact contacts
		/// </summary>
		public async Task<Check_Contact_Response> CheckContactAsync(Check_Contact_Request_Body requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "contacts";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Check_Contact_Response>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get-All-Groups
		/// GetAllGroups groups
		/// </summary>
		public async Task<Groups_Response> GetAllGroupsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "groups";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Groups_Response>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create-Group
		/// CreateGroup groups
		/// </summary>
		public async Task<Groups_Response> CreateGroupAsync(Create_Group_Request_Body requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "groups";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Groups_Response>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get-Group-Info
		/// GetGroupInfo groups/{GroupId}
		/// </summary>
		public async Task<Group_Response> GetGroupInfoAsync(string GroupId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "groups/"+ (GroupId==null? "" : System.Uri.EscapeDataString(GroupId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Group_Response>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update-Group-Info
		/// UpdateGroupInfo groups/{GroupId}
		/// </summary>
		public async Task UpdateGroupInfoAsync(string GroupId, Update_Group_Info_Request_Body requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "groups/"+ (GroupId==null? "" : System.Uri.EscapeDataString(GroupId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Demote-Group-Admin
		/// DemoteGroupAdmin groups/{GroupId}/admins
		/// </summary>
		public async Task DemoteGroupAdminAsync(string GroupId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "groups/"+ (GroupId==null? "" : System.Uri.EscapeDataString(GroupId))+"/admins";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Promote-To-Group-Admin
		/// PromoteToGroupAdmin groups/{GroupId}/admins
		/// </summary>
		public async Task PromoteToGroupAdminAsync(string GroupId, Group_Admin_Request_Body requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "groups/"+ (GroupId==null? "" : System.Uri.EscapeDataString(GroupId))+"/admins";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete-Group-Icon
		/// DeleteGroupIcon groups/{GroupId}/icon
		/// </summary>
		public async Task DeleteGroupIconAsync(string GroupId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "groups/"+ (GroupId==null? "" : System.Uri.EscapeDataString(GroupId))+"/icon";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get-Group-Icon-Binary
		/// GetGroupIconBinary groups/{GroupId}/icon
		/// </summary>
		public async Task GetGroupIconBinaryAsync(string GroupId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "groups/"+ (GroupId==null? "" : System.Uri.EscapeDataString(GroupId))+"/icon";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete-Group-Invite
		/// DeleteGroupInvite groups/{GroupId}/invite
		/// </summary>
		public async Task DeleteGroupInviteAsync(string GroupId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "groups/"+ (GroupId==null? "" : System.Uri.EscapeDataString(GroupId))+"/invite";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get-Group-Invite
		/// GetGroupInvite groups/{GroupId}/invite
		/// </summary>
		public async Task<Group_Invite_Response> GetGroupInviteAsync(string GroupId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "groups/"+ (GroupId==null? "" : System.Uri.EscapeDataString(GroupId))+"/invite";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Group_Invite_Response>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Leave-Group
		/// LeaveGroup groups/{GroupId}/leave
		/// </summary>
		public async Task LeaveGroupAsync(string GroupId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "groups/"+ (GroupId==null? "" : System.Uri.EscapeDataString(GroupId))+"/leave";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove-Group-Participant
		/// RemoveGroupParticipant groups/{GroupId}/participants
		/// </summary>
		public async Task RemoveGroupParticipantAsync(string GroupId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "groups/"+ (GroupId==null? "" : System.Uri.EscapeDataString(GroupId))+"/participants";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Check-Health
		/// CheckHealth health
		/// </summary>
		public async Task CheckHealthAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "health";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete-Media
		/// DeleteMedia media/{MediaId}
		/// </summary>
		public async Task DeleteMediaAsync(string MediaId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "media/"+ (MediaId==null? "" : System.Uri.EscapeDataString(MediaId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Download-Media
		/// DownloadMedia media/{MediaId}
		/// </summary>
		public async Task DownloadMediaAsync(string MediaId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "media/"+ (MediaId==null? "" : System.Uri.EscapeDataString(MediaId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Send-Message
		/// SendMessage messages
		/// </summary>
		public async Task<Message_Response> SendMessageAsync(Send_Message_Request_Body requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "messages";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Message_Response>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Mark-Message-As-Read
		/// MarkMessageAsRead messages/{MessageID}
		/// </summary>
		/// <param name="MessageID">Message ID from Webhook</param>
		public async Task MarkMessageAsReadAsync(string MessageID, Mark_Message_As_Read_Request_Body requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "messages/"+ (MessageID==null? "" : System.Uri.EscapeDataString(MessageID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get-Metrics (since v2.21.3)
		/// GetMetrics metrics
		/// </summary>
		public async Task<string> GetMetricsAsync(string format, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "metrics?format=" + (format==null? "" : System.Uri.EscapeDataString(format));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Disable-Two-Step
		/// DisableTwoStep settings/account/two-step
		/// </summary>
		public async Task DisableTwoStepAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "settings/account/two-step";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Enable-Two-Step
		/// EnableTwoStep settings/account/two-step
		/// </summary>
		public async Task EnableTwoStepAsync(Enable_Two_Step_Request_Body requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "settings/account/two-step";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Reset-Application-Settings
		/// ResetApplicationSettings settings/application
		/// </summary>
		public async Task ResetApplicationSettingsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "settings/application";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get-Application-Settings
		/// GetApplicationSettings settings/application
		/// </summary>
		public async Task<Application_Settings> GetApplicationSettingsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "settings/application";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Application_Settings>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update-Application-Settings
		/// If a field is not present in the request, no change is made to that setting. For example, if on_call_pager is not sent with the request, the existing configuration for on_call_pager is unchanged.
		/// UpdateApplicationSettings settings/application
		/// </summary>
		public async Task<Response> UpdateApplicationSettingsAsync(Application_Settings requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "settings/application";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Response>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get-Media-Providers
		/// GetMediaProviders settings/application/media/providers
		/// </summary>
		public async Task<Get_Media_Providers_Response> GetMediaProvidersAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "settings/application/media/providers";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Get_Media_Providers_Response>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update-Media-Providers
		/// UpdateMediaProviders settings/application/media/providers
		/// </summary>
		public async Task UpdateMediaProvidersAsync(Media_Provider[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "settings/application/media/providers";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete-Media-Providers
		/// DeleteMediaProviders settings/application/media/providers/{ProviderName}
		/// </summary>
		/// <param name="ProviderName">Provider Name</param>
		public async Task DeleteMediaProvidersAsync(string ProviderName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "settings/application/media/providers/"+ (ProviderName==null? "" : System.Uri.EscapeDataString(ProviderName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Backup-Settings
		/// BackupSettings settings/backup
		/// </summary>
		public async Task<Backup_Settings_Response> BackupSettingsAsync(Backup_Settings_Request_Body requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "settings/backup";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Backup_Settings_Response>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get-Business-Profile
		/// GetBusinessProfile settings/business/profile
		/// </summary>
		public async Task<Get_Business_Profile_Response> GetBusinessProfileAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "settings/business/profile";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Get_Business_Profile_Response>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update-Business-Profile
		/// UpdateBusinessProfile settings/business/profile
		/// </summary>
		public async Task UpdateBusinessProfileAsync(Business_Profile requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "settings/business/profile";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get-Profile-About
		/// GetProfileAbout settings/profile/about
		/// </summary>
		public async Task<Get_Profile_About_Response> GetProfileAboutAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "settings/profile/about";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Get_Profile_About_Response>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update-Profile-About
		/// UpdateProfileAbout settings/profile/about
		/// </summary>
		public async Task UpdateProfileAboutAsync(Profile_About requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "settings/profile/about";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete-Profile-Photo
		/// DeleteProfilePhoto settings/profile/photo
		/// </summary>
		public async Task DeleteProfilePhotoAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "settings/profile/photo";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get-Profile-Photo
		/// GetProfilePhoto settings/profile/photo
		/// </summary>
		public async Task<Get_Profile_Photo_Response> GetProfilePhotoAsync(string format, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "settings/profile/photo?format=" + (format==null? "" : System.Uri.EscapeDataString(format));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Get_Profile_Photo_Response>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Restore-Settings
		/// RestoreSettings settings/restore
		/// </summary>
		public async Task RestoreSettingsAsync(Restore_Settings_Request_Body requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "settings/restore";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get-App-Stats
		/// GetAppStats stats/app
		/// </summary>
		public async Task<string> GetAppStatsAsync(string format, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "stats/app?format=" + (format==null? "" : System.Uri.EscapeDataString(format));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get-DB-Stats
		/// GetDbStats stats/db
		/// </summary>
		public async Task<string> GetDbStatsAsync(string format, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "stats/db?format=" + (format==null? "" : System.Uri.EscapeDataString(format));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get-Support-Info
		/// GetSupportInfo support
		/// </summary>
		public async Task<string> GetSupportInfoAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "support";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create-User
		/// CreateUser users
		/// </summary>
		public async Task<User_Response> CreateUserAsync(Create_User_Request_Body requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<User_Response>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Login-User
		/// LoginUser users/login
		/// </summary>
		/// <returns>OK</returns>
		public async Task<User_Login_Response> LoginUserAsync(Login_Admin_Request_Body requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/login";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<User_Login_Response>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Logout-User
		/// LogoutUser users/logout
		/// </summary>
		public async Task LogoutUserAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/logout";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete-User
		/// DeleteUser users/{UserUsername}
		/// </summary>
		public async Task<User_Response> DeleteUserAsync(string UserUsername, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+ (UserUsername==null? "" : System.Uri.EscapeDataString(UserUsername));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<User_Response>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get-User
		/// GetUser users/{UserUsername}
		/// </summary>
		public async Task<Detailed_User_Response> GetUserAsync(string UserUsername, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+ (UserUsername==null? "" : System.Uri.EscapeDataString(UserUsername));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Detailed_User_Response>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update-User
		/// UpdateUser users/{UserUsername}
		/// </summary>
		public async Task<User_Response> UpdateUserAsync(string UserUsername, Update_User_Request_Body requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+ (UserUsername==null? "" : System.Uri.EscapeDataString(UserUsername));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<User_Response>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
