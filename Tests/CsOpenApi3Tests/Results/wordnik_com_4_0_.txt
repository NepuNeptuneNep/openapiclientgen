//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApiTokenStatus
	{
		
		[System.Runtime.Serialization.DataMember(Name="expiresInMillis")]
		public System.Nullable<System.Int64> ExpiresInMillis { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="remainingCalls")]
		public System.Nullable<System.Int64> RemainingCalls { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resetsInMillis")]
		public System.Nullable<System.Int64> ResetsInMillis { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="token")]
		public string Token { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalRequests")]
		public System.Nullable<System.Int64> TotalRequests { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="valid")]
		public System.Nullable<System.Boolean> Valid { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AudioFile
	{
		
		[System.Runtime.Serialization.DataMember(Name="attributionText")]
		public string AttributionText { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="attributionUrl")]
		public string AttributionUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="audioType")]
		public string AudioType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="commentCount")]
		public System.Nullable<System.Int32> CommentCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateOnly> CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public string CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="duration")]
		public System.Nullable<System.Double> Duration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fileUrl")]
		public string FileUrl { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public long Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="voteAverage")]
		public System.Nullable<System.Single> VoteAverage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="voteCount")]
		public System.Nullable<System.Int32> VoteCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="voteWeightedAverage")]
		public System.Nullable<System.Single> VoteWeightedAverage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="word")]
		public string Word { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AudioType
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AuthenticationToken
	{
		
		[System.Runtime.Serialization.DataMember(Name="token")]
		public string Token { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public System.Nullable<System.Int64> UserId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userSignature")]
		public string UserSignature { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Bigram
	{
		
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int64> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="gram1")]
		public string Gram1 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="gram2")]
		public string Gram2 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mi")]
		public System.Nullable<System.Double> Mi { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="wlmi")]
		public System.Nullable<System.Double> Wlmi { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Category
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public long Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Citation
	{
		
		[System.Runtime.Serialization.DataMember(Name="cite")]
		public string Cite { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string Source { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ContentProvider
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Definition
	{
		
		[System.Runtime.Serialization.DataMember(Name="attributionText")]
		public string AttributionText { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="attributionUrl")]
		public string AttributionUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="citations")]
		public string[] Citations { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="exampleUses")]
		public string[] ExampleUses { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="extendedText")]
		public string ExtendedText { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public string[] Labels { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="notes")]
		public string[] Notes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="partOfSpeech")]
		public string PartOfSpeech { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="relatedWords")]
		public string[] RelatedWords { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="score")]
		public System.Nullable<System.Single> Score { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="seqString")]
		public string SeqString { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sequence")]
		public string Sequence { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceDictionary")]
		public string SourceDictionary { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="textProns")]
		public string[] TextProns { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="word")]
		public string Word { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DefinitionSearchResults
	{
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public string[] Results { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalResults")]
		public System.Nullable<System.Int32> TotalResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Example
	{
		
		[System.Runtime.Serialization.DataMember(Name="documentId")]
		public System.Nullable<System.Int64> DocumentId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="exampleId")]
		public System.Nullable<System.Int64> ExampleId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="provider")]
		public ContentProvider Provider { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rating")]
		public System.Nullable<System.Single> Rating { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="score")]
		public ScoredWord Score { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sentence")]
		public Sentence Sentence { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="word")]
		public string Word { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="year")]
		public System.Nullable<System.Int32> Year { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ExampleSearchResults
	{
		
		[System.Runtime.Serialization.DataMember(Name="examples")]
		public string[] Examples { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="facets")]
		public string[] Facets { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ExampleUsage
	{
		
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Facet
	{
		
		[System.Runtime.Serialization.DataMember(Name="facetValues")]
		public string[] FacetValues { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FacetValue
	{
		
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int64> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Frequency
	{
		
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int64> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="year")]
		public System.Nullable<System.Int32> Year { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FrequencySummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="frequency")]
		public string[] Frequency { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="frequencyString")]
		public string FrequencyString { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalCount")]
		public System.Nullable<System.Int64> TotalCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unknownYearCount")]
		public System.Nullable<System.Int32> UnknownYearCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="word")]
		public string Word { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Label
	{
		
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Long
	{
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Int64> Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Note
	{
		
		[System.Runtime.Serialization.DataMember(Name="appliesTo")]
		public string[] AppliesTo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="noteType")]
		public string NoteType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pos")]
		public System.Nullable<System.Int32> Pos { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PartOfSpeech
	{
		
		[System.Runtime.Serialization.DataMember(Name="allCategories")]
		public string[] AllCategories { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="roots")]
		public string[] Roots { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="storageAbbr")]
		public string[] StorageAbbr { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Related
	{
		
		[System.Runtime.Serialization.DataMember(Name="gram")]
		public string Gram { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="label1")]
		public string Label1 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="label2")]
		public string Label2 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="label3")]
		public string Label3 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="label4")]
		public string Label4 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="relationshipType")]
		public string RelationshipType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="words")]
		public string[] Words { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Root
	{
		
		[System.Runtime.Serialization.DataMember(Name="categories")]
		public string[] Categories { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public long Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ScoredWord
	{
		
		[System.Runtime.Serialization.DataMember(Name="baseWordScore")]
		public System.Nullable<System.Double> BaseWordScore { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="docTermCount")]
		public System.Nullable<System.Int32> DocTermCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lemma")]
		public string Lemma { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="partOfSpeech")]
		public string PartOfSpeech { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="position")]
		public System.Nullable<System.Int32> Position { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="score")]
		public System.Nullable<System.Single> Score { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sentenceId")]
		public System.Nullable<System.Int64> SentenceId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stopword")]
		public System.Nullable<System.Boolean> Stopword { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="word")]
		public string Word { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="wordType")]
		public string WordType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Sentence
	{
		
		[System.Runtime.Serialization.DataMember(Name="display")]
		public string Display { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="documentMetadataId")]
		public System.Nullable<System.Int64> DocumentMetadataId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hasScoredWords")]
		public System.Nullable<System.Boolean> HasScoredWords { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rating")]
		public System.Nullable<System.Int32> Rating { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scoredWords")]
		public string[] ScoredWords { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SimpleDefinition
	{
		
		[System.Runtime.Serialization.DataMember(Name="note")]
		public string Note { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="partOfSpeech")]
		public string PartOfSpeech { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string Source { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SimpleExample
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StringValue
	{
		
		[System.Runtime.Serialization.DataMember(Name="word")]
		public string Word { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Syllable
	{
		
		[System.Runtime.Serialization.DataMember(Name="seq")]
		public System.Nullable<System.Int32> Seq { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TextPron
	{
		
		[System.Runtime.Serialization.DataMember(Name="raw")]
		public string Raw { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rawType")]
		public string RawType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="seq")]
		public System.Nullable<System.Int32> Seq { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class User
	{
		
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="faceBookId")]
		public string FaceBookId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<System.Int32> Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userName")]
		public string UserName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WordList
	{
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateOnly> CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public long Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastActivityAt")]
		public System.Nullable<System.DateOnly> LastActivityAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="numberWordsInList")]
		public System.Nullable<System.Int64> NumberWordsInList { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="permalink")]
		public string Permalink { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updatedAt")]
		public System.Nullable<System.DateOnly> UpdatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public System.Nullable<System.Int64> UserId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WordListWord
	{
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateOnly> CreatedAt { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public long Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="numberCommentsOnWord")]
		public System.Nullable<System.Int64> NumberCommentsOnWord { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="numberLists")]
		public System.Nullable<System.Int64> NumberLists { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public System.Nullable<System.Int64> UserId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="word")]
		public string Word { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WordObject
	{
		
		[System.Runtime.Serialization.DataMember(Name="canonicalForm")]
		public string CanonicalForm { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public long Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="originalWord")]
		public string OriginalWord { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="suggestions")]
		public string[] Suggestions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vulgar")]
		public string Vulgar { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="word")]
		public string Word { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WordOfTheDay
	{
		
		[System.Runtime.Serialization.DataMember(Name="category")]
		public string Category { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contentProvider")]
		public ContentProvider ContentProvider { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateOnly> CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public string CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="definitions")]
		public string[] Definitions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="examples")]
		public string[] Examples { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="htmlExtra")]
		public string HtmlExtra { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public long Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="note")]
		public string Note { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parentId")]
		public string ParentId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="publishDate")]
		public System.Nullable<System.DateOnly> PublishDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="word")]
		public string Word { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WordSearchResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int64> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lexicality")]
		public System.Nullable<System.Double> Lexicality { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="word")]
		public string Word { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WordSearchResults
	{
		
		[System.Runtime.Serialization.DataMember(Name="searchResults")]
		public string[] SearchResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalResults")]
		public System.Nullable<System.Int32> TotalResults { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Fetches audio metadata for a word.
		/// The metadata includes a time-expiring fileUrl which allows reading the audio file directly from the API.  Currently only audio pronunciations from the American Heritage Dictionary in mp3 format are supported.
		/// GetAudio word.json/{word}/audio
		/// </summary>
		/// <param name="word">Word to get audio for.</param>
		/// <param name="useCanonical">If true will try to return the correct word root ('cats' -> 'cat'). If false returns exactly what was requested.</param>
		/// <param name="limit">Maximum number of results to return</param>
		/// <returns>No response was specified</returns>
		public async Task GetAudioAsync(string word, GetAudioUseCanonical useCanonical, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "word.json/"+ (word==null? "" : System.Uri.EscapeDataString(word))+"/audio&useCanonical=" + useCanonical+"&limit="+limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Return definitions for a word
		/// GetDefinitions word.json/{word}/definitions
		/// </summary>
		/// <param name="word">Word to return definitions for</param>
		/// <param name="limit">Maximum number of results to return</param>
		/// <param name="partOfSpeech">CSV list of part-of-speech types</param>
		/// <param name="includeRelated">Return related words with definitions</param>
		/// <param name="sourceDictionaries">Source dictionary to return definitions from.  If 'all' is received, results are returned from all sources. If multiple values are received (e.g. 'century,wiktionary'), results are returned from the first specified dictionary that has definitions. If left blank, results are returned from the first dictionary that has definitions. By default, dictionaries are searched in this order: ahd-5, wiktionary, webster, century, wordnet</param>
		/// <param name="useCanonical">If true will try to return the correct word root ('cats' -> 'cat'). If false returns exactly what was requested.</param>
		/// <param name="includeTags">Return a closed set of XML tags in response</param>
		/// <returns>No response was specified</returns>
		public async Task GetDefinitionsAsync(string word, int limit, GetDefinitionsPartOfSpeech partOfSpeech, string includeRelated, string[] sourceDictionaries, GetDefinitionsUseCanonical useCanonical, GetDefinitionsIncludeTags includeTags, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "word.json/"+ (word==null? "" : System.Uri.EscapeDataString(word))+"/definitions&limit="+limit+"&partOfSpeech=" + partOfSpeech+"&includeRelated=" + (includeRelated==null? "" : System.Uri.EscapeDataString(includeRelated))+"&"+string.Join("&", sourceDictionaries.Select(z => $"sourceDictionaries={System.Uri.EscapeDataString(z.ToString())}"))+"&useCanonical=" + useCanonical+"&includeTags=" + includeTags;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Fetches etymology data
		/// GetEtymologies word.json/{word}/etymologies
		/// </summary>
		/// <param name="word">Word to return</param>
		/// <param name="useCanonical">If true will try to return the correct word root ('cats' -> 'cat'). If false returns exactly what was requested.</param>
		/// <returns>No response was specified</returns>
		public async Task GetEtymologiesAsync(string word, GetEtymologiesUseCanonical useCanonical, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "word.json/"+ (word==null? "" : System.Uri.EscapeDataString(word))+"/etymologies&useCanonical=" + useCanonical;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns examples for a word
		/// GetExamples word.json/{word}/examples
		/// </summary>
		/// <param name="word">Word to return examples for</param>
		/// <param name="includeDuplicates">Show duplicate examples from different sources</param>
		/// <param name="useCanonical">If true will try to return the correct word root ('cats' -> 'cat'). If false returns exactly what was requested.</param>
		/// <param name="skip">Results to skip</param>
		/// <param name="limit">Maximum number of results to return</param>
		/// <returns>No response was specified</returns>
		public async Task GetExamplesAsync(string word, GetExamplesIncludeDuplicates includeDuplicates, GetExamplesUseCanonical useCanonical, int skip, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "word.json/"+ (word==null? "" : System.Uri.EscapeDataString(word))+"/examples&includeDuplicates=" + includeDuplicates+"&useCanonical=" + useCanonical+"&skip="+skip+"&limit="+limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns word usage over time
		/// GetWordFrequency word.json/{word}/frequency
		/// </summary>
		/// <param name="word">Word to return</param>
		/// <param name="useCanonical">If true will try to return the correct word root ('cats' -> 'cat'). If false returns exactly what was requested.</param>
		/// <param name="startYear">Starting Year</param>
		/// <param name="endYear">Ending Year</param>
		/// <returns>No response was specified</returns>
		public async Task GetWordFrequencyAsync(string word, GetWordFrequencyUseCanonical useCanonical, int startYear, int endYear, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "word.json/"+ (word==null? "" : System.Uri.EscapeDataString(word))+"/frequency&useCanonical=" + useCanonical+"&startYear="+startYear+"&endYear="+endYear;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns syllable information for a word
		/// GetHyphenation word.json/{word}/hyphenation
		/// </summary>
		/// <param name="word">Word to get syllables for</param>
		/// <param name="useCanonical">If true will try to return a correct word root ('cats' -> 'cat'). If false returns exactly what was requested.</param>
		/// <param name="sourceDictionary">Get from a single dictionary. Valid options: ahd-5, century, wiktionary, webster, and wordnet.</param>
		/// <param name="limit">Maximum number of results to return</param>
		/// <returns>No response was specified</returns>
		public async Task GetHyphenationAsync(string word, GetHyphenationUseCanonical useCanonical, GetHyphenationSourceDictionary sourceDictionary, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "word.json/"+ (word==null? "" : System.Uri.EscapeDataString(word))+"/hyphenation&useCanonical=" + useCanonical+"&sourceDictionary=" + sourceDictionary+"&limit="+limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Fetches bi-gram phrases for a word
		/// GetPhrases word.json/{word}/phrases
		/// </summary>
		/// <param name="word">Word to fetch phrases for</param>
		/// <param name="limit">Maximum number of results to return</param>
		/// <param name="wlmi">Minimum WLMI for the phrase</param>
		/// <param name="useCanonical">If true will try to return the correct word root ('cats' -> 'cat'). If false returns exactly what was requested.</param>
		/// <returns>No response was specified</returns>
		public async Task GetPhrasesAsync(string word, int limit, int wlmi, GetPhrasesUseCanonical useCanonical, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "word.json/"+ (word==null? "" : System.Uri.EscapeDataString(word))+"/phrases&limit="+limit+"&wlmi="+wlmi+"&useCanonical=" + useCanonical;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns text pronunciations for a given word
		/// GetTextPronunciations word.json/{word}/pronunciations
		/// </summary>
		/// <param name="word">Word to get pronunciations for</param>
		/// <param name="useCanonical">If true will try to return a correct word root ('cats' -> 'cat'). If false returns exactly what was requested.</param>
		/// <param name="sourceDictionary">Get from a single dictionary</param>
		/// <param name="typeFormat">Text pronunciation type</param>
		/// <param name="limit">Maximum number of results to return</param>
		/// <returns>No response was specified</returns>
		public async Task GetTextPronunciationsAsync(string word, GetTextPronunciationsUseCanonical useCanonical, GetTextPronunciationsSourceDictionary sourceDictionary, GetTextPronunciationsTypeFormat typeFormat, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "word.json/"+ (word==null? "" : System.Uri.EscapeDataString(word))+"/pronunciations&useCanonical=" + useCanonical+"&sourceDictionary=" + sourceDictionary+"&typeFormat=" + typeFormat+"&limit="+limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Given a word as a string, returns relationships from the Word Graph
		/// GetRelatedWords word.json/{word}/relatedWords
		/// </summary>
		/// <param name="word">Word to fetch relationships for</param>
		/// <param name="useCanonical">If true will try to return the correct word root ('cats' -> 'cat'). If false returns exactly what was requested.</param>
		/// <param name="relationshipTypes">Limits the total results per type of relationship type</param>
		/// <param name="limitPerRelationshipType">Restrict to the supplied relationship types</param>
		/// <returns>No response was specified</returns>
		public async Task GetRelatedWordsAsync(string word, GetRelatedWordsUseCanonical useCanonical, GetRelatedWordsRelationshipTypes relationshipTypes, int limitPerRelationshipType, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "word.json/"+ (word==null? "" : System.Uri.EscapeDataString(word))+"/relatedWords&useCanonical=" + useCanonical+"&relationshipTypes=" + relationshipTypes+"&limitPerRelationshipType="+limitPerRelationshipType;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the Scrabble score for a word
		/// GetScrabbleScore word.json/{word}/scrabbleScore
		/// </summary>
		/// <param name="word">Word to get scrabble score for.</param>
		/// <returns>No response was specified</returns>
		public async Task GetScrabbleScoreAsync(string word, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "word.json/"+ (word==null? "" : System.Uri.EscapeDataString(word))+"/scrabbleScore";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a top example for a word
		/// GetTopExample word.json/{word}/topExample
		/// </summary>
		/// <param name="word">Word to fetch examples for</param>
		/// <param name="useCanonical">If true will try to return the correct word root ('cats' -> 'cat'). If false returns exactly what was requested.</param>
		/// <returns>No response was specified</returns>
		public async Task GetTopExampleAsync(string word, GetTopExampleUseCanonical useCanonical, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "word.json/"+ (word==null? "" : System.Uri.EscapeDataString(word))+"/topExample&useCanonical=" + useCanonical;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a single random WordObject
		/// GetRandomWord words.json/randomWord
		/// </summary>
		/// <param name="hasDictionaryDef">Only return words with dictionary definitions</param>
		/// <param name="includePartOfSpeech">CSV part-of-speech values to include (allowable values are noun, adjective, verb, adverb, interjection, pronoun, preposition, abbreviation, affix, article, auxiliary-verb, conjunction, definite-article, family-name, given-name, idiom, imperative, noun-plural, noun-posessive, past-participle, phrasal-prefix, proper-noun, proper-noun-plural, proper-noun-posessive, suffix, verb-intransitive, verb-transitive)</param>
		/// <param name="excludePartOfSpeech">CSV part-of-speech values to exclude (allowable values are noun, adjective, verb, adverb, interjection, pronoun, preposition, abbreviation, affix, article, auxiliary-verb, conjunction, definite-article, family-name, given-name, idiom, imperative, noun-plural, noun-posessive, past-participle, phrasal-prefix, proper-noun, proper-noun-plural, proper-noun-posessive, suffix, verb-intransitive, verb-transitive)</param>
		/// <param name="minCorpusCount">Minimum corpus frequency for terms</param>
		/// <param name="maxCorpusCount">Maximum corpus frequency for terms</param>
		/// <param name="minDictionaryCount">Minimum dictionary count</param>
		/// <param name="maxDictionaryCount">Maximum dictionary count</param>
		/// <param name="minLength">Minimum word length</param>
		/// <param name="maxLength">Maximum word length</param>
		/// <returns>No response was specified</returns>
		public async Task GetRandomWordAsync(string hasDictionaryDef, string includePartOfSpeech, string excludePartOfSpeech, int minCorpusCount, int maxCorpusCount, int minDictionaryCount, int maxDictionaryCount, int minLength, int maxLength, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "words.json/randomWord?hasDictionaryDef=" + (hasDictionaryDef==null? "" : System.Uri.EscapeDataString(hasDictionaryDef))+"&includePartOfSpeech=" + (includePartOfSpeech==null? "" : System.Uri.EscapeDataString(includePartOfSpeech))+"&excludePartOfSpeech=" + (excludePartOfSpeech==null? "" : System.Uri.EscapeDataString(excludePartOfSpeech))+"&minCorpusCount="+minCorpusCount+"&maxCorpusCount="+maxCorpusCount+"&minDictionaryCount="+minDictionaryCount+"&maxDictionaryCount="+maxDictionaryCount+"&minLength="+minLength+"&maxLength="+maxLength;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns an array of random WordObjects
		/// GetRandomWords words.json/randomWords
		/// </summary>
		/// <param name="hasDictionaryDef">Only return words with dictionary definitions</param>
		/// <param name="includePartOfSpeech">CSV part-of-speech values to include (allowable values are noun, adjective, verb, adverb, interjection, pronoun, preposition, abbreviation, affix, article, auxiliary-verb, conjunction, definite-article, family-name, given-name, idiom, imperative, noun-plural, noun-posessive, past-participle, phrasal-prefix, proper-noun, proper-noun-plural, proper-noun-posessive, suffix, verb-intransitive, verb-transitive)</param>
		/// <param name="excludePartOfSpeech">CSV part-of-speech values to exclude (allowable values are noun, adjective, verb, adverb, interjection, pronoun, preposition, abbreviation, affix, article, auxiliary-verb, conjunction, definite-article, family-name, given-name, idiom, imperative, noun-plural, noun-posessive, past-participle, phrasal-prefix, proper-noun, proper-noun-plural, proper-noun-posessive, suffix, verb-intransitive, verb-transitive)</param>
		/// <param name="minCorpusCount">Minimum corpus frequency for terms</param>
		/// <param name="maxCorpusCount">Maximum corpus frequency for terms</param>
		/// <param name="minDictionaryCount">Minimum dictionary count</param>
		/// <param name="maxDictionaryCount">Maximum dictionary count</param>
		/// <param name="minLength">Minimum word length</param>
		/// <param name="maxLength">Maximum word length</param>
		/// <param name="sortBy">Attribute to sort by</param>
		/// <param name="sortOrder">Sort direction</param>
		/// <param name="limit">Maximum number of results to return</param>
		/// <returns>No response was specified</returns>
		public async Task GetRandomWordsAsync(string hasDictionaryDef, string includePartOfSpeech, string excludePartOfSpeech, int minCorpusCount, int maxCorpusCount, int minDictionaryCount, int maxDictionaryCount, int minLength, int maxLength, GetRandomWordsSortBy sortBy, GetRandomWordsSortOrder sortOrder, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "words.json/randomWords?hasDictionaryDef=" + (hasDictionaryDef==null? "" : System.Uri.EscapeDataString(hasDictionaryDef))+"&includePartOfSpeech=" + (includePartOfSpeech==null? "" : System.Uri.EscapeDataString(includePartOfSpeech))+"&excludePartOfSpeech=" + (excludePartOfSpeech==null? "" : System.Uri.EscapeDataString(excludePartOfSpeech))+"&minCorpusCount="+minCorpusCount+"&maxCorpusCount="+maxCorpusCount+"&minDictionaryCount="+minDictionaryCount+"&maxDictionaryCount="+maxDictionaryCount+"&minLength="+minLength+"&maxLength="+maxLength+"&sortBy=" + sortBy+"&sortOrder=" + sortOrder+"&limit="+limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Reverse dictionary search
		/// ReverseDictionary words.json/reverseDictionary
		/// </summary>
		/// <param name="query">Search term</param>
		/// <param name="findSenseForWord">Restricts words and finds closest sense</param>
		/// <param name="includeSourceDictionaries">Only include these comma-delimited source dictionaries</param>
		/// <param name="excludeSourceDictionaries">Exclude these comma-delimited source dictionaries</param>
		/// <param name="includePartOfSpeech">Only include these comma-delimited parts of speech (allowable values are noun, adjective, verb, adverb, interjection, pronoun, preposition, abbreviation, affix, article, auxiliary-verb, conjunction, definite-article, family-name, given-name, idiom, imperative, noun-plural, noun-posessive, past-participle, phrasal-prefix, proper-noun, proper-noun-plural, proper-noun-posessive, suffix, verb-intransitive, verb-transitive)</param>
		/// <param name="excludePartOfSpeech">Exclude these comma-delimited parts of speech (allowable values are noun, adjective, verb, adverb, interjection, pronoun, preposition, abbreviation, affix, article, auxiliary-verb, conjunction, definite-article, family-name, given-name, idiom, imperative, noun-plural, noun-posessive, past-participle, phrasal-prefix, proper-noun, proper-noun-plural, proper-noun-posessive, suffix, verb-intransitive, verb-transitive)</param>
		/// <param name="minCorpusCount">Minimum corpus frequency for terms</param>
		/// <param name="maxCorpusCount">Maximum corpus frequency for terms</param>
		/// <param name="minLength">Minimum word length</param>
		/// <param name="maxLength">Maximum word length</param>
		/// <param name="expandTerms">Expand terms</param>
		/// <param name="includeTags">Return a closed set of XML tags in response</param>
		/// <param name="sortBy">Attribute to sort by</param>
		/// <param name="sortOrder">Sort direction</param>
		/// <param name="skip">Results to skip</param>
		/// <param name="limit">Maximum number of results to return</param>
		/// <returns>No response was specified</returns>
		public async Task ReverseDictionaryAsync(
					string query, 
					string findSenseForWord, 
					ReverseDictionaryIncludeSourceDictionaries includeSourceDictionaries, 
					ReverseDictionaryExcludeSourceDictionaries excludeSourceDictionaries, 
					string includePartOfSpeech, 
					string excludePartOfSpeech, 
					int minCorpusCount, 
					int maxCorpusCount, 
					int minLength, 
					int maxLength, 
					string expandTerms, 
					ReverseDictionaryIncludeTags includeTags, 
					GetRandomWordsSortBy sortBy, 
					GetRandomWordsSortOrder sortOrder, 
					string skip, 
					int limit, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "words.json/reverseDictionary?query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&findSenseForWord=" + (findSenseForWord==null? "" : System.Uri.EscapeDataString(findSenseForWord))+"&includeSourceDictionaries=" + includeSourceDictionaries+"&excludeSourceDictionaries=" + excludeSourceDictionaries+"&includePartOfSpeech=" + (includePartOfSpeech==null? "" : System.Uri.EscapeDataString(includePartOfSpeech))+"&excludePartOfSpeech=" + (excludePartOfSpeech==null? "" : System.Uri.EscapeDataString(excludePartOfSpeech))+"&minCorpusCount="+minCorpusCount+"&maxCorpusCount="+maxCorpusCount+"&minLength="+minLength+"&maxLength="+maxLength+"&expandTerms=" + (expandTerms==null? "" : System.Uri.EscapeDataString(expandTerms))+"&includeTags=" + includeTags+"&sortBy=" + sortBy+"&sortOrder=" + sortOrder+"&skip=" + (skip==null? "" : System.Uri.EscapeDataString(skip))+"&limit="+limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Searches words
		/// SearchWords words.json/search/{query}
		/// </summary>
		/// <param name="allowRegex">Search term is a Regular Expression</param>
		/// <param name="query">Search query</param>
		/// <param name="caseSensitive">Search case sensitive</param>
		/// <param name="includePartOfSpeech">Only include these comma-delimited parts of speech (allowable values are noun, adjective, verb, adverb, interjection, pronoun, preposition, abbreviation, affix, article, auxiliary-verb, conjunction, definite-article, family-name, given-name, idiom, imperative, noun-plural, noun-posessive, past-participle, phrasal-prefix, proper-noun, proper-noun-plural, proper-noun-posessive, suffix, verb-intransitive, verb-transitive)</param>
		/// <param name="excludePartOfSpeech">Exclude these comma-delimited parts of speech (allowable values are noun, adjective, verb, adverb, interjection, pronoun, preposition, abbreviation, affix, article, auxiliary-verb, conjunction, definite-article, family-name, given-name, idiom, imperative, noun-plural, noun-posessive, past-participle, phrasal-prefix, proper-noun, proper-noun-plural, proper-noun-posessive, suffix, verb-intransitive, verb-transitive)</param>
		/// <param name="minCorpusCount">Minimum corpus frequency for terms</param>
		/// <param name="maxCorpusCount">Maximum corpus frequency for terms</param>
		/// <param name="minDictionaryCount">Minimum number of dictionary entries for words returned</param>
		/// <param name="maxDictionaryCount">Maximum dictionary definition count</param>
		/// <param name="minLength">Minimum word length</param>
		/// <param name="maxLength">Maximum word length</param>
		/// <param name="skip">Results to skip</param>
		/// <param name="limit">Maximum number of results to return</param>
		/// <returns>No response was specified</returns>
		public async Task SearchWordsAsync(string allowRegex, string query, string caseSensitive, string includePartOfSpeech, string excludePartOfSpeech, int minCorpusCount, int maxCorpusCount, int minDictionaryCount, int maxDictionaryCount, int minLength, int maxLength, int skip, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "words.json/search/"+ (query==null? "" : System.Uri.EscapeDataString(query))+"?allowRegex=" + (allowRegex==null? "" : System.Uri.EscapeDataString(allowRegex))+"&caseSensitive=" + (caseSensitive==null? "" : System.Uri.EscapeDataString(caseSensitive))+"&includePartOfSpeech=" + (includePartOfSpeech==null? "" : System.Uri.EscapeDataString(includePartOfSpeech))+"&excludePartOfSpeech=" + (excludePartOfSpeech==null? "" : System.Uri.EscapeDataString(excludePartOfSpeech))+"&minCorpusCount="+minCorpusCount+"&maxCorpusCount="+maxCorpusCount+"&minDictionaryCount="+minDictionaryCount+"&maxDictionaryCount="+maxDictionaryCount+"&minLength="+minLength+"&maxLength="+maxLength+"&skip="+skip+"&limit="+limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a specific WordOfTheDay
		/// GetWordOfTheDay words.json/wordOfTheDay
		/// </summary>
		/// <param name="date">Fetches by date in yyyy-MM-dd</param>
		/// <returns>No response was specified</returns>
		public async Task GetWordOfTheDayAsync(string date, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "words.json/wordOfTheDay?date=" + (date==null? "" : System.Uri.EscapeDataString(date));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum GetAudioUseCanonical
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="false")]
		_false = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="true")]
		_true = 1,
	}
	
	public enum GetDefinitionsPartOfSpeech
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		noun = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		adjective = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		verb = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		adverb = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		interjection = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pronoun = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		preposition = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		abbreviation = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		affix = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		article = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="auxiliary-verb")]
		auxiliaryMinusverb = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		conjunction = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="definite-article")]
		definiteMinusarticle = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="family-name")]
		familyMinusname = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="given-name")]
		givenMinusname = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		idiom = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		imperative = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="noun-plural")]
		nounMinusplural = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="noun-posessive")]
		nounMinusposessive = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="past-participle")]
		pastMinusparticiple = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="phrasal-prefix")]
		phrasalMinusprefix = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="proper-noun")]
		properMinusnoun = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="proper-noun-plural")]
		properMinusnounMinusplural = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="proper-noun-posessive")]
		properMinusnounMinusposessive = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		suffix = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="verb-intransitive")]
		verbMinusintransitive = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="verb-transitive")]
		verbMinustransitive = 26,
	}
	
	public enum GetDefinitionsUseCanonical
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="false")]
		_false = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="true")]
		_true = 1,
	}
	
	public enum GetDefinitionsIncludeTags
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="false")]
		_false = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="true")]
		_true = 1,
	}
	
	public enum GetEtymologiesUseCanonical
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="false")]
		_false = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="true")]
		_true = 1,
	}
	
	public enum GetExamplesIncludeDuplicates
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="false")]
		_false = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="true")]
		_true = 1,
	}
	
	public enum GetExamplesUseCanonical
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="false")]
		_false = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="true")]
		_true = 1,
	}
	
	public enum GetWordFrequencyUseCanonical
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="false")]
		_false = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="true")]
		_true = 1,
	}
	
	public enum GetHyphenationUseCanonical
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="false")]
		_false = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="true")]
		_true = 1,
	}
	
	public enum GetHyphenationSourceDictionary
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ahd-5")]
		ahdMinus5 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		century = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		wiktionary = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		webster = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		wordnet = 4,
	}
	
	public enum GetPhrasesUseCanonical
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="false")]
		_false = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="true")]
		_true = 1,
	}
	
	public enum GetTextPronunciationsUseCanonical
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="false")]
		_false = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="true")]
		_true = 1,
	}
	
	public enum GetTextPronunciationsSourceDictionary
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ahd-5")]
		ahdMinus5 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		century = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		cmu = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		macmillan = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		wiktionary = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		webster = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		wordnet = 6,
	}
	
	public enum GetTextPronunciationsTypeFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ahd-5")]
		ahdMinus5 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		arpabet = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="gcide-diacritical")]
		gcideMinusdiacritical = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IPA = 3,
	}
	
	public enum GetRelatedWordsUseCanonical
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="false")]
		_false = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="true")]
		_true = 1,
	}
	
	public enum GetRelatedWordsRelationshipTypes
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		synonym = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		antonym = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		variant = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		equivalent = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cross-reference")]
		crossMinusreference = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="related-word")]
		relatedMinusword = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		rhyme = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		form = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="etymologically-related-term")]
		etymologicallyMinusrelatedMinusterm = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		hypernym = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		hyponym = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="inflected-form")]
		inflectedMinusform = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		primary = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="same-context")]
		sameMinuscontext = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="verb-form")]
		verbMinusform = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="verb-stem")]
		verbMinusstem = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		has_topic = 16,
	}
	
	public enum GetTopExampleUseCanonical
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="false")]
		_false = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="true")]
		_true = 1,
	}
	
	public enum GetRandomWordsSortBy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		alpha = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		count = 1,
	}
	
	public enum GetRandomWordsSortOrder
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		asc = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		desc = 1,
	}
	
	public enum ReverseDictionaryIncludeSourceDictionaries
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ahd-5")]
		ahdMinus5 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		century = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		cmu = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		macmillan = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		wiktionary = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		webster = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		wordnet = 6,
	}
	
	public enum ReverseDictionaryExcludeSourceDictionaries
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ahd-5")]
		ahdMinus5 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		century = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		cmu = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		macmillan = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		wiktionary = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		webster = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		wordnet = 6,
	}
	
	public enum ReverseDictionaryIncludeTags
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="false")]
		_false = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="true")]
		_true = 1,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
