//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Represents an Abi.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Abi
	{
		
		/// <summary>
		/// Alias for an abi.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alias")]
		public System.Nullable<AbiAlias> Alias { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AbiAlias
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNSPECIFIED_CPU_ARCHITECTURE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ARMEABI = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ARMEABI_V7A = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ARM64_V8A = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		X86 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		X86_64 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RISCV64 = 6,
	}
	
	/// <summary>
	/// Targeting based on Abi.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AbiTargeting
	{
		
		/// <summary>
		/// Targeting of other sibling directories that were in the Bundle. For main splits this is targeting of other main splits.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alternatives")]
		public Abi[] Alternatives { get; set; }
		
		/// <summary>
		/// Value of an abi.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Abi[] Value { get; set; }
	}
	
	/// <summary>
	/// Represents a targeting rule of the form: User never had {scope} before.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AcquisitionTargetingRule
	{
		
		/// <summary>
		/// Defines the scope of subscriptions which a targeting rule can match to target offers to users based on past or current entitlement.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scope")]
		public TargetingRuleScope Scope { get; set; }
	}
	
	/// <summary>
	/// Defines the scope of subscriptions which a targeting rule can match to target offers to users based on past or current entitlement.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TargetingRuleScope
	{
		
		/// <summary>
		/// The scope of the current targeting rule is the subscription with the specified subscription ID. Must be a subscription within the same parent app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="specificSubscriptionInApp")]
		public string SpecificSubscriptionInApp { get; set; }
	}
	
	/// <summary>
	/// Request message for ActivateBasePlan.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ActivateBasePlanRequest
	{
		
		/// <summary>
		/// Required. The unique base plan ID of the base plan to activate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="basePlanId")]
		public string BasePlanId { get; set; }
		
		/// <summary>
		/// Optional. The latency tolerance for the propagation of this product update. Defaults to latency-sensitive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="latencyTolerance")]
		public System.Nullable<ActivateBasePlanRequestLatencyTolerance> LatencyTolerance { get; set; }
		
		/// <summary>
		/// Required. The parent app (package name) of the base plan to activate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="packageName")]
		public string PackageName { get; set; }
		
		/// <summary>
		/// Required. The parent subscription (ID) of the base plan to activate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productId")]
		public string ProductId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ActivateBasePlanRequestLatencyTolerance
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRODUCT_UPDATE_LATENCY_TOLERANCE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRODUCT_UPDATE_LATENCY_TOLERANCE_LATENCY_SENSITIVE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRODUCT_UPDATE_LATENCY_TOLERANCE_LATENCY_TOLERANT = 2,
	}
	
	/// <summary>
	/// Request message for ActivateSubscriptionOffer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ActivateSubscriptionOfferRequest
	{
		
		/// <summary>
		/// Required. The parent base plan (ID) of the offer to activate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="basePlanId")]
		public string BasePlanId { get; set; }
		
		/// <summary>
		/// Optional. The latency tolerance for the propagation of this product update. Defaults to latency-sensitive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="latencyTolerance")]
		public ActivateBasePlanRequestLatencyTolerance LatencyTolerance { get; set; }
		
		/// <summary>
		/// Required. The unique offer ID of the offer to activate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offerId")]
		public string OfferId { get; set; }
		
		/// <summary>
		/// Required. The parent app (package name) of the offer to activate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="packageName")]
		public string PackageName { get; set; }
		
		/// <summary>
		/// Required. The parent subscription (ID) of the offer to activate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productId")]
		public string ProductId { get; set; }
	}
	
	/// <summary>
	/// Request message for AddTargeting.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AddTargetingRequest
	{
		
		/// <summary>
		/// Update type for targeting. Note it is always a subset Targeting.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetingUpdate")]
		public TargetingUpdate TargetingUpdate { get; set; }
	}
	
	/// <summary>
	/// Update type for targeting. Note it is always a subset Targeting.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TargetingUpdate
	{
		
		/// <summary>
		/// Object representation to describe all set of users.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allUsers")]
		public AllUsers AllUsers { get; set; }
		
		/// <summary>
		/// Android api level targeting data for app recovery action targeting.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="androidSdks")]
		public AndroidSdks AndroidSdks { get; set; }
		
		/// <summary>
		/// Region targeting data for app recovery action targeting.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="regions")]
		public Regions Regions { get; set; }
	}
	
	/// <summary>
	/// Object representation to describe all set of users.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AllUsers
	{
		
		/// <summary>
		/// Required. Set to true if all set of users are needed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isAllUsersRequested")]
		public System.Nullable<System.Boolean> IsAllUsersRequested { get; set; }
	}
	
	/// <summary>
	/// Android api level targeting data for app recovery action targeting.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AndroidSdks
	{
		
		/// <summary>
		/// Android api levels of devices targeted by recovery action. See https://developer.android.com/guide/topics/manifest/uses-sdk-element#ApiLevels for different api levels in android.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sdkLevels")]
		public string[] SdkLevels { get; set; }
	}
	
	/// <summary>
	/// Region targeting data for app recovery action targeting.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Regions
	{
		
		/// <summary>
		/// Regions targeted by the recovery action. Region codes are ISO 3166 Alpha-2 country codes. For example, US stands for United States of America. See https://www.iso.org/iso-3166-country-codes.html for the complete list of country codes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="regionCode")]
		public string[] RegionCode { get; set; }
	}
	
	/// <summary>
	/// Response message for AddTargeting.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AddTargetingResponse
	{
	}
	
	/// <summary>
	/// Information about an APK. The resource for ApksService.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Apk
	{
		
		/// <summary>
		/// Represents the binary payload of an APK.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="binary")]
		public ApkBinary Binary { get; set; }
		
		/// <summary>
		/// The version code of the APK, as specified in the manifest file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="versionCode")]
		public System.Nullable<System.Int32> VersionCode { get; set; }
	}
	
	/// <summary>
	/// Represents the binary payload of an APK.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApkBinary
	{
		
		/// <summary>
		/// A sha1 hash of the APK payload, encoded as a hex string and matching the output of the sha1sum command.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sha1")]
		public string Sha1 { get; set; }
		
		/// <summary>
		/// A sha256 hash of the APK payload, encoded as a hex string and matching the output of the sha256sum command.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sha256")]
		public string Sha256 { get; set; }
	}
	
	/// <summary>
	/// Description of the created apks.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApkDescription
	{
		
		/// <summary>
		/// Holds data specific to Split APKs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="assetSliceMetadata")]
		public SplitApkMetadata AssetSliceMetadata { get; set; }
		
		/// <summary>
		/// Holds data specific to Split APKs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="instantApkMetadata")]
		public SplitApkMetadata InstantApkMetadata { get; set; }
		
		/// <summary>
		/// Path of the Apk, will be in the following format: .apk where DownloadId is the ID used to download the apk using GeneratedApks.Download API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="path")]
		public string Path { get; set; }
		
		/// <summary>
		/// Holds data specific to Split APKs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="splitApkMetadata")]
		public SplitApkMetadata SplitApkMetadata { get; set; }
		
		/// <summary>
		/// Holds data specific to Standalone APKs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="standaloneApkMetadata")]
		public StandaloneApkMetadata StandaloneApkMetadata { get; set; }
		
		/// <summary>
		/// Represents a set of apk-level targetings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targeting")]
		public ApkTargeting Targeting { get; set; }
	}
	
	/// <summary>
	/// Holds data specific to Split APKs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SplitApkMetadata
	{
		
		/// <summary>
		/// Indicates whether this APK is the main split of the module.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isMasterSplit")]
		public System.Nullable<System.Boolean> IsMasterSplit { get; set; }
		
		/// <summary>
		/// Id of the split.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="splitId")]
		public string SplitId { get; set; }
	}
	
	/// <summary>
	/// Holds data specific to Standalone APKs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StandaloneApkMetadata
	{
		
		/// <summary>
		/// Names of the modules fused in this standalone APK.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fusedModuleName")]
		public string[] FusedModuleName { get; set; }
	}
	
	/// <summary>
	/// Represents a set of apk-level targetings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApkTargeting
	{
		
		/// <summary>
		/// Targeting based on Abi.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="abiTargeting")]
		public AbiTargeting AbiTargeting { get; set; }
		
		/// <summary>
		/// Targeting based on language.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="languageTargeting")]
		public LanguageTargeting LanguageTargeting { get; set; }
		
		/// <summary>
		/// Targeting based on multiple abis.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="multiAbiTargeting")]
		public MultiAbiTargeting MultiAbiTargeting { get; set; }
		
		/// <summary>
		/// Targeting based on screen density.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="screenDensityTargeting")]
		public ScreenDensityTargeting ScreenDensityTargeting { get; set; }
		
		/// <summary>
		/// Targeting based on sdk version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sdkVersionTargeting")]
		public SdkVersionTargeting SdkVersionTargeting { get; set; }
		
		/// <summary>
		/// Targeting by a texture compression format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="textureCompressionFormatTargeting")]
		public TextureCompressionFormatTargeting TextureCompressionFormatTargeting { get; set; }
	}
	
	/// <summary>
	/// Targeting based on language.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LanguageTargeting
	{
		
		/// <summary>
		/// Alternative languages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alternatives")]
		public string[] Alternatives { get; set; }
		
		/// <summary>
		/// ISO-639: 2 or 3 letter language code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string[] Value { get; set; }
	}
	
	/// <summary>
	/// Targeting based on multiple abis.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MultiAbiTargeting
	{
		
		/// <summary>
		/// Targeting of other sibling directories that were in the Bundle. For main splits this is targeting of other main splits.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alternatives")]
		public MultiAbi[] Alternatives { get; set; }
		
		/// <summary>
		/// Value of a multi abi.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public MultiAbi[] Value { get; set; }
	}
	
	/// <summary>
	/// Represents a list of apis.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MultiAbi
	{
		
		/// <summary>
		/// A list of targeted ABIs, as represented by the Android Platform
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="abi")]
		public Abi[] Abi { get; set; }
	}
	
	/// <summary>
	/// Targeting based on screen density.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ScreenDensityTargeting
	{
		
		/// <summary>
		/// Targeting of other sibling directories that were in the Bundle. For main splits this is targeting of other main splits.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alternatives")]
		public ScreenDensity[] Alternatives { get; set; }
		
		/// <summary>
		/// Value of a screen density.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public ScreenDensity[] Value { get; set; }
	}
	
	/// <summary>
	/// Represents a screen density.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ScreenDensity
	{
		
		/// <summary>
		/// Alias for a screen density.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="densityAlias")]
		public System.Nullable<ScreenDensityDensityAlias> DensityAlias { get; set; }
		
		/// <summary>
		/// Value for density dpi.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="densityDpi")]
		public System.Nullable<System.Int32> DensityDpi { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ScreenDensityDensityAlias
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DENSITY_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NODPI = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LDPI = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MDPI = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TVDPI = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HDPI = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		XHDPI = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		XXHDPI = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		XXXHDPI = 8,
	}
	
	/// <summary>
	/// Targeting based on sdk version.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SdkVersionTargeting
	{
		
		/// <summary>
		/// Targeting of other sibling directories that were in the Bundle. For main splits this is targeting of other main splits.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alternatives")]
		public SdkVersion[] Alternatives { get; set; }
		
		/// <summary>
		/// Value of an sdk version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public SdkVersion[] Value { get; set; }
	}
	
	/// <summary>
	/// Represents an sdk version.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SdkVersion
	{
		
		/// <summary>
		/// Inclusive minimum value of an sdk version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="min")]
		public System.Nullable<System.Int32> Min { get; set; }
	}
	
	/// <summary>
	/// Targeting by a texture compression format.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TextureCompressionFormatTargeting
	{
		
		/// <summary>
		/// List of alternative TCFs (TCFs targeted by the sibling splits).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alternatives")]
		public TextureCompressionFormat[] Alternatives { get; set; }
		
		/// <summary>
		/// The list of targeted TCFs. Should not be empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public TextureCompressionFormat[] Value { get; set; }
	}
	
	/// <summary>
	/// Represents texture compression format.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TextureCompressionFormat
	{
		
		/// <summary>
		/// Alias for texture compression format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alias")]
		public System.Nullable<TextureCompressionFormatAlias> Alias { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum TextureCompressionFormatAlias
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNSPECIFIED_TEXTURE_COMPRESSION_FORMAT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ETC1_RGB8 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PALETTED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		THREE_DC = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ATC = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LATC = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DXT1 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		S3TC = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PVRTC = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASTC = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ETC2 = 10,
	}
	
	/// <summary>
	/// A set of apks representing a module.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApkSet
	{
		
		/// <summary>
		/// Description of the generated apks.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apkDescription")]
		public ApkDescription[] ApkDescription { get; set; }
		
		/// <summary>
		/// Metadata of a module.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="moduleMetadata")]
		public ModuleMetadata ModuleMetadata { get; set; }
	}
	
	/// <summary>
	/// Metadata of a module.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ModuleMetadata
	{
		
		/// <summary>
		/// Indicates the delivery type (e.g. on-demand) of the module.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deliveryType")]
		public System.Nullable<ModuleMetadataDeliveryType> DeliveryType { get; set; }
		
		/// <summary>
		/// Names of the modules that this module directly depends on. Each module implicitly depends on the base module.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dependencies")]
		public string[] Dependencies { get; set; }
		
		/// <summary>
		/// Indicates the type of this feature module.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="moduleType")]
		public System.Nullable<ModuleMetadataModuleType> ModuleType { get; set; }
		
		/// <summary>
		/// Module name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Targeting on the module level.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targeting")]
		public ModuleTargeting Targeting { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ModuleMetadataDeliveryType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN_DELIVERY_TYPE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSTALL_TIME = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ON_DEMAND = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAST_FOLLOW = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ModuleMetadataModuleType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN_MODULE_TYPE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEATURE_MODULE = 1,
	}
	
	/// <summary>
	/// Targeting on the module level.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ModuleTargeting
	{
		
		/// <summary>
		/// Targeting for device features.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceFeatureTargeting")]
		public DeviceFeatureTargeting[] DeviceFeatureTargeting { get; set; }
		
		/// <summary>
		/// Targeting based on sdk version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sdkVersionTargeting")]
		public SdkVersionTargeting SdkVersionTargeting { get; set; }
		
		/// <summary>
		/// Describes an inclusive/exclusive list of country codes that module targets.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userCountriesTargeting")]
		public UserCountriesTargeting UserCountriesTargeting { get; set; }
	}
	
	/// <summary>
	/// Targeting for a device feature.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeviceFeatureTargeting
	{
		
		/// <summary>
		/// Represents a device feature.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requiredFeature")]
		public DeviceFeature RequiredFeature { get; set; }
	}
	
	/// <summary>
	/// Represents a device feature.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeviceFeature
	{
		
		/// <summary>
		/// Name of the feature.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="featureName")]
		public string FeatureName { get; set; }
		
		/// <summary>
		/// The feature version specified by android:glEsVersion or android:version in in the AndroidManifest.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="featureVersion")]
		public System.Nullable<System.Int32> FeatureVersion { get; set; }
	}
	
	/// <summary>
	/// Describes an inclusive/exclusive list of country codes that module targets.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UserCountriesTargeting
	{
		
		/// <summary>
		/// List of country codes in the two-letter CLDR territory format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="countryCodes")]
		public string[] CountryCodes { get; set; }
		
		/// <summary>
		/// Indicates if the list above is exclusive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exclude")]
		public System.Nullable<System.Boolean> Exclude { get; set; }
	}
	
	/// <summary>
	/// Request to create a new externally hosted APK.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApksAddExternallyHostedRequest
	{
		
		/// <summary>
		/// Defines an APK available for this application that is hosted externally and not uploaded to Google Play. This function is only available to organizations using Managed Play whose application is configured to restrict distribution to the organizations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="externallyHostedApk")]
		public ExternallyHostedApk ExternallyHostedApk { get; set; }
	}
	
	/// <summary>
	/// Defines an APK available for this application that is hosted externally and not uploaded to Google Play. This function is only available to organizations using Managed Play whose application is configured to restrict distribution to the organizations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ExternallyHostedApk
	{
		
		/// <summary>
		/// The application label.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="applicationLabel")]
		public string ApplicationLabel { get; set; }
		
		/// <summary>
		/// A certificate (or array of certificates if a certificate-chain is used) used to sign this APK, represented as a base64 encoded byte array.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="certificateBase64s")]
		public string[] CertificateBase64s { get; set; }
		
		/// <summary>
		/// The URL at which the APK is hosted. This must be an https URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="externallyHostedUrl")]
		public string ExternallyHostedUrl { get; set; }
		
		/// <summary>
		/// The sha1 checksum of this APK, represented as a base64 encoded byte array.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fileSha1Base64")]
		public string FileSha1Base64 { get; set; }
		
		/// <summary>
		/// The sha256 checksum of this APK, represented as a base64 encoded byte array.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fileSha256Base64")]
		public string FileSha256Base64 { get; set; }
		
		/// <summary>
		/// The file size in bytes of this APK.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fileSize")]
		public string FileSize { get; set; }
		
		/// <summary>
		/// The icon image from the APK, as a base64 encoded byte array.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="iconBase64")]
		public string IconBase64 { get; set; }
		
		/// <summary>
		/// The maximum SDK supported by this APK (optional).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maximumSdk")]
		public System.Nullable<System.Int32> MaximumSdk { get; set; }
		
		/// <summary>
		/// The minimum SDK targeted by this APK.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minimumSdk")]
		public System.Nullable<System.Int32> MinimumSdk { get; set; }
		
		/// <summary>
		/// The native code environments supported by this APK (optional).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nativeCodes")]
		public string[] NativeCodes { get; set; }
		
		/// <summary>
		/// The package name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="packageName")]
		public string PackageName { get; set; }
		
		/// <summary>
		/// The features required by this APK (optional).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="usesFeatures")]
		public string[] UsesFeatures { get; set; }
		
		/// <summary>
		/// The permissions requested by this APK.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="usesPermissions")]
		public UsesPermission[] UsesPermissions { get; set; }
		
		/// <summary>
		/// The version code of this APK.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="versionCode")]
		public System.Nullable<System.Int32> VersionCode { get; set; }
		
		/// <summary>
		/// The version name of this APK.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="versionName")]
		public string VersionName { get; set; }
	}
	
	/// <summary>
	/// A permission used by this APK.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UsesPermission
	{
		
		/// <summary>
		/// Optionally, the maximum SDK version for which the permission is required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxSdkVersion")]
		public System.Nullable<System.Int32> MaxSdkVersion { get; set; }
		
		/// <summary>
		/// The name of the permission requested.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Response for creating a new externally hosted APK.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApksAddExternallyHostedResponse
	{
		
		/// <summary>
		/// Defines an APK available for this application that is hosted externally and not uploaded to Google Play. This function is only available to organizations using Managed Play whose application is configured to restrict distribution to the organizations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="externallyHostedApk")]
		public ExternallyHostedApk ExternallyHostedApk { get; set; }
	}
	
	/// <summary>
	/// Response listing all APKs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApksListResponse
	{
		
		/// <summary>
		/// All APKs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apks")]
		public Apk[] Apks { get; set; }
		
		/// <summary>
		/// The kind of this response ("androidpublisher#apksListResponse").
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	/// <summary>
	/// The app details. The resource for DetailsService.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AppDetails
	{
		
		/// <summary>
		/// The user-visible support email for this app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contactEmail")]
		public string ContactEmail { get; set; }
		
		/// <summary>
		/// The user-visible support telephone number for this app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contactPhone")]
		public string ContactPhone { get; set; }
		
		/// <summary>
		/// The user-visible website for this app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contactWebsite")]
		public string ContactWebsite { get; set; }
		
		/// <summary>
		/// Default language code, in BCP 47 format (eg "en-US").
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultLanguage")]
		public string DefaultLanguage { get; set; }
	}
	
	/// <summary>
	/// An app edit. The resource for EditsService.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AppEdit
	{
		
		/// <summary>
		/// Output only. The time (as seconds since Epoch) at which the edit will expire and will be no longer valid for use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expiryTimeSeconds")]
		public string ExpiryTimeSeconds { get; set; }
		
		/// <summary>
		/// Output only. Identifier of the edit. Can be used in subsequent API calls.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	/// <summary>
	/// Information about an app recovery action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AppRecoveryAction
	{
		
		/// <summary>
		/// ID corresponding to the app recovery action.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appRecoveryId")]
		public string AppRecoveryId { get; set; }
		
		/// <summary>
		/// Timestamp of when the app recovery action is canceled by the developer. Only set if the recovery action has been canceled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cancelTime")]
		public string CancelTime { get; set; }
		
		/// <summary>
		/// Timestamp of when the app recovery action is created by the developer. It is always set after creation of the recovery action.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// Timestamp of when the app recovery action is deployed to the users. Only set if the recovery action has been deployed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deployTime")]
		public string DeployTime { get; set; }
		
		/// <summary>
		/// Timestamp of when the developer last updated recovery action. In case the action is cancelled, it corresponds to cancellation time. It is always set after creation of the recovery action.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastUpdateTime")]
		public string LastUpdateTime { get; set; }
		
		/// <summary>
		/// Data related to Remote In-App Update action such as recovered user count, affected user count etc.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="remoteInAppUpdateData")]
		public RemoteInAppUpdateData RemoteInAppUpdateData { get; set; }
		
		/// <summary>
		/// The status of the recovery action.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<AppRecoveryActionStatus> Status { get; set; }
		
		/// <summary>
		/// Targeting details for a recovery action such as regions, android sdk levels, app versions etc.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targeting")]
		public Targeting Targeting { get; set; }
	}
	
	/// <summary>
	/// Data related to Remote In-App Update action such as recovered user count, affected user count etc.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RemoteInAppUpdateData
	{
		
		/// <summary>
		/// Data related to the recovery action at bundle level.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="remoteAppUpdateDataPerBundle")]
		public RemoteInAppUpdateDataPerBundle[] RemoteAppUpdateDataPerBundle { get; set; }
	}
	
	/// <summary>
	/// Data related to the recovery action at bundle level.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RemoteInAppUpdateDataPerBundle
	{
		
		/// <summary>
		/// Total number of devices which have been rescued.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recoveredDeviceCount")]
		public string RecoveredDeviceCount { get; set; }
		
		/// <summary>
		/// Total number of devices affected by this recovery action associated with bundle of the app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalDeviceCount")]
		public string TotalDeviceCount { get; set; }
		
		/// <summary>
		/// Version Code corresponding to the target bundle.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="versionCode")]
		public string VersionCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AppRecoveryActionStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RECOVERY_STATUS_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RECOVERY_STATUS_ACTIVE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RECOVERY_STATUS_CANCELED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RECOVERY_STATUS_DRAFT = 3,
	}
	
	/// <summary>
	/// Targeting details for a recovery action such as regions, android sdk levels, app versions etc.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Targeting
	{
		
		/// <summary>
		/// Object representation to describe all set of users.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allUsers")]
		public AllUsers AllUsers { get; set; }
		
		/// <summary>
		/// Android api level targeting data for app recovery action targeting.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="androidSdks")]
		public AndroidSdks AndroidSdks { get; set; }
		
		/// <summary>
		/// Region targeting data for app recovery action targeting.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="regions")]
		public Regions Regions { get; set; }
		
		/// <summary>
		/// Data format for a list of app versions. Only one app version is supported for now.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="versionList")]
		public AppVersionList VersionList { get; set; }
		
		/// <summary>
		/// Data format for a continuous range of app versions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="versionRange")]
		public AppVersionRange VersionRange { get; set; }
	}
	
	/// <summary>
	/// Data format for a list of app versions. Only one app version is supported for now.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AppVersionList
	{
		
		/// <summary>
		/// List of app version codes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="versionCodes")]
		public string[] VersionCodes { get; set; }
	}
	
	/// <summary>
	/// Data format for a continuous range of app versions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AppVersionRange
	{
		
		/// <summary>
		/// Highest app version in the range, inclusive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="versionCodeEnd")]
		public string VersionCodeEnd { get; set; }
		
		/// <summary>
		/// Lowest app version in the range, inclusive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="versionCodeStart")]
		public string VersionCodeStart { get; set; }
	}
	
	/// <summary>
	/// Request message for ArchiveSubscription.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ArchiveSubscriptionRequest
	{
	}
	
	/// <summary>
	/// Metadata of an asset module.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AssetModuleMetadata
	{
		
		/// <summary>
		/// Indicates the delivery type for persistent install.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deliveryType")]
		public ModuleMetadataDeliveryType DeliveryType { get; set; }
		
		/// <summary>
		/// Module name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Set of asset slices belonging to a single asset module.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AssetSliceSet
	{
		
		/// <summary>
		/// Asset slices.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apkDescription")]
		public ApkDescription[] ApkDescription { get; set; }
		
		/// <summary>
		/// Metadata of an asset module.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="assetModuleMetadata")]
		public AssetModuleMetadata AssetModuleMetadata { get; set; }
	}
	
	/// <summary>
	/// Represents a base plan that automatically renews at the end of its subscription period.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AutoRenewingBasePlanType
	{
		
		/// <summary>
		/// Required. Subscription period, specified in ISO 8601 format. For a list of acceptable billing periods, refer to the help center.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="billingPeriodDuration")]
		public string BillingPeriodDuration { get; set; }
		
		/// <summary>
		/// Grace period of the subscription, specified in ISO 8601 format. Acceptable values are P0D (zero days), P3D (3 days), P7D (7 days), P14D (14 days), and P30D (30 days). If not specified, a default value will be used based on the recurring period duration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gracePeriodDuration")]
		public string GracePeriodDuration { get; set; }
		
		/// <summary>
		/// Whether the renewing base plan is backward compatible. The backward compatible base plan is returned by the Google Play Billing Library deprecated method querySkuDetailsAsync(). Only one renewing base plan can be marked as legacy compatible for a given subscription.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="legacyCompatible")]
		public System.Nullable<System.Boolean> LegacyCompatible { get; set; }
		
		/// <summary>
		/// Subscription offer id which is legacy compatible. The backward compatible subscription offer is returned by the Google Play Billing Library deprecated method querySkuDetailsAsync(). Only one subscription offer can be marked as legacy compatible for a given renewing base plan. To have no Subscription offer as legacy compatible set this field as empty string.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="legacyCompatibleSubscriptionOfferId")]
		public string LegacyCompatibleSubscriptionOfferId { get; set; }
		
		/// <summary>
		/// The proration mode for the base plan determines what happens when a user switches to this plan from another base plan. If unspecified, defaults to CHARGE_ON_NEXT_BILLING_DATE.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="prorationMode")]
		public System.Nullable<AutoRenewingBasePlanTypeProrationMode> ProrationMode { get; set; }
		
		/// <summary>
		/// Whether users should be able to resubscribe to this base plan in Google Play surfaces. Defaults to RESUBSCRIBE_STATE_ACTIVE if not specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resubscribeState")]
		public System.Nullable<AutoRenewingBasePlanTypeResubscribeState> ResubscribeState { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AutoRenewingBasePlanTypeProrationMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUBSCRIPTION_PRORATION_MODE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUBSCRIPTION_PRORATION_MODE_CHARGE_ON_NEXT_BILLING_DATE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUBSCRIPTION_PRORATION_MODE_CHARGE_FULL_PRICE_IMMEDIATELY = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AutoRenewingBasePlanTypeResubscribeState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESUBSCRIBE_STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESUBSCRIBE_STATE_ACTIVE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESUBSCRIBE_STATE_INACTIVE = 2,
	}
	
	/// <summary>
	/// Information related to an auto renewing plan.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AutoRenewingPlan
	{
		
		/// <summary>
		/// If the subscription is currently set to auto-renew, e.g. the user has not canceled the subscription
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoRenewEnabled")]
		public System.Nullable<System.Boolean> AutoRenewEnabled { get; set; }
		
		/// <summary>
		/// Price change related information of a subscription item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priceChangeDetails")]
		public SubscriptionItemPriceChangeDetails PriceChangeDetails { get; set; }
	}
	
	/// <summary>
	/// Price change related information of a subscription item.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SubscriptionItemPriceChangeDetails
	{
		
		/// <summary>
		/// The renewal time at which the price change will become effective for the user. This is subject to change(to a future time) due to cases where the renewal time shifts like pause. This field is only populated if the price change has not taken effect.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expectedNewPriceChargeTime")]
		public string ExpectedNewPriceChargeTime { get; set; }
		
		/// <summary>
		/// Represents an amount of money with its currency type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="newPrice")]
		public Money NewPrice { get; set; }
		
		/// <summary>
		/// Price change mode specifies how the subscription item price is changing.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priceChangeMode")]
		public System.Nullable<SubscriptionItemPriceChangeDetailsPriceChangeMode> PriceChangeMode { get; set; }
		
		/// <summary>
		/// State the price change is currently in.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priceChangeState")]
		public System.Nullable<SubscriptionItemPriceChangeDetailsPriceChangeState> PriceChangeState { get; set; }
	}
	
	/// <summary>
	/// Represents an amount of money with its currency type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Money
	{
		
		/// <summary>
		/// The three-letter currency code defined in ISO 4217.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currencyCode")]
		public string CurrencyCode { get; set; }
		
		/// <summary>
		/// Number of nano (10^-9) units of the amount. The value must be between -999,999,999 and +999,999,999 inclusive. If `units` is positive, `nanos` must be positive or zero. If `units` is zero, `nanos` can be positive, zero, or negative. If `units` is negative, `nanos` must be negative or zero. For example $-1.75 is represented as `units`=-1 and `nanos`=-750,000,000.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nanos")]
		public System.Nullable<System.Int32> Nanos { get; set; }
		
		/// <summary>
		/// The whole units of the amount. For example if `currencyCode` is `"USD"`, then 1 unit is one US dollar.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="units")]
		public string Units { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SubscriptionItemPriceChangeDetailsPriceChangeMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRICE_CHANGE_MODE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRICE_DECREASE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRICE_INCREASE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPT_OUT_PRICE_INCREASE = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SubscriptionItemPriceChangeDetailsPriceChangeState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRICE_CHANGE_STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OUTSTANDING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONFIRMED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPLIED = 3,
	}
	
	/// <summary>
	/// A single base plan for a subscription.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BasePlan
	{
		
		/// <summary>
		/// Represents a base plan that automatically renews at the end of its subscription period.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoRenewingBasePlanType")]
		public AutoRenewingBasePlanType AutoRenewingBasePlanType { get; set; }
		
		/// <summary>
		/// Required. Immutable. The unique identifier of this base plan. Must be unique within the subscription, and conform with RFC-1034. That is, this ID can only contain lower-case letters (a-z), numbers (0-9), and hyphens (-), and be at most 63 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="basePlanId")]
		public string BasePlanId { get; set; }
		
		/// <summary>
		/// List of up to 20 custom tags specified for this base plan, and returned to the app through the billing library. Subscription offers for this base plan will also receive these offer tags in the billing library.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offerTags")]
		public OfferTag[] OfferTags { get; set; }
		
		/// <summary>
		/// Pricing information for any new locations Play may launch in.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="otherRegionsConfig")]
		public OtherRegionsBasePlanConfig OtherRegionsConfig { get; set; }
		
		/// <summary>
		/// Represents a base plan that does not automatically renew at the end of the base plan, and must be manually renewed by the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="prepaidBasePlanType")]
		public PrepaidBasePlanType PrepaidBasePlanType { get; set; }
		
		/// <summary>
		/// Region-specific information for this base plan.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="regionalConfigs")]
		public RegionalBasePlanConfig[] RegionalConfigs { get; set; }
		
		/// <summary>
		/// Output only. The state of the base plan, i.e. whether it's active. Draft and inactive base plans can be activated or deleted. Active base plans can be made inactive. Inactive base plans can be canceled. This field cannot be changed by updating the resource. Use the dedicated endpoints instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<BasePlanState> State { get; set; }
	}
	
	/// <summary>
	/// Represents a custom tag specified for base plans and subscription offers.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OfferTag
	{
		
		/// <summary>
		/// Must conform with RFC-1034. That is, this string can only contain lower-case letters (a-z), numbers (0-9), and hyphens (-), and be at most 20 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tag")]
		public string Tag { get; set; }
	}
	
	/// <summary>
	/// Pricing information for any new locations Play may launch in.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OtherRegionsBasePlanConfig
	{
		
		/// <summary>
		/// Represents an amount of money with its currency type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eurPrice")]
		public Money EurPrice { get; set; }
		
		/// <summary>
		/// Whether the base plan is available for new subscribers in any new locations Play may launch in. If not specified, this will default to false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="newSubscriberAvailability")]
		public System.Nullable<System.Boolean> NewSubscriberAvailability { get; set; }
		
		/// <summary>
		/// Represents an amount of money with its currency type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="usdPrice")]
		public Money UsdPrice { get; set; }
	}
	
	/// <summary>
	/// Represents a base plan that does not automatically renew at the end of the base plan, and must be manually renewed by the user.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PrepaidBasePlanType
	{
		
		/// <summary>
		/// Required. Subscription period, specified in ISO 8601 format. For a list of acceptable billing periods, refer to the help center.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="billingPeriodDuration")]
		public string BillingPeriodDuration { get; set; }
		
		/// <summary>
		/// Whether users should be able to extend this prepaid base plan in Google Play surfaces. Defaults to TIME_EXTENSION_ACTIVE if not specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeExtension")]
		public System.Nullable<PrepaidBasePlanTypeTimeExtension> TimeExtension { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PrepaidBasePlanTypeTimeExtension
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIME_EXTENSION_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIME_EXTENSION_ACTIVE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIME_EXTENSION_INACTIVE = 2,
	}
	
	/// <summary>
	/// Configuration for a base plan specific to a region.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RegionalBasePlanConfig
	{
		
		/// <summary>
		/// Whether the base plan in the specified region is available for new subscribers. Existing subscribers will not have their subscription canceled if this value is set to false. If not specified, this will default to false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="newSubscriberAvailability")]
		public System.Nullable<System.Boolean> NewSubscriberAvailability { get; set; }
		
		/// <summary>
		/// Represents an amount of money with its currency type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="price")]
		public Money Price { get; set; }
		
		/// <summary>
		/// Required. Region code this configuration applies to, as defined by ISO 3166-2, e.g. "US".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="regionCode")]
		public string RegionCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BasePlanState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DRAFT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INACTIVE = 3,
	}
	
	/// <summary>
	/// Request message for BatchGetSubscriptionOffers endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchGetSubscriptionOffersRequest
	{
		
		/// <summary>
		/// Required. A list of update requests of up to 100 elements. All requests must update different subscriptions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requests")]
		public GetSubscriptionOfferRequest[] Requests { get; set; }
	}
	
	/// <summary>
	/// Request message for GetSubscriptionOffer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetSubscriptionOfferRequest
	{
		
		/// <summary>
		/// Required. The parent base plan (ID) of the offer to get.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="basePlanId")]
		public string BasePlanId { get; set; }
		
		/// <summary>
		/// Required. The unique offer ID of the offer to get.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offerId")]
		public string OfferId { get; set; }
		
		/// <summary>
		/// Required. The parent app (package name) of the offer to get.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="packageName")]
		public string PackageName { get; set; }
		
		/// <summary>
		/// Required. The parent subscription (ID) of the offer to get.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productId")]
		public string ProductId { get; set; }
	}
	
	/// <summary>
	/// Response message for BatchGetSubscriptionOffers endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchGetSubscriptionOffersResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="subscriptionOffers")]
		public SubscriptionOffer[] SubscriptionOffers { get; set; }
	}
	
	/// <summary>
	/// A single, temporary offer
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SubscriptionOffer
	{
		
		/// <summary>
		/// Required. Immutable. The ID of the base plan to which this offer is an extension.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="basePlanId")]
		public string BasePlanId { get; set; }
		
		/// <summary>
		/// Required. Immutable. Unique ID of this subscription offer. Must be unique within the base plan.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offerId")]
		public string OfferId { get; set; }
		
		/// <summary>
		/// List of up to 20 custom tags specified for this offer, and returned to the app through the billing library.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offerTags")]
		public OfferTag[] OfferTags { get; set; }
		
		/// <summary>
		/// Configuration for any new locations Play may launch in specified on a subscription offer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="otherRegionsConfig")]
		public OtherRegionsSubscriptionOfferConfig OtherRegionsConfig { get; set; }
		
		/// <summary>
		/// Required. Immutable. The package name of the app the parent subscription belongs to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="packageName")]
		public string PackageName { get; set; }
		
		/// <summary>
		/// Required. The phases of this subscription offer. Must contain at least one entry, and may contain at most five. Users will always receive all these phases in the specified order. Phases may not be added, removed, or reordered after initial creation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phases")]
		public SubscriptionOfferPhase[] Phases { get; set; }
		
		/// <summary>
		/// Required. Immutable. The ID of the parent subscription this offer belongs to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productId")]
		public string ProductId { get; set; }
		
		/// <summary>
		/// Required. The region-specific configuration of this offer. Must contain at least one entry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="regionalConfigs")]
		public RegionalSubscriptionOfferConfig[] RegionalConfigs { get; set; }
		
		/// <summary>
		/// Output only. The current state of this offer. Can be changed using Activate and Deactivate actions. NB: the base plan state supersedes this state, so an active offer may not be available if the base plan is not active.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public BasePlanState State { get; set; }
		
		/// <summary>
		/// Defines the rule a user needs to satisfy to receive this offer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targeting")]
		public SubscriptionOfferTargeting Targeting { get; set; }
	}
	
	/// <summary>
	/// Configuration for any new locations Play may launch in specified on a subscription offer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OtherRegionsSubscriptionOfferConfig
	{
		
		/// <summary>
		/// Whether the subscription offer in any new locations Play may launch in the future. If not specified, this will default to false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="otherRegionsNewSubscriberAvailability")]
		public System.Nullable<System.Boolean> OtherRegionsNewSubscriberAvailability { get; set; }
	}
	
	/// <summary>
	/// A single phase of a subscription offer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SubscriptionOfferPhase
	{
		
		/// <summary>
		/// Required. The duration of a single recurrence of this phase. Specified in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="duration")]
		public string Duration { get; set; }
		
		/// <summary>
		/// Configuration for any new locations Play may launch in for a single offer phase.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="otherRegionsConfig")]
		public OtherRegionsSubscriptionOfferPhaseConfig OtherRegionsConfig { get; set; }
		
		/// <summary>
		/// Required. The number of times this phase repeats. If this offer phase is not free, each recurrence charges the user the price of this offer phase.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recurrenceCount")]
		public System.Nullable<System.Int32> RecurrenceCount { get; set; }
		
		/// <summary>
		/// Required. The region-specific configuration of this offer phase. This list must contain exactly one entry for each region for which the subscription offer has a regional config.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="regionalConfigs")]
		public RegionalSubscriptionOfferPhaseConfig[] RegionalConfigs { get; set; }
	}
	
	/// <summary>
	/// Configuration for any new locations Play may launch in for a single offer phase.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OtherRegionsSubscriptionOfferPhaseConfig
	{
		
		/// <summary>
		/// Pricing information for any new locations Play may launch in.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="absoluteDiscounts")]
		public OtherRegionsSubscriptionOfferPhasePrices AbsoluteDiscounts { get; set; }
		
		/// <summary>
		/// Pricing information for any new locations Play may launch in.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="otherRegionsPrices")]
		public OtherRegionsSubscriptionOfferPhasePrices OtherRegionsPrices { get; set; }
		
		/// <summary>
		/// The fraction of the base plan price prorated over the phase duration that the user pays for this offer phase. For example, if the base plan price for this region is $12 for a period of 1 year, then a 50% discount for a phase of a duration of 3 months would correspond to a price of $1.50. The discount must be specified as a fraction strictly larger than 0 and strictly smaller than 1. The resulting price will be rounded to the nearest billable unit (e.g. cents for USD). The relative discount is considered invalid if the discounted price ends up being smaller than the minimum price allowed in any new locations Play may launch in.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="relativeDiscount")]
		public System.Nullable<System.Double> RelativeDiscount { get; set; }
	}
	
	/// <summary>
	/// Pricing information for any new locations Play may launch in.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OtherRegionsSubscriptionOfferPhasePrices
	{
		
		/// <summary>
		/// Represents an amount of money with its currency type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eurPrice")]
		public Money EurPrice { get; set; }
		
		/// <summary>
		/// Represents an amount of money with its currency type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="usdPrice")]
		public Money UsdPrice { get; set; }
	}
	
	/// <summary>
	/// Configuration for a single phase of a subscription offer in a single region.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RegionalSubscriptionOfferPhaseConfig
	{
		
		/// <summary>
		/// Represents an amount of money with its currency type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="absoluteDiscount")]
		public Money AbsoluteDiscount { get; set; }
		
		/// <summary>
		/// Represents an amount of money with its currency type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="price")]
		public Money Price { get; set; }
		
		/// <summary>
		/// Required. Immutable. The region to which this config applies.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="regionCode")]
		public string RegionCode { get; set; }
		
		/// <summary>
		/// The fraction of the base plan price prorated over the phase duration that the user pays for this offer phase. For example, if the base plan price for this region is $12 for a period of 1 year, then a 50% discount for a phase of a duration of 3 months would correspond to a price of $1.50. The discount must be specified as a fraction strictly larger than 0 and strictly smaller than 1. The resulting price will be rounded to the nearest billable unit (e.g. cents for USD). The relative discount is considered invalid if the discounted price ends up being smaller than the minimum price allowed in this region.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="relativeDiscount")]
		public System.Nullable<System.Double> RelativeDiscount { get; set; }
	}
	
	/// <summary>
	/// Configuration for a subscription offer in a single region.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RegionalSubscriptionOfferConfig
	{
		
		/// <summary>
		/// Whether the subscription offer in the specified region is available for new subscribers. Existing subscribers will not have their subscription cancelled if this value is set to false. If not specified, this will default to false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="newSubscriberAvailability")]
		public System.Nullable<System.Boolean> NewSubscriberAvailability { get; set; }
		
		/// <summary>
		/// Required. Immutable. Region code this configuration applies to, as defined by ISO 3166-2, e.g. "US".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="regionCode")]
		public string RegionCode { get; set; }
	}
	
	/// <summary>
	/// Defines the rule a user needs to satisfy to receive this offer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SubscriptionOfferTargeting
	{
		
		/// <summary>
		/// Represents a targeting rule of the form: User never had {scope} before.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="acquisitionRule")]
		public AcquisitionTargetingRule AcquisitionRule { get; set; }
		
		/// <summary>
		/// Represents a targeting rule of the form: User currently has {scope} [with billing period {billing_period}].
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="upgradeRule")]
		public UpgradeTargetingRule UpgradeRule { get; set; }
	}
	
	/// <summary>
	/// Represents a targeting rule of the form: User currently has {scope} [with billing period {billing_period}].
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpgradeTargetingRule
	{
		
		/// <summary>
		/// The specific billing period duration, specified in ISO 8601 format, that a user must be currently subscribed to to be eligible for this rule. If not specified, users subscribed to any billing period are matched.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="billingPeriodDuration")]
		public string BillingPeriodDuration { get; set; }
		
		/// <summary>
		/// Limit this offer to only once per user. If set to true, a user can never be eligible for this offer again if they ever subscribed to this offer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oncePerUser")]
		public System.Nullable<System.Boolean> OncePerUser { get; set; }
		
		/// <summary>
		/// Defines the scope of subscriptions which a targeting rule can match to target offers to users based on past or current entitlement.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scope")]
		public TargetingRuleScope Scope { get; set; }
	}
	
	/// <summary>
	/// Response message for BatchGetSubscriptions endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchGetSubscriptionsResponse
	{
		
		/// <summary>
		/// The list of requested subscriptions, in the same order as the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subscriptions")]
		public Subscription[] Subscriptions { get; set; }
	}
	
	/// <summary>
	/// A single subscription for an app.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Subscription
	{
		
		/// <summary>
		/// Output only. Whether this subscription is archived. Archived subscriptions are not available to any subscriber any longer, cannot be updated, and are not returned in list requests unless the show archived flag is passed in.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="archived")]
		public System.Nullable<System.Boolean> Archived { get; set; }
		
		/// <summary>
		/// The set of base plans for this subscription. Represents the prices and duration of the subscription if no other offers apply.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="basePlans")]
		public BasePlan[] BasePlans { get; set; }
		
		/// <summary>
		/// Required. List of localized listings for this subscription. Must contain at least an entry for the default language of the parent app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="listings")]
		public SubscriptionListing[] Listings { get; set; }
		
		/// <summary>
		/// Immutable. Package name of the parent app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="packageName")]
		public string PackageName { get; set; }
		
		/// <summary>
		/// Immutable. Unique product ID of the product. Unique within the parent app. Product IDs must be composed of lower-case letters (a-z), numbers (0-9), underscores (_) and dots (.). It must start with a lower-case letter or number, and be between 1 and 40 (inclusive) characters in length.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productId")]
		public string ProductId { get; set; }
		
		/// <summary>
		/// Details about taxation, Google Play policy and legal compliance for subscription products.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taxAndComplianceSettings")]
		public SubscriptionTaxAndComplianceSettings TaxAndComplianceSettings { get; set; }
	}
	
	/// <summary>
	/// The consumer-visible metadata of a subscription.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SubscriptionListing
	{
		
		/// <summary>
		/// A list of benefits shown to the user on platforms such as the Play Store and in restoration flows in the language of this listing. Plain text. Ordered list of at most four benefits.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="benefits")]
		public string[] Benefits { get; set; }
		
		/// <summary>
		/// The description of this subscription in the language of this listing. Maximum length - 80 characters. Plain text.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required. The language of this listing, as defined by BCP-47, e.g. "en-US".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="languageCode")]
		public string LanguageCode { get; set; }
		
		/// <summary>
		/// Required. The title of this subscription in the language of this listing. Plain text.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	/// <summary>
	/// Details about taxation, Google Play policy and legal compliance for subscription products.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SubscriptionTaxAndComplianceSettings
	{
		
		/// <summary>
		/// Digital content or service classification for products distributed to users in the European Economic Area (EEA). The withdrawal regime under EEA consumer laws depends on this classification. Refer to the [Help Center article](https://support.google.com/googleplay/android-developer/answer/10463498) for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eeaWithdrawalRightType")]
		public System.Nullable<SubscriptionTaxAndComplianceSettingsEeaWithdrawalRightType> EeaWithdrawalRightType { get; set; }
		
		/// <summary>
		/// Whether this subscription is declared as a product representing a tokenized digital asset.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isTokenizedDigitalAsset")]
		public System.Nullable<System.Boolean> IsTokenizedDigitalAsset { get; set; }
		
		/// <summary>
		/// A mapping from region code to tax rate details. The keys are region codes as defined by Unicode's "CLDR".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taxRateInfoByRegionCode")]
		public System.Collections.Generic.Dictionary<string, RegionalTaxRateInfo> TaxRateInfoByRegionCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SubscriptionTaxAndComplianceSettingsEeaWithdrawalRightType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WITHDRAWAL_RIGHT_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WITHDRAWAL_RIGHT_DIGITAL_CONTENT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WITHDRAWAL_RIGHT_SERVICE = 2,
	}
	
	/// <summary>
	/// Specified details about taxation in a given geographical region.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RegionalTaxRateInfo
	{
		
		/// <summary>
		/// You must tell us if your app contains streaming products to correctly charge US state and local sales tax. Field only supported in United States.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eligibleForStreamingServiceTaxRate")]
		public System.Nullable<System.Boolean> EligibleForStreamingServiceTaxRate { get; set; }
		
		/// <summary>
		/// To collect communications or amusement taxes in the United States, choose the appropriate tax category. [Learn more](https://support.google.com/googleplay/android-developer/answer/10463498#streaming_tax).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="streamingTaxType")]
		public System.Nullable<RegionalTaxRateInfoStreamingTaxType> StreamingTaxType { get; set; }
		
		/// <summary>
		/// Tax tier to specify reduced tax rate. Developers who sell digital news, magazines, newspapers, books, or audiobooks in various regions may be eligible for reduced tax rates. [Learn more](https://support.google.com/googleplay/android-developer/answer/10463498).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taxTier")]
		public System.Nullable<RegionalTaxRateInfoTaxTier> TaxTier { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum RegionalTaxRateInfoStreamingTaxType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STREAMING_TAX_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STREAMING_TAX_TYPE_TELCO_VIDEO_RENTAL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STREAMING_TAX_TYPE_TELCO_VIDEO_SALES = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STREAMING_TAX_TYPE_TELCO_VIDEO_MULTI_CHANNEL = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STREAMING_TAX_TYPE_TELCO_AUDIO_RENTAL = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STREAMING_TAX_TYPE_TELCO_AUDIO_SALES = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STREAMING_TAX_TYPE_TELCO_AUDIO_MULTI_CHANNEL = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum RegionalTaxRateInfoTaxTier
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TAX_TIER_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TAX_TIER_BOOKS_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TAX_TIER_NEWS_1 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TAX_TIER_NEWS_2 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TAX_TIER_MUSIC_OR_AUDIO_1 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TAX_TIER_LIVE_OR_BROADCAST_1 = 5,
	}
	
	/// <summary>
	/// Request message for BatchMigrateBasePlanPrices.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchMigrateBasePlanPricesRequest
	{
		
		/// <summary>
		/// Required. Up to 100 price migration requests. All requests must update different base plans.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requests")]
		public MigrateBasePlanPricesRequest[] Requests { get; set; }
	}
	
	/// <summary>
	/// Request message for MigrateBasePlanPrices.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MigrateBasePlanPricesRequest
	{
		
		/// <summary>
		/// Required. The unique base plan ID of the base plan to update prices on.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="basePlanId")]
		public string BasePlanId { get; set; }
		
		/// <summary>
		/// Optional. The latency tolerance for the propagation of this product update. Defaults to latency-sensitive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="latencyTolerance")]
		public ActivateBasePlanRequestLatencyTolerance LatencyTolerance { get; set; }
		
		/// <summary>
		/// Required. Package name of the parent app. Must be equal to the package_name field on the Subscription resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="packageName")]
		public string PackageName { get; set; }
		
		/// <summary>
		/// Required. The ID of the subscription to update. Must be equal to the product_id field on the Subscription resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productId")]
		public string ProductId { get; set; }
		
		/// <summary>
		/// Required. The regional prices to update.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="regionalPriceMigrations")]
		public RegionalPriceMigrationConfig[] RegionalPriceMigrations { get; set; }
		
		/// <summary>
		/// The version of the available regions being used for the specified resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="regionsVersion")]
		public RegionsVersion RegionsVersion { get; set; }
	}
	
	/// <summary>
	/// Configuration for a price migration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RegionalPriceMigrationConfig
	{
		
		/// <summary>
		/// Required. The cutoff time for historical prices that subscribers can remain paying. Subscribers on prices which were available at this cutoff time or later will stay on their existing price. Subscribers on older prices will be migrated to the currently-offered price. The migrated subscribers will receive a notification that they will be paying a different price. Subscribers who do not agree to the new price will have their subscription ended at the next renewal.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oldestAllowedPriceVersionTime")]
		public string OldestAllowedPriceVersionTime { get; set; }
		
		/// <summary>
		/// Optional. The behavior the caller wants users to see when there is a price increase during migration. If left unset, the behavior defaults to PRICE_INCREASE_TYPE_OPT_IN. Note that the first opt-out price increase migration for each app must be initiated in Play Console.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priceIncreaseType")]
		public System.Nullable<RegionalPriceMigrationConfigPriceIncreaseType> PriceIncreaseType { get; set; }
		
		/// <summary>
		/// Required. Region code this configuration applies to, as defined by ISO 3166-2, e.g. "US".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="regionCode")]
		public string RegionCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum RegionalPriceMigrationConfigPriceIncreaseType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRICE_INCREASE_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRICE_INCREASE_TYPE_OPT_IN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRICE_INCREASE_TYPE_OPT_OUT = 2,
	}
	
	/// <summary>
	/// The version of the available regions being used for the specified resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RegionsVersion
	{
		
		/// <summary>
		/// Required. A string representing the version of available regions being used for the specified resource. Regional prices for the resource have to be specified according to the information published in [this article](https://support.google.com/googleplay/android-developer/answer/10532353). Each time the supported locations substantially change, the version will be incremented. Using this field will ensure that creating and updating the resource with an older region's version and set of regional prices and currencies will succeed even though a new version is available. The latest version is 2022/02.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	/// <summary>
	/// Response message for BatchMigrateBasePlanPrices.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchMigrateBasePlanPricesResponse
	{
		
		/// <summary>
		/// Contains one response per requested price migration, in the same order as the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="responses")]
		public MigrateBasePlanPricesResponse[] Responses { get; set; }
	}
	
	/// <summary>
	/// Response message for MigrateBasePlanPrices.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MigrateBasePlanPricesResponse
	{
	}
	
	/// <summary>
	/// Request message for BatchUpdateBasePlanStates.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchUpdateBasePlanStatesRequest
	{
		
		/// <summary>
		/// Required. The update request list of up to 100 elements. All requests must update different base plans.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requests")]
		public UpdateBasePlanStateRequest[] Requests { get; set; }
	}
	
	/// <summary>
	/// Request message to update the state of a subscription base plan.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateBasePlanStateRequest
	{
		
		/// <summary>
		/// Request message for ActivateBasePlan.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activateBasePlanRequest")]
		public ActivateBasePlanRequest ActivateBasePlanRequest { get; set; }
		
		/// <summary>
		/// Request message for DeactivateBasePlan.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deactivateBasePlanRequest")]
		public DeactivateBasePlanRequest DeactivateBasePlanRequest { get; set; }
	}
	
	/// <summary>
	/// Request message for DeactivateBasePlan.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeactivateBasePlanRequest
	{
		
		/// <summary>
		/// Required. The unique base plan ID of the base plan to deactivate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="basePlanId")]
		public string BasePlanId { get; set; }
		
		/// <summary>
		/// Optional. The latency tolerance for the propagation of this product update. Defaults to latency-sensitive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="latencyTolerance")]
		public ActivateBasePlanRequestLatencyTolerance LatencyTolerance { get; set; }
		
		/// <summary>
		/// Required. The parent app (package name) of the base plan to deactivate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="packageName")]
		public string PackageName { get; set; }
		
		/// <summary>
		/// Required. The parent subscription (ID) of the base plan to deactivate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productId")]
		public string ProductId { get; set; }
	}
	
	/// <summary>
	/// Response message for BatchUpdateBasePlanStates.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchUpdateBasePlanStatesResponse
	{
		
		/// <summary>
		/// The list of updated subscriptions. This list will match the requests one to one, in the same order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subscriptions")]
		public Subscription[] Subscriptions { get; set; }
	}
	
	/// <summary>
	/// Request message for BatchUpdateSubscriptionOfferStates.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchUpdateSubscriptionOfferStatesRequest
	{
		
		/// <summary>
		/// Required. The update request list of up to 100 elements. All requests must update different offers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requests")]
		public UpdateSubscriptionOfferStateRequest[] Requests { get; set; }
	}
	
	/// <summary>
	/// Request message to update the state of a subscription offer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateSubscriptionOfferStateRequest
	{
		
		/// <summary>
		/// Request message for ActivateSubscriptionOffer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activateSubscriptionOfferRequest")]
		public ActivateSubscriptionOfferRequest ActivateSubscriptionOfferRequest { get; set; }
		
		/// <summary>
		/// Request message for DeactivateSubscriptionOffer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deactivateSubscriptionOfferRequest")]
		public DeactivateSubscriptionOfferRequest DeactivateSubscriptionOfferRequest { get; set; }
	}
	
	/// <summary>
	/// Request message for DeactivateSubscriptionOffer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeactivateSubscriptionOfferRequest
	{
		
		/// <summary>
		/// Required. The parent base plan (ID) of the offer to deactivate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="basePlanId")]
		public string BasePlanId { get; set; }
		
		/// <summary>
		/// Optional. The latency tolerance for the propagation of this product update. Defaults to latency-sensitive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="latencyTolerance")]
		public ActivateBasePlanRequestLatencyTolerance LatencyTolerance { get; set; }
		
		/// <summary>
		/// Required. The unique offer ID of the offer to deactivate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offerId")]
		public string OfferId { get; set; }
		
		/// <summary>
		/// Required. The parent app (package name) of the offer to deactivate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="packageName")]
		public string PackageName { get; set; }
		
		/// <summary>
		/// Required. The parent subscription (ID) of the offer to deactivate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productId")]
		public string ProductId { get; set; }
	}
	
	/// <summary>
	/// Response message for BatchUpdateSubscriptionOfferStates.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchUpdateSubscriptionOfferStatesResponse
	{
		
		/// <summary>
		/// The updated subscription offers list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subscriptionOffers")]
		public SubscriptionOffer[] SubscriptionOffers { get; set; }
	}
	
	/// <summary>
	/// Request message for BatchUpdateSubscriptionOffers.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchUpdateSubscriptionOffersRequest
	{
		
		/// <summary>
		/// Required. A list of update requests of up to 100 elements. All requests must update different subscription offers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requests")]
		public UpdateSubscriptionOfferRequest[] Requests { get; set; }
	}
	
	/// <summary>
	/// Request message for UpdateSubscriptionOffer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateSubscriptionOfferRequest
	{
		
		/// <summary>
		/// Optional. If set to true, and the subscription offer with the given package_name, product_id, base_plan_id and offer_id doesn't exist, an offer will be created. If a new offer is created, update_mask is ignored.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowMissing")]
		public System.Nullable<System.Boolean> AllowMissing { get; set; }
		
		/// <summary>
		/// Optional. The latency tolerance for the propagation of this product update. Defaults to latency-sensitive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="latencyTolerance")]
		public ActivateBasePlanRequestLatencyTolerance LatencyTolerance { get; set; }
		
		/// <summary>
		/// The version of the available regions being used for the specified resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="regionsVersion")]
		public RegionsVersion RegionsVersion { get; set; }
		
		/// <summary>
		/// A single, temporary offer
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subscriptionOffer")]
		public SubscriptionOffer SubscriptionOffer { get; set; }
		
		/// <summary>
		/// Required. The list of fields to be updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateMask")]
		public string UpdateMask { get; set; }
	}
	
	/// <summary>
	/// Response message for BatchUpdateSubscriptionOffers.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchUpdateSubscriptionOffersResponse
	{
		
		/// <summary>
		/// The updated subscription offers list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subscriptionOffers")]
		public SubscriptionOffer[] SubscriptionOffers { get; set; }
	}
	
	/// <summary>
	/// Request message for BatchUpdateSubscription.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchUpdateSubscriptionsRequest
	{
		
		/// <summary>
		/// Required. A list of update requests of up to 100 elements. All requests must update different subscriptions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requests")]
		public UpdateSubscriptionRequest[] Requests { get; set; }
	}
	
	/// <summary>
	/// Request message for UpdateSubscription.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateSubscriptionRequest
	{
		
		/// <summary>
		/// Optional. If set to true, and the subscription with the given package_name and product_id doesn't exist, the subscription will be created. If a new subscription is created, update_mask is ignored.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowMissing")]
		public System.Nullable<System.Boolean> AllowMissing { get; set; }
		
		/// <summary>
		/// Optional. The latency tolerance for the propagation of this product update. Defaults to latency-sensitive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="latencyTolerance")]
		public ActivateBasePlanRequestLatencyTolerance LatencyTolerance { get; set; }
		
		/// <summary>
		/// The version of the available regions being used for the specified resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="regionsVersion")]
		public RegionsVersion RegionsVersion { get; set; }
		
		/// <summary>
		/// A single subscription for an app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subscription")]
		public Subscription Subscription { get; set; }
		
		/// <summary>
		/// Required. The list of fields to be updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateMask")]
		public string UpdateMask { get; set; }
	}
	
	/// <summary>
	/// Response message for BatchUpdateSubscription.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchUpdateSubscriptionsResponse
	{
		
		/// <summary>
		/// The updated subscriptions list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subscriptions")]
		public Subscription[] Subscriptions { get; set; }
	}
	
	/// <summary>
	/// Information about an app bundle. The resource for BundlesService.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Bundle
	{
		
		/// <summary>
		/// A sha1 hash of the upload payload, encoded as a hex string and matching the output of the sha1sum command.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sha1")]
		public string Sha1 { get; set; }
		
		/// <summary>
		/// A sha256 hash of the upload payload, encoded as a hex string and matching the output of the sha256sum command.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sha256")]
		public string Sha256 { get; set; }
		
		/// <summary>
		/// The version code of the Android App Bundle, as specified in the Android App Bundle's base module APK manifest file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="versionCode")]
		public System.Nullable<System.Int32> VersionCode { get; set; }
	}
	
	/// <summary>
	/// Response listing all app bundles.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BundlesListResponse
	{
		
		/// <summary>
		/// All app bundles.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bundles")]
		public Bundle[] Bundles { get; set; }
		
		/// <summary>
		/// The kind of this response ("androidpublisher#bundlesListResponse").
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	/// <summary>
	/// Request message for CancelAppRecovery.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CancelAppRecoveryRequest
	{
	}
	
	/// <summary>
	/// Response message for CancelAppRecovery.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CancelAppRecoveryResponse
	{
	}
	
	/// <summary>
	/// Result of the cancel survey when the subscription was canceled by the user.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CancelSurveyResult
	{
		
		/// <summary>
		/// The reason the user selected in the cancel survey.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public System.Nullable<CancelSurveyResultReason> Reason { get; set; }
		
		/// <summary>
		/// Only set for CANCEL_SURVEY_REASON_OTHERS. This is the user's freeform response to the survey.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reasonUserInput")]
		public string ReasonUserInput { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CancelSurveyResultReason
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCEL_SURVEY_REASON_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCEL_SURVEY_REASON_NOT_ENOUGH_USAGE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCEL_SURVEY_REASON_TECHNICAL_ISSUES = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCEL_SURVEY_REASON_COST_RELATED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCEL_SURVEY_REASON_FOUND_BETTER_APP = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCEL_SURVEY_REASON_OTHERS = 5,
	}
	
	/// <summary>
	/// Information specific to a subscription in canceled state.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CanceledStateContext
	{
		
		/// <summary>
		/// Information specific to cancellations initiated by developers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="developerInitiatedCancellation")]
		public DeveloperInitiatedCancellation DeveloperInitiatedCancellation { get; set; }
		
		/// <summary>
		/// Information specific to cancellations caused by subscription replacement.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="replacementCancellation")]
		public ReplacementCancellation ReplacementCancellation { get; set; }
		
		/// <summary>
		/// Information specific to cancellations initiated by Google system.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="systemInitiatedCancellation")]
		public SystemInitiatedCancellation SystemInitiatedCancellation { get; set; }
		
		/// <summary>
		/// Information specific to cancellations initiated by users.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userInitiatedCancellation")]
		public UserInitiatedCancellation UserInitiatedCancellation { get; set; }
	}
	
	/// <summary>
	/// Information specific to cancellations initiated by developers.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeveloperInitiatedCancellation
	{
	}
	
	/// <summary>
	/// Information specific to cancellations caused by subscription replacement.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReplacementCancellation
	{
	}
	
	/// <summary>
	/// Information specific to cancellations initiated by Google system.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SystemInitiatedCancellation
	{
	}
	
	/// <summary>
	/// Information specific to cancellations initiated by users.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UserInitiatedCancellation
	{
		
		/// <summary>
		/// Result of the cancel survey when the subscription was canceled by the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cancelSurveyResult")]
		public CancelSurveyResult CancelSurveyResult { get; set; }
		
		/// <summary>
		/// The time at which the subscription was canceled by the user. The user might still have access to the subscription after this time. Use line_items.expiry_time to determine if a user still has access.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cancelTime")]
		public string CancelTime { get; set; }
	}
	
	/// <summary>
	/// An entry of conversation between user and developer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Comment
	{
		
		/// <summary>
		/// Developer entry from conversation between user and developer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="developerComment")]
		public DeveloperComment DeveloperComment { get; set; }
		
		/// <summary>
		/// User entry from conversation between user and developer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userComment")]
		public UserComment UserComment { get; set; }
	}
	
	/// <summary>
	/// Developer entry from conversation between user and developer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeveloperComment
	{
		
		/// <summary>
		/// A Timestamp represents a point in time independent of any time zone or local calendar, encoded as a count of seconds and fractions of seconds at nanosecond resolution. The count is relative to an epoch at UTC midnight on January 1, 1970.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastModified")]
		public Timestamp LastModified { get; set; }
		
		/// <summary>
		/// The content of the comment, i.e. reply body.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
	}
	
	/// <summary>
	/// A Timestamp represents a point in time independent of any time zone or local calendar, encoded as a count of seconds and fractions of seconds at nanosecond resolution. The count is relative to an epoch at UTC midnight on January 1, 1970.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Timestamp
	{
		
		/// <summary>
		/// Non-negative fractions of a second at nanosecond resolution. Must be from 0 to 999,999,999 inclusive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nanos")]
		public System.Nullable<System.Int32> Nanos { get; set; }
		
		/// <summary>
		/// Represents seconds of UTC time since Unix epoch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="seconds")]
		public string Seconds { get; set; }
	}
	
	/// <summary>
	/// User entry from conversation between user and developer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UserComment
	{
		
		/// <summary>
		/// Integer Android SDK version of the user's device at the time the review was written, e.g. 23 is Marshmallow. May be absent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="androidOsVersion")]
		public System.Nullable<System.Int32> AndroidOsVersion { get; set; }
		
		/// <summary>
		/// Integer version code of the app as installed at the time the review was written. May be absent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appVersionCode")]
		public System.Nullable<System.Int32> AppVersionCode { get; set; }
		
		/// <summary>
		/// String version name of the app as installed at the time the review was written. May be absent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appVersionName")]
		public string AppVersionName { get; set; }
		
		/// <summary>
		/// Codename for the reviewer's device, e.g. klte, flounder. May be absent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="device")]
		public string Device { get; set; }
		
		/// <summary>
		/// Characteristics of the user's device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceMetadata")]
		public DeviceMetadata DeviceMetadata { get; set; }
		
		/// <summary>
		/// A Timestamp represents a point in time independent of any time zone or local calendar, encoded as a count of seconds and fractions of seconds at nanosecond resolution. The count is relative to an epoch at UTC midnight on January 1, 1970.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastModified")]
		public Timestamp LastModified { get; set; }
		
		/// <summary>
		/// Untranslated text of the review, where the review was translated. If the review was not translated this is left blank.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originalText")]
		public string OriginalText { get; set; }
		
		/// <summary>
		/// Language code for the reviewer. This is taken from the device settings so is not guaranteed to match the language the review is written in. May be absent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reviewerLanguage")]
		public string ReviewerLanguage { get; set; }
		
		/// <summary>
		/// The star rating associated with the review, from 1 to 5.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="starRating")]
		public System.Nullable<System.Int32> StarRating { get; set; }
		
		/// <summary>
		/// The content of the comment, i.e. review body. In some cases users have been able to write a review with separate title and body; in those cases the title and body are concatenated and separated by a tab character.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
		
		/// <summary>
		/// Number of users who have given this review a thumbs down.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thumbsDownCount")]
		public System.Nullable<System.Int32> ThumbsDownCount { get; set; }
		
		/// <summary>
		/// Number of users who have given this review a thumbs up.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thumbsUpCount")]
		public System.Nullable<System.Int32> ThumbsUpCount { get; set; }
	}
	
	/// <summary>
	/// Characteristics of the user's device.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeviceMetadata
	{
		
		/// <summary>
		/// Device CPU make, e.g. "Qualcomm"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cpuMake")]
		public string CpuMake { get; set; }
		
		/// <summary>
		/// Device CPU model, e.g. "MSM8974"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cpuModel")]
		public string CpuModel { get; set; }
		
		/// <summary>
		/// Device class (e.g. tablet)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceClass")]
		public string DeviceClass { get; set; }
		
		/// <summary>
		/// OpenGL version
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="glEsVersion")]
		public System.Nullable<System.Int32> GlEsVersion { get; set; }
		
		/// <summary>
		/// Device manufacturer (e.g. Motorola)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="manufacturer")]
		public string Manufacturer { get; set; }
		
		/// <summary>
		/// Comma separated list of native platforms (e.g. "arm", "arm7")
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nativePlatform")]
		public string NativePlatform { get; set; }
		
		/// <summary>
		/// Device model name (e.g. Droid)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productName")]
		public string ProductName { get; set; }
		
		/// <summary>
		/// Device RAM in Megabytes, e.g. "2048"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ramMb")]
		public System.Nullable<System.Int32> RamMb { get; set; }
		
		/// <summary>
		/// Screen density in DPI
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="screenDensityDpi")]
		public System.Nullable<System.Int32> ScreenDensityDpi { get; set; }
		
		/// <summary>
		/// Screen height in pixels
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="screenHeightPx")]
		public System.Nullable<System.Int32> ScreenHeightPx { get; set; }
		
		/// <summary>
		/// Screen width in pixels
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="screenWidthPx")]
		public System.Nullable<System.Int32> ScreenWidthPx { get; set; }
	}
	
	/// <summary>
	/// Request message for ConvertRegionPrices.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConvertRegionPricesRequest
	{
		
		/// <summary>
		/// Represents an amount of money with its currency type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="price")]
		public Money Price { get; set; }
	}
	
	/// <summary>
	/// Response message for ConvertRegionPrices.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConvertRegionPricesResponse
	{
		
		/// <summary>
		/// Converted other regions prices.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="convertedOtherRegionsPrice")]
		public ConvertedOtherRegionsPrice ConvertedOtherRegionsPrice { get; set; }
		
		/// <summary>
		/// Map from region code to converted region price.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="convertedRegionPrices")]
		public System.Collections.Generic.Dictionary<string, ConvertedRegionPrice> ConvertedRegionPrices { get; set; }
	}
	
	/// <summary>
	/// Converted other regions prices.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConvertedOtherRegionsPrice
	{
		
		/// <summary>
		/// Represents an amount of money with its currency type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eurPrice")]
		public Money EurPrice { get; set; }
		
		/// <summary>
		/// Represents an amount of money with its currency type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="usdPrice")]
		public Money UsdPrice { get; set; }
	}
	
	/// <summary>
	/// A converted region price.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConvertedRegionPrice
	{
		
		/// <summary>
		/// Represents an amount of money with its currency type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="price")]
		public Money Price { get; set; }
		
		/// <summary>
		/// The region code of the region.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="regionCode")]
		public string RegionCode { get; set; }
		
		/// <summary>
		/// Represents an amount of money with its currency type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taxAmount")]
		public Money TaxAmount { get; set; }
	}
	
	/// <summary>
	/// Country targeting specification.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CountryTargeting
	{
		
		/// <summary>
		/// Countries to target, specified as two letter [CLDR codes](https://unicode.org/cldr/charts/latest/supplemental/territory_containment_un_m_49.html).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="countries")]
		public string[] Countries { get; set; }
		
		/// <summary>
		/// Include "rest of world" as well as explicitly targeted countries.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="includeRestOfWorld")]
		public System.Nullable<System.Boolean> IncludeRestOfWorld { get; set; }
	}
	
	/// <summary>
	/// Request message for CreateDraftAppRecovery.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateDraftAppRecoveryRequest
	{
		
		/// <summary>
		/// Object representation for Remote in-app update action type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="remoteInAppUpdate")]
		public RemoteInAppUpdate RemoteInAppUpdate { get; set; }
		
		/// <summary>
		/// Targeting details for a recovery action such as regions, android sdk levels, app versions etc.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targeting")]
		public Targeting Targeting { get; set; }
	}
	
	/// <summary>
	/// Object representation for Remote in-app update action type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RemoteInAppUpdate
	{
		
		/// <summary>
		/// Required. Set to true if Remote In-App Update action type is needed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isRemoteInAppUpdateRequested")]
		public System.Nullable<System.Boolean> IsRemoteInAppUpdateRequested { get; set; }
	}
	
	/// <summary>
	/// Information related to deferred item replacement.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeferredItemReplacement
	{
		
		/// <summary>
		/// The product_id going to replace the existing product_id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productId")]
		public string ProductId { get; set; }
	}
	
	/// <summary>
	/// Represents a deobfuscation file.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeobfuscationFile
	{
		
		/// <summary>
		/// The type of the deobfuscation file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="symbolType")]
		public System.Nullable<DeobfuscationFileSymbolType> SymbolType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DeobfuscationFileSymbolType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deobfuscationFileTypeUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		proguard = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		nativeCode = 2,
	}
	
	/// <summary>
	/// Responses for the upload.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeobfuscationFilesUploadResponse
	{
		
		/// <summary>
		/// Represents a deobfuscation file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deobfuscationFile")]
		public DeobfuscationFile DeobfuscationFile { get; set; }
	}
	
	/// <summary>
	/// Request message for DeployAppRecovery.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeployAppRecoveryRequest
	{
	}
	
	/// <summary>
	/// Response message for DeployAppRecovery.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeployAppRecoveryResponse
	{
	}
	
	/// <summary>
	/// A group of devices. A group is defined by a set of device selectors. A device belongs to the group if it matches any selector (logical OR).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeviceGroup
	{
		
		/// <summary>
		/// Device selectors for this group. A device matching any of the selectors is included in this group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceSelectors")]
		public DeviceSelector[] DeviceSelectors { get; set; }
		
		/// <summary>
		/// The name of the group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Selector for a device group. A selector consists of a set of conditions on the device that should all match (logical AND) to determine a device group eligibility. For instance, if a selector specifies RAM conditions, device model inclusion and device model exclusion, a device is considered to match if: device matches RAM conditions AND device matches one of the included device models AND device doesn't match excluded device models
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeviceSelector
	{
		
		/// <summary>
		/// Conditions about a device's RAM capabilities.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceRam")]
		public DeviceRam DeviceRam { get; set; }
		
		/// <summary>
		/// Device models excluded by this selector, even if they match all other conditions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="excludedDeviceIds")]
		public DeviceId[] ExcludedDeviceIds { get; set; }
		
		/// <summary>
		/// A device that has any of these system features is excluded by this selector, even if it matches all other conditions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="forbiddenSystemFeatures")]
		public SystemFeature[] ForbiddenSystemFeatures { get; set; }
		
		/// <summary>
		/// Device models included by this selector.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="includedDeviceIds")]
		public DeviceId[] IncludedDeviceIds { get; set; }
		
		/// <summary>
		/// A device needs to have all these system features to be included by the selector.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requiredSystemFeatures")]
		public SystemFeature[] RequiredSystemFeatures { get; set; }
	}
	
	/// <summary>
	/// Conditions about a device's RAM capabilities.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeviceRam
	{
		
		/// <summary>
		/// Maximum RAM in bytes (bound excluded).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxBytes")]
		public string MaxBytes { get; set; }
		
		/// <summary>
		/// Minimum RAM in bytes (bound included).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minBytes")]
		public string MinBytes { get; set; }
	}
	
	/// <summary>
	/// Identifier of a device.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeviceId
	{
		
		/// <summary>
		/// Value of Build.BRAND.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buildBrand")]
		public string BuildBrand { get; set; }
		
		/// <summary>
		/// Value of Build.DEVICE.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buildDevice")]
		public string BuildDevice { get; set; }
	}
	
	/// <summary>
	/// Representation of a system feature.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SystemFeature
	{
		
		/// <summary>
		/// The name of the feature.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// The device spec used to generate a system APK.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeviceSpec
	{
		
		/// <summary>
		/// Screen dpi.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="screenDensity")]
		public System.Nullable<System.UInt32> ScreenDensity { get; set; }
		
		/// <summary>
		/// Supported ABI architectures in the order of preference. The values should be the string as reported by the platform, e.g. "armeabi-v7a", "x86_64".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="supportedAbis")]
		public string[] SupportedAbis { get; set; }
		
		/// <summary>
		/// All installed locales represented as BCP-47 strings, e.g. "en-US".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="supportedLocales")]
		public string[] SupportedLocales { get; set; }
	}
	
	/// <summary>
	/// A single device tier. Devices matching any of the device groups in device_group_names are considered to match the tier.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeviceTier
	{
		
		/// <summary>
		/// Groups of devices included in this tier. These groups must be defined explicitly under device_groups in this configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceGroupNames")]
		public string[] DeviceGroupNames { get; set; }
		
		/// <summary>
		/// The priority level of the tier. Tiers are evaluated in descending order of level: the highest level tier has the highest priority. The highest tier matching a given device is selected for that device. You should use a contiguous range of levels for your tiers in a tier set; tier levels in a tier set must be unique. For instance, if your tier set has 4 tiers (including the global fallback), you should define tiers 1, 2 and 3 in this configuration. Note: tier 0 is implicitly defined as a global fallback and selected for devices that don't match any of the tiers explicitly defined here. You mustn't define level 0 explicitly in this configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="level")]
		public System.Nullable<System.Int32> Level { get; set; }
	}
	
	/// <summary>
	/// Configuration describing device targeting criteria for the content of an app.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeviceTierConfig
	{
		
		/// <summary>
		/// Definition of device groups for the app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceGroups")]
		public DeviceGroup[] DeviceGroups { get; set; }
		
		/// <summary>
		/// Output only. The device tier config ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceTierConfigId")]
		public string DeviceTierConfigId { get; set; }
		
		/// <summary>
		/// A set of device tiers. A tier set determines what variation of app content gets served to a specific device, for device-targeted content. You should assign a priority level to each tier, which determines the ordering by which they are evaluated by Play. See the documentation of DeviceTier.level for more details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceTierSet")]
		public DeviceTierSet DeviceTierSet { get; set; }
		
		/// <summary>
		/// Definition of user country sets for the app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userCountrySets")]
		public UserCountrySet[] UserCountrySets { get; set; }
	}
	
	/// <summary>
	/// A set of device tiers. A tier set determines what variation of app content gets served to a specific device, for device-targeted content. You should assign a priority level to each tier, which determines the ordering by which they are evaluated by Play. See the documentation of DeviceTier.level for more details.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeviceTierSet
	{
		
		/// <summary>
		/// Device tiers belonging to the set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceTiers")]
		public DeviceTier[] DeviceTiers { get; set; }
	}
	
	/// <summary>
	/// A set of user countries. A country set determines what variation of app content gets served to a specific location.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UserCountrySet
	{
		
		/// <summary>
		/// List of country codes representing countries. A Country code is represented in ISO 3166 alpha-2 format. For Example:- "IT" for Italy, "GE" for Georgia.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="countryCodes")]
		public string[] CountryCodes { get; set; }
		
		/// <summary>
		/// Country set name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// An expansion file. The resource for ExpansionFilesService.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ExpansionFile
	{
		
		/// <summary>
		/// If set, this field indicates that this APK has an expansion file uploaded to it: this APK does not reference another APK's expansion file. The field's value is the size of the uploaded expansion file in bytes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fileSize")]
		public string FileSize { get; set; }
		
		/// <summary>
		/// If set, this APK's expansion file references another APK's expansion file. The file_size field will not be set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="referencesVersion")]
		public System.Nullable<System.Int32> ReferencesVersion { get; set; }
	}
	
	/// <summary>
	/// Response for uploading an expansion file.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ExpansionFilesUploadResponse
	{
		
		/// <summary>
		/// An expansion file. The resource for ExpansionFilesService.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expansionFile")]
		public ExpansionFile ExpansionFile { get; set; }
	}
	
	/// <summary>
	/// User account identifier in the third-party service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ExternalAccountIdentifiers
	{
		
		/// <summary>
		/// User account identifier in the third-party service. Only present if account linking happened as part of the subscription purchase flow.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="externalAccountId")]
		public string ExternalAccountId { get; set; }
		
		/// <summary>
		/// An obfuscated version of the id that is uniquely associated with the user's account in your app. Present for the following purchases: * If account linking happened as part of the subscription purchase flow. * It was specified using https://developer.android.com/reference/com/android/billingclient/api/BillingFlowParams.Builder#setobfuscatedaccountid when the purchase was made.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="obfuscatedExternalAccountId")]
		public string ObfuscatedExternalAccountId { get; set; }
		
		/// <summary>
		/// An obfuscated version of the id that is uniquely associated with the user's profile in your app. Only present if specified using https://developer.android.com/reference/com/android/billingclient/api/BillingFlowParams.Builder#setobfuscatedprofileid when the purchase was made.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="obfuscatedExternalProfileId")]
		public string ObfuscatedExternalProfileId { get; set; }
	}
	
	/// <summary>
	/// Details of an external subscription.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ExternalSubscription
	{
		
		/// <summary>
		/// Required. The type of the external subscription.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subscriptionType")]
		public System.Nullable<ExternalSubscriptionSubscriptionType> SubscriptionType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ExternalSubscriptionSubscriptionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUBSCRIPTION_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RECURRING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PREPAID = 2,
	}
	
	/// <summary>
	/// The details of an external transaction.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ExternalTransaction
	{
		
		/// <summary>
		/// Output only. The time when this transaction was created. This is the time when Google was notified of the transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// Definition of a price, i.e. currency and units.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentPreTaxAmount")]
		public Price CurrentPreTaxAmount { get; set; }
		
		/// <summary>
		/// Definition of a price, i.e. currency and units.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentTaxAmount")]
		public Price CurrentTaxAmount { get; set; }
		
		/// <summary>
		/// Output only. The id of this transaction. All transaction ids under the same package name must be unique. Set when creating the external transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="externalTransactionId")]
		public string ExternalTransactionId { get; set; }
		
		/// <summary>
		/// Represents a one-time transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oneTimeTransaction")]
		public OneTimeExternalTransaction OneTimeTransaction { get; set; }
		
		/// <summary>
		/// Definition of a price, i.e. currency and units.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originalPreTaxAmount")]
		public Price OriginalPreTaxAmount { get; set; }
		
		/// <summary>
		/// Definition of a price, i.e. currency and units.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originalTaxAmount")]
		public Price OriginalTaxAmount { get; set; }
		
		/// <summary>
		/// Output only. The resource name of the external transaction. The package name of the application the inapp products were sold (for example, 'com.some.app').
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="packageName")]
		public string PackageName { get; set; }
		
		/// <summary>
		/// Represents a transaction that is part of a recurring series of payments. This can be a subscription or a one-time product with multiple payments (such as preorder).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recurringTransaction")]
		public RecurringExternalTransaction RecurringTransaction { get; set; }
		
		/// <summary>
		/// Represents a transaction performed using a test account. These transactions will not be charged by Google.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="testPurchase")]
		public ExternalTransactionTestPurchase TestPurchase { get; set; }
		
		/// <summary>
		/// Output only. The current state of the transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transactionState")]
		public System.Nullable<ExternalTransactionTransactionState> TransactionState { get; set; }
		
		/// <summary>
		/// Required. The time when the transaction was completed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transactionTime")]
		public string TransactionTime { get; set; }
		
		/// <summary>
		/// User's address for the external transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userTaxAddress")]
		public ExternalTransactionAddress UserTaxAddress { get; set; }
	}
	
	/// <summary>
	/// Definition of a price, i.e. currency and units.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Price
	{
		
		/// <summary>
		/// 3 letter Currency code, as defined by ISO 4217. See java/com/google/common/money/CurrencyCode.java
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public string Currency { get; set; }
		
		/// <summary>
		/// Price in 1/million of the currency base unit, represented as a string.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priceMicros")]
		public string PriceMicros { get; set; }
	}
	
	/// <summary>
	/// Represents a one-time transaction.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OneTimeExternalTransaction
	{
		
		/// <summary>
		/// Input only. Provided during the call to Create. Retrieved from the client when the alternative billing flow is launched.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="externalTransactionToken")]
		public string ExternalTransactionToken { get; set; }
	}
	
	/// <summary>
	/// Represents a transaction that is part of a recurring series of payments. This can be a subscription or a one-time product with multiple payments (such as preorder).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RecurringExternalTransaction
	{
		
		/// <summary>
		/// Details of an external subscription.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="externalSubscription")]
		public ExternalSubscription ExternalSubscription { get; set; }
		
		/// <summary>
		/// Input only. Provided during the call to Create. Retrieved from the client when the alternative billing flow is launched. Required only for the initial purchase.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="externalTransactionToken")]
		public string ExternalTransactionToken { get; set; }
		
		/// <summary>
		/// The external transaction id of the first transaction of this recurring series of transactions. For example, for a subscription this would be the transaction id of the first payment. Required when creating recurring external transactions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="initialExternalTransactionId")]
		public string InitialExternalTransactionId { get; set; }
		
		/// <summary>
		/// Input only. Provided during the call to Create. Must only be used when migrating a subscription from manual monthly reporting to automated reporting.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="migratedTransactionProgram")]
		public System.Nullable<RecurringExternalTransactionMigratedTransactionProgram> MigratedTransactionProgram { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum RecurringExternalTransactionMigratedTransactionProgram
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXTERNAL_TRANSACTION_PROGRAM_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USER_CHOICE_BILLING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALTERTNATIVE_BILLING_ONLY = 2,
	}
	
	/// <summary>
	/// Represents a transaction performed using a test account. These transactions will not be charged by Google.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ExternalTransactionTestPurchase
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ExternalTransactionTransactionState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TRANSACTION_STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TRANSACTION_REPORTED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TRANSACTION_CANCELED = 2,
	}
	
	/// <summary>
	/// User's address for the external transaction.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ExternalTransactionAddress
	{
		
		/// <summary>
		/// Optional. Top-level administrative subdivision of the country/region. Only required for transactions in India. Valid values are "ANDAMAN AND NICOBAR ISLANDS", "ANDHRA PRADESH", "ARUNACHAL PRADESH", "ASSAM", "BIHAR", "CHANDIGARH", "CHHATTISGARH", "DADRA AND NAGAR HAVELI", "DADRA AND NAGAR HAVELI AND DAMAN AND DIU", "DAMAN AND DIU", "DELHI", "GOA", "GUJARAT", "HARYANA", "HIMACHAL PRADESH", "JAMMU AND KASHMIR", "JHARKHAND", "KARNATAKA", "KERALA", "LADAKH", "LAKSHADWEEP", "MADHYA PRADESH", "MAHARASHTRA", "MANIPUR", "MEGHALAYA", "MIZORAM", "NAGALAND", "ODISHA", "PUDUCHERRY", "PUNJAB", "RAJASTHAN", "SIKKIM", "TAMIL NADU", "TELANGANA", "TRIPURA", "UTTAR PRADESH", "UTTARAKHAND", and "WEST BENGAL".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="administrativeArea")]
		public string AdministrativeArea { get; set; }
		
		/// <summary>
		/// Required. Two letter region code based on ISO-3166-1 Alpha-2 (UN region codes).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="regionCode")]
		public string RegionCode { get; set; }
	}
	
	/// <summary>
	/// A full refund of the remaining amount of a transaction.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FullRefund
	{
	}
	
	/// <summary>
	/// Response to list generated APKs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GeneratedApksListResponse
	{
		
		/// <summary>
		/// All generated APKs, grouped by the APK signing key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="generatedApks")]
		public GeneratedApksPerSigningKey[] GeneratedApks { get; set; }
	}
	
	/// <summary>
	/// Download metadata for split, standalone and universal APKs, as well as asset pack slices, signed with a given key.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GeneratedApksPerSigningKey
	{
		
		/// <summary>
		/// SHA256 hash of the APK signing public key certificate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="certificateSha256Hash")]
		public string CertificateSha256Hash { get; set; }
		
		/// <summary>
		/// List of asset pack slices which will be served for this app bundle, signed with a key corresponding to certificate_sha256_hash.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="generatedAssetPackSlices")]
		public GeneratedAssetPackSlice[] GeneratedAssetPackSlices { get; set; }
		
		/// <summary>
		/// Generated recovery apks for recovery actions signed with a key corresponding to certificate_sha256_hash. This includes all generated recovery APKs, also those in draft or cancelled state. This field is not set if no recovery actions were created for this signing key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="generatedRecoveryModules")]
		public GeneratedRecoveryApk[] GeneratedRecoveryModules { get; set; }
		
		/// <summary>
		/// List of generated split APKs, signed with a key corresponding to certificate_sha256_hash.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="generatedSplitApks")]
		public GeneratedSplitApk[] GeneratedSplitApks { get; set; }
		
		/// <summary>
		/// List of generated standalone APKs, signed with a key corresponding to certificate_sha256_hash.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="generatedStandaloneApks")]
		public GeneratedStandaloneApk[] GeneratedStandaloneApks { get; set; }
		
		/// <summary>
		/// Download metadata for a universal APK.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="generatedUniversalApk")]
		public GeneratedUniversalApk GeneratedUniversalApk { get; set; }
		
		/// <summary>
		/// Targeting information about the generated apks.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetingInfo")]
		public TargetingInfo TargetingInfo { get; set; }
	}
	
	/// <summary>
	/// Download metadata for an asset pack slice.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GeneratedAssetPackSlice
	{
		
		/// <summary>
		/// Download ID, which uniquely identifies the APK to download. Should be supplied to `generatedapks.download` method.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="downloadId")]
		public string DownloadId { get; set; }
		
		/// <summary>
		/// Name of the module that this asset slice belongs to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="moduleName")]
		public string ModuleName { get; set; }
		
		/// <summary>
		/// Asset slice ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sliceId")]
		public string SliceId { get; set; }
		
		/// <summary>
		/// Asset module version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	/// <summary>
	/// Download metadata for an app recovery module.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GeneratedRecoveryApk
	{
		
		/// <summary>
		/// Download ID, which uniquely identifies the APK to download. Should be supplied to `generatedapks.download` method.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="downloadId")]
		public string DownloadId { get; set; }
		
		/// <summary>
		/// Name of the module which recovery apk belongs to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="moduleName")]
		public string ModuleName { get; set; }
		
		/// <summary>
		/// ID of the recovery action.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recoveryId")]
		public string RecoveryId { get; set; }
		
		/// <summary>
		/// The status of the recovery action corresponding to the recovery apk.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recoveryStatus")]
		public AppRecoveryActionStatus RecoveryStatus { get; set; }
	}
	
	/// <summary>
	/// Download metadata for a split APK.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GeneratedSplitApk
	{
		
		/// <summary>
		/// Download ID, which uniquely identifies the APK to download. Should be supplied to `generatedapks.download` method.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="downloadId")]
		public string DownloadId { get; set; }
		
		/// <summary>
		/// Name of the module that this APK belongs to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="moduleName")]
		public string ModuleName { get; set; }
		
		/// <summary>
		/// Split ID. Empty for the main split of the base module.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="splitId")]
		public string SplitId { get; set; }
		
		/// <summary>
		/// ID of the generated variant.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="variantId")]
		public System.Nullable<System.Int32> VariantId { get; set; }
	}
	
	/// <summary>
	/// Download metadata for a standalone APK.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GeneratedStandaloneApk
	{
		
		/// <summary>
		/// Download ID, which uniquely identifies the APK to download. Should be supplied to `generatedapks.download` method.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="downloadId")]
		public string DownloadId { get; set; }
		
		/// <summary>
		/// ID of the generated variant.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="variantId")]
		public System.Nullable<System.Int32> VariantId { get; set; }
	}
	
	/// <summary>
	/// Download metadata for a universal APK.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GeneratedUniversalApk
	{
		
		/// <summary>
		/// Download ID, which uniquely identifies the APK to download. Should be supplied to `generatedapks.download` method.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="downloadId")]
		public string DownloadId { get; set; }
	}
	
	/// <summary>
	/// Targeting information about the generated apks.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TargetingInfo
	{
		
		/// <summary>
		/// List of created asset slices.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="assetSliceSet")]
		public AssetSliceSet[] AssetSliceSet { get; set; }
		
		/// <summary>
		/// The package name of this app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="packageName")]
		public string PackageName { get; set; }
		
		/// <summary>
		/// List of the created variants.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="variant")]
		public SplitApkVariant[] Variant { get; set; }
	}
	
	/// <summary>
	/// Variant is a group of APKs that covers a part of the device configuration space. APKs from multiple variants are never combined on one device.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SplitApkVariant
	{
		
		/// <summary>
		/// Set of APKs, one set per module.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apkSet")]
		public ApkSet[] ApkSet { get; set; }
		
		/// <summary>
		/// Targeting on the level of variants.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targeting")]
		public VariantTargeting Targeting { get; set; }
		
		/// <summary>
		/// Number of the variant, starting at 0 (unless overridden). A device will receive APKs from the first variant that matches the device configuration, with higher variant numbers having priority over lower variant numbers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="variantNumber")]
		public System.Nullable<System.Int32> VariantNumber { get; set; }
	}
	
	/// <summary>
	/// Targeting on the level of variants.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VariantTargeting
	{
		
		/// <summary>
		/// Targeting based on Abi.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="abiTargeting")]
		public AbiTargeting AbiTargeting { get; set; }
		
		/// <summary>
		/// Targeting based on multiple abis.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="multiAbiTargeting")]
		public MultiAbiTargeting MultiAbiTargeting { get; set; }
		
		/// <summary>
		/// Targeting based on screen density.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="screenDensityTargeting")]
		public ScreenDensityTargeting ScreenDensityTargeting { get; set; }
		
		/// <summary>
		/// Targeting based on sdk version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sdkVersionTargeting")]
		public SdkVersionTargeting SdkVersionTargeting { get; set; }
		
		/// <summary>
		/// Targeting by a texture compression format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="textureCompressionFormatTargeting")]
		public TextureCompressionFormatTargeting TextureCompressionFormatTargeting { get; set; }
	}
	
	/// <summary>
	/// An access grant resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Grant
	{
		
		/// <summary>
		/// The permissions granted to the user for this app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appLevelPermissions")]
		public string[] AppLevelPermissions { get; set; }
		
		/// <summary>
		/// Required. Resource name for this grant, following the pattern "developers/{developer}/users/{email}/grants/{package_name}". If this grant is for a draft app, the app ID will be used in this resource name instead of the package name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Immutable. The package name of the app. This will be empty for draft apps.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="packageName")]
		public string PackageName { get; set; }
	}
	
	/// <summary>
	/// An uploaded image. The resource for ImagesService.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Image
	{
		
		/// <summary>
		/// A unique id representing this image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// A sha1 hash of the image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sha1")]
		public string Sha1 { get; set; }
		
		/// <summary>
		/// A sha256 hash of the image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sha256")]
		public string Sha256 { get; set; }
		
		/// <summary>
		/// A URL that will serve a preview of the image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	/// <summary>
	/// Response for deleting all images.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ImagesDeleteAllResponse
	{
		
		/// <summary>
		/// The deleted images.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deleted")]
		public Image[] Deleted { get; set; }
	}
	
	/// <summary>
	/// Response listing all images.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ImagesListResponse
	{
		
		/// <summary>
		/// All listed Images.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="images")]
		public Image[] Images { get; set; }
	}
	
	/// <summary>
	/// Response for uploading an image.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ImagesUploadResponse
	{
		
		/// <summary>
		/// An uploaded image. The resource for ImagesService.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="image")]
		public Image Image { get; set; }
	}
	
	/// <summary>
	/// An in-app product. The resource for InappproductsService.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InAppProduct
	{
		
		/// <summary>
		/// Default language of the localized data, as defined by BCP-47. e.g. "en-US".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultLanguage")]
		public string DefaultLanguage { get; set; }
		
		/// <summary>
		/// Definition of a price, i.e. currency and units.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultPrice")]
		public Price DefaultPrice { get; set; }
		
		/// <summary>
		/// Grace period of the subscription, specified in ISO 8601 format. Allows developers to give their subscribers a grace period when the payment for the new recurrence period is declined. Acceptable values are P0D (zero days), P3D (three days), P7D (seven days), P14D (14 days), and P30D (30 days).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gracePeriod")]
		public string GracePeriod { get; set; }
		
		/// <summary>
		/// List of localized title and description data. Map key is the language of the localized data, as defined by BCP-47, e.g. "en-US".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="listings")]
		public System.Collections.Generic.Dictionary<string, InAppProductListing> Listings { get; set; }
		
		/// <summary>
		/// Details about taxation and legal compliance for managed products.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="managedProductTaxesAndComplianceSettings")]
		public ManagedProductTaxAndComplianceSettings ManagedProductTaxesAndComplianceSettings { get; set; }
		
		/// <summary>
		/// Package name of the parent app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="packageName")]
		public string PackageName { get; set; }
		
		/// <summary>
		/// Prices per buyer region. None of these can be zero, as in-app products are never free. Map key is region code, as defined by ISO 3166-2.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="prices")]
		public System.Collections.Generic.Dictionary<string, Price> Prices { get; set; }
		
		/// <summary>
		/// The type of the product, e.g. a recurring subscription.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="purchaseType")]
		public System.Nullable<InAppProductPurchaseType> PurchaseType { get; set; }
		
		/// <summary>
		/// Stock-keeping-unit (SKU) of the product, unique within an app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sku")]
		public string Sku { get; set; }
		
		/// <summary>
		/// The status of the product, e.g. whether it's active.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<InAppProductStatus> Status { get; set; }
		
		/// <summary>
		/// Subscription period, specified in ISO 8601 format. Acceptable values are P1W (one week), P1M (one month), P3M (three months), P6M (six months), and P1Y (one year).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subscriptionPeriod")]
		public string SubscriptionPeriod { get; set; }
		
		/// <summary>
		/// Details about taxation, Google Play policy and legal compliance for subscription products.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subscriptionTaxesAndComplianceSettings")]
		public SubscriptionTaxAndComplianceSettings SubscriptionTaxesAndComplianceSettings { get; set; }
		
		/// <summary>
		/// Trial period, specified in ISO 8601 format. Acceptable values are anything between P7D (seven days) and P999D (999 days).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trialPeriod")]
		public string TrialPeriod { get; set; }
	}
	
	/// <summary>
	/// Store listing of a single in-app product.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InAppProductListing
	{
		
		/// <summary>
		/// Localized entitlement benefits for a subscription.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="benefits")]
		public string[] Benefits { get; set; }
		
		/// <summary>
		/// Description for the store listing.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Title for the store listing.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	/// <summary>
	/// Details about taxation and legal compliance for managed products.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ManagedProductTaxAndComplianceSettings
	{
		
		/// <summary>
		/// Digital content or service classification for products distributed to users in the European Economic Area (EEA). The withdrawal regime under EEA consumer laws depends on this classification. Refer to the [Help Center article](https://support.google.com/googleplay/android-developer/answer/10463498) for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eeaWithdrawalRightType")]
		public SubscriptionTaxAndComplianceSettingsEeaWithdrawalRightType EeaWithdrawalRightType { get; set; }
		
		/// <summary>
		/// Whether this in-app product is declared as a product representing a tokenized digital asset.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isTokenizedDigitalAsset")]
		public System.Nullable<System.Boolean> IsTokenizedDigitalAsset { get; set; }
		
		/// <summary>
		/// A mapping from region code to tax rate details. The keys are region codes as defined by Unicode's "CLDR".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taxRateInfoByRegionCode")]
		public System.Collections.Generic.Dictionary<string, RegionalTaxRateInfo> TaxRateInfoByRegionCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum InAppProductPurchaseType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		purchaseTypeUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		managedUser = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		subscription = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum InAppProductStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		statusUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		active = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		inactive = 2,
	}
	
	/// <summary>
	/// Request to delete multiple in-app products.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InappproductsBatchDeleteRequest
	{
		
		/// <summary>
		/// Individual delete requests. At least one request is required. Can contain up to 100 requests. All requests must correspond to different in-app products.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requests")]
		public InappproductsDeleteRequest[] Requests { get; set; }
	}
	
	/// <summary>
	/// Request to delete an in-app product.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InappproductsDeleteRequest
	{
		
		/// <summary>
		/// Optional. The latency tolerance for the propagation of this product update. Defaults to latency-sensitive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="latencyTolerance")]
		public ActivateBasePlanRequestLatencyTolerance LatencyTolerance { get; set; }
		
		/// <summary>
		/// Package name of the app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="packageName")]
		public string PackageName { get; set; }
		
		/// <summary>
		/// Unique identifier for the in-app product.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sku")]
		public string Sku { get; set; }
	}
	
	/// <summary>
	/// Response message for BatchGetSubscriptions endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InappproductsBatchGetResponse
	{
		
		/// <summary>
		/// The list of requested in-app products, in the same order as the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inappproduct")]
		public InAppProduct[] Inappproduct { get; set; }
	}
	
	/// <summary>
	/// Request to update or insert one or more in-app products.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InappproductsBatchUpdateRequest
	{
		
		/// <summary>
		/// Required. Individual update requests. At least one request is required. Can contain up to 100 requests. All requests must correspond to different in-app products.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requests")]
		public InappproductsUpdateRequest[] Requests { get; set; }
	}
	
	/// <summary>
	/// Request to update an in-app product.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InappproductsUpdateRequest
	{
		
		/// <summary>
		/// If set to true, and the in-app product with the given package_name and sku doesn't exist, the in-app product will be created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowMissing")]
		public System.Nullable<System.Boolean> AllowMissing { get; set; }
		
		/// <summary>
		/// If true the prices for all regions targeted by the parent app that don't have a price specified for this in-app product will be auto converted to the target currency based on the default price. Defaults to false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoConvertMissingPrices")]
		public System.Nullable<System.Boolean> AutoConvertMissingPrices { get; set; }
		
		/// <summary>
		/// An in-app product. The resource for InappproductsService.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inappproduct")]
		public InAppProduct Inappproduct { get; set; }
		
		/// <summary>
		/// Optional. The latency tolerance for the propagation of this product update. Defaults to latency-sensitive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="latencyTolerance")]
		public ActivateBasePlanRequestLatencyTolerance LatencyTolerance { get; set; }
		
		/// <summary>
		/// Package name of the app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="packageName")]
		public string PackageName { get; set; }
		
		/// <summary>
		/// Unique identifier for the in-app product.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sku")]
		public string Sku { get; set; }
	}
	
	/// <summary>
	/// Response for a batch in-app product update.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InappproductsBatchUpdateResponse
	{
		
		/// <summary>
		/// The updated or inserted in-app products.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inappproducts")]
		public InAppProduct[] Inappproducts { get; set; }
	}
	
	/// <summary>
	/// Response listing all in-app products.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InappproductsListResponse
	{
		
		/// <summary>
		/// All in-app products.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inappproduct")]
		public InAppProduct[] Inappproduct { get; set; }
		
		/// <summary>
		/// The kind of this response ("androidpublisher#inappproductsListResponse").
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Information about the current page. List operations that supports paging return only one "page" of results. This protocol buffer message describes the page that has been returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pageInfo")]
		public PageInfo PageInfo { get; set; }
		
		/// <summary>
		/// Pagination information returned by a List operation when token pagination is enabled. List operations that supports paging return only one "page" of results. This protocol buffer message describes the page that has been returned. When using token pagination, clients should use the next/previous token to get another page of the result. The presence or absence of next/previous token indicates whether a next/previous page is available and provides a mean of accessing this page. ListRequest.page_token should be set to either next_page_token or previous_page_token to access another page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tokenPagination")]
		public TokenPagination TokenPagination { get; set; }
	}
	
	/// <summary>
	/// Information about the current page. List operations that supports paging return only one "page" of results. This protocol buffer message describes the page that has been returned.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PageInfo
	{
		
		/// <summary>
		/// Maximum number of results returned in one page. ! The number of results included in the API response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resultPerPage")]
		public System.Nullable<System.Int32> ResultPerPage { get; set; }
		
		/// <summary>
		/// Index of the first result returned in the current page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startIndex")]
		public System.Nullable<System.Int32> StartIndex { get; set; }
		
		/// <summary>
		/// Total number of results available on the backend ! The total number of results in the result set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalResults")]
		public System.Nullable<System.Int32> TotalResults { get; set; }
	}
	
	/// <summary>
	/// Pagination information returned by a List operation when token pagination is enabled. List operations that supports paging return only one "page" of results. This protocol buffer message describes the page that has been returned. When using token pagination, clients should use the next/previous token to get another page of the result. The presence or absence of next/previous token indicates whether a next/previous page is available and provides a mean of accessing this page. ListRequest.page_token should be set to either next_page_token or previous_page_token to access another page.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TokenPagination
	{
		
		/// <summary>
		/// Tokens to pass to the standard list field 'page_token'. Whenever available, tokens are preferred over manipulating start_index.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="previousPageToken")]
		public string PreviousPageToken { get; set; }
	}
	
	/// <summary>
	/// An artifact resource which gets created when uploading an APK or Android App Bundle through internal app sharing.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InternalAppSharingArtifact
	{
		
		/// <summary>
		/// The sha256 fingerprint of the certificate used to sign the generated artifact.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="certificateFingerprint")]
		public string CertificateFingerprint { get; set; }
		
		/// <summary>
		/// The download URL generated for the uploaded artifact. Users that are authorized to download can follow the link to the Play Store app to install it.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="downloadUrl")]
		public string DownloadUrl { get; set; }
		
		/// <summary>
		/// The sha256 hash of the artifact represented as a lowercase hexadecimal number, matching the output of the sha256sum command.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sha256")]
		public string Sha256 { get; set; }
	}
	
	/// <summary>
	/// Contains the introductory price information for a subscription.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IntroductoryPriceInfo
	{
		
		/// <summary>
		/// Introductory price of the subscription, not including tax. The currency is the same as price_currency_code. Price is expressed in micro-units, where 1,000,000 micro-units represents one unit of the currency. For example, if the subscription price is €1.99, price_amount_micros is 1990000.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="introductoryPriceAmountMicros")]
		public string IntroductoryPriceAmountMicros { get; set; }
		
		/// <summary>
		/// ISO 4217 currency code for the introductory subscription price. For example, if the price is specified in British pounds sterling, price_currency_code is "GBP".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="introductoryPriceCurrencyCode")]
		public string IntroductoryPriceCurrencyCode { get; set; }
		
		/// <summary>
		/// The number of billing period to offer introductory pricing.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="introductoryPriceCycles")]
		public System.Nullable<System.Int32> IntroductoryPriceCycles { get; set; }
		
		/// <summary>
		/// Introductory price period, specified in ISO 8601 format. Common values are (but not limited to) "P1W" (one week), "P1M" (one month), "P3M" (three months), "P6M" (six months), and "P1Y" (one year).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="introductoryPricePeriod")]
		public string IntroductoryPricePeriod { get; set; }
	}
	
	/// <summary>
	/// Response message for ListAppRecoveries. -- api-linter: core::0158::response-next-page-token-field=disabled
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListAppRecoveriesResponse
	{
		
		/// <summary>
		/// List of recovery actions associated with the requested package name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recoveryActions")]
		public AppRecoveryAction[] RecoveryActions { get; set; }
	}
	
	/// <summary>
	/// Response listing existing device tier configs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListDeviceTierConfigsResponse
	{
		
		/// <summary>
		/// Device tier configs created by the developer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceTierConfigs")]
		public DeviceTierConfig[] DeviceTierConfigs { get; set; }
		
		/// <summary>
		/// A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Response message for ListSubscriptionOffers.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListSubscriptionOffersResponse
	{
		
		/// <summary>
		/// A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// The subscription offers from the specified subscription.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subscriptionOffers")]
		public SubscriptionOffer[] SubscriptionOffers { get; set; }
	}
	
	/// <summary>
	/// Response message for ListSubscriptions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListSubscriptionsResponse
	{
		
		/// <summary>
		/// A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// The subscriptions from the specified app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subscriptions")]
		public Subscription[] Subscriptions { get; set; }
	}
	
	/// <summary>
	/// A response containing one or more users with access to an account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListUsersResponse
	{
		
		/// <summary>
		/// A token to pass to subsequent calls in order to retrieve subsequent results. This will not be set if there are no more results to return.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// The resulting users.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="users")]
		public User[] Users { get; set; }
	}
	
	/// <summary>
	/// A user resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class User
	{
		
		/// <summary>
		/// Output only. The state of the user's access to the Play Console.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accessState")]
		public System.Nullable<UserAccessState> AccessState { get; set; }
		
		/// <summary>
		/// Permissions for the user which apply across the developer account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="developerAccountPermissions")]
		public string[] DeveloperAccountPermissions { get; set; }
		
		/// <summary>
		/// Immutable. The user's email address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// The time at which the user's access expires, if set. When setting this value, it must always be in the future.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expirationTime")]
		public string ExpirationTime { get; set; }
		
		/// <summary>
		/// Output only. Per-app permissions for the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="grants")]
		public Grant[] Grants { get; set; }
		
		/// <summary>
		/// Required. Resource name for this user, following the pattern "developers/{developer}/users/{email}".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Output only. Whether there are more permissions for the user that are not represented here. This can happen if the caller does not have permission to manage all apps in the account. This is also `true` if this user is the account owner. If this field is `true`, it should be taken as a signal that this user cannot be fully managed via the API. That is, the API caller is not be able to manage all of the permissions this user holds, either because it doesn't know about them or because the user is the account owner.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="partial")]
		public System.Nullable<System.Boolean> Partial { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum UserAccessState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACCESS_STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVITED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVITATION_EXPIRED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACCESS_GRANTED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACCESS_EXPIRED = 4,
	}
	
	/// <summary>
	/// A localized store listing. The resource for ListingsService.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Listing
	{
		
		/// <summary>
		/// Full description of the app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fullDescription")]
		public string FullDescription { get; set; }
		
		/// <summary>
		/// Language localization code (a BCP-47 language tag; for example, "de-AT" for Austrian German).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="language")]
		public string Language { get; set; }
		
		/// <summary>
		/// Short description of the app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shortDescription")]
		public string ShortDescription { get; set; }
		
		/// <summary>
		/// Localized title of the app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// URL of a promotional YouTube video for the app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="video")]
		public string Video { get; set; }
	}
	
	/// <summary>
	/// Response listing all localized listings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListingsListResponse
	{
		
		/// <summary>
		/// The kind of this response ("androidpublisher#listingsListResponse").
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// All localized listings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="listings")]
		public Listing[] Listings { get; set; }
	}
	
	/// <summary>
	/// Localized text in given language.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LocalizedText
	{
		
		/// <summary>
		/// Language localization code (a BCP-47 language tag; for example, "de-AT" for Austrian German).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="language")]
		public string Language { get; set; }
		
		/// <summary>
		/// The text in the given language.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
	}
	
	/// <summary>
	/// Offer details information related to a purchase line item.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OfferDetails
	{
		
		/// <summary>
		/// The base plan ID. Present for all base plan and offers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="basePlanId")]
		public string BasePlanId { get; set; }
		
		/// <summary>
		/// The offer ID. Only present for discounted offers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offerId")]
		public string OfferId { get; set; }
		
		/// <summary>
		/// The latest offer tags associated with the offer. It includes tags inherited from the base plan.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offerTags")]
		public string[] OfferTags { get; set; }
	}
	
	/// <summary>
	/// A partial refund of a transaction.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PartialRefund
	{
		
		/// <summary>
		/// Required. A unique id distinguishing this partial refund. If the refund is successful, subsequent refunds with the same id will fail. Must be unique across refunds for one individual transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refundId")]
		public string RefundId { get; set; }
		
		/// <summary>
		/// Definition of a price, i.e. currency and units.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refundPreTaxAmount")]
		public Price RefundPreTaxAmount { get; set; }
	}
	
	/// <summary>
	/// Information specific to a subscription in paused state.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PausedStateContext
	{
		
		/// <summary>
		/// Time at which the subscription will be automatically resumed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoResumeTime")]
		public string AutoResumeTime { get; set; }
	}
	
	/// <summary>
	/// Information related to a prepaid plan.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PrepaidPlan
	{
		
		/// <summary>
		/// If present, this is the time after which top up purchases are allowed for the prepaid plan. Will not be present for expired prepaid plans.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowExtendAfterTime")]
		public string AllowExtendAfterTime { get; set; }
	}
	
	/// <summary>
	/// A ProductPurchase resource indicates the status of a user's inapp product purchase.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProductPurchase
	{
		
		/// <summary>
		/// The acknowledgement state of the inapp product. Possible values are: 0. Yet to be acknowledged 1. Acknowledged
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="acknowledgementState")]
		public System.Nullable<System.Int32> AcknowledgementState { get; set; }
		
		/// <summary>
		/// The consumption state of the inapp product. Possible values are: 0. Yet to be consumed 1. Consumed
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="consumptionState")]
		public System.Nullable<System.Int32> ConsumptionState { get; set; }
		
		/// <summary>
		/// A developer-specified string that contains supplemental information about an order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="developerPayload")]
		public string DeveloperPayload { get; set; }
		
		/// <summary>
		/// This kind represents an inappPurchase object in the androidpublisher service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// An obfuscated version of the id that is uniquely associated with the user's account in your app. Only present if specified using https://developer.android.com/reference/com/android/billingclient/api/BillingFlowParams.Builder#setobfuscatedaccountid when the purchase was made.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="obfuscatedExternalAccountId")]
		public string ObfuscatedExternalAccountId { get; set; }
		
		/// <summary>
		/// An obfuscated version of the id that is uniquely associated with the user's profile in your app. Only present if specified using https://developer.android.com/reference/com/android/billingclient/api/BillingFlowParams.Builder#setobfuscatedprofileid when the purchase was made.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="obfuscatedExternalProfileId")]
		public string ObfuscatedExternalProfileId { get; set; }
		
		/// <summary>
		/// The order id associated with the purchase of the inapp product.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orderId")]
		public string OrderId { get; set; }
		
		/// <summary>
		/// The inapp product SKU. May not be present.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productId")]
		public string ProductId { get; set; }
		
		/// <summary>
		/// The purchase state of the order. Possible values are: 0. Purchased 1. Canceled 2. Pending
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="purchaseState")]
		public System.Nullable<System.Int32> PurchaseState { get; set; }
		
		/// <summary>
		/// The time the product was purchased, in milliseconds since the epoch (Jan 1, 1970).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="purchaseTimeMillis")]
		public string PurchaseTimeMillis { get; set; }
		
		/// <summary>
		/// The purchase token generated to identify this purchase. May not be present.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="purchaseToken")]
		public string PurchaseToken { get; set; }
		
		/// <summary>
		/// The type of purchase of the inapp product. This field is only set if this purchase was not made using the standard in-app billing flow. Possible values are: 0. Test (i.e. purchased from a license testing account) 1. Promo (i.e. purchased using a promo code) 2. Rewarded (i.e. from watching a video ad instead of paying)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="purchaseType")]
		public System.Nullable<System.Int32> PurchaseType { get; set; }
		
		/// <summary>
		/// The quantity associated with the purchase of the inapp product. If not present, the quantity is 1.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public System.Nullable<System.Int32> Quantity { get; set; }
		
		/// <summary>
		/// ISO 3166-1 alpha-2 billing region code of the user at the time the product was granted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="regionCode")]
		public string RegionCode { get; set; }
	}
	
	/// <summary>
	/// Request for the product.purchases.acknowledge API.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProductPurchasesAcknowledgeRequest
	{
		
		/// <summary>
		/// Payload to attach to the purchase.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="developerPayload")]
		public string DeveloperPayload { get; set; }
	}
	
	/// <summary>
	/// A request to refund an existing external transaction.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RefundExternalTransactionRequest
	{
		
		/// <summary>
		/// A full refund of the remaining amount of a transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fullRefund")]
		public FullRefund FullRefund { get; set; }
		
		/// <summary>
		/// A partial refund of a transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="partialRefund")]
		public PartialRefund PartialRefund { get; set; }
		
		/// <summary>
		/// Required. The time that the transaction was refunded.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refundTime")]
		public string RefundTime { get; set; }
	}
	
	/// <summary>
	/// An Android app review.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Review
	{
		
		/// <summary>
		/// The name of the user who wrote the review.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authorName")]
		public string AuthorName { get; set; }
		
		/// <summary>
		/// A repeated field containing comments for the review.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="comments")]
		public Comment[] Comments { get; set; }
		
		/// <summary>
		/// Unique identifier for this review.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reviewId")]
		public string ReviewId { get; set; }
	}
	
	/// <summary>
	/// The result of replying/updating a reply to review.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReviewReplyResult
	{
		
		/// <summary>
		/// A Timestamp represents a point in time independent of any time zone or local calendar, encoded as a count of seconds and fractions of seconds at nanosecond resolution. The count is relative to an epoch at UTC midnight on January 1, 1970.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastEdited")]
		public Timestamp LastEdited { get; set; }
		
		/// <summary>
		/// The reply text that was applied.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="replyText")]
		public string ReplyText { get; set; }
	}
	
	/// <summary>
	/// Response listing reviews.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReviewsListResponse
	{
		
		/// <summary>
		/// Information about the current page. List operations that supports paging return only one "page" of results. This protocol buffer message describes the page that has been returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pageInfo")]
		public PageInfo PageInfo { get; set; }
		
		/// <summary>
		/// List of reviews.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reviews")]
		public Review[] Reviews { get; set; }
		
		/// <summary>
		/// Pagination information returned by a List operation when token pagination is enabled. List operations that supports paging return only one "page" of results. This protocol buffer message describes the page that has been returned. When using token pagination, clients should use the next/previous token to get another page of the result. The presence or absence of next/previous token indicates whether a next/previous page is available and provides a mean of accessing this page. ListRequest.page_token should be set to either next_page_token or previous_page_token to access another page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tokenPagination")]
		public TokenPagination TokenPagination { get; set; }
	}
	
	/// <summary>
	/// Request to reply to review or update existing reply.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReviewsReplyRequest
	{
		
		/// <summary>
		/// The text to set as the reply. Replies of more than approximately 350 characters will be rejected. HTML tags will be stripped.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="replyText")]
		public string ReplyText { get; set; }
	}
	
	/// <summary>
	/// Response on status of replying to a review.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReviewsReplyResponse
	{
		
		/// <summary>
		/// The result of replying/updating a reply to review.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="result")]
		public ReviewReplyResult Result { get; set; }
	}
	
	/// <summary>
	/// Revocation context of the purchases.subscriptionsv2.revoke API.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RevocationContext
	{
		
		/// <summary>
		/// Used to determine if the refund type in the RevocationContext is a prorated refund.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="proratedRefund")]
		public UNDEFINED_packageNameRevocationContextProratedRefund ProratedRefund { get; set; }
	}
	
	/// <summary>
	/// Used to determine if the refund type in the RevocationContext is a prorated refund.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UNDEFINED_packageNameRevocationContextProratedRefund
	{
	}
	
	/// <summary>
	/// Request for the purchases.subscriptionsv2.revoke API.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RevokeSubscriptionPurchaseRequest
	{
		
		/// <summary>
		/// Revocation context of the purchases.subscriptionsv2.revoke API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="revocationContext")]
		public RevocationContext RevocationContext { get; set; }
	}
	
	/// <summary>
	/// Response for the purchases.subscriptionsv2.revoke API.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RevokeSubscriptionPurchaseResponse
	{
	}
	
	/// <summary>
	/// Information associated with purchases made with 'Subscribe with Google'.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SubscribeWithGoogleInfo
	{
		
		/// <summary>
		/// The email address of the user when the subscription was purchased.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="emailAddress")]
		public string EmailAddress { get; set; }
		
		/// <summary>
		/// The family name of the user when the subscription was purchased.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="familyName")]
		public string FamilyName { get; set; }
		
		/// <summary>
		/// The given name of the user when the subscription was purchased.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="givenName")]
		public string GivenName { get; set; }
		
		/// <summary>
		/// The Google profile id of the user when the subscription was purchased.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="profileId")]
		public string ProfileId { get; set; }
		
		/// <summary>
		/// The profile name of the user when the subscription was purchased.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="profileName")]
		public string ProfileName { get; set; }
	}
	
	/// <summary>
	/// Information provided by the user when they complete the subscription cancellation flow (cancellation reason survey).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SubscriptionCancelSurveyResult
	{
		
		/// <summary>
		/// The cancellation reason the user chose in the survey. Possible values are: 0. Other 1. I don't use this service enough 2. Technical issues 3. Cost-related reasons 4. I found a better app
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cancelSurveyReason")]
		public System.Nullable<System.Int32> CancelSurveyReason { get; set; }
		
		/// <summary>
		/// The customized input cancel reason from the user. Only present when cancelReason is 0.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userInputCancelReason")]
		public string UserInputCancelReason { get; set; }
	}
	
	/// <summary>
	/// A SubscriptionDeferralInfo contains the data needed to defer a subscription purchase to a future expiry time.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SubscriptionDeferralInfo
	{
		
		/// <summary>
		/// The desired next expiry time to assign to the subscription, in milliseconds since the Epoch. The given time must be later/greater than the current expiry time for the subscription.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="desiredExpiryTimeMillis")]
		public string DesiredExpiryTimeMillis { get; set; }
		
		/// <summary>
		/// The expected expiry time for the subscription. If the current expiry time for the subscription is not the value specified here, the deferral will not occur.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expectedExpiryTimeMillis")]
		public string ExpectedExpiryTimeMillis { get; set; }
	}
	
	/// <summary>
	/// Contains the price change information for a subscription that can be used to control the user journey for the price change in the app. This can be in the form of seeking confirmation from the user or tailoring the experience for a successful conversion.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SubscriptionPriceChange
	{
		
		/// <summary>
		/// Definition of a price, i.e. currency and units.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="newPrice")]
		public Price NewPrice { get; set; }
		
		/// <summary>
		/// The current state of the price change. Possible values are: 0. Outstanding: State for a pending price change waiting for the user to agree. In this state, you can optionally seek confirmation from the user using the In-App API. 1. Accepted: State for an accepted price change that the subscription will renew with unless it's canceled. The price change takes effect on a future date when the subscription renews. Note that the change might not occur when the subscription is renewed next.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<System.Int32> State { get; set; }
	}
	
	/// <summary>
	/// A SubscriptionPurchase resource indicates the status of a user's subscription purchase.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SubscriptionPurchase
	{
		
		/// <summary>
		/// The acknowledgement state of the subscription product. Possible values are: 0. Yet to be acknowledged 1. Acknowledged
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="acknowledgementState")]
		public System.Nullable<System.Int32> AcknowledgementState { get; set; }
		
		/// <summary>
		/// Whether the subscription will automatically be renewed when it reaches its current expiry time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoRenewing")]
		public System.Nullable<System.Boolean> AutoRenewing { get; set; }
		
		/// <summary>
		/// Time at which the subscription will be automatically resumed, in milliseconds since the Epoch. Only present if the user has requested to pause the subscription.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoResumeTimeMillis")]
		public string AutoResumeTimeMillis { get; set; }
		
		/// <summary>
		/// The reason why a subscription was canceled or is not auto-renewing. Possible values are: 0. User canceled the subscription 1. Subscription was canceled by the system, for example because of a billing problem 2. Subscription was replaced with a new subscription 3. Subscription was canceled by the developer
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cancelReason")]
		public System.Nullable<System.Int32> CancelReason { get; set; }
		
		/// <summary>
		/// Information provided by the user when they complete the subscription cancellation flow (cancellation reason survey).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cancelSurveyResult")]
		public SubscriptionCancelSurveyResult CancelSurveyResult { get; set; }
		
		/// <summary>
		/// ISO 3166-1 alpha-2 billing country/region code of the user at the time the subscription was granted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="countryCode")]
		public string CountryCode { get; set; }
		
		/// <summary>
		/// A developer-specified string that contains supplemental information about an order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="developerPayload")]
		public string DeveloperPayload { get; set; }
		
		/// <summary>
		/// The email address of the user when the subscription was purchased. Only present for purchases made with 'Subscribe with Google'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="emailAddress")]
		public string EmailAddress { get; set; }
		
		/// <summary>
		/// Time at which the subscription will expire, in milliseconds since the Epoch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expiryTimeMillis")]
		public string ExpiryTimeMillis { get; set; }
		
		/// <summary>
		/// User account identifier in the third-party service. Only present if account linking happened as part of the subscription purchase flow.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="externalAccountId")]
		public string ExternalAccountId { get; set; }
		
		/// <summary>
		/// The family name of the user when the subscription was purchased. Only present for purchases made with 'Subscribe with Google'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="familyName")]
		public string FamilyName { get; set; }
		
		/// <summary>
		/// The given name of the user when the subscription was purchased. Only present for purchases made with 'Subscribe with Google'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="givenName")]
		public string GivenName { get; set; }
		
		/// <summary>
		/// Contains the introductory price information for a subscription.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="introductoryPriceInfo")]
		public IntroductoryPriceInfo IntroductoryPriceInfo { get; set; }
		
		/// <summary>
		/// This kind represents a subscriptionPurchase object in the androidpublisher service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// The purchase token of the originating purchase if this subscription is one of the following: 0. Re-signup of a canceled but non-lapsed subscription 1. Upgrade/downgrade from a previous subscription For example, suppose a user originally signs up and you receive purchase token X, then the user cancels and goes through the resignup flow (before their subscription lapses) and you receive purchase token Y, and finally the user upgrades their subscription and you receive purchase token Z. If you call this API with purchase token Z, this field will be set to Y. If you call this API with purchase token Y, this field will be set to X. If you call this API with purchase token X, this field will not be set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="linkedPurchaseToken")]
		public string LinkedPurchaseToken { get; set; }
		
		/// <summary>
		/// An obfuscated version of the id that is uniquely associated with the user's account in your app. Present for the following purchases: * If account linking happened as part of the subscription purchase flow. * It was specified using https://developer.android.com/reference/com/android/billingclient/api/BillingFlowParams.Builder#setobfuscatedaccountid when the purchase was made.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="obfuscatedExternalAccountId")]
		public string ObfuscatedExternalAccountId { get; set; }
		
		/// <summary>
		/// An obfuscated version of the id that is uniquely associated with the user's profile in your app. Only present if specified using https://developer.android.com/reference/com/android/billingclient/api/BillingFlowParams.Builder#setobfuscatedprofileid when the purchase was made.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="obfuscatedExternalProfileId")]
		public string ObfuscatedExternalProfileId { get; set; }
		
		/// <summary>
		/// The order id of the latest recurring order associated with the purchase of the subscription. If the subscription was canceled because payment was declined, this will be the order id from the payment declined order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orderId")]
		public string OrderId { get; set; }
		
		/// <summary>
		/// The payment state of the subscription. Possible values are: 0. Payment pending 1. Payment received 2. Free trial 3. Pending deferred upgrade/downgrade Not present for canceled, expired subscriptions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paymentState")]
		public System.Nullable<System.Int32> PaymentState { get; set; }
		
		/// <summary>
		/// Price of the subscription, For tax exclusive countries, the price doesn't include tax. For tax inclusive countries, the price includes tax. Price is expressed in micro-units, where 1,000,000 micro-units represents one unit of the currency. For example, if the subscription price is €1.99, price_amount_micros is 1990000.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priceAmountMicros")]
		public string PriceAmountMicros { get; set; }
		
		/// <summary>
		/// Contains the price change information for a subscription that can be used to control the user journey for the price change in the app. This can be in the form of seeking confirmation from the user or tailoring the experience for a successful conversion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priceChange")]
		public SubscriptionPriceChange PriceChange { get; set; }
		
		/// <summary>
		/// ISO 4217 currency code for the subscription price. For example, if the price is specified in British pounds sterling, price_currency_code is "GBP".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priceCurrencyCode")]
		public string PriceCurrencyCode { get; set; }
		
		/// <summary>
		/// The Google profile id of the user when the subscription was purchased. Only present for purchases made with 'Subscribe with Google'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="profileId")]
		public string ProfileId { get; set; }
		
		/// <summary>
		/// The profile name of the user when the subscription was purchased. Only present for purchases made with 'Subscribe with Google'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="profileName")]
		public string ProfileName { get; set; }
		
		/// <summary>
		/// The promotion code applied on this purchase. This field is only set if a vanity code promotion is applied when the subscription was purchased.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="promotionCode")]
		public string PromotionCode { get; set; }
		
		/// <summary>
		/// The type of promotion applied on this purchase. This field is only set if a promotion is applied when the subscription was purchased. Possible values are: 0. One time code 1. Vanity code
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="promotionType")]
		public System.Nullable<System.Int32> PromotionType { get; set; }
		
		/// <summary>
		/// The type of purchase of the subscription. This field is only set if this purchase was not made using the standard in-app billing flow. Possible values are: 0. Test (i.e. purchased from a license testing account) 1. Promo (i.e. purchased using a promo code)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="purchaseType")]
		public System.Nullable<System.Int32> PurchaseType { get; set; }
		
		/// <summary>
		/// Time at which the subscription was granted, in milliseconds since the Epoch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTimeMillis")]
		public string StartTimeMillis { get; set; }
		
		/// <summary>
		/// The time at which the subscription was canceled by the user, in milliseconds since the epoch. Only present if cancelReason is 0.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userCancellationTimeMillis")]
		public string UserCancellationTimeMillis { get; set; }
	}
	
	/// <summary>
	/// Item-level info for a subscription purchase.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SubscriptionPurchaseLineItem
	{
		
		/// <summary>
		/// Information related to an auto renewing plan.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoRenewingPlan")]
		public AutoRenewingPlan AutoRenewingPlan { get; set; }
		
		/// <summary>
		/// Information related to deferred item replacement.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deferredItemReplacement")]
		public DeferredItemReplacement DeferredItemReplacement { get; set; }
		
		/// <summary>
		/// Time at which the subscription expired or will expire unless the access is extended (ex. renews).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expiryTime")]
		public string ExpiryTime { get; set; }
		
		/// <summary>
		/// Offer details information related to a purchase line item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offerDetails")]
		public OfferDetails OfferDetails { get; set; }
		
		/// <summary>
		/// Information related to a prepaid plan.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="prepaidPlan")]
		public PrepaidPlan PrepaidPlan { get; set; }
		
		/// <summary>
		/// The purchased product ID (for example, 'monthly001').
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productId")]
		public string ProductId { get; set; }
	}
	
	/// <summary>
	/// Indicates the status of a user's subscription purchase.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SubscriptionPurchaseV2
	{
		
		/// <summary>
		/// The acknowledgement state of the subscription.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="acknowledgementState")]
		public System.Nullable<SubscriptionPurchaseV2AcknowledgementState> AcknowledgementState { get; set; }
		
		/// <summary>
		/// Information specific to a subscription in canceled state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canceledStateContext")]
		public CanceledStateContext CanceledStateContext { get; set; }
		
		/// <summary>
		/// User account identifier in the third-party service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="externalAccountIdentifiers")]
		public ExternalAccountIdentifiers ExternalAccountIdentifiers { get; set; }
		
		/// <summary>
		/// This kind represents a SubscriptionPurchaseV2 object in the androidpublisher service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// The order id of the latest order associated with the purchase of the subscription. For autoRenewing subscription, this is the order id of signup order if it is not renewed yet, or the last recurring order id (success, pending, or declined order). For prepaid subscription, this is the order id associated with the queried purchase token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="latestOrderId")]
		public string LatestOrderId { get; set; }
		
		/// <summary>
		/// Item-level info for a subscription purchase. The items in the same purchase should be either all with AutoRenewingPlan or all with PrepaidPlan.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lineItems")]
		public SubscriptionPurchaseLineItem[] LineItems { get; set; }
		
		/// <summary>
		/// The purchase token of the old subscription if this subscription is one of the following: * Re-signup of a canceled but non-lapsed subscription * Upgrade/downgrade from a previous subscription. * Convert from prepaid to auto renewing subscription. * Convert from an auto renewing subscription to prepaid. * Topup a prepaid subscription.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="linkedPurchaseToken")]
		public string LinkedPurchaseToken { get; set; }
		
		/// <summary>
		/// Information specific to a subscription in paused state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pausedStateContext")]
		public PausedStateContext PausedStateContext { get; set; }
		
		/// <summary>
		/// ISO 3166-1 alpha-2 billing country/region code of the user at the time the subscription was granted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="regionCode")]
		public string RegionCode { get; set; }
		
		/// <summary>
		/// Time at which the subscription was granted. Not set for pending subscriptions (subscription was created but awaiting payment during signup).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public string StartTime { get; set; }
		
		/// <summary>
		/// Information associated with purchases made with 'Subscribe with Google'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subscribeWithGoogleInfo")]
		public SubscribeWithGoogleInfo SubscribeWithGoogleInfo { get; set; }
		
		/// <summary>
		/// The current state of the subscription.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subscriptionState")]
		public System.Nullable<SubscriptionPurchaseV2SubscriptionState> SubscriptionState { get; set; }
		
		/// <summary>
		/// Whether this subscription purchase is a test purchase.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="testPurchase")]
		public TestPurchase TestPurchase { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SubscriptionPurchaseV2AcknowledgementState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACKNOWLEDGEMENT_STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACKNOWLEDGEMENT_STATE_PENDING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACKNOWLEDGEMENT_STATE_ACKNOWLEDGED = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SubscriptionPurchaseV2SubscriptionState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUBSCRIPTION_STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUBSCRIPTION_STATE_PENDING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUBSCRIPTION_STATE_ACTIVE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUBSCRIPTION_STATE_PAUSED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUBSCRIPTION_STATE_IN_GRACE_PERIOD = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUBSCRIPTION_STATE_ON_HOLD = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUBSCRIPTION_STATE_CANCELED = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUBSCRIPTION_STATE_EXPIRED = 7,
	}
	
	/// <summary>
	/// Whether this subscription purchase is a test purchase.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TestPurchase
	{
	}
	
	/// <summary>
	/// Request for the purchases.subscriptions.acknowledge API.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SubscriptionPurchasesAcknowledgeRequest
	{
		
		/// <summary>
		/// Payload to attach to the purchase.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="developerPayload")]
		public string DeveloperPayload { get; set; }
	}
	
	/// <summary>
	/// Request for the purchases.subscriptions.defer API.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SubscriptionPurchasesDeferRequest
	{
		
		/// <summary>
		/// A SubscriptionDeferralInfo contains the data needed to defer a subscription purchase to a future expiry time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deferralInfo")]
		public SubscriptionDeferralInfo DeferralInfo { get; set; }
	}
	
	/// <summary>
	/// Response for the purchases.subscriptions.defer API.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SubscriptionPurchasesDeferResponse
	{
		
		/// <summary>
		/// The new expiry time for the subscription in milliseconds since the Epoch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="newExpiryTimeMillis")]
		public string NewExpiryTimeMillis { get; set; }
	}
	
	/// <summary>
	/// Options for system APKs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SystemApkOptions
	{
		
		/// <summary>
		/// Whether to use the rotated key for signing the system APK.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rotated")]
		public System.Nullable<System.Boolean> Rotated { get; set; }
		
		/// <summary>
		/// Whether system APK was generated with uncompressed dex files.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uncompressedDexFiles")]
		public System.Nullable<System.Boolean> UncompressedDexFiles { get; set; }
		
		/// <summary>
		/// Whether system APK was generated with uncompressed native libraries.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uncompressedNativeLibraries")]
		public System.Nullable<System.Boolean> UncompressedNativeLibraries { get; set; }
	}
	
	/// <summary>
	/// Response to list previously created system APK variants.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SystemApksListResponse
	{
		
		/// <summary>
		/// All system APK variants created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="variants")]
		public Variant[] Variants { get; set; }
	}
	
	/// <summary>
	/// APK that is suitable for inclusion in a system image. The resource of SystemApksService.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Variant
	{
		
		/// <summary>
		/// The device spec used to generate a system APK.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceSpec")]
		public DeviceSpec DeviceSpec { get; set; }
		
		/// <summary>
		/// Options for system APKs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="options")]
		public SystemApkOptions Options { get; set; }
		
		/// <summary>
		/// Output only. The ID of a previously created system APK variant.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="variantId")]
		public System.Nullable<System.UInt32> VariantId { get; set; }
	}
	
	/// <summary>
	/// The testers of an app. The resource for TestersService. Note: while it is possible in the Play Console UI to add testers via email lists, email lists are not supported by this resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Testers
	{
		
		/// <summary>
		/// All testing Google Groups, as email addresses.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="googleGroups")]
		public string[] GoogleGroups { get; set; }
	}
	
	/// <summary>
	/// A track configuration. The resource for TracksService.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Track
	{
		
		/// <summary>
		/// In a read request, represents all active releases in the track. In an update request, represents desired changes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="releases")]
		public TrackRelease[] Releases { get; set; }
		
		/// <summary>
		/// Identifier of the track. Form factor tracks have a special prefix as an identifier, for example `wear:production`, `automotive:production`. [More on track name](https://developers.google.com/android-publisher/tracks#ff-track-name)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="track")]
		public string Track1 { get; set; }
	}
	
	/// <summary>
	/// A release within a track.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TrackRelease
	{
		
		/// <summary>
		/// Country targeting specification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="countryTargeting")]
		public CountryTargeting CountryTargeting { get; set; }
		
		/// <summary>
		/// In-app update priority of the release. All newly added APKs in the release will be considered at this priority. Can take values in the range [0, 5], with 5 the highest priority. Defaults to 0. in_app_update_priority can not be updated once the release is rolled out. See https://developer.android.com/guide/playcore/in-app-updates.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inAppUpdatePriority")]
		public System.Nullable<System.Int32> InAppUpdatePriority { get; set; }
		
		/// <summary>
		/// The release name. Not required to be unique. If not set, the name is generated from the APK's version_name. If the release contains multiple APKs, the name is generated from the date.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// A description of what is new in this release.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="releaseNotes")]
		public LocalizedText[] ReleaseNotes { get; set; }
		
		/// <summary>
		/// The status of the release.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<TrackReleaseStatus> Status { get; set; }
		
		/// <summary>
		/// Fraction of users who are eligible for a staged release. 0 < fraction < 1. Can only be set when status is "inProgress" or "halted".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userFraction")]
		public System.Nullable<System.Double> UserFraction { get; set; }
		
		/// <summary>
		/// Version codes of all APKs in the release. Must include version codes to retain from previous releases.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="versionCodes")]
		public string[] VersionCodes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum TrackReleaseStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		statusUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		draft = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		inProgress = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		halted = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		completed = 4,
	}
	
	/// <summary>
	/// Configurations of the new track.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TrackConfig
	{
		
		/// <summary>
		/// Required. Form factor of the new track. Defaults to the default track.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="formFactor")]
		public System.Nullable<TrackConfigFormFactor> FormFactor { get; set; }
		
		/// <summary>
		/// Required. Identifier of the new track. For default tracks, this field consists of the track alias only. Form factor tracks have a special prefix as an identifier, for example `wear:production`, `automotive:production`. This prefix must match the value of the `form_factor` field, if it is not a default track. [More on track name](https://developers.google.com/android-publisher/tracks#ff-track-name)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="track")]
		public string Track { get; set; }
		
		/// <summary>
		/// Required. Type of the new track. Currently, the only supported value is closedTesting.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<TrackConfigType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum TrackConfigFormFactor
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FORM_FACTOR_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEFAULT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WEAR = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTOMOTIVE = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum TrackConfigType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TRACK_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLOSED_TESTING = 1,
	}
	
	/// <summary>
	/// Resource for per-track country availability information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TrackCountryAvailability
	{
		
		/// <summary>
		/// A list of one or more countries where artifacts in this track are available. This list includes all countries that are targeted by the track, even if only specific carriers are targeted in that country.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="countries")]
		public TrackTargetedCountry[] Countries { get; set; }
		
		/// <summary>
		/// Whether artifacts in this track are available to "rest of the world" countries.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="restOfWorld")]
		public System.Nullable<System.Boolean> RestOfWorld { get; set; }
		
		/// <summary>
		/// Whether this track's availability is synced with the default production track. See https://support.google.com/googleplay/android-developer/answer/7550024 for more information on syncing country availability with production. Note that if this is true, the returned "countries" and "rest_of_world" fields will reflect the values for the default production track.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="syncWithProduction")]
		public System.Nullable<System.Boolean> SyncWithProduction { get; set; }
	}
	
	/// <summary>
	/// Representation of a single country where the contents of a track are available.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TrackTargetedCountry
	{
		
		/// <summary>
		/// The country to target, as a two-letter CLDR code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="countryCode")]
		public string CountryCode { get; set; }
	}
	
	/// <summary>
	/// Response listing all tracks.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TracksListResponse
	{
		
		/// <summary>
		/// The kind of this response ("androidpublisher#tracksListResponse").
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// All tracks (including tracks with no releases).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tracks")]
		public Track[] Tracks { get; set; }
	}
	
	/// <summary>
	/// A VoidedPurchase resource indicates a purchase that was either canceled/refunded/charged-back.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VoidedPurchase
	{
		
		/// <summary>
		/// This kind represents a voided purchase object in the androidpublisher service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// The order id which uniquely identifies a one-time purchase, subscription purchase, or subscription renewal.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orderId")]
		public string OrderId { get; set; }
		
		/// <summary>
		/// The time at which the purchase was made, in milliseconds since the epoch (Jan 1, 1970).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="purchaseTimeMillis")]
		public string PurchaseTimeMillis { get; set; }
		
		/// <summary>
		/// The token which uniquely identifies a one-time purchase or subscription. To uniquely identify subscription renewals use order_id (available starting from version 3 of the API).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="purchaseToken")]
		public string PurchaseToken { get; set; }
		
		/// <summary>
		/// The reason why the purchase was voided, possible values are: 0. Other 1. Remorse 2. Not_received 3. Defective 4. Accidental_purchase 5. Fraud 6. Friendly_fraud 7. Chargeback
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="voidedReason")]
		public System.Nullable<System.Int32> VoidedReason { get; set; }
		
		/// <summary>
		/// The initiator of voided purchase, possible values are: 0. User 1. Developer 2. Google
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="voidedSource")]
		public System.Nullable<System.Int32> VoidedSource { get; set; }
		
		/// <summary>
		/// The time at which the purchase was canceled/refunded/charged-back, in milliseconds since the epoch (Jan 1, 1970).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="voidedTimeMillis")]
		public string VoidedTimeMillis { get; set; }
	}
	
	/// <summary>
	/// Response for the voidedpurchases.list API.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VoidedPurchasesListResponse
	{
		
		/// <summary>
		/// Information about the current page. List operations that supports paging return only one "page" of results. This protocol buffer message describes the page that has been returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pageInfo")]
		public PageInfo PageInfo { get; set; }
		
		/// <summary>
		/// Pagination information returned by a List operation when token pagination is enabled. List operations that supports paging return only one "page" of results. This protocol buffer message describes the page that has been returned. When using token pagination, clients should use the next/previous token to get another page of the result. The presence or absence of next/previous token indicates whether a next/previous page is available and provides a mean of accessing this page. ListRequest.page_token should be set to either next_page_token or previous_page_token to access another page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tokenPagination")]
		public TokenPagination TokenPagination { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="voidedPurchases")]
		public VoidedPurchase[] VoidedPurchases { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Uploads an APK to internal app sharing. If you are using the Google API client libraries, please increase the timeout of the http request before calling this endpoint (a timeout of 2 minutes is recommended). See [Timeouts and Errors](https://developers.google.com/api-client-library/java/google-api-java-client/errors) for an example in java.
		/// Androidpublisher_internalappsharingartifacts_uploadapk androidpublisher/v3/applications/internalappsharing/{packageName}/artifacts/apk
		/// </summary>
		/// <param name="packageName">Package name of the app.</param>
		/// <returns>Successful response</returns>
		public async Task<InternalAppSharingArtifact> Androidpublisher_internalappsharingartifacts_uploadapkAsync(string packageName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidpublisher/v3/applications/internalappsharing/"+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/artifacts/apk";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<InternalAppSharingArtifact>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Uploads an app bundle to internal app sharing. If you are using the Google API client libraries, please increase the timeout of the http request before calling this endpoint (a timeout of 2 minutes is recommended). See [Timeouts and Errors](https://developers.google.com/api-client-library/java/google-api-java-client/errors) for an example in java.
		/// Androidpublisher_internalappsharingartifacts_uploadbundle androidpublisher/v3/applications/internalappsharing/{packageName}/artifacts/bundle
		/// </summary>
		/// <param name="packageName">Package name of the app.</param>
		/// <returns>Successful response</returns>
		public async Task<InternalAppSharingArtifact> Androidpublisher_internalappsharingartifacts_uploadbundleAsync(string packageName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidpublisher/v3/applications/internalappsharing/"+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/artifacts/bundle";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<InternalAppSharingArtifact>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create an app recovery action with recovery status as DRAFT. Note that this action does not execute the recovery action.
		/// Androidpublisher_apprecovery_create androidpublisher/v3/applications/{packageName}/appRecoveries
		/// </summary>
		/// <param name="packageName">Required. Package name of the app on which recovery action is performed.</param>
		/// <returns>Successful response</returns>
		public async Task<AppRecoveryAction> Androidpublisher_apprecovery_createAsync(string packageName, CreateDraftAppRecoveryRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidpublisher/v3/applications/"+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/appRecoveries";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AppRecoveryAction>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Incrementally update targeting for a recovery action. Note that only the criteria selected during the creation of recovery action can be expanded.
		/// Androidpublisher_apprecovery_addTargeting androidpublisher/v3/applications/{packageName}/appRecoveries/{appRecoveryId}:addTargeting
		/// </summary>
		/// <param name="packageName">Required. Package name of the app for which recovery action is to be updated.</param>
		/// <param name="appRecoveryId">Required. ID corresponding to the app recovery action.</param>
		/// <returns>Successful response</returns>
		public async Task<AddTargetingResponse> Androidpublisher_apprecovery_addTargetingAsync(string packageName, string appRecoveryId, AddTargetingRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidpublisher/v3/applications/"+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/appRecoveries/"+ (appRecoveryId==null? "" : System.Uri.EscapeDataString(appRecoveryId))+":addTargeting";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AddTargetingResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Cancel an already executing app recovery action. Note that this action changes status of the recovery action to CANCELED.
		/// Androidpublisher_apprecovery_cancel androidpublisher/v3/applications/{packageName}/appRecoveries/{appRecoveryId}:cancel
		/// </summary>
		/// <param name="packageName">Required. Package name of the app for which recovery action cancellation is requested.</param>
		/// <param name="appRecoveryId">Required. ID corresponding to the app recovery action.</param>
		/// <returns>Successful response</returns>
		public async Task<CancelAppRecoveryResponse> Androidpublisher_apprecovery_cancelAsync(string packageName, string appRecoveryId, CancelAppRecoveryRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidpublisher/v3/applications/"+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/appRecoveries/"+ (appRecoveryId==null? "" : System.Uri.EscapeDataString(appRecoveryId))+":cancel";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CancelAppRecoveryResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deploy an already created app recovery action with recovery status DRAFT. Note that this action activates the recovery action for all targeted users and changes its status to ACTIVE.
		/// Androidpublisher_apprecovery_deploy androidpublisher/v3/applications/{packageName}/appRecoveries/{appRecoveryId}:deploy
		/// </summary>
		/// <param name="packageName">Required. Package name of the app for which recovery action is deployed.</param>
		/// <param name="appRecoveryId">Required. ID corresponding to the app recovery action to deploy.</param>
		/// <returns>Successful response</returns>
		public async Task<DeployAppRecoveryResponse> Androidpublisher_apprecovery_deployAsync(string packageName, string appRecoveryId, DeployAppRecoveryRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidpublisher/v3/applications/"+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/appRecoveries/"+ (appRecoveryId==null? "" : System.Uri.EscapeDataString(appRecoveryId))+":deploy";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DeployAppRecoveryResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns created device tier configs, ordered by descending creation time.
		/// Androidpublisher_applications_deviceTierConfigs_list androidpublisher/v3/applications/{packageName}/deviceTierConfigs
		/// </summary>
		/// <param name="packageName">Package name of the app.</param>
		/// <param name="pageSize">The maximum number of device tier configs to return. The service may return fewer than this value. If unspecified, at most 10 device tier configs will be returned. The maximum value for this field is 100; values above 100 will be coerced to 100. Device tier configs will be ordered by descending creation time.</param>
		/// <param name="pageToken">A page token, received from a previous `ListDeviceTierConfigs` call. Provide this to retrieve the subsequent page.</param>
		/// <returns>Successful response</returns>
		public async Task<ListDeviceTierConfigsResponse> Androidpublisher_applications_deviceTierConfigs_listAsync(string packageName, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidpublisher/v3/applications/"+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/deviceTierConfigs&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListDeviceTierConfigsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new device tier config for an app.
		/// Androidpublisher_applications_deviceTierConfigs_create androidpublisher/v3/applications/{packageName}/deviceTierConfigs
		/// </summary>
		/// <param name="packageName">Package name of the app.</param>
		/// <param name="allowUnknownDevices">Whether the service should accept device IDs that are unknown to Play's device catalog.</param>
		/// <returns>Successful response</returns>
		public async Task<DeviceTierConfig> Androidpublisher_applications_deviceTierConfigs_createAsync(string packageName, bool allowUnknownDevices, DeviceTierConfig requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidpublisher/v3/applications/"+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/deviceTierConfigs&allowUnknownDevices="+allowUnknownDevices;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DeviceTierConfig>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a particular device tier config.
		/// Androidpublisher_applications_deviceTierConfigs_get androidpublisher/v3/applications/{packageName}/deviceTierConfigs/{deviceTierConfigId}
		/// </summary>
		/// <param name="packageName">Package name of the app.</param>
		/// <param name="deviceTierConfigId">Required. Id of an existing device tier config.</param>
		/// <returns>Successful response</returns>
		public async Task<DeviceTierConfig> Androidpublisher_applications_deviceTierConfigs_getAsync(string packageName, string deviceTierConfigId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidpublisher/v3/applications/"+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/deviceTierConfigs/"+ (deviceTierConfigId==null? "" : System.Uri.EscapeDataString(deviceTierConfigId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DeviceTierConfig>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new edit for an app.
		/// Androidpublisher_edits_insert androidpublisher/v3/applications/{packageName}/edits
		/// </summary>
		/// <param name="packageName">Package name of the app.</param>
		/// <returns>Successful response</returns>
		public async Task<AppEdit> Androidpublisher_edits_insertAsync(string packageName, AppEdit requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidpublisher/v3/applications/"+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/edits";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AppEdit>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes an app edit.
		/// Androidpublisher_edits_delete androidpublisher/v3/applications/{packageName}/edits/{editId}
		/// </summary>
		/// <param name="packageName">Package name of the app.</param>
		/// <param name="editId">Identifier of the edit.</param>
		/// <returns>Successful response</returns>
		public async Task Androidpublisher_edits_deleteAsync(string packageName, string editId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidpublisher/v3/applications/"+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/edits/"+ (editId==null? "" : System.Uri.EscapeDataString(editId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets an app edit.
		/// Androidpublisher_edits_get androidpublisher/v3/applications/{packageName}/edits/{editId}
		/// </summary>
		/// <param name="packageName">Package name of the app.</param>
		/// <param name="editId">Identifier of the edit.</param>
		/// <returns>Successful response</returns>
		public async Task<AppEdit> Androidpublisher_edits_getAsync(string packageName, string editId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidpublisher/v3/applications/"+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/edits/"+ (editId==null? "" : System.Uri.EscapeDataString(editId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AppEdit>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all current APKs of the app and edit.
		/// Androidpublisher_edits_apks_list androidpublisher/v3/applications/{packageName}/edits/{editId}/apks
		/// </summary>
		/// <param name="packageName">Package name of the app.</param>
		/// <param name="editId">Identifier of the edit.</param>
		/// <returns>Successful response</returns>
		public async Task<ApksListResponse> Androidpublisher_edits_apks_listAsync(string packageName, string editId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidpublisher/v3/applications/"+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/edits/"+ (editId==null? "" : System.Uri.EscapeDataString(editId))+"/apks";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ApksListResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Uploads an APK and adds to the current edit.
		/// Androidpublisher_edits_apks_upload androidpublisher/v3/applications/{packageName}/edits/{editId}/apks
		/// </summary>
		/// <param name="packageName">Package name of the app.</param>
		/// <param name="editId">Identifier of the edit.</param>
		/// <returns>Successful response</returns>
		public async Task<Apk> Androidpublisher_edits_apks_uploadAsync(string packageName, string editId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidpublisher/v3/applications/"+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/edits/"+ (editId==null? "" : System.Uri.EscapeDataString(editId))+"/apks";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Apk>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new APK without uploading the APK itself to Google Play, instead hosting the APK at a specified URL. This function is only available to organizations using Managed Play whose application is configured to restrict distribution to the organizations.
		/// Androidpublisher_edits_apks_addexternallyhosted androidpublisher/v3/applications/{packageName}/edits/{editId}/apks/externallyHosted
		/// </summary>
		/// <param name="packageName">Package name of the app.</param>
		/// <param name="editId">Identifier of the edit.</param>
		/// <returns>Successful response</returns>
		public async Task<ApksAddExternallyHostedResponse> Androidpublisher_edits_apks_addexternallyhostedAsync(string packageName, string editId, ApksAddExternallyHostedRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidpublisher/v3/applications/"+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/edits/"+ (editId==null? "" : System.Uri.EscapeDataString(editId))+"/apks/externallyHosted";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ApksAddExternallyHostedResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Uploads a new deobfuscation file and attaches to the specified APK.
		/// Androidpublisher_edits_deobfuscationfiles_upload androidpublisher/v3/applications/{packageName}/edits/{editId}/apks/{apkVersionCode}/deobfuscationFiles/{deobfuscationFileType}
		/// </summary>
		/// <param name="packageName">Unique identifier for the Android app.</param>
		/// <param name="editId">Unique identifier for this edit.</param>
		/// <param name="apkVersionCode">The version code of the APK whose Deobfuscation File is being uploaded.</param>
		/// <param name="deobfuscationFileType">The type of the deobfuscation file.</param>
		/// <returns>Successful response</returns>
		public async Task<DeobfuscationFilesUploadResponse> Androidpublisher_edits_deobfuscationfiles_uploadAsync(string packageName, string editId, int apkVersionCode, DeobfuscationFileSymbolType deobfuscationFileType, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidpublisher/v3/applications/"+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/edits/"+ (editId==null? "" : System.Uri.EscapeDataString(editId))+"/apks/"+apkVersionCode+"/deobfuscationFiles/"+deobfuscationFileType;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DeobfuscationFilesUploadResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Fetches the expansion file configuration for the specified APK.
		/// Androidpublisher_edits_expansionfiles_get androidpublisher/v3/applications/{packageName}/edits/{editId}/apks/{apkVersionCode}/expansionFiles/{expansionFileType}
		/// </summary>
		/// <param name="packageName">Package name of the app.</param>
		/// <param name="editId">Identifier of the edit.</param>
		/// <param name="apkVersionCode">The version code of the APK whose expansion file configuration is being read or modified.</param>
		/// <param name="expansionFileType">The file type of the file configuration which is being read or modified.</param>
		/// <returns>Successful response</returns>
		public async Task<ExpansionFile> Androidpublisher_edits_expansionfiles_getAsync(string packageName, string editId, int apkVersionCode, Androidpublisher_edits_expansionfiles_getExpansionFileType expansionFileType, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidpublisher/v3/applications/"+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/edits/"+ (editId==null? "" : System.Uri.EscapeDataString(editId))+"/apks/"+apkVersionCode+"/expansionFiles/"+expansionFileType;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ExpansionFile>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Patches the APK's expansion file configuration to reference another APK's expansion file. To add a new expansion file use the Upload method.
		/// Androidpublisher_edits_expansionfiles_patch androidpublisher/v3/applications/{packageName}/edits/{editId}/apks/{apkVersionCode}/expansionFiles/{expansionFileType}
		/// </summary>
		/// <param name="packageName">Package name of the app.</param>
		/// <param name="editId">Identifier of the edit.</param>
		/// <param name="apkVersionCode">The version code of the APK whose expansion file configuration is being read or modified.</param>
		/// <param name="expansionFileType">The file type of the expansion file configuration which is being updated.</param>
		/// <returns>Successful response</returns>
		public async Task<ExpansionFile> Androidpublisher_edits_expansionfiles_patchAsync(string packageName, string editId, int apkVersionCode, Androidpublisher_edits_expansionfiles_getExpansionFileType expansionFileType, ExpansionFile requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidpublisher/v3/applications/"+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/edits/"+ (editId==null? "" : System.Uri.EscapeDataString(editId))+"/apks/"+apkVersionCode+"/expansionFiles/"+expansionFileType;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ExpansionFile>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Uploads a new expansion file and attaches to the specified APK.
		/// Androidpublisher_edits_expansionfiles_upload androidpublisher/v3/applications/{packageName}/edits/{editId}/apks/{apkVersionCode}/expansionFiles/{expansionFileType}
		/// </summary>
		/// <param name="packageName">Package name of the app.</param>
		/// <param name="editId">Identifier of the edit.</param>
		/// <param name="apkVersionCode">The version code of the APK whose expansion file configuration is being read or modified.</param>
		/// <param name="expansionFileType">The file type of the expansion file configuration which is being updated.</param>
		/// <returns>Successful response</returns>
		public async Task<ExpansionFilesUploadResponse> Androidpublisher_edits_expansionfiles_uploadAsync(string packageName, string editId, int apkVersionCode, Androidpublisher_edits_expansionfiles_getExpansionFileType expansionFileType, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidpublisher/v3/applications/"+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/edits/"+ (editId==null? "" : System.Uri.EscapeDataString(editId))+"/apks/"+apkVersionCode+"/expansionFiles/"+expansionFileType;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ExpansionFilesUploadResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the APK's expansion file configuration to reference another APK's expansion file. To add a new expansion file use the Upload method.
		/// Androidpublisher_edits_expansionfiles_update androidpublisher/v3/applications/{packageName}/edits/{editId}/apks/{apkVersionCode}/expansionFiles/{expansionFileType}
		/// </summary>
		/// <param name="packageName">Package name of the app.</param>
		/// <param name="editId">Identifier of the edit.</param>
		/// <param name="apkVersionCode">The version code of the APK whose expansion file configuration is being read or modified.</param>
		/// <param name="expansionFileType">The file type of the file configuration which is being read or modified.</param>
		/// <returns>Successful response</returns>
		public async Task<ExpansionFile> Androidpublisher_edits_expansionfiles_updateAsync(string packageName, string editId, int apkVersionCode, Androidpublisher_edits_expansionfiles_getExpansionFileType expansionFileType, ExpansionFile requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidpublisher/v3/applications/"+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/edits/"+ (editId==null? "" : System.Uri.EscapeDataString(editId))+"/apks/"+apkVersionCode+"/expansionFiles/"+expansionFileType;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ExpansionFile>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all current Android App Bundles of the app and edit.
		/// Androidpublisher_edits_bundles_list androidpublisher/v3/applications/{packageName}/edits/{editId}/bundles
		/// </summary>
		/// <param name="packageName">Package name of the app.</param>
		/// <param name="editId">Identifier of the edit.</param>
		/// <returns>Successful response</returns>
		public async Task<BundlesListResponse> Androidpublisher_edits_bundles_listAsync(string packageName, string editId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidpublisher/v3/applications/"+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/edits/"+ (editId==null? "" : System.Uri.EscapeDataString(editId))+"/bundles";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BundlesListResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Uploads a new Android App Bundle to this edit. If you are using the Google API client libraries, please increase the timeout of the http request before calling this endpoint (a timeout of 2 minutes is recommended). See [Timeouts and Errors](https://developers.google.com/api-client-library/java/google-api-java-client/errors) for an example in java.
		/// Androidpublisher_edits_bundles_upload androidpublisher/v3/applications/{packageName}/edits/{editId}/bundles
		/// </summary>
		/// <param name="packageName">Package name of the app.</param>
		/// <param name="editId">Identifier of the edit.</param>
		/// <param name="ackBundleInstallationWarning">Must be set to true if the app bundle installation may trigger a warning on user devices (for example, if installation size may be over a threshold, typically 100 MB).</param>
		/// <param name="deviceTierConfigId">Device tier config (DTC) to be used for generating deliverables (APKs). Contains id of the DTC or "LATEST" for last uploaded DTC.</param>
		/// <returns>Successful response</returns>
		public async Task<Bundle> Androidpublisher_edits_bundles_uploadAsync(string packageName, string editId, bool ackBundleInstallationWarning, string deviceTierConfigId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidpublisher/v3/applications/"+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/edits/"+ (editId==null? "" : System.Uri.EscapeDataString(editId))+"/bundles&ackBundleInstallationWarning="+ackBundleInstallationWarning+"&deviceTierConfigId=" + (deviceTierConfigId==null? "" : System.Uri.EscapeDataString(deviceTierConfigId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Bundle>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets country availability.
		/// Androidpublisher_edits_countryavailability_get androidpublisher/v3/applications/{packageName}/edits/{editId}/countryAvailability/{track}
		/// </summary>
		/// <param name="packageName">Package name of the app.</param>
		/// <param name="editId">Identifier of the edit.</param>
		/// <param name="track">The track to read from.</param>
		/// <returns>Successful response</returns>
		public async Task<TrackCountryAvailability> Androidpublisher_edits_countryavailability_getAsync(string packageName, string editId, string track, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidpublisher/v3/applications/"+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/edits/"+ (editId==null? "" : System.Uri.EscapeDataString(editId))+"/countryAvailability/"+ (track==null? "" : System.Uri.EscapeDataString(track));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TrackCountryAvailability>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets details of an app.
		/// Androidpublisher_edits_details_get androidpublisher/v3/applications/{packageName}/edits/{editId}/details
		/// </summary>
		/// <param name="packageName">Package name of the app.</param>
		/// <param name="editId">Identifier of the edit.</param>
		/// <returns>Successful response</returns>
		public async Task<AppDetails> Androidpublisher_edits_details_getAsync(string packageName, string editId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidpublisher/v3/applications/"+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/edits/"+ (editId==null? "" : System.Uri.EscapeDataString(editId))+"/details";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AppDetails>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Patches details of an app.
		/// Androidpublisher_edits_details_patch androidpublisher/v3/applications/{packageName}/edits/{editId}/details
		/// </summary>
		/// <param name="packageName">Package name of the app.</param>
		/// <param name="editId">Identifier of the edit.</param>
		/// <returns>Successful response</returns>
		public async Task<AppDetails> Androidpublisher_edits_details_patchAsync(string packageName, string editId, AppDetails requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidpublisher/v3/applications/"+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/edits/"+ (editId==null? "" : System.Uri.EscapeDataString(editId))+"/details";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AppDetails>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates details of an app.
		/// Androidpublisher_edits_details_update androidpublisher/v3/applications/{packageName}/edits/{editId}/details
		/// </summary>
		/// <param name="packageName">Package name of the app.</param>
		/// <param name="editId">Identifier of the edit.</param>
		/// <returns>Successful response</returns>
		public async Task<AppDetails> Androidpublisher_edits_details_updateAsync(string packageName, string editId, AppDetails requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidpublisher/v3/applications/"+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/edits/"+ (editId==null? "" : System.Uri.EscapeDataString(editId))+"/details";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AppDetails>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes all store listings.
		/// Androidpublisher_edits_listings_deleteall androidpublisher/v3/applications/{packageName}/edits/{editId}/listings
		/// </summary>
		/// <param name="packageName">Package name of the app.</param>
		/// <param name="editId">Identifier of the edit.</param>
		/// <returns>Successful response</returns>
		public async Task Androidpublisher_edits_listings_deleteallAsync(string packageName, string editId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidpublisher/v3/applications/"+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/edits/"+ (editId==null? "" : System.Uri.EscapeDataString(editId))+"/listings";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all localized store listings.
		/// Androidpublisher_edits_listings_list androidpublisher/v3/applications/{packageName}/edits/{editId}/listings
		/// </summary>
		/// <param name="packageName">Package name of the app.</param>
		/// <param name="editId">Identifier of the edit.</param>
		/// <returns>Successful response</returns>
		public async Task<ListingsListResponse> Androidpublisher_edits_listings_listAsync(string packageName, string editId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidpublisher/v3/applications/"+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/edits/"+ (editId==null? "" : System.Uri.EscapeDataString(editId))+"/listings";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListingsListResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a localized store listing.
		/// Androidpublisher_edits_listings_delete androidpublisher/v3/applications/{packageName}/edits/{editId}/listings/{language}
		/// </summary>
		/// <param name="packageName">Package name of the app.</param>
		/// <param name="editId">Identifier of the edit.</param>
		/// <param name="language">Language localization code (a BCP-47 language tag; for example, "de-AT" for Austrian German).</param>
		/// <returns>Successful response</returns>
		public async Task Androidpublisher_edits_listings_deleteAsync(string packageName, string editId, string language, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidpublisher/v3/applications/"+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/edits/"+ (editId==null? "" : System.Uri.EscapeDataString(editId))+"/listings/"+ (language==null? "" : System.Uri.EscapeDataString(language));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a localized store listing.
		/// Androidpublisher_edits_listings_get androidpublisher/v3/applications/{packageName}/edits/{editId}/listings/{language}
		/// </summary>
		/// <param name="packageName">Package name of the app.</param>
		/// <param name="editId">Identifier of the edit.</param>
		/// <param name="language">Language localization code (a BCP-47 language tag; for example, "de-AT" for Austrian German).</param>
		/// <returns>Successful response</returns>
		public async Task<Listing> Androidpublisher_edits_listings_getAsync(string packageName, string editId, string language, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidpublisher/v3/applications/"+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/edits/"+ (editId==null? "" : System.Uri.EscapeDataString(editId))+"/listings/"+ (language==null? "" : System.Uri.EscapeDataString(language));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Listing>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Patches a localized store listing.
		/// Androidpublisher_edits_listings_patch androidpublisher/v3/applications/{packageName}/edits/{editId}/listings/{language}
		/// </summary>
		/// <param name="packageName">Package name of the app.</param>
		/// <param name="editId">Identifier of the edit.</param>
		/// <param name="language">Language localization code (a BCP-47 language tag; for example, "de-AT" for Austrian German).</param>
		/// <returns>Successful response</returns>
		public async Task<Listing> Androidpublisher_edits_listings_patchAsync(string packageName, string editId, string language, Listing requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidpublisher/v3/applications/"+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/edits/"+ (editId==null? "" : System.Uri.EscapeDataString(editId))+"/listings/"+ (language==null? "" : System.Uri.EscapeDataString(language));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Listing>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates or updates a localized store listing.
		/// Androidpublisher_edits_listings_update androidpublisher/v3/applications/{packageName}/edits/{editId}/listings/{language}
		/// </summary>
		/// <param name="packageName">Package name of the app.</param>
		/// <param name="editId">Identifier of the edit.</param>
		/// <param name="language">Language localization code (a BCP-47 language tag; for example, "de-AT" for Austrian German).</param>
		/// <returns>Successful response</returns>
		public async Task<Listing> Androidpublisher_edits_listings_updateAsync(string packageName, string editId, string language, Listing requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidpublisher/v3/applications/"+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/edits/"+ (editId==null? "" : System.Uri.EscapeDataString(editId))+"/listings/"+ (language==null? "" : System.Uri.EscapeDataString(language));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Listing>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes all images for the specified language and image type. Returns an empty response if no images are found.
		/// Androidpublisher_edits_images_deleteall androidpublisher/v3/applications/{packageName}/edits/{editId}/listings/{language}/{imageType}
		/// </summary>
		/// <param name="packageName">Package name of the app.</param>
		/// <param name="editId">Identifier of the edit.</param>
		/// <param name="language">Language localization code (a BCP-47 language tag; for example, "de-AT" for Austrian German). Providing a language that is not supported by the App is a no-op.</param>
		/// <param name="imageType">Type of the Image. Providing an image type that refers to no images is a no-op.</param>
		/// <returns>Successful response</returns>
		public async Task<ImagesDeleteAllResponse> Androidpublisher_edits_images_deleteallAsync(string packageName, string editId, string language, Androidpublisher_edits_images_deleteallImageType imageType, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidpublisher/v3/applications/"+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/edits/"+ (editId==null? "" : System.Uri.EscapeDataString(editId))+"/listings/"+ (language==null? "" : System.Uri.EscapeDataString(language))+"/"+imageType;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ImagesDeleteAllResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all images. The response may be empty.
		/// Androidpublisher_edits_images_list androidpublisher/v3/applications/{packageName}/edits/{editId}/listings/{language}/{imageType}
		/// </summary>
		/// <param name="packageName">Package name of the app.</param>
		/// <param name="editId">Identifier of the edit.</param>
		/// <param name="language">Language localization code (a BCP-47 language tag; for example, "de-AT" for Austrian German). There must be a store listing for the specified language.</param>
		/// <param name="imageType">Type of the Image. Providing an image type that refers to no images will return an empty response.</param>
		/// <returns>Successful response</returns>
		public async Task<ImagesListResponse> Androidpublisher_edits_images_listAsync(string packageName, string editId, string language, Androidpublisher_edits_images_deleteallImageType imageType, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidpublisher/v3/applications/"+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/edits/"+ (editId==null? "" : System.Uri.EscapeDataString(editId))+"/listings/"+ (language==null? "" : System.Uri.EscapeDataString(language))+"/"+imageType;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ImagesListResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Uploads an image of the specified language and image type, and adds to the edit.
		/// Androidpublisher_edits_images_upload androidpublisher/v3/applications/{packageName}/edits/{editId}/listings/{language}/{imageType}
		/// </summary>
		/// <param name="packageName">Package name of the app.</param>
		/// <param name="editId">Identifier of the edit.</param>
		/// <param name="language">Language localization code (a BCP-47 language tag; for example, "de-AT" for Austrian German). Providing a language that is not supported by the App is a no-op.</param>
		/// <param name="imageType">Type of the Image.</param>
		/// <returns>Successful response</returns>
		public async Task<ImagesUploadResponse> Androidpublisher_edits_images_uploadAsync(string packageName, string editId, string language, Androidpublisher_edits_images_deleteallImageType imageType, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidpublisher/v3/applications/"+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/edits/"+ (editId==null? "" : System.Uri.EscapeDataString(editId))+"/listings/"+ (language==null? "" : System.Uri.EscapeDataString(language))+"/"+imageType;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ImagesUploadResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the image (specified by id) from the edit.
		/// Androidpublisher_edits_images_delete androidpublisher/v3/applications/{packageName}/edits/{editId}/listings/{language}/{imageType}/{imageId}
		/// </summary>
		/// <param name="packageName">Package name of the app.</param>
		/// <param name="editId">Identifier of the edit.</param>
		/// <param name="language">Language localization code (a BCP-47 language tag; for example, "de-AT" for Austrian German).</param>
		/// <param name="imageType">Type of the Image.</param>
		/// <param name="imageId">Unique identifier an image within the set of images attached to this edit.</param>
		/// <returns>Successful response</returns>
		public async Task Androidpublisher_edits_images_deleteAsync(string packageName, string editId, string language, Androidpublisher_edits_images_deleteallImageType imageType, string imageId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidpublisher/v3/applications/"+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/edits/"+ (editId==null? "" : System.Uri.EscapeDataString(editId))+"/listings/"+ (language==null? "" : System.Uri.EscapeDataString(language))+"/"+imageType+"/"+ (imageId==null? "" : System.Uri.EscapeDataString(imageId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets testers. Note: Testers resource does not support email lists.
		/// Androidpublisher_edits_testers_get androidpublisher/v3/applications/{packageName}/edits/{editId}/testers/{track}
		/// </summary>
		/// <param name="packageName">Package name of the app.</param>
		/// <param name="editId">Identifier of the edit.</param>
		/// <param name="track">The track to read from.</param>
		/// <returns>Successful response</returns>
		public async Task<Testers> Androidpublisher_edits_testers_getAsync(string packageName, string editId, string track, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidpublisher/v3/applications/"+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/edits/"+ (editId==null? "" : System.Uri.EscapeDataString(editId))+"/testers/"+ (track==null? "" : System.Uri.EscapeDataString(track));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Testers>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Patches testers. Note: Testers resource does not support email lists.
		/// Androidpublisher_edits_testers_patch androidpublisher/v3/applications/{packageName}/edits/{editId}/testers/{track}
		/// </summary>
		/// <param name="packageName">Package name of the app.</param>
		/// <param name="editId">Identifier of the edit.</param>
		/// <param name="track">The track to update.</param>
		/// <returns>Successful response</returns>
		public async Task<Testers> Androidpublisher_edits_testers_patchAsync(string packageName, string editId, string track, Testers requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidpublisher/v3/applications/"+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/edits/"+ (editId==null? "" : System.Uri.EscapeDataString(editId))+"/testers/"+ (track==null? "" : System.Uri.EscapeDataString(track));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Testers>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates testers. Note: Testers resource does not support email lists.
		/// Androidpublisher_edits_testers_update androidpublisher/v3/applications/{packageName}/edits/{editId}/testers/{track}
		/// </summary>
		/// <param name="packageName">Package name of the app.</param>
		/// <param name="editId">Identifier of the edit.</param>
		/// <param name="track">The track to update.</param>
		/// <returns>Successful response</returns>
		public async Task<Testers> Androidpublisher_edits_testers_updateAsync(string packageName, string editId, string track, Testers requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidpublisher/v3/applications/"+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/edits/"+ (editId==null? "" : System.Uri.EscapeDataString(editId))+"/testers/"+ (track==null? "" : System.Uri.EscapeDataString(track));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Testers>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all tracks.
		/// Androidpublisher_edits_tracks_list androidpublisher/v3/applications/{packageName}/edits/{editId}/tracks
		/// </summary>
		/// <param name="packageName">Package name of the app.</param>
		/// <param name="editId">Identifier of the edit.</param>
		/// <returns>Successful response</returns>
		public async Task<TracksListResponse> Androidpublisher_edits_tracks_listAsync(string packageName, string editId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidpublisher/v3/applications/"+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/edits/"+ (editId==null? "" : System.Uri.EscapeDataString(editId))+"/tracks";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TracksListResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new track.
		/// Androidpublisher_edits_tracks_create androidpublisher/v3/applications/{packageName}/edits/{editId}/tracks
		/// </summary>
		/// <param name="packageName">Required. Package name of the app.</param>
		/// <param name="editId">Required. Identifier of the edit.</param>
		/// <returns>Successful response</returns>
		public async Task<Track> Androidpublisher_edits_tracks_createAsync(string packageName, string editId, TrackConfig requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidpublisher/v3/applications/"+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/edits/"+ (editId==null? "" : System.Uri.EscapeDataString(editId))+"/tracks";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Track>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a track.
		/// Androidpublisher_edits_tracks_get androidpublisher/v3/applications/{packageName}/edits/{editId}/tracks/{track}
		/// </summary>
		/// <param name="packageName">Package name of the app.</param>
		/// <param name="editId">Identifier of the edit.</param>
		/// <param name="track">Identifier of the track. [More on track name](https://developers.google.com/android-publisher/tracks#ff-track-name)</param>
		/// <returns>Successful response</returns>
		public async Task<Track> Androidpublisher_edits_tracks_getAsync(string packageName, string editId, string track, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidpublisher/v3/applications/"+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/edits/"+ (editId==null? "" : System.Uri.EscapeDataString(editId))+"/tracks/"+ (track==null? "" : System.Uri.EscapeDataString(track));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Track>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Patches a track.
		/// Androidpublisher_edits_tracks_patch androidpublisher/v3/applications/{packageName}/edits/{editId}/tracks/{track}
		/// </summary>
		/// <param name="packageName">Package name of the app.</param>
		/// <param name="editId">Identifier of the edit.</param>
		/// <param name="track">Identifier of the track. [More on track name](https://developers.google.com/android-publisher/tracks#ff-track-name)</param>
		/// <returns>Successful response</returns>
		public async Task<Track> Androidpublisher_edits_tracks_patchAsync(string packageName, string editId, string track, Track requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidpublisher/v3/applications/"+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/edits/"+ (editId==null? "" : System.Uri.EscapeDataString(editId))+"/tracks/"+ (track==null? "" : System.Uri.EscapeDataString(track));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Track>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a track.
		/// Androidpublisher_edits_tracks_update androidpublisher/v3/applications/{packageName}/edits/{editId}/tracks/{track}
		/// </summary>
		/// <param name="packageName">Package name of the app.</param>
		/// <param name="editId">Identifier of the edit.</param>
		/// <param name="track">Identifier of the track. [More on track name](https://developers.google.com/android-publisher/tracks#ff-track-name)</param>
		/// <returns>Successful response</returns>
		public async Task<Track> Androidpublisher_edits_tracks_updateAsync(string packageName, string editId, string track, Track requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidpublisher/v3/applications/"+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/edits/"+ (editId==null? "" : System.Uri.EscapeDataString(editId))+"/tracks/"+ (track==null? "" : System.Uri.EscapeDataString(track));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Track>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Commits an app edit.
		/// Androidpublisher_edits_commit androidpublisher/v3/applications/{packageName}/edits/{editId}:commit
		/// </summary>
		/// <param name="packageName">Package name of the app.</param>
		/// <param name="editId">Identifier of the edit.</param>
		/// <param name="changesNotSentForReview">Indicates that the changes in this edit will not be reviewed until they are explicitly sent for review from the Google Play Console UI. These changes will be added to any other changes that are not yet sent for review.</param>
		/// <returns>Successful response</returns>
		public async Task<AppEdit> Androidpublisher_edits_commitAsync(string packageName, string editId, bool changesNotSentForReview, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidpublisher/v3/applications/"+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/edits/"+ (editId==null? "" : System.Uri.EscapeDataString(editId))+":commit&changesNotSentForReview="+changesNotSentForReview;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AppEdit>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Validates an app edit.
		/// Androidpublisher_edits_validate androidpublisher/v3/applications/{packageName}/edits/{editId}:validate
		/// </summary>
		/// <param name="packageName">Package name of the app.</param>
		/// <param name="editId">Identifier of the edit.</param>
		/// <returns>Successful response</returns>
		public async Task<AppEdit> Androidpublisher_edits_validateAsync(string packageName, string editId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidpublisher/v3/applications/"+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/edits/"+ (editId==null? "" : System.Uri.EscapeDataString(editId))+":validate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AppEdit>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns download metadata for all APKs that were generated from a given app bundle.
		/// Androidpublisher_generatedapks_list androidpublisher/v3/applications/{packageName}/generatedApks/{versionCode}
		/// </summary>
		/// <param name="packageName">Package name of the app.</param>
		/// <param name="versionCode">Version code of the app bundle.</param>
		/// <returns>Successful response</returns>
		public async Task<GeneratedApksListResponse> Androidpublisher_generatedapks_listAsync(string packageName, int versionCode, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidpublisher/v3/applications/"+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/generatedApks/"+versionCode;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GeneratedApksListResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Downloads a single signed APK generated from an app bundle.
		/// Androidpublisher_generatedapks_download androidpublisher/v3/applications/{packageName}/generatedApks/{versionCode}/downloads/{downloadId}:download
		/// </summary>
		/// <param name="packageName">Package name of the app.</param>
		/// <param name="versionCode">Version code of the app bundle.</param>
		/// <param name="downloadId">Download ID, which uniquely identifies the APK to download. Can be obtained from the response of `generatedapks.list` method.</param>
		/// <returns>Successful response</returns>
		public async Task Androidpublisher_generatedapks_downloadAsync(string packageName, int versionCode, string downloadId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidpublisher/v3/applications/"+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/generatedApks/"+versionCode+"/downloads/"+ (downloadId==null? "" : System.Uri.EscapeDataString(downloadId))+":download";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all in-app products - both managed products and subscriptions. If an app has a large number of in-app products, the response may be paginated. In this case the response field `tokenPagination.nextPageToken` will be set and the caller should provide its value as a `token` request parameter to retrieve the next page. This method should no longer be used to retrieve subscriptions. See [this article](https://android-developers.googleblog.com/2023/06/changes-to-google-play-developer-api-june-2023.html) for more information.
		/// Androidpublisher_inappproducts_list androidpublisher/v3/applications/{packageName}/inappproducts
		/// </summary>
		/// <param name="packageName">Package name of the app.</param>
		/// <param name="maxResults">Deprecated and ignored. The page size is determined by the server.</param>
		/// <param name="startIndex">Deprecated and ignored. Set the `token` parameter to retrieve the next page.</param>
		/// <param name="token">Pagination token. If empty, list starts at the first product.</param>
		/// <returns>Successful response</returns>
		public async Task<InappproductsListResponse> Androidpublisher_inappproducts_listAsync(string packageName, int maxResults, int startIndex, string token, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidpublisher/v3/applications/"+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/inappproducts&maxResults="+maxResults+"&startIndex="+startIndex+"&token=" + (token==null? "" : System.Uri.EscapeDataString(token));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<InappproductsListResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates an in-app product (a managed product or a subscription). This method should no longer be used to create subscriptions. See [this article](https://android-developers.googleblog.com/2023/06/changes-to-google-play-developer-api-june-2023.html) for more information.
		/// Androidpublisher_inappproducts_insert androidpublisher/v3/applications/{packageName}/inappproducts
		/// </summary>
		/// <param name="packageName">Package name of the app.</param>
		/// <param name="autoConvertMissingPrices">If true the prices for all regions targeted by the parent app that don't have a price specified for this in-app product will be auto converted to the target currency based on the default price. Defaults to false.</param>
		/// <returns>Successful response</returns>
		public async Task<InAppProduct> Androidpublisher_inappproducts_insertAsync(string packageName, bool autoConvertMissingPrices, InAppProduct requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidpublisher/v3/applications/"+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/inappproducts&autoConvertMissingPrices="+autoConvertMissingPrices;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<InAppProduct>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes an in-app product (a managed product or a subscription). This method should no longer be used to delete subscriptions. See [this article](https://android-developers.googleblog.com/2023/06/changes-to-google-play-developer-api-june-2023.html) for more information.
		/// Androidpublisher_inappproducts_delete androidpublisher/v3/applications/{packageName}/inappproducts/{sku}
		/// </summary>
		/// <param name="packageName">Package name of the app.</param>
		/// <param name="sku">Unique identifier for the in-app product.</param>
		/// <param name="latencyTolerance">Optional. The latency tolerance for the propagation of this product update. Defaults to latency-sensitive.</param>
		/// <returns>Successful response</returns>
		public async Task Androidpublisher_inappproducts_deleteAsync(string packageName, string sku, ActivateBasePlanRequestLatencyTolerance latencyTolerance, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidpublisher/v3/applications/"+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/inappproducts/"+ (sku==null? "" : System.Uri.EscapeDataString(sku))+"&latencyTolerance=" + latencyTolerance;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets an in-app product, which can be a managed product or a subscription. This method should no longer be used to retrieve subscriptions. See [this article](https://android-developers.googleblog.com/2023/06/changes-to-google-play-developer-api-june-2023.html) for more information.
		/// Androidpublisher_inappproducts_get androidpublisher/v3/applications/{packageName}/inappproducts/{sku}
		/// </summary>
		/// <param name="packageName">Package name of the app.</param>
		/// <param name="sku">Unique identifier for the in-app product.</param>
		/// <returns>Successful response</returns>
		public async Task<InAppProduct> Androidpublisher_inappproducts_getAsync(string packageName, string sku, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidpublisher/v3/applications/"+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/inappproducts/"+ (sku==null? "" : System.Uri.EscapeDataString(sku));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<InAppProduct>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Patches an in-app product (a managed product or a subscription). This method should no longer be used to update subscriptions. See [this article](https://android-developers.googleblog.com/2023/06/changes-to-google-play-developer-api-june-2023.html) for more information.
		/// Androidpublisher_inappproducts_patch androidpublisher/v3/applications/{packageName}/inappproducts/{sku}
		/// </summary>
		/// <param name="packageName">Package name of the app.</param>
		/// <param name="sku">Unique identifier for the in-app product.</param>
		/// <param name="autoConvertMissingPrices">If true the prices for all regions targeted by the parent app that don't have a price specified for this in-app product will be auto converted to the target currency based on the default price. Defaults to false.</param>
		/// <param name="latencyTolerance">Optional. The latency tolerance for the propagation of this product update. Defaults to latency-sensitive.</param>
		/// <returns>Successful response</returns>
		public async Task<InAppProduct> Androidpublisher_inappproducts_patchAsync(string packageName, string sku, bool autoConvertMissingPrices, ActivateBasePlanRequestLatencyTolerance latencyTolerance, InAppProduct requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidpublisher/v3/applications/"+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/inappproducts/"+ (sku==null? "" : System.Uri.EscapeDataString(sku))+"&autoConvertMissingPrices="+autoConvertMissingPrices+"&latencyTolerance=" + latencyTolerance;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<InAppProduct>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an in-app product (a managed product or a subscription). This method should no longer be used to update subscriptions. See [this article](https://android-developers.googleblog.com/2023/06/changes-to-google-play-developer-api-june-2023.html) for more information.
		/// Androidpublisher_inappproducts_update androidpublisher/v3/applications/{packageName}/inappproducts/{sku}
		/// </summary>
		/// <param name="packageName">Package name of the app.</param>
		/// <param name="sku">Unique identifier for the in-app product.</param>
		/// <param name="allowMissing">If set to true, and the in-app product with the given package_name and sku doesn't exist, the in-app product will be created.</param>
		/// <param name="autoConvertMissingPrices">If true the prices for all regions targeted by the parent app that don't have a price specified for this in-app product will be auto converted to the target currency based on the default price. Defaults to false.</param>
		/// <param name="latencyTolerance">Optional. The latency tolerance for the propagation of this product update. Defaults to latency-sensitive.</param>
		/// <returns>Successful response</returns>
		public async Task<InAppProduct> Androidpublisher_inappproducts_updateAsync(string packageName, string sku, bool allowMissing, bool autoConvertMissingPrices, ActivateBasePlanRequestLatencyTolerance latencyTolerance, InAppProduct requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidpublisher/v3/applications/"+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/inappproducts/"+ (sku==null? "" : System.Uri.EscapeDataString(sku))+"&allowMissing="+allowMissing+"&autoConvertMissingPrices="+autoConvertMissingPrices+"&latencyTolerance=" + latencyTolerance;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<InAppProduct>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes in-app products (managed products or subscriptions). Set the latencyTolerance field on nested requests to PRODUCT_UPDATE_LATENCY_TOLERANCE_LATENCY_TOLERANT to achieve maximum update throughput. This method should not be used to delete subscriptions. See [this article](https://android-developers.googleblog.com/2023/06/changes-to-google-play-developer-api-june-2023.html) for more information.
		/// Androidpublisher_inappproducts_batchDelete androidpublisher/v3/applications/{packageName}/inappproducts:batchDelete
		/// </summary>
		/// <param name="packageName">Package name of the app.</param>
		/// <returns>Successful response</returns>
		public async Task Androidpublisher_inappproducts_batchDeleteAsync(string packageName, InappproductsBatchDeleteRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidpublisher/v3/applications/"+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/inappproducts:batchDelete";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Reads multiple in-app products, which can be managed products or subscriptions. This method should not be used to retrieve subscriptions. See [this article](https://android-developers.googleblog.com/2023/06/changes-to-google-play-developer-api-june-2023.html) for more information.
		/// Androidpublisher_inappproducts_batchGet androidpublisher/v3/applications/{packageName}/inappproducts:batchGet
		/// </summary>
		/// <param name="packageName">Package name of the app.</param>
		/// <param name="sku">Unique identifier for the in-app products.</param>
		/// <returns>Successful response</returns>
		public async Task<InappproductsBatchGetResponse> Androidpublisher_inappproducts_batchGetAsync(string packageName, string[] sku, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidpublisher/v3/applications/"+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/inappproducts:batchGet&"+string.Join("&", sku.Select(z => $"sku={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<InappproductsBatchGetResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates or inserts one or more in-app products (managed products or subscriptions). Set the latencyTolerance field on nested requests to PRODUCT_UPDATE_LATENCY_TOLERANCE_LATENCY_TOLERANT to achieve maximum update throughput. This method should no longer be used to update subscriptions. See [this article](https://android-developers.googleblog.com/2023/06/changes-to-google-play-developer-api-june-2023.html) for more information.
		/// Androidpublisher_inappproducts_batchUpdate androidpublisher/v3/applications/{packageName}/inappproducts:batchUpdate
		/// </summary>
		/// <param name="packageName">Package name of the app.</param>
		/// <returns>Successful response</returns>
		public async Task<InappproductsBatchUpdateResponse> Androidpublisher_inappproducts_batchUpdateAsync(string packageName, InappproductsBatchUpdateRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidpublisher/v3/applications/"+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/inappproducts:batchUpdate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<InappproductsBatchUpdateResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Refunds a user's subscription or in-app purchase order. Orders older than 3 years cannot be refunded.
		/// Androidpublisher_orders_refund androidpublisher/v3/applications/{packageName}/orders/{orderId}:refund
		/// </summary>
		/// <param name="packageName">The package name of the application for which this subscription or in-app item was purchased (for example, 'com.some.thing').</param>
		/// <param name="orderId">The order ID provided to the user when the subscription or in-app order was purchased.</param>
		/// <param name="revoke">Whether to revoke the purchased item. If set to true, access to the subscription or in-app item will be terminated immediately. If the item is a recurring subscription, all future payments will also be terminated. Consumed in-app items need to be handled by developer's app. (optional).</param>
		/// <returns>Successful response</returns>
		public async Task Androidpublisher_orders_refundAsync(string packageName, string orderId, bool revoke, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidpublisher/v3/applications/"+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/orders/"+ (orderId==null? "" : System.Uri.EscapeDataString(orderId))+":refund&revoke="+revoke;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Calculates the region prices, using today's exchange rate and country-specific pricing patterns, based on the price in the request for a set of regions.
		/// Androidpublisher_monetization_convertRegionPrices androidpublisher/v3/applications/{packageName}/pricing:convertRegionPrices
		/// </summary>
		/// <param name="packageName">Required. The app package name.</param>
		/// <returns>Successful response</returns>
		public async Task<ConvertRegionPricesResponse> Androidpublisher_monetization_convertRegionPricesAsync(string packageName, ConvertRegionPricesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidpublisher/v3/applications/"+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/pricing:convertRegionPrices";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ConvertRegionPricesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Checks the purchase and consumption status of an inapp item.
		/// Androidpublisher_purchases_products_get androidpublisher/v3/applications/{packageName}/purchases/products/{productId}/tokens/{token}
		/// </summary>
		/// <param name="packageName">The package name of the application the inapp product was sold in (for example, 'com.some.thing').</param>
		/// <param name="productId">The inapp product SKU (for example, 'com.some.thing.inapp1').</param>
		/// <param name="token">The token provided to the user's device when the inapp product was purchased.</param>
		/// <returns>Successful response</returns>
		public async Task<ProductPurchase> Androidpublisher_purchases_products_getAsync(string packageName, string productId, string token, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidpublisher/v3/applications/"+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/purchases/products/"+ (productId==null? "" : System.Uri.EscapeDataString(productId))+"/tokens/"+ (token==null? "" : System.Uri.EscapeDataString(token));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ProductPurchase>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Acknowledges a purchase of an inapp item.
		/// Androidpublisher_purchases_products_acknowledge androidpublisher/v3/applications/{packageName}/purchases/products/{productId}/tokens/{token}:acknowledge
		/// </summary>
		/// <param name="packageName">The package name of the application the inapp product was sold in (for example, 'com.some.thing').</param>
		/// <param name="productId">The inapp product SKU (for example, 'com.some.thing.inapp1').</param>
		/// <param name="token">The token provided to the user's device when the inapp product was purchased.</param>
		/// <returns>Successful response</returns>
		public async Task Androidpublisher_purchases_products_acknowledgeAsync(string packageName, string productId, string token, ProductPurchasesAcknowledgeRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidpublisher/v3/applications/"+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/purchases/products/"+ (productId==null? "" : System.Uri.EscapeDataString(productId))+"/tokens/"+ (token==null? "" : System.Uri.EscapeDataString(token))+":acknowledge";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Consumes a purchase for an inapp item.
		/// Androidpublisher_purchases_products_consume androidpublisher/v3/applications/{packageName}/purchases/products/{productId}/tokens/{token}:consume
		/// </summary>
		/// <param name="packageName">The package name of the application the inapp product was sold in (for example, 'com.some.thing').</param>
		/// <param name="productId">The inapp product SKU (for example, 'com.some.thing.inapp1').</param>
		/// <param name="token">The token provided to the user's device when the inapp product was purchased.</param>
		/// <returns>Successful response</returns>
		public async Task Androidpublisher_purchases_products_consumeAsync(string packageName, string productId, string token, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidpublisher/v3/applications/"+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/purchases/products/"+ (productId==null? "" : System.Uri.EscapeDataString(productId))+"/tokens/"+ (token==null? "" : System.Uri.EscapeDataString(token))+":consume";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Checks whether a user's subscription purchase is valid and returns its expiry time.
		/// Androidpublisher_purchases_subscriptions_get androidpublisher/v3/applications/{packageName}/purchases/subscriptions/{subscriptionId}/tokens/{token}
		/// </summary>
		/// <param name="packageName">The package name of the application for which this subscription was purchased (for example, 'com.some.thing').</param>
		/// <param name="subscriptionId">The purchased subscription ID (for example, 'monthly001').</param>
		/// <param name="token">The token provided to the user's device when the subscription was purchased.</param>
		/// <returns>Successful response</returns>
		public async Task<SubscriptionPurchase> Androidpublisher_purchases_subscriptions_getAsync(string packageName, string subscriptionId, string token, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidpublisher/v3/applications/"+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/purchases/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/tokens/"+ (token==null? "" : System.Uri.EscapeDataString(token));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SubscriptionPurchase>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Acknowledges a subscription purchase.
		/// Androidpublisher_purchases_subscriptions_acknowledge androidpublisher/v3/applications/{packageName}/purchases/subscriptions/{subscriptionId}/tokens/{token}:acknowledge
		/// </summary>
		/// <param name="packageName">The package name of the application for which this subscription was purchased (for example, 'com.some.thing').</param>
		/// <param name="subscriptionId">The purchased subscription ID (for example, 'monthly001').</param>
		/// <param name="token">The token provided to the user's device when the subscription was purchased.</param>
		/// <returns>Successful response</returns>
		public async Task Androidpublisher_purchases_subscriptions_acknowledgeAsync(string packageName, string subscriptionId, string token, SubscriptionPurchasesAcknowledgeRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidpublisher/v3/applications/"+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/purchases/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/tokens/"+ (token==null? "" : System.Uri.EscapeDataString(token))+":acknowledge";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Cancels a user's subscription purchase. The subscription remains valid until its expiration time.
		/// Androidpublisher_purchases_subscriptions_cancel androidpublisher/v3/applications/{packageName}/purchases/subscriptions/{subscriptionId}/tokens/{token}:cancel
		/// </summary>
		/// <param name="packageName">The package name of the application for which this subscription was purchased (for example, 'com.some.thing').</param>
		/// <param name="subscriptionId">The purchased subscription ID (for example, 'monthly001').</param>
		/// <param name="token">The token provided to the user's device when the subscription was purchased.</param>
		/// <returns>Successful response</returns>
		public async Task Androidpublisher_purchases_subscriptions_cancelAsync(string packageName, string subscriptionId, string token, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidpublisher/v3/applications/"+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/purchases/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/tokens/"+ (token==null? "" : System.Uri.EscapeDataString(token))+":cancel";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Defers a user's subscription purchase until a specified future expiration time.
		/// Androidpublisher_purchases_subscriptions_defer androidpublisher/v3/applications/{packageName}/purchases/subscriptions/{subscriptionId}/tokens/{token}:defer
		/// </summary>
		/// <param name="packageName">The package name of the application for which this subscription was purchased (for example, 'com.some.thing').</param>
		/// <param name="subscriptionId">The purchased subscription ID (for example, 'monthly001').</param>
		/// <param name="token">The token provided to the user's device when the subscription was purchased.</param>
		/// <returns>Successful response</returns>
		public async Task<SubscriptionPurchasesDeferResponse> Androidpublisher_purchases_subscriptions_deferAsync(string packageName, string subscriptionId, string token, SubscriptionPurchasesDeferRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidpublisher/v3/applications/"+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/purchases/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/tokens/"+ (token==null? "" : System.Uri.EscapeDataString(token))+":defer";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SubscriptionPurchasesDeferResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Refunds a user's subscription purchase, but the subscription remains valid until its expiration time and it will continue to recur.
		/// Androidpublisher_purchases_subscriptions_refund androidpublisher/v3/applications/{packageName}/purchases/subscriptions/{subscriptionId}/tokens/{token}:refund
		/// </summary>
		/// <param name="packageName">The package name of the application for which this subscription was purchased (for example, 'com.some.thing').</param>
		/// <param name="subscriptionId">"The purchased subscription ID (for example, 'monthly001').</param>
		/// <param name="token">The token provided to the user's device when the subscription was purchased.</param>
		/// <returns>Successful response</returns>
		public async Task Androidpublisher_purchases_subscriptions_refundAsync(string packageName, string subscriptionId, string token, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidpublisher/v3/applications/"+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/purchases/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/tokens/"+ (token==null? "" : System.Uri.EscapeDataString(token))+":refund";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Refunds and immediately revokes a user's subscription purchase. Access to the subscription will be terminated immediately and it will stop recurring.
		/// Androidpublisher_purchases_subscriptions_revoke androidpublisher/v3/applications/{packageName}/purchases/subscriptions/{subscriptionId}/tokens/{token}:revoke
		/// </summary>
		/// <param name="packageName">The package name of the application for which this subscription was purchased (for example, 'com.some.thing').</param>
		/// <param name="subscriptionId">The purchased subscription ID (for example, 'monthly001').</param>
		/// <param name="token">The token provided to the user's device when the subscription was purchased.</param>
		/// <returns>Successful response</returns>
		public async Task Androidpublisher_purchases_subscriptions_revokeAsync(string packageName, string subscriptionId, string token, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidpublisher/v3/applications/"+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/purchases/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/tokens/"+ (token==null? "" : System.Uri.EscapeDataString(token))+":revoke";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get metadata about a subscription
		/// Androidpublisher_purchases_subscriptionsv2_get androidpublisher/v3/applications/{packageName}/purchases/subscriptionsv2/tokens/{token}
		/// </summary>
		/// <param name="packageName">The package of the application for which this subscription was purchased (for example, 'com.some.thing').</param>
		/// <param name="token">Required. The token provided to the user's device when the subscription was purchased.</param>
		/// <returns>Successful response</returns>
		public async Task<SubscriptionPurchaseV2> Androidpublisher_purchases_subscriptionsv2_getAsync(string packageName, string token, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidpublisher/v3/applications/"+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/purchases/subscriptionsv2/tokens/"+ (token==null? "" : System.Uri.EscapeDataString(token));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SubscriptionPurchaseV2>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Revoke a subscription purchase for the user.
		/// Androidpublisher_purchases_subscriptionsv2_revoke androidpublisher/v3/applications/{packageName}/purchases/subscriptionsv2/tokens/{token}:revoke
		/// </summary>
		/// <param name="packageName">Required. The package of the application for which this subscription was purchased (for example, 'com.some.thing').</param>
		/// <param name="token">Required. The token provided to the user's device when the subscription was purchased.</param>
		/// <returns>Successful response</returns>
		public async Task<RevokeSubscriptionPurchaseResponse> Androidpublisher_purchases_subscriptionsv2_revokeAsync(string packageName, string token, RevokeSubscriptionPurchaseRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidpublisher/v3/applications/"+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/purchases/subscriptionsv2/tokens/"+ (token==null? "" : System.Uri.EscapeDataString(token))+":revoke";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<RevokeSubscriptionPurchaseResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the purchases that were canceled, refunded or charged-back.
		/// Androidpublisher_purchases_voidedpurchases_list androidpublisher/v3/applications/{packageName}/purchases/voidedpurchases
		/// </summary>
		/// <param name="packageName">The package name of the application for which voided purchases need to be returned (for example, 'com.some.thing').</param>
		/// <param name="endTime">The time, in milliseconds since the Epoch, of the newest voided purchase that you want to see in the response. The value of this parameter cannot be greater than the current time and is ignored if a pagination token is set. Default value is current time. Note: This filter is applied on the time at which the record is seen as voided by our systems and not the actual voided time returned in the response.</param>
		/// <param name="maxResults">Defines how many results the list operation should return. The default number depends on the resource collection.</param>
		/// <param name="startIndex">Defines the index of the first element to return. This can only be used if indexed paging is enabled.</param>
		/// <param name="startTime">The time, in milliseconds since the Epoch, of the oldest voided purchase that you want to see in the response. The value of this parameter cannot be older than 30 days and is ignored if a pagination token is set. Default value is current time minus 30 days. Note: This filter is applied on the time at which the record is seen as voided by our systems and not the actual voided time returned in the response.</param>
		/// <param name="token">Defines the token of the page to return, usually taken from TokenPagination. This can only be used if token paging is enabled.</param>
		/// <param name="type">The type of voided purchases that you want to see in the response. Possible values are: 0. Only voided in-app product purchases will be returned in the response. This is the default value. 1. Both voided in-app purchases and voided subscription purchases will be returned in the response. Note: Before requesting to receive voided subscription purchases, you must switch to use orderId in the response which uniquely identifies one-time purchases and subscriptions. Otherwise, you will receive multiple subscription orders with the same PurchaseToken, because subscription renewal orders share the same PurchaseToken.</param>
		/// <returns>Successful response</returns>
		public async Task<VoidedPurchasesListResponse> Androidpublisher_purchases_voidedpurchases_listAsync(string packageName, string endTime, int maxResults, int startIndex, string startTime, string token, int type, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidpublisher/v3/applications/"+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/purchases/voidedpurchases&endTime=" + (endTime==null? "" : System.Uri.EscapeDataString(endTime))+"&maxResults="+maxResults+"&startIndex="+startIndex+"&startTime=" + (startTime==null? "" : System.Uri.EscapeDataString(startTime))+"&token=" + (token==null? "" : System.Uri.EscapeDataString(token))+"&type="+type;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<VoidedPurchasesListResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all reviews.
		/// Androidpublisher_reviews_list androidpublisher/v3/applications/{packageName}/reviews
		/// </summary>
		/// <param name="packageName">Package name of the app.</param>
		/// <param name="maxResults">How many results the list operation should return.</param>
		/// <param name="startIndex">The index of the first element to return.</param>
		/// <param name="token">Pagination token. If empty, list starts at the first review.</param>
		/// <param name="translationLanguage">Language localization code.</param>
		/// <returns>Successful response</returns>
		public async Task<ReviewsListResponse> Androidpublisher_reviews_listAsync(string packageName, int maxResults, int startIndex, string token, string translationLanguage, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidpublisher/v3/applications/"+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/reviews&maxResults="+maxResults+"&startIndex="+startIndex+"&token=" + (token==null? "" : System.Uri.EscapeDataString(token))+"&translationLanguage=" + (translationLanguage==null? "" : System.Uri.EscapeDataString(translationLanguage));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ReviewsListResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a single review.
		/// Androidpublisher_reviews_get androidpublisher/v3/applications/{packageName}/reviews/{reviewId}
		/// </summary>
		/// <param name="packageName">Package name of the app.</param>
		/// <param name="reviewId">Unique identifier for a review.</param>
		/// <param name="translationLanguage">Language localization code.</param>
		/// <returns>Successful response</returns>
		public async Task<Review> Androidpublisher_reviews_getAsync(string packageName, string reviewId, string translationLanguage, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidpublisher/v3/applications/"+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/reviews/"+ (reviewId==null? "" : System.Uri.EscapeDataString(reviewId))+"&translationLanguage=" + (translationLanguage==null? "" : System.Uri.EscapeDataString(translationLanguage));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Review>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Replies to a single review, or updates an existing reply.
		/// Androidpublisher_reviews_reply androidpublisher/v3/applications/{packageName}/reviews/{reviewId}:reply
		/// </summary>
		/// <param name="packageName">Package name of the app.</param>
		/// <param name="reviewId">Unique identifier for a review.</param>
		/// <returns>Successful response</returns>
		public async Task<ReviewsReplyResponse> Androidpublisher_reviews_replyAsync(string packageName, string reviewId, ReviewsReplyRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidpublisher/v3/applications/"+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/reviews/"+ (reviewId==null? "" : System.Uri.EscapeDataString(reviewId))+":reply";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ReviewsReplyResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all subscriptions under a given app.
		/// Androidpublisher_monetization_subscriptions_list androidpublisher/v3/applications/{packageName}/subscriptions
		/// </summary>
		/// <param name="packageName">Required. The parent app (package name) for which the subscriptions should be read.</param>
		/// <param name="pageSize">The maximum number of subscriptions to return. The service may return fewer than this value. If unspecified, at most 50 subscriptions will be returned. The maximum value is 1000; values above 1000 will be coerced to 1000.</param>
		/// <param name="pageToken">A page token, received from a previous `ListSubscriptions` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListSubscriptions` must match the call that provided the page token.</param>
		/// <param name="showArchived">Whether archived subscriptions should be included in the response. Defaults to false.</param>
		/// <returns>Successful response</returns>
		public async Task<ListSubscriptionsResponse> Androidpublisher_monetization_subscriptions_listAsync(string packageName, int pageSize, string pageToken, bool showArchived, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidpublisher/v3/applications/"+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/subscriptions&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&showArchived="+showArchived;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListSubscriptionsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new subscription. Newly added base plans will remain in draft state until activated.
		/// Androidpublisher_monetization_subscriptions_create androidpublisher/v3/applications/{packageName}/subscriptions
		/// </summary>
		/// <param name="packageName">Required. The parent app (package name) for which the subscription should be created. Must be equal to the package_name field on the Subscription resource.</param>
		/// <param name="productId">Required. The ID to use for the subscription. For the requirements on this format, see the documentation of the product_id field on the Subscription resource.</param>
		/// <param name="regionsVersion_version">Required. A string representing the version of available regions being used for the specified resource. Regional prices for the resource have to be specified according to the information published in [this article](https://support.google.com/googleplay/android-developer/answer/10532353). Each time the supported locations substantially change, the version will be incremented. Using this field will ensure that creating and updating the resource with an older region's version and set of regional prices and currencies will succeed even though a new version is available. The latest version is 2022/02.</param>
		/// <returns>Successful response</returns>
		public async Task<Subscription> Androidpublisher_monetization_subscriptions_createAsync(string packageName, string productId, string regionsVersion_version, Subscription requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidpublisher/v3/applications/"+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/subscriptions&productId=" + (productId==null? "" : System.Uri.EscapeDataString(productId))+"&regionsVersion.version=" + (regionsVersion_version==null? "" : System.Uri.EscapeDataString(regionsVersion_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Subscription>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a subscription. A subscription can only be deleted if it has never had a base plan published.
		/// Androidpublisher_monetization_subscriptions_delete androidpublisher/v3/applications/{packageName}/subscriptions/{productId}
		/// </summary>
		/// <param name="packageName">Required. The parent app (package name) of the app of the subscription to delete.</param>
		/// <param name="productId">Required. The unique product ID of the subscription to delete.</param>
		/// <returns>Successful response</returns>
		public async Task Androidpublisher_monetization_subscriptions_deleteAsync(string packageName, string productId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidpublisher/v3/applications/"+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/subscriptions/"+ (productId==null? "" : System.Uri.EscapeDataString(productId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Reads a single subscription.
		/// Androidpublisher_monetization_subscriptions_get androidpublisher/v3/applications/{packageName}/subscriptions/{productId}
		/// </summary>
		/// <param name="packageName">Required. The parent app (package name) of the subscription to get.</param>
		/// <param name="productId">Required. The unique product ID of the subscription to get.</param>
		/// <returns>Successful response</returns>
		public async Task<Subscription> Androidpublisher_monetization_subscriptions_getAsync(string packageName, string productId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidpublisher/v3/applications/"+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/subscriptions/"+ (productId==null? "" : System.Uri.EscapeDataString(productId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Subscription>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing subscription.
		/// Androidpublisher_monetization_subscriptions_patch androidpublisher/v3/applications/{packageName}/subscriptions/{productId}
		/// </summary>
		/// <param name="packageName">Immutable. Package name of the parent app.</param>
		/// <param name="productId">Immutable. Unique product ID of the product. Unique within the parent app. Product IDs must be composed of lower-case letters (a-z), numbers (0-9), underscores (_) and dots (.). It must start with a lower-case letter or number, and be between 1 and 40 (inclusive) characters in length.</param>
		/// <param name="allowMissing">Optional. If set to true, and the subscription with the given package_name and product_id doesn't exist, the subscription will be created. If a new subscription is created, update_mask is ignored.</param>
		/// <param name="latencyTolerance">Optional. The latency tolerance for the propagation of this product update. Defaults to latency-sensitive.</param>
		/// <param name="regionsVersion_version">Required. A string representing the version of available regions being used for the specified resource. Regional prices for the resource have to be specified according to the information published in [this article](https://support.google.com/googleplay/android-developer/answer/10532353). Each time the supported locations substantially change, the version will be incremented. Using this field will ensure that creating and updating the resource with an older region's version and set of regional prices and currencies will succeed even though a new version is available. The latest version is 2022/02.</param>
		/// <param name="updateMask">Required. The list of fields to be updated.</param>
		/// <returns>Successful response</returns>
		public async Task<Subscription> Androidpublisher_monetization_subscriptions_patchAsync(string packageName, string productId, bool allowMissing, ActivateBasePlanRequestLatencyTolerance latencyTolerance, string regionsVersion_version, string updateMask, Subscription requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidpublisher/v3/applications/"+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/subscriptions/"+ (productId==null? "" : System.Uri.EscapeDataString(productId))+"&allowMissing="+allowMissing+"&latencyTolerance=" + latencyTolerance+"&regionsVersion.version=" + (regionsVersion_version==null? "" : System.Uri.EscapeDataString(regionsVersion_version))+"&updateMask=" + (updateMask==null? "" : System.Uri.EscapeDataString(updateMask));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Subscription>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a base plan. Can only be done for draft base plans. This action is irreversible.
		/// Androidpublisher_monetization_subscriptions_basePlans_delete androidpublisher/v3/applications/{packageName}/subscriptions/{productId}/basePlans/{basePlanId}
		/// </summary>
		/// <param name="packageName">Required. The parent app (package name) of the base plan to delete.</param>
		/// <param name="productId">Required. The parent subscription (ID) of the base plan to delete.</param>
		/// <param name="basePlanId">Required. The unique offer ID of the base plan to delete.</param>
		/// <returns>Successful response</returns>
		public async Task Androidpublisher_monetization_subscriptions_basePlans_deleteAsync(string packageName, string productId, string basePlanId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidpublisher/v3/applications/"+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/subscriptions/"+ (productId==null? "" : System.Uri.EscapeDataString(productId))+"/basePlans/"+ (basePlanId==null? "" : System.Uri.EscapeDataString(basePlanId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all offers under a given subscription.
		/// Androidpublisher_monetization_subscriptions_basePlans_offers_list androidpublisher/v3/applications/{packageName}/subscriptions/{productId}/basePlans/{basePlanId}/offers
		/// </summary>
		/// <param name="packageName">Required. The parent app (package name) for which the subscriptions should be read.</param>
		/// <param name="productId">Required. The parent subscription (ID) for which the offers should be read. May be specified as '-' to read all offers under an app.</param>
		/// <param name="basePlanId">Required. The parent base plan (ID) for which the offers should be read. May be specified as '-' to read all offers under a subscription or an app. Must be specified as '-' if product_id is specified as '-'.</param>
		/// <param name="pageSize">The maximum number of subscriptions to return. The service may return fewer than this value. If unspecified, at most 50 subscriptions will be returned. The maximum value is 1000; values above 1000 will be coerced to 1000.</param>
		/// <param name="pageToken">A page token, received from a previous `ListSubscriptionsOffers` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListSubscriptionOffers` must match the call that provided the page token.</param>
		/// <returns>Successful response</returns>
		public async Task<ListSubscriptionOffersResponse> Androidpublisher_monetization_subscriptions_basePlans_offers_listAsync(string packageName, string productId, string basePlanId, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidpublisher/v3/applications/"+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/subscriptions/"+ (productId==null? "" : System.Uri.EscapeDataString(productId))+"/basePlans/"+ (basePlanId==null? "" : System.Uri.EscapeDataString(basePlanId))+"/offers&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListSubscriptionOffersResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new subscription offer. Only auto-renewing base plans can have subscription offers. The offer state will be DRAFT until it is activated.
		/// Androidpublisher_monetization_subscriptions_basePlans_offers_create androidpublisher/v3/applications/{packageName}/subscriptions/{productId}/basePlans/{basePlanId}/offers
		/// </summary>
		/// <param name="packageName">Required. The parent app (package name) for which the offer should be created. Must be equal to the package_name field on the Subscription resource.</param>
		/// <param name="productId">Required. The parent subscription (ID) for which the offer should be created. Must be equal to the product_id field on the SubscriptionOffer resource.</param>
		/// <param name="basePlanId">Required. The parent base plan (ID) for which the offer should be created. Must be equal to the base_plan_id field on the SubscriptionOffer resource.</param>
		/// <param name="offerId">Required. The ID to use for the offer. For the requirements on this format, see the documentation of the offer_id field on the SubscriptionOffer resource.</param>
		/// <param name="regionsVersion_version">Required. A string representing the version of available regions being used for the specified resource. Regional prices for the resource have to be specified according to the information published in [this article](https://support.google.com/googleplay/android-developer/answer/10532353). Each time the supported locations substantially change, the version will be incremented. Using this field will ensure that creating and updating the resource with an older region's version and set of regional prices and currencies will succeed even though a new version is available. The latest version is 2022/02.</param>
		/// <returns>Successful response</returns>
		public async Task<SubscriptionOffer> Androidpublisher_monetization_subscriptions_basePlans_offers_createAsync(string packageName, string productId, string basePlanId, string offerId, string regionsVersion_version, SubscriptionOffer requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidpublisher/v3/applications/"+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/subscriptions/"+ (productId==null? "" : System.Uri.EscapeDataString(productId))+"/basePlans/"+ (basePlanId==null? "" : System.Uri.EscapeDataString(basePlanId))+"/offers&offerId=" + (offerId==null? "" : System.Uri.EscapeDataString(offerId))+"&regionsVersion.version=" + (regionsVersion_version==null? "" : System.Uri.EscapeDataString(regionsVersion_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SubscriptionOffer>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a subscription offer. Can only be done for draft offers. This action is irreversible.
		/// Androidpublisher_monetization_subscriptions_basePlans_offers_delete androidpublisher/v3/applications/{packageName}/subscriptions/{productId}/basePlans/{basePlanId}/offers/{offerId}
		/// </summary>
		/// <param name="packageName">Required. The parent app (package name) of the offer to delete.</param>
		/// <param name="productId">Required. The parent subscription (ID) of the offer to delete.</param>
		/// <param name="basePlanId">Required. The parent base plan (ID) of the offer to delete.</param>
		/// <param name="offerId">Required. The unique offer ID of the offer to delete.</param>
		/// <returns>Successful response</returns>
		public async Task Androidpublisher_monetization_subscriptions_basePlans_offers_deleteAsync(string packageName, string productId, string basePlanId, string offerId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidpublisher/v3/applications/"+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/subscriptions/"+ (productId==null? "" : System.Uri.EscapeDataString(productId))+"/basePlans/"+ (basePlanId==null? "" : System.Uri.EscapeDataString(basePlanId))+"/offers/"+ (offerId==null? "" : System.Uri.EscapeDataString(offerId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Reads a single offer
		/// Androidpublisher_monetization_subscriptions_basePlans_offers_get androidpublisher/v3/applications/{packageName}/subscriptions/{productId}/basePlans/{basePlanId}/offers/{offerId}
		/// </summary>
		/// <param name="packageName">Required. The parent app (package name) of the offer to get.</param>
		/// <param name="productId">Required. The parent subscription (ID) of the offer to get.</param>
		/// <param name="basePlanId">Required. The parent base plan (ID) of the offer to get.</param>
		/// <param name="offerId">Required. The unique offer ID of the offer to get.</param>
		/// <returns>Successful response</returns>
		public async Task<SubscriptionOffer> Androidpublisher_monetization_subscriptions_basePlans_offers_getAsync(string packageName, string productId, string basePlanId, string offerId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidpublisher/v3/applications/"+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/subscriptions/"+ (productId==null? "" : System.Uri.EscapeDataString(productId))+"/basePlans/"+ (basePlanId==null? "" : System.Uri.EscapeDataString(basePlanId))+"/offers/"+ (offerId==null? "" : System.Uri.EscapeDataString(offerId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SubscriptionOffer>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing subscription offer.
		/// Androidpublisher_monetization_subscriptions_basePlans_offers_patch androidpublisher/v3/applications/{packageName}/subscriptions/{productId}/basePlans/{basePlanId}/offers/{offerId}
		/// </summary>
		/// <param name="packageName">Required. Immutable. The package name of the app the parent subscription belongs to.</param>
		/// <param name="productId">Required. Immutable. The ID of the parent subscription this offer belongs to.</param>
		/// <param name="basePlanId">Required. Immutable. The ID of the base plan to which this offer is an extension.</param>
		/// <param name="offerId">Required. Immutable. Unique ID of this subscription offer. Must be unique within the base plan.</param>
		/// <param name="allowMissing">Optional. If set to true, and the subscription offer with the given package_name, product_id, base_plan_id and offer_id doesn't exist, an offer will be created. If a new offer is created, update_mask is ignored.</param>
		/// <param name="latencyTolerance">Optional. The latency tolerance for the propagation of this product update. Defaults to latency-sensitive.</param>
		/// <param name="regionsVersion_version">Required. A string representing the version of available regions being used for the specified resource. Regional prices for the resource have to be specified according to the information published in [this article](https://support.google.com/googleplay/android-developer/answer/10532353). Each time the supported locations substantially change, the version will be incremented. Using this field will ensure that creating and updating the resource with an older region's version and set of regional prices and currencies will succeed even though a new version is available. The latest version is 2022/02.</param>
		/// <param name="updateMask">Required. The list of fields to be updated.</param>
		/// <returns>Successful response</returns>
		public async Task<SubscriptionOffer> Androidpublisher_monetization_subscriptions_basePlans_offers_patchAsync(string packageName, string productId, string basePlanId, string offerId, bool allowMissing, ActivateBasePlanRequestLatencyTolerance latencyTolerance, string regionsVersion_version, string updateMask, SubscriptionOffer requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidpublisher/v3/applications/"+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/subscriptions/"+ (productId==null? "" : System.Uri.EscapeDataString(productId))+"/basePlans/"+ (basePlanId==null? "" : System.Uri.EscapeDataString(basePlanId))+"/offers/"+ (offerId==null? "" : System.Uri.EscapeDataString(offerId))+"&allowMissing="+allowMissing+"&latencyTolerance=" + latencyTolerance+"&regionsVersion.version=" + (regionsVersion_version==null? "" : System.Uri.EscapeDataString(regionsVersion_version))+"&updateMask=" + (updateMask==null? "" : System.Uri.EscapeDataString(updateMask));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SubscriptionOffer>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Activates a subscription offer. Once activated, subscription offers will be available to new subscribers.
		/// Androidpublisher_monetization_subscriptions_basePlans_offers_activate androidpublisher/v3/applications/{packageName}/subscriptions/{productId}/basePlans/{basePlanId}/offers/{offerId}:activate
		/// </summary>
		/// <param name="packageName">Required. The parent app (package name) of the offer to activate.</param>
		/// <param name="productId">Required. The parent subscription (ID) of the offer to activate.</param>
		/// <param name="basePlanId">Required. The parent base plan (ID) of the offer to activate.</param>
		/// <param name="offerId">Required. The unique offer ID of the offer to activate.</param>
		/// <returns>Successful response</returns>
		public async Task<SubscriptionOffer> Androidpublisher_monetization_subscriptions_basePlans_offers_activateAsync(string packageName, string productId, string basePlanId, string offerId, ActivateSubscriptionOfferRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidpublisher/v3/applications/"+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/subscriptions/"+ (productId==null? "" : System.Uri.EscapeDataString(productId))+"/basePlans/"+ (basePlanId==null? "" : System.Uri.EscapeDataString(basePlanId))+"/offers/"+ (offerId==null? "" : System.Uri.EscapeDataString(offerId))+":activate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SubscriptionOffer>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deactivates a subscription offer. Once deactivated, existing subscribers will maintain their subscription, but the offer will become unavailable to new subscribers.
		/// Androidpublisher_monetization_subscriptions_basePlans_offers_deactivate androidpublisher/v3/applications/{packageName}/subscriptions/{productId}/basePlans/{basePlanId}/offers/{offerId}:deactivate
		/// </summary>
		/// <param name="packageName">Required. The parent app (package name) of the offer to deactivate.</param>
		/// <param name="productId">Required. The parent subscription (ID) of the offer to deactivate.</param>
		/// <param name="basePlanId">Required. The parent base plan (ID) of the offer to deactivate.</param>
		/// <param name="offerId">Required. The unique offer ID of the offer to deactivate.</param>
		/// <returns>Successful response</returns>
		public async Task<SubscriptionOffer> Androidpublisher_monetization_subscriptions_basePlans_offers_deactivateAsync(string packageName, string productId, string basePlanId, string offerId, DeactivateSubscriptionOfferRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidpublisher/v3/applications/"+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/subscriptions/"+ (productId==null? "" : System.Uri.EscapeDataString(productId))+"/basePlans/"+ (basePlanId==null? "" : System.Uri.EscapeDataString(basePlanId))+"/offers/"+ (offerId==null? "" : System.Uri.EscapeDataString(offerId))+":deactivate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SubscriptionOffer>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Reads one or more subscription offers.
		/// Androidpublisher_monetization_subscriptions_basePlans_offers_batchGet androidpublisher/v3/applications/{packageName}/subscriptions/{productId}/basePlans/{basePlanId}/offers:batchGet
		/// </summary>
		/// <param name="packageName">Required. The parent app (package name) for which the subscriptions should be created or updated. Must be equal to the package_name field on all the requests.</param>
		/// <param name="productId">Required. The product ID of the parent subscription, if all updated offers belong to the same subscription. If this request spans multiple subscriptions, set this field to "-". Must be set.</param>
		/// <param name="basePlanId">Required. The parent base plan (ID) for which the offers should be read. May be specified as '-' to read offers from multiple base plans.</param>
		/// <returns>Successful response</returns>
		public async Task<BatchGetSubscriptionOffersResponse> Androidpublisher_monetization_subscriptions_basePlans_offers_batchGetAsync(string packageName, string productId, string basePlanId, BatchGetSubscriptionOffersRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidpublisher/v3/applications/"+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/subscriptions/"+ (productId==null? "" : System.Uri.EscapeDataString(productId))+"/basePlans/"+ (basePlanId==null? "" : System.Uri.EscapeDataString(basePlanId))+"/offers:batchGet";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BatchGetSubscriptionOffersResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a batch of subscription offers. Set the latencyTolerance field on nested requests to PRODUCT_UPDATE_LATENCY_TOLERANCE_LATENCY_TOLERANT to achieve maximum update throughput.
		/// Androidpublisher_monetization_subscriptions_basePlans_offers_batchUpdate androidpublisher/v3/applications/{packageName}/subscriptions/{productId}/basePlans/{basePlanId}/offers:batchUpdate
		/// </summary>
		/// <param name="packageName">Required. The parent app (package name) of the updated subscription offers. Must be equal to the package_name field on all the updated SubscriptionOffer resources.</param>
		/// <param name="productId">Required. The product ID of the parent subscription, if all updated offers belong to the same subscription. If this request spans multiple subscriptions, set this field to "-". Must be set.</param>
		/// <param name="basePlanId">Required. The parent base plan (ID) for which the offers should be updated. May be specified as '-' to update offers from multiple base plans.</param>
		/// <returns>Successful response</returns>
		public async Task<BatchUpdateSubscriptionOffersResponse> Androidpublisher_monetization_subscriptions_basePlans_offers_batchUpdateAsync(string packageName, string productId, string basePlanId, BatchUpdateSubscriptionOffersRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidpublisher/v3/applications/"+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/subscriptions/"+ (productId==null? "" : System.Uri.EscapeDataString(productId))+"/basePlans/"+ (basePlanId==null? "" : System.Uri.EscapeDataString(basePlanId))+"/offers:batchUpdate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BatchUpdateSubscriptionOffersResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a batch of subscription offer states. Set the latencyTolerance field on nested requests to PRODUCT_UPDATE_LATENCY_TOLERANCE_LATENCY_TOLERANT to achieve maximum update throughput.
		/// Androidpublisher_monetization_subscriptions_basePlans_offers_batchUpdateStates androidpublisher/v3/applications/{packageName}/subscriptions/{productId}/basePlans/{basePlanId}/offers:batchUpdateStates
		/// </summary>
		/// <param name="packageName">Required. The parent app (package name) of the updated subscription offers. Must be equal to the package_name field on all the updated SubscriptionOffer resources.</param>
		/// <param name="productId">Required. The product ID of the parent subscription, if all updated offers belong to the same subscription. If this request spans multiple subscriptions, set this field to "-". Must be set.</param>
		/// <param name="basePlanId">Required. The parent base plan (ID) for which the offers should be updated. May be specified as '-' to update offers from multiple base plans.</param>
		/// <returns>Successful response</returns>
		public async Task<BatchUpdateSubscriptionOfferStatesResponse> Androidpublisher_monetization_subscriptions_basePlans_offers_batchUpdateStatesAsync(string packageName, string productId, string basePlanId, BatchUpdateSubscriptionOfferStatesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidpublisher/v3/applications/"+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/subscriptions/"+ (productId==null? "" : System.Uri.EscapeDataString(productId))+"/basePlans/"+ (basePlanId==null? "" : System.Uri.EscapeDataString(basePlanId))+"/offers:batchUpdateStates";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BatchUpdateSubscriptionOfferStatesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Activates a base plan. Once activated, base plans will be available to new subscribers.
		/// Androidpublisher_monetization_subscriptions_basePlans_activate androidpublisher/v3/applications/{packageName}/subscriptions/{productId}/basePlans/{basePlanId}:activate
		/// </summary>
		/// <param name="packageName">Required. The parent app (package name) of the base plan to activate.</param>
		/// <param name="productId">Required. The parent subscription (ID) of the base plan to activate.</param>
		/// <param name="basePlanId">Required. The unique base plan ID of the base plan to activate.</param>
		/// <returns>Successful response</returns>
		public async Task<Subscription> Androidpublisher_monetization_subscriptions_basePlans_activateAsync(string packageName, string productId, string basePlanId, ActivateBasePlanRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidpublisher/v3/applications/"+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/subscriptions/"+ (productId==null? "" : System.Uri.EscapeDataString(productId))+"/basePlans/"+ (basePlanId==null? "" : System.Uri.EscapeDataString(basePlanId))+":activate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Subscription>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deactivates a base plan. Once deactivated, the base plan will become unavailable to new subscribers, but existing subscribers will maintain their subscription
		/// Androidpublisher_monetization_subscriptions_basePlans_deactivate androidpublisher/v3/applications/{packageName}/subscriptions/{productId}/basePlans/{basePlanId}:deactivate
		/// </summary>
		/// <param name="packageName">Required. The parent app (package name) of the base plan to deactivate.</param>
		/// <param name="productId">Required. The parent subscription (ID) of the base plan to deactivate.</param>
		/// <param name="basePlanId">Required. The unique base plan ID of the base plan to deactivate.</param>
		/// <returns>Successful response</returns>
		public async Task<Subscription> Androidpublisher_monetization_subscriptions_basePlans_deactivateAsync(string packageName, string productId, string basePlanId, DeactivateBasePlanRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidpublisher/v3/applications/"+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/subscriptions/"+ (productId==null? "" : System.Uri.EscapeDataString(productId))+"/basePlans/"+ (basePlanId==null? "" : System.Uri.EscapeDataString(basePlanId))+":deactivate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Subscription>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Migrates subscribers who are receiving an historical subscription price to the currently-offered price for the specified region. Requests will cause price change notifications to be sent to users who are currently receiving an historical price older than the supplied timestamp. Subscribers who do not agree to the new price will have their subscription ended at the next renewal.
		/// Androidpublisher_monetization_subscriptions_basePlans_migratePrices androidpublisher/v3/applications/{packageName}/subscriptions/{productId}/basePlans/{basePlanId}:migratePrices
		/// </summary>
		/// <param name="packageName">Required. Package name of the parent app. Must be equal to the package_name field on the Subscription resource.</param>
		/// <param name="productId">Required. The ID of the subscription to update. Must be equal to the product_id field on the Subscription resource.</param>
		/// <param name="basePlanId">Required. The unique base plan ID of the base plan to update prices on.</param>
		/// <returns>Successful response</returns>
		public async Task<MigrateBasePlanPricesResponse> Androidpublisher_monetization_subscriptions_basePlans_migratePricesAsync(string packageName, string productId, string basePlanId, MigrateBasePlanPricesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidpublisher/v3/applications/"+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/subscriptions/"+ (productId==null? "" : System.Uri.EscapeDataString(productId))+"/basePlans/"+ (basePlanId==null? "" : System.Uri.EscapeDataString(basePlanId))+":migratePrices";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<MigrateBasePlanPricesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Batch variant of the MigrateBasePlanPrices endpoint. Set the latencyTolerance field on nested requests to PRODUCT_UPDATE_LATENCY_TOLERANCE_LATENCY_TOLERANT to achieve maximum update throughput.
		/// Androidpublisher_monetization_subscriptions_basePlans_batchMigratePrices androidpublisher/v3/applications/{packageName}/subscriptions/{productId}/basePlans:batchMigratePrices
		/// </summary>
		/// <param name="packageName">Required. The parent app (package name) for which the subscriptions should be created or updated. Must be equal to the package_name field on all the Subscription resources.</param>
		/// <param name="productId">Required. The product ID of the parent subscription, if all updated offers belong to the same subscription. If this batch update spans multiple subscriptions, set this field to "-". Must be set.</param>
		/// <returns>Successful response</returns>
		public async Task<BatchMigrateBasePlanPricesResponse> Androidpublisher_monetization_subscriptions_basePlans_batchMigratePricesAsync(string packageName, string productId, BatchMigrateBasePlanPricesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidpublisher/v3/applications/"+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/subscriptions/"+ (productId==null? "" : System.Uri.EscapeDataString(productId))+"/basePlans:batchMigratePrices";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BatchMigrateBasePlanPricesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Activates or deactivates base plans across one or multiple subscriptions. Set the latencyTolerance field on nested requests to PRODUCT_UPDATE_LATENCY_TOLERANCE_LATENCY_TOLERANT to achieve maximum update throughput.
		/// Androidpublisher_monetization_subscriptions_basePlans_batchUpdateStates androidpublisher/v3/applications/{packageName}/subscriptions/{productId}/basePlans:batchUpdateStates
		/// </summary>
		/// <param name="packageName">Required. The parent app (package name) of the updated base plans.</param>
		/// <param name="productId">Required. The product ID of the parent subscription, if all updated base plans belong to the same subscription. If this batch update spans multiple subscriptions, set this field to "-". Must be set.</param>
		/// <returns>Successful response</returns>
		public async Task<BatchUpdateBasePlanStatesResponse> Androidpublisher_monetization_subscriptions_basePlans_batchUpdateStatesAsync(string packageName, string productId, BatchUpdateBasePlanStatesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidpublisher/v3/applications/"+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/subscriptions/"+ (productId==null? "" : System.Uri.EscapeDataString(productId))+"/basePlans:batchUpdateStates";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BatchUpdateBasePlanStatesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Archives a subscription. Can only be done if at least one base plan was active in the past, and no base plan is available for new or existing subscribers currently. This action is irreversible, and the subscription ID will remain reserved.
		/// Androidpublisher_monetization_subscriptions_archive androidpublisher/v3/applications/{packageName}/subscriptions/{productId}:archive
		/// </summary>
		/// <param name="packageName">Required. The parent app (package name) of the app of the subscription to delete.</param>
		/// <param name="productId">Required. The unique product ID of the subscription to delete.</param>
		/// <returns>Successful response</returns>
		public async Task<Subscription> Androidpublisher_monetization_subscriptions_archiveAsync(string packageName, string productId, ArchiveSubscriptionRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidpublisher/v3/applications/"+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/subscriptions/"+ (productId==null? "" : System.Uri.EscapeDataString(productId))+":archive";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Subscription>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Reads one or more subscriptions.
		/// Androidpublisher_monetization_subscriptions_batchGet androidpublisher/v3/applications/{packageName}/subscriptions:batchGet
		/// </summary>
		/// <param name="packageName">Required. The parent app (package name) for which the subscriptions should be retrieved. Must be equal to the package_name field on all the requests.</param>
		/// <param name="productIds">Required. A list of up to 100 subscription product IDs to retrieve. All the IDs must be different.</param>
		/// <returns>Successful response</returns>
		public async Task<BatchGetSubscriptionsResponse> Androidpublisher_monetization_subscriptions_batchGetAsync(string packageName, string[] productIds, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidpublisher/v3/applications/"+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/subscriptions:batchGet&"+string.Join("&", productIds.Select(z => $"productIds={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BatchGetSubscriptionsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a batch of subscriptions. Set the latencyTolerance field on nested requests to PRODUCT_UPDATE_LATENCY_TOLERANCE_LATENCY_TOLERANT to achieve maximum update throughput.
		/// Androidpublisher_monetization_subscriptions_batchUpdate androidpublisher/v3/applications/{packageName}/subscriptions:batchUpdate
		/// </summary>
		/// <param name="packageName">Required. The parent app (package name) for which the subscriptions should be updated. Must be equal to the package_name field on all the Subscription resources.</param>
		/// <returns>Successful response</returns>
		public async Task<BatchUpdateSubscriptionsResponse> Androidpublisher_monetization_subscriptions_batchUpdateAsync(string packageName, BatchUpdateSubscriptionsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidpublisher/v3/applications/"+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/subscriptions:batchUpdate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BatchUpdateSubscriptionsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the list of previously created system APK variants.
		/// Androidpublisher_systemapks_variants_list androidpublisher/v3/applications/{packageName}/systemApks/{versionCode}/variants
		/// </summary>
		/// <param name="packageName">Package name of the app.</param>
		/// <param name="versionCode">The version code of the App Bundle.</param>
		/// <returns>Successful response</returns>
		public async Task<SystemApksListResponse> Androidpublisher_systemapks_variants_listAsync(string packageName, string versionCode, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidpublisher/v3/applications/"+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/systemApks/"+ (versionCode==null? "" : System.Uri.EscapeDataString(versionCode))+"/variants";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SystemApksListResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates an APK which is suitable for inclusion in a system image from an already uploaded Android App Bundle.
		/// Androidpublisher_systemapks_variants_create androidpublisher/v3/applications/{packageName}/systemApks/{versionCode}/variants
		/// </summary>
		/// <param name="packageName">Package name of the app.</param>
		/// <param name="versionCode">The version code of the App Bundle.</param>
		/// <returns>Successful response</returns>
		public async Task<Variant> Androidpublisher_systemapks_variants_createAsync(string packageName, string versionCode, Variant requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidpublisher/v3/applications/"+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/systemApks/"+ (versionCode==null? "" : System.Uri.EscapeDataString(versionCode))+"/variants";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Variant>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a previously created system APK variant.
		/// Androidpublisher_systemapks_variants_get androidpublisher/v3/applications/{packageName}/systemApks/{versionCode}/variants/{variantId}
		/// </summary>
		/// <param name="packageName">Package name of the app.</param>
		/// <param name="versionCode">The version code of the App Bundle.</param>
		/// <param name="variantId">The ID of a previously created system APK variant.</param>
		/// <returns>Successful response</returns>
		public async Task<Variant> Androidpublisher_systemapks_variants_getAsync(string packageName, string versionCode, int variantId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidpublisher/v3/applications/"+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/systemApks/"+ (versionCode==null? "" : System.Uri.EscapeDataString(versionCode))+"/variants/"+variantId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Variant>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Downloads a previously created system APK which is suitable for inclusion in a system image.
		/// Androidpublisher_systemapks_variants_download androidpublisher/v3/applications/{packageName}/systemApks/{versionCode}/variants/{variantId}:download
		/// </summary>
		/// <param name="packageName">Package name of the app.</param>
		/// <param name="versionCode">The version code of the App Bundle.</param>
		/// <param name="variantId">The ID of a previously created system APK variant.</param>
		/// <returns>Successful response</returns>
		public async Task Androidpublisher_systemapks_variants_downloadAsync(string packageName, string versionCode, int variantId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidpublisher/v3/applications/"+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/systemApks/"+ (versionCode==null? "" : System.Uri.EscapeDataString(versionCode))+"/variants/"+variantId+":download";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Removes all access for the user to the given developer account.
		/// Androidpublisher_users_delete androidpublisher/v3/{name}
		/// </summary>
		/// <param name="name">Required. The name of the user to delete. Format: developers/{developer}/users/{email}</param>
		/// <returns>Successful response</returns>
		public async Task Androidpublisher_users_deleteAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidpublisher/v3/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets an existing external transaction.
		/// Androidpublisher_externaltransactions_getexternaltransaction androidpublisher/v3/{name}
		/// </summary>
		/// <param name="name">Required. The name of the external transaction to retrieve. Format: applications/{package_name}/externalTransactions/{external_transaction}</param>
		/// <returns>Successful response</returns>
		public async Task<ExternalTransaction> Androidpublisher_externaltransactions_getexternaltransactionAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidpublisher/v3/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ExternalTransaction>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates access for the user to the developer account.
		/// Androidpublisher_users_patch androidpublisher/v3/{name}
		/// </summary>
		/// <param name="name">Required. Resource name for this user, following the pattern "developers/{developer}/users/{email}".</param>
		/// <param name="updateMask">Optional. The list of fields to be updated.</param>
		/// <returns>Successful response</returns>
		public async Task<User> Androidpublisher_users_patchAsync(string name, string updateMask, User requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidpublisher/v3/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&updateMask=" + (updateMask==null? "" : System.Uri.EscapeDataString(updateMask));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<User>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Refunds or partially refunds an existing external transaction.
		/// Androidpublisher_externaltransactions_refundexternaltransaction androidpublisher/v3/{name}:refund
		/// </summary>
		/// <param name="name">Required. The name of the external transaction that will be refunded. Format: applications/{package_name}/externalTransactions/{external_transaction}</param>
		/// <returns>Successful response</returns>
		public async Task<ExternalTransaction> Androidpublisher_externaltransactions_refundexternaltransactionAsync(string name, RefundExternalTransactionRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidpublisher/v3/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":refund";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ExternalTransaction>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new external transaction.
		/// Androidpublisher_externaltransactions_createexternaltransaction androidpublisher/v3/{parent}/externalTransactions
		/// </summary>
		/// <param name="parent">Required. The parent resource where this external transaction will be created. Format: applications/{package_name}</param>
		/// <param name="externalTransactionId">Required. The id to use for the external transaction. Must be unique across all other transactions for the app. This value should be 1-63 characters and valid characters are /a-z0-9_-/. Do not use this field to store any Personally Identifiable Information (PII) such as emails. Attempting to store PII in this field may result in requests being blocked.</param>
		/// <returns>Successful response</returns>
		public async Task<ExternalTransaction> Androidpublisher_externaltransactions_createexternaltransactionAsync(string parent, string externalTransactionId, ExternalTransaction requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidpublisher/v3/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/externalTransactions&externalTransactionId=" + (externalTransactionId==null? "" : System.Uri.EscapeDataString(externalTransactionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ExternalTransaction>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Grant access for a user to the given package.
		/// Androidpublisher_grants_create androidpublisher/v3/{parent}/grants
		/// </summary>
		/// <param name="parent">Required. The user which needs permission. Format: developers/{developer}/users/{user}</param>
		/// <returns>Successful response</returns>
		public async Task<Grant> Androidpublisher_grants_createAsync(string parent, Grant requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidpublisher/v3/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/grants";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Grant>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all users with access to a developer account.
		/// Androidpublisher_users_list androidpublisher/v3/{parent}/users
		/// </summary>
		/// <param name="parent">Required. The developer account to fetch users from. Format: developers/{developer}</param>
		/// <param name="pageSize">The maximum number of results to return. This must be set to -1 to disable pagination.</param>
		/// <param name="pageToken">A token received from a previous call to this method, in order to retrieve further results.</param>
		/// <returns>Successful response</returns>
		public async Task<ListUsersResponse> Androidpublisher_users_listAsync(string parent, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidpublisher/v3/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/users&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListUsersResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Grant access for a user to the given developer account.
		/// Androidpublisher_users_create androidpublisher/v3/{parent}/users
		/// </summary>
		/// <param name="parent">Required. The developer account to add the user to. Format: developers/{developer}</param>
		/// <returns>Successful response</returns>
		public async Task<User> Androidpublisher_users_createAsync(string parent, User requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidpublisher/v3/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/users";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<User>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum Androidpublisher_edits_expansionfiles_getExpansionFileType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		expansionFileTypeUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		main = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		patch = 2,
	}
	
	public enum Androidpublisher_edits_images_deleteallImageType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		appImageTypeUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		phoneScreenshots = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		sevenInchScreenshots = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		tenInchScreenshots = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		tvScreenshots = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		wearScreenshots = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		icon = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		featureGraphic = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		tvBanner = 8,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
