//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Associates `members` with a `role`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleIamV1__Binding
	{
		
		/// <summary>
		/// Represents an expression text. Example:
		///
		///    title: "User account presence"
		///    description: "Determines whether the request has a user account"
		///    expression: "size(request.user) > 0"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="condition")]
		public GoogleType__Expr Condition { get; set; }
		
		/// <summary>
		/// Specifies the identities requesting access for a Cloud Platform resource.
		///`members` can have the following values:
		///
		///* `allUsers`: A special identifier that represents anyone who is
		///   on the internet; with or without a Google account.
		///
		///* `allAuthenticatedUsers`: A special identifier that represents anyone
		///   who is authenticated with a Google account or a service account.
		///
		///* `user:{emailid}`: An email address that represents a specific Google
		///   account. For example, `alice@example.com` .
		///
		///
		///* `serviceAccount:{emailid}`: An email address that represents a service
		///   account. For example, `my-other-app@appspot.gserviceaccount.com`.
		///
		///* `group:{emailid}`: An email address that represents a Google group.
		///   For example, `admins@example.com`.
		///
		///* `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique
		///   identifier) representing a user that has been recently deleted. For
		///   example, `alice@example.com?uid=123456789012345678901`. If the user is
		///   recovered, this value reverts to `user:{emailid}` and the recovered user
		///   retains the role in the binding.
		///
		///* `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus
		///   unique identifier) representing a service account that has been recently
		///   deleted. For example,
		///   `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`.
		///   If the service account is undeleted, this value reverts to
		///   `serviceAccount:{emailid}` and the undeleted service account retains the
		///   role in the binding.
		///
		///* `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique
		///   identifier) representing a Google group that has been recently
		///   deleted. For example, `admins@example.com?uid=123456789012345678901`. If
		///   the group is recovered, this value reverts to `group:{emailid}` and the
		///   recovered group retains the role in the binding.
		///
		///
		///* `domain:{domain}`: The G Suite domain (primary) that represents all the    users of that domain. For example, `google.com` or `example.com`.
		///
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="members")]
		public string[] Members { get; set; }
		
		/// <summary>
		/// Role that is assigned to `members`.
		///For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="role")]
		public string Role { get; set; }
	}
	
	/// <summary>
	/// Represents an expression text. Example:
	///
	///    title: "User account presence"
	///    description: "Determines whether the request has a user account"
	///    expression: "size(request.user) > 0"
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleType__Expr
	{
		
		/// <summary>
		/// An optional description of the expression. This is a longer text which
		///describes the expression, e.g. when hovered over it in a UI.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Textual representation of an expression in
		///Common Expression Language syntax.
		///
		///The application context of the containing message determines which
		///well-known feature set of CEL is supported.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expression")]
		public string Expression { get; set; }
		
		/// <summary>
		/// An optional string indicating the location of the expression for error
		///reporting, e.g. a file name and a position in the file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// An optional title for the expression, i.e. a short string describing
		///its purpose. This can be used e.g. in UIs which allow to enter the
		///expression.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	/// <summary>
	/// An Identity and Access Management (IAM) policy, which specifies access
	///controls for Google Cloud resources.
	///
	///
	///A `Policy` is a collection of `bindings`. A `binding` binds one or more
	///`members` to a single `role`. Members can be user accounts, service accounts,
	///Google groups, and domains (such as G Suite). A `role` is a named list of
	///permissions; each `role` can be an IAM predefined role or a user-created
	///custom role.
	///
	///Optionally, a `binding` can specify a `condition`, which is a logical
	///expression that allows access to a resource only if the expression evaluates
	///to `true`. A condition can add constraints based on attributes of the
	///request, the resource, or both.
	///
	///**JSON example:**
	///
	///    {
	///      "bindings": [
	///        {
	///          "role": "roles/resourcemanager.organizationAdmin",
	///          "members": [
	///            "user:mike@example.com",
	///            "group:admins@example.com",
	///            "domain:google.com",
	///            "serviceAccount:my-project-id@appspot.gserviceaccount.com"
	///          ]
	///        },
	///        {
	///          "role": "roles/resourcemanager.organizationViewer",
	///          "members": ["user:eve@example.com"],
	///          "condition": {
	///            "title": "expirable access",
	///            "description": "Does not grant access after Sep 2020",
	///            "expression": "request.time < timestamp('2020-10-01T00:00:00.000Z')",
	///          }
	///        }
	///      ],
	///      "etag": "BwWWja0YfJA=",
	///      "version": 3
	///    }
	///
	///**YAML example:**
	///
	///    bindings:
	///    - members:
	///      - user:mike@example.com
	///      - group:admins@example.com
	///      - domain:google.com
	///      - serviceAccount:my-project-id@appspot.gserviceaccount.com
	///      role: roles/resourcemanager.organizationAdmin
	///    - members:
	///      - user:eve@example.com
	///      role: roles/resourcemanager.organizationViewer
	///      condition:
	///        title: expirable access
	///        description: Does not grant access after Sep 2020
	///        expression: request.time < timestamp('2020-10-01T00:00:00.000Z')
	///    - etag: BwWWja0YfJA=
	///    - version: 3
	///
	///For a description of IAM and its features, see the
	///[IAM documentation](https://cloud.google.com/iam/docs/).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleIamV1__Policy
	{
		
		/// <summary>
		/// Associates a list of `members` to a `role`. Optionally, may specify a
		///`condition` that determines how and when the `bindings` are applied. Each
		///of the `bindings` must contain at least one member.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bindings")]
		public GoogleIamV1__Binding[] Bindings { get; set; }
		
		/// <summary>
		/// `etag` is used for optimistic concurrency control as a way to help
		///prevent simultaneous updates of a policy from overwriting each other.
		///It is strongly suggested that systems make use of the `etag` in the
		///read-modify-write cycle to perform policy updates in order to avoid race
		///conditions: An `etag` is returned in the response to `getIamPolicy`, and
		///systems are expected to put that etag in the request to `setIamPolicy` to
		///ensure that their change will be applied to the same version of the policy.
		///
		///**Important:** If you use IAM Conditions, you must include the `etag` field
		///whenever you call `setIamPolicy`. If you omit this field, then IAM allows
		///you to overwrite a version `3` policy with a version `1` policy, and all of
		///the conditions in the version `3` policy are lost.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// Specifies the format of the policy.
		///
		///Valid values are `0`, `1`, and `3`. Requests that specify an invalid value
		///are rejected.
		///
		///Any operation that affects conditional role bindings must specify version
		///`3`. This requirement applies to the following operations:
		///
		///* Getting a policy that includes a conditional role binding
		///* Adding a conditional role binding to a policy
		///* Changing a conditional role binding in a policy
		///* Removing any role binding, with or without a condition, from a policy
		///  that includes conditions
		///
		///**Important:** If you use IAM Conditions, you must include the `etag` field
		///whenever you call `setIamPolicy`. If you omit this field, then IAM allows
		///you to overwrite a version `3` policy with a version `1` policy, and all of
		///the conditions in the version `3` policy are lost.
		///
		///If a policy does not include any conditions, operations on that policy may
		///specify any valid version or leave the field unset.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<System.Int32> Version { get; set; }
	}
	
	/// <summary>
	/// Request message for `SetIamPolicy` method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleIamV1__SetIamPolicyRequest
	{
		
		/// <summary>
		/// An Identity and Access Management (IAM) policy, which specifies access
		///controls for Google Cloud resources.
		///
		///
		///A `Policy` is a collection of `bindings`. A `binding` binds one or more
		///`members` to a single `role`. Members can be user accounts, service accounts,
		///Google groups, and domains (such as G Suite). A `role` is a named list of
		///permissions; each `role` can be an IAM predefined role or a user-created
		///custom role.
		///
		///Optionally, a `binding` can specify a `condition`, which is a logical
		///expression that allows access to a resource only if the expression evaluates
		///to `true`. A condition can add constraints based on attributes of the
		///request, the resource, or both.
		///
		///**JSON example:**
		///
		///    {
		///      "bindings": [
		///        {
		///          "role": "roles/resourcemanager.organizationAdmin",
		///          "members": [
		///            "user:mike@example.com",
		///            "group:admins@example.com",
		///            "domain:google.com",
		///            "serviceAccount:my-project-id@appspot.gserviceaccount.com"
		///          ]
		///        },
		///        {
		///          "role": "roles/resourcemanager.organizationViewer",
		///          "members": ["user:eve@example.com"],
		///          "condition": {
		///            "title": "expirable access",
		///            "description": "Does not grant access after Sep 2020",
		///            "expression": "request.time < timestamp('2020-10-01T00:00:00.000Z')",
		///          }
		///        }
		///      ],
		///      "etag": "BwWWja0YfJA=",
		///      "version": 3
		///    }
		///
		///**YAML example:**
		///
		///    bindings:
		///    - members:
		///      - user:mike@example.com
		///      - group:admins@example.com
		///      - domain:google.com
		///      - serviceAccount:my-project-id@appspot.gserviceaccount.com
		///      role: roles/resourcemanager.organizationAdmin
		///    - members:
		///      - user:eve@example.com
		///      role: roles/resourcemanager.organizationViewer
		///      condition:
		///        title: expirable access
		///        description: Does not grant access after Sep 2020
		///        expression: request.time < timestamp('2020-10-01T00:00:00.000Z')
		///    - etag: BwWWja0YfJA=
		///    - version: 3
		///
		///For a description of IAM and its features, see the
		///[IAM documentation](https://cloud.google.com/iam/docs/).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="policy")]
		public GoogleIamV1__Policy Policy { get; set; }
	}
	
	/// <summary>
	/// Request message for `TestIamPermissions` method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleIamV1__TestIamPermissionsRequest
	{
		
		/// <summary>
		/// The set of permissions to check for the `resource`. Permissions with
		///wildcards (such as '*' or 'storage.*') are not allowed. For more
		///information see
		///[IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="permissions")]
		public string[] Permissions { get; set; }
	}
	
	/// <summary>
	/// Response message for `TestIamPermissions` method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleIamV1__TestIamPermissionsResponse
	{
		
		/// <summary>
		/// A subset of `TestPermissionsRequest.permissions` that the caller is
		///allowed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="permissions")]
		public string[] Permissions { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Gets the access control policy for a resource.
		/// Returns an empty policy if the resource exists and does not have a policy
		/// set.
		/// Servicebroker_getIamPolicy v1/{resource}:getIamPolicy
		/// </summary>
		/// <param name="resource">REQUIRED: The resource for which the policy is being requested.
		///See the operation documentation for the appropriate value for this field.</param>
		/// <param name="options_requestedPolicyVersion">Optional. The policy format version to be returned.
		///
		///Valid values are 0, 1, and 3. Requests specifying an invalid value will be
		///rejected.
		///
		///Requests for policies with any conditional bindings must specify version 3.
		///Policies without any conditional bindings may specify any valid value or
		///leave the field unset.</param>
		/// <returns>Successful response</returns>
		public async Task Servicebroker_getIamPolicyAsync(string resource, int options_requestedPolicyVersion, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (resource==null? "" : System.Uri.EscapeDataString(resource))+":getIamPolicy&options.requestedPolicyVersion="+options_requestedPolicyVersion;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Sets the access control policy on the specified resource. Replaces any
		/// existing policy.
		/// 
		/// Can return Public Errors: NOT_FOUND, INVALID_ARGUMENT and PERMISSION_DENIED
		/// Servicebroker_setIamPolicy v1/{resource}:setIamPolicy
		/// </summary>
		/// <param name="resource">REQUIRED: The resource for which the policy is being specified.
		///See the operation documentation for the appropriate value for this field.</param>
		/// <returns>Successful response</returns>
		public async Task Servicebroker_setIamPolicyAsync(string resource, GoogleIamV1__SetIamPolicyRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (resource==null? "" : System.Uri.EscapeDataString(resource))+":setIamPolicy";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns permissions that a caller has on the specified resource.
		/// If the resource does not exist, this will return an empty set of
		/// permissions, not a NOT_FOUND error.
		/// 
		/// Note: This operation is designed to be used for building permission-aware
		/// UIs and command-line tools, not for authorization checking. This operation
		/// may "fail open" without warning.
		/// Servicebroker_testIamPermissions v1/{resource}:testIamPermissions
		/// </summary>
		/// <param name="resource">REQUIRED: The resource for which the policy detail is being requested.
		///See the operation documentation for the appropriate value for this field.</param>
		/// <returns>Successful response</returns>
		public async Task Servicebroker_testIamPermissionsAsync(string resource, GoogleIamV1__TestIamPermissionsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (resource==null? "" : System.Uri.EscapeDataString(resource))+":testIamPermissions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
