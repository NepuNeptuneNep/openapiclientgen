//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Account data. After the creation of a new account it may take a few minutes before it's fully operational. The methods delete, insert, and update require the admin role.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Account
	{
		
		/// <summary>
		/// Output only. How the account is managed. Acceptable values are: - "`manual`" - "`automatic`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountManagement")]
		public string AccountManagement { get; set; }
		
		/// <summary>
		/// Linked Ads accounts that are active or pending approval. To create a new link request, add a new link with status `active` to the list. It will remain in a `pending` state until approved or rejected either in the Ads interface or through the Google Ads API. To delete an active link, or to cancel a link request, remove it from the list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adsLinks")]
		public AccountAdsLink[] AdsLinks { get; set; }
		
		/// <summary>
		/// Indicates whether the merchant sells adult content.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adultContent")]
		public System.Nullable<System.Boolean> AdultContent { get; set; }
		
		/// <summary>
		/// The automatic improvements of the account can be used to automatically update items, improve images and shipping.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="automaticImprovements")]
		public AccountAutomaticImprovements AutomaticImprovements { get; set; }
		
		/// <summary>
		/// Automatically created label IDs that are assigned to the account by CSS Center.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="automaticLabelIds")]
		public string[] AutomaticLabelIds { get; set; }
		
		/// <summary>
		/// The [business identity attributes](https://support.google.com/merchants/answer/10342414) can be used to self-declare attributes that let customers know more about your business.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="businessIdentity")]
		public AccountBusinessIdentity BusinessIdentity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="businessInformation")]
		public AccountBusinessInformation BusinessInformation { get; set; }
		
		/// <summary>
		/// Settings for conversion tracking.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="conversionSettings")]
		public AccountConversionSettings ConversionSettings { get; set; }
		
		/// <summary>
		/// ID of CSS the account belongs to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cssId")]
		public string CssId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="googleMyBusinessLink")]
		public AccountGoogleMyBusinessLink GoogleMyBusinessLink { get; set; }
		
		/// <summary>
		/// Required. 64-bit Merchant Center account ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "`content#account`".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Manually created label IDs that are assigned to the account by CSS.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labelIds")]
		public string[] LabelIds { get; set; }
		
		/// <summary>
		/// Required. Display name for the account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Client-specific, locally-unique, internal ID for the child account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sellerId")]
		public string SellerId { get; set; }
		
		/// <summary>
		/// Users with access to the account. Every account (except for subaccounts) must have at least one admin user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="users")]
		public AccountUser[] Users { get; set; }
		
		/// <summary>
		/// The merchant's website.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="websiteUrl")]
		public string WebsiteUrl { get; set; }
		
		/// <summary>
		/// Linked YouTube channels that are active or pending approval. To create a new link request, add a new link with status `active` to the list. It will remain in a `pending` state until approved or rejected in the YT Creator Studio interface. To delete an active link, or to cancel a link request, remove it from the list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="youtubeChannelLinks")]
		public AccountYouTubeChannelLink[] YoutubeChannelLinks { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccountAdsLink
	{
		
		/// <summary>
		/// Customer ID of the Ads account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adsId")]
		public string AdsId { get; set; }
		
		/// <summary>
		/// Status of the link between this Merchant Center account and the Ads account. Upon retrieval, it represents the actual status of the link and can be either `active` if it was approved in Google Ads or `pending` if it's pending approval. Upon insertion, it represents the *intended* status of the link. Re-uploading a link with status `active` when it's still pending or with status `pending` when it's already active will have no effect: the status will remain unchanged. Re-uploading a link with deprecated status `inactive` is equivalent to not submitting the link at all and will delete the link if it was active or cancel the link request if it was pending. Acceptable values are: - "`active`" - "`pending`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	/// <summary>
	/// The automatic improvements of the account can be used to automatically update items, improve images and shipping.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccountAutomaticImprovements
	{
		
		/// <summary>
		/// This improvement will attempt to automatically correct submitted images if they don't meet the [image requirements](https://support.google.com/merchants/answer/6324350), for example, removing overlays. If successful, the image will be replaced and approved. This improvement is only applied to images of disapproved offers. For more information see: [Automatic image improvements](https://support.google.com/merchants/answer/9242973)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageImprovements")]
		public AccountImageImprovements ImageImprovements { get; set; }
		
		/// <summary>
		/// Turning on [item updates](https://support.google.com/merchants/answer/3246284) allows Google to automatically update items for you. When item updates are on, Google uses the structured data markup on the website and advanced data extractors to update the price and availability of the items. When the item updates are off, items with mismatched data aren't shown.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemUpdates")]
		public AccountItemUpdates ItemUpdates { get; set; }
		
		/// <summary>
		/// Not available for MCAs [accounts](https://support.google.com/merchants/answer/188487). By turning on [automatic shipping improvements](https://support.google.com/merchants/answer/10027038), you are allowing Google to improve the accuracy of your delivery times shown to shoppers using Google. More accurate delivery times, especially when faster, typically lead to better conversion rates. Google will improve your estimated delivery times based on various factors: * Delivery address of an order * Current handling time and shipping time settings * Estimated weekdays or business days * Parcel tracking data
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shippingImprovements")]
		public AccountShippingImprovements ShippingImprovements { get; set; }
	}
	
	/// <summary>
	/// This improvement will attempt to automatically correct submitted images if they don't meet the [image requirements](https://support.google.com/merchants/answer/6324350), for example, removing overlays. If successful, the image will be replaced and approved. This improvement is only applied to images of disapproved offers. For more information see: [Automatic image improvements](https://support.google.com/merchants/answer/9242973)
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccountImageImprovements
	{
		
		/// <summary>
		/// Settings for the Automatic Image Improvements.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountImageImprovementsSettings")]
		public AccountImageImprovementsSettings AccountImageImprovementsSettings { get; set; }
		
		/// <summary>
		/// Output only. The effective value of allow_automatic_image_improvements. If account_image_improvements_settings is present, then this value is the same. Otherwise, it represents the inherited value of the parent account. Read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="effectiveAllowAutomaticImageImprovements")]
		public System.Nullable<System.Boolean> EffectiveAllowAutomaticImageImprovements { get; set; }
	}
	
	/// <summary>
	/// Settings for the Automatic Image Improvements.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccountImageImprovementsSettings
	{
		
		/// <summary>
		/// Enables automatic image improvements.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowAutomaticImageImprovements")]
		public System.Nullable<System.Boolean> AllowAutomaticImageImprovements { get; set; }
	}
	
	/// <summary>
	/// Turning on [item updates](https://support.google.com/merchants/answer/3246284) allows Google to automatically update items for you. When item updates are on, Google uses the structured data markup on the website and advanced data extractors to update the price and availability of the items. When the item updates are off, items with mismatched data aren't shown.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccountItemUpdates
	{
		
		/// <summary>
		/// Settings for the Automatic Item Updates.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountItemUpdatesSettings")]
		public AccountItemUpdatesSettings AccountItemUpdatesSettings { get; set; }
		
		/// <summary>
		/// Output only. The effective value of allow_availability_updates. If account_item_updates_settings is present, then this value is the same. Otherwise, it represents the inherited value of the parent account. Read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="effectiveAllowAvailabilityUpdates")]
		public System.Nullable<System.Boolean> EffectiveAllowAvailabilityUpdates { get; set; }
		
		/// <summary>
		/// Output only. The effective value of allow_condition_updates. If account_item_updates_settings is present, then this value is the same. Otherwise, it represents the inherited value of the parent account. Read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="effectiveAllowConditionUpdates")]
		public System.Nullable<System.Boolean> EffectiveAllowConditionUpdates { get; set; }
		
		/// <summary>
		/// Output only. The effective value of allow_price_updates. If account_item_updates_settings is present, then this value is the same. Otherwise, it represents the inherited value of the parent account. Read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="effectiveAllowPriceUpdates")]
		public System.Nullable<System.Boolean> EffectiveAllowPriceUpdates { get; set; }
		
		/// <summary>
		/// Output only. The effective value of allow_strict_availability_updates. If account_item_updates_settings is present, then this value is the same. Otherwise, it represents the inherited value of the parent account. Read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="effectiveAllowStrictAvailabilityUpdates")]
		public System.Nullable<System.Boolean> EffectiveAllowStrictAvailabilityUpdates { get; set; }
	}
	
	/// <summary>
	/// Settings for the Automatic Item Updates.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccountItemUpdatesSettings
	{
		
		/// <summary>
		/// If availability updates are enabled, any previous availability values get overwritten if Google finds an out-of-stock annotation on the offer's page. If additionally `allow_availability_updates` field is set to true, values get overwritten if Google finds an in-stock annotation on the offer’s page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowAvailabilityUpdates")]
		public System.Nullable<System.Boolean> AllowAvailabilityUpdates { get; set; }
		
		/// <summary>
		/// If condition updates are enabled, Google always updates item condition with the condition detected from the details of your product.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowConditionUpdates")]
		public System.Nullable<System.Boolean> AllowConditionUpdates { get; set; }
		
		/// <summary>
		/// If price updates are enabled, Google always updates the active price with the crawled information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowPriceUpdates")]
		public System.Nullable<System.Boolean> AllowPriceUpdates { get; set; }
		
		/// <summary>
		/// If allow_availability_updates is enabled, items are automatically updated in all your Shopping target countries. By default, availability updates will only be applied to items that are 'out of stock' on your website but 'in stock' on Shopping. Set this to true to also update items that are 'in stock' on your website, but 'out of stock' on Google Shopping. In order for this field to have an effect, you must also allow availability updates.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowStrictAvailabilityUpdates")]
		public System.Nullable<System.Boolean> AllowStrictAvailabilityUpdates { get; set; }
	}
	
	/// <summary>
	/// Not available for MCAs [accounts](https://support.google.com/merchants/answer/188487). By turning on [automatic shipping improvements](https://support.google.com/merchants/answer/10027038), you are allowing Google to improve the accuracy of your delivery times shown to shoppers using Google. More accurate delivery times, especially when faster, typically lead to better conversion rates. Google will improve your estimated delivery times based on various factors: * Delivery address of an order * Current handling time and shipping time settings * Estimated weekdays or business days * Parcel tracking data
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccountShippingImprovements
	{
		
		/// <summary>
		/// Enables automatic shipping improvements.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowShippingImprovements")]
		public System.Nullable<System.Boolean> AllowShippingImprovements { get; set; }
	}
	
	/// <summary>
	/// The [business identity attributes](https://support.google.com/merchants/answer/10342414) can be used to self-declare attributes that let customers know more about your business.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccountBusinessIdentity
	{
		
		/// <summary>
		/// The account identity type used to specify attributes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="blackOwned")]
		public AccountIdentityType BlackOwned { get; set; }
		
		/// <summary>
		/// Required. By setting this field, your business may be included in promotions for all the selected attributes. If you clear this option, it won't affect your identification with any of the attributes. For this field to be set, the merchant must self identify with at least one of the `AccountIdentityType`. If none are included, the request will be considered invalid.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="includeForPromotions")]
		public System.Nullable<System.Boolean> IncludeForPromotions { get; set; }
		
		/// <summary>
		/// The account identity type used to specify attributes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="latinoOwned")]
		public AccountIdentityType LatinoOwned { get; set; }
		
		/// <summary>
		/// The account identity type used to specify attributes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="smallBusiness")]
		public AccountIdentityType SmallBusiness { get; set; }
		
		/// <summary>
		/// The account identity type used to specify attributes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="veteranOwned")]
		public AccountIdentityType VeteranOwned { get; set; }
		
		/// <summary>
		/// The account identity type used to specify attributes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="womenOwned")]
		public AccountIdentityType WomenOwned { get; set; }
	}
	
	/// <summary>
	/// The account identity type used to specify attributes.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccountIdentityType
	{
		
		/// <summary>
		/// Optional. Indicates that the business identifies itself with a given identity type. Setting this field does not automatically mean eligibility for promotions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selfIdentified")]
		public System.Nullable<System.Boolean> SelfIdentified { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccountBusinessInformation
	{
		
		[System.Runtime.Serialization.DataMember(Name="address")]
		public AccountAddress Address { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customerService")]
		public AccountCustomerService CustomerService { get; set; }
		
		/// <summary>
		/// The 10-digit [Korean business registration number](https://support.google.com/merchants/answer/9037766) separated with dashes in the format: XXX-XX-XXXXX. This field will only be updated if explicitly set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="koreanBusinessRegistrationNumber")]
		public string KoreanBusinessRegistrationNumber { get; set; }
		
		/// <summary>
		/// The phone number of the business in [E.164](https://en.wikipedia.org/wiki/E.164) format. This can only be updated if a verified phone number is not already set. To replace a verified phone number use the `Accounts.requestphoneverification` and `Accounts.verifyphonenumber`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phoneNumber")]
		public string PhoneNumber { get; set; }
		
		/// <summary>
		/// Verification status of the phone number of the business. This status is read only and can be updated only by successful phone verification. Acceptable values are: - "`verified`" - "`unverified`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phoneVerificationStatus")]
		public string PhoneVerificationStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccountAddress
	{
		
		/// <summary>
		/// CLDR country code (for example, "US"). All MCA sub-accounts inherit the country of their parent MCA by default, however the country can be updated for individual sub-accounts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// City, town or commune. May also include dependent localities or sublocalities (for example, neighborhoods or suburbs).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locality")]
		public string Locality { get; set; }
		
		/// <summary>
		/// Postal code or ZIP (for example, "94043").
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postalCode")]
		public string PostalCode { get; set; }
		
		/// <summary>
		/// Top-level administrative subdivision of the country. For example, a state like California ("CA") or a province like Quebec ("QC").
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="region")]
		public string Region { get; set; }
		
		/// <summary>
		/// Street-level part of the address. Use `\n` to add a second line.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="streetAddress")]
		public string StreetAddress { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccountCustomerService
	{
		
		/// <summary>
		/// Customer service email.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// Customer service phone number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phoneNumber")]
		public string PhoneNumber { get; set; }
		
		/// <summary>
		/// Customer service URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	/// <summary>
	/// Settings for conversion tracking.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccountConversionSettings
	{
		
		/// <summary>
		/// When enabled, free listing URLs have a parameter to enable conversion tracking for products owned by the current merchant account. See [auto-tagging](https://support.google.com/merchants/answer/11127659).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="freeListingsAutoTaggingEnabled")]
		public System.Nullable<System.Boolean> FreeListingsAutoTaggingEnabled { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccountGoogleMyBusinessLink
	{
		
		/// <summary>
		/// The ID of the Business Profile. If this is provided, then `gmbEmail` is ignored. The value of this field should match the `accountId` used by the Business Profile API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gmbAccountId")]
		public string GmbAccountId { get; set; }
		
		/// <summary>
		/// The Business Profile email address of a specific account within a Business Profile. A sample account within a Business Profile could be a business account with set of locations, managed under the Business Profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gmbEmail")]
		public string GmbEmail { get; set; }
		
		/// <summary>
		/// Status of the link between this Merchant Center account and the Business Profile. Acceptable values are: - "`active`" - "`pending`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccountUser
	{
		
		/// <summary>
		/// Whether user is an admin.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="admin")]
		public System.Nullable<System.Boolean> Admin { get; set; }
		
		/// <summary>
		/// User's email address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="emailAddress")]
		public string EmailAddress { get; set; }
		
		/// <summary>
		/// Whether user is an order manager.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orderManager")]
		public System.Nullable<System.Boolean> OrderManager { get; set; }
		
		/// <summary>
		/// Whether user can access payment statements.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paymentsAnalyst")]
		public System.Nullable<System.Boolean> PaymentsAnalyst { get; set; }
		
		/// <summary>
		/// Whether user can manage payment settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paymentsManager")]
		public System.Nullable<System.Boolean> PaymentsManager { get; set; }
		
		/// <summary>
		/// Whether user is a reporting manager.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reportingManager")]
		public System.Nullable<System.Boolean> ReportingManager { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccountYouTubeChannelLink
	{
		
		/// <summary>
		/// Channel ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channelId")]
		public string ChannelId { get; set; }
		
		/// <summary>
		/// Status of the link between this Merchant Center account and the YouTube channel. Upon retrieval, it represents the actual status of the link and can be either `active` if it was approved in YT Creator Studio or `pending` if it's pending approval. Upon insertion, it represents the *intended* status of the link. Re-uploading a link with status `active` when it's still pending or with status `pending` when it's already active will have no effect: the status will remain unchanged. Re-uploading a link with deprecated status `inactive` is equivalent to not submitting the link at all and will delete the link if it was active or cancel the link request if it was pending.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	/// <summary>
	/// Credentials allowing Google to call a partner's API on behalf of a merchant.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccountCredentials
	{
		
		/// <summary>
		/// An OAuth access token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accessToken")]
		public string AccessToken { get; set; }
		
		/// <summary>
		/// The amount of time, in seconds, after which the access token is no longer valid.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expiresIn")]
		public string ExpiresIn { get; set; }
		
		/// <summary>
		/// Indicates to Google how Google should use these OAuth tokens.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="purpose")]
		public System.Nullable<AccountCredentialsPurpose> Purpose { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AccountCredentialsPurpose
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACCOUNT_CREDENTIALS_PURPOSE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SHOPIFY_ORDER_MANAGEMENT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SHOPIFY_INTEGRATION = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccountIdentifier
	{
		
		/// <summary>
		/// The aggregator ID, set for aggregators and subaccounts (in that case, it represents the aggregator of the subaccount).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="aggregatorId")]
		public string AggregatorId { get; set; }
		
		/// <summary>
		/// The merchant account ID, set for individual accounts and subaccounts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="merchantId")]
		public string MerchantId { get; set; }
	}
	
	/// <summary>
	/// An issue affecting specific merchant.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccountIssue
	{
		
		/// <summary>
		/// A list of actionable steps that can be executed to solve the issue. An example is requesting a re-review or providing arguments when merchant disagrees with the issue. Actions that are supported in (your) third-party application can be rendered as buttons and should be available to merchant when they expand the issue.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="actions")]
		public Action[] Actions { get; set; }
		
		/// <summary>
		/// Overall impact of the issue.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="impact")]
		public AccountIssueImpact Impact { get; set; }
		
		/// <summary>
		/// Details of the issue as a pre-rendered HTML. HTML elements contain CSS classes that can be used to customize the style of the content. Always sanitize the HTML before embedding it directly to your application. The sanitizer needs to allow basic HTML tags, such as: `div`, `span`, `p`, `a`, `ul`, `li`, `table`, `tr`, `td`. For example, you can use [DOMPurify](https://www.npmjs.com/package/dompurify). CSS classes: * `issue-detail` - top level container for the detail of the issue * `callout-banners` - section of the `issue-detail` with callout banners * `callout-banner` - single callout banner, inside `callout-banners` * `callout-banner-info` - callout with important information (default) * `callout-banner-warning` - callout with a warning * `callout-banner-error` - callout informing about an error (most severe) * `issue-content` - section of the `issue-detail`, contains multiple `content-element` * `content-element` - content element such as a list, link or paragraph, inside `issue-content` * `root-causes` - unordered list with items describing root causes of the issue, inside `issue-content` * `root-causes-intro` - intro text before the `root-causes` list, inside `issue-content` * `segment` - section of the text, `span` inside paragraph * `segment-attribute` - section of the text that represents a product attribute, for example 'image\_link' * `segment-literal` - section of the text that contains a special value, for example '0-1000 kg' * `segment-bold` - section of the text that should be rendered as bold * `segment-italic` - section of the text that should be rendered as italic * `tooltip` - used on paragraphs that should be rendered with a tooltip. A section of the text in such a paragraph will have a class `tooltip-text` and is intended to be shown in a mouse over dialog. If the style is not used, the `tooltip-text` section would be shown on a new line, after the main part of the text. * `tooltip-text` - marks a section of the text within a `tooltip`, that is intended to be shown in a mouse over dialog. * `tooltip-icon` - marks a section of the text within a `tooltip`, that can be replaced with a tooltip icon, for example '?' or 'i'. By default, this section contains a `br` tag, that is separating the main text and the tooltip text when the style is not used. * `tooltip-style-question` - the tooltip shows helpful information, can use the '?' as an icon. * `tooltip-style-info` - the tooltip adds additional information fitting to the context, can use the 'i' as an icon. * `content-moderation` - marks the paragraph that explains how the issue was identified. * `new-element` - Present for new elements added to the pre-rendered content in the future. To make sure that a new content element does not break your style, you can hide everything with this class.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="prerenderedContent")]
		public string PrerenderedContent { get; set; }
		
		/// <summary>
		/// Title of the issue.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	/// <summary>
	/// An actionable step that can be executed to solve the issue.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Action
	{
		
		/// <summary>
		/// Action that is implemented and performed in (your) third-party application. Represents various functionality that is expected to be available to merchant and will help them with resolving the issue. The application should point the merchant to the place, where they can access the corresponding functionality. If the functionality is not supported, it is recommended to explain the situation to merchant and provide them with instructions how to solve the issue.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="builtinSimpleAction")]
		public BuiltInSimpleAction BuiltinSimpleAction { get; set; }
		
		/// <summary>
		/// Label of the action button.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buttonLabel")]
		public string ButtonLabel { get; set; }
		
		/// <summary>
		/// Action that is implemented and performed outside of the third-party application. It should redirect the merchant to the provided URL of an external system where they can perform the action. For example to request a review in the Merchant Center.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="externalAction")]
		public ExternalAction ExternalAction { get; set; }
		
		/// <summary>
		/// Controlling whether the button is active or disabled. The value is 'false' when the action was already requested or is not available. If the action is not available then a reason will be present. If (your) third-party application shows a disabled button for action that is not available, then it should also show reasons.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isAvailable")]
		public System.Nullable<System.Boolean> IsAvailable { get; set; }
		
		/// <summary>
		/// List of reasons why the action is not available. The list of reasons is empty if the action is available. If there is only one reason, it can be displayed next to the disabled button. If there are more reasons, all of them should be displayed, for example in a pop-up dialog.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reasons")]
		public ActionReason[] Reasons { get; set; }
	}
	
	/// <summary>
	/// Action that is implemented and performed in (your) third-party application. Represents various functionality that is expected to be available to merchant and will help them with resolving the issue. The application should point the merchant to the place, where they can access the corresponding functionality. If the functionality is not supported, it is recommended to explain the situation to merchant and provide them with instructions how to solve the issue.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BuiltInSimpleAction
	{
		
		/// <summary>
		/// Long text from external source.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additionalContent")]
		public BuiltInSimpleActionAdditionalContent AdditionalContent { get; set; }
		
		/// <summary>
		/// The attribute that needs to be updated. Present when the type is `EDIT_ITEM_ATTRIBUTE`. This field contains a code for attribute, represented in snake_case. You can find a list of product's attributes, with their codes [here](https://support.google.com/merchants/answer/7052112).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attributeCode")]
		public string AttributeCode { get; set; }
		
		/// <summary>
		/// The type of action that represents a functionality that is expected to be available in third-party application.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<BuiltInSimpleActionType> Type { get; set; }
	}
	
	/// <summary>
	/// Long text from external source.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BuiltInSimpleActionAdditionalContent
	{
		
		/// <summary>
		/// Long text organized into paragraphs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paragraphs")]
		public string[] Paragraphs { get; set; }
		
		/// <summary>
		/// Title of the additional content;
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BuiltInSimpleActionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BUILT_IN_SIMPLE_ACTION_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VERIFY_PHONE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLAIM_WEBSITE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADD_PRODUCTS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADD_CONTACT_INFO = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LINK_ADS_ACCOUNT = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADD_BUSINESS_REGISTRATION_NUMBER = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EDIT_ITEM_ATTRIBUTE = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FIX_ACCOUNT_ISSUE = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SHOW_ADDITIONAL_CONTENT = 9,
	}
	
	/// <summary>
	/// Action that is implemented and performed outside of the third-party application. It should redirect the merchant to the provided URL of an external system where they can perform the action. For example to request a review in the Merchant Center.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ExternalAction
	{
		
		/// <summary>
		/// The type of external action.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<ExternalActionType> Type { get; set; }
		
		/// <summary>
		/// URL to external system, for example Merchant Center, where the merchant can perform the action.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ExternalActionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXTERNAL_ACTION_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REVIEW_PRODUCT_ISSUE_IN_MERCHANT_CENTER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REVIEW_ACCOUNT_ISSUE_IN_MERCHANT_CENTER = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEGAL_APPEAL_IN_HELP_CENTER = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VERIFY_IDENTITY_IN_MERCHANT_CENTER = 4,
	}
	
	/// <summary>
	/// A single reason why the action is not available.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ActionReason
	{
		
		/// <summary>
		/// An actionable step that can be executed to solve the issue.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="action")]
		public Action Action { get; set; }
		
		/// <summary>
		/// Detailed explanation of the reason. Should be displayed as a hint if present.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="detail")]
		public string Detail { get; set; }
		
		/// <summary>
		/// Messages summarizing the reason, why the action is not available. For example: "Review requested on Jan 03. Review requests can take a few days to complete."
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// Overall impact of the issue.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccountIssueImpact
	{
		
		/// <summary>
		/// Detailed impact breakdown. Explains the types of restriction the issue has in different shopping destinations and territory. If present, it should be rendered to the merchant. Can be shown as a mouse over dropdown or a dialog. Each breakdown item represents a group of regions with the same impact details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="breakdowns")]
		public Breakdown[] Breakdowns { get; set; }
		
		/// <summary>
		/// Optional. Message summarizing the overall impact of the issue. If present, it should be rendered to the merchant. For example: "Disapproves 90k offers in 25 countries"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// The severity of the issue.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="severity")]
		public System.Nullable<AccountIssueImpactSeverity> Severity { get; set; }
	}
	
	/// <summary>
	/// A detailed impact breakdown for a group of regions where the impact of the issue on different shopping destinations is the same.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Breakdown
	{
		
		/// <summary>
		/// Human readable, localized description of issue's effect on different targets. Should be rendered as a list. For example: * "Products not showing in ads" * "Products not showing organically"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string[] Details { get; set; }
		
		/// <summary>
		/// Lists of regions. Should be rendered as a title for this group of details. The full list should be shown to merchant. If the list is too long, it is recommended to make it expandable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="regions")]
		public BreakdownRegion[] Regions { get; set; }
	}
	
	/// <summary>
	/// Region with code and localized name.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BreakdownRegion
	{
		
		/// <summary>
		/// The [CLDR territory code] (http://www.unicode.org/repos/cldr/tags/latest/common/main/en.xml)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// The localized name of the region. For region with code='001' the value is 'All countries' or the equivalent in other languages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AccountIssueImpactSeverity
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SEVERITY_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERROR = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WARNING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INFO = 3,
	}
	
	/// <summary>
	/// Label assigned by CSS domain or CSS group to one of its sub-accounts.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccountLabel
	{
		
		/// <summary>
		/// Immutable. The ID of account this label belongs to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
		
		/// <summary>
		/// The description of this label.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Output only. The ID of the label.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labelId")]
		public string LabelId { get; set; }
		
		/// <summary>
		/// Output only. The type of this label.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labelType")]
		public System.Nullable<AccountLabelLabelType> LabelType { get; set; }
		
		/// <summary>
		/// The display name of this label.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AccountLabelLabelType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LABEL_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MANUAL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTOMATIC = 2,
	}
	
	/// <summary>
	///  The return carrier information. This service is designed for merchants enrolled in the Buy on Google program. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccountReturnCarrier
	{
		
		/// <summary>
		/// Output only. Immutable. The Google-provided unique carrier ID, used to update the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="carrierAccountId")]
		public string CarrierAccountId { get; set; }
		
		/// <summary>
		/// Name of the carrier account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="carrierAccountName")]
		public string CarrierAccountName { get; set; }
		
		/// <summary>
		/// Number of the carrier account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="carrierAccountNumber")]
		public string CarrierAccountNumber { get; set; }
		
		/// <summary>
		/// The carrier code enum. Accepts the values FEDEX or UPS.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="carrierCode")]
		public System.Nullable<AccountReturnCarrierCarrierCode> CarrierCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AccountReturnCarrierCarrierCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CARRIER_CODE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEDEX = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPS = 2,
	}
	
	/// <summary>
	/// The status of an account, that is, information about its products, which is computed offline and not returned immediately at insertion time.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccountStatus
	{
		
		/// <summary>
		/// The ID of the account for which the status is reported.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
		
		/// <summary>
		/// A list of account level issues.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountLevelIssues")]
		public AccountStatusAccountLevelIssue[] AccountLevelIssues { get; set; }
		
		/// <summary>
		/// How the account is managed. Acceptable values are: - "`manual`" - "`automatic`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountManagement")]
		public string AccountManagement { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "`content#accountStatus`"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// List of product-related data by channel, destination, and country. Data in this field may be delayed by up to 30 minutes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="products")]
		public AccountStatusProducts[] Products { get; set; }
		
		/// <summary>
		/// Whether the account's website is claimed or not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="websiteClaimed")]
		public System.Nullable<System.Boolean> WebsiteClaimed { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccountStatusAccountLevelIssue
	{
		
		/// <summary>
		/// Country for which this issue is reported.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// The destination the issue applies to. If this field is empty then the issue applies to all available destinations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destination")]
		public string Destination { get; set; }
		
		/// <summary>
		/// Additional details about the issue.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="detail")]
		public string Detail { get; set; }
		
		/// <summary>
		/// The URL of a web page to help resolving this issue.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="documentation")]
		public string Documentation { get; set; }
		
		/// <summary>
		/// Issue identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Severity of the issue. Acceptable values are: - "`critical`" - "`error`" - "`suggestion`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="severity")]
		public string Severity { get; set; }
		
		/// <summary>
		/// Short description of the issue.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccountStatusProducts
	{
		
		/// <summary>
		/// The channel the data applies to. Acceptable values are: - "`local`" - "`online`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channel")]
		public string Channel { get; set; }
		
		/// <summary>
		/// The country the data applies to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// The destination the data applies to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destination")]
		public string Destination { get; set; }
		
		/// <summary>
		/// List of item-level issues.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemLevelIssues")]
		public AccountStatusItemLevelIssue[] ItemLevelIssues { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statistics")]
		public AccountStatusStatistics Statistics { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccountStatusItemLevelIssue
	{
		
		/// <summary>
		/// The attribute's name, if the issue is caused by a single attribute.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attributeName")]
		public string AttributeName { get; set; }
		
		/// <summary>
		/// The error code of the issue.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// A short issue description in English.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// A detailed issue description in English.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="detail")]
		public string Detail { get; set; }
		
		/// <summary>
		/// The URL of a web page to help with resolving this issue.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="documentation")]
		public string Documentation { get; set; }
		
		/// <summary>
		/// Number of items with this issue.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numItems")]
		public string NumItems { get; set; }
		
		/// <summary>
		/// Whether the issue can be resolved by the merchant.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resolution")]
		public string Resolution { get; set; }
		
		/// <summary>
		/// How this issue affects serving of the offer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="servability")]
		public string Servability { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccountStatusStatistics
	{
		
		/// <summary>
		/// Number of active offers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="active")]
		public string Active { get; set; }
		
		/// <summary>
		/// Number of disapproved offers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disapproved")]
		public string Disapproved { get; set; }
		
		/// <summary>
		/// Number of expiring offers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expiring")]
		public string Expiring { get; set; }
		
		/// <summary>
		/// Number of pending offers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pending")]
		public string Pending { get; set; }
	}
	
	/// <summary>
	/// The tax settings of a merchant account. All methods require the admin role.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccountTax
	{
		
		/// <summary>
		/// Required. The ID of the account to which these account tax settings belong.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "`content#accountTax`".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Tax rules. Updating the tax rules will enable "US" taxes (not reversible). Defining no rules is equivalent to not charging tax at all.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rules")]
		public AccountTaxTaxRule[] Rules { get; set; }
	}
	
	/// <summary>
	/// Tax calculation rule to apply in a state or province (US only).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccountTaxTaxRule
	{
		
		/// <summary>
		/// Country code in which tax is applicable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// Required. State (or province) is which the tax is applicable, described by its location ID (also called criteria ID).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locationId")]
		public string LocationId { get; set; }
		
		/// <summary>
		/// Explicit tax rate in percent, represented as a floating point number without the percentage character. Must not be negative.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ratePercent")]
		public string RatePercent { get; set; }
		
		/// <summary>
		/// If true, shipping charges are also taxed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shippingTaxed")]
		public System.Nullable<System.Boolean> ShippingTaxed { get; set; }
		
		/// <summary>
		/// Whether the tax rate is taken from a global tax table or specified explicitly.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="useGlobalRate")]
		public System.Nullable<System.Boolean> UseGlobalRate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccountsAuthInfoResponse
	{
		
		/// <summary>
		/// The account identifiers corresponding to the authenticated user. - For an individual account: only the merchant ID is defined - For an aggregator: only the aggregator ID is defined - For a subaccount of an MCA: both the merchant ID and the aggregator ID are defined. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountIdentifiers")]
		public AccountIdentifier[] AccountIdentifiers { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "`content#accountsAuthInfoResponse`".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccountsClaimWebsiteResponse
	{
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "`content#accountsClaimWebsiteResponse`".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccountsCustomBatchRequest
	{
		
		/// <summary>
		/// The request entries to be processed in the batch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entries")]
		public AccountsCustomBatchRequestEntry[] Entries { get; set; }
	}
	
	/// <summary>
	/// A batch entry encoding a single non-batch accounts request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccountsCustomBatchRequestEntry
	{
		
		/// <summary>
		/// Account data. After the creation of a new account it may take a few minutes before it's fully operational. The methods delete, insert, and update require the admin role.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="account")]
		public Account Account { get; set; }
		
		/// <summary>
		/// The ID of the targeted account. Only defined if the method is not `insert`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
		
		/// <summary>
		/// An entry ID, unique within the batch request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="batchId")]
		public System.Nullable<System.UInt32> BatchId { get; set; }
		
		/// <summary>
		/// Whether the account should be deleted if the account has offers. Only applicable if the method is `delete`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="force")]
		public System.Nullable<System.Boolean> Force { get; set; }
		
		/// <summary>
		/// Label IDs for the 'updatelabels' request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labelIds")]
		public string[] LabelIds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="linkRequest")]
		public AccountsCustomBatchRequestEntryLinkRequest LinkRequest { get; set; }
		
		/// <summary>
		/// The ID of the managing account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="merchantId")]
		public string MerchantId { get; set; }
		
		/// <summary>
		/// The method of the batch entry. Acceptable values are: - "`claimWebsite`" - "`delete`" - "`get`" - "`insert`" - "`link`" - "`update`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="method")]
		public string Method { get; set; }
		
		/// <summary>
		/// Only applicable if the method is `claimwebsite`. Indicates whether or not to take the claim from another account in case there is a conflict.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="overwrite")]
		public System.Nullable<System.Boolean> Overwrite { get; set; }
		
		/// <summary>
		/// Controls which fields are visible. Only applicable if the method is 'get'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="view")]
		public string View { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccountsCustomBatchRequestEntryLinkRequest
	{
		
		/// <summary>
		/// Action to perform for this link. The `"request"` action is only available to select merchants. Acceptable values are: - "`approve`" - "`remove`" - "`request`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="action")]
		public string Action { get; set; }
		
		/// <summary>
		/// Type of the link between the two accounts. Acceptable values are: - "`channelPartner`" - "`eCommercePlatform`" - "`paymentServiceProvider`" - "`localProductManager`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="linkType")]
		public string LinkType { get; set; }
		
		/// <summary>
		/// The ID of the linked account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="linkedAccountId")]
		public string LinkedAccountId { get; set; }
		
		/// <summary>
		/// Provided services. Acceptable values are: - "`shoppingAdsProductManagement`" - "`shoppingActionsProductManagement`" - "`shoppingActionsOrderManagement`" - "`paymentProcessing`" - "`localProductManagement`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="services")]
		public string[] Services { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccountsCustomBatchResponse
	{
		
		/// <summary>
		/// The result of the execution of the batch requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entries")]
		public AccountsCustomBatchResponseEntry[] Entries { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "`content#accountsCustomBatchResponse`".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	/// <summary>
	/// A batch entry encoding a single non-batch accounts response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccountsCustomBatchResponseEntry
	{
		
		/// <summary>
		/// Account data. After the creation of a new account it may take a few minutes before it's fully operational. The methods delete, insert, and update require the admin role.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="account")]
		public Account Account { get; set; }
		
		/// <summary>
		/// The ID of the request entry this entry responds to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="batchId")]
		public System.Nullable<System.UInt32> BatchId { get; set; }
		
		/// <summary>
		/// A list of errors returned by a failed batch entry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Errors Errors { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "`content#accountsCustomBatchResponseEntry`"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	/// <summary>
	/// A list of errors returned by a failed batch entry.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Errors
	{
		
		/// <summary>
		/// The HTTP status of the first error in `errors`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.UInt32> Code { get; set; }
		
		/// <summary>
		/// A list of errors.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors1 { get; set; }
		
		/// <summary>
		/// The message of the first error in `errors`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// An error returned by the API.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Error
	{
		
		/// <summary>
		/// The domain of the error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="domain")]
		public string Domain { get; set; }
		
		/// <summary>
		/// A description of the error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// The error code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccountsLinkRequest
	{
		
		/// <summary>
		/// Action to perform for this link. The `"request"` action is only available to select merchants. Acceptable values are: - "`approve`" - "`remove`" - "`request`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="action")]
		public string Action { get; set; }
		
		/// <summary>
		/// Additional information required for E_COMMERCE_PLATFORM link type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eCommercePlatformLinkInfo")]
		public ECommercePlatformLinkInfo ECommercePlatformLinkInfo { get; set; }
		
		/// <summary>
		/// Type of the link between the two accounts. Acceptable values are: - "`channelPartner`" - "`eCommercePlatform`" - "`paymentServiceProvider`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="linkType")]
		public string LinkType { get; set; }
		
		/// <summary>
		/// The ID of the linked account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="linkedAccountId")]
		public string LinkedAccountId { get; set; }
		
		/// <summary>
		/// Additional information required for PAYMENT_SERVICE_PROVIDER link type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paymentServiceProviderLinkInfo")]
		public PaymentServiceProviderLinkInfo PaymentServiceProviderLinkInfo { get; set; }
		
		/// <summary>
		///  Acceptable values are: - "`shoppingAdsProductManagement`" - "`shoppingActionsProductManagement`" - "`shoppingActionsOrderManagement`" - "`paymentProcessing`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="services")]
		public string[] Services { get; set; }
	}
	
	/// <summary>
	/// Additional information required for E_COMMERCE_PLATFORM link type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ECommercePlatformLinkInfo
	{
		
		/// <summary>
		/// The id used by the third party service provider to identify the merchant.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="externalAccountId")]
		public string ExternalAccountId { get; set; }
	}
	
	/// <summary>
	/// Additional information required for PAYMENT_SERVICE_PROVIDER link type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PaymentServiceProviderLinkInfo
	{
		
		/// <summary>
		/// The business country of the merchant account as identified by the third party service provider.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="externalAccountBusinessCountry")]
		public string ExternalAccountBusinessCountry { get; set; }
		
		/// <summary>
		/// The id used by the third party service provider to identify the merchant.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="externalAccountId")]
		public string ExternalAccountId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccountsLinkResponse
	{
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "`content#accountsLinkResponse`".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccountsListLinksResponse
	{
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "`content#accountsListLinksResponse`".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// The list of available links.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="links")]
		public LinkedAccount[] Links { get; set; }
		
		/// <summary>
		/// The token for the retrieval of the next page of links.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LinkedAccount
	{
		
		/// <summary>
		/// The ID of the linked account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="linkedAccountId")]
		public string LinkedAccountId { get; set; }
		
		/// <summary>
		/// List of provided services.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="services")]
		public LinkService[] Services { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LinkService
	{
		
		/// <summary>
		/// Service provided to or by the linked account. Acceptable values are: - "`shoppingActionsOrderManagement`" - "`shoppingActionsProductManagement`" - "`shoppingAdsProductManagement`" - "`paymentProcessing`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="service")]
		public string Service { get; set; }
		
		/// <summary>
		/// Status of the link Acceptable values are: - "`active`" - "`inactive`" - "`pending`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccountsListResponse
	{
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "`content#accountsListResponse`".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// The token for the retrieval of the next page of accounts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resources")]
		public Account[] Resources { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccountsUpdateLabelsRequest
	{
		
		/// <summary>
		/// The IDs of labels that should be assigned to the account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labelIds")]
		public string[] LabelIds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccountsUpdateLabelsResponse
	{
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "`content#accountsUpdateLabelsResponse`".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccountstatusesCustomBatchRequest
	{
		
		/// <summary>
		/// The request entries to be processed in the batch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entries")]
		public AccountstatusesCustomBatchRequestEntry[] Entries { get; set; }
	}
	
	/// <summary>
	/// A batch entry encoding a single non-batch accountstatuses request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccountstatusesCustomBatchRequestEntry
	{
		
		/// <summary>
		/// The ID of the (sub-)account whose status to get.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
		
		/// <summary>
		/// An entry ID, unique within the batch request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="batchId")]
		public System.Nullable<System.UInt32> BatchId { get; set; }
		
		/// <summary>
		/// If set, only issues for the specified destinations are returned, otherwise only issues for the Shopping destination.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destinations")]
		public string[] Destinations { get; set; }
		
		/// <summary>
		/// The ID of the managing account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="merchantId")]
		public string MerchantId { get; set; }
		
		/// <summary>
		/// The method of the batch entry. Acceptable values are: - "`get`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="method")]
		public string Method { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccountstatusesCustomBatchResponse
	{
		
		/// <summary>
		/// The result of the execution of the batch requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entries")]
		public AccountstatusesCustomBatchResponseEntry[] Entries { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "`content#accountstatusesCustomBatchResponse`".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	/// <summary>
	/// A batch entry encoding a single non-batch accountstatuses response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccountstatusesCustomBatchResponseEntry
	{
		
		/// <summary>
		/// The status of an account, that is, information about its products, which is computed offline and not returned immediately at insertion time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountStatus")]
		public AccountStatus AccountStatus { get; set; }
		
		/// <summary>
		/// The ID of the request entry this entry responds to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="batchId")]
		public System.Nullable<System.UInt32> BatchId { get; set; }
		
		/// <summary>
		/// A list of errors returned by a failed batch entry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Errors Errors { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccountstatusesListResponse
	{
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "`content#accountstatusesListResponse`".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// The token for the retrieval of the next page of account statuses.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resources")]
		public AccountStatus[] Resources { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccounttaxCustomBatchRequest
	{
		
		/// <summary>
		/// The request entries to be processed in the batch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entries")]
		public AccounttaxCustomBatchRequestEntry[] Entries { get; set; }
	}
	
	/// <summary>
	/// A batch entry encoding a single non-batch accounttax request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccounttaxCustomBatchRequestEntry
	{
		
		/// <summary>
		/// The ID of the account for which to get/update account tax settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
		
		/// <summary>
		/// The tax settings of a merchant account. All methods require the admin role.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountTax")]
		public AccountTax AccountTax { get; set; }
		
		/// <summary>
		/// An entry ID, unique within the batch request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="batchId")]
		public System.Nullable<System.UInt32> BatchId { get; set; }
		
		/// <summary>
		/// The ID of the managing account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="merchantId")]
		public string MerchantId { get; set; }
		
		/// <summary>
		/// The method of the batch entry. Acceptable values are: - "`get`" - "`update`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="method")]
		public string Method { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccounttaxCustomBatchResponse
	{
		
		/// <summary>
		/// The result of the execution of the batch requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entries")]
		public AccounttaxCustomBatchResponseEntry[] Entries { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "`content#accounttaxCustomBatchResponse`".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	/// <summary>
	/// A batch entry encoding a single non-batch accounttax response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccounttaxCustomBatchResponseEntry
	{
		
		/// <summary>
		/// The tax settings of a merchant account. All methods require the admin role.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountTax")]
		public AccountTax AccountTax { get; set; }
		
		/// <summary>
		/// The ID of the request entry this entry responds to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="batchId")]
		public System.Nullable<System.UInt32> BatchId { get; set; }
		
		/// <summary>
		/// A list of errors returned by a failed batch entry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Errors Errors { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "`content#accounttaxCustomBatchResponseEntry`"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccounttaxListResponse
	{
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "`content#accounttaxListResponse`".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// The token for the retrieval of the next page of account tax settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resources")]
		public AccountTax[] Resources { get; set; }
	}
	
	/// <summary>
	/// Request message for the ActivateProgram method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ActivateBuyOnGoogleProgramRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Address
	{
		
		/// <summary>
		/// Required. Top-level administrative subdivision of the country. For example, a state like California ("CA") or a province like Quebec ("QC").
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="administrativeArea")]
		public string AdministrativeArea { get; set; }
		
		/// <summary>
		/// Required. City, town or commune. May also include dependent localities or sublocalities (for example, neighborhoods or suburbs).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		/// <summary>
		/// Required. [CLDR country code](https://github.com/unicode-org/cldr/blob/latest/common/main/en.xml) (for example, "US").
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// Required. Postal code or ZIP (for example, "94043").
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postalCode")]
		public string PostalCode { get; set; }
		
		/// <summary>
		/// Street-level part of the address. Use `\n` to add a second line.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="streetAddress")]
		public string StreetAddress { get; set; }
	}
	
	/// <summary>
	/// The Alternate Dispute Resolution (ADR) that may be available to merchants in some regions. If present, the link should be shown on the same page as the list of issues.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AlternateDisputeResolution
	{
		
		/// <summary>
		/// The label for the alternate dispute resolution link.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
		
		/// <summary>
		/// The URL pointing to a page, where merchant can request alternative dispute resolution with an [external body](https://support.google.com/european-union-digital-services-act-redress-options/answer/13535501).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Amount
	{
		
		[System.Runtime.Serialization.DataMember(Name="priceAmount")]
		public Price PriceAmount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="taxAmount")]
		public Price TaxAmount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Price
	{
		
		/// <summary>
		/// The currency of the price.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public string Currency { get; set; }
		
		/// <summary>
		/// The price represented as a number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// Represents attribution settings for conversion sources receiving pre-attribution data.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AttributionSettings
	{
		
		/// <summary>
		/// Required. Lookback windows (in days) used for attribution in this source. Supported values are 7, 30, 60, 90.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attributionLookbackWindowInDays")]
		public System.Nullable<System.Int32> AttributionLookbackWindowInDays { get; set; }
		
		/// <summary>
		/// Required. Attribution model.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attributionModel")]
		public System.Nullable<AttributionSettingsAttributionModel> AttributionModel { get; set; }
		
		/// <summary>
		/// Immutable. Unordered list. List of different conversion types a conversion event can be classified as. A standard "purchase" type will be automatically created if this list is empty at creation time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="conversionType")]
		public AttributionSettingsConversionType[] ConversionType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AttributionSettingsAttributionModel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ATTRIBUTION_MODEL_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CROSS_CHANNEL_LAST_CLICK = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADS_PREFERRED_LAST_CLICK = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CROSS_CHANNEL_DATA_DRIVEN = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CROSS_CHANNEL_FIRST_CLICK = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CROSS_CHANNEL_LINEAR = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CROSS_CHANNEL_POSITION_BASED = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CROSS_CHANNEL_TIME_DECAY = 7,
	}
	
	/// <summary>
	/// Message representing a types of conversion events
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AttributionSettingsConversionType
	{
		
		/// <summary>
		/// Output only. Option indicating if the type should be included in Merchant Center reporting.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="includeInReporting")]
		public System.Nullable<System.Boolean> IncludeInReporting { get; set; }
		
		/// <summary>
		/// Output only. Conversion event name, as it'll be reported by the client.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Fields related to the [Best sellers reports](https://support.google.com/merchants/answer/9488679).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BestSellers
	{
		
		/// <summary>
		/// Google product category ID to calculate the ranking for, represented in [Google's product taxonomy](https://support.google.com/merchants/answer/6324436). If a `WHERE` condition on `best_sellers.category_id` is not specified in the query, rankings for all top-level categories are returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="categoryId")]
		public string CategoryId { get; set; }
		
		/// <summary>
		/// Country where the ranking is calculated. A `WHERE` condition on `best_sellers.country_code` is required in the query.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="countryCode")]
		public string CountryCode { get; set; }
		
		/// <summary>
		/// Popularity rank in the previous week or month.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="previousRank")]
		public string PreviousRank { get; set; }
		
		/// <summary>
		/// Estimated demand in relation to the item with the highest popularity rank in the same category and country in the previous week or month.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="previousRelativeDemand")]
		public System.Nullable<BestSellersPreviousRelativeDemand> PreviousRelativeDemand { get; set; }
		
		/// <summary>
		/// Popularity on Shopping ads and free listings, in the selected category and country, based on the estimated number of units sold.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rank")]
		public string Rank { get; set; }
		
		/// <summary>
		/// Estimated demand in relation to the item with the highest popularity rank in the same category and country.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="relativeDemand")]
		public BestSellersPreviousRelativeDemand RelativeDemand { get; set; }
		
		/// <summary>
		/// Change in the estimated demand. Whether it rose, sank or remained flat.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="relativeDemandChange")]
		public System.Nullable<BestSellersRelativeDemandChange> RelativeDemandChange { get; set; }
		
		/// <summary>
		/// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reportDate")]
		public Date ReportDate { get; set; }
		
		/// <summary>
		/// Granularity of the report. The ranking can be done over a week or a month timeframe. A `WHERE` condition on `best_sellers.report_granularity` is required in the query.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reportGranularity")]
		public System.Nullable<BestSellersReportGranularity> ReportGranularity { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BestSellersPreviousRelativeDemand
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RELATIVE_DEMAND_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VERY_LOW = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOW = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEDIUM = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HIGH = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VERY_HIGH = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BestSellersRelativeDemandChange
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RELATIVE_DEMAND_CHANGE_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SINKER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FLAT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RISER = 3,
	}
	
	/// <summary>
	/// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Date
	{
		
		/// <summary>
		/// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="day")]
		public System.Nullable<System.Int32> Day { get; set; }
		
		/// <summary>
		/// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="month")]
		public System.Nullable<System.Int32> Month { get; set; }
		
		/// <summary>
		/// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="year")]
		public System.Nullable<System.Int32> Year { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BestSellersReportGranularity
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REPORT_GRANULARITY_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WEEKLY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MONTHLY = 2,
	}
	
	/// <summary>
	/// Brand fields. Values are only set for fields requested explicitly in the request's search query.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Brand
	{
		
		/// <summary>
		/// Name of the brand.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BusinessDayConfig
	{
		
		/// <summary>
		/// Regular business days, such as '"monday"'. May not be empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="businessDays")]
		public string[] BusinessDays { get; set; }
	}
	
	/// <summary>
	/// A Link from a [Business Messages](https://businessmessages.google) Agent Id to the Merchant Center account. You can create multiple `BusinessMessagesLink` to Merchant Center Account. Only available to selected merchants. See [Create agents to manage brands](https://developers.google.com/business-communications/business-messages/guides/how-to/agents) for more information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BusinessMessagesLink
	{
		
		/// <summary>
		/// Required. Agent ID from Business Messages to link to the Merchant Center account. The Agent ID can be found in the [Business Communications Developer Console](https://developers.google.com/business-communications/business-messages/guides/concepts/developer-console#agent_selection).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="agentId")]
		public string AgentId { get; set; }
		
		/// <summary>
		/// Output only. Immutable. The ID uniquely identifying each `BusinessMessagesLink`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="businessMessagesLinkId")]
		public string BusinessMessagesLinkId { get; set; }
	}
	
	/// <summary>
	/// Response message for the GetProgramStatus method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BuyOnGoogleProgramStatus
	{
		
		/// <summary>
		/// The business models in which merchant participates.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="businessModel")]
		public string[] BusinessModel { get; set; }
		
		/// <summary>
		/// The customer service pending email. After verification this field becomes empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customerServicePendingEmail")]
		public string CustomerServicePendingEmail { get; set; }
		
		/// <summary>
		/// The pending phone number specified for BuyOnGoogle program. It might be different than account level phone number. In order to update this field the customer_service_pending_phone_region_code must also be set. After verification this field becomes empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customerServicePendingPhoneNumber")]
		public string CustomerServicePendingPhoneNumber { get; set; }
		
		/// <summary>
		/// Two letter country code for the pending phone number, for example `CA` for Canadian numbers. See the [ISO 3166-1 alpha-2](https://wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements) officially assigned codes. In order to update this field the customer_service_pending_phone_number must also be set. After verification this field becomes empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customerServicePendingPhoneRegionCode")]
		public string CustomerServicePendingPhoneRegionCode { get; set; }
		
		/// <summary>
		/// Output only. The customer service verified email.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customerServiceVerifiedEmail")]
		public string CustomerServiceVerifiedEmail { get; set; }
		
		/// <summary>
		/// Output only. The verified phone number specified for BuyOnGoogle program. It might be different than account level phone number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customerServiceVerifiedPhoneNumber")]
		public string CustomerServiceVerifiedPhoneNumber { get; set; }
		
		/// <summary>
		/// Output only. Two letter country code for the verified phone number, for example `CA` for Canadian numbers. See the [ISO 3166-1 alpha-2](https://wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements) officially assigned codes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customerServiceVerifiedPhoneRegionCode")]
		public string CustomerServiceVerifiedPhoneRegionCode { get; set; }
		
		/// <summary>
		/// The channels through which the merchant is selling.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="onlineSalesChannel")]
		public System.Nullable<BuyOnGoogleProgramStatusOnlineSalesChannel> OnlineSalesChannel { get; set; }
		
		/// <summary>
		/// Output only. The current participation stage for the program.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="participationStage")]
		public System.Nullable<BuyOnGoogleProgramStatusParticipationStage> ParticipationStage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BuyOnGoogleProgramStatusOnlineSalesChannel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ONLINE_SALES_CHANNEL_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GOOGLE_EXCLUSIVE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GOOGLE_AND_OTHER_WEBSITES = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BuyOnGoogleProgramStatusParticipationStage
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROGRAM_PARTICIPATION_STAGE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_ELIGIBLE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ELIGIBLE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ONBOARDING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ELIGIBLE_FOR_REVIEW = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING_REVIEW = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REVIEW_DISAPPROVED = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PAUSED = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEPRECATED = 9,
	}
	
	/// <summary>
	/// Request message for the CaptureOrder method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CaptureOrderRequest
	{
	}
	
	/// <summary>
	/// Response message for the CaptureOrder method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CaptureOrderResponse
	{
		
		/// <summary>
		/// The status of the execution. Only defined if the request was successful. Acceptable values are: * "duplicate" * "executed"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="executionStatus")]
		public System.Nullable<CaptureOrderResponseExecutionStatus> ExecutionStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CaptureOrderResponseExecutionStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXECUTION_STATUS_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXECUTED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DUPLICATE = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CarrierRate
	{
		
		/// <summary>
		/// Carrier service, such as `"UPS"` or `"Fedex"`. The list of supported carriers can be retrieved through the `getSupportedCarriers` method. Required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="carrierName")]
		public string CarrierName { get; set; }
		
		/// <summary>
		/// Carrier service, such as `"ground"` or `"2 days"`. The list of supported services for a carrier can be retrieved through the `getSupportedCarriers` method. Required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="carrierService")]
		public string CarrierService { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="flatAdjustment")]
		public Price FlatAdjustment { get; set; }
		
		/// <summary>
		/// Name of the carrier rate. Must be unique per rate group. Required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Shipping origin for this carrier rate. Required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originPostalCode")]
		public string OriginPostalCode { get; set; }
		
		/// <summary>
		/// Multiplicative shipping rate modifier as a number in decimal notation. Can be negative. For example `"5.4"` increases the rate by 5.4%, `"-3"` decreases the rate by 3%. Optional.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="percentageAdjustment")]
		public string PercentageAdjustment { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CarriersCarrier
	{
		
		/// <summary>
		/// The CLDR country code of the carrier (for example, "US"). Always present.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// A list of services supported for EDD (Estimated Delivery Date) calculation. This is the list of valid values for WarehouseBasedDeliveryTime.carrierService.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eddServices")]
		public string[] EddServices { get; set; }
		
		/// <summary>
		/// The name of the carrier (for example, `"UPS"`). Always present.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// A list of supported services (for example, `"ground"`) for that carrier. Contains at least one service. This is the list of valid values for CarrierRate.carrierService.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="services")]
		public string[] Services { get; set; }
	}
	
	/// <summary>
	/// `CheckoutSettings` for a specific merchant ID.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CheckoutSettings
	{
		
		/// <summary>
		/// Output only. The effective value of enrollment state for a given merchant ID. If account level settings are present then this value will be a copy of the account level settings. Otherwise, it will have the value of the parent account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="effectiveEnrollmentState")]
		public System.Nullable<CheckoutSettingsEffectiveEnrollmentState> EffectiveEnrollmentState { get; set; }
		
		/// <summary>
		/// Output only. The effective value of review state for a given merchant ID. If account level settings are present then this value will be a copy of the account level settings. Otherwise, it will have the value of the parent account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="effectiveReviewState")]
		public System.Nullable<CheckoutSettingsEffectiveReviewState> EffectiveReviewState { get; set; }
		
		/// <summary>
		/// Specifications related to the `Checkout` URL. The `UriTemplate` is of the form `https://www.mystore.com/checkout?item_id={id}` where `{id}` will be automatically replaced with data from the merchant account with this attribute [offer_id](https://developers.google.com/shopping-content/reference/rest/v2.1/products#Product.FIELDS.offer_id)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="effectiveUriSettings")]
		public UrlSettings EffectiveUriSettings { get; set; }
		
		/// <summary>
		/// Output only. Reflects the merchant enrollment state in `Checkout` feature.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enrollmentState")]
		public CheckoutSettingsEffectiveEnrollmentState EnrollmentState { get; set; }
		
		/// <summary>
		/// Required. The ID of the account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="merchantId")]
		public string MerchantId { get; set; }
		
		/// <summary>
		/// Output only. Reflects the merchant review state in `Checkout` feature. This is set based on the data quality reviews of the URL provided by the merchant. A merchant with enrollment state as `ENROLLED` can be in the following review states: `IN_REVIEW`, `APPROVED` or `DISAPPROVED`. A merchant must be in an enrollment_state of `ENROLLED` before a review can begin for the merchant.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reviewState")]
		public CheckoutSettingsEffectiveReviewState ReviewState { get; set; }
		
		/// <summary>
		/// Specifications related to the `Checkout` URL. The `UriTemplate` is of the form `https://www.mystore.com/checkout?item_id={id}` where `{id}` will be automatically replaced with data from the merchant account with this attribute [offer_id](https://developers.google.com/shopping-content/reference/rest/v2.1/products#Product.FIELDS.offer_id)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uriSettings")]
		public UrlSettings UriSettings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CheckoutSettingsEffectiveEnrollmentState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHECKOUT_ON_MERCHANT_ENROLLMENT_STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INACTIVE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENROLLED = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CheckoutSettingsEffectiveReviewState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHECKOUT_ON_MERCHANT_REVIEW_STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_REVIEW = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPROVED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISAPPROVED = 3,
	}
	
	/// <summary>
	/// Specifications related to the `Checkout` URL. The `UriTemplate` is of the form `https://www.mystore.com/checkout?item_id={id}` where `{id}` will be automatically replaced with data from the merchant account with this attribute [offer_id](https://developers.google.com/shopping-content/reference/rest/v2.1/products#Product.FIELDS.offer_id)
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UrlSettings
	{
		
		/// <summary>
		/// URL template when the placeholders are expanded will redirect the buyer to the cart page on the merchant website with the selected item in cart.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cartUriTemplate")]
		public string CartUriTemplate { get; set; }
		
		/// <summary>
		/// URL template when the placeholders are expanded will redirect the buyer to the merchant checkout page with the item in the cart.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="checkoutUriTemplate")]
		public string CheckoutUriTemplate { get; set; }
	}
	
	/// <summary>
	/// Product property for the Cloud Retail API. For example, properties for a TV product could be "Screen-Resolution" or "Screen-Size".
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CloudExportAdditionalProperties
	{
		
		/// <summary>
		/// Boolean value of the given property. For example for a TV product, "True" or "False" if the screen is UHD.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="boolValue")]
		public System.Nullable<System.Boolean> BoolValue { get; set; }
		
		/// <summary>
		/// Float values of the given property. For example for a TV product 1.2345. Maximum number of specified values for this field is 400. Values are stored in an arbitrary but consistent order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="floatValue")]
		public double[] FloatValue { get; set; }
		
		/// <summary>
		/// Integer values of the given property. For example, 1080 for a screen resolution of a TV product. Maximum number of specified values for this field is 400. Values are stored in an arbitrary but consistent order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="intValue")]
		public string[] IntValue { get; set; }
		
		/// <summary>
		/// Maximum float value of the given property. For example for a TV product 100.00.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxValue")]
		public System.Nullable<System.Single> MaxValue { get; set; }
		
		/// <summary>
		/// Minimum float value of the given property. For example for a TV product 1.00.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minValue")]
		public System.Nullable<System.Single> MinValue { get; set; }
		
		/// <summary>
		/// Name of the given property. For example, "Screen-Resolution" for a TV product. Maximum string size is 256 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="propertyName")]
		public string PropertyName { get; set; }
		
		/// <summary>
		/// Text value of the given property. For example, "8K(UHD)" could be a text value for a TV product. Maximum number of specified values for this field is 400. Values are stored in an arbitrary but consistent order. Maximum string size is 256 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="textValue")]
		public string[] TextValue { get; set; }
		
		/// <summary>
		/// Unit of the given property. For example, "Pixels" for a TV product. Maximum string size is 256 bytes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unitCode")]
		public string UnitCode { get; set; }
	}
	
	/// <summary>
	/// The collection message.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Collection
	{
		
		/// <summary>
		/// Label that you assign to a collection to help organize bidding and reporting in Shopping campaigns. [Custom label](https://support.google.com/merchants/answer/9674217)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customLabel0")]
		public string CustomLabel0 { get; set; }
		
		/// <summary>
		/// Label that you assign to a collection to help organize bidding and reporting in Shopping campaigns.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customLabel1")]
		public string CustomLabel1 { get; set; }
		
		/// <summary>
		/// Label that you assign to a collection to help organize bidding and reporting in Shopping campaigns.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customLabel2")]
		public string CustomLabel2 { get; set; }
		
		/// <summary>
		/// Label that you assign to a collection to help organize bidding and reporting in Shopping campaigns.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customLabel3")]
		public string CustomLabel3 { get; set; }
		
		/// <summary>
		/// Label that you assign to a collection to help organize bidding and reporting in Shopping campaigns.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customLabel4")]
		public string CustomLabel4 { get; set; }
		
		/// <summary>
		/// This identifies one or more products associated with the collection. Used as a lookup to the corresponding product ID in your product feeds. Provide a maximum of 100 featuredProduct (for collections). Provide up to 10 featuredProduct (for Shoppable Images only) with ID and X and Y coordinates. [featured_product attribute](https://support.google.com/merchants/answer/9703736)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="featuredProduct")]
		public CollectionFeaturedProduct[] FeaturedProduct { get; set; }
		
		/// <summary>
		/// Your collection's name. [headline attribute](https://support.google.com/merchants/answer/9673580)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="headline")]
		public string[] Headline { get; set; }
		
		/// <summary>
		/// Required. The REST ID of the collection. Content API methods that operate on collections take this as their collectionId parameter. The REST ID for a collection is of the form collectionId. [id attribute](https://support.google.com/merchants/answer/9649290)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The URL of a collection’s image. [image_link attribute](https://support.google.com/merchants/answer/9703236)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageLink")]
		public string[] ImageLink { get; set; }
		
		/// <summary>
		/// The language of a collection and the language of any featured products linked to the collection. [language attribute](https://support.google.com/merchants/answer/9673781)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="language")]
		public string Language { get; set; }
		
		/// <summary>
		/// A collection’s landing page. URL directly linking to your collection's page on your website. [link attribute](https://support.google.com/merchants/answer/9673983)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="link")]
		public string Link { get; set; }
		
		/// <summary>
		/// A collection’s mobile-optimized landing page when you have a different URL for mobile and desktop traffic. [mobile_link attribute](https://support.google.com/merchants/answer/9646123)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mobileLink")]
		public string MobileLink { get; set; }
		
		/// <summary>
		/// [product_country attribute](https://support.google.com/merchants/answer/9674155)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productCountry")]
		public string ProductCountry { get; set; }
	}
	
	/// <summary>
	/// The message for FeaturedProduct. [FeaturedProduct](https://support.google.com/merchants/answer/9703736)
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CollectionFeaturedProduct
	{
		
		/// <summary>
		/// The unique identifier for the product item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offerId")]
		public string OfferId { get; set; }
		
		/// <summary>
		/// Required. X-coordinate of the product callout on the Shoppable Image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="x")]
		public System.Nullable<System.Single> X { get; set; }
		
		/// <summary>
		/// Required. Y-coordinate of the product callout on the Shoppable Image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="y")]
		public System.Nullable<System.Single> Y { get; set; }
	}
	
	/// <summary>
	/// The collectionstatus message.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CollectionStatus
	{
		
		/// <summary>
		/// A list of all issues associated with the collection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="collectionLevelIssuses")]
		public CollectionStatusItemLevelIssue[] CollectionLevelIssuses { get; set; }
		
		/// <summary>
		/// Date on which the collection has been created in [ISO 8601](http://en.wikipedia.org/wiki/ISO_8601) format: Date, time, and offset, for example "2020-01-02T09:00:00+01:00" or "2020-01-02T09:00:00Z"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creationDate")]
		public string CreationDate { get; set; }
		
		/// <summary>
		/// The intended destinations for the collection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destinationStatuses")]
		public CollectionStatusDestinationStatus[] DestinationStatuses { get; set; }
		
		/// <summary>
		/// Required. The ID of the collection for which status is reported.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Date on which the collection has been last updated in [ISO 8601](http://en.wikipedia.org/wiki/ISO_8601) format: Date, time, and offset, for example "2020-01-02T09:00:00+01:00" or "2020-01-02T09:00:00Z"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastUpdateDate")]
		public string LastUpdateDate { get; set; }
	}
	
	/// <summary>
	/// Issue associated with the collection.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CollectionStatusItemLevelIssue
	{
		
		/// <summary>
		/// Country codes (ISO 3166-1 alpha-2) where issue applies to the offer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="applicableCountries")]
		public string[] ApplicableCountries { get; set; }
		
		/// <summary>
		/// The attribute's name, if the issue is caused by a single attribute.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attributeName")]
		public string AttributeName { get; set; }
		
		/// <summary>
		/// The error code of the issue.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// A short issue description in English.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The destination the issue applies to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destination")]
		public string Destination { get; set; }
		
		/// <summary>
		/// A detailed issue description in English.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="detail")]
		public string Detail { get; set; }
		
		/// <summary>
		/// The URL of a web page to help with resolving this issue.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="documentation")]
		public string Documentation { get; set; }
		
		/// <summary>
		/// Whether the issue can be resolved by the merchant.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resolution")]
		public string Resolution { get; set; }
		
		/// <summary>
		/// How this issue affects the serving of the collection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="servability")]
		public string Servability { get; set; }
	}
	
	/// <summary>
	/// Destination status message.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CollectionStatusDestinationStatus
	{
		
		/// <summary>
		/// Country codes (ISO 3166-1 alpha-2) where the collection is approved.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="approvedCountries")]
		public string[] ApprovedCountries { get; set; }
		
		/// <summary>
		/// The name of the destination
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destination")]
		public string Destination { get; set; }
		
		/// <summary>
		/// Country codes (ISO 3166-1 alpha-2) where the collection is disapproved.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disapprovedCountries")]
		public string[] DisapprovedCountries { get; set; }
		
		/// <summary>
		/// Country codes (ISO 3166-1 alpha-2) where the collection is pending approval.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pendingCountries")]
		public string[] PendingCountries { get; set; }
		
		/// <summary>
		/// The status for the specified destination in the collections target country.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	/// <summary>
	/// Fields related to [competitive visibility reports] (https://support.google.com/merchants/answer/11366442).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CompetitiveVisibility
	{
		
		/// <summary>
		/// [Ads / organic ratio] (https://support.google.com/merchants/answer/11366442#zippy=%2Cadsfree-ratio) shows how often a merchant receives impressions from Shopping ads compared to organic traffic. The number is rounded and bucketed. Available only in `CompetitiveVisibilityTopMerchantView` and `CompetitiveVisibilityCompetitorView`. Cannot be filtered on in the 'WHERE' clause.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adsOrganicRatio")]
		public System.Nullable<System.Double> AdsOrganicRatio { get; set; }
		
		/// <summary>
		/// Change in visibility based on impressions with respect to the start of the selected time range (or first day with non-zero impressions) for a combined set of merchants with highest visibility approximating the market. Available only in `CompetitiveVisibilityBenchmarkView`. Cannot be filtered on in the 'WHERE' clause.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="categoryBenchmarkVisibilityTrend")]
		public System.Nullable<System.Double> CategoryBenchmarkVisibilityTrend { get; set; }
		
		/// <summary>
		/// Google product category ID to calculate the report for, represented in [Google's product taxonomy](https://support.google.com/merchants/answer/6324436). Required in the `SELECT` clause. A `WHERE` condition on `competitive_visibility.category_id` is required in the query.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="categoryId")]
		public string CategoryId { get; set; }
		
		/// <summary>
		/// The country where impression appeared. Required in the `SELECT` clause. A `WHERE` condition on `competitive_visibility.country_code` is required in the query.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="countryCode")]
		public string CountryCode { get; set; }
		
		/// <summary>
		/// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date")]
		public Date Date { get; set; }
		
		/// <summary>
		/// Domain of your competitor or your domain, if 'is_your_domain' is true. Available only in `CompetitiveVisibilityTopMerchantView` and `CompetitiveVisibilityCompetitorView`. Required in the `SELECT` clause for `CompetitiveVisibilityTopMerchantView` and `CompetitiveVisibilityCompetitorView`. Cannot be filtered on in the 'WHERE' clause.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="domain")]
		public string Domain { get; set; }
		
		/// <summary>
		/// Higher position rate shows how often a competitor’s offer got placed in a higher position on the page than your offer. Available only in `CompetitiveVisibilityTopMerchantView` and `CompetitiveVisibilityCompetitorView`. Cannot be filtered on in the 'WHERE' clause.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="higherPositionRate")]
		public System.Nullable<System.Double> HigherPositionRate { get; set; }
		
		/// <summary>
		/// True if this row contains data for your domain. Available only in `CompetitiveVisibilityTopMerchantView` and `CompetitiveVisibilityCompetitorView`. Cannot be filtered on in the 'WHERE' clause.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isYourDomain")]
		public System.Nullable<System.Boolean> IsYourDomain { get; set; }
		
		/// <summary>
		/// Page overlap rate describes how frequently competing retailers’ offers are shown together with your offers on the same page. Available only in `CompetitiveVisibilityTopMerchantView` and `CompetitiveVisibilityCompetitorView`. Cannot be filtered on in the 'WHERE' clause.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pageOverlapRate")]
		public System.Nullable<System.Double> PageOverlapRate { get; set; }
		
		/// <summary>
		/// Position of the domain in the top merchants ranking for the selected keys (`date`, `category_id`, `country_code`, `listing_type`) based on impressions. 1 is the highest. Available only in `CompetitiveVisibilityTopMerchantView` and `CompetitiveVisibilityCompetitorView`. Cannot be filtered on in the 'WHERE' clause.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rank")]
		public string Rank { get; set; }
		
		/// <summary>
		/// Relative visibility shows how often your competitors’ offers are shown compared to your offers. In other words, this is the number of displayed impressions of a competitor retailer divided by the number of your displayed impressions during a selected time range for a selected product category and country. Available only in `CompetitiveVisibilityCompetitorView`. Cannot be filtered on in the 'WHERE' clause.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="relativeVisibility")]
		public System.Nullable<System.Double> RelativeVisibility { get; set; }
		
		/// <summary>
		/// Type of impression listing. Required in the `SELECT` clause. Cannot be filtered on in the 'WHERE' clause.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trafficSource")]
		public System.Nullable<CompetitiveVisibilityTrafficSource> TrafficSource { get; set; }
		
		/// <summary>
		/// Change in visibility based on impressions for your domain with respect to the start of the selected time range (or first day with non-zero impressions). Available only in `CompetitiveVisibilityBenchmarkView`. Cannot be filtered on in the 'WHERE' clause.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="yourDomainVisibilityTrend")]
		public System.Nullable<System.Double> YourDomainVisibilityTrend { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CompetitiveVisibilityTrafficSource
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ORGANIC = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALL = 3,
	}
	
	/// <summary>
	/// Represents a conversion source owned by a Merchant account. A merchant account can have up to 200 conversion sources.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConversionSource
	{
		
		/// <summary>
		/// Output only. Generated by the Content API upon creation of a new `ConversionSource`. Format: [a-z]{4}:.+ The four characters before the colon represent the type of conversio source. Content after the colon represents the ID of the conversion source within that type. The ID of two different conversion sources might be the same across different types. The following type prefixes are supported: - galk: For GoogleAnalyticsLink sources. - mcdn: For MerchantCenterDestination sources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="conversionSourceId")]
		public string ConversionSourceId { get; set; }
		
		/// <summary>
		/// Output only. The time when an archived conversion source becomes permanently deleted and is no longer available to undelete.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expireTime")]
		public string ExpireTime { get; set; }
		
		/// <summary>
		/// "Google Analytics Link" sources can be used to get conversion data from an existing Google Analytics property into the linked Merchant Center account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="googleAnalyticsLink")]
		public GoogleAnalyticsLink GoogleAnalyticsLink { get; set; }
		
		/// <summary>
		/// "Merchant Center Destination" sources can be used to send conversion events from a website using a Google tag directly to a Merchant Center account where the source is created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="merchantCenterDestination")]
		public MerchantCenterDestination MerchantCenterDestination { get; set; }
		
		/// <summary>
		/// Output only. Current state of this conversion source. Can't be edited through the API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<ConversionSourceState> State { get; set; }
	}
	
	/// <summary>
	/// "Google Analytics Link" sources can be used to get conversion data from an existing Google Analytics property into the linked Merchant Center account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleAnalyticsLink
	{
		
		/// <summary>
		/// Represents attribution settings for conversion sources receiving pre-attribution data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attributionSettings")]
		public AttributionSettings AttributionSettings { get; set; }
		
		/// <summary>
		/// Required. Immutable. ID of the Google Analytics property the merchant is linked to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="propertyId")]
		public string PropertyId { get; set; }
		
		/// <summary>
		/// Output only. Name of the Google Analytics property the merchant is linked to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="propertyName")]
		public string PropertyName { get; set; }
	}
	
	/// <summary>
	/// "Merchant Center Destination" sources can be used to send conversion events from a website using a Google tag directly to a Merchant Center account where the source is created.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MerchantCenterDestination
	{
		
		/// <summary>
		/// Represents attribution settings for conversion sources receiving pre-attribution data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attributionSettings")]
		public AttributionSettings AttributionSettings { get; set; }
		
		/// <summary>
		/// Required. Three-letter currency code (ISO 4217). The currency code defines in which currency the conversions sent to this destination will be reported in Merchant Center.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currencyCode")]
		public string CurrencyCode { get; set; }
		
		/// <summary>
		/// Output only. Merchant Center Destination ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destinationId")]
		public string DestinationId { get; set; }
		
		/// <summary>
		/// Required. Merchant-specified display name for the destination. This is the name that identifies the conversion source within the Merchant Center UI. Limited to 64 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ConversionSourceState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ARCHIVED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 3,
	}
	
	/// <summary>
	/// Information about CSS domain.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Css
	{
		
		/// <summary>
		/// Output only. Immutable. The CSS domain ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cssDomainId")]
		public string CssDomainId { get; set; }
		
		/// <summary>
		/// Output only. Immutable. The ID of the CSS group this CSS domain is affiliated with. Only populated for CSS group users.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cssGroupId")]
		public string CssGroupId { get; set; }
		
		/// <summary>
		/// Output only. Immutable. The CSS domain's display name, used when space is constrained.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Output only. Immutable. The CSS domain's full name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fullName")]
		public string FullName { get; set; }
		
		/// <summary>
		/// Output only. Immutable. The CSS domain's homepage.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="homepageUri")]
		public string HomepageUri { get; set; }
		
		/// <summary>
		/// A list of label IDs that are assigned to this CSS domain by its CSS group. Only populated for CSS group users.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labelIds")]
		public string[] LabelIds { get; set; }
	}
	
	/// <summary>
	/// A message that represents custom attributes. Exactly one of `value` or `groupValues` must be provided. Maximum allowed number of characters for each custom attribute is 10240 (represents sum of characters for name and value). Maximum 2500 custom attributes can be set per merchant, with total size of 102.4kB.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CustomAttribute
	{
		
		/// <summary>
		/// Subattributes within this attribute group. Exactly one of value or groupValues must be provided.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="groupValues")]
		public CustomAttribute[] GroupValues { get; set; }
		
		/// <summary>
		/// The name of the attribute. Underscores will be replaced by spaces upon insertion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The value of the attribute.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CustomerReturnReason
	{
		
		/// <summary>
		/// Description of the reason.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Code of the return reason. Acceptable values are: - "`betterPriceFound`" - "`changedMind`" - "`damagedOrDefectiveItem`" - "`didNotMatchDescription`" - "`doesNotFit`" - "`expiredItem`" - "`incorrectItemReceived`" - "`noLongerNeeded`" - "`notSpecified`" - "`orderedWrongItem`" - "`other`" - "`qualityNotExpected`" - "`receivedTooLate`" - "`undeliverable`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reasonCode")]
		public string ReasonCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CutoffTime
	{
		
		/// <summary>
		/// Hour of the cutoff time until which an order has to be placed to be processed in the same day. Required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hour")]
		public System.Nullable<System.UInt32> Hour { get; set; }
		
		/// <summary>
		/// Minute of the cutoff time until which an order has to be placed to be processed in the same day. Required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minute")]
		public System.Nullable<System.UInt32> Minute { get; set; }
		
		/// <summary>
		/// Timezone identifier for the cutoff time (for example, "Europe/Zurich"). List of identifiers. Required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timezone")]
		public string Timezone { get; set; }
	}
	
	/// <summary>
	/// Datafeed configuration data.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Datafeed
	{
		
		/// <summary>
		/// The two-letter ISO 639-1 language in which the attributes are defined in the data feed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attributeLanguage")]
		public string AttributeLanguage { get; set; }
		
		/// <summary>
		/// Required. The type of data feed. For product inventory feeds, only feeds for local stores, not online stores, are supported. Acceptable values are: - "`local products`" - "`product inventory`" - "`products`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentType")]
		public string ContentType { get; set; }
		
		/// <summary>
		/// The required fields vary based on the frequency of fetching. For a monthly fetch schedule, day_of_month and hour are required. For a weekly fetch schedule, weekday and hour are required. For a daily fetch schedule, only hour is required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fetchSchedule")]
		public DatafeedFetchSchedule FetchSchedule { get; set; }
		
		/// <summary>
		/// Required. The filename of the feed. All feeds must have a unique file name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fileName")]
		public string FileName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="format")]
		public DatafeedFormat Format { get; set; }
		
		/// <summary>
		/// Required for update. The ID of the data feed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "`content#datafeed`"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Required for insert. A descriptive name of the data feed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The targets this feed should apply to (country, language, destinations).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targets")]
		public DatafeedTarget[] Targets { get; set; }
	}
	
	/// <summary>
	/// The required fields vary based on the frequency of fetching. For a monthly fetch schedule, day_of_month and hour are required. For a weekly fetch schedule, weekday and hour are required. For a daily fetch schedule, only hour is required.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DatafeedFetchSchedule
	{
		
		/// <summary>
		/// The day of the month the feed file should be fetched (1-31).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dayOfMonth")]
		public System.Nullable<System.UInt32> DayOfMonth { get; set; }
		
		/// <summary>
		/// The URL where the feed file can be fetched. Google Merchant Center will support automatic scheduled uploads using the HTTP, HTTPS, FTP, or SFTP protocols, so the value will need to be a valid link using one of those four protocols.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fetchUrl")]
		public string FetchUrl { get; set; }
		
		/// <summary>
		/// The hour of the day the feed file should be fetched (0-23).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hour")]
		public System.Nullable<System.UInt32> Hour { get; set; }
		
		/// <summary>
		/// The minute of the hour the feed file should be fetched (0-59). Read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minuteOfHour")]
		public System.Nullable<System.UInt32> MinuteOfHour { get; set; }
		
		/// <summary>
		/// An optional password for fetch_url.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		/// <summary>
		/// Whether the scheduled fetch is paused or not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paused")]
		public System.Nullable<System.Boolean> Paused { get; set; }
		
		/// <summary>
		/// Time zone used for schedule. UTC by default. For example, "America/Los_Angeles".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeZone")]
		public string TimeZone { get; set; }
		
		/// <summary>
		/// An optional user name for fetch_url.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
		
		/// <summary>
		/// The day of the week the feed file should be fetched. Acceptable values are: - "`monday`" - "`tuesday`" - "`wednesday`" - "`thursday`" - "`friday`" - "`saturday`" - "`sunday`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="weekday")]
		public string Weekday { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DatafeedFormat
	{
		
		/// <summary>
		/// Delimiter for the separation of values in a delimiter-separated values feed. If not specified, the delimiter will be auto-detected. Ignored for non-DSV data feeds. Acceptable values are: - "`pipe`" - "`tab`" - "`tilde`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="columnDelimiter")]
		public string ColumnDelimiter { get; set; }
		
		/// <summary>
		/// Character encoding scheme of the data feed. If not specified, the encoding will be auto-detected. Acceptable values are: - "`latin-1`" - "`utf-16be`" - "`utf-16le`" - "`utf-8`" - "`windows-1252`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fileEncoding")]
		public string FileEncoding { get; set; }
		
		/// <summary>
		/// Specifies how double quotes are interpreted. If not specified, the mode will be auto-detected. Ignored for non-DSV data feeds. Acceptable values are: - "`normal character`" - "`value quoting`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quotingMode")]
		public string QuotingMode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DatafeedTarget
	{
		
		/// <summary>
		/// Deprecated. Use `feedLabel` instead. The country where the items in the feed will be included in the search index, represented as a CLDR territory code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// The list of destinations to exclude for this target (corresponds to cleared check boxes in Merchant Center). Products that are excluded from all destinations for more than 7 days are automatically deleted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="excludedDestinations")]
		public string[] ExcludedDestinations { get; set; }
		
		/// <summary>
		/// Feed label for the DatafeedTarget. Either `country` or `feedLabel` is required. If both `feedLabel` and `country` is specified, the values must match. Must be less than or equal to 20 uppercase letters (A-Z), numbers (0-9), and dashes (-).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="feedLabel")]
		public string FeedLabel { get; set; }
		
		/// <summary>
		/// The list of destinations to include for this target (corresponds to checked check boxes in Merchant Center). Default destinations are always included unless provided in `excludedDestinations`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="includedDestinations")]
		public string[] IncludedDestinations { get; set; }
		
		/// <summary>
		/// The two-letter ISO 639-1 language of the items in the feed. Must be a valid language for `targets[].country`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="language")]
		public string Language { get; set; }
		
		/// <summary>
		/// The countries where the items may be displayed. Represented as a CLDR territory code. Will be ignored for "product inventory" feeds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetCountries")]
		public string[] TargetCountries { get; set; }
	}
	
	/// <summary>
	/// The status of a datafeed, that is, the result of the last retrieval of the datafeed computed asynchronously when the feed processing is finished.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DatafeedStatus
	{
		
		/// <summary>
		/// The country for which the status is reported, represented as a CLDR territory code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// The ID of the feed for which the status is reported.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="datafeedId")]
		public string DatafeedId { get; set; }
		
		/// <summary>
		/// The list of errors occurring in the feed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public DatafeedStatusError[] Errors { get; set; }
		
		/// <summary>
		/// The feed label status is reported for.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="feedLabel")]
		public string FeedLabel { get; set; }
		
		/// <summary>
		/// The number of items in the feed that were processed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemsTotal")]
		public string ItemsTotal { get; set; }
		
		/// <summary>
		/// The number of items in the feed that were valid.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemsValid")]
		public string ItemsValid { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "`content#datafeedStatus`"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// The two-letter ISO 639-1 language for which the status is reported.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="language")]
		public string Language { get; set; }
		
		/// <summary>
		/// The last date at which the feed was uploaded.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastUploadDate")]
		public string LastUploadDate { get; set; }
		
		/// <summary>
		/// The processing status of the feed. Acceptable values are: - "`"`failure`": The feed could not be processed or all items had errors.`" - "`in progress`": The feed is being processed. - "`none`": The feed has not yet been processed. For example, a feed that has never been uploaded will have this processing status. - "`success`": The feed was processed successfully, though some items might have had errors. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="processingStatus")]
		public string ProcessingStatus { get; set; }
		
		/// <summary>
		/// The list of errors occurring in the feed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="warnings")]
		public DatafeedStatusError[] Warnings { get; set; }
	}
	
	/// <summary>
	/// An error occurring in the feed, like "invalid price".
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DatafeedStatusError
	{
		
		/// <summary>
		/// The code of the error, for example, "validation/invalid_value".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// The number of occurrences of the error in the feed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="count")]
		public string Count { get; set; }
		
		/// <summary>
		/// A list of example occurrences of the error, grouped by product.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="examples")]
		public DatafeedStatusExample[] Examples { get; set; }
		
		/// <summary>
		/// The error message, for example, "Invalid price".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// An example occurrence for a particular error.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DatafeedStatusExample
	{
		
		/// <summary>
		/// The ID of the example item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemId")]
		public string ItemId { get; set; }
		
		/// <summary>
		/// Line number in the data feed where the example is found.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lineNumber")]
		public string LineNumber { get; set; }
		
		/// <summary>
		/// The problematic value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DatafeedsCustomBatchRequest
	{
		
		/// <summary>
		/// The request entries to be processed in the batch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entries")]
		public DatafeedsCustomBatchRequestEntry[] Entries { get; set; }
	}
	
	/// <summary>
	/// A batch entry encoding a single non-batch datafeeds request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DatafeedsCustomBatchRequestEntry
	{
		
		/// <summary>
		/// An entry ID, unique within the batch request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="batchId")]
		public System.Nullable<System.UInt32> BatchId { get; set; }
		
		/// <summary>
		/// Datafeed configuration data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="datafeed")]
		public Datafeed Datafeed { get; set; }
		
		/// <summary>
		/// The ID of the data feed to get, delete or fetch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="datafeedId")]
		public string DatafeedId { get; set; }
		
		/// <summary>
		/// The ID of the managing account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="merchantId")]
		public string MerchantId { get; set; }
		
		/// <summary>
		/// The method of the batch entry. Acceptable values are: - "`delete`" - "`fetchNow`" - "`get`" - "`insert`" - "`update`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="method")]
		public string Method { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DatafeedsCustomBatchResponse
	{
		
		/// <summary>
		/// The result of the execution of the batch requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entries")]
		public DatafeedsCustomBatchResponseEntry[] Entries { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "`content#datafeedsCustomBatchResponse`".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	/// <summary>
	/// A batch entry encoding a single non-batch datafeeds response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DatafeedsCustomBatchResponseEntry
	{
		
		/// <summary>
		/// The ID of the request entry this entry responds to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="batchId")]
		public System.Nullable<System.UInt32> BatchId { get; set; }
		
		/// <summary>
		/// Datafeed configuration data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="datafeed")]
		public Datafeed Datafeed { get; set; }
		
		/// <summary>
		/// A list of errors returned by a failed batch entry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Errors Errors { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DatafeedsFetchNowResponse
	{
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "`content#datafeedsFetchNowResponse`".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DatafeedsListResponse
	{
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "`content#datafeedsListResponse`".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// The token for the retrieval of the next page of datafeeds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resources")]
		public Datafeed[] Resources { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DatafeedstatusesCustomBatchRequest
	{
		
		/// <summary>
		/// The request entries to be processed in the batch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entries")]
		public DatafeedstatusesCustomBatchRequestEntry[] Entries { get; set; }
	}
	
	/// <summary>
	/// A batch entry encoding a single non-batch datafeedstatuses request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DatafeedstatusesCustomBatchRequestEntry
	{
		
		/// <summary>
		/// An entry ID, unique within the batch request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="batchId")]
		public System.Nullable<System.UInt32> BatchId { get; set; }
		
		/// <summary>
		/// Deprecated. Use `feedLabel` instead. The country to get the datafeed status for. If this parameter is provided, then `language` must also be provided. Note that for multi-target datafeeds this parameter is required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// The ID of the data feed to get.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="datafeedId")]
		public string DatafeedId { get; set; }
		
		/// <summary>
		/// The feed label to get the datafeed status for. If this parameter is provided, then `language` must also be provided. Note that for multi-target datafeeds this parameter is required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="feedLabel")]
		public string FeedLabel { get; set; }
		
		/// <summary>
		/// The language to get the datafeed status for. If this parameter is provided then `country` must also be provided. Note that for multi-target datafeeds this parameter is required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="language")]
		public string Language { get; set; }
		
		/// <summary>
		/// The ID of the managing account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="merchantId")]
		public string MerchantId { get; set; }
		
		/// <summary>
		/// The method of the batch entry. Acceptable values are: - "`get`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="method")]
		public string Method { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DatafeedstatusesCustomBatchResponse
	{
		
		/// <summary>
		/// The result of the execution of the batch requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entries")]
		public DatafeedstatusesCustomBatchResponseEntry[] Entries { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "`content#datafeedstatusesCustomBatchResponse`".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	/// <summary>
	/// A batch entry encoding a single non-batch datafeedstatuses response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DatafeedstatusesCustomBatchResponseEntry
	{
		
		/// <summary>
		/// The ID of the request entry this entry responds to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="batchId")]
		public System.Nullable<System.UInt32> BatchId { get; set; }
		
		/// <summary>
		/// The status of a datafeed, that is, the result of the last retrieval of the datafeed computed asynchronously when the feed processing is finished.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="datafeedStatus")]
		public DatafeedStatus DatafeedStatus { get; set; }
		
		/// <summary>
		/// A list of errors returned by a failed batch entry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Errors Errors { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DatafeedstatusesListResponse
	{
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "`content#datafeedstatusesListResponse`".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// The token for the retrieval of the next page of datafeed statuses.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resources")]
		public DatafeedStatus[] Resources { get; set; }
	}
	
	/// <summary>
	/// Represents civil time (or occasionally physical time). This type can represent a civil time in one of a few possible ways: * When utc_offset is set and time_zone is unset: a civil time on a calendar day with a particular offset from UTC. * When time_zone is set and utc_offset is unset: a civil time on a calendar day in a particular time zone. * When neither time_zone nor utc_offset is set: a civil time on a calendar day in local time. The date is relative to the Proleptic Gregorian Calendar. If year, month, or day are 0, the DateTime is considered not to have a specific year, month, or day respectively. This type may also be used to represent a physical time if all the date and time fields are set and either case of the `time_offset` oneof is set. Consider using `Timestamp` message for physical time instead. If your use case also would like to store the user's timezone, that can be done in another field. This type is more flexible than some applications may want. Make sure to document and validate your application's limitations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DateTime
	{
		
		/// <summary>
		/// Optional. Day of month. Must be from 1 to 31 and valid for the year and month, or 0 if specifying a datetime without a day.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="day")]
		public System.Nullable<System.Int32> Day { get; set; }
		
		/// <summary>
		/// Optional. Hours of day in 24 hour format. Should be from 0 to 23, defaults to 0 (midnight). An API may choose to allow the value "24:00:00" for scenarios like business closing time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hours")]
		public System.Nullable<System.Int32> Hours { get; set; }
		
		/// <summary>
		/// Optional. Minutes of hour of day. Must be from 0 to 59, defaults to 0.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minutes")]
		public System.Nullable<System.Int32> Minutes { get; set; }
		
		/// <summary>
		/// Optional. Month of year. Must be from 1 to 12, or 0 if specifying a datetime without a month.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="month")]
		public System.Nullable<System.Int32> Month { get; set; }
		
		/// <summary>
		/// Optional. Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999, defaults to 0.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nanos")]
		public System.Nullable<System.Int32> Nanos { get; set; }
		
		/// <summary>
		/// Optional. Seconds of minutes of the time. Must normally be from 0 to 59, defaults to 0. An API may allow the value 60 if it allows leap-seconds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="seconds")]
		public System.Nullable<System.Int32> Seconds { get; set; }
		
		/// <summary>
		/// Represents a time zone from the [IANA Time Zone Database](https://www.iana.org/time-zones).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeZone")]
		public TimeZone TimeZone { get; set; }
		
		/// <summary>
		/// UTC offset. Must be whole seconds, between -18 hours and +18 hours. For example, a UTC offset of -4:00 would be represented as { seconds: -14400 }.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="utcOffset")]
		public string UtcOffset { get; set; }
		
		/// <summary>
		/// Optional. Year of date. Must be from 1 to 9999, or 0 if specifying a datetime without a year.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="year")]
		public System.Nullable<System.Int32> Year { get; set; }
	}
	
	/// <summary>
	/// Represents a time zone from the [IANA Time Zone Database](https://www.iana.org/time-zones).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TimeZone
	{
		
		/// <summary>
		/// IANA Time Zone Database time zone, e.g. "America/New_York".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Optional. IANA Time Zone Database version number, e.g. "2019a".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	/// <summary>
	/// A delivery area for the product. Only one of `countryCode` or `postalCodeRange` must be set.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeliveryArea
	{
		
		/// <summary>
		/// Required. The country that the product can be delivered to. Submit a [unicode CLDR region](http://www.unicode.org/repos/cldr/tags/latest/common/main/en.xml) such as `US` or `CH`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="countryCode")]
		public string CountryCode { get; set; }
		
		/// <summary>
		/// A range of postal codes that defines the delivery area. Only set `firstPostalCode` when specifying a single postal code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postalCodeRange")]
		public DeliveryAreaPostalCodeRange PostalCodeRange { get; set; }
		
		/// <summary>
		/// A state, territory, or prefecture. This is supported for the United States, Australia, and Japan. Provide a subdivision code from the ISO 3166-2 code tables ([US](https://en.wikipedia.org/wiki/ISO_3166-2:US), [AU](https://en.wikipedia.org/wiki/ISO_3166-2:AU), or [JP](https://en.wikipedia.org/wiki/ISO_3166-2:JP)) without country prefix (for example, `"NY"`, `"NSW"`, `"03"`).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="regionCode")]
		public string RegionCode { get; set; }
	}
	
	/// <summary>
	/// A range of postal codes that defines the delivery area. Only set `firstPostalCode` when specifying a single postal code.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeliveryAreaPostalCodeRange
	{
		
		/// <summary>
		/// Required. A postal code or a pattern of the form prefix* denoting the inclusive lower bound of the range defining the area. Examples values: `"94108"`, `"9410*"`, `"9*"`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firstPostalCode")]
		public string FirstPostalCode { get; set; }
		
		/// <summary>
		/// A postal code or a pattern of the form prefix* denoting the inclusive upper bound of the range defining the area (for example [070* - 078*] results in the range [07000 - 07899]). It must have the same length as `firstPostalCode`: if `firstPostalCode` is a postal code then `lastPostalCode` must be a postal code too; if firstPostalCode is a pattern then `lastPostalCode` must be a pattern with the same prefix length. Ignored if not set, then the area is defined as being all the postal codes matching `firstPostalCode`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastPostalCode")]
		public string LastPostalCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeliveryTime
	{
		
		[System.Runtime.Serialization.DataMember(Name="cutoffTime")]
		public CutoffTime CutoffTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="handlingBusinessDayConfig")]
		public BusinessDayConfig HandlingBusinessDayConfig { get; set; }
		
		/// <summary>
		/// Holiday cutoff definitions. If configured, they specify order cutoff times for holiday-specific shipping.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="holidayCutoffs")]
		public HolidayCutoff[] HolidayCutoffs { get; set; }
		
		/// <summary>
		/// Maximum number of business days spent before an order is shipped. 0 means same day shipped, 1 means next day shipped. Must be greater than or equal to `minHandlingTimeInDays`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxHandlingTimeInDays")]
		public System.Nullable<System.UInt32> MaxHandlingTimeInDays { get; set; }
		
		/// <summary>
		/// Maximum number of business days that are spent in transit. 0 means same day delivery, 1 means next day delivery. Must be greater than or equal to `minTransitTimeInDays`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxTransitTimeInDays")]
		public System.Nullable<System.UInt32> MaxTransitTimeInDays { get; set; }
		
		/// <summary>
		/// Minimum number of business days spent before an order is shipped. 0 means same day shipped, 1 means next day shipped.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minHandlingTimeInDays")]
		public System.Nullable<System.UInt32> MinHandlingTimeInDays { get; set; }
		
		/// <summary>
		/// Minimum number of business days that are spent in transit. 0 means same day delivery, 1 means next day delivery. Either `{min,max}TransitTimeInDays` or `transitTimeTable` must be set, but not both.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minTransitTimeInDays")]
		public System.Nullable<System.UInt32> MinTransitTimeInDays { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transitBusinessDayConfig")]
		public BusinessDayConfig TransitBusinessDayConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transitTimeTable")]
		public TransitTable TransitTimeTable { get; set; }
		
		/// <summary>
		/// Indicates that the delivery time should be calculated per warehouse (shipping origin location) based on the settings of the selected carrier. When set, no other transit time related field in DeliveryTime should be set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="warehouseBasedDeliveryTimes")]
		public WarehouseBasedDeliveryTime[] WarehouseBasedDeliveryTimes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class HolidayCutoff
	{
		
		/// <summary>
		/// Date of the order deadline, in ISO 8601 format. For example, "2016-11-29" for 29th November 2016. Required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deadlineDate")]
		public string DeadlineDate { get; set; }
		
		/// <summary>
		/// Hour of the day on the deadline date until which the order has to be placed to qualify for the delivery guarantee. Possible values are: 0 (midnight), 1, ..., 12 (noon), 13, ..., 23. Required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deadlineHour")]
		public System.Nullable<System.UInt32> DeadlineHour { get; set; }
		
		/// <summary>
		/// Timezone identifier for the deadline hour (for example, "Europe/Zurich"). List of identifiers. Required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deadlineTimezone")]
		public string DeadlineTimezone { get; set; }
		
		/// <summary>
		/// Unique identifier for the holiday. Required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="holidayId")]
		public string HolidayId { get; set; }
		
		/// <summary>
		/// Date on which the deadline will become visible to consumers in ISO 8601 format. For example, "2016-10-31" for 31st October 2016. Required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="visibleFromDate")]
		public string VisibleFromDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransitTable
	{
		
		/// <summary>
		/// A list of postal group names. The last value can be `"all other locations"`. Example: `["zone 1", "zone 2", "all other locations"]`. The referred postal code groups must match the delivery country of the service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postalCodeGroupNames")]
		public string[] PostalCodeGroupNames { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rows")]
		public TransitTableTransitTimeRow[] Rows { get; set; }
		
		/// <summary>
		/// A list of transit time labels. The last value can be `"all other labels"`. Example: `["food", "electronics", "all other labels"]`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transitTimeLabels")]
		public string[] TransitTimeLabels { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransitTableTransitTimeRow
	{
		
		[System.Runtime.Serialization.DataMember(Name="values")]
		public TransitTableTransitTimeRowTransitTimeValue[] Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransitTableTransitTimeRowTransitTimeValue
	{
		
		/// <summary>
		/// Must be greater than or equal to `minTransitTimeInDays`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxTransitTimeInDays")]
		public System.Nullable<System.UInt32> MaxTransitTimeInDays { get; set; }
		
		/// <summary>
		/// Transit time range (min-max) in business days. 0 means same day delivery, 1 means next day delivery.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minTransitTimeInDays")]
		public System.Nullable<System.UInt32> MinTransitTimeInDays { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WarehouseBasedDeliveryTime
	{
		
		/// <summary>
		/// Required. Carrier, such as `"UPS"` or `"Fedex"`. The list of supported carriers can be retrieved through the `listSupportedCarriers` method.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="carrier")]
		public string Carrier { get; set; }
		
		/// <summary>
		/// Required. Carrier service, such as `"ground"` or `"2 days"`. The list of supported services for a carrier can be retrieved through the `listSupportedCarriers` method. The name of the service must be in the eddSupportedServices list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="carrierService")]
		public string CarrierService { get; set; }
		
		/// <summary>
		/// Shipping origin's state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originAdministrativeArea")]
		public string OriginAdministrativeArea { get; set; }
		
		/// <summary>
		/// Shipping origin's city.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originCity")]
		public string OriginCity { get; set; }
		
		/// <summary>
		/// Shipping origin's country represented as a [CLDR territory code](https://github.com/unicode-org/cldr/blob/latest/common/main/en.xml).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originCountry")]
		public string OriginCountry { get; set; }
		
		/// <summary>
		/// Shipping origin.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originPostalCode")]
		public string OriginPostalCode { get; set; }
		
		/// <summary>
		/// Shipping origin's street address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originStreetAddress")]
		public string OriginStreetAddress { get; set; }
		
		/// <summary>
		/// The name of the warehouse. Warehouse name need to be matched with name. If warehouseName is set, the below fields will be ignored. The warehouse info will be read from warehouse.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="warehouseName")]
		public string WarehouseName { get; set; }
	}
	
	/// <summary>
	/// Distance represented by an integer and unit.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Distance
	{
		
		/// <summary>
		/// The distance unit. Acceptable values are `None`, `Miles`, and `Kilometers`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public string Unit { get; set; }
		
		/// <summary>
		/// The distance represented as a number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// Response message for GetFreeListingsProgramStatus.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FreeListingsProgramStatus
	{
		
		/// <summary>
		/// State of the program. `ENABLED` if there are offers for at least one region.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="globalState")]
		public System.Nullable<FreeListingsProgramStatusGlobalState> GlobalState { get; set; }
		
		/// <summary>
		/// Status of the program in each region. Regions with the same status and review eligibility are grouped together in `regionCodes`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="regionStatuses")]
		public FreeListingsProgramStatusRegionStatus[] RegionStatuses { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum FreeListingsProgramStatusGlobalState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROGRAM_STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_ENABLED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_OFFERS_UPLOADED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 3,
	}
	
	/// <summary>
	/// Status of program and region.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FreeListingsProgramStatusRegionStatus
	{
		
		/// <summary>
		/// Date by which eligibilityStatus will go from `WARNING` to `DISAPPROVED`. Only visible when your eligibilityStatus is WARNING. In [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DD`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disapprovalDate")]
		public string DisapprovalDate { get; set; }
		
		/// <summary>
		/// Eligibility status of the standard free listing program.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eligibilityStatus")]
		public System.Nullable<FreeListingsProgramStatusRegionStatusEligibilityStatus> EligibilityStatus { get; set; }
		
		/// <summary>
		/// Issues that must be fixed to be eligible for review.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="onboardingIssues")]
		public string[] OnboardingIssues { get; set; }
		
		/// <summary>
		/// The two-letter [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) codes for all the regions with the same `eligibilityStatus` and `reviewEligibility`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="regionCodes")]
		public string[] RegionCodes { get; set; }
		
		/// <summary>
		/// If a program is eligible for review in a specific region. Only visible if `eligibilityStatus` is `DISAPPROVED`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reviewEligibilityStatus")]
		public System.Nullable<FreeListingsProgramStatusRegionStatusReviewEligibilityStatus> ReviewEligibilityStatus { get; set; }
		
		/// <summary>
		/// Review ineligibility reason if account is not eligible for review.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reviewIneligibilityReason")]
		public System.Nullable<FreeListingsProgramStatusRegionStatusReviewIneligibilityReason> ReviewIneligibilityReason { get; set; }
		
		/// <summary>
		/// Reason a program in a specific region isn’t eligible for review. Only visible if `reviewEligibilityStatus` is `INELIGIBLE`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reviewIneligibilityReasonDescription")]
		public string ReviewIneligibilityReasonDescription { get; set; }
		
		/// <summary>
		/// Additional details for review ineligibility reasons.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reviewIneligibilityReasonDetails")]
		public FreeListingsProgramStatusReviewIneligibilityReasonDetails ReviewIneligibilityReasonDetails { get; set; }
		
		/// <summary>
		/// Issues evaluated in the review process. Fix all issues before requesting a review.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reviewIssues")]
		public string[] ReviewIssues { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum FreeListingsProgramStatusRegionStatusEligibilityStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPROVED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISAPPROVED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WARNING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNDER_REVIEW = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING_REVIEW = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ONBOARDING = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum FreeListingsProgramStatusRegionStatusReviewEligibilityStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REVIEW_ELIGIBILITY_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ELIGIBLE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INELIGIBLE = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum FreeListingsProgramStatusRegionStatusReviewIneligibilityReason
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REVIEW_INELIGIBILITY_REASON_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ONBOARDING_ISSUES = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_ENOUGH_OFFERS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_COOLDOWN_PERIOD = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALREADY_UNDER_REVIEW = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_REVIEW_REQUIRED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WILL_BE_REVIEWED_AUTOMATICALLY = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IS_RETIRED = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALREADY_REVIEWED = 8,
	}
	
	/// <summary>
	/// Additional details for review ineligibility reasons.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FreeListingsProgramStatusReviewIneligibilityReasonDetails
	{
		
		/// <summary>
		/// This timestamp represents end of cooldown period for review ineligbility reason `IN_COOLDOWN_PERIOD`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cooldownTime")]
		public string CooldownTime { get; set; }
	}
	
	/// <summary>
	/// Response containing generated recommendations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GenerateRecommendationsResponse
	{
		
		/// <summary>
		/// Recommendations generated for a request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recommendations")]
		public Recommendation[] Recommendations { get; set; }
		
		/// <summary>
		/// Output only. Response token is a string created for each `GenerateRecommendationsResponse`. This token doesn't expire, and is globally unique. This token must be used when reporting interactions for recommendations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="responseToken")]
		public string ResponseToken { get; set; }
	}
	
	/// <summary>
	/// Recommendations are suggested ways to improve your merchant account's performance. For example, to engage with a feature, or start using a new Google product.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Recommendation
	{
		
		/// <summary>
		/// Output only. CTAs of this recommendation. Repeated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additionalCallToAction")]
		public RecommendationCallToAction[] AdditionalCallToAction { get; set; }
		
		/// <summary>
		/// Output only. List of additional localized descriptions for a recommendation. Localication uses the `languageCode` field in `GenerateRecommendations` requests. Not all description types are guaranteed to be present and we recommend to rely on default description.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additionalDescriptions")]
		public RecommendationDescription[] AdditionalDescriptions { get; set; }
		
		/// <summary>
		/// Output only. Any creatives attached to the recommendation. Repeated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creative")]
		public RecommendationCreative[] Creative { get; set; }
		
		/// <summary>
		/// Call to action (CTA) that explains how a merchant can implement this recommendation
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultCallToAction")]
		public RecommendationCallToAction DefaultCallToAction { get; set; }
		
		/// <summary>
		/// Optional. Localized recommendation description. The localization the {@link `GenerateRecommendationsRequest.language_code`} field in {@link `GenerateRecommendationsRequest`} requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultDescription")]
		public string DefaultDescription { get; set; }
		
		/// <summary>
		/// Optional. A numerical score of the impact from the recommendation's description. For example, a recommendation might suggest an upward trend in sales for a certain product. Higher number means larger impact.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numericalImpact")]
		public System.Nullable<System.Int32> NumericalImpact { get; set; }
		
		/// <summary>
		/// Optional. Indicates whether a user needs to pay when they complete the user journey suggested by the recommendation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paid")]
		public System.Nullable<System.Boolean> Paid { get; set; }
		
		/// <summary>
		/// Optional. Localized recommendation name. The localization uses the {@link `GenerateRecommendationsRequest.language_code`} field in {@link `GenerateRecommendationsRequest`} requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recommendationName")]
		public string RecommendationName { get; set; }
		
		/// <summary>
		/// Optional. Subtype of the recommendations. Only applicable when multiple recommendations can be generated per type, and is used as an identifier of recommendation under the same recommendation type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subType")]
		public string SubType { get; set; }
		
		/// <summary>
		/// Optional. Localized Recommendation Title. Localization uses the {@link `GenerateRecommendationsRequest.language_code`} field in {@link `GenerateRecommendationsRequest`} requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// Output only. Type of the recommendation. List of currently available recommendation types: - OPPORTUNITY_CREATE_NEW_COLLECTION - OPPORTUNITY_CREATE_EMAIL_CAMPAIGN
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Call to action (CTA) that explains how a merchant can implement this recommendation
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RecommendationCallToAction
	{
		
		/// <summary>
		/// Output only. Intent of the action. This value describes the intent (for example, `OPEN_CREATE_EMAIL_CAMPAIGN_FLOW`) and can vary from recommendation to recommendation. This value can change over time for the same recommendation. Currently available intent values: - OPEN_CREATE_EMAIL_CAMPAIGN_FLOW: Opens a user journey where they can create a marketing email campaign. (No default URL) - OPEN_CREATE_COLLECTION_TAB: Opens a user journey where they can [create a collection](https://support.google.com/merchants/answer/9703228) for their Merchant account. (No default URL)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="intent")]
		public string Intent { get; set; }
		
		/// <summary>
		/// Output only. Localized text of the CTA. Optional.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="localizedText")]
		public string LocalizedText { get; set; }
		
		/// <summary>
		/// Optional. URL of the CTA. This field will only be set for some recommendations where there is a suggested landing URL. Otherwise it will be set to an empty string. We recommend developers to use their own custom landing page according to the description of the intent field above when this uri field is empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	/// <summary>
	/// Google-provided description for the recommendation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RecommendationDescription
	{
		
		/// <summary>
		/// Output only. Text of the description.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
		
		/// <summary>
		/// Output only. Type of the description.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<RecommendationDescriptionType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum RecommendationDescriptionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DESCRIPTION_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SHORT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LONG = 2,
	}
	
	/// <summary>
	/// Creative is a multimedia attachment to recommendation that can be used on the frontend.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RecommendationCreative
	{
		
		/// <summary>
		/// Type of the creative.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<RecommendationCreativeType> Type { get; set; }
		
		/// <summary>
		/// URL of the creative.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum RecommendationCreativeType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATIVE_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIDEO = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PHOTO = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GmbAccounts
	{
		
		/// <summary>
		/// The ID of the Merchant Center account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
		
		/// <summary>
		/// A list of Business Profiles which are available to the merchant.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gmbAccounts")]
		public GmbAccountsGmbAccount[] GmbAccounts1 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GmbAccountsGmbAccount
	{
		
		/// <summary>
		/// The email which identifies the Business Profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// Number of listings under this account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="listingCount")]
		public string ListingCount { get; set; }
		
		/// <summary>
		/// The name of the Business Profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The type of the Business Profile (User or Business).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// A non-empty list of row or column headers for a table. Exactly one of `prices`, `weights`, `numItems`, `postalCodeGroupNames`, or `location` must be set.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Headers
	{
		
		/// <summary>
		/// A list of location ID sets. Must be non-empty. Can only be set if all other fields are not set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locations")]
		public LocationIdSet[] Locations { get; set; }
		
		/// <summary>
		/// A list of inclusive number of items upper bounds. The last value can be `"infinity"`. For example `["10", "50", "infinity"]` represents the headers "<= 10 items", "<= 50 items", and "> 50 items". Must be non-empty. Can only be set if all other fields are not set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numberOfItems")]
		public string[] NumberOfItems { get; set; }
		
		/// <summary>
		/// A list of postal group names. The last value can be `"all other locations"`. Example: `["zone 1", "zone 2", "all other locations"]`. The referred postal code groups must match the delivery country of the service. Must be non-empty. Can only be set if all other fields are not set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postalCodeGroupNames")]
		public string[] PostalCodeGroupNames { get; set; }
		
		/// <summary>
		/// A list of inclusive order price upper bounds. The last price's value can be `"infinity"`. For example `[{"value": "10", "currency": "USD"}, {"value": "500", "currency": "USD"}, {"value": "infinity", "currency": "USD"}]` represents the headers "<= $10", "<= $500", and "> $500". All prices within a service must have the same currency. Must be non-empty. Can only be set if all other fields are not set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="prices")]
		public Price[] Prices { get; set; }
		
		/// <summary>
		/// A list of inclusive order weight upper bounds. The last weight's value can be `"infinity"`. For example `[{"value": "10", "unit": "kg"}, {"value": "50", "unit": "kg"}, {"value": "infinity", "unit": "kg"}]` represents the headers "<= 10kg", "<= 50kg", and "> 50kg". All weights within a service must have the same unit. Must be non-empty. Can only be set if all other fields are not set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="weights")]
		public Weight[] Weights { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LocationIdSet
	{
		
		/// <summary>
		/// A non-empty list of location IDs. They must all be of the same location type (for example, state).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locationIds")]
		public string[] LocationIds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Weight
	{
		
		/// <summary>
		/// Required. The weight unit. Acceptable values are: - "`kg`" - "`lb`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public string Unit { get; set; }
		
		/// <summary>
		/// Required. The weight represented as a number. The weight can have a maximum precision of four decimal places.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class HolidaysHoliday
	{
		
		/// <summary>
		/// The CLDR territory code of the country in which the holiday is available. For example, "US", "DE", "GB". A holiday cutoff can only be configured in a shipping settings service with matching delivery country. Always present.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="countryCode")]
		public string CountryCode { get; set; }
		
		/// <summary>
		/// Date of the holiday, in ISO 8601 format. For example, "2016-12-25" for Christmas 2016. Always present.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date")]
		public string Date { get; set; }
		
		/// <summary>
		/// Date on which the order has to arrive at the customer's, in ISO 8601 format. For example, "2016-12-24" for 24th December 2016. Always present.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deliveryGuaranteeDate")]
		public string DeliveryGuaranteeDate { get; set; }
		
		/// <summary>
		/// Hour of the day in the delivery location's timezone on the guaranteed delivery date by which the order has to arrive at the customer's. Possible values are: 0 (midnight), 1, ..., 12 (noon), 13, ..., 23. Always present.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deliveryGuaranteeHour")]
		public string DeliveryGuaranteeHour { get; set; }
		
		/// <summary>
		/// Unique identifier for the holiday to be used when configuring holiday cutoffs. Always present.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The holiday type. Always present. Acceptable values are: - "`Christmas`" - "`Easter`" - "`Father's Day`" - "`Halloween`" - "`Independence Day (USA)`" - "`Mother's Day`" - "`Thanksgiving`" - "`Valentine's Day`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Request message for the `InsertCheckoutSettings` method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InsertCheckoutSettingsRequest
	{
		
		/// <summary>
		/// Specifications related to the `Checkout` URL. The `UriTemplate` is of the form `https://www.mystore.com/checkout?item_id={id}` where `{id}` will be automatically replaced with data from the merchant account with this attribute [offer_id](https://developers.google.com/shopping-content/reference/rest/v2.1/products#Product.FIELDS.offer_id)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uriSettings")]
		public UrlSettings UriSettings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Installment
	{
		
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public Price Amount { get; set; }
		
		/// <summary>
		/// The number of installments the buyer has to pay.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="months")]
		public string Months { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InvoiceSummary
	{
		
		/// <summary>
		/// Summary of the total amounts of the additional charges.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additionalChargeSummaries")]
		public InvoiceSummaryAdditionalChargeSummary[] AdditionalChargeSummaries { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="productTotal")]
		public Amount ProductTotal { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InvoiceSummaryAdditionalChargeSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="totalAmount")]
		public Amount TotalAmount { get; set; }
		
		/// <summary>
		/// [required] Type of the additional charge. Acceptable values are: - "`shipping`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// The IDs of labels that should be assigned to the CSS domain.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LabelIds
	{
		
		/// <summary>
		/// The list of label IDs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labelIds")]
		public string[] LabelIds1 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LiaAboutPageSettings
	{
		
		/// <summary>
		/// The status of the verification process for the About page. Acceptable values are: - "`active`" - "`inactive`" - "`pending`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// The URL for the About page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LiaCountrySettings
	{
		
		[System.Runtime.Serialization.DataMember(Name="about")]
		public LiaAboutPageSettings About { get; set; }
		
		/// <summary>
		/// Required. CLDR country code (for example, "US").
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// The status of the "Merchant hosted local storefront" feature.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hostedLocalStorefrontActive")]
		public System.Nullable<System.Boolean> HostedLocalStorefrontActive { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="inventory")]
		public LiaInventorySettings Inventory { get; set; }
		
		/// <summary>
		/// Omnichannel experience details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="omnichannelExperience")]
		public LiaOmnichannelExperience OmnichannelExperience { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="onDisplayToOrder")]
		public LiaOnDisplayToOrderSettings OnDisplayToOrder { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="posDataProvider")]
		public LiaPosDataProvider PosDataProvider { get; set; }
		
		/// <summary>
		/// The status of the "Store pickup" feature.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storePickupActive")]
		public System.Nullable<System.Boolean> StorePickupActive { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LiaInventorySettings
	{
		
		/// <summary>
		/// The email of the contact for the inventory verification process.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inventoryVerificationContactEmail")]
		public string InventoryVerificationContactEmail { get; set; }
		
		/// <summary>
		/// The name of the contact for the inventory verification process.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inventoryVerificationContactName")]
		public string InventoryVerificationContactName { get; set; }
		
		/// <summary>
		/// The status of the verification contact. Acceptable values are: - "`active`" - "`inactive`" - "`pending`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inventoryVerificationContactStatus")]
		public string InventoryVerificationContactStatus { get; set; }
		
		/// <summary>
		/// The status of the inventory verification process. Acceptable values are: - "`active`" - "`inactive`" - "`pending`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	/// <summary>
	/// Omnichannel experience details.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LiaOmnichannelExperience
	{
		
		/// <summary>
		/// The CLDR country code (for example, "US").
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// The Local Store Front (LSF) type for this country. Acceptable values are: - "`ghlsf`" (Google-Hosted Local Store Front) - "`mhlsfBasic`" (Merchant-Hosted Local Store Front Basic) - "`mhlsfFull`" (Merchant-Hosted Local Store Front Full) More details about these types can be found here.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lsfType")]
		public string LsfType { get; set; }
		
		/// <summary>
		/// The Pickup types for this country. Acceptable values are: - "`pickupToday`" - "`pickupLater`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pickupTypes")]
		public string[] PickupTypes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LiaOnDisplayToOrderSettings
	{
		
		/// <summary>
		/// Shipping cost and policy URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shippingCostPolicyUrl")]
		public string ShippingCostPolicyUrl { get; set; }
		
		/// <summary>
		/// The status of the ?On display to order? feature. Acceptable values are: - "`active`" - "`inactive`" - "`pending`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LiaPosDataProvider
	{
		
		/// <summary>
		/// The ID of the POS data provider.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="posDataProviderId")]
		public string PosDataProviderId { get; set; }
		
		/// <summary>
		/// The account ID by which this merchant is known to the POS data provider.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="posExternalAccountId")]
		public string PosExternalAccountId { get; set; }
	}
	
	/// <summary>
	/// Local Inventory ads (LIA) settings. All methods except listposdataproviders require the admin role.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LiaSettings
	{
		
		/// <summary>
		/// The ID of the account to which these LIA settings belong. Ignored upon update, always present in get request responses.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
		
		/// <summary>
		/// The LIA settings for each country.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="countrySettings")]
		public LiaCountrySettings[] CountrySettings { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "`content#liaSettings`"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LiasettingsCustomBatchRequest
	{
		
		/// <summary>
		/// The request entries to be processed in the batch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entries")]
		public LiasettingsCustomBatchRequestEntry[] Entries { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LiasettingsCustomBatchRequestEntry
	{
		
		/// <summary>
		/// The ID of the account for which to get/update account LIA settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
		
		/// <summary>
		/// An entry ID, unique within the batch request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="batchId")]
		public System.Nullable<System.UInt32> BatchId { get; set; }
		
		/// <summary>
		/// Inventory validation contact email. Required only for SetInventoryValidationContact.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contactEmail")]
		public string ContactEmail { get; set; }
		
		/// <summary>
		/// Inventory validation contact name. Required only for SetInventoryValidationContact.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contactName")]
		public string ContactName { get; set; }
		
		/// <summary>
		/// The country code. Required only for RequestInventoryVerification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// The Business Profile. Required only for RequestGmbAccess.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gmbEmail")]
		public string GmbEmail { get; set; }
		
		/// <summary>
		/// Local Inventory ads (LIA) settings. All methods except listposdataproviders require the admin role.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="liaSettings")]
		public LiaSettings LiaSettings { get; set; }
		
		/// <summary>
		/// The ID of the managing account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="merchantId")]
		public string MerchantId { get; set; }
		
		/// <summary>
		/// The method of the batch entry. Acceptable values are: - "`get`" - "`getAccessibleGmbAccounts`" - "`requestGmbAccess`" - "`requestInventoryVerification`" - "`setInventoryVerificationContact`" - "`update`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="method")]
		public string Method { get; set; }
		
		/// <summary>
		/// Omnichannel experience details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="omnichannelExperience")]
		public LiaOmnichannelExperience OmnichannelExperience { get; set; }
		
		/// <summary>
		/// The ID of POS data provider. Required only for SetPosProvider.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="posDataProviderId")]
		public string PosDataProviderId { get; set; }
		
		/// <summary>
		/// The account ID by which this merchant is known to the POS provider.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="posExternalAccountId")]
		public string PosExternalAccountId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LiasettingsCustomBatchResponse
	{
		
		/// <summary>
		/// The result of the execution of the batch requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entries")]
		public LiasettingsCustomBatchResponseEntry[] Entries { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "`content#liasettingsCustomBatchResponse`".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LiasettingsCustomBatchResponseEntry
	{
		
		/// <summary>
		/// The ID of the request entry to which this entry responds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="batchId")]
		public System.Nullable<System.UInt32> BatchId { get; set; }
		
		/// <summary>
		/// A list of errors returned by a failed batch entry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Errors Errors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="gmbAccounts")]
		public GmbAccounts GmbAccounts { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "`content#liasettingsCustomBatchResponseEntry`"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Local Inventory ads (LIA) settings. All methods except listposdataproviders require the admin role.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="liaSettings")]
		public LiaSettings LiaSettings { get; set; }
		
		/// <summary>
		/// Omnichannel experience details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="omnichannelExperience")]
		public LiaOmnichannelExperience OmnichannelExperience { get; set; }
		
		/// <summary>
		/// The list of POS data providers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="posDataProviders")]
		public PosDataProviders[] PosDataProviders { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PosDataProviders
	{
		
		/// <summary>
		/// Country code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// A list of POS data providers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="posDataProviders")]
		public PosDataProvidersPosDataProvider[] PosDataProviders1 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PosDataProvidersPosDataProvider
	{
		
		/// <summary>
		/// The display name of Pos data Provider.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// The full name of this POS data Provider.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fullName")]
		public string FullName { get; set; }
		
		/// <summary>
		/// The ID of the account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="providerId")]
		public string ProviderId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LiasettingsGetAccessibleGmbAccountsResponse
	{
		
		/// <summary>
		/// The ID of the Merchant Center account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
		
		/// <summary>
		/// A list of Business Profiles which are available to the merchant.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gmbAccounts")]
		public GmbAccountsGmbAccount[] GmbAccounts { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "`content#liasettingsGetAccessibleGmbAccountsResponse`".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LiasettingsListPosDataProvidersResponse
	{
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "`content#liasettingsListPosDataProvidersResponse`".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// The list of POS data providers for each eligible country
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="posDataProviders")]
		public PosDataProviders[] PosDataProviders { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LiasettingsListResponse
	{
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "`content#liasettingsListResponse`".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// The token for the retrieval of the next page of LIA settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resources")]
		public LiaSettings[] Resources { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LiasettingsRequestGmbAccessResponse
	{
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "`content#liasettingsRequestGmbAccessResponse`".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LiasettingsRequestInventoryVerificationResponse
	{
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "`content#liasettingsRequestInventoryVerificationResponse`".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LiasettingsSetInventoryVerificationContactResponse
	{
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "`content#liasettingsSetInventoryVerificationContactResponse`".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LiasettingsSetPosDataProviderResponse
	{
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "`content#liasettingsSetPosDataProviderResponse`".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	/// <summary>
	/// Response message for the `ListAccountLabels` method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListAccountLabelsResponse
	{
		
		/// <summary>
		/// The labels from the specified account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountLabels")]
		public AccountLabel[] AccountLabels { get; set; }
		
		/// <summary>
		/// A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Response for listing account return carriers.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListAccountReturnCarrierResponse
	{
		
		/// <summary>
		/// List of all available account return carriers for the merchant.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountReturnCarriers")]
		public AccountReturnCarrier[] AccountReturnCarriers { get; set; }
	}
	
	/// <summary>
	/// Response message for the `ListBusinessMessagesLinks` method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListBusinessMessagesLinksResponse
	{
		
		/// <summary>
		/// The `BusinessMessagesLink` resources for the given Merchant Center account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="businessMessagesLinks")]
		public BusinessMessagesLink[] BusinessMessagesLinks { get; set; }
		
		/// <summary>
		/// A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted, there are no subsequent pages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Response message for the ListCollectionStatuses method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListCollectionStatusesResponse
	{
		
		/// <summary>
		/// A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// The collectionstatuses listed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resources")]
		public CollectionStatus[] Resources { get; set; }
	}
	
	/// <summary>
	/// Response message for the ListCollections method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListCollectionsResponse
	{
		
		/// <summary>
		/// A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// The collections listed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resources")]
		public Collection[] Resources { get; set; }
	}
	
	/// <summary>
	/// Response message for the ListConversionSources method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListConversionSourcesResponse
	{
		
		/// <summary>
		/// List of conversion sources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="conversionSources")]
		public ConversionSource[] ConversionSources { get; set; }
		
		/// <summary>
		/// Token to be used to fetch the next results page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// The response message for the `ListCsses` method
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListCssesResponse
	{
		
		/// <summary>
		/// The CSS domains affiliated with the specified CSS group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="csses")]
		public Css[] Csses { get; set; }
		
		/// <summary>
		/// A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Response message for the ListMethodQuotas method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListMethodQuotasResponse
	{
		
		/// <summary>
		/// The current quota usage and limits per each method.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="methodQuotas")]
		public MethodQuota[] MethodQuotas { get; set; }
		
		/// <summary>
		/// A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// The quota information per method in the Content API.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MethodQuota
	{
		
		/// <summary>
		/// The method name, for example `products.list`. Method name does not contain version because quota can be shared between different API versions of the same method.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="method")]
		public string Method { get; set; }
		
		/// <summary>
		/// The current quota limit per day, meaning the maximum number of calls for the method.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quotaLimit")]
		public string QuotaLimit { get; set; }
		
		/// <summary>
		/// The current quota usage, meaning the number of calls already made to the method.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quotaUsage")]
		public string QuotaUsage { get; set; }
	}
	
	/// <summary>
	/// Response message for Promotions.List method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListPromotionResponse
	{
		
		/// <summary>
		/// A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// List of all available promotions for the merchant.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="promotions")]
		public Promotion[] Promotions { get; set; }
	}
	
	/// <summary>
	/// Represents a promotion. See the following articles for more details. * [Promotions feed specification](https://support.google.com/merchants/answer/2906014) * [Local promotions feed specification](https://support.google.com/merchants/answer/10146130) * [Promotions on Buy on Google product data specification](https://support.google.com/merchants/answer/9173673)
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Promotion
	{
		
		/// <summary>
		/// Product filter by brand for the promotion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="brand")]
		public string[] Brand { get; set; }
		
		/// <summary>
		/// Product filter by brand exclusion for the promotion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="brandExclusion")]
		public string[] BrandExclusion { get; set; }
		
		/// <summary>
		/// Required. The content language used as part of the unique identifier. `en` content language is available for all target countries. `fr` content language is available for `CA` and `FR` target countries. `de` content language is available for `DE` target country. `nl` content language is available for `NL` target country. `it` content language is available for `IT` target country. `pt` content language is available for `BR` target country. `ja` content language is available for `JP` target country. `ko` content language is available for `KR` target country.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentLanguage")]
		public string ContentLanguage { get; set; }
		
		/// <summary>
		/// Required. Coupon value type for the promotion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="couponValueType")]
		public System.Nullable<PromotionCouponValueType> CouponValueType { get; set; }
		
		/// <summary>
		/// Free gift description for the promotion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="freeGiftDescription")]
		public string FreeGiftDescription { get; set; }
		
		/// <summary>
		/// Free gift item ID for the promotion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="freeGiftItemId")]
		public string FreeGiftItemId { get; set; }
		
		/// <summary>
		/// The price represented as a number and currency.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="freeGiftValue")]
		public PriceAmount FreeGiftValue { get; set; }
		
		/// <summary>
		/// Generic redemption code for the promotion. To be used with the `offerType` field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="genericRedemptionCode")]
		public string GenericRedemptionCode { get; set; }
		
		/// <summary>
		/// The number of items discounted in the promotion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="getThisQuantityDiscounted")]
		public System.Nullable<System.Int32> GetThisQuantityDiscounted { get; set; }
		
		/// <summary>
		/// Required. Output only. The REST promotion ID to uniquely identify the promotion. Content API methods that operate on promotions take this as their `promotionId` parameter. The REST ID for a promotion is of the form channel:contentLanguage:targetCountry:promotionId The `channel` field has a value of `"online"`, `"in_store"`, or `"online_in_store"`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Product filter by item group ID for the promotion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemGroupId")]
		public string[] ItemGroupId { get; set; }
		
		/// <summary>
		/// Product filter by item group ID exclusion for the promotion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemGroupIdExclusion")]
		public string[] ItemGroupIdExclusion { get; set; }
		
		/// <summary>
		/// Product filter by item ID for the promotion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemId")]
		public string[] ItemId { get; set; }
		
		/// <summary>
		/// Product filter by item ID exclusion for the promotion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemIdExclusion")]
		public string[] ItemIdExclusion { get; set; }
		
		/// <summary>
		/// Maximum purchase quantity for the promotion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limitQuantity")]
		public System.Nullable<System.Int32> LimitQuantity { get; set; }
		
		/// <summary>
		/// The price represented as a number and currency.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limitValue")]
		public PriceAmount LimitValue { get; set; }
		
		/// <summary>
		/// Required. Long title for the promotion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="longTitle")]
		public string LongTitle { get; set; }
		
		/// <summary>
		/// The price represented as a number and currency.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minimumPurchaseAmount")]
		public PriceAmount MinimumPurchaseAmount { get; set; }
		
		/// <summary>
		/// Minimum purchase quantity for the promotion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minimumPurchaseQuantity")]
		public System.Nullable<System.Int32> MinimumPurchaseQuantity { get; set; }
		
		/// <summary>
		/// The price represented as a number and currency.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="moneyBudget")]
		public PriceAmount MoneyBudget { get; set; }
		
		/// <summary>
		/// The price represented as a number and currency.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="moneyOffAmount")]
		public PriceAmount MoneyOffAmount { get; set; }
		
		/// <summary>
		/// Required. Type of the promotion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offerType")]
		public System.Nullable<PromotionOfferType> OfferType { get; set; }
		
		/// <summary>
		/// Order limit for the promotion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orderLimit")]
		public System.Nullable<System.Int32> OrderLimit { get; set; }
		
		/// <summary>
		/// The percentage discount offered in the promotion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="percentOff")]
		public System.Nullable<System.Int32> PercentOff { get; set; }
		
		/// <summary>
		/// Required. Applicability of the promotion to either all products or only specific products.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productApplicability")]
		public System.Nullable<PromotionProductApplicability> ProductApplicability { get; set; }
		
		/// <summary>
		/// Product filter by product type for the promotion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productType")]
		public string[] ProductType { get; set; }
		
		/// <summary>
		/// Product filter by product type exclusion for the promotion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productTypeExclusion")]
		public string[] ProductTypeExclusion { get; set; }
		
		/// <summary>
		/// Destination ID for the promotion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="promotionDestinationIds")]
		public string[] PromotionDestinationIds { get; set; }
		
		/// <summary>
		/// String representation of the promotion display dates. Deprecated. Use `promotion_display_time_period` instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="promotionDisplayDates")]
		public string PromotionDisplayDates { get; set; }
		
		/// <summary>
		/// A message that represents a time period.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="promotionDisplayTimePeriod")]
		public TimePeriod PromotionDisplayTimePeriod { get; set; }
		
		/// <summary>
		/// String representation of the promotion effective dates. Deprecated. Use `promotion_effective_time_period` instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="promotionEffectiveDates")]
		public string PromotionEffectiveDates { get; set; }
		
		/// <summary>
		/// A message that represents a time period.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="promotionEffectiveTimePeriod")]
		public TimePeriod PromotionEffectiveTimePeriod { get; set; }
		
		/// <summary>
		/// Required. The user provided promotion ID to uniquely identify the promotion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="promotionId")]
		public string PromotionId { get; set; }
		
		/// <summary>
		/// The status of the promotion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="promotionStatus")]
		public PromotionPromotionStatus PromotionStatus { get; set; }
		
		/// <summary>
		/// URL to the page on the merchant's site where the promotion shows. Local Inventory ads promotions throw an error if no promo url is included. URL is used to confirm that the promotion is valid and can be redeemed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="promotionUrl")]
		public string PromotionUrl { get; set; }
		
		/// <summary>
		/// Required. Redemption channel for the promotion. At least one channel is required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="redemptionChannel")]
		public string[] RedemptionChannel { get; set; }
		
		/// <summary>
		/// Shipping service names for the promotion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shippingServiceNames")]
		public string[] ShippingServiceNames { get; set; }
		
		/// <summary>
		/// Whether the promotion applies to all stores, or only specified stores. Local Inventory ads promotions throw an error if no store applicability is included. An INVALID_ARGUMENT error is thrown if store_applicability is set to ALL_STORES and store_code or score_code_exclusion is set to a value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storeApplicability")]
		public System.Nullable<PromotionStoreApplicability> StoreApplicability { get; set; }
		
		/// <summary>
		/// Store codes to include for the promotion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storeCode")]
		public string[] StoreCode { get; set; }
		
		/// <summary>
		/// Store codes to exclude for the promotion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storeCodeExclusion")]
		public string[] StoreCodeExclusion { get; set; }
		
		/// <summary>
		/// Required. The target country used as part of the unique identifier. Can be `AU`, `CA`, `DE`, `FR`, `GB`, `IN`, `US`, `BR`, `ES`, `NL`, `JP`, `IT` or `KR`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetCountry")]
		public string TargetCountry { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PromotionCouponValueType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COUPON_VALUE_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MONEY_OFF = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PERCENT_OFF = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BUY_M_GET_N_MONEY_OFF = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BUY_M_GET_N_PERCENT_OFF = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BUY_M_GET_MONEY_OFF = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BUY_M_GET_PERCENT_OFF = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FREE_GIFT = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FREE_GIFT_WITH_VALUE = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FREE_GIFT_WITH_ITEM_ID = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FREE_SHIPPING_STANDARD = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FREE_SHIPPING_OVERNIGHT = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FREE_SHIPPING_TWO_DAY = 12,
	}
	
	/// <summary>
	/// The price represented as a number and currency.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PriceAmount
	{
		
		/// <summary>
		/// The currency of the price.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public string Currency { get; set; }
		
		/// <summary>
		/// The price represented as a number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PromotionOfferType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OFFER_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_CODE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GENERIC_CODE = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PromotionProductApplicability
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRODUCT_APPLICABILITY_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALL_PRODUCTS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPECIFIC_PRODUCTS = 2,
	}
	
	/// <summary>
	/// A message that represents a time period.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TimePeriod
	{
		
		/// <summary>
		/// The ending timestamp.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public string EndTime { get; set; }
		
		/// <summary>
		/// The starting timestamp.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public string StartTime { get; set; }
	}
	
	/// <summary>
	/// The status of the promotion.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PromotionPromotionStatus
	{
		
		/// <summary>
		/// Date on which the promotion has been created in [ISO 8601](http://en.wikipedia.org/wiki/ISO_8601) format: Date, time, and offset, for example "2020-01-02T09:00:00+01:00" or "2020-01-02T09:00:00Z"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creationDate")]
		public string CreationDate { get; set; }
		
		/// <summary>
		/// The intended destinations for the promotion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destinationStatuses")]
		public PromotionPromotionStatusDestinationStatus[] DestinationStatuses { get; set; }
		
		/// <summary>
		/// Date on which the promotion status has been last updated in [ISO 8601](http://en.wikipedia.org/wiki/ISO_8601) format: Date, time, and offset, for example "2020-01-02T09:00:00+01:00" or "2020-01-02T09:00:00Z"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastUpdateDate")]
		public string LastUpdateDate { get; set; }
		
		/// <summary>
		/// A list of issues associated with the promotion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="promotionIssue")]
		public PromotionPromotionStatusPromotionIssue[] PromotionIssue { get; set; }
	}
	
	/// <summary>
	/// The destination status of the promotion.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PromotionPromotionStatusDestinationStatus
	{
		
		/// <summary>
		/// The name of the destination.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destination")]
		public string Destination { get; set; }
		
		/// <summary>
		/// The status for the specified destination.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<PromotionPromotionStatusDestinationStatusStatus> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PromotionPromotionStatusDestinationStatusStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_REVIEW = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REJECTED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LIVE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STOPPED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPIRED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 6,
	}
	
	/// <summary>
	/// The issue associated with the promotion.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PromotionPromotionStatusPromotionIssue
	{
		
		/// <summary>
		/// Code of the issue.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// Explanation of the issue.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="detail")]
		public string Detail { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PromotionStoreApplicability
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STORE_APPLICABILITY_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALL_STORES = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPECIFIC_STORES = 2,
	}
	
	/// <summary>
	/// Response message for the `ListRegions` method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListRegionsResponse
	{
		
		/// <summary>
		/// A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// The regions from the specified merchant.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="regions")]
		public Region[] Regions { get; set; }
	}
	
	/// <summary>
	/// Represents a geographic region that you can use as a target with both the `RegionalInventory` and `ShippingSettings` services. You can define regions as collections of either postal codes or, in some countries, using predefined geotargets.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Region
	{
		
		/// <summary>
		/// The display name of the region.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// A list of geotargets that defines the region area.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="geotargetArea")]
		public RegionGeoTargetArea GeotargetArea { get; set; }
		
		/// <summary>
		/// Output only. Immutable. Merchant that owns the region.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="merchantId")]
		public string MerchantId { get; set; }
		
		/// <summary>
		/// A list of postal codes that defines the region area. Note: All regions defined using postal codes are accessible via the account's `ShippingSettings.postalCodeGroups` resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postalCodeArea")]
		public RegionPostalCodeArea PostalCodeArea { get; set; }
		
		/// <summary>
		/// Output only. Immutable. The ID uniquely identifying each region.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="regionId")]
		public string RegionId { get; set; }
		
		/// <summary>
		/// Output only. Indicates if the region is eligible to use in the Regional Inventory configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="regionalInventoryEligible")]
		public System.Nullable<System.Boolean> RegionalInventoryEligible { get; set; }
		
		/// <summary>
		/// Output only. Indicates if the region is eligible to use in the Shipping Services configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shippingEligible")]
		public System.Nullable<System.Boolean> ShippingEligible { get; set; }
	}
	
	/// <summary>
	/// A list of geotargets that defines the region area.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RegionGeoTargetArea
	{
		
		/// <summary>
		/// Required. A non-empty list of [location IDs](https://developers.google.com/adwords/api/docs/appendix/geotargeting). They must all be of the same location type (e.g., state).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="geotargetCriteriaIds")]
		public string[] GeotargetCriteriaIds { get; set; }
	}
	
	/// <summary>
	/// A list of postal codes that defines the region area. Note: All regions defined using postal codes are accessible via the account's `ShippingSettings.postalCodeGroups` resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RegionPostalCodeArea
	{
		
		/// <summary>
		/// Required. A range of postal codes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postalCodes")]
		public RegionPostalCodeAreaPostalCodeRange[] PostalCodes { get; set; }
		
		/// <summary>
		/// Required. CLDR territory code or the country the postal code group applies to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="regionCode")]
		public string RegionCode { get; set; }
	}
	
	/// <summary>
	/// A range of postal codes that defines the region area.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RegionPostalCodeAreaPostalCodeRange
	{
		
		/// <summary>
		/// Required. A postal code or a pattern of the form prefix* denoting the inclusive lower bound of the range defining the area. Examples values: "94108", "9410*", "9*".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="begin")]
		public string Begin { get; set; }
		
		/// <summary>
		/// Optional. A postal code or a pattern of the form prefix* denoting the inclusive upper bound of the range defining the area. It must have the same length as postalCodeRangeBegin: if postalCodeRangeBegin is a postal code then postalCodeRangeEnd must be a postal code too; if postalCodeRangeBegin is a pattern then postalCodeRangeEnd must be a pattern with the same prefix length. Optional: if not set, then the area is defined as being all the postal codes matching postalCodeRangeBegin.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="end")]
		public string End { get; set; }
	}
	
	/// <summary>
	/// Response message for the `ListReturnPolicyOnline` method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListReturnPolicyOnlineResponse
	{
		
		/// <summary>
		/// The retrieved return policies.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="returnPolicies")]
		public ReturnPolicyOnline[] ReturnPolicies { get; set; }
	}
	
	/// <summary>
	/// Return policy online object. This is currently used to represent return policies for ads and free listings programs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReturnPolicyOnline
	{
		
		/// <summary>
		/// The countries of sale where the return policy is applicable. The values must be a valid 2 letter ISO 3166 code, e.g. "US".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="countries")]
		public string[] Countries { get; set; }
		
		/// <summary>
		/// The item conditions that are accepted for returns. This is required to not be empty unless the type of return policy is noReturns.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemConditions")]
		public string[] ItemConditions { get; set; }
		
		/// <summary>
		/// The unique user-defined label of the return policy. The same label cannot be used in different return policies for the same country. Policies with the label 'default' will apply to all products, unless a product specifies a return_policy_label attribute.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
		
		/// <summary>
		/// The name of the policy as shown in Merchant Center.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The available policies.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="policy")]
		public ReturnPolicyOnlinePolicy Policy { get; set; }
		
		/// <summary>
		/// The restocking fee. This can either be a fixed fee or a micro percent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="restockingFee")]
		public ReturnPolicyOnlineRestockingFee RestockingFee { get; set; }
		
		/// <summary>
		/// The return methods of how customers can return an item. This value is required to not be empty unless the type of return policy is noReturns.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="returnMethods")]
		public string[] ReturnMethods { get; set; }
		
		/// <summary>
		/// Output only. Return policy ID generated by Google.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="returnPolicyId")]
		public string ReturnPolicyId { get; set; }
		
		/// <summary>
		/// The return policy uri. This can used by Google to do a sanity check for the policy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="returnPolicyUri")]
		public string ReturnPolicyUri { get; set; }
		
		/// <summary>
		/// The return reason category information. This required to not be empty unless the type of return policy is noReturns.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="returnReasonCategoryInfo")]
		public ReturnPolicyOnlineReturnReasonCategoryInfo[] ReturnReasonCategoryInfo { get; set; }
	}
	
	/// <summary>
	/// The available policies.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReturnPolicyOnlinePolicy
	{
		
		/// <summary>
		/// The number of days items can be returned after delivery, where one day is defined to be 24 hours after the delivery timestamp. Required for `numberOfDaysAfterDelivery` returns.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="days")]
		public string Days { get; set; }
		
		/// <summary>
		/// Policy type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<ReturnPolicyOnlinePolicyType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ReturnPolicyOnlinePolicyType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NUMBER_OF_DAYS_AFTER_DELIVERY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_RETURNS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LIFETIME_RETURNS = 3,
	}
	
	/// <summary>
	/// The restocking fee. This can either be a fixed fee or a micro percent.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReturnPolicyOnlineRestockingFee
	{
		
		/// <summary>
		/// The price represented as a number and currency.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fixedFee")]
		public PriceAmount FixedFee { get; set; }
		
		/// <summary>
		/// Percent of total price in micros. 15,000,000 means 15% of the total price would be charged.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="microPercent")]
		public System.Nullable<System.Int32> MicroPercent { get; set; }
	}
	
	/// <summary>
	/// The return reason category info wrapper.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReturnPolicyOnlineReturnReasonCategoryInfo
	{
		
		/// <summary>
		/// The corresponding return label source.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="returnLabelSource")]
		public System.Nullable<ReturnPolicyOnlineReturnReasonCategoryInfoReturnLabelSource> ReturnLabelSource { get; set; }
		
		/// <summary>
		/// The return reason category.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="returnReasonCategory")]
		public System.Nullable<ReturnPolicyOnlineReturnReasonCategoryInfoReturnReasonCategory> ReturnReasonCategory { get; set; }
		
		/// <summary>
		/// The return shipping fee. This can either be a fixed fee or a boolean to indicate that the customer pays the actual shipping cost.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="returnShippingFee")]
		public ReturnPolicyOnlineReturnShippingFee ReturnShippingFee { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ReturnPolicyOnlineReturnReasonCategoryInfoReturnLabelSource
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RETURN_LABEL_SOURCE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DOWNLOAD_AND_PRINT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_THE_BOX = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CUSTOMER_RESPONSIBILITY = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ReturnPolicyOnlineReturnReasonCategoryInfoReturnReasonCategory
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RETURN_REASON_CATEGORY_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BUYER_REMORSE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ITEM_DEFECT = 2,
	}
	
	/// <summary>
	/// The return shipping fee. This can either be a fixed fee or a boolean to indicate that the customer pays the actual shipping cost.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReturnPolicyOnlineReturnShippingFee
	{
		
		/// <summary>
		/// The price represented as a number and currency.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fixedFee")]
		public PriceAmount FixedFee { get; set; }
		
		/// <summary>
		/// Type of return shipping fee.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<ReturnPolicyOnlineReturnShippingFeeType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ReturnPolicyOnlineReturnShippingFeeType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FIXED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CUSTOMER_PAYING_ACTUAL_FEE = 2,
	}
	
	/// <summary>
	/// Local inventory resource. For accepted attribute values, see the local product inventory feed specification.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LocalInventory
	{
		
		/// <summary>
		/// The availability of the product. For accepted attribute values, see the local product inventory feed specification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availability")]
		public string Availability { get; set; }
		
		/// <summary>
		/// A list of custom (merchant-provided) attributes. Can also be used to submit any attribute of the feed specification in its generic form, for example, `{ "name": "size type", "value": "regular" }`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customAttributes")]
		public CustomAttribute[] CustomAttributes { get; set; }
		
		/// <summary>
		/// The in-store product location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="instoreProductLocation")]
		public string InstoreProductLocation { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "`content#localInventory`"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// The supported pickup method for this offer. Unless the value is "not supported", this field must be submitted together with `pickupSla`. For accepted attribute values, see the local product inventory feed specification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pickupMethod")]
		public string PickupMethod { get; set; }
		
		/// <summary>
		/// The expected date that an order will be ready for pickup relative to the order date. Must be submitted together with `pickupMethod`. For accepted attribute values, see the local product inventory feed specification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pickupSla")]
		public string PickupSla { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="price")]
		public Price Price { get; set; }
		
		/// <summary>
		/// The quantity of the product. Must be nonnegative.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public System.Nullable<System.UInt32> Quantity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="salePrice")]
		public Price SalePrice { get; set; }
		
		/// <summary>
		/// A date range represented by a pair of ISO 8601 dates separated by a space, comma, or slash. Both dates may be specified as 'null' if undecided.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="salePriceEffectiveDate")]
		public string SalePriceEffectiveDate { get; set; }
		
		/// <summary>
		/// Required. The store code of this local inventory resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storeCode")]
		public string StoreCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LocalinventoryCustomBatchRequest
	{
		
		/// <summary>
		/// The request entries to be processed in the batch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entries")]
		public LocalinventoryCustomBatchRequestEntry[] Entries { get; set; }
	}
	
	/// <summary>
	/// Batch entry encoding a single local inventory update request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LocalinventoryCustomBatchRequestEntry
	{
		
		/// <summary>
		/// An entry ID, unique within the batch request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="batchId")]
		public System.Nullable<System.UInt32> BatchId { get; set; }
		
		/// <summary>
		/// Local inventory resource. For accepted attribute values, see the local product inventory feed specification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="localInventory")]
		public LocalInventory LocalInventory { get; set; }
		
		/// <summary>
		/// The ID of the managing account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="merchantId")]
		public string MerchantId { get; set; }
		
		/// <summary>
		/// Method of the batch request entry. Acceptable values are: - "`insert`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="method")]
		public string Method { get; set; }
		
		/// <summary>
		/// The ID of the product for which to update local inventory.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productId")]
		public string ProductId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LocalinventoryCustomBatchResponse
	{
		
		/// <summary>
		/// The result of the execution of the batch requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entries")]
		public LocalinventoryCustomBatchResponseEntry[] Entries { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "`content#localinventoryCustomBatchResponse`".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	/// <summary>
	/// Batch entry encoding a single local inventory update response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LocalinventoryCustomBatchResponseEntry
	{
		
		/// <summary>
		/// The ID of the request entry this entry responds to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="batchId")]
		public System.Nullable<System.UInt32> BatchId { get; set; }
		
		/// <summary>
		/// A list of errors returned by a failed batch entry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Errors Errors { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "`content#localinventoryCustomBatchResponseEntry`"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LoyaltyPoints
	{
		
		/// <summary>
		/// Name of loyalty points program. It is recommended to limit the name to 12 full-width characters or 24 Roman characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The retailer's loyalty points in absolute value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pointsValue")]
		public string PointsValue { get; set; }
		
		/// <summary>
		/// The ratio of a point when converted to currency. Google assumes currency based on Merchant Center settings. If ratio is left out, it defaults to 1.0.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ratio")]
		public System.Nullable<System.Double> Ratio { get; set; }
	}
	
	/// <summary>
	/// Order return. Production access (all methods) requires the order manager role. Sandbox access does not.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MerchantOrderReturn
	{
		
		/// <summary>
		/// The date of creation of the return, in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creationDate")]
		public string CreationDate { get; set; }
		
		/// <summary>
		/// Merchant defined order ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="merchantOrderId")]
		public string MerchantOrderId { get; set; }
		
		/// <summary>
		/// Google order ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orderId")]
		public string OrderId { get; set; }
		
		/// <summary>
		/// Order return ID generated by Google.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orderReturnId")]
		public string OrderReturnId { get; set; }
		
		/// <summary>
		/// Items of the return.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="returnItems")]
		public MerchantOrderReturnItem[] ReturnItems { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="returnPricingInfo")]
		public ReturnPricingInfo ReturnPricingInfo { get; set; }
		
		/// <summary>
		/// Shipments of the return.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="returnShipments")]
		public ReturnShipment[] ReturnShipments { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MerchantOrderReturnItem
	{
		
		[System.Runtime.Serialization.DataMember(Name="customerReturnReason")]
		public CustomerReturnReason CustomerReturnReason { get; set; }
		
		/// <summary>
		/// Product level item ID. If the returned items are of the same product, they will have the same ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemId")]
		public string ItemId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="merchantRejectionReason")]
		public MerchantRejectionReason MerchantRejectionReason { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="merchantReturnReason")]
		public RefundReason MerchantReturnReason { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="product")]
		public OrderLineItemProduct Product { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="refundableAmount")]
		public MonetaryAmount RefundableAmount { get; set; }
		
		/// <summary>
		/// Unit level ID for the return item. Different units of the same product will have different IDs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="returnItemId")]
		public string ReturnItemId { get; set; }
		
		/// <summary>
		/// IDs of the return shipments that this return item belongs to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="returnShipmentIds")]
		public string[] ReturnShipmentIds { get; set; }
		
		/// <summary>
		/// ID of the original shipment group. Provided for shipments with invoice support.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shipmentGroupId")]
		public string ShipmentGroupId { get; set; }
		
		/// <summary>
		/// ID of the shipment unit assigned by the merchant. Provided for shipments with invoice support.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shipmentUnitId")]
		public string ShipmentUnitId { get; set; }
		
		/// <summary>
		/// State of the item. Acceptable values are: - "`canceled`" - "`new`" - "`received`" - "`refunded`" - "`rejected`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MerchantRejectionReason
	{
		
		/// <summary>
		/// Description of the reason.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Code of the rejection reason.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reasonCode")]
		public string ReasonCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RefundReason
	{
		
		/// <summary>
		/// Description of the reason.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Code of the refund reason. Acceptable values are: - "`adjustment`" - "`autoPostInternal`" - "`autoPostInvalidBillingAddress`" - "`autoPostNoInventory`" - "`autoPostPriceError`" - "`autoPostUndeliverableShippingAddress`" - "`couponAbuse`" - "`courtesyAdjustment`" - "`customerCanceled`" - "`customerDiscretionaryReturn`" - "`customerInitiatedMerchantCancel`" - "`customerSupportRequested`" - "`deliveredLateByCarrier`" - "`deliveredTooLate`" - "`expiredItem`" - "`failToPushOrderGoogleError`" - "`failToPushOrderMerchantError`" - "`failToPushOrderMerchantFulfillmentError`" - "`failToPushOrderToMerchant`" - "`failToPushOrderToMerchantOutOfStock`" - "`feeAdjustment`" - "`invalidCoupon`" - "`lateShipmentCredit`" - "`malformedShippingAddress`" - "`merchantDidNotShipOnTime`" - "`noInventory`" - "`orderTimeout`" - "`other`" - "`paymentAbuse`" - "`paymentDeclined`" - "`priceAdjustment`" - "`priceError`" - "`productArrivedDamaged`" - "`productNotAsDescribed`" - "`promoReallocation`" - "`qualityNotAsExpected`" - "`returnRefundAbuse`" - "`shippingCostAdjustment`" - "`shippingPriceError`" - "`taxAdjustment`" - "`taxError`" - "`undeliverableShippingAddress`" - "`unsupportedPoBoxAddress`" - "`wrongProductShipped`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reasonCode")]
		public string ReasonCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrderLineItemProduct
	{
		
		/// <summary>
		/// Brand of the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="brand")]
		public string Brand { get; set; }
		
		/// <summary>
		/// Condition or state of the item. Acceptable values are: - "`new`" - "`refurbished`" - "`used`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="condition")]
		public string Condition { get; set; }
		
		/// <summary>
		/// The two-letter ISO 639-1 language code for the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentLanguage")]
		public string ContentLanguage { get; set; }
		
		/// <summary>
		/// Associated fees at order creation time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fees")]
		public OrderLineItemProductFee[] Fees { get; set; }
		
		/// <summary>
		/// Global Trade Item Number (GTIN) of the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gtin")]
		public string Gtin { get; set; }
		
		/// <summary>
		/// The REST ID of the product.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// URL of an image of the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageLink")]
		public string ImageLink { get; set; }
		
		/// <summary>
		/// Shared identifier for all variants of the same product.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemGroupId")]
		public string ItemGroupId { get; set; }
		
		/// <summary>
		/// Manufacturer Part Number (MPN) of the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mpn")]
		public string Mpn { get; set; }
		
		/// <summary>
		/// An identifier of the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offerId")]
		public string OfferId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="price")]
		public Price Price { get; set; }
		
		/// <summary>
		/// URL to the cached image shown to the user when order was placed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shownImage")]
		public string ShownImage { get; set; }
		
		/// <summary>
		/// The CLDR territory code of the target country of the product.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetCountry")]
		public string TargetCountry { get; set; }
		
		/// <summary>
		/// The title of the product.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// Variant attributes for the item. These are dimensions of the product, such as color, gender, material, pattern, and size. You can find a comprehensive list of variant attributes here.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="variantAttributes")]
		public OrderLineItemProductVariantAttribute[] VariantAttributes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrderLineItemProductFee
	{
		
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public Price Amount { get; set; }
		
		/// <summary>
		/// Name of the fee.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrderLineItemProductVariantAttribute
	{
		
		/// <summary>
		/// The dimension of the variant.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimension")]
		public string Dimension { get; set; }
		
		/// <summary>
		/// The value for the dimension.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MonetaryAmount
	{
		
		[System.Runtime.Serialization.DataMember(Name="priceAmount")]
		public Price PriceAmount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="taxAmount")]
		public Price TaxAmount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReturnPricingInfo
	{
		
		/// <summary>
		/// Default option for whether merchant should charge the customer for return shipping costs, based on customer selected return reason and merchant's return policy for the items being returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="chargeReturnShippingFee")]
		public System.Nullable<System.Boolean> ChargeReturnShippingFee { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxReturnShippingFee")]
		public MonetaryAmount MaxReturnShippingFee { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="refundableItemsTotalAmount")]
		public MonetaryAmount RefundableItemsTotalAmount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="refundableShippingAmount")]
		public MonetaryAmount RefundableShippingAmount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalRefundedAmount")]
		public MonetaryAmount TotalRefundedAmount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReturnShipment
	{
		
		/// <summary>
		/// The date of creation of the shipment, in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creationDate")]
		public string CreationDate { get; set; }
		
		/// <summary>
		/// The date of delivery of the shipment, in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deliveryDate")]
		public string DeliveryDate { get; set; }
		
		/// <summary>
		/// Type of the return method. Acceptable values are: - "`byMail`" - "`contactCustomerSupport`" - "`returnless`" - "`inStore`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="returnMethodType")]
		public string ReturnMethodType { get; set; }
		
		/// <summary>
		/// Shipment ID generated by Google.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shipmentId")]
		public string ShipmentId { get; set; }
		
		/// <summary>
		/// Tracking information of the shipment. One return shipment might be handled by several shipping carriers sequentially.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shipmentTrackingInfos")]
		public ShipmentTrackingInfo[] ShipmentTrackingInfos { get; set; }
		
		/// <summary>
		/// The date of shipping of the shipment, in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shippingDate")]
		public string ShippingDate { get; set; }
		
		/// <summary>
		/// State of the shipment. Acceptable values are: - "`completed`" - "`new`" - "`shipped`" - "`undeliverable`" - "`pending`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ShipmentTrackingInfo
	{
		
		/// <summary>
		/// The shipping carrier that handles the package. Acceptable values are: - "`boxtal`" - "`bpost`" - "`chronopost`" - "`colisPrive`" - "`colissimo`" - "`cxt`" - "`deliv`" - "`dhl`" - "`dpd`" - "`dynamex`" - "`eCourier`" - "`easypost`" - "`efw`" - "`fedex`" - "`fedexSmartpost`" - "`geodis`" - "`gls`" - "`googleCourier`" - "`gsx`" - "`jdLogistics`" - "`laPoste`" - "`lasership`" - "`manual`" - "`mpx`" - "`onTrac`" - "`other`" - "`tnt`" - "`uds`" - "`ups`" - "`usps`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="carrier")]
		public string Carrier { get; set; }
		
		/// <summary>
		/// The tracking number for the package.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trackingNumber")]
		public string TrackingNumber { get; set; }
	}
	
	/// <summary>
	/// Performance metrics. Values are only set for metrics requested explicitly in the request's search query.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Metrics
	{
		
		/// <summary>
		/// Average order size - the average number of items in an order. **This metric cannot be segmented by product dimensions and customer_country_code.**
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="aos")]
		public System.Nullable<System.Double> Aos { get; set; }
		
		/// <summary>
		/// Average order value in micros (1 millionth of a standard unit, 1 USD = 1000000 micros) - the average value (total price of items) of all placed orders. The currency of the returned value is stored in the currency_code segment. If this metric is selected, 'segments.currency_code' is automatically added to the SELECT clause in the search query (unless it is explicitly selected by the user) and the currency_code segment is populated in the response. **This metric cannot be segmented by product dimensions and customer_country_code.**
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="aovMicros")]
		public System.Nullable<System.Double> AovMicros { get; set; }
		
		/// <summary>
		/// Number of clicks.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clicks")]
		public string Clicks { get; set; }
		
		/// <summary>
		/// Number of conversions divided by the number of clicks, reported on the impression date. The metric is currently available only for the FREE_PRODUCT_LISTING program.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="conversionRate")]
		public System.Nullable<System.Double> ConversionRate { get; set; }
		
		/// <summary>
		/// Value of conversions in micros (1 millionth of a standard unit, 1 USD = 1000000 micros) attributed to the product, reported on the conversion date. The metric is currently available only for the FREE_PRODUCT_LISTING program. The currency of the returned value is stored in the currency_code segment. If this metric is selected, 'segments.currency_code' is automatically added to the SELECT clause in the search query (unless it is explicitly selected by the user) and the currency_code segment is populated in the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="conversionValueMicros")]
		public string ConversionValueMicros { get; set; }
		
		/// <summary>
		/// Number of conversions attributed to the product, reported on the conversion date. Depending on the attribution model, a conversion might be distributed across multiple clicks, where each click gets its own credit assigned. This metric is a sum of all such credits. The metric is currently available only for the FREE_PRODUCT_LISTING program.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="conversions")]
		public System.Nullable<System.Double> Conversions { get; set; }
		
		/// <summary>
		/// Click-through rate - the number of clicks merchant's products receive (clicks) divided by the number of times the products are shown (impressions).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ctr")]
		public System.Nullable<System.Double> Ctr { get; set; }
		
		/// <summary>
		/// Average number of days between an order being placed and the order being fully shipped, reported on the last shipment date. **This metric cannot be segmented by product dimensions and customer_country_code.**
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="daysToShip")]
		public System.Nullable<System.Double> DaysToShip { get; set; }
		
		/// <summary>
		/// Number of times merchant's products are shown.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="impressions")]
		public string Impressions { get; set; }
		
		/// <summary>
		/// Average number of days between an item being ordered and the item being **This metric cannot be segmented by customer_country_code.**
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemDaysToShip")]
		public System.Nullable<System.Double> ItemDaysToShip { get; set; }
		
		/// <summary>
		/// Percentage of shipped items in relation to all finalized items (shipped or rejected by the merchant; unshipped items are not taken into account), reported on the order date. Item fill rate is lowered by merchant rejections. **This metric cannot be segmented by customer_country_code.**
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemFillRate")]
		public System.Nullable<System.Double> ItemFillRate { get; set; }
		
		/// <summary>
		/// Total price of ordered items in micros (1 millionth of a standard unit, 1 USD = 1000000 micros). Excludes shipping, taxes (US only), and customer cancellations that happened within 30 minutes of placing the order. The currency of the returned value is stored in the currency_code segment. If this metric is selected, 'segments.currency_code' is automatically added to the SELECT clause in the search query (unless it is explicitly selected by the user) and the currency_code segment is populated in the response. **This metric cannot be segmented by customer_country_code.**
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orderedItemSalesMicros")]
		public string OrderedItemSalesMicros { get; set; }
		
		/// <summary>
		/// Number of ordered items. Excludes customer cancellations that happened within 30 minutes of placing the order. **This metric cannot be segmented by customer_country_code.**
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orderedItems")]
		public string OrderedItems { get; set; }
		
		/// <summary>
		/// Number of placed orders. Excludes customer cancellations that happened within 30 minutes of placing the order. **This metric cannot be segmented by product dimensions and customer_country_code.**
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orders")]
		public string Orders { get; set; }
		
		/// <summary>
		/// Number of ordered items canceled by the merchant, reported on the order date. **This metric cannot be segmented by customer_country_code.**
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rejectedItems")]
		public string RejectedItems { get; set; }
		
		/// <summary>
		/// Total price of returned items divided by the total price of shipped items, reported on the order date. If this metric is selected, 'segments.currency_code' is automatically added to the SELECT clause in the search query (unless it is explicitly selected by the user) and the currency_code segment is populated in the response. **This metric cannot be segmented by customer_country_code.**
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="returnRate")]
		public System.Nullable<System.Double> ReturnRate { get; set; }
		
		/// <summary>
		/// Number of ordered items sent back for return, reported on the date when the merchant accepted the return. **This metric cannot be segmented by customer_country_code.**
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="returnedItems")]
		public string ReturnedItems { get; set; }
		
		/// <summary>
		/// Total price of ordered items sent back for return in micros (1 millionth of a standard unit, 1 USD = 1000000 micros), reported on the date when the merchant accepted the return. The currency of the returned value is stored in the currency_code segment. If this metric is selected, 'segments.currency_code' is automatically added to the SELECT clause in the search query (unless it is explicitly selected by the user) and the currency_code segment is populated in the response. **This metric cannot be segmented by customer_country_code.**
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="returnsMicros")]
		public string ReturnsMicros { get; set; }
		
		/// <summary>
		/// Total price of shipped items in micros (1 millionth of a standard unit, 1 USD = 1000000 micros), reported on the order date. Excludes shipping and taxes (US only). The currency of the returned value is stored in the currency_code segment. If this metric is selected, 'segments.currency_code' is automatically added to the SELECT clause in the search query (unless it is explicitly selected by the user) and the currency_code segment is populated in the response. **This metric cannot be segmented by customer_country_code.**
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shippedItemSalesMicros")]
		public string ShippedItemSalesMicros { get; set; }
		
		/// <summary>
		/// Number of shipped items, reported on the shipment date. **This metric cannot be segmented by customer_country_code.**
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shippedItems")]
		public string ShippedItems { get; set; }
		
		/// <summary>
		/// Number of fully shipped orders, reported on the last shipment date. **This metric cannot be segmented by product dimensions and customer_country_code.**
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shippedOrders")]
		public string ShippedOrders { get; set; }
		
		/// <summary>
		/// Number of ordered items not shipped up until the end of the queried day. If a multi-day period is specified in the search query, the returned value is the average number of unshipped items over the days in the queried period. **This metric cannot be segmented by customer_country_code.**
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unshippedItems")]
		public System.Nullable<System.Double> UnshippedItems { get; set; }
		
		/// <summary>
		/// Number of orders not shipped or partially shipped up until the end of the queried day. If a multi-day period is specified in the search query, the returned value is the average number of unshipped orders over the days in the queried period. **This metric cannot be segmented by product dimensions and customer_country_code.**
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unshippedOrders")]
		public System.Nullable<System.Double> UnshippedOrders { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MinimumOrderValueTable
	{
		
		[System.Runtime.Serialization.DataMember(Name="storeCodeSetWithMovs")]
		public MinimumOrderValueTableStoreCodeSetWithMov[] StoreCodeSetWithMovs { get; set; }
	}
	
	/// <summary>
	/// A list of store code sets sharing the same minimum order value. At least two sets are required and the last one must be empty, which signifies 'MOV for all other stores'. Each store code can only appear once across all the sets. All prices within a service must have the same currency.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MinimumOrderValueTableStoreCodeSetWithMov
	{
		
		/// <summary>
		/// A list of unique store codes or empty for the catch all.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storeCodes")]
		public string[] StoreCodes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Price Value { get; set; }
	}
	
	/// <summary>
	/// Request message for the OnboardProgram method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OnboardBuyOnGoogleProgramRequest
	{
		
		/// <summary>
		/// The customer service email.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customerServiceEmail")]
		public string CustomerServiceEmail { get; set; }
	}
	
	/// <summary>
	/// Order. Production access (all methods) requires the order manager role. Sandbox access does not.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Order
	{
		
		/// <summary>
		/// Whether the order was acknowledged.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="acknowledged")]
		public System.Nullable<System.Boolean> Acknowledged { get; set; }
		
		/// <summary>
		/// List of key-value pairs that are attached to a given order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="annotations")]
		public OrderOrderAnnotation[] Annotations { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="billingAddress")]
		public OrderAddress BillingAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customer")]
		public OrderCustomer Customer { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deliveryDetails")]
		public OrderDeliveryDetails DeliveryDetails { get; set; }
		
		/// <summary>
		/// The REST ID of the order. Globally unique.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "`content#order`"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Line items that are ordered.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lineItems")]
		public OrderLineItem[] LineItems { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="merchantId")]
		public string MerchantId { get; set; }
		
		/// <summary>
		/// Merchant-provided ID of the order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="merchantOrderId")]
		public string MerchantOrderId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="netPriceAmount")]
		public Price NetPriceAmount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="netTaxAmount")]
		public Price NetTaxAmount { get; set; }
		
		/// <summary>
		/// The status of the payment. Acceptable values are: - "`paymentCaptured`" - "`paymentRejected`" - "`paymentSecured`" - "`pendingAuthorization`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paymentStatus")]
		public string PaymentStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pickupDetails")]
		public OrderPickupDetails PickupDetails { get; set; }
		
		/// <summary>
		/// The date when the order was placed, in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="placedDate")]
		public string PlacedDate { get; set; }
		
		/// <summary>
		/// Promotions associated with the order. To determine which promotions apply to which products, check the `Promotions[].appliedItems[].lineItemId` field against the `LineItems[].id` field for each promotion. If a promotion is applied to more than 1 offerId, divide the discount value by the number of affected offers to determine how much discount to apply to each offerId. Examples: 1. To calculate price paid by the customer for a single line item including the discount: For each promotion, subtract the `LineItems[].adjustments[].priceAdjustment.value` amount from the `LineItems[].Price.value`. 2. To calculate price paid by the customer for a single line item including the discount in case of multiple quantity: For each promotion, divide the `LineItems[].adjustments[].priceAdjustment.value` by the quantity of products then subtract the resulting value from the `LineItems[].Product.Price.value` for each quantity item. Only 1 promotion can be applied to an offerId in a given order. To refund an item which had a promotion applied to it, make sure to refund the amount after first subtracting the promotion discount from the item price. More details about the program are here.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="promotions")]
		public OrderPromotion[] Promotions { get; set; }
		
		/// <summary>
		/// Refunds for the order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refunds")]
		public OrderRefund[] Refunds { get; set; }
		
		/// <summary>
		/// Shipments of the order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shipments")]
		public OrderShipment[] Shipments { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="shippingCost")]
		public Price ShippingCost { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="shippingCostTax")]
		public Price ShippingCostTax { get; set; }
		
		/// <summary>
		/// The status of the order. Acceptable values are: - "`canceled`" - "`delivered`" - "`inProgress`" - "`partiallyDelivered`" - "`partiallyReturned`" - "`partiallyShipped`" - "`pendingShipment`" - "`returned`" - "`shipped`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// The party responsible for collecting and remitting taxes. Acceptable values are: - "`marketplaceFacilitator`" - "`merchant`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taxCollector")]
		public string TaxCollector { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrderOrderAnnotation
	{
		
		/// <summary>
		/// Key for additional google provided (as key-value pairs) annotation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		/// <summary>
		/// Value for additional google provided (as key-value pairs) annotation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrderAddress
	{
		
		/// <summary>
		/// CLDR country code (for example, "US").
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// Strings representing the lines of the printed label for mailing the order, for example: John Smith 1600 Amphitheatre Parkway Mountain View, CA, 94043 United States 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fullAddress")]
		public string[] FullAddress { get; set; }
		
		/// <summary>
		/// Whether the address is a post office box.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isPostOfficeBox")]
		public System.Nullable<System.Boolean> IsPostOfficeBox { get; set; }
		
		/// <summary>
		/// City, town or commune. May also include dependent localities or sublocalities (for example, neighborhoods or suburbs).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locality")]
		public string Locality { get; set; }
		
		/// <summary>
		/// Postal Code or ZIP (for example, "94043").
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postalCode")]
		public string PostalCode { get; set; }
		
		/// <summary>
		/// Name of the recipient.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recipientName")]
		public string RecipientName { get; set; }
		
		/// <summary>
		/// Top-level administrative subdivision of the country. For example, a state like California ("CA") or a province like Quebec ("QC").
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="region")]
		public string Region { get; set; }
		
		/// <summary>
		/// Street-level part of the address. Use `\n` to add a second line.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="streetAddress")]
		public string[] StreetAddress { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrderCustomer
	{
		
		/// <summary>
		/// Full name of the customer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fullName")]
		public string FullName { get; set; }
		
		/// <summary>
		/// Email address for the merchant to send value-added tax or invoice documentation of the order. Only the last document sent is made available to the customer. For more information, see About automated VAT invoicing for Buy on Google.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="invoiceReceivingEmail")]
		public string InvoiceReceivingEmail { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="loyaltyInfo")]
		public OrderCustomerLoyaltyInfo LoyaltyInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="marketingRightsInfo")]
		public OrderCustomerMarketingRightsInfo MarketingRightsInfo { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrderCustomerLoyaltyInfo
	{
		
		/// <summary>
		/// The loyalty card/membership number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="loyaltyNumber")]
		public string LoyaltyNumber { get; set; }
		
		/// <summary>
		/// Name of card/membership holder, this field will be populated when
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrderCustomerMarketingRightsInfo
	{
		
		/// <summary>
		/// Last known customer selection regarding marketing preferences. In certain cases this selection might not be known, so this field would be empty. If a customer selected `granted` in their most recent order, they can be subscribed to marketing emails. Customers who have chosen `denied` must not be subscribed, or must be unsubscribed if already opted-in. Acceptable values are: - "`denied`" - "`granted`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="explicitMarketingPreference")]
		public string ExplicitMarketingPreference { get; set; }
		
		/// <summary>
		/// Timestamp when last time marketing preference was updated. Could be empty, if user wasn't offered a selection yet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedTimestamp")]
		public string LastUpdatedTimestamp { get; set; }
		
		/// <summary>
		/// Email address that can be used for marketing purposes. The field may be empty even if `explicitMarketingPreference` is 'granted'. This happens when retrieving an old order from the customer who deleted their account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="marketingEmailAddress")]
		public string MarketingEmailAddress { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrderDeliveryDetails
	{
		
		[System.Runtime.Serialization.DataMember(Name="address")]
		public OrderAddress Address { get; set; }
		
		/// <summary>
		/// The phone number of the person receiving the delivery.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phoneNumber")]
		public string PhoneNumber { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrderLineItem
	{
		
		/// <summary>
		/// Price and tax adjustments applied on the line item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adjustments")]
		public OrderLineItemAdjustment[] Adjustments { get; set; }
		
		/// <summary>
		/// Annotations that are attached to the line item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="annotations")]
		public OrderMerchantProvidedAnnotation[] Annotations { get; set; }
		
		/// <summary>
		/// Cancellations of the line item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cancellations")]
		public OrderCancellation[] Cancellations { get; set; }
		
		/// <summary>
		/// The ID of the line item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="price")]
		public Price Price { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="product")]
		public OrderLineItemProduct Product { get; set; }
		
		/// <summary>
		/// Number of items canceled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantityCanceled")]
		public System.Nullable<System.UInt32> QuantityCanceled { get; set; }
		
		/// <summary>
		/// Number of items delivered.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantityDelivered")]
		public System.Nullable<System.UInt32> QuantityDelivered { get; set; }
		
		/// <summary>
		/// Number of items ordered.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantityOrdered")]
		public System.Nullable<System.UInt32> QuantityOrdered { get; set; }
		
		/// <summary>
		/// Number of items pending.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantityPending")]
		public System.Nullable<System.UInt32> QuantityPending { get; set; }
		
		/// <summary>
		/// Number of items ready for pickup.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantityReadyForPickup")]
		public System.Nullable<System.UInt32> QuantityReadyForPickup { get; set; }
		
		/// <summary>
		/// Number of items returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantityReturned")]
		public System.Nullable<System.UInt32> QuantityReturned { get; set; }
		
		/// <summary>
		/// Number of items shipped.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantityShipped")]
		public System.Nullable<System.UInt32> QuantityShipped { get; set; }
		
		/// <summary>
		/// Number of items undeliverable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantityUndeliverable")]
		public System.Nullable<System.UInt32> QuantityUndeliverable { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="returnInfo")]
		public OrderLineItemReturnInfo ReturnInfo { get; set; }
		
		/// <summary>
		/// Returns of the line item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="returns")]
		public OrderReturn[] Returns { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="shippingDetails")]
		public OrderLineItemShippingDetails ShippingDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tax")]
		public Price Tax { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrderLineItemAdjustment
	{
		
		[System.Runtime.Serialization.DataMember(Name="priceAdjustment")]
		public Price PriceAdjustment { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="taxAdjustment")]
		public Price TaxAdjustment { get; set; }
		
		/// <summary>
		/// Type of this adjustment. Acceptable values are: - "`promotion`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrderMerchantProvidedAnnotation
	{
		
		/// <summary>
		/// Key for additional merchant provided (as key-value pairs) annotation about the line item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		/// <summary>
		/// Value for additional merchant provided (as key-value pairs) annotation about the line item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrderCancellation
	{
		
		/// <summary>
		/// The actor that created the cancellation. Acceptable values are: - "`customer`" - "`googleBot`" - "`googleCustomerService`" - "`googlePayments`" - "`googleSabre`" - "`merchant`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="actor")]
		public string Actor { get; set; }
		
		/// <summary>
		/// Date on which the cancellation has been created, in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creationDate")]
		public string CreationDate { get; set; }
		
		/// <summary>
		/// The quantity that was canceled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public System.Nullable<System.UInt32> Quantity { get; set; }
		
		/// <summary>
		/// The reason for the cancellation. Orders that are canceled with a noInventory reason will lead to the removal of the product from Buy on Google until you make an update to that product. This won't affect your Shopping ads. Acceptable values are: - "`autoPostInternal`" - "`autoPostInvalidBillingAddress`" - "`autoPostNoInventory`" - "`autoPostPriceError`" - "`autoPostUndeliverableShippingAddress`" - "`couponAbuse`" - "`customerCanceled`" - "`customerInitiatedCancel`" - "`customerSupportRequested`" - "`failToPushOrderGoogleError`" - "`failToPushOrderMerchantError`" - "`failToPushOrderMerchantFulfillmentError`" - "`failToPushOrderToMerchant`" - "`failToPushOrderToMerchantOutOfStock`" - "`invalidCoupon`" - "`malformedShippingAddress`" - "`merchantDidNotShipOnTime`" - "`noInventory`" - "`orderTimeout`" - "`other`" - "`paymentAbuse`" - "`paymentDeclined`" - "`priceError`" - "`returnRefundAbuse`" - "`shippingPriceError`" - "`taxError`" - "`undeliverableShippingAddress`" - "`unsupportedPoBoxAddress`" - "`failedToCaptureFunds`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		/// <summary>
		/// The explanation of the reason.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reasonText")]
		public string ReasonText { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrderLineItemReturnInfo
	{
		
		/// <summary>
		/// Required. How many days later the item can be returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="daysToReturn")]
		public System.Nullable<System.Int32> DaysToReturn { get; set; }
		
		/// <summary>
		/// Required. Whether the item is returnable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isReturnable")]
		public System.Nullable<System.Boolean> IsReturnable { get; set; }
		
		/// <summary>
		/// Required. URL of the item return policy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="policyUrl")]
		public string PolicyUrl { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrderReturn
	{
		
		/// <summary>
		/// The actor that created the refund. Acceptable values are: - "`customer`" - "`googleBot`" - "`googleCustomerService`" - "`googlePayments`" - "`googleSabre`" - "`merchant`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="actor")]
		public string Actor { get; set; }
		
		/// <summary>
		/// Date on which the item has been created, in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creationDate")]
		public string CreationDate { get; set; }
		
		/// <summary>
		/// Quantity that is returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public System.Nullable<System.UInt32> Quantity { get; set; }
		
		/// <summary>
		/// The reason for the return. Acceptable values are: - "`customerDiscretionaryReturn`" - "`customerInitiatedMerchantCancel`" - "`deliveredTooLate`" - "`expiredItem`" - "`invalidCoupon`" - "`malformedShippingAddress`" - "`other`" - "`productArrivedDamaged`" - "`productNotAsDescribed`" - "`qualityNotAsExpected`" - "`undeliverableShippingAddress`" - "`unsupportedPoBoxAddress`" - "`wrongProductShipped`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		/// <summary>
		/// The explanation of the reason.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reasonText")]
		public string ReasonText { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrderLineItemShippingDetails
	{
		
		/// <summary>
		/// Required. The delivery by date, in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deliverByDate")]
		public string DeliverByDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="method")]
		public OrderLineItemShippingDetailsMethod Method { get; set; }
		
		/// <summary>
		/// The promised time in minutes in which the order will be ready for pickup. This only applies to buy-online-pickup-in-store same-day order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pickupPromiseInMinutes")]
		public System.Nullable<System.UInt32> PickupPromiseInMinutes { get; set; }
		
		/// <summary>
		/// Required. The ship by date, in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shipByDate")]
		public string ShipByDate { get; set; }
		
		/// <summary>
		/// Type of shipment. Indicates whether `deliveryDetails` or `pickupDetails` is applicable for this shipment. Acceptable values are: - "`delivery`" - "`pickup`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrderLineItemShippingDetailsMethod
	{
		
		/// <summary>
		/// The carrier for the shipping. Optional. See `shipments[].carrier` for a list of acceptable values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="carrier")]
		public string Carrier { get; set; }
		
		/// <summary>
		/// Required. Maximum transit time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxDaysInTransit")]
		public System.Nullable<System.UInt32> MaxDaysInTransit { get; set; }
		
		/// <summary>
		/// Required. The name of the shipping method.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="methodName")]
		public string MethodName { get; set; }
		
		/// <summary>
		/// Required. Minimum transit time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minDaysInTransit")]
		public System.Nullable<System.UInt32> MinDaysInTransit { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrderPickupDetails
	{
		
		[System.Runtime.Serialization.DataMember(Name="address")]
		public OrderAddress Address { get; set; }
		
		/// <summary>
		/// Collectors authorized to pick up shipment from the pickup location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="collectors")]
		public OrderPickupDetailsCollector[] Collectors { get; set; }
		
		/// <summary>
		/// ID of the pickup location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locationId")]
		public string LocationId { get; set; }
		
		/// <summary>
		/// The pickup type of this order. Acceptable values are: - "`merchantStore`" - "`merchantStoreCurbside`" - "`merchantStoreLocker`" - "`thirdPartyPickupPoint`" - "`thirdPartyLocker`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pickupType")]
		public string PickupType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrderPickupDetailsCollector
	{
		
		/// <summary>
		/// Name of the person picking up the shipment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Phone number of the person picking up the shipment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phoneNumber")]
		public string PhoneNumber { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrderPromotion
	{
		
		/// <summary>
		/// Items that this promotion may be applied to. If empty, there are no restrictions on applicable items and quantity. This field will also be empty for shipping promotions because shipping is not tied to any specific item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="applicableItems")]
		public OrderPromotionItem[] ApplicableItems { get; set; }
		
		/// <summary>
		/// Items that this promotion have been applied to. Do not provide for `orders.createtestorder`. This field will be empty for shipping promotions because shipping is not tied to any specific item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appliedItems")]
		public OrderPromotionItem[] AppliedItems { get; set; }
		
		/// <summary>
		/// Promotion end time in ISO 8601 format. Date, time, and offset required, for example, "2020-01-02T09:00:00+01:00" or "2020-01-02T09:00:00Z".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public string EndTime { get; set; }
		
		/// <summary>
		/// Required. The party funding the promotion. Only `merchant` is supported for `orders.createtestorder`. Acceptable values are: - "`google`" - "`merchant`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="funder")]
		public string Funder { get; set; }
		
		/// <summary>
		/// Required. This field is used to identify promotions within merchants' own systems.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="merchantPromotionId")]
		public string MerchantPromotionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="priceValue")]
		public Price PriceValue { get; set; }
		
		/// <summary>
		/// A short title of the promotion to be shown on the checkout page. Do not provide for `orders.createtestorder`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shortTitle")]
		public string ShortTitle { get; set; }
		
		/// <summary>
		/// Promotion start time in ISO 8601 format. Date, time, and offset required, for example, "2020-01-02T09:00:00+01:00" or "2020-01-02T09:00:00Z".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public string StartTime { get; set; }
		
		/// <summary>
		/// Required. The category of the promotion. Only `moneyOff` is supported for `orders.createtestorder`. Acceptable values are: - "`buyMGetMoneyOff`" - "`buyMGetNMoneyOff`" - "`buyMGetNPercentOff`" - "`buyMGetPercentOff`" - "`freeGift`" - "`freeGiftWithItemId`" - "`freeGiftWithValue`" - "`freeShippingOvernight`" - "`freeShippingStandard`" - "`freeShippingTwoDay`" - "`moneyOff`" - "`percentOff`" - "`rewardPoints`" - "`salePrice`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subtype")]
		public string Subtype { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="taxValue")]
		public Price TaxValue { get; set; }
		
		/// <summary>
		/// Required. The title of the promotion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// Required. The scope of the promotion. Only `product` is supported for `orders.createtestorder`. Acceptable values are: - "`product`" - "`shipping`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrderPromotionItem
	{
		
		/// <summary>
		/// The line item ID of a product. Do not provide for `orders.createtestorder`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lineItemId")]
		public string LineItemId { get; set; }
		
		/// <summary>
		/// Required. Offer ID of a product. Only for `orders.createtestorder`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offerId")]
		public string OfferId { get; set; }
		
		/// <summary>
		/// `orders.createtestorder`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productId")]
		public string ProductId { get; set; }
		
		/// <summary>
		/// The quantity of the associated product. Do not provide for `orders.createtestorder`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public System.Nullable<System.Int32> Quantity { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrderRefund
	{
		
		/// <summary>
		/// The actor that created the refund. Acceptable values are: - "`customer`" - "`googleBot`" - "`googleCustomerService`" - "`googlePayments`" - "`googleSabre`" - "`merchant`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="actor")]
		public string Actor { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public Price Amount { get; set; }
		
		/// <summary>
		/// Date on which the item has been created, in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creationDate")]
		public string CreationDate { get; set; }
		
		/// <summary>
		/// The reason for the refund. Acceptable values are: - "`adjustment`" - "`autoPostInternal`" - "`autoPostInvalidBillingAddress`" - "`autoPostNoInventory`" - "`autoPostPriceError`" - "`autoPostUndeliverableShippingAddress`" - "`couponAbuse`" - "`courtesyAdjustment`" - "`customerCanceled`" - "`customerDiscretionaryReturn`" - "`customerInitiatedMerchantCancel`" - "`customerSupportRequested`" - "`deliveredLateByCarrier`" - "`deliveredTooLate`" - "`expiredItem`" - "`failToPushOrderGoogleError`" - "`failToPushOrderMerchantError`" - "`failToPushOrderMerchantFulfillmentError`" - "`failToPushOrderToMerchant`" - "`failToPushOrderToMerchantOutOfStock`" - "`feeAdjustment`" - "`invalidCoupon`" - "`lateShipmentCredit`" - "`malformedShippingAddress`" - "`merchantDidNotShipOnTime`" - "`noInventory`" - "`orderTimeout`" - "`other`" - "`paymentAbuse`" - "`paymentDeclined`" - "`priceAdjustment`" - "`priceError`" - "`productArrivedDamaged`" - "`productNotAsDescribed`" - "`promoReallocation`" - "`qualityNotAsExpected`" - "`returnRefundAbuse`" - "`shippingCostAdjustment`" - "`shippingPriceError`" - "`taxAdjustment`" - "`taxError`" - "`undeliverableShippingAddress`" - "`unsupportedPoBoxAddress`" - "`wrongProductShipped`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		/// <summary>
		/// The explanation of the reason.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reasonText")]
		public string ReasonText { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrderShipment
	{
		
		/// <summary>
		/// The carrier handling the shipment. For supported carriers, Google includes the carrier name and tracking URL in emails to customers. For select supported carriers, Google also automatically updates the shipment status based on the provided shipment ID. *Note:* You can also use unsupported carriers, but emails to customers won't include the carrier name or tracking URL, and there will be no automatic order status updates. Supported carriers for "US" are: - "`ups`" (United Parcel Service) *automatic status updates* - "`usps`" (United States Postal Service) *automatic status updates* - "`fedex`" (FedEx) *automatic status updates * - "`dhl`" (DHL eCommerce) *automatic status updates* (US only) - "`ontrac`" (OnTrac) *automatic status updates * - "`dhl express`" (DHL Express) - "`deliv`" (Deliv) - "`dynamex`" (TForce) - "`lasership`" (LaserShip) - "`mpx`" (Military Parcel Xpress) - "`uds`" (United Delivery Service) - "`efw`" (Estes Forwarding Worldwide) - "`jd logistics`" (JD Logistics) - "`yunexpress`" (YunExpress) - "`china post`" (China Post) - "`china ems`" (China Post Express Mail Service) - "`singapore post`" (Singapore Post) - "`pos malaysia`" (Pos Malaysia) - "`postnl`" (PostNL) - "`ptt`" (PTT Turkish Post) - "`eub`" (ePacket) - "`chukou1`" (Chukou1 Logistics) - "`bestex`" (Best Express) - "`canada post`" (Canada Post) - "`purolator`" (Purolator) - "`canpar`" (Canpar) - "`india post`" (India Post) - "`blue dart`" (Blue Dart) - "`delhivery`" (Delhivery) - "`dtdc`" (DTDC) - "`tpc india`" (TPC India) - "`lso`" (Lone Star Overnight) - "`tww`" (Team Worldwide) - "`deliver-it`" (Deliver-IT) - "`cdl last mile`" (CDL Last Mile) Supported carriers for FR are: - "`la poste`" (La Poste) *automatic status updates * - "`colissimo`" (Colissimo by La Poste) *automatic status updates* - "`ups`" (United Parcel Service) *automatic status updates * - "`chronopost`" (Chronopost by La Poste) - "`gls`" (General Logistics Systems France) - "`dpd`" (DPD Group by GeoPost) - "`bpost`" (Belgian Post Group) - "`colis prive`" (Colis Privé) - "`boxtal`" (Boxtal) - "`geodis`" (GEODIS) - "`tnt`" (TNT) - "`db schenker`" (DB Schenker) - "`aramex`" (Aramex) 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="carrier")]
		public string Carrier { get; set; }
		
		/// <summary>
		/// Date on which the shipment has been created, in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creationDate")]
		public string CreationDate { get; set; }
		
		/// <summary>
		/// Date on which the shipment has been delivered, in ISO 8601 format. Present only if `status` is `delivered`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deliveryDate")]
		public string DeliveryDate { get; set; }
		
		/// <summary>
		/// The ID of the shipment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The line items that are shipped.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lineItems")]
		public OrderShipmentLineItemShipment[] LineItems { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scheduledDeliveryDetails")]
		public OrderShipmentScheduledDeliveryDetails ScheduledDeliveryDetails { get; set; }
		
		/// <summary>
		/// The shipment group ID of the shipment. This is set in shiplineitems request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shipmentGroupId")]
		public string ShipmentGroupId { get; set; }
		
		/// <summary>
		/// The status of the shipment. Acceptable values are: - "`delivered`" - "`readyForPickup`" - "`shipped`" - "`undeliverable`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// The tracking ID for the shipment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trackingId")]
		public string TrackingId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrderShipmentLineItemShipment
	{
		
		/// <summary>
		/// The ID of the line item that is shipped. This value is assigned by Google when an order is created. Either lineItemId or productId is required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lineItemId")]
		public string LineItemId { get; set; }
		
		/// <summary>
		/// The ID of the product to ship. This is the REST ID used in the products service. Either lineItemId or productId is required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productId")]
		public string ProductId { get; set; }
		
		/// <summary>
		/// The quantity that is shipped.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public System.Nullable<System.UInt32> Quantity { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrderShipmentScheduledDeliveryDetails
	{
		
		/// <summary>
		/// The phone number of the carrier fulfilling the delivery. The phone number is formatted as the international notation in ITU-T Recommendation E.123 (for example, "+41 44 668 1800").
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="carrierPhoneNumber")]
		public string CarrierPhoneNumber { get; set; }
		
		/// <summary>
		/// The date a shipment is scheduled for delivery, in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scheduledDate")]
		public string ScheduledDate { get; set; }
	}
	
	/// <summary>
	/// Order disbursement. All methods require the payment analyst role.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrderReportDisbursement
	{
		
		[System.Runtime.Serialization.DataMember(Name="disbursementAmount")]
		public Price DisbursementAmount { get; set; }
		
		/// <summary>
		/// The disbursement date, in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disbursementCreationDate")]
		public string DisbursementCreationDate { get; set; }
		
		/// <summary>
		/// The date the disbursement was initiated, in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disbursementDate")]
		public string DisbursementDate { get; set; }
		
		/// <summary>
		/// The ID of the disbursement.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disbursementId")]
		public string DisbursementId { get; set; }
		
		/// <summary>
		/// The ID of the managing account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="merchantId")]
		public string MerchantId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrderReportTransaction
	{
		
		[System.Runtime.Serialization.DataMember(Name="disbursementAmount")]
		public Price DisbursementAmount { get; set; }
		
		/// <summary>
		/// The date the disbursement was created, in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disbursementCreationDate")]
		public string DisbursementCreationDate { get; set; }
		
		/// <summary>
		/// The date the disbursement was initiated, in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disbursementDate")]
		public string DisbursementDate { get; set; }
		
		/// <summary>
		/// The ID of the disbursement.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disbursementId")]
		public string DisbursementId { get; set; }
		
		/// <summary>
		/// The ID of the managing account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="merchantId")]
		public string MerchantId { get; set; }
		
		/// <summary>
		/// Merchant-provided ID of the order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="merchantOrderId")]
		public string MerchantOrderId { get; set; }
		
		/// <summary>
		/// The ID of the order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orderId")]
		public string OrderId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="productAmount")]
		public ProductAmount ProductAmount { get; set; }
		
		/// <summary>
		/// The date of the transaction, in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transactionDate")]
		public string TransactionDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProductAmount
	{
		
		[System.Runtime.Serialization.DataMember(Name="priceAmount")]
		public Price PriceAmount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="remittedTaxAmount")]
		public Price RemittedTaxAmount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="taxAmount")]
		public Price TaxAmount { get; set; }
	}
	
	/// <summary>
	/// Represents a merchant trade from which signals are extracted, e.g. shipping.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrderTrackingSignal
	{
		
		/// <summary>
		/// The price represented as a number and currency.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customerShippingFee")]
		public PriceAmount CustomerShippingFee { get; set; }
		
		/// <summary>
		/// Required. The delivery postal code, as a continuous string without spaces or dashes, e.g. "95016". This field will be anonymized in returned OrderTrackingSignal creation response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deliveryPostalCode")]
		public string DeliveryPostalCode { get; set; }
		
		/// <summary>
		/// Required. The [CLDR territory code] (http://www.unicode.org/repos/cldr/tags/latest/common/main/en.xml) for the shipping destination.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deliveryRegionCode")]
		public string DeliveryRegionCode { get; set; }
		
		/// <summary>
		/// Information about line items in the order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lineItems")]
		public OrderTrackingSignalLineItemDetails[] LineItems { get; set; }
		
		/// <summary>
		/// The Google merchant ID of this order tracking signal. This value is optional. If left unset, the caller's merchant ID is used. You must request access in order to provide data on behalf of another merchant. For more information, see [Submitting Order Tracking Signals](/shopping-content/guides/order-tracking-signals).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="merchantId")]
		public string MerchantId { get; set; }
		
		/// <summary>
		/// Represents civil time (or occasionally physical time). This type can represent a civil time in one of a few possible ways: * When utc_offset is set and time_zone is unset: a civil time on a calendar day with a particular offset from UTC. * When time_zone is set and utc_offset is unset: a civil time on a calendar day in a particular time zone. * When neither time_zone nor utc_offset is set: a civil time on a calendar day in local time. The date is relative to the Proleptic Gregorian Calendar. If year, month, or day are 0, the DateTime is considered not to have a specific year, month, or day respectively. This type may also be used to represent a physical time if all the date and time fields are set and either case of the `time_offset` oneof is set. Consider using `Timestamp` message for physical time instead. If your use case also would like to store the user's timezone, that can be done in another field. This type is more flexible than some applications may want. Make sure to document and validate your application's limitations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orderCreatedTime")]
		public DateTime OrderCreatedTime { get; set; }
		
		/// <summary>
		/// Required. The ID of the order on the merchant side. This field will be hashed in returned OrderTrackingSignal creation response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orderId")]
		public string OrderId { get; set; }
		
		/// <summary>
		/// Output only. The ID that uniquely identifies this order tracking signal.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orderTrackingSignalId")]
		public string OrderTrackingSignalId { get; set; }
		
		/// <summary>
		/// The mapping of the line items to the shipment information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shipmentLineItemMapping")]
		public OrderTrackingSignalShipmentLineItemMapping[] ShipmentLineItemMapping { get; set; }
		
		/// <summary>
		/// The shipping information for the order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shippingInfo")]
		public OrderTrackingSignalShippingInfo[] ShippingInfo { get; set; }
	}
	
	/// <summary>
	/// The line items of the order.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrderTrackingSignalLineItemDetails
	{
		
		/// <summary>
		/// Brand of the product.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="brand")]
		public string Brand { get; set; }
		
		/// <summary>
		/// The Global Trade Item Number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gtin")]
		public string Gtin { get; set; }
		
		/// <summary>
		/// Required. The ID for this line item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lineItemId")]
		public string LineItemId { get; set; }
		
		/// <summary>
		/// The manufacturer part number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mpn")]
		public string Mpn { get; set; }
		
		/// <summary>
		/// Plain text description of this product (deprecated: Please use product_title instead).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productDescription")]
		public string ProductDescription { get; set; }
		
		/// <summary>
		/// Required. The Content API REST ID of the product, in the form channel:contentLanguage:targetCountry:offerId.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productId")]
		public string ProductId { get; set; }
		
		/// <summary>
		/// Plain text title of this product.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productTitle")]
		public string ProductTitle { get; set; }
		
		/// <summary>
		/// The quantity of the line item in the order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public string Quantity { get; set; }
		
		/// <summary>
		/// Merchant SKU for this item (deprecated).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sku")]
		public string Sku { get; set; }
		
		/// <summary>
		/// Universal product code for this item (deprecated: Please use GTIN instead).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="upc")]
		public string Upc { get; set; }
	}
	
	/// <summary>
	/// Represents how many items are in the shipment for the given shipment_id and line_item_id.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrderTrackingSignalShipmentLineItemMapping
	{
		
		/// <summary>
		/// Required. The line item ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lineItemId")]
		public string LineItemId { get; set; }
		
		/// <summary>
		/// The line item quantity in the shipment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public string Quantity { get; set; }
		
		/// <summary>
		/// Required. The shipment ID. This field will be hashed in returned OrderTrackingSignal creation response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shipmentId")]
		public string ShipmentId { get; set; }
	}
	
	/// <summary>
	/// The shipping information for the order.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrderTrackingSignalShippingInfo
	{
		
		/// <summary>
		/// Represents civil time (or occasionally physical time). This type can represent a civil time in one of a few possible ways: * When utc_offset is set and time_zone is unset: a civil time on a calendar day with a particular offset from UTC. * When time_zone is set and utc_offset is unset: a civil time on a calendar day in a particular time zone. * When neither time_zone nor utc_offset is set: a civil time on a calendar day in local time. The date is relative to the Proleptic Gregorian Calendar. If year, month, or day are 0, the DateTime is considered not to have a specific year, month, or day respectively. This type may also be used to represent a physical time if all the date and time fields are set and either case of the `time_offset` oneof is set. Consider using `Timestamp` message for physical time instead. If your use case also would like to store the user's timezone, that can be done in another field. This type is more flexible than some applications may want. Make sure to document and validate your application's limitations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="actualDeliveryTime")]
		public DateTime ActualDeliveryTime { get; set; }
		
		/// <summary>
		/// The name of the shipping carrier for the delivery. This field is required if one of the following fields is absent: earliest_delivery_promise_time, latest_delivery_promise_time, and actual_delivery_time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="carrierName")]
		public string CarrierName { get; set; }
		
		/// <summary>
		/// The service type for fulfillment, e.g., GROUND, FIRST_CLASS, etc.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="carrierServiceName")]
		public string CarrierServiceName { get; set; }
		
		/// <summary>
		/// Represents civil time (or occasionally physical time). This type can represent a civil time in one of a few possible ways: * When utc_offset is set and time_zone is unset: a civil time on a calendar day with a particular offset from UTC. * When time_zone is set and utc_offset is unset: a civil time on a calendar day in a particular time zone. * When neither time_zone nor utc_offset is set: a civil time on a calendar day in local time. The date is relative to the Proleptic Gregorian Calendar. If year, month, or day are 0, the DateTime is considered not to have a specific year, month, or day respectively. This type may also be used to represent a physical time if all the date and time fields are set and either case of the `time_offset` oneof is set. Consider using `Timestamp` message for physical time instead. If your use case also would like to store the user's timezone, that can be done in another field. This type is more flexible than some applications may want. Make sure to document and validate your application's limitations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="earliestDeliveryPromiseTime")]
		public DateTime EarliestDeliveryPromiseTime { get; set; }
		
		/// <summary>
		/// Represents civil time (or occasionally physical time). This type can represent a civil time in one of a few possible ways: * When utc_offset is set and time_zone is unset: a civil time on a calendar day with a particular offset from UTC. * When time_zone is set and utc_offset is unset: a civil time on a calendar day in a particular time zone. * When neither time_zone nor utc_offset is set: a civil time on a calendar day in local time. The date is relative to the Proleptic Gregorian Calendar. If year, month, or day are 0, the DateTime is considered not to have a specific year, month, or day respectively. This type may also be used to represent a physical time if all the date and time fields are set and either case of the `time_offset` oneof is set. Consider using `Timestamp` message for physical time instead. If your use case also would like to store the user's timezone, that can be done in another field. This type is more flexible than some applications may want. Make sure to document and validate your application's limitations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="latestDeliveryPromiseTime")]
		public DateTime LatestDeliveryPromiseTime { get; set; }
		
		/// <summary>
		/// The origin postal code, as a continuous string without spaces or dashes, e.g. "95016". This field will be anonymized in returned OrderTrackingSignal creation response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originPostalCode")]
		public string OriginPostalCode { get; set; }
		
		/// <summary>
		/// The [CLDR territory code] (http://www.unicode.org/repos/cldr/tags/latest/common/main/en.xml) for the shipping origin.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originRegionCode")]
		public string OriginRegionCode { get; set; }
		
		/// <summary>
		/// Required. The shipment ID. This field will be hashed in returned OrderTrackingSignal creation response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shipmentId")]
		public string ShipmentId { get; set; }
		
		/// <summary>
		/// Represents civil time (or occasionally physical time). This type can represent a civil time in one of a few possible ways: * When utc_offset is set and time_zone is unset: a civil time on a calendar day with a particular offset from UTC. * When time_zone is set and utc_offset is unset: a civil time on a calendar day in a particular time zone. * When neither time_zone nor utc_offset is set: a civil time on a calendar day in local time. The date is relative to the Proleptic Gregorian Calendar. If year, month, or day are 0, the DateTime is considered not to have a specific year, month, or day respectively. This type may also be used to represent a physical time if all the date and time fields are set and either case of the `time_offset` oneof is set. Consider using `Timestamp` message for physical time instead. If your use case also would like to store the user's timezone, that can be done in another field. This type is more flexible than some applications may want. Make sure to document and validate your application's limitations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shippedTime")]
		public DateTime ShippedTime { get; set; }
		
		/// <summary>
		/// The status of the shipment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shippingStatus")]
		public System.Nullable<OrderTrackingSignalShippingInfoShippingStatus> ShippingStatus { get; set; }
		
		/// <summary>
		/// The tracking ID of the shipment. This field is required if one of the following fields is absent: earliest_delivery_promise_time, latest_delivery_promise_time, and actual_delivery_time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trackingId")]
		public string TrackingId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OrderTrackingSignalShippingInfoShippingStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SHIPPING_STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SHIPPED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELIVERED = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrderinvoicesCreateChargeInvoiceRequest
	{
		
		/// <summary>
		/// [required] The ID of the invoice.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="invoiceId")]
		public string InvoiceId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="invoiceSummary")]
		public InvoiceSummary InvoiceSummary { get; set; }
		
		/// <summary>
		/// [required] Invoice details per line item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lineItemInvoices")]
		public ShipmentInvoiceLineItemInvoice[] LineItemInvoices { get; set; }
		
		/// <summary>
		/// [required] The ID of the operation, unique across all operations for a given order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operationId")]
		public string OperationId { get; set; }
		
		/// <summary>
		/// [required] ID of the shipment group. It is assigned by the merchant in the `shipLineItems` method and is used to group multiple line items that have the same kind of shipping charges.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shipmentGroupId")]
		public string ShipmentGroupId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ShipmentInvoiceLineItemInvoice
	{
		
		/// <summary>
		/// ID of the line item. Either lineItemId or productId must be set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lineItemId")]
		public string LineItemId { get; set; }
		
		/// <summary>
		/// ID of the product. This is the REST ID used in the products service. Either lineItemId or productId must be set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productId")]
		public string ProductId { get; set; }
		
		/// <summary>
		/// [required] The shipment unit ID is assigned by the merchant and defines individual quantities within a line item. The same ID can be assigned to units that are the same while units that differ must be assigned a different ID (for example: free or promotional units).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shipmentUnitIds")]
		public string[] ShipmentUnitIds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unitInvoice")]
		public UnitInvoice UnitInvoice { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UnitInvoice
	{
		
		/// <summary>
		/// Additional charges for a unit, for example, shipping costs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additionalCharges")]
		public UnitInvoiceAdditionalCharge[] AdditionalCharges { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unitPrice")]
		public Price UnitPrice { get; set; }
		
		/// <summary>
		/// Tax amounts to apply to the unit price.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unitPriceTaxes")]
		public UnitInvoiceTaxLine[] UnitPriceTaxes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UnitInvoiceAdditionalCharge
	{
		
		[System.Runtime.Serialization.DataMember(Name="additionalChargeAmount")]
		public Amount AdditionalChargeAmount { get; set; }
		
		/// <summary>
		/// [required] Type of the additional charge. Acceptable values are: - "`shipping`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UnitInvoiceTaxLine
	{
		
		[System.Runtime.Serialization.DataMember(Name="taxAmount")]
		public Price TaxAmount { get; set; }
		
		/// <summary>
		/// Optional name of the tax type. This should only be provided if `taxType` is `otherFeeTax`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taxName")]
		public string TaxName { get; set; }
		
		/// <summary>
		/// [required] Type of the tax. Acceptable values are: - "`otherFee`" - "`otherFeeTax`" - "`sales`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taxType")]
		public string TaxType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrderinvoicesCreateChargeInvoiceResponse
	{
		
		/// <summary>
		/// The status of the execution. Acceptable values are: - "`duplicate`" - "`executed`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="executionStatus")]
		public string ExecutionStatus { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "`content#orderinvoicesCreateChargeInvoiceResponse`".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrderinvoicesCreateRefundInvoiceRequest
	{
		
		/// <summary>
		/// [required] The ID of the invoice.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="invoiceId")]
		public string InvoiceId { get; set; }
		
		/// <summary>
		/// [required] The ID of the operation, unique across all operations for a given order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operationId")]
		public string OperationId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="refundOnlyOption")]
		public OrderinvoicesCustomBatchRequestEntryCreateRefundInvoiceRefundOption RefundOnlyOption { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="returnOption")]
		public OrderinvoicesCustomBatchRequestEntryCreateRefundInvoiceReturnOption ReturnOption { get; set; }
		
		/// <summary>
		/// Invoice details for different shipment groups.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shipmentInvoices")]
		public ShipmentInvoice[] ShipmentInvoices { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrderinvoicesCustomBatchRequestEntryCreateRefundInvoiceRefundOption
	{
		
		/// <summary>
		/// Optional description of the refund reason.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// [required] Reason for the refund. Acceptable values are: - "`adjustment`" - "`autoPostInternal`" - "`autoPostInvalidBillingAddress`" - "`autoPostNoInventory`" - "`autoPostPriceError`" - "`autoPostUndeliverableShippingAddress`" - "`couponAbuse`" - "`courtesyAdjustment`" - "`customerCanceled`" - "`customerDiscretionaryReturn`" - "`customerInitiatedMerchantCancel`" - "`customerSupportRequested`" - "`deliveredLateByCarrier`" - "`deliveredTooLate`" - "`expiredItem`" - "`failToPushOrderGoogleError`" - "`failToPushOrderMerchantError`" - "`failToPushOrderMerchantFulfillmentError`" - "`failToPushOrderToMerchant`" - "`failToPushOrderToMerchantOutOfStock`" - "`feeAdjustment`" - "`invalidCoupon`" - "`lateShipmentCredit`" - "`malformedShippingAddress`" - "`merchantDidNotShipOnTime`" - "`noInventory`" - "`orderTimeout`" - "`other`" - "`paymentAbuse`" - "`paymentDeclined`" - "`priceAdjustment`" - "`priceError`" - "`productArrivedDamaged`" - "`productNotAsDescribed`" - "`promoReallocation`" - "`qualityNotAsExpected`" - "`returnRefundAbuse`" - "`shippingCostAdjustment`" - "`shippingPriceError`" - "`taxAdjustment`" - "`taxError`" - "`undeliverableShippingAddress`" - "`unsupportedPoBoxAddress`" - "`wrongProductShipped`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrderinvoicesCustomBatchRequestEntryCreateRefundInvoiceReturnOption
	{
		
		/// <summary>
		/// Optional description of the return reason.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// [required] Reason for the return. Acceptable values are: - "`customerDiscretionaryReturn`" - "`customerInitiatedMerchantCancel`" - "`deliveredTooLate`" - "`expiredItem`" - "`invalidCoupon`" - "`malformedShippingAddress`" - "`other`" - "`productArrivedDamaged`" - "`productNotAsDescribed`" - "`qualityNotAsExpected`" - "`undeliverableShippingAddress`" - "`unsupportedPoBoxAddress`" - "`wrongProductShipped`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ShipmentInvoice
	{
		
		[System.Runtime.Serialization.DataMember(Name="invoiceSummary")]
		public InvoiceSummary InvoiceSummary { get; set; }
		
		/// <summary>
		/// [required] Invoice details per line item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lineItemInvoices")]
		public ShipmentInvoiceLineItemInvoice[] LineItemInvoices { get; set; }
		
		/// <summary>
		/// [required] ID of the shipment group. It is assigned by the merchant in the `shipLineItems` method and is used to group multiple line items that have the same kind of shipping charges.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shipmentGroupId")]
		public string ShipmentGroupId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrderinvoicesCreateRefundInvoiceResponse
	{
		
		/// <summary>
		/// The status of the execution. Acceptable values are: - "`duplicate`" - "`executed`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="executionStatus")]
		public string ExecutionStatus { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "`content#orderinvoicesCreateRefundInvoiceResponse`".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrderreportsListDisbursementsResponse
	{
		
		/// <summary>
		/// The list of disbursements.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disbursements")]
		public OrderReportDisbursement[] Disbursements { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "`content#orderreportsListDisbursementsResponse`".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// The token for the retrieval of the next page of disbursements.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrderreportsListTransactionsResponse
	{
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "`content#orderreportsListTransactionsResponse`".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// The token for the retrieval of the next page of transactions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// The list of transactions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transactions")]
		public OrderReportTransaction[] Transactions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrderreturnsAcknowledgeRequest
	{
		
		/// <summary>
		/// [required] The ID of the operation, unique across all operations for a given order return.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operationId")]
		public string OperationId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrderreturnsAcknowledgeResponse
	{
		
		/// <summary>
		/// The status of the execution. Acceptable values are: - "`duplicate`" - "`executed`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="executionStatus")]
		public string ExecutionStatus { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "`content#orderreturnsAcknowledgeResponse`".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrderreturnsCreateOrderReturnRequest
	{
		
		/// <summary>
		/// The list of line items to return.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lineItems")]
		public OrderreturnsLineItem[] LineItems { get; set; }
		
		/// <summary>
		/// The ID of the operation. Unique across all operations for a given order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operationId")]
		public string OperationId { get; set; }
		
		/// <summary>
		/// The ID of the order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orderId")]
		public string OrderId { get; set; }
		
		/// <summary>
		/// The way of the package being returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="returnMethodType")]
		public string ReturnMethodType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrderreturnsLineItem
	{
		
		/// <summary>
		/// The ID of the line item. This value is assigned by Google when an order is created. Either lineItemId or productId is required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lineItemId")]
		public string LineItemId { get; set; }
		
		/// <summary>
		/// The ID of the product to cancel. This is the REST ID used in the products service. Either lineItemId or productId is required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productId")]
		public string ProductId { get; set; }
		
		/// <summary>
		/// The quantity of this line item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public System.Nullable<System.UInt32> Quantity { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrderreturnsCreateOrderReturnResponse
	{
		
		/// <summary>
		/// The status of the execution. Acceptable values are: - "`duplicate`" - "`executed`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="executionStatus")]
		public string ExecutionStatus { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "`content#orderreturnsCreateOrderReturnResponse`".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Order return. Production access (all methods) requires the order manager role. Sandbox access does not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orderReturn")]
		public MerchantOrderReturn OrderReturn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrderreturnsListResponse
	{
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "`content#orderreturnsListResponse`".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// The token for the retrieval of the next page of returns.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resources")]
		public MerchantOrderReturn[] Resources { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrderreturnsPartialRefund
	{
		
		[System.Runtime.Serialization.DataMember(Name="priceAmount")]
		public Price PriceAmount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="taxAmount")]
		public Price TaxAmount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrderreturnsProcessRequest
	{
		
		/// <summary>
		/// Option to charge the customer return shipping cost.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fullChargeReturnShippingCost")]
		public System.Nullable<System.Boolean> FullChargeReturnShippingCost { get; set; }
		
		/// <summary>
		/// [required] The ID of the operation, unique across all operations for a given order return.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operationId")]
		public string OperationId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="refundShippingFee")]
		public OrderreturnsRefundOperation RefundShippingFee { get; set; }
		
		/// <summary>
		/// The list of items to return.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="returnItems")]
		public OrderreturnsReturnItem[] ReturnItems { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrderreturnsRefundOperation
	{
		
		/// <summary>
		/// If true, the item will be fully refunded. Allowed only when payment_type is FOP. Merchant can choose this refund option to indicate the full remaining amount of corresponding object to be refunded to the customer through FOP.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fullRefund")]
		public System.Nullable<System.Boolean> FullRefund { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="partialRefund")]
		public OrderreturnsPartialRefund PartialRefund { get; set; }
		
		/// <summary>
		/// The payment way of issuing refund. Default value is ORIGINAL_FOP if not set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paymentType")]
		public string PaymentType { get; set; }
		
		/// <summary>
		/// The explanation of the reason.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reasonText")]
		public string ReasonText { get; set; }
		
		/// <summary>
		/// Code of the refund reason.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="returnRefundReason")]
		public string ReturnRefundReason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrderreturnsReturnItem
	{
		
		[System.Runtime.Serialization.DataMember(Name="refund")]
		public OrderreturnsRefundOperation Refund { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reject")]
		public OrderreturnsRejectOperation Reject { get; set; }
		
		/// <summary>
		/// Unit level ID for the return item. Different units of the same product will have different IDs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="returnItemId")]
		public string ReturnItemId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrderreturnsRejectOperation
	{
		
		/// <summary>
		/// The reason for the return.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		/// <summary>
		/// The explanation of the reason.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reasonText")]
		public string ReasonText { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrderreturnsProcessResponse
	{
		
		/// <summary>
		/// The status of the execution. Acceptable values are: - "`duplicate`" - "`executed`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="executionStatus")]
		public string ExecutionStatus { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "`content#orderreturnsProcessResponse`".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrdersAcknowledgeRequest
	{
		
		/// <summary>
		/// The ID of the operation. Unique across all operations for a given order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operationId")]
		public string OperationId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrdersAcknowledgeResponse
	{
		
		/// <summary>
		/// The status of the execution. Acceptable values are: - "`duplicate`" - "`executed`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="executionStatus")]
		public string ExecutionStatus { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "`content#ordersAcknowledgeResponse`".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrdersAdvanceTestOrderResponse
	{
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "`content#ordersAdvanceTestOrderResponse`".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrdersCancelLineItemRequest
	{
		
		/// <summary>
		/// The ID of the line item to cancel. Either lineItemId or productId is required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lineItemId")]
		public string LineItemId { get; set; }
		
		/// <summary>
		/// The ID of the operation. Unique across all operations for a given order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operationId")]
		public string OperationId { get; set; }
		
		/// <summary>
		/// The ID of the product to cancel. This is the REST ID used in the products service. Either lineItemId or productId is required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productId")]
		public string ProductId { get; set; }
		
		/// <summary>
		/// The quantity to cancel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public System.Nullable<System.UInt32> Quantity { get; set; }
		
		/// <summary>
		/// The reason for the cancellation. Acceptable values are: - "`customerInitiatedCancel`" - "`invalidCoupon`" - "`malformedShippingAddress`" - "`noInventory`" - "`other`" - "`priceError`" - "`shippingPriceError`" - "`taxError`" - "`undeliverableShippingAddress`" - "`unsupportedPoBoxAddress`" - "`failedToCaptureFunds`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		/// <summary>
		/// The explanation of the reason.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reasonText")]
		public string ReasonText { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrdersCancelLineItemResponse
	{
		
		/// <summary>
		/// The status of the execution. Acceptable values are: - "`duplicate`" - "`executed`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="executionStatus")]
		public string ExecutionStatus { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "`content#ordersCancelLineItemResponse`".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrdersCancelRequest
	{
		
		/// <summary>
		/// The ID of the operation. Unique across all operations for a given order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operationId")]
		public string OperationId { get; set; }
		
		/// <summary>
		/// The reason for the cancellation. Acceptable values are: - "`customerInitiatedCancel`" - "`invalidCoupon`" - "`malformedShippingAddress`" - "`noInventory`" - "`other`" - "`priceError`" - "`shippingPriceError`" - "`taxError`" - "`undeliverableShippingAddress`" - "`unsupportedPoBoxAddress`" - "`failedToCaptureFunds`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		/// <summary>
		/// The explanation of the reason.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reasonText")]
		public string ReasonText { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrdersCancelResponse
	{
		
		/// <summary>
		/// The status of the execution. Acceptable values are: - "`duplicate`" - "`executed`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="executionStatus")]
		public string ExecutionStatus { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "`content#ordersCancelResponse`".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrdersCancelTestOrderByCustomerRequest
	{
		
		/// <summary>
		/// The reason for the cancellation. Acceptable values are: - "`changedMind`" - "`orderedWrongItem`" - "`other`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrdersCancelTestOrderByCustomerResponse
	{
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "`content#ordersCancelTestOrderByCustomerResponse`".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrdersCreateTestOrderRequest
	{
		
		/// <summary>
		/// The CLDR territory code of the country of the test order to create. Affects the currency and addresses of orders created through `template_name`, or the addresses of orders created through `test_order`. Acceptable values are: - "`US`" - "`FR`" Defaults to "`US`".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// The test order template to use. Specify as an alternative to `testOrder` as a shortcut for retrieving a template and then creating an order using that template. Acceptable values are: - "`template1`" - "`template1a`" - "`template1b`" - "`template2`" - "`template3`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="templateName")]
		public string TemplateName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="testOrder")]
		public TestOrder TestOrder { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TestOrder
	{
		
		[System.Runtime.Serialization.DataMember(Name="deliveryDetails")]
		public TestOrderDeliveryDetails DeliveryDetails { get; set; }
		
		/// <summary>
		/// Whether the orderinvoices service should support this order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableOrderinvoices")]
		public System.Nullable<System.Boolean> EnableOrderinvoices { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "`content#testOrder`"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Required. Line items that are ordered. At least one line item must be provided.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lineItems")]
		public TestOrderLineItem[] LineItems { get; set; }
		
		/// <summary>
		/// Restricted. Do not use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notificationMode")]
		public string NotificationMode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pickupDetails")]
		public TestOrderPickupDetails PickupDetails { get; set; }
		
		/// <summary>
		/// Required. The billing address. Acceptable values are: - "`dwight`" - "`jim`" - "`pam`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="predefinedBillingAddress")]
		public string PredefinedBillingAddress { get; set; }
		
		/// <summary>
		/// Required. Identifier of one of the predefined delivery addresses for the delivery. Acceptable values are: - "`dwight`" - "`jim`" - "`pam`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="predefinedDeliveryAddress")]
		public string PredefinedDeliveryAddress { get; set; }
		
		/// <summary>
		/// Required. Email address of the customer. Acceptable values are: - "`pog.dwight.schrute@gmail.com`" - "`pog.jim.halpert@gmail.com`" - "`penpog.pam.beesly@gmail.comding`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="predefinedEmail")]
		public string PredefinedEmail { get; set; }
		
		/// <summary>
		/// Identifier of one of the predefined pickup details. Required for orders containing line items with shipping type `pickup`. Acceptable values are: - "`dwight`" - "`jim`" - "`pam`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="predefinedPickupDetails")]
		public string PredefinedPickupDetails { get; set; }
		
		/// <summary>
		/// Promotions associated with the order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="promotions")]
		public OrderPromotion[] Promotions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="shippingCost")]
		public Price ShippingCost { get; set; }
		
		/// <summary>
		/// Required. The requested shipping option. Acceptable values are: - "`economy`" - "`expedited`" - "`oneDay`" - "`sameDay`" - "`standard`" - "`twoDay`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shippingOption")]
		public string ShippingOption { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TestOrderDeliveryDetails
	{
		
		[System.Runtime.Serialization.DataMember(Name="address")]
		public TestOrderAddress Address { get; set; }
		
		/// <summary>
		/// Whether the order is scheduled delivery order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isScheduledDelivery")]
		public System.Nullable<System.Boolean> IsScheduledDelivery { get; set; }
		
		/// <summary>
		/// The phone number of the person receiving the delivery.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phoneNumber")]
		public string PhoneNumber { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TestOrderAddress
	{
		
		/// <summary>
		/// CLDR country code (for example, "US").
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// Strings representing the lines of the printed label for mailing the order, for example: John Smith 1600 Amphitheatre Parkway Mountain View, CA, 94043 United States 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fullAddress")]
		public string[] FullAddress { get; set; }
		
		/// <summary>
		/// Whether the address is a post office box.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isPostOfficeBox")]
		public System.Nullable<System.Boolean> IsPostOfficeBox { get; set; }
		
		/// <summary>
		/// City, town or commune. May also include dependent localities or sublocalities (for example, neighborhoods or suburbs).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locality")]
		public string Locality { get; set; }
		
		/// <summary>
		/// Postal Code or ZIP (for example, "94043").
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postalCode")]
		public string PostalCode { get; set; }
		
		/// <summary>
		/// Name of the recipient.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recipientName")]
		public string RecipientName { get; set; }
		
		/// <summary>
		/// Top-level administrative subdivision of the country. For example, a state like California ("CA") or a province like Quebec ("QC").
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="region")]
		public string Region { get; set; }
		
		/// <summary>
		/// Street-level part of the address. Use `\n` to add a second line.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="streetAddress")]
		public string[] StreetAddress { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TestOrderLineItem
	{
		
		[System.Runtime.Serialization.DataMember(Name="product")]
		public TestOrderLineItemProduct Product { get; set; }
		
		/// <summary>
		/// Required. Number of items ordered.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantityOrdered")]
		public System.Nullable<System.UInt32> QuantityOrdered { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="returnInfo")]
		public OrderLineItemReturnInfo ReturnInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="shippingDetails")]
		public OrderLineItemShippingDetails ShippingDetails { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TestOrderLineItemProduct
	{
		
		/// <summary>
		/// Required. Brand of the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="brand")]
		public string Brand { get; set; }
		
		/// <summary>
		/// Required. Condition or state of the item. Acceptable values are: - "`new`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="condition")]
		public string Condition { get; set; }
		
		/// <summary>
		/// Required. The two-letter ISO 639-1 language code for the item. Acceptable values are: - "`en`" - "`fr`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentLanguage")]
		public string ContentLanguage { get; set; }
		
		/// <summary>
		/// Fees for the item. Optional.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fees")]
		public OrderLineItemProductFee[] Fees { get; set; }
		
		/// <summary>
		/// Global Trade Item Number (GTIN) of the item. Optional.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gtin")]
		public string Gtin { get; set; }
		
		/// <summary>
		/// Required. URL of an image of the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageLink")]
		public string ImageLink { get; set; }
		
		/// <summary>
		/// Shared identifier for all variants of the same product. Optional.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemGroupId")]
		public string ItemGroupId { get; set; }
		
		/// <summary>
		/// Manufacturer Part Number (MPN) of the item. Optional.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mpn")]
		public string Mpn { get; set; }
		
		/// <summary>
		/// Required. An identifier of the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offerId")]
		public string OfferId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="price")]
		public Price Price { get; set; }
		
		/// <summary>
		/// Required. The CLDR territory code of the target country of the product.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetCountry")]
		public string TargetCountry { get; set; }
		
		/// <summary>
		/// Required. The title of the product.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// Variant attributes for the item. Optional.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="variantAttributes")]
		public OrderLineItemProductVariantAttribute[] VariantAttributes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TestOrderPickupDetails
	{
		
		/// <summary>
		/// Required. Code of the location defined by provider or merchant.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locationCode")]
		public string LocationCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pickupLocationAddress")]
		public TestOrderAddress PickupLocationAddress { get; set; }
		
		/// <summary>
		/// Pickup location type. Acceptable values are: - "`locker`" - "`store`" - "`curbside`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pickupLocationType")]
		public string PickupLocationType { get; set; }
		
		/// <summary>
		/// Required. all pickup persons set by users.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pickupPersons")]
		public TestOrderPickupDetailsPickupPerson[] PickupPersons { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TestOrderPickupDetailsPickupPerson
	{
		
		/// <summary>
		/// Required. Full name of the pickup person.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required. The phone number of the person picking up the items.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phoneNumber")]
		public string PhoneNumber { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrdersCreateTestOrderResponse
	{
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "`content#ordersCreateTestOrderResponse`".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// The ID of the newly created test order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orderId")]
		public string OrderId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrdersCreateTestReturnRequest
	{
		
		/// <summary>
		/// Returned items.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public OrdersCustomBatchRequestEntryCreateTestReturnReturnItem[] Items { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrdersCustomBatchRequestEntryCreateTestReturnReturnItem
	{
		
		/// <summary>
		/// The ID of the line item to return.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lineItemId")]
		public string LineItemId { get; set; }
		
		/// <summary>
		/// Quantity that is returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public System.Nullable<System.UInt32> Quantity { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrdersCreateTestReturnResponse
	{
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "`content#ordersCreateTestReturnResponse`".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// The ID of the newly created test order return.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="returnId")]
		public string ReturnId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrdersCustomBatchRequestEntryRefundItemItem
	{
		
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public MonetaryAmount Amount { get; set; }
		
		/// <summary>
		/// If true, the full item will be refunded. If this is true, amount shouldn't be provided and will be ignored.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fullRefund")]
		public System.Nullable<System.Boolean> FullRefund { get; set; }
		
		/// <summary>
		/// The ID of the line item. Either lineItemId or productId is required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lineItemId")]
		public string LineItemId { get; set; }
		
		/// <summary>
		/// The ID of the product. This is the REST ID used in the products service. Either lineItemId or productId is required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productId")]
		public string ProductId { get; set; }
		
		/// <summary>
		/// The number of products that are refunded.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public System.Nullable<System.Int32> Quantity { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrdersCustomBatchRequestEntryRefundItemShipping
	{
		
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public Price Amount { get; set; }
		
		/// <summary>
		/// If set to true, all shipping costs for the order will be refunded. If this is true, amount shouldn't be provided and will be ignored. If set to false, submit the amount of the partial shipping refund, excluding the shipping tax. The shipping tax is calculated and handled on Google's side.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fullRefund")]
		public System.Nullable<System.Boolean> FullRefund { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrdersCustomBatchRequestEntryShipLineItemsShipmentInfo
	{
		
		/// <summary>
		/// The carrier handling the shipment. See `shipments[].carrier` in the Orders resource representation for a list of acceptable values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="carrier")]
		public string Carrier { get; set; }
		
		/// <summary>
		/// Required. The ID of the shipment. This is assigned by the merchant and is unique to each shipment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shipmentId")]
		public string ShipmentId { get; set; }
		
		/// <summary>
		/// The tracking ID for the shipment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trackingId")]
		public string TrackingId { get; set; }
	}
	
	/// <summary>
	/// ScheduledDeliveryDetails used to update the scheduled delivery order.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrdersCustomBatchRequestEntryUpdateShipmentScheduledDeliveryDetails
	{
		
		/// <summary>
		/// The phone number of the carrier fulfilling the delivery. The phone number should be formatted as the international notation in
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="carrierPhoneNumber")]
		public string CarrierPhoneNumber { get; set; }
		
		/// <summary>
		/// The date a shipment is scheduled for delivery, in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scheduledDate")]
		public string ScheduledDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrdersGetByMerchantOrderIdResponse
	{
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "`content#ordersGetByMerchantOrderIdResponse`".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Order. Production access (all methods) requires the order manager role. Sandbox access does not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order")]
		public Order Order { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrdersGetTestOrderTemplateResponse
	{
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "`content#ordersGetTestOrderTemplateResponse`".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="template")]
		public TestOrder Template { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrdersInStoreRefundLineItemRequest
	{
		
		/// <summary>
		/// The ID of the line item to return. Either lineItemId or productId is required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lineItemId")]
		public string LineItemId { get; set; }
		
		/// <summary>
		/// The ID of the operation. Unique across all operations for a given order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operationId")]
		public string OperationId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="priceAmount")]
		public Price PriceAmount { get; set; }
		
		/// <summary>
		/// The ID of the product to return. This is the REST ID used in the products service. Either lineItemId or productId is required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productId")]
		public string ProductId { get; set; }
		
		/// <summary>
		/// The quantity to return and refund.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public System.Nullable<System.UInt32> Quantity { get; set; }
		
		/// <summary>
		/// The reason for the return. Acceptable values are: - "`customerDiscretionaryReturn`" - "`customerInitiatedMerchantCancel`" - "`deliveredTooLate`" - "`expiredItem`" - "`invalidCoupon`" - "`malformedShippingAddress`" - "`other`" - "`productArrivedDamaged`" - "`productNotAsDescribed`" - "`qualityNotAsExpected`" - "`undeliverableShippingAddress`" - "`unsupportedPoBoxAddress`" - "`wrongProductShipped`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		/// <summary>
		/// The explanation of the reason.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reasonText")]
		public string ReasonText { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="taxAmount")]
		public Price TaxAmount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrdersInStoreRefundLineItemResponse
	{
		
		/// <summary>
		/// The status of the execution. Acceptable values are: - "`duplicate`" - "`executed`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="executionStatus")]
		public string ExecutionStatus { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "`content#ordersInStoreRefundLineItemResponse`".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrdersListResponse
	{
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "`content#ordersListResponse`".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// The token for the retrieval of the next page of orders.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resources")]
		public Order[] Resources { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrdersRefundItemRequest
	{
		
		/// <summary>
		/// The items that are refunded. Either Item or Shipping must be provided in the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public OrdersCustomBatchRequestEntryRefundItemItem[] Items { get; set; }
		
		/// <summary>
		/// The ID of the operation. Unique across all operations for a given order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operationId")]
		public string OperationId { get; set; }
		
		/// <summary>
		/// The reason for the refund. Acceptable values are: - "`shippingCostAdjustment`" - "`priceAdjustment`" - "`taxAdjustment`" - "`feeAdjustment`" - "`courtesyAdjustment`" - "`adjustment`" - "`customerCancelled`" - "`noInventory`" - "`productNotAsDescribed`" - "`undeliverableShippingAddress`" - "`wrongProductShipped`" - "`lateShipmentCredit`" - "`deliveredLateByCarrier`" - "`productArrivedDamaged`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		/// <summary>
		/// The explanation of the reason.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reasonText")]
		public string ReasonText { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="shipping")]
		public OrdersCustomBatchRequestEntryRefundItemShipping Shipping { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrdersRefundItemResponse
	{
		
		/// <summary>
		/// The status of the execution. Acceptable values are: - "`duplicate`" - "`executed`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="executionStatus")]
		public string ExecutionStatus { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "`content#ordersRefundItemResponse`".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrdersRefundOrderRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public MonetaryAmount Amount { get; set; }
		
		/// <summary>
		/// If true, the full order will be refunded, including shipping. If this is true, amount shouldn't be provided and will be ignored.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fullRefund")]
		public System.Nullable<System.Boolean> FullRefund { get; set; }
		
		/// <summary>
		/// The ID of the operation. Unique across all operations for a given order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operationId")]
		public string OperationId { get; set; }
		
		/// <summary>
		/// The reason for the refund. Acceptable values are: - "`courtesyAdjustment`" - "`other`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		/// <summary>
		/// The explanation of the reason.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reasonText")]
		public string ReasonText { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrdersRefundOrderResponse
	{
		
		/// <summary>
		/// The status of the execution. Acceptable values are: - "`duplicate`" - "`executed`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="executionStatus")]
		public string ExecutionStatus { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "`content#ordersRefundOrderResponse`".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrdersRejectReturnLineItemRequest
	{
		
		/// <summary>
		/// The ID of the line item to return. Either lineItemId or productId is required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lineItemId")]
		public string LineItemId { get; set; }
		
		/// <summary>
		/// The ID of the operation. Unique across all operations for a given order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operationId")]
		public string OperationId { get; set; }
		
		/// <summary>
		/// The ID of the product to return. This is the REST ID used in the products service. Either lineItemId or productId is required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productId")]
		public string ProductId { get; set; }
		
		/// <summary>
		/// The quantity to return and refund.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public System.Nullable<System.UInt32> Quantity { get; set; }
		
		/// <summary>
		/// The reason for the return. Acceptable values are: - "`damagedOrUsed`" - "`missingComponent`" - "`notEligible`" - "`other`" - "`outOfReturnWindow`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		/// <summary>
		/// The explanation of the reason.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reasonText")]
		public string ReasonText { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrdersRejectReturnLineItemResponse
	{
		
		/// <summary>
		/// The status of the execution. Acceptable values are: - "`duplicate`" - "`executed`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="executionStatus")]
		public string ExecutionStatus { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "`content#ordersRejectReturnLineItemResponse`".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrdersReturnRefundLineItemRequest
	{
		
		/// <summary>
		/// The ID of the line item to return. Either lineItemId or productId is required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lineItemId")]
		public string LineItemId { get; set; }
		
		/// <summary>
		/// The ID of the operation. Unique across all operations for a given order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operationId")]
		public string OperationId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="priceAmount")]
		public Price PriceAmount { get; set; }
		
		/// <summary>
		/// The ID of the product to return. This is the REST ID used in the products service. Either lineItemId or productId is required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productId")]
		public string ProductId { get; set; }
		
		/// <summary>
		/// The quantity to return and refund. Quantity is required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public System.Nullable<System.UInt32> Quantity { get; set; }
		
		/// <summary>
		/// The reason for the return. Acceptable values are: - "`customerDiscretionaryReturn`" - "`customerInitiatedMerchantCancel`" - "`deliveredTooLate`" - "`expiredItem`" - "`invalidCoupon`" - "`malformedShippingAddress`" - "`other`" - "`productArrivedDamaged`" - "`productNotAsDescribed`" - "`qualityNotAsExpected`" - "`undeliverableShippingAddress`" - "`unsupportedPoBoxAddress`" - "`wrongProductShipped`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		/// <summary>
		/// The explanation of the reason.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reasonText")]
		public string ReasonText { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="taxAmount")]
		public Price TaxAmount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrdersReturnRefundLineItemResponse
	{
		
		/// <summary>
		/// The status of the execution. Acceptable values are: - "`duplicate`" - "`executed`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="executionStatus")]
		public string ExecutionStatus { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "`content#ordersReturnRefundLineItemResponse`".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrdersSetLineItemMetadataRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="annotations")]
		public OrderMerchantProvidedAnnotation[] Annotations { get; set; }
		
		/// <summary>
		/// The ID of the line item to set metadata. Either lineItemId or productId is required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lineItemId")]
		public string LineItemId { get; set; }
		
		/// <summary>
		/// The ID of the operation. Unique across all operations for a given order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operationId")]
		public string OperationId { get; set; }
		
		/// <summary>
		/// The ID of the product to set metadata. This is the REST ID used in the products service. Either lineItemId or productId is required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productId")]
		public string ProductId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrdersSetLineItemMetadataResponse
	{
		
		/// <summary>
		/// The status of the execution. Acceptable values are: - "`duplicate`" - "`executed`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="executionStatus")]
		public string ExecutionStatus { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "`content#ordersSetLineItemMetadataResponse`".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrdersShipLineItemsRequest
	{
		
		/// <summary>
		/// Line items to ship.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lineItems")]
		public OrderShipmentLineItemShipment[] LineItems { get; set; }
		
		/// <summary>
		/// The ID of the operation. Unique across all operations for a given order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operationId")]
		public string OperationId { get; set; }
		
		/// <summary>
		/// ID of the shipment group. Required for orders that use the orderinvoices service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shipmentGroupId")]
		public string ShipmentGroupId { get; set; }
		
		/// <summary>
		/// Shipment information. This field is repeated because a single line item can be shipped in several packages (and have several tracking IDs).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shipmentInfos")]
		public OrdersCustomBatchRequestEntryShipLineItemsShipmentInfo[] ShipmentInfos { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrdersShipLineItemsResponse
	{
		
		/// <summary>
		/// The status of the execution. Acceptable values are: - "`duplicate`" - "`executed`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="executionStatus")]
		public string ExecutionStatus { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "`content#ordersShipLineItemsResponse`".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrdersUpdateLineItemShippingDetailsRequest
	{
		
		/// <summary>
		/// Updated delivery by date, in ISO 8601 format. If not specified only ship by date is updated. Provided date should be within 1 year timeframe and can't be a date in the past.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deliverByDate")]
		public string DeliverByDate { get; set; }
		
		/// <summary>
		/// The ID of the line item to set metadata. Either lineItemId or productId is required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lineItemId")]
		public string LineItemId { get; set; }
		
		/// <summary>
		/// The ID of the operation. Unique across all operations for a given order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operationId")]
		public string OperationId { get; set; }
		
		/// <summary>
		/// The ID of the product to set metadata. This is the REST ID used in the products service. Either lineItemId or productId is required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productId")]
		public string ProductId { get; set; }
		
		/// <summary>
		/// Updated ship by date, in ISO 8601 format. If not specified only deliver by date is updated. Provided date should be within 1 year timeframe and can't be a date in the past.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shipByDate")]
		public string ShipByDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrdersUpdateLineItemShippingDetailsResponse
	{
		
		/// <summary>
		/// The status of the execution. Acceptable values are: - "`duplicate`" - "`executed`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="executionStatus")]
		public string ExecutionStatus { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "`content#ordersUpdateLineItemShippingDetailsResponse`".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrdersUpdateMerchantOrderIdRequest
	{
		
		/// <summary>
		/// The merchant order id to be assigned to the order. Must be unique per merchant.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="merchantOrderId")]
		public string MerchantOrderId { get; set; }
		
		/// <summary>
		/// The ID of the operation. Unique across all operations for a given order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operationId")]
		public string OperationId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrdersUpdateMerchantOrderIdResponse
	{
		
		/// <summary>
		/// The status of the execution. Acceptable values are: - "`duplicate`" - "`executed`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="executionStatus")]
		public string ExecutionStatus { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "`content#ordersUpdateMerchantOrderIdResponse`".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrdersUpdateShipmentRequest
	{
		
		/// <summary>
		/// The carrier handling the shipment. Not updated if missing. See `shipments[].carrier` in the Orders resource representation for a list of acceptable values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="carrier")]
		public string Carrier { get; set; }
		
		/// <summary>
		/// Date on which the shipment has been delivered, in ISO 8601 format. Optional and can be provided only if `status` is `delivered`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deliveryDate")]
		public string DeliveryDate { get; set; }
		
		/// <summary>
		/// Date after which the pickup will expire, in ISO 8601 format. Required only when order is buy-online-pickup-in-store(BOPIS) and `status` is `ready for pickup`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastPickupDate")]
		public string LastPickupDate { get; set; }
		
		/// <summary>
		/// The ID of the operation. Unique across all operations for a given order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operationId")]
		public string OperationId { get; set; }
		
		/// <summary>
		/// Date on which the shipment has been ready for pickup, in ISO 8601 format. Optional and can be provided only if `status` is `ready for pickup`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="readyPickupDate")]
		public string ReadyPickupDate { get; set; }
		
		/// <summary>
		/// ScheduledDeliveryDetails used to update the scheduled delivery order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scheduledDeliveryDetails")]
		public OrdersCustomBatchRequestEntryUpdateShipmentScheduledDeliveryDetails ScheduledDeliveryDetails { get; set; }
		
		/// <summary>
		/// The ID of the shipment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shipmentId")]
		public string ShipmentId { get; set; }
		
		/// <summary>
		/// New status for the shipment. Not updated if missing. Acceptable values are: - "`delivered`" - "`undeliverable`" - "`readyForPickup`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// The tracking ID for the shipment. Not updated if missing.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trackingId")]
		public string TrackingId { get; set; }
		
		/// <summary>
		/// Date on which the shipment has been undeliverable, in ISO 8601 format. Optional and can be provided only if `status` is `undeliverable`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="undeliveredDate")]
		public string UndeliveredDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrdersUpdateShipmentResponse
	{
		
		/// <summary>
		/// The status of the execution. Acceptable values are: - "`duplicate`" - "`executed`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="executionStatus")]
		public string ExecutionStatus { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "`content#ordersUpdateShipmentResponse`".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	/// <summary>
	/// Request message for the PauseProgram method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PauseBuyOnGoogleProgramRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PickupCarrierService
	{
		
		/// <summary>
		/// The name of the pickup carrier (for example, `"UPS"`). Required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="carrierName")]
		public string CarrierName { get; set; }
		
		/// <summary>
		/// The name of the pickup service (for example, `"Access point"`). Required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceName")]
		public string ServiceName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PickupServicesPickupService
	{
		
		/// <summary>
		/// The name of the carrier (for example, `"UPS"`). Always present.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="carrierName")]
		public string CarrierName { get; set; }
		
		/// <summary>
		/// The CLDR country code of the carrier (for example, "US"). Always present.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// The name of the pickup service (for example, `"Access point"`). Always present.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceName")]
		public string ServiceName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PosCustomBatchRequest
	{
		
		/// <summary>
		/// The request entries to be processed in the batch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entries")]
		public PosCustomBatchRequestEntry[] Entries { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PosCustomBatchRequestEntry
	{
		
		/// <summary>
		/// An entry ID, unique within the batch request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="batchId")]
		public System.Nullable<System.UInt32> BatchId { get; set; }
		
		/// <summary>
		/// The absolute quantity of an item available at the given store.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inventory")]
		public PosInventory Inventory { get; set; }
		
		/// <summary>
		/// The ID of the POS data provider.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="merchantId")]
		public string MerchantId { get; set; }
		
		/// <summary>
		/// The method of the batch entry. Acceptable values are: - "`delete`" - "`get`" - "`insert`" - "`inventory`" - "`sale`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="method")]
		public string Method { get; set; }
		
		/// <summary>
		/// The change of the available quantity of an item at the given store.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sale")]
		public PosSale Sale { get; set; }
		
		/// <summary>
		/// Store resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="store")]
		public PosStore Store { get; set; }
		
		/// <summary>
		/// The store code. This should be set only if the method is `delete` or `get`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storeCode")]
		public string StoreCode { get; set; }
		
		/// <summary>
		/// The ID of the account for which to get/submit data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetMerchantId")]
		public string TargetMerchantId { get; set; }
	}
	
	/// <summary>
	/// The absolute quantity of an item available at the given store.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PosInventory
	{
		
		/// <summary>
		/// Required. The two-letter ISO 639-1 language code for the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentLanguage")]
		public string ContentLanguage { get; set; }
		
		/// <summary>
		/// Global Trade Item Number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gtin")]
		public string Gtin { get; set; }
		
		/// <summary>
		/// Required. A unique identifier for the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemId")]
		public string ItemId { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "`content#posInventory`"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Optional. Supported pickup method for this offer. Unless the value is "not supported", this field must be submitted together with `pickupSla`. For accepted attribute values, see the [local product inventory feed specification](https://support.google.com/merchants/answer/3061342).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pickupMethod")]
		public string PickupMethod { get; set; }
		
		/// <summary>
		/// Optional. Expected date that an order will be ready for pickup relative to the order date. Must be submitted together with `pickupMethod`. For accepted attribute values, see the [local product inventory feed specification](https://support.google.com/merchants/answer/3061342).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pickupSla")]
		public string PickupSla { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="price")]
		public Price Price { get; set; }
		
		/// <summary>
		/// Required. The available quantity of the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public string Quantity { get; set; }
		
		/// <summary>
		/// Required. The identifier of the merchant's store. Either a `storeCode` inserted through the API or the code of the store in a Business Profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storeCode")]
		public string StoreCode { get; set; }
		
		/// <summary>
		/// Required. The CLDR territory code for the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetCountry")]
		public string TargetCountry { get; set; }
		
		/// <summary>
		/// Required. The inventory timestamp, in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public string Timestamp { get; set; }
	}
	
	/// <summary>
	/// The change of the available quantity of an item at the given store.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PosSale
	{
		
		/// <summary>
		/// Required. The two-letter ISO 639-1 language code for the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentLanguage")]
		public string ContentLanguage { get; set; }
		
		/// <summary>
		/// Global Trade Item Number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gtin")]
		public string Gtin { get; set; }
		
		/// <summary>
		/// Required. A unique identifier for the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemId")]
		public string ItemId { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "`content#posSale`"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="price")]
		public Price Price { get; set; }
		
		/// <summary>
		/// Required. The relative change of the available quantity. Negative for items returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public string Quantity { get; set; }
		
		/// <summary>
		/// A unique ID to group items from the same sale event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="saleId")]
		public string SaleId { get; set; }
		
		/// <summary>
		/// Required. The identifier of the merchant's store. Either a `storeCode` inserted through the API or the code of the store in a Business Profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storeCode")]
		public string StoreCode { get; set; }
		
		/// <summary>
		/// Required. The CLDR territory code for the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetCountry")]
		public string TargetCountry { get; set; }
		
		/// <summary>
		/// Required. The inventory timestamp, in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public string Timestamp { get; set; }
	}
	
	/// <summary>
	/// Store resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PosStore
	{
		
		/// <summary>
		/// The business type of the store.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gcidCategory")]
		public string[] GcidCategory { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "`content#posStore`"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Output only. The matching status of POS store and Google Business Profile store. Possible values are: - "`matched`": The POS store is successfully matched with the Google Business Profile store. - "`failed`": The POS store is not matched with the Google Business Profile store. See matching_status_hint for further details. Note that there is up to 48 hours propagation delay for changes in Merchant Center (e.g. creation of new account, accounts linking) and Google Business Profile (e.g. store address update) which may affect the matching status. In such cases, after a delay call [pos.list](https://developers.google.com/shopping-content/reference/rest/v2.1/pos/list) to retrieve the updated matching status. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="matchingStatus")]
		public string MatchingStatus { get; set; }
		
		/// <summary>
		/// Output only. The hint of why the matching has failed. This is only set when matching_status=failed. Possible values are: - "`linked-store-not-found`": There aren't any Google Business Profile stores available for matching. Connect your Merchant Center account with the Google Business Profile account. Or add a new Google Business Profile store corresponding to the POS store. - "`store-match-not-found`": The provided POS store couldn't be matched to any of the connected Google Business Profile stores. Merchant Center account is connected correctly and stores are available on Google Business Profile, but POS store location address does not match with Google Business Profile stores' addresses. Update POS store address or Google Business Profile store address to match correctly. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="matchingStatusHint")]
		public string MatchingStatusHint { get; set; }
		
		/// <summary>
		/// The store phone number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phoneNumber")]
		public string PhoneNumber { get; set; }
		
		/// <summary>
		/// The Google Place Id of the store location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="placeId")]
		public string PlaceId { get; set; }
		
		/// <summary>
		/// Required. The street address of the store.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storeAddress")]
		public string StoreAddress { get; set; }
		
		/// <summary>
		/// Required. A store identifier that is unique for the given merchant.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storeCode")]
		public string StoreCode { get; set; }
		
		/// <summary>
		/// The merchant or store name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storeName")]
		public string StoreName { get; set; }
		
		/// <summary>
		/// The website url for the store or merchant.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="websiteUrl")]
		public string WebsiteUrl { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PosCustomBatchResponse
	{
		
		/// <summary>
		/// The result of the execution of the batch requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entries")]
		public PosCustomBatchResponseEntry[] Entries { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "`content#posCustomBatchResponse`".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PosCustomBatchResponseEntry
	{
		
		/// <summary>
		/// The ID of the request entry to which this entry responds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="batchId")]
		public System.Nullable<System.UInt32> BatchId { get; set; }
		
		/// <summary>
		/// A list of errors returned by a failed batch entry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Errors Errors { get; set; }
		
		/// <summary>
		/// The absolute quantity of an item available at the given store.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inventory")]
		public PosInventory Inventory { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "`content#posCustomBatchResponseEntry`"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// The change of the available quantity of an item at the given store.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sale")]
		public PosSale Sale { get; set; }
		
		/// <summary>
		/// Store resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="store")]
		public PosStore Store { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PosInventoryRequest
	{
		
		/// <summary>
		/// Required. The two-letter ISO 639-1 language code for the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentLanguage")]
		public string ContentLanguage { get; set; }
		
		/// <summary>
		/// Global Trade Item Number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gtin")]
		public string Gtin { get; set; }
		
		/// <summary>
		/// Required. A unique identifier for the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemId")]
		public string ItemId { get; set; }
		
		/// <summary>
		/// Optional. Supported pickup method for this offer. Unless the value is "not supported", this field must be submitted together with `pickupSla`. For accepted attribute values, see the [local product inventory feed specification](https://support.google.com/merchants/answer/3061342).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pickupMethod")]
		public string PickupMethod { get; set; }
		
		/// <summary>
		/// Optional. Expected date that an order will be ready for pickup relative to the order date. Must be submitted together with `pickupMethod`. For accepted attribute values, see the [local product inventory feed specification](https://support.google.com/merchants/answer/3061342).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pickupSla")]
		public string PickupSla { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="price")]
		public Price Price { get; set; }
		
		/// <summary>
		/// Required. The available quantity of the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public string Quantity { get; set; }
		
		/// <summary>
		/// Required. The identifier of the merchant's store. Either a `storeCode` inserted through the API or the code of the store in a Business Profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storeCode")]
		public string StoreCode { get; set; }
		
		/// <summary>
		/// Required. The CLDR territory code for the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetCountry")]
		public string TargetCountry { get; set; }
		
		/// <summary>
		/// Required. The inventory timestamp, in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public string Timestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PosInventoryResponse
	{
		
		/// <summary>
		/// Required. The two-letter ISO 639-1 language code for the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentLanguage")]
		public string ContentLanguage { get; set; }
		
		/// <summary>
		/// Global Trade Item Number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gtin")]
		public string Gtin { get; set; }
		
		/// <summary>
		/// Required. A unique identifier for the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemId")]
		public string ItemId { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "`content#posInventoryResponse`".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Optional. Supported pickup method for this offer. Unless the value is "not supported", this field must be submitted together with `pickupSla`. For accepted attribute values, see the [local product inventory feed specification](https://support.google.com/merchants/answer/3061342).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pickupMethod")]
		public string PickupMethod { get; set; }
		
		/// <summary>
		/// Optional. Expected date that an order will be ready for pickup relative to the order date. Must be submitted together with `pickupMethod`. For accepted attribute values, see the [local product inventory feed specification](https://support.google.com/merchants/answer/3061342).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pickupSla")]
		public string PickupSla { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="price")]
		public Price Price { get; set; }
		
		/// <summary>
		/// Required. The available quantity of the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public string Quantity { get; set; }
		
		/// <summary>
		/// Required. The identifier of the merchant's store. Either a `storeCode` inserted through the API or the code of the store in a Business Profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storeCode")]
		public string StoreCode { get; set; }
		
		/// <summary>
		/// Required. The CLDR territory code for the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetCountry")]
		public string TargetCountry { get; set; }
		
		/// <summary>
		/// Required. The inventory timestamp, in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public string Timestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PosListResponse
	{
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "`content#posListResponse`".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resources")]
		public PosStore[] Resources { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PosSaleRequest
	{
		
		/// <summary>
		/// Required. The two-letter ISO 639-1 language code for the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentLanguage")]
		public string ContentLanguage { get; set; }
		
		/// <summary>
		/// Global Trade Item Number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gtin")]
		public string Gtin { get; set; }
		
		/// <summary>
		/// Required. A unique identifier for the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemId")]
		public string ItemId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="price")]
		public Price Price { get; set; }
		
		/// <summary>
		/// Required. The relative change of the available quantity. Negative for items returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public string Quantity { get; set; }
		
		/// <summary>
		/// A unique ID to group items from the same sale event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="saleId")]
		public string SaleId { get; set; }
		
		/// <summary>
		/// Required. The identifier of the merchant's store. Either a `storeCode` inserted through the API or the code of the store in a Business Profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storeCode")]
		public string StoreCode { get; set; }
		
		/// <summary>
		/// Required. The CLDR territory code for the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetCountry")]
		public string TargetCountry { get; set; }
		
		/// <summary>
		/// Required. The inventory timestamp, in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public string Timestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PosSaleResponse
	{
		
		/// <summary>
		/// Required. The two-letter ISO 639-1 language code for the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentLanguage")]
		public string ContentLanguage { get; set; }
		
		/// <summary>
		/// Global Trade Item Number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gtin")]
		public string Gtin { get; set; }
		
		/// <summary>
		/// Required. A unique identifier for the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemId")]
		public string ItemId { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "`content#posSaleResponse`".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="price")]
		public Price Price { get; set; }
		
		/// <summary>
		/// Required. The relative change of the available quantity. Negative for items returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public string Quantity { get; set; }
		
		/// <summary>
		/// A unique ID to group items from the same sale event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="saleId")]
		public string SaleId { get; set; }
		
		/// <summary>
		/// Required. The identifier of the merchant's store. Either a `storeCode` inserted through the API or the code of the store in a Business Profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storeCode")]
		public string StoreCode { get; set; }
		
		/// <summary>
		/// Required. The CLDR territory code for the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetCountry")]
		public string TargetCountry { get; set; }
		
		/// <summary>
		/// Required. The inventory timestamp, in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public string Timestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PostalCodeGroup
	{
		
		/// <summary>
		/// The CLDR territory code of the country the postal code group applies to. Required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// The name of the postal code group, referred to in headers. Required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// A range of postal codes. Required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postalCodeRanges")]
		public PostalCodeRange[] PostalCodeRanges { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PostalCodeRange
	{
		
		/// <summary>
		/// A postal code or a pattern of the form `prefix*` denoting the inclusive lower bound of the range defining the area. Examples values: `"94108"`, `"9410*"`, `"9*"`. Required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postalCodeRangeBegin")]
		public string PostalCodeRangeBegin { get; set; }
		
		/// <summary>
		/// A postal code or a pattern of the form `prefix*` denoting the inclusive upper bound of the range defining the area. It must have the same length as `postalCodeRangeBegin`: if `postalCodeRangeBegin` is a postal code then `postalCodeRangeEnd` must be a postal code too; if `postalCodeRangeBegin` is a pattern then `postalCodeRangeEnd` must be a pattern with the same prefix length. Optional: if not set, then the area is defined as being all the postal codes matching `postalCodeRangeBegin`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postalCodeRangeEnd")]
		public string PostalCodeRangeEnd { get; set; }
	}
	
	/// <summary>
	/// Price competitiveness fields requested by the merchant in the query. Field values are only set if the merchant queries `PriceCompetitivenessProductView`. https://support.google.com/merchants/answer/9626903
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PriceCompetitiveness
	{
		
		/// <summary>
		/// The price benchmark currency (ISO 4217 code).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="benchmarkPriceCurrencyCode")]
		public string BenchmarkPriceCurrencyCode { get; set; }
		
		/// <summary>
		/// The latest available price benchmark in micros (1 millionth of a standard unit, 1 USD = 1000000 micros) for the product's catalog in the benchmark country.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="benchmarkPriceMicros")]
		public string BenchmarkPriceMicros { get; set; }
		
		/// <summary>
		/// The country of the price benchmark (ISO 3166 code).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="countryCode")]
		public string CountryCode { get; set; }
	}
	
	/// <summary>
	/// Price insights fields requested by the merchant in the query. Field values are only set if the merchant queries `PriceInsightsProductView`. https://support.google.com/merchants/answer/11916926
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PriceInsights
	{
		
		/// <summary>
		/// The predicted change in clicks as a fraction after introducing the suggested price compared to current active price. For example, 0.05 is a 5% predicted increase in clicks.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="predictedClicksChangeFraction")]
		public System.Nullable<System.Double> PredictedClicksChangeFraction { get; set; }
		
		/// <summary>
		/// The predicted change in conversions as a fraction after introducing the suggested price compared to current active price. For example, 0.05 is a 5% predicted increase in conversions).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="predictedConversionsChangeFraction")]
		public System.Nullable<System.Double> PredictedConversionsChangeFraction { get; set; }
		
		/// <summary>
		/// *Deprecated*: This field is no longer supported and will start returning 0. The predicted change in gross profit as a fraction after introducing the suggested price compared to current active price. For example, 0.05 is a 5% predicted increase in gross profit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="predictedGrossProfitChangeFraction")]
		public System.Nullable<System.Double> PredictedGrossProfitChangeFraction { get; set; }
		
		/// <summary>
		/// The predicted change in impressions as a fraction after introducing the suggested price compared to current active price. For example, 0.05 is a 5% predicted increase in impressions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="predictedImpressionsChangeFraction")]
		public System.Nullable<System.Double> PredictedImpressionsChangeFraction { get; set; }
		
		/// <summary>
		/// *Deprecated*: This field is no longer supported and will start returning USD for all requests. The predicted monthly gross profit change currency (ISO 4217 code).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="predictedMonthlyGrossProfitChangeCurrencyCode")]
		public string PredictedMonthlyGrossProfitChangeCurrencyCode { get; set; }
		
		/// <summary>
		/// *Deprecated*: This field is no longer supported and will start returning 0. The predicted change in gross profit in micros (1 millionth of a standard unit, 1 USD = 1000000 micros) after introducing the suggested price for a month compared to current active price.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="predictedMonthlyGrossProfitChangeMicros")]
		public string PredictedMonthlyGrossProfitChangeMicros { get; set; }
		
		/// <summary>
		/// The suggested price currency (ISO 4217 code).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suggestedPriceCurrencyCode")]
		public string SuggestedPriceCurrencyCode { get; set; }
		
		/// <summary>
		/// The latest suggested price in micros (1 millionth of a standard unit, 1 USD = 1000000 micros) for the product.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suggestedPriceMicros")]
		public string SuggestedPriceMicros { get; set; }
	}
	
	/// <summary>
	///  Required product attributes are primarily defined by the product data specification. See the Product Data Specification Help Center article for information. Product data. After inserting, updating, or deleting a product, it may take several minutes before changes take effect.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Product
	{
		
		/// <summary>
		/// Additional URLs of images of the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additionalImageLinks")]
		public string[] AdditionalImageLinks { get; set; }
		
		/// <summary>
		/// Additional cut of the item. Used together with size_type to represent combined size types for apparel items.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additionalSizeType")]
		public string AdditionalSizeType { get; set; }
		
		/// <summary>
		/// Used to group items in an arbitrary way. Only for CPA%, discouraged otherwise.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adsGrouping")]
		public string AdsGrouping { get; set; }
		
		/// <summary>
		/// Similar to ads_grouping, but only works on CPC.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adsLabels")]
		public string[] AdsLabels { get; set; }
		
		/// <summary>
		/// Allows advertisers to override the item URL when the product is shown within the context of Product Ads.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adsRedirect")]
		public string AdsRedirect { get; set; }
		
		/// <summary>
		/// Should be set to true if the item is targeted towards adults.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adult")]
		public System.Nullable<System.Boolean> Adult { get; set; }
		
		/// <summary>
		/// Target age group of the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ageGroup")]
		public string AgeGroup { get; set; }
		
		/// <summary>
		/// Availability status of the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availability")]
		public string Availability { get; set; }
		
		/// <summary>
		/// The day a pre-ordered product becomes available for delivery, in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availabilityDate")]
		public string AvailabilityDate { get; set; }
		
		/// <summary>
		/// Brand of the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="brand")]
		public string Brand { get; set; }
		
		/// <summary>
		/// URL for the canonical version of your item's landing page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canonicalLink")]
		public string CanonicalLink { get; set; }
		
		/// <summary>
		/// Product [certification](https://support.google.com/merchants/answer/13528839), introduced for EU energy efficiency labeling compliance using the [EU EPREL](https://eprel.ec.europa.eu/screen/home) database.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="certifications")]
		public ProductCertification[] Certifications { get; set; }
		
		/// <summary>
		/// Required. The item's channel (online or local). Acceptable values are: - "`local`" - "`online`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channel")]
		public string Channel { get; set; }
		
		/// <summary>
		/// Extra fields to export to the Cloud Retail program.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cloudExportAdditionalProperties")]
		public CloudExportAdditionalProperties[] CloudExportAdditionalProperties { get; set; }
		
		/// <summary>
		/// Color of the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="color")]
		public string Color { get; set; }
		
		/// <summary>
		/// Condition or state of the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="condition")]
		public string Condition { get; set; }
		
		/// <summary>
		/// Required. The two-letter ISO 639-1 language code for the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentLanguage")]
		public string ContentLanguage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="costOfGoodsSold")]
		public Price CostOfGoodsSold { get; set; }
		
		/// <summary>
		/// A list of custom (merchant-provided) attributes. It can also be used for submitting any attribute of the feed specification in its generic form (for example, `{ "name": "size type", "value": "regular" }`). This is useful for submitting attributes not explicitly exposed by the API, such as additional attributes used for Buy on Google (formerly known as Shopping Actions).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customAttributes")]
		public CustomAttribute[] CustomAttributes { get; set; }
		
		/// <summary>
		/// Custom label 0 for custom grouping of items in a Shopping campaign.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customLabel0")]
		public string CustomLabel0 { get; set; }
		
		/// <summary>
		/// Custom label 1 for custom grouping of items in a Shopping campaign.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customLabel1")]
		public string CustomLabel1 { get; set; }
		
		/// <summary>
		/// Custom label 2 for custom grouping of items in a Shopping campaign.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customLabel2")]
		public string CustomLabel2 { get; set; }
		
		/// <summary>
		/// Custom label 3 for custom grouping of items in a Shopping campaign.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customLabel3")]
		public string CustomLabel3 { get; set; }
		
		/// <summary>
		/// Custom label 4 for custom grouping of items in a Shopping campaign.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customLabel4")]
		public string CustomLabel4 { get; set; }
		
		/// <summary>
		/// Description of the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The date time when an offer becomes visible in search results across Google’s YouTube surfaces, in [ISO 8601](http://en.wikipedia.org/wiki/ISO_8601) format. See [Disclosure date](https://support.google.com/merchants/answer/13034208) for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disclosureDate")]
		public string DisclosureDate { get; set; }
		
		/// <summary>
		/// An identifier for an item for dynamic remarketing campaigns.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayAdsId")]
		public string DisplayAdsId { get; set; }
		
		/// <summary>
		/// URL directly to your item's landing page for dynamic remarketing campaigns.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayAdsLink")]
		public string DisplayAdsLink { get; set; }
		
		/// <summary>
		/// Advertiser-specified recommendations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayAdsSimilarIds")]
		public string[] DisplayAdsSimilarIds { get; set; }
		
		/// <summary>
		/// Title of an item for dynamic remarketing campaigns.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayAdsTitle")]
		public string DisplayAdsTitle { get; set; }
		
		/// <summary>
		/// Offer margin for dynamic remarketing campaigns.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayAdsValue")]
		public System.Nullable<System.Double> DisplayAdsValue { get; set; }
		
		/// <summary>
		/// The energy efficiency class as defined in EU directive 2010/30/EU.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="energyEfficiencyClass")]
		public string EnergyEfficiencyClass { get; set; }
		
		/// <summary>
		/// The list of destinations to exclude for this target (corresponds to cleared check boxes in Merchant Center). Products that are excluded from all destinations for more than 7 days are automatically deleted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="excludedDestinations")]
		public string[] ExcludedDestinations { get; set; }
		
		/// <summary>
		/// Date on which the item should expire, as specified upon insertion, in ISO 8601 format. The actual expiration date in Google Shopping is exposed in `productstatuses` as `googleExpirationDate` and might be earlier if `expirationDate` is too far in the future.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expirationDate")]
		public string ExpirationDate { get; set; }
		
		/// <summary>
		/// Required for multi-seller accounts. Use this attribute if you're a marketplace uploading products for various sellers to your multi-seller account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="externalSellerId")]
		public string ExternalSellerId { get; set; }
		
		/// <summary>
		/// Feed label for the item. Either `targetCountry` or `feedLabel` is required. Must be less than or equal to 20 uppercase letters (A-Z), numbers (0-9), and dashes (-).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="feedLabel")]
		public string FeedLabel { get; set; }
		
		/// <summary>
		/// Target gender of the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gender")]
		public string Gender { get; set; }
		
		/// <summary>
		/// Google's category of the item (see [Google product taxonomy](https://support.google.com/merchants/answer/1705911)). When querying products, this field will contain the user provided value. There is currently no way to get back the auto assigned google product categories through the API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="googleProductCategory")]
		public string GoogleProductCategory { get; set; }
		
		/// <summary>
		/// Global Trade Item Number (GTIN) of the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gtin")]
		public string Gtin { get; set; }
		
		/// <summary>
		/// The REST ID of the product. Content API methods that operate on products take this as their `productId` parameter. The REST ID for a product has one of the 2 forms channel:contentLanguage: targetCountry: offerId or channel:contentLanguage:feedLabel: offerId.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// False when the item does not have unique product identifiers appropriate to its category, such as GTIN, MPN, and brand. Required according to the Unique Product Identifier Rules for all target countries except for Canada.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="identifierExists")]
		public System.Nullable<System.Boolean> IdentifierExists { get; set; }
		
		/// <summary>
		/// URL of an image of the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageLink")]
		public string ImageLink { get; set; }
		
		/// <summary>
		/// The list of destinations to include for this target (corresponds to checked check boxes in Merchant Center). Default destinations are always included unless provided in `excludedDestinations`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="includedDestinations")]
		public string[] IncludedDestinations { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="installment")]
		public Installment Installment { get; set; }
		
		/// <summary>
		/// Whether the item is a merchant-defined bundle. A bundle is a custom grouping of different products sold by a merchant for a single price.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isBundle")]
		public System.Nullable<System.Boolean> IsBundle { get; set; }
		
		/// <summary>
		/// Shared identifier for all variants of the same product.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemGroupId")]
		public string ItemGroupId { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "`content#product`"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Additional URLs of lifestyle images of the item. Used to explicitly identify images that showcase your item in a real-world context. See the Help Center article for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lifestyleImageLinks")]
		public string[] LifestyleImageLinks { get; set; }
		
		/// <summary>
		/// URL directly linking to your item's page on your website.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="link")]
		public string Link { get; set; }
		
		/// <summary>
		/// URL template for merchant hosted local storefront.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="linkTemplate")]
		public string LinkTemplate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="loyaltyPoints")]
		public LoyaltyPoints LoyaltyPoints { get; set; }
		
		/// <summary>
		/// The material of which the item is made.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="material")]
		public string Material { get; set; }
		
		/// <summary>
		/// The energy efficiency class as defined in EU directive 2010/30/EU.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxEnergyEfficiencyClass")]
		public string MaxEnergyEfficiencyClass { get; set; }
		
		/// <summary>
		/// Maximal product handling time (in business days).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxHandlingTime")]
		public string MaxHandlingTime { get; set; }
		
		/// <summary>
		/// The energy efficiency class as defined in EU directive 2010/30/EU.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minEnergyEfficiencyClass")]
		public string MinEnergyEfficiencyClass { get; set; }
		
		/// <summary>
		/// Minimal product handling time (in business days).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minHandlingTime")]
		public string MinHandlingTime { get; set; }
		
		/// <summary>
		/// URL for the mobile-optimized version of your item's landing page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mobileLink")]
		public string MobileLink { get; set; }
		
		/// <summary>
		/// URL template for merchant hosted local storefront optimized for mobile devices.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mobileLinkTemplate")]
		public string MobileLinkTemplate { get; set; }
		
		/// <summary>
		/// Manufacturer Part Number (MPN) of the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mpn")]
		public string Mpn { get; set; }
		
		/// <summary>
		/// The number of identical products in a merchant-defined multipack.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="multipack")]
		public string Multipack { get; set; }
		
		/// <summary>
		/// Required. A unique identifier for the item. Leading and trailing whitespaces are stripped and multiple whitespaces are replaced by a single whitespace upon submission. Only valid unicode characters are accepted. See the products feed specification for details. *Note:* Content API methods that operate on products take the REST ID of the product, *not* this identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offerId")]
		public string OfferId { get; set; }
		
		/// <summary>
		/// The item's pattern (for example, polka dots).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pattern")]
		public string Pattern { get; set; }
		
		/// <summary>
		/// Publication of this item should be temporarily paused. Acceptable values are: - "`ads`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pause")]
		public string Pause { get; set; }
		
		/// <summary>
		/// The pick up option for the item. Acceptable values are: - "`buy`" - "`reserve`" - "`ship to store`" - "`not supported`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pickupMethod")]
		public string PickupMethod { get; set; }
		
		/// <summary>
		/// Item store pickup timeline. Acceptable values are: - "`same day`" - "`next day`" - "`2-day`" - "`3-day`" - "`4-day`" - "`5-day`" - "`6-day`" - "`7-day`" - "`multi-week`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pickupSla")]
		public string PickupSla { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="price")]
		public Price Price { get; set; }
		
		/// <summary>
		/// Technical specification or additional product details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productDetails")]
		public ProductProductDetail[] ProductDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="productHeight")]
		public ProductDimension ProductHeight { get; set; }
		
		/// <summary>
		/// Bullet points describing the most relevant highlights of a product.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productHighlights")]
		public string[] ProductHighlights { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="productLength")]
		public ProductDimension ProductLength { get; set; }
		
		/// <summary>
		/// Categories of the item (formatted as in product data specification).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productTypes")]
		public string[] ProductTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="productWeight")]
		public ProductWeight ProductWeight { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="productWidth")]
		public ProductDimension ProductWidth { get; set; }
		
		/// <summary>
		/// The unique ID of a promotion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="promotionIds")]
		public string[] PromotionIds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="salePrice")]
		public Price SalePrice { get; set; }
		
		/// <summary>
		/// Date range during which the item is on sale (see product data specification ).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="salePriceEffectiveDate")]
		public string SalePriceEffectiveDate { get; set; }
		
		/// <summary>
		/// The quantity of the product that is available for selling on Google. Supported only for online products.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sellOnGoogleQuantity")]
		public string SellOnGoogleQuantity { get; set; }
		
		/// <summary>
		/// Shipping rules.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shipping")]
		public ProductShipping[] Shipping { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="shippingHeight")]
		public ProductShippingDimension ShippingHeight { get; set; }
		
		/// <summary>
		/// The shipping label of the product, used to group product in account-level shipping rules.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shippingLabel")]
		public string ShippingLabel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="shippingLength")]
		public ProductShippingDimension ShippingLength { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="shippingWeight")]
		public ProductShippingWeight ShippingWeight { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="shippingWidth")]
		public ProductShippingDimension ShippingWidth { get; set; }
		
		/// <summary>
		/// List of country codes (ISO 3166-1 alpha-2) to exclude the offer from Shopping Ads destination. Countries from this list are removed from countries configured in MC feed settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shoppingAdsExcludedCountries")]
		public string[] ShoppingAdsExcludedCountries { get; set; }
		
		/// <summary>
		/// System in which the size is specified. Recommended for apparel items.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sizeSystem")]
		public string SizeSystem { get; set; }
		
		/// <summary>
		/// The cut of the item. Recommended for apparel items.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sizeType")]
		public string SizeType { get; set; }
		
		/// <summary>
		/// Size of the item. Only one value is allowed. For variants with different sizes, insert a separate product for each size with the same `itemGroupId` value (see size definition).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sizes")]
		public string[] Sizes { get; set; }
		
		/// <summary>
		/// The source of the offer, that is, how the offer was created. Acceptable values are: - "`api`" - "`crawl`" - "`feed`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string Source { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subscriptionCost")]
		public ProductSubscriptionCost SubscriptionCost { get; set; }
		
		/// <summary>
		/// Required. The CLDR territory code for the item's country of sale.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetCountry")]
		public string TargetCountry { get; set; }
		
		/// <summary>
		/// The tax category of the product, used to configure detailed tax nexus in account-level tax settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taxCategory")]
		public string TaxCategory { get; set; }
		
		/// <summary>
		/// Tax information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taxes")]
		public ProductTax[] Taxes { get; set; }
		
		/// <summary>
		/// Title of the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// The transit time label of the product, used to group product in account-level transit time tables.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transitTimeLabel")]
		public string TransitTimeLabel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unitPricingBaseMeasure")]
		public ProductUnitPricingBaseMeasure UnitPricingBaseMeasure { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unitPricingMeasure")]
		public ProductUnitPricingMeasure UnitPricingMeasure { get; set; }
		
		/// <summary>
		/// URL of the 3D model of the item to provide more visuals.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="virtualModelLink")]
		public string VirtualModelLink { get; set; }
	}
	
	/// <summary>
	/// Product [certification](https://support.google.com/merchants/answer/13528839), introduced for EU energy efficiency labeling compliance using the [EU EPREL](https://eprel.ec.europa.eu/screen/home) database.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProductCertification
	{
		
		/// <summary>
		/// The certification authority, for example "European_Commission". Maximum length is 2000 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="certificationAuthority")]
		public string CertificationAuthority { get; set; }
		
		/// <summary>
		/// The certification code, for eaxample "123456". Maximum length is 2000 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="certificationCode")]
		public string CertificationCode { get; set; }
		
		/// <summary>
		/// The name of the certification, for example "EPREL". Maximum length is 2000 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="certificationName")]
		public string CertificationName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProductProductDetail
	{
		
		/// <summary>
		/// The name of the product detail.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attributeName")]
		public string AttributeName { get; set; }
		
		/// <summary>
		/// The value of the product detail.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attributeValue")]
		public string AttributeValue { get; set; }
		
		/// <summary>
		/// The section header used to group a set of product details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sectionName")]
		public string SectionName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProductDimension
	{
		
		/// <summary>
		/// Required. The length units. Acceptable values are: - "`in`" - "`cm`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public string Unit { get; set; }
		
		/// <summary>
		/// Required. The length value represented as a number. The value can have a maximum precision of four decimal places.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Double> Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProductWeight
	{
		
		/// <summary>
		/// Required. The weight unit. Acceptable values are: - "`g`" - "`kg`" - "`oz`" - "`lb`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public string Unit { get; set; }
		
		/// <summary>
		/// Required. The weight represented as a number. The weight can have a maximum precision of four decimal places.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Double> Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProductShipping
	{
		
		/// <summary>
		/// The CLDR territory code of the country to which an item will ship.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// The location where the shipping is applicable, represented by a location group name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locationGroupName")]
		public string LocationGroupName { get; set; }
		
		/// <summary>
		/// The numeric ID of a location that the shipping rate applies to as defined in the Google Ads API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locationId")]
		public string LocationId { get; set; }
		
		/// <summary>
		/// Maximum handling time (inclusive) between when the order is received and shipped in business days. 0 means that the order is shipped on the same day as it's received if it happens before the cut-off time. Both maxHandlingTime and maxTransitTime are required if providing shipping speeds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxHandlingTime")]
		public string MaxHandlingTime { get; set; }
		
		/// <summary>
		/// Maximum transit time (inclusive) between when the order has shipped and when it's delivered in business days. 0 means that the order is delivered on the same day as it ships. Both maxHandlingTime and maxTransitTime are required if providing shipping speeds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxTransitTime")]
		public string MaxTransitTime { get; set; }
		
		/// <summary>
		/// Minimum handling time (inclusive) between when the order is received and shipped in business days. 0 means that the order is shipped on the same day as it's received if it happens before the cut-off time. minHandlingTime can only be present together with maxHandlingTime; but it's not required if maxHandlingTime is present.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minHandlingTime")]
		public string MinHandlingTime { get; set; }
		
		/// <summary>
		/// Minimum transit time (inclusive) between when the order has shipped and when it's delivered in business days. 0 means that the order is delivered on the same day as it ships. minTransitTime can only be present together with maxTransitTime; but it's not required if maxTransitTime is present.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minTransitTime")]
		public string MinTransitTime { get; set; }
		
		/// <summary>
		/// The postal code range that the shipping rate applies to, represented by a postal code, a postal code prefix followed by a * wildcard, a range between two postal codes or two postal code prefixes of equal length.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postalCode")]
		public string PostalCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="price")]
		public Price Price { get; set; }
		
		/// <summary>
		/// The geographic region to which a shipping rate applies.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="region")]
		public string Region { get; set; }
		
		/// <summary>
		/// A free-form description of the service class or delivery speed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="service")]
		public string Service { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProductShippingDimension
	{
		
		/// <summary>
		/// The unit of value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public string Unit { get; set; }
		
		/// <summary>
		/// The dimension of the product used to calculate the shipping cost of the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Double> Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProductShippingWeight
	{
		
		/// <summary>
		/// The unit of value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public string Unit { get; set; }
		
		/// <summary>
		/// The weight of the product used to calculate the shipping cost of the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Double> Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProductSubscriptionCost
	{
		
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public Price Amount { get; set; }
		
		/// <summary>
		/// The type of subscription period.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="period")]
		public string Period { get; set; }
		
		/// <summary>
		/// The number of subscription periods the buyer has to pay.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="periodLength")]
		public string PeriodLength { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProductTax
	{
		
		/// <summary>
		/// The country within which the item is taxed, specified as a CLDR territory code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// The numeric ID of a location that the tax rate applies to as defined in the Google Ads API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locationId")]
		public string LocationId { get; set; }
		
		/// <summary>
		/// The postal code range that the tax rate applies to, represented by a ZIP code, a ZIP code prefix using * wildcard, a range between two ZIP codes or two ZIP code prefixes of equal length. Examples: 94114, 94*, 94002-95460, 94*-95*.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postalCode")]
		public string PostalCode { get; set; }
		
		/// <summary>
		/// The percentage of tax rate that applies to the item price.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rate")]
		public System.Nullable<System.Double> Rate { get; set; }
		
		/// <summary>
		/// The geographic region to which the tax rate applies.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="region")]
		public string Region { get; set; }
		
		/// <summary>
		/// Should be set to true if tax is charged on shipping.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taxShip")]
		public System.Nullable<System.Boolean> TaxShip { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProductUnitPricingBaseMeasure
	{
		
		/// <summary>
		/// The unit of the denominator.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public string Unit { get; set; }
		
		/// <summary>
		/// The denominator of the unit price.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProductUnitPricingMeasure
	{
		
		/// <summary>
		/// The unit of the measure.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public string Unit { get; set; }
		
		/// <summary>
		/// The measure of an item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Double> Value { get; set; }
	}
	
	/// <summary>
	/// Product cluster fields. A product cluster is a grouping for different offers that represent the same product. Values are only set for fields requested explicitly in the request's search query.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProductCluster
	{
		
		/// <summary>
		/// Brand of the product cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="brand")]
		public string Brand { get; set; }
		
		/// <summary>
		/// Tells if there is at least one product of the brand currently `IN_STOCK` in your product feed across multiple countries, all products are `OUT_OF_STOCK` in your product feed, or `NOT_IN_INVENTORY`. The field doesn't take the Best Sellers report country filter into account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="brandInventoryStatus")]
		public System.Nullable<ProductClusterBrandInventoryStatus> BrandInventoryStatus { get; set; }
		
		/// <summary>
		/// Product category (1st level) of the product cluster, represented in Google's product taxonomy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="categoryL1")]
		public string CategoryL1 { get; set; }
		
		/// <summary>
		/// Product category (2nd level) of the product cluster, represented in Google's product taxonomy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="categoryL2")]
		public string CategoryL2 { get; set; }
		
		/// <summary>
		/// Product category (3rd level) of the product cluster, represented in Google's product taxonomy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="categoryL3")]
		public string CategoryL3 { get; set; }
		
		/// <summary>
		/// Product category (4th level) of the product cluster, represented in Google's product taxonomy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="categoryL4")]
		public string CategoryL4 { get; set; }
		
		/// <summary>
		/// Product category (5th level) of the product cluster, represented in Google's product taxonomy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="categoryL5")]
		public string CategoryL5 { get; set; }
		
		/// <summary>
		/// Tells whether the product cluster is `IN_STOCK` in your product feed across multiple countries, `OUT_OF_STOCK` in your product feed, or `NOT_IN_INVENTORY` at all. The field doesn't take the Best Sellers report country filter into account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inventoryStatus")]
		public ProductClusterBrandInventoryStatus InventoryStatus { get; set; }
		
		/// <summary>
		/// Title of the product cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// GTINs of example variants of the product cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="variantGtins")]
		public string[] VariantGtins { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ProductClusterBrandInventoryStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVENTORY_STATUS_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_STOCK = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OUT_OF_STOCK = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_IN_INVENTORY = 3,
	}
	
	/// <summary>
	/// The estimated days to deliver a product after an order is placed. Only authorized shipping signals partners working with a merchant can use this resource. Merchants should use the [`products`](https://developers.google.com/shopping-content/reference/rest/v2.1/products#productshipping) resource instead.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProductDeliveryTime
	{
		
		/// <summary>
		/// Required. A set of associations between `DeliveryArea` and `DeliveryTime` entries. The total number of `areaDeliveryTimes` can be at most 100.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="areaDeliveryTimes")]
		public ProductDeliveryTimeAreaDeliveryTime[] AreaDeliveryTimes { get; set; }
		
		/// <summary>
		/// The Content API ID of the product.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productId")]
		public ProductId ProductId { get; set; }
	}
	
	/// <summary>
	/// A pairing of `DeliveryArea` associated with a `DeliveryTime` for this product.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProductDeliveryTimeAreaDeliveryTime
	{
		
		/// <summary>
		/// A delivery area for the product. Only one of `countryCode` or `postalCodeRange` must be set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deliveryArea")]
		public DeliveryArea DeliveryArea { get; set; }
		
		/// <summary>
		/// A delivery time for this product.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deliveryTime")]
		public ProductDeliveryTimeAreaDeliveryTimeDeliveryTime DeliveryTime { get; set; }
	}
	
	/// <summary>
	/// A delivery time for this product.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProductDeliveryTimeAreaDeliveryTimeDeliveryTime
	{
		
		/// <summary>
		/// Required. The maximum number of business days (inclusive) between when an order is placed and when the product ships. If a product ships in the same day, set this value to 0.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxHandlingTimeDays")]
		public System.Nullable<System.Int32> MaxHandlingTimeDays { get; set; }
		
		/// <summary>
		/// Required. The maximum number of business days (inclusive) between when the product ships and when the product is delivered.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxTransitTimeDays")]
		public System.Nullable<System.Int32> MaxTransitTimeDays { get; set; }
		
		/// <summary>
		/// Required. The minimum number of business days (inclusive) between when an order is placed and when the product ships. If a product ships in the same day, set this value to 0.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minHandlingTimeDays")]
		public System.Nullable<System.Int32> MinHandlingTimeDays { get; set; }
		
		/// <summary>
		/// Required. The minimum number of business days (inclusive) between when the product ships and when the product is delivered.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minTransitTimeDays")]
		public System.Nullable<System.Int32> MinTransitTimeDays { get; set; }
	}
	
	/// <summary>
	/// The Content API ID of the product.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProductId
	{
		
		/// <summary>
		/// The Content API ID of the product, in the form `channel:contentLanguage:targetCountry:offerId`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productId")]
		public string ProductId1 { get; set; }
	}
	
	/// <summary>
	/// An issue affecting specific product.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProductIssue
	{
		
		/// <summary>
		/// A list of actionable steps that can be executed to solve the issue. An example is requesting a re-review or providing arguments when merchant disagrees with the issue. Actions that are supported in (your) third-party application can be rendered as buttons and should be available to merchant when they expand the issue.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="actions")]
		public Action[] Actions { get; set; }
		
		/// <summary>
		/// Overall impact of product issue.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="impact")]
		public ProductIssueImpact Impact { get; set; }
		
		/// <summary>
		/// Details of the issue as a pre-rendered HTML. HTML elements contain CSS classes that can be used to customize the style of the content. Always sanitize the HTML before embedding it directly to your application. The sanitizer needs to allow basic HTML tags, such as: `div`, `span`, `p`, `a`, `ul`, `li`, `table`, `tr`, `td`. For example, you can use [DOMPurify](https://www.npmjs.com/package/dompurify). CSS classes: * `issue-detail` - top level container for the detail of the issue * `callout-banners` - section of the `issue-detail` with callout banners * `callout-banner` - single callout banner, inside `callout-banners` * `callout-banner-info` - callout with important information (default) * `callout-banner-warning` - callout with a warning * `callout-banner-error` - callout informing about an error (most severe) * `issue-content` - section of the `issue-detail`, contains multiple `content-element` * `content-element` - content element such as a list, link or paragraph, inside `issue-content` * `root-causes` - unordered list with items describing root causes of the issue, inside `issue-content` * `root-causes-intro` - intro text before the `root-causes` list, inside `issue-content` * `segment` - section of the text, `span` inside paragraph * `segment-attribute` - section of the text that represents a product attribute, for example 'image\_link' * `segment-literal` - section of the text that contains a special value, for example '0-1000 kg' * `segment-bold` - section of the text that should be rendered as bold * `segment-italic` - section of the text that should be rendered as italic * `tooltip` - used on paragraphs that should be rendered with a tooltip. A section of the text in such a paragraph will have a class `tooltip-text` and is intended to be shown in a mouse over dialog. If the style is not used, the `tooltip-text` section would be shown on a new line, after the main part of the text. * `tooltip-text` - marks a section of the text within a `tooltip`, that is intended to be shown in a mouse over dialog. * `tooltip-icon` - marks a section of the text within a `tooltip`, that can be replaced with a tooltip icon, for example '?' or 'i'. By default, this section contains a `br` tag, that is separating the main text and the tooltip text when the style is not used. * `tooltip-style-question` - the tooltip shows helpful information, can use the '?' as an icon. * `tooltip-style-info` - the tooltip adds additional information fitting to the context, can use the 'i' as an icon. * `content-moderation` - marks the paragraph that explains how the issue was identified. * `new-element` - Present for new elements added to the pre-rendered content in the future. To make sure that a new content element does not break your style, you can hide everything with this class.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="prerenderedContent")]
		public string PrerenderedContent { get; set; }
		
		/// <summary>
		/// Title of the issue.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	/// <summary>
	/// Overall impact of product issue.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProductIssueImpact
	{
		
		/// <summary>
		/// Detailed impact breakdown. Explains the types of restriction the issue has in different shopping destinations and territory. If present, it should be rendered to the merchant. Can be shown as a mouse over dropdown or a dialog. Each breakdown item represents a group of regions with the same impact details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="breakdowns")]
		public Breakdown[] Breakdowns { get; set; }
		
		/// <summary>
		/// Optional. Message summarizing the overall impact of the issue. If present, it should be rendered to the merchant. For example: "Limits visibility in France"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// The severity of the issue.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="severity")]
		public AccountIssueImpactSeverity Severity { get; set; }
	}
	
	/// <summary>
	/// The status of a product, that is, information about a product computed asynchronously.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProductStatus
	{
		
		/// <summary>
		/// Date on which the item has been created, in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creationDate")]
		public string CreationDate { get; set; }
		
		/// <summary>
		/// The intended destinations for the product.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destinationStatuses")]
		public ProductStatusDestinationStatus[] DestinationStatuses { get; set; }
		
		/// <summary>
		/// Date on which the item expires in Google Shopping, in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="googleExpirationDate")]
		public string GoogleExpirationDate { get; set; }
		
		/// <summary>
		/// A list of all issues associated with the product.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemLevelIssues")]
		public ProductStatusItemLevelIssue[] ItemLevelIssues { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "`content#productStatus`"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Date on which the item has been last updated, in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastUpdateDate")]
		public string LastUpdateDate { get; set; }
		
		/// <summary>
		/// The link to the product.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="link")]
		public string Link { get; set; }
		
		/// <summary>
		/// The ID of the product for which status is reported.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productId")]
		public string ProductId { get; set; }
		
		/// <summary>
		/// The title of the product.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProductStatusDestinationStatus
	{
		
		/// <summary>
		/// List of country codes (ISO 3166-1 alpha-2) where the offer is approved.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="approvedCountries")]
		public string[] ApprovedCountries { get; set; }
		
		/// <summary>
		/// The name of the destination
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destination")]
		public string Destination { get; set; }
		
		/// <summary>
		/// List of country codes (ISO 3166-1 alpha-2) where the offer is disapproved.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disapprovedCountries")]
		public string[] DisapprovedCountries { get; set; }
		
		/// <summary>
		/// List of country codes (ISO 3166-1 alpha-2) where the offer is pending approval.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pendingCountries")]
		public string[] PendingCountries { get; set; }
		
		/// <summary>
		/// Deprecated. Destination approval status in `targetCountry` of the offer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProductStatusItemLevelIssue
	{
		
		/// <summary>
		/// List of country codes (ISO 3166-1 alpha-2) where issue applies to the offer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="applicableCountries")]
		public string[] ApplicableCountries { get; set; }
		
		/// <summary>
		/// The attribute's name, if the issue is caused by a single attribute.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attributeName")]
		public string AttributeName { get; set; }
		
		/// <summary>
		/// The error code of the issue.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// A short issue description in English.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The destination the issue applies to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destination")]
		public string Destination { get; set; }
		
		/// <summary>
		/// A detailed issue description in English.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="detail")]
		public string Detail { get; set; }
		
		/// <summary>
		/// The URL of a web page to help with resolving this issue.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="documentation")]
		public string Documentation { get; set; }
		
		/// <summary>
		/// Whether the issue can be resolved by the merchant.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resolution")]
		public string Resolution { get; set; }
		
		/// <summary>
		/// How this issue affects serving of the offer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="servability")]
		public string Servability { get; set; }
	}
	
	/// <summary>
	/// Product fields. Values are only set for fields requested explicitly in the request's search query.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProductView
	{
		
		/// <summary>
		/// Aggregated destination status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="aggregatedDestinationStatus")]
		public System.Nullable<ProductViewAggregatedDestinationStatus> AggregatedDestinationStatus { get; set; }
		
		/// <summary>
		/// Availability of the product.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availability")]
		public string Availability { get; set; }
		
		/// <summary>
		/// Brand of the product.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="brand")]
		public string Brand { get; set; }
		
		/// <summary>
		/// First level of the product category in [Google's product taxonomy](https://support.google.com/merchants/answer/6324436).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="categoryL1")]
		public string CategoryL1 { get; set; }
		
		/// <summary>
		/// Second level of the product category in [Google's product taxonomy](https://support.google.com/merchants/answer/6324436).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="categoryL2")]
		public string CategoryL2 { get; set; }
		
		/// <summary>
		/// Third level of the product category in [Google's product taxonomy](https://support.google.com/merchants/answer/6324436).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="categoryL3")]
		public string CategoryL3 { get; set; }
		
		/// <summary>
		/// Fourth level of the product category in [Google's product taxonomy](https://support.google.com/merchants/answer/6324436).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="categoryL4")]
		public string CategoryL4 { get; set; }
		
		/// <summary>
		/// Fifth level of the product category in [Google's product taxonomy](https://support.google.com/merchants/answer/6324436).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="categoryL5")]
		public string CategoryL5 { get; set; }
		
		/// <summary>
		/// Channel of the product (online versus local).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channel")]
		public System.Nullable<ProductViewChannel> Channel { get; set; }
		
		/// <summary>
		/// Condition of the product.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="condition")]
		public string Condition { get; set; }
		
		/// <summary>
		/// The time the merchant created the product in timestamp seconds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public string CreationTime { get; set; }
		
		/// <summary>
		/// Product price currency code (for example, ISO 4217). Absent if product price is not available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currencyCode")]
		public string CurrencyCode { get; set; }
		
		/// <summary>
		/// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expirationDate")]
		public Date ExpirationDate { get; set; }
		
		/// <summary>
		/// GTIN of the product.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gtin")]
		public string[] Gtin { get; set; }
		
		/// <summary>
		/// The REST ID of the product, in the form of channel:contentLanguage:targetCountry:offerId. Content API methods that operate on products take this as their productId parameter. Should always be included in the SELECT clause.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Item group ID provided by the merchant for grouping variants together.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemGroupId")]
		public string ItemGroupId { get; set; }
		
		/// <summary>
		/// List of item issues for the product.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemIssues")]
		public ProductViewItemIssue[] ItemIssues { get; set; }
		
		/// <summary>
		/// Language code of the product in BCP 47 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="languageCode")]
		public string LanguageCode { get; set; }
		
		/// <summary>
		/// Merchant-provided id of the product.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offerId")]
		public string OfferId { get; set; }
		
		/// <summary>
		/// Product price specified as micros (1 millionth of a standard unit, 1 USD = 1000000 micros) in the product currency. Absent in case the information about the price of the product is not available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priceMicros")]
		public string PriceMicros { get; set; }
		
		/// <summary>
		/// First level of the product type in merchant's own [product taxonomy](https://support.google.com/merchants/answer/6324436).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productTypeL1")]
		public string ProductTypeL1 { get; set; }
		
		/// <summary>
		/// Second level of the product type in merchant's own [product taxonomy](https://support.google.com/merchants/answer/6324436).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productTypeL2")]
		public string ProductTypeL2 { get; set; }
		
		/// <summary>
		/// Third level of the product type in merchant's own [product taxonomy](https://support.google.com/merchants/answer/6324436).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productTypeL3")]
		public string ProductTypeL3 { get; set; }
		
		/// <summary>
		/// Fourth level of the product type in merchant's own [product taxonomy](https://support.google.com/merchants/answer/6324436).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productTypeL4")]
		public string ProductTypeL4 { get; set; }
		
		/// <summary>
		/// Fifth level of the product type in merchant's own [product taxonomy](https://support.google.com/merchants/answer/6324436).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productTypeL5")]
		public string ProductTypeL5 { get; set; }
		
		/// <summary>
		/// The normalized shipping label specified in the feed
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shippingLabel")]
		public string ShippingLabel { get; set; }
		
		/// <summary>
		/// Title of the product.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ProductViewAggregatedDestinationStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AGGREGATED_STATUS_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_ELIGIBLE_OR_DISAPPROVED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ELIGIBLE_LIMITED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ELIGIBLE = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ProductViewChannel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHANNEL_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOCAL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ONLINE = 2,
	}
	
	/// <summary>
	/// Item issue associated with the product.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProductViewItemIssue
	{
		
		/// <summary>
		/// Type of the item issue.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="issueType")]
		public ProductViewItemIssueItemIssueType IssueType { get; set; }
		
		/// <summary>
		/// Item issue resolution.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resolution")]
		public System.Nullable<ProductViewItemIssueResolution> Resolution { get; set; }
		
		/// <summary>
		/// Severity of an issue per destination in a region, and aggregated severity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="severity")]
		public ProductViewItemIssueItemIssueSeverity Severity { get; set; }
	}
	
	/// <summary>
	/// Type of the item issue.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProductViewItemIssueItemIssueType
	{
		
		/// <summary>
		/// Canonical attribute name for attribute-specific issues.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canonicalAttribute")]
		public string CanonicalAttribute { get; set; }
		
		/// <summary>
		/// Error code of the issue.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ProductViewItemIssueResolution
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MERCHANT_ACTION = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING_PROCESSING = 2,
	}
	
	/// <summary>
	/// Severity of an issue per destination in a region, and aggregated severity.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProductViewItemIssueItemIssueSeverity
	{
		
		/// <summary>
		/// Severity of an issue aggregated for destination.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="aggregatedSeverity")]
		public System.Nullable<ProductViewItemIssueItemIssueSeverityAggregatedSeverity> AggregatedSeverity { get; set; }
		
		/// <summary>
		/// Item issue severity for every destination.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="severityPerDestination")]
		public ProductViewItemIssueIssueSeverityPerDestination[] SeverityPerDestination { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ProductViewItemIssueItemIssueSeverityAggregatedSeverity
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AGGREGATED_ISSUE_SEVERITY_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISAPPROVED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEMOTED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 3,
	}
	
	/// <summary>
	/// Issue severity for all affected regions in a destination.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProductViewItemIssueIssueSeverityPerDestination
	{
		
		/// <summary>
		/// List of demoted countries in the destination.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="demotedCountries")]
		public string[] DemotedCountries { get; set; }
		
		/// <summary>
		/// Issue destination.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destination")]
		public string Destination { get; set; }
		
		/// <summary>
		/// List of disapproved countries in the destination.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disapprovedCountries")]
		public string[] DisapprovedCountries { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProductsCustomBatchRequest
	{
		
		/// <summary>
		/// The request entries to be processed in the batch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entries")]
		public ProductsCustomBatchRequestEntry[] Entries { get; set; }
	}
	
	/// <summary>
	/// A batch entry encoding a single non-batch products request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProductsCustomBatchRequestEntry
	{
		
		/// <summary>
		/// An entry ID, unique within the batch request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="batchId")]
		public System.Nullable<System.UInt32> BatchId { get; set; }
		
		/// <summary>
		/// The Content API Supplemental Feed ID. If present then product insertion or deletion applies to a supplemental feed instead of primary Content API feed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="feedId")]
		public string FeedId { get; set; }
		
		/// <summary>
		/// The ID of the managing account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="merchantId")]
		public string MerchantId { get; set; }
		
		/// <summary>
		/// The method of the batch entry. Acceptable values are: - "`delete`" - "`get`" - "`insert`" - "`update`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="method")]
		public string Method { get; set; }
		
		/// <summary>
		///  Required product attributes are primarily defined by the product data specification. See the Product Data Specification Help Center article for information. Product data. After inserting, updating, or deleting a product, it may take several minutes before changes take effect.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="product")]
		public Product Product { get; set; }
		
		/// <summary>
		/// The ID of the product to get or mutate. Only defined if the method is `get`, `delete`, or `update`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productId")]
		public string ProductId { get; set; }
		
		/// <summary>
		/// The comma-separated list of product attributes to be updated. Example: `"title,salePrice"`. Attributes specified in the update mask without a value specified in the body will be deleted from the product. *You must specify the update mask to delete attributes.* Only top-level product attributes can be updated. If not defined, product attributes with set values will be updated and other attributes will stay unchanged. Only defined if the method is `update`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateMask")]
		public string UpdateMask { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProductsCustomBatchResponse
	{
		
		/// <summary>
		/// The result of the execution of the batch requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entries")]
		public ProductsCustomBatchResponseEntry[] Entries { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "`content#productsCustomBatchResponse`".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	/// <summary>
	/// A batch entry encoding a single non-batch products response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProductsCustomBatchResponseEntry
	{
		
		/// <summary>
		/// The ID of the request entry this entry responds to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="batchId")]
		public System.Nullable<System.UInt32> BatchId { get; set; }
		
		/// <summary>
		/// A list of errors returned by a failed batch entry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Errors Errors { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "`content#productsCustomBatchResponseEntry`"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		///  Required product attributes are primarily defined by the product data specification. See the Product Data Specification Help Center article for information. Product data. After inserting, updating, or deleting a product, it may take several minutes before changes take effect.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="product")]
		public Product Product { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProductsListResponse
	{
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "`content#productsListResponse`".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// The token for the retrieval of the next page of products.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resources")]
		public Product[] Resources { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProductstatusesCustomBatchRequest
	{
		
		/// <summary>
		/// The request entries to be processed in the batch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entries")]
		public ProductstatusesCustomBatchRequestEntry[] Entries { get; set; }
	}
	
	/// <summary>
	/// A batch entry encoding a single non-batch productstatuses request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProductstatusesCustomBatchRequestEntry
	{
		
		/// <summary>
		/// An entry ID, unique within the batch request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="batchId")]
		public System.Nullable<System.UInt32> BatchId { get; set; }
		
		/// <summary>
		/// If set, only issues for the specified destinations are returned, otherwise only issues for the Shopping destination.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destinations")]
		public string[] Destinations { get; set; }
		
		/// <summary>
		/// Deprecated: Setting this field has no effect and attributes are never included.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="includeAttributes")]
		public System.Nullable<System.Boolean> IncludeAttributes { get; set; }
		
		/// <summary>
		/// The ID of the managing account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="merchantId")]
		public string MerchantId { get; set; }
		
		/// <summary>
		/// The method of the batch entry. Acceptable values are: - "`get`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="method")]
		public string Method { get; set; }
		
		/// <summary>
		/// The ID of the product whose status to get.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productId")]
		public string ProductId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProductstatusesCustomBatchResponse
	{
		
		/// <summary>
		/// The result of the execution of the batch requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entries")]
		public ProductstatusesCustomBatchResponseEntry[] Entries { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "`content#productstatusesCustomBatchResponse`".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	/// <summary>
	/// A batch entry encoding a single non-batch productstatuses response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProductstatusesCustomBatchResponseEntry
	{
		
		/// <summary>
		/// The ID of the request entry this entry responds to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="batchId")]
		public System.Nullable<System.UInt32> BatchId { get; set; }
		
		/// <summary>
		/// A list of errors returned by a failed batch entry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Errors Errors { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "`content#productstatusesCustomBatchResponseEntry`"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// The status of a product, that is, information about a product computed asynchronously.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productStatus")]
		public ProductStatus ProductStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProductstatusesListResponse
	{
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "`content#productstatusesListResponse`".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// The token for the retrieval of the next page of products statuses.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resources")]
		public ProductStatus[] Resources { get; set; }
	}
	
	/// <summary>
	/// Settings for Pub/Sub notifications, all methods require that the caller is a direct user of the merchant center account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PubsubNotificationSettings
	{
		
		/// <summary>
		/// Cloud pub/sub topic to which notifications are sent (read-only).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cloudTopicName")]
		public string CloudTopicName { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "`content#pubsubNotificationSettings`"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// List of event types. Acceptable values are: - "`orderPendingShipment`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="registeredEvents")]
		public string[] RegisteredEvents { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RateGroup
	{
		
		/// <summary>
		/// A list of shipping labels defining the products to which this rate group applies to. This is a disjunction: only one of the labels has to match for the rate group to apply. May only be empty for the last rate group of a service. Required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="applicableShippingLabels")]
		public string[] ApplicableShippingLabels { get; set; }
		
		/// <summary>
		/// A list of carrier rates that can be referred to by `mainTable` or `singleValue`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="carrierRates")]
		public CarrierRate[] CarrierRates { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mainTable")]
		public Table MainTable { get; set; }
		
		/// <summary>
		/// Name of the rate group. Optional. If set has to be unique within shipping service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The single value of a rate group or the value of a rate group table's cell. Exactly one of `noShipping`, `flatRate`, `pricePercentage`, `carrierRateName`, `subtableName` must be set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="singleValue")]
		public Value SingleValue { get; set; }
		
		/// <summary>
		/// A list of subtables referred to by `mainTable`. Can only be set if `mainTable` is set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subtables")]
		public Table[] Subtables { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Table
	{
		
		/// <summary>
		/// A non-empty list of row or column headers for a table. Exactly one of `prices`, `weights`, `numItems`, `postalCodeGroupNames`, or `location` must be set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="columnHeaders")]
		public Headers ColumnHeaders { get; set; }
		
		/// <summary>
		/// Name of the table. Required for subtables, ignored for the main table.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// A non-empty list of row or column headers for a table. Exactly one of `prices`, `weights`, `numItems`, `postalCodeGroupNames`, or `location` must be set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rowHeaders")]
		public Headers RowHeaders { get; set; }
		
		/// <summary>
		/// The list of rows that constitute the table. Must have the same length as `rowHeaders`. Required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rows")]
		public Row[] Rows { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Row
	{
		
		/// <summary>
		/// The list of cells that constitute the row. Must have the same length as `columnHeaders` for two-dimensional tables, a length of 1 for one-dimensional tables. Required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cells")]
		public Value[] Cells { get; set; }
	}
	
	/// <summary>
	/// The single value of a rate group or the value of a rate group table's cell. Exactly one of `noShipping`, `flatRate`, `pricePercentage`, `carrierRateName`, `subtableName` must be set.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Value
	{
		
		/// <summary>
		/// The name of a carrier rate referring to a carrier rate defined in the same rate group. Can only be set if all other fields are not set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="carrierRateName")]
		public string CarrierRateName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="flatRate")]
		public Price FlatRate { get; set; }
		
		/// <summary>
		/// If true, then the product can't ship. Must be true when set, can only be set if all other fields are not set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="noShipping")]
		public System.Nullable<System.Boolean> NoShipping { get; set; }
		
		/// <summary>
		/// A percentage of the price represented as a number in decimal notation (for example, `"5.4"`). Can only be set if all other fields are not set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pricePercentage")]
		public string PricePercentage { get; set; }
		
		/// <summary>
		/// The name of a subtable. Can only be set in table cells (not for single values), and only if all other fields are not set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subtableName")]
		public string SubtableName { get; set; }
	}
	
	/// <summary>
	/// Regional inventory resource. contains the regional name and all attributes which are overridden for the specified region.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RegionalInventory
	{
		
		/// <summary>
		/// The availability of the product.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availability")]
		public string Availability { get; set; }
		
		/// <summary>
		/// A list of custom (merchant-provided) attributes. It can also be used for submitting any attribute of the feed specification in its generic form.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customAttributes")]
		public CustomAttribute[] CustomAttributes { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "`content#regionalInventory`".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="price")]
		public Price Price { get; set; }
		
		/// <summary>
		/// The ID uniquely identifying each region.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="regionId")]
		public string RegionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="salePrice")]
		public Price SalePrice { get; set; }
		
		/// <summary>
		/// A date range represented by a pair of ISO 8601 dates separated by a space, comma, or slash. Both dates might be specified as 'null' if undecided.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="salePriceEffectiveDate")]
		public string SalePriceEffectiveDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RegionalinventoryCustomBatchRequest
	{
		
		/// <summary>
		/// The request entries to be processed in the batch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entries")]
		public RegionalinventoryCustomBatchRequestEntry[] Entries { get; set; }
	}
	
	/// <summary>
	/// A batch entry encoding a single non-batch regional inventory request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RegionalinventoryCustomBatchRequestEntry
	{
		
		/// <summary>
		/// An entry ID, unique within the batch request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="batchId")]
		public System.Nullable<System.UInt32> BatchId { get; set; }
		
		/// <summary>
		/// The ID of the managing account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="merchantId")]
		public string MerchantId { get; set; }
		
		/// <summary>
		/// Method of the batch request entry. Acceptable values are: - "`insert`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="method")]
		public string Method { get; set; }
		
		/// <summary>
		/// The ID of the product for which to update price and availability.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productId")]
		public string ProductId { get; set; }
		
		/// <summary>
		/// Regional inventory resource. contains the regional name and all attributes which are overridden for the specified region.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="regionalInventory")]
		public RegionalInventory RegionalInventory { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RegionalinventoryCustomBatchResponse
	{
		
		/// <summary>
		/// The result of the execution of the batch requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entries")]
		public RegionalinventoryCustomBatchResponseEntry[] Entries { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "`content#regionalinventoryCustomBatchResponse`".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	/// <summary>
	/// A batch entry encoding a single non-batch regional inventory response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RegionalinventoryCustomBatchResponseEntry
	{
		
		/// <summary>
		/// The ID of the request entry this entry responds to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="batchId")]
		public System.Nullable<System.UInt32> BatchId { get; set; }
		
		/// <summary>
		/// A list of errors returned by a failed batch entry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Errors Errors { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "`content#regionalinventoryCustomBatchResponseEntry`".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Regional inventory resource. contains the regional name and all attributes which are overridden for the specified region.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="regionalInventory")]
		public RegionalInventory RegionalInventory { get; set; }
	}
	
	/// <summary>
	/// The payload for configuring how the content should be rendered.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RenderAccountIssuesRequestPayload
	{
		
		/// <summary>
		/// Optional. How the detailed content should be returned. Default option is to return the content as a pre-rendered HTML text.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentOption")]
		public System.Nullable<RenderAccountIssuesRequestPayloadContentOption> ContentOption { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum RenderAccountIssuesRequestPayloadContentOption
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTENT_OPTION_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRE_RENDERED_HTML = 1,
	}
	
	/// <summary>
	/// Response containing support content and actions for listed account issues.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RenderAccountIssuesResponse
	{
		
		/// <summary>
		/// The Alternate Dispute Resolution (ADR) that may be available to merchants in some regions. If present, the link should be shown on the same page as the list of issues.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alternateDisputeResolution")]
		public AlternateDisputeResolution AlternateDisputeResolution { get; set; }
		
		/// <summary>
		/// List of account issues for a given account. This list can be shown with compressed, expandable items. In the compressed form, the title and impact should be shown for each issue. Once the issue is expanded, the detailed content and available actions should be rendered.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="issues")]
		public AccountIssue[] Issues { get; set; }
	}
	
	/// <summary>
	/// The payload for configuring how the content should be rendered.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RenderProductIssuesRequestPayload
	{
		
		/// <summary>
		/// Optional. How the detailed content should be returned. Default option is to return the content as a pre-rendered HTML text.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentOption")]
		public RenderAccountIssuesRequestPayloadContentOption ContentOption { get; set; }
	}
	
	/// <summary>
	/// Response containing support content and actions for listed product issues.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RenderProductIssuesResponse
	{
		
		/// <summary>
		/// The Alternate Dispute Resolution (ADR) that may be available to merchants in some regions. If present, the link should be shown on the same page as the list of issues.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alternateDisputeResolution")]
		public AlternateDisputeResolution AlternateDisputeResolution { get; set; }
		
		/// <summary>
		/// List of issues for a given product. This list can be shown with compressed, expandable items. In the compressed form, the title and impact should be shown for each issue. Once the issue is expanded, the detailed content and available actions should be rendered.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="issues")]
		public ProductIssue[] Issues { get; set; }
	}
	
	/// <summary>
	/// Request to report interactions on a recommendation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReportInteractionRequest
	{
		
		/// <summary>
		/// Required. Type of the interaction that is reported, for example INTERACTION_CLICK.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="interactionType")]
		public System.Nullable<ReportInteractionRequestInteractionType> InteractionType { get; set; }
		
		/// <summary>
		/// Required. Token of the response when recommendation was returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="responseToken")]
		public string ResponseToken { get; set; }
		
		/// <summary>
		/// Optional. Subtype of the recommendations this interaction happened on. This field must be set only to the value that is returned by {@link `RecommendationsService.GenerateRecommendations`} call.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subtype")]
		public string Subtype { get; set; }
		
		/// <summary>
		/// Required. Type of the recommendations on which this interaction happened. This field must be set only to the value that is returned by {@link `GenerateRecommendationsResponse`} call.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ReportInteractionRequestInteractionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERACTION_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERACTION_DISMISS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERACTION_CLICK = 2,
	}
	
	/// <summary>
	/// Result row returned from the search query.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReportRow
	{
		
		/// <summary>
		/// Fields related to the [Best sellers reports](https://support.google.com/merchants/answer/9488679).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bestSellers")]
		public BestSellers BestSellers { get; set; }
		
		/// <summary>
		/// Brand fields. Values are only set for fields requested explicitly in the request's search query.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="brand")]
		public Brand Brand { get; set; }
		
		/// <summary>
		/// Fields related to [competitive visibility reports] (https://support.google.com/merchants/answer/11366442).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="competitiveVisibility")]
		public CompetitiveVisibility CompetitiveVisibility { get; set; }
		
		/// <summary>
		/// Performance metrics. Values are only set for metrics requested explicitly in the request's search query.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metrics")]
		public Metrics Metrics { get; set; }
		
		/// <summary>
		/// Price competitiveness fields requested by the merchant in the query. Field values are only set if the merchant queries `PriceCompetitivenessProductView`. https://support.google.com/merchants/answer/9626903
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priceCompetitiveness")]
		public PriceCompetitiveness PriceCompetitiveness { get; set; }
		
		/// <summary>
		/// Price insights fields requested by the merchant in the query. Field values are only set if the merchant queries `PriceInsightsProductView`. https://support.google.com/merchants/answer/11916926
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priceInsights")]
		public PriceInsights PriceInsights { get; set; }
		
		/// <summary>
		/// Product cluster fields. A product cluster is a grouping for different offers that represent the same product. Values are only set for fields requested explicitly in the request's search query.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productCluster")]
		public ProductCluster ProductCluster { get; set; }
		
		/// <summary>
		/// Product fields. Values are only set for fields requested explicitly in the request's search query.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productView")]
		public ProductView ProductView { get; set; }
		
		/// <summary>
		/// Dimensions according to which metrics are segmented in the response. Values of product dimensions, such as `offer_id`, reflect the state of a product at the time of the corresponding event, for example, impression or order. Segment fields cannot be selected in queries without also selecting at least one metric field. Values are only set for dimensions requested explicitly in the request's search query.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="segments")]
		public Segments Segments { get; set; }
	}
	
	/// <summary>
	/// Dimensions according to which metrics are segmented in the response. Values of product dimensions, such as `offer_id`, reflect the state of a product at the time of the corresponding event, for example, impression or order. Segment fields cannot be selected in queries without also selecting at least one metric field. Values are only set for dimensions requested explicitly in the request's search query.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Segments
	{
		
		/// <summary>
		/// Brand of the product.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="brand")]
		public string Brand { get; set; }
		
		/// <summary>
		/// [Product category (1st level)](https://developers.google.com/shopping-content/guides/reports/segmentation#category_and_product_type) in Google's product taxonomy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="categoryL1")]
		public string CategoryL1 { get; set; }
		
		/// <summary>
		/// [Product category (2nd level)](https://developers.google.com/shopping-content/guides/reports/segmentation#category_and_product_type) in Google's product taxonomy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="categoryL2")]
		public string CategoryL2 { get; set; }
		
		/// <summary>
		/// [Product category (3rd level)](https://developers.google.com/shopping-content/guides/reports/segmentation#category_and_product_type) in Google's product taxonomy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="categoryL3")]
		public string CategoryL3 { get; set; }
		
		/// <summary>
		/// [Product category (4th level)](https://developers.google.com/shopping-content/guides/reports/segmentation#category_and_product_type) in Google's product taxonomy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="categoryL4")]
		public string CategoryL4 { get; set; }
		
		/// <summary>
		/// [Product category (5th level)](https://developers.google.com/shopping-content/guides/reports/segmentation#category_and_product_type) in Google's product taxonomy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="categoryL5")]
		public string CategoryL5 { get; set; }
		
		/// <summary>
		/// Currency in which price metrics are represented, for example, if you select `ordered_item_sales_micros`, the returned value will be represented by this currency.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currencyCode")]
		public string CurrencyCode { get; set; }
		
		/// <summary>
		/// Custom label 0 for custom grouping of products.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customLabel0")]
		public string CustomLabel0 { get; set; }
		
		/// <summary>
		/// Custom label 1 for custom grouping of products.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customLabel1")]
		public string CustomLabel1 { get; set; }
		
		/// <summary>
		/// Custom label 2 for custom grouping of products.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customLabel2")]
		public string CustomLabel2 { get; set; }
		
		/// <summary>
		/// Custom label 3 for custom grouping of products.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customLabel3")]
		public string CustomLabel3 { get; set; }
		
		/// <summary>
		/// Custom label 4 for custom grouping of products.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customLabel4")]
		public string CustomLabel4 { get; set; }
		
		/// <summary>
		/// Code of the country where the customer is located at the time of the event. Represented in the ISO 3166 format. If the customer country cannot be determined, a special 'ZZ' code is returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customerCountryCode")]
		public string CustomerCountryCode { get; set; }
		
		/// <summary>
		/// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date")]
		public Date Date { get; set; }
		
		/// <summary>
		/// Merchant-provided id of the product.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offerId")]
		public string OfferId { get; set; }
		
		/// <summary>
		/// [Product type (1st level)](https://developers.google.com/shopping-content/guides/reports/segmentation#category_and_product_type) in merchant's own product taxonomy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productTypeL1")]
		public string ProductTypeL1 { get; set; }
		
		/// <summary>
		/// [Product type (2nd level)](https://developers.google.com/shopping-content/guides/reports/segmentation#category_and_product_type) in merchant's own product taxonomy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productTypeL2")]
		public string ProductTypeL2 { get; set; }
		
		/// <summary>
		/// [Product type (3rd level)](https://developers.google.com/shopping-content/guides/reports/segmentation#category_and_product_type) in merchant's own product taxonomy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productTypeL3")]
		public string ProductTypeL3 { get; set; }
		
		/// <summary>
		/// [Product type (4th level)](https://developers.google.com/shopping-content/guides/reports/segmentation#category_and_product_type) in merchant's own product taxonomy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productTypeL4")]
		public string ProductTypeL4 { get; set; }
		
		/// <summary>
		/// [Product type (5th level)](https://developers.google.com/shopping-content/guides/reports/segmentation#category_and_product_type) in merchant's own product taxonomy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productTypeL5")]
		public string ProductTypeL5 { get; set; }
		
		/// <summary>
		/// Program to which metrics apply, for example, Free Product Listing.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="program")]
		public System.Nullable<SegmentsProgram> Program { get; set; }
		
		/// <summary>
		/// Title of the product.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="week")]
		public Date Week { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SegmentsProgram
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROGRAM_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SHOPPING_ADS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FREE_PRODUCT_LISTING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FREE_LOCAL_PRODUCT_LISTING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BUY_ON_GOOGLE_LISTING = 4,
	}
	
	/// <summary>
	/// Request message for the RequestPhoneVerification method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RequestPhoneVerificationRequest
	{
		
		/// <summary>
		/// Language code [IETF BCP 47 syntax](https://tools.ietf.org/html/bcp47) (for example, en-US). Language code is used to provide localized `SMS` and `PHONE_CALL`. Default language used is en-US if not provided.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="languageCode")]
		public string LanguageCode { get; set; }
		
		/// <summary>
		/// Phone number to be verified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phoneNumber")]
		public string PhoneNumber { get; set; }
		
		/// <summary>
		/// Required. Two letter country code for the phone number, for example `CA` for Canadian numbers. See the [ISO 3166-1 alpha-2](https://wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements) officially assigned codes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phoneRegionCode")]
		public string PhoneRegionCode { get; set; }
		
		/// <summary>
		/// Verification method to receive verification code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phoneVerificationMethod")]
		public System.Nullable<RequestPhoneVerificationRequestPhoneVerificationMethod> PhoneVerificationMethod { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum RequestPhoneVerificationRequestPhoneVerificationMethod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PHONE_VERIFICATION_METHOD_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SMS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PHONE_CALL = 2,
	}
	
	/// <summary>
	/// Response message for the RequestPhoneVerification method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RequestPhoneVerificationResponse
	{
		
		/// <summary>
		/// The verification ID to use in subsequent calls to `verifyphonenumber`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verificationId")]
		public string VerificationId { get; set; }
	}
	
	/// <summary>
	/// Request message for the RequestReviewProgram method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RequestReviewBuyOnGoogleProgramRequest
	{
	}
	
	/// <summary>
	/// Request message for the RequestReviewFreeListings Program method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RequestReviewFreeListingsRequest
	{
		
		/// <summary>
		/// The code [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) of the country for which review is to be requested.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="regionCode")]
		public string RegionCode { get; set; }
	}
	
	/// <summary>
	/// Request message for the RequestReviewShoppingAds program method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RequestReviewShoppingAdsRequest
	{
		
		/// <summary>
		/// The code [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) of the country for which review is to be requested.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="regionCode")]
		public string RegionCode { get; set; }
	}
	
	/// <summary>
	/// Return address resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReturnAddress
	{
		
		[System.Runtime.Serialization.DataMember(Name="address")]
		public ReturnAddressAddress Address { get; set; }
		
		/// <summary>
		/// Required. The country of sale where the return address is applicable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "`content#returnAddress`"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Required. The user-defined label of the return address. For the default address, use the label "default".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
		
		/// <summary>
		/// Required. The merchant's contact phone number regarding the return.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phoneNumber")]
		public string PhoneNumber { get; set; }
		
		/// <summary>
		/// Return address ID generated by Google.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="returnAddressId")]
		public string ReturnAddressId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReturnAddressAddress
	{
		
		/// <summary>
		/// CLDR country code (for example, "US").
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// City, town or commune. May also include dependent localities or sublocalities (for example, neighborhoods or suburbs).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locality")]
		public string Locality { get; set; }
		
		/// <summary>
		/// Postal code or ZIP (for example, "94043").
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postalCode")]
		public string PostalCode { get; set; }
		
		/// <summary>
		/// Name of the recipient to address returns to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recipientName")]
		public string RecipientName { get; set; }
		
		/// <summary>
		/// Top-level administrative subdivision of the country. For example, a state like California ("CA") or a province like Quebec ("QC").
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="region")]
		public string Region { get; set; }
		
		/// <summary>
		/// Street-level part of the address. May be up to two lines, each line specified as an array element.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="streetAddress")]
		public string[] StreetAddress { get; set; }
	}
	
	/// <summary>
	/// Return policy resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReturnPolicy
	{
		
		/// <summary>
		/// Required. The country of sale where the return policy is applicable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "`content#returnPolicy`"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Required. The user-defined label of the return policy. For the default policy, use the label "default".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
		
		/// <summary>
		/// Required. The name of the policy as shown in Merchant Center.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Return reasons that will incur return fees.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nonFreeReturnReasons")]
		public string[] NonFreeReturnReasons { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="policy")]
		public ReturnPolicyPolicy Policy { get; set; }
		
		/// <summary>
		/// Return policy ID generated by Google.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="returnPolicyId")]
		public string ReturnPolicyId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="returnShippingFee")]
		public Price ReturnShippingFee { get; set; }
		
		/// <summary>
		/// An optional list of seasonal overrides.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="seasonalOverrides")]
		public ReturnPolicySeasonalOverride[] SeasonalOverrides { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReturnPolicyPolicy
	{
		
		/// <summary>
		/// Required. Last day for returning the items. In ISO 8601 format. When specifying the return window like this, set the policy type to "lastReturnDate". Use this for seasonal overrides only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastReturnDate")]
		public string LastReturnDate { get; set; }
		
		/// <summary>
		/// The number of days items can be returned after delivery, where one day is defined to be 24 hours after the delivery timestamp. When specifying the return window like this, set the policy type to "numberOfDaysAfterDelivery". Acceptable values are 30, 45, 60, 90, 100, 180, 270 and 365 for the default policy. Additional policies further allow 14, 15, 21 and 28 days, but note that for most items a minimum of 30 days is required for returns. Exceptions may be made for electronics. A policy of less than 30 days can only be applied to those items.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numberOfDays")]
		public string NumberOfDays { get; set; }
		
		/// <summary>
		/// Policy type. Use "lastReturnDate" for seasonal overrides only. Note that for most items a minimum of 30 days is required for returns. Exceptions may be made for electronics or non-returnable items such as food, perishables, and living things. A policy of less than 30 days can only be applied to those items. Acceptable values are: - "`lastReturnDate`" - "`lifetimeReturns`" - "`noReturns`" - "`numberOfDaysAfterDelivery`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReturnPolicySeasonalOverride
	{
		
		/// <summary>
		/// Required. Last day on which the override applies. In ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endDate")]
		public string EndDate { get; set; }
		
		/// <summary>
		/// Required. The name of the seasonal override as shown in Merchant Center.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="policy")]
		public ReturnPolicyPolicy Policy { get; set; }
		
		/// <summary>
		/// Required. First day on which the override applies. In ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startDate")]
		public string StartDate { get; set; }
	}
	
	/// <summary>
	/// Return shipping label for a Buy on Google merchant-managed return.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReturnShippingLabel
	{
		
		/// <summary>
		/// Name of the carrier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="carrier")]
		public string Carrier { get; set; }
		
		/// <summary>
		/// The URL for the return shipping label in PDF format
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labelUri")]
		public string LabelUri { get; set; }
		
		/// <summary>
		/// The tracking id of this return label.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trackingId")]
		public string TrackingId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReturnaddressCustomBatchRequest
	{
		
		/// <summary>
		/// The request entries to be processed in the batch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entries")]
		public ReturnaddressCustomBatchRequestEntry[] Entries { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReturnaddressCustomBatchRequestEntry
	{
		
		/// <summary>
		/// An entry ID, unique within the batch request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="batchId")]
		public System.Nullable<System.UInt32> BatchId { get; set; }
		
		/// <summary>
		/// The Merchant Center account ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="merchantId")]
		public string MerchantId { get; set; }
		
		/// <summary>
		/// Method of the batch request entry. Acceptable values are: - "`delete`" - "`get`" - "`insert`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="method")]
		public string Method { get; set; }
		
		/// <summary>
		/// Return address resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="returnAddress")]
		public ReturnAddress ReturnAddress { get; set; }
		
		/// <summary>
		/// The return address ID. This should be set only if the method is `delete` or `get`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="returnAddressId")]
		public string ReturnAddressId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReturnaddressCustomBatchResponse
	{
		
		/// <summary>
		/// The result of the execution of the batch requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entries")]
		public ReturnaddressCustomBatchResponseEntry[] Entries { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "`content#returnaddressCustomBatchResponse`".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReturnaddressCustomBatchResponseEntry
	{
		
		/// <summary>
		/// The ID of the request entry to which this entry responds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="batchId")]
		public System.Nullable<System.UInt32> BatchId { get; set; }
		
		/// <summary>
		/// A list of errors returned by a failed batch entry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Errors Errors { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "`content#returnaddressCustomBatchResponseEntry`"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Return address resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="returnAddress")]
		public ReturnAddress ReturnAddress { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReturnaddressListResponse
	{
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "`content#returnaddressListResponse`".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// The token for the retrieval of the next page of addresses.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resources")]
		public ReturnAddress[] Resources { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReturnpolicyCustomBatchRequest
	{
		
		/// <summary>
		/// The request entries to be processed in the batch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entries")]
		public ReturnpolicyCustomBatchRequestEntry[] Entries { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReturnpolicyCustomBatchRequestEntry
	{
		
		/// <summary>
		/// An entry ID, unique within the batch request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="batchId")]
		public System.Nullable<System.UInt32> BatchId { get; set; }
		
		/// <summary>
		/// The Merchant Center account ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="merchantId")]
		public string MerchantId { get; set; }
		
		/// <summary>
		/// Method of the batch request entry. Acceptable values are: - "`delete`" - "`get`" - "`insert`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="method")]
		public string Method { get; set; }
		
		/// <summary>
		/// Return policy resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="returnPolicy")]
		public ReturnPolicy ReturnPolicy { get; set; }
		
		/// <summary>
		/// The return policy ID. This should be set only if the method is `delete` or `get`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="returnPolicyId")]
		public string ReturnPolicyId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReturnpolicyCustomBatchResponse
	{
		
		/// <summary>
		/// The result of the execution of the batch requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entries")]
		public ReturnpolicyCustomBatchResponseEntry[] Entries { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "`content#returnpolicyCustomBatchResponse`".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReturnpolicyCustomBatchResponseEntry
	{
		
		/// <summary>
		/// The ID of the request entry to which this entry responds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="batchId")]
		public System.Nullable<System.UInt32> BatchId { get; set; }
		
		/// <summary>
		/// A list of errors returned by a failed batch entry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Errors Errors { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "`content#returnpolicyCustomBatchResponseEntry`"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Return policy resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="returnPolicy")]
		public ReturnPolicy ReturnPolicy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReturnpolicyListResponse
	{
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "`content#returnpolicyListResponse`".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resources")]
		public ReturnPolicy[] Resources { get; set; }
	}
	
	/// <summary>
	/// Request message for the ReportService.Search method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SearchRequest
	{
		
		/// <summary>
		/// Number of ReportRows to retrieve in a single page. Defaults to the maximum of 1000. Values above 1000 are coerced to 1000.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pageSize")]
		public System.Nullable<System.Int32> PageSize { get; set; }
		
		/// <summary>
		/// Token of the page to retrieve. If not specified, the first page of results is returned. In order to request the next page of results, the value obtained from `next_page_token` in the previous response should be used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pageToken")]
		public string PageToken { get; set; }
		
		/// <summary>
		/// Required. Query that defines performance metrics to retrieve and dimensions according to which the metrics are to be segmented. For details on how to construct your query, see the [Query Language guide](https://developers.google.com/shopping-content/guides/reports/query-language/overview).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="query")]
		public string Query { get; set; }
	}
	
	/// <summary>
	/// Response message for the ReportService.Search method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SearchResponse
	{
		
		/// <summary>
		/// Token which can be sent as `page_token` to retrieve the next page. If omitted, there are no subsequent pages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// Rows that matched the search query.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="results")]
		public ReportRow[] Results { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Service
	{
		
		/// <summary>
		/// A boolean exposing the active status of the shipping service. Required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="active")]
		public System.Nullable<System.Boolean> Active { get; set; }
		
		/// <summary>
		/// The CLDR code of the currency to which this service applies. Must match that of the prices in rate groups.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public string Currency { get; set; }
		
		/// <summary>
		/// The CLDR territory code of the country to which the service applies. Required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deliveryCountry")]
		public string DeliveryCountry { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deliveryTime")]
		public DeliveryTime DeliveryTime { get; set; }
		
		/// <summary>
		/// Eligibility for this service. Acceptable values are: - "`All scenarios`" - "`All scenarios except Shopping Actions`" - "`Shopping Actions`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eligibility")]
		public string Eligibility { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="minimumOrderValue")]
		public Price MinimumOrderValue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="minimumOrderValueTable")]
		public MinimumOrderValueTable MinimumOrderValueTable { get; set; }
		
		/// <summary>
		/// Free-form name of the service. Must be unique within target account. Required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pickupService")]
		public PickupCarrierService PickupService { get; set; }
		
		/// <summary>
		/// Shipping rate group definitions. Only the last one is allowed to have an empty `applicableShippingLabels`, which means "everything else". The other `applicableShippingLabels` must not overlap.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rateGroups")]
		public RateGroup[] RateGroups { get; set; }
		
		/// <summary>
		/// Type of locations this service ships orders to. Acceptable values are: - "`delivery`" - "`pickup` (deprecated)" - "`local_delivery`" - "`collection_point`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shipmentType")]
		public string ShipmentType { get; set; }
		
		/// <summary>
		/// Stores that provide local delivery. Only valid with local delivery fulfillment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storeConfig")]
		public ServiceStoreConfig StoreConfig { get; set; }
	}
	
	/// <summary>
	/// Stores that provide local delivery. Only valid with local delivery fulfillment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ServiceStoreConfig
	{
		
		/// <summary>
		/// Time local delivery ends for the day based on the local timezone of the store. `local_cutoff_time` and `store_close_offset_hours` are mutually exclusive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cutoffConfig")]
		public ServiceStoreConfigCutoffConfig CutoffConfig { get; set; }
		
		/// <summary>
		/// Distance represented by an integer and unit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceRadius")]
		public Distance ServiceRadius { get; set; }
		
		/// <summary>
		/// A list of store codes that provide local delivery. If empty, then `store_service_type` must be `all_stores`, or an error is thrown. If not empty, then `store_service_type` must be `selected_stores`, or an error is thrown.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storeCodes")]
		public string[] StoreCodes { get; set; }
		
		/// <summary>
		/// Indicates whether all stores listed by this merchant provide local delivery or not. Acceptable values are `all stores` and `selected stores`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storeServiceType")]
		public string StoreServiceType { get; set; }
	}
	
	/// <summary>
	/// Time local delivery ends for the day based on the local timezone of the store. `local_cutoff_time` and `store_close_offset_hours` are mutually exclusive.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ServiceStoreConfigCutoffConfig
	{
		
		/// <summary>
		/// Time in hours and minutes in the local timezone when local delivery ends.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="localCutoffTime")]
		public ServiceStoreConfigCutoffConfigLocalCutoffTime LocalCutoffTime { get; set; }
		
		/// <summary>
		/// Merchants can opt-out of showing n+1 day local delivery when they have a shipping service configured to n day local delivery. For example, if the shipping service defines same-day delivery, and it's past the cut-off, setting this field to `true` results in the calculated shipping service rate returning `NO_DELIVERY_POST_CUTOFF`. In the same example, setting this field to `false` results in the calculated shipping time being one day. This is only for local delivery.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="noDeliveryPostCutoff")]
		public System.Nullable<System.Boolean> NoDeliveryPostCutoff { get; set; }
		
		/// <summary>
		/// Represents cutoff time as the number of hours before store closing. Mutually exclusive with other fields (hour and minute).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storeCloseOffsetHours")]
		public string StoreCloseOffsetHours { get; set; }
	}
	
	/// <summary>
	/// Time in hours and minutes in the local timezone when local delivery ends.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ServiceStoreConfigCutoffConfigLocalCutoffTime
	{
		
		/// <summary>
		/// Hour local delivery orders must be placed by to process the same day.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hour")]
		public string Hour { get; set; }
		
		/// <summary>
		/// Minute local delivery orders must be placed by to process the same day.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minute")]
		public string Minute { get; set; }
	}
	
	/// <summary>
	///  Settlement reports detail order-level and item-level credits and debits between you and Google.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SettlementReport
	{
		
		/// <summary>
		/// The end date on which all transactions are included in the report, in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endDate")]
		public string EndDate { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "`content#settlementReport`"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="previousBalance")]
		public Price PreviousBalance { get; set; }
		
		/// <summary>
		/// The ID of the settlement report.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="settlementId")]
		public string SettlementId { get; set; }
		
		/// <summary>
		/// The start date on which all transactions are included in the report, in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startDate")]
		public string StartDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transferAmount")]
		public Price TransferAmount { get; set; }
		
		/// <summary>
		/// Date on which transfer for this payment was initiated by Google, in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transferDate")]
		public string TransferDate { get; set; }
		
		/// <summary>
		/// The list of bank identifiers used for the transfer. For example, Trace ID for Federal Automated Clearing House (ACH). This may also be known as the Wire ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transferIds")]
		public string[] TransferIds { get; set; }
	}
	
	/// <summary>
	/// Settlement transactions give a detailed breakdown of the settlement report.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SettlementTransaction
	{
		
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public SettlementTransactionAmount Amount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="identifiers")]
		public SettlementTransactionIdentifiers Identifiers { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "`content#settlementTransaction`"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transaction")]
		public SettlementTransactionTransaction Transaction { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SettlementTransactionAmount
	{
		
		[System.Runtime.Serialization.DataMember(Name="commission")]
		public SettlementTransactionAmountCommission Commission { get; set; }
		
		/// <summary>
		/// The description of the event. Acceptable values are: - "`taxWithhold`" - "`principal`" - "`principalAdjustment`" - "`shippingFee`" - "`merchantRemittedSalesTax`" - "`googleRemittedSalesTax`" - "`merchantCoupon`" - "`merchantCouponTax`" - "`merchantRemittedDisposalTax`" - "`googleRemittedDisposalTax`" - "`merchantRemittedRedemptionFee`" - "`googleRemittedRedemptionFee`" - "`eeeEcoFee`" - "`furnitureEcoFee`" - "`copyPrivateFee`" - "`eeeEcoFeeCommission`" - "`furnitureEcoFeeCommission`" - "`copyPrivateFeeCommission`" - "`principalRefund`" - "`principalRefundTax`" - "`itemCommission`" - "`adjustmentCommission`" - "`shippingFeeCommission`" - "`commissionRefund`" - "`damaged`" - "`damagedOrDefectiveItem`" - "`expiredItem`" - "`faultyItem`" - "`incorrectItemReceived`" - "`itemMissing`" - "`qualityNotExpected`" - "`receivedTooLate`" - "`storePackageMissing`" - "`transitPackageMissing`" - "`unsuccessfulDeliveryUndeliverable`" - "`wrongChargeInStore`" - "`wrongItem`" - "`returns`" - "`undeliverable`" - "`issueRelatedRefundAndReplacementAmountDescription`" - "`refundFromMerchant`" - "`returnLabelShippingFee`" - "`lumpSumCorrection`" - "`pspFee`" - "`principalRefundDoesNotFit`" - "`principalRefundOrderedWrongItem`" - "`principalRefundQualityNotExpected`" - "`principalRefundBetterPriceFound`" - "`principalRefundNoLongerNeeded`" - "`principalRefundChangedMind`" - "`principalRefundReceivedTooLate`" - "`principalRefundIncorrectItemReceived`" - "`principalRefundDamagedOrDefectiveItem`" - "`principalRefundDidNotMatchDescription`" - "`principalRefundExpiredItem`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transactionAmount")]
		public Price TransactionAmount { get; set; }
		
		/// <summary>
		/// The type of the amount. Acceptable values are: - "`itemPrice`" - "`orderPrice`" - "`refund`" - "`earlyRefund`" - "`courtesyRefund`" - "`returnRefund`" - "`returnLabelShippingFeeAmount`" - "`lumpSumCorrectionAmount`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SettlementTransactionAmountCommission
	{
		
		/// <summary>
		/// The category of the commission. Acceptable values are: - "`animalsAndPetSupplies`" - "`dogCatFoodAndCatLitter`" - "`apparelAndAccessories`" - "`shoesHandbagsAndSunglasses`" - "`costumesAndAccessories`" - "`jewelry`" - "`watches`" - "`hobbiesArtsAndCrafts`" - "`homeAndGarden`" - "`entertainmentCollectibles`" - "`collectibleCoins`" - "`sportsCollectibles`" - "`sportingGoods`" - "`toysAndGames`" - "`musicalInstruments`" - "`giftCards`" - "`babyAndToddler`" - "`babyFoodWipesAndDiapers`" - "`businessAndIndustrial`" - "`camerasOpticsAndPhotography`" - "`consumerElectronics`" - "`electronicsAccessories`" - "`personalComputers`" - "`videoGameConsoles`" - "`foodAndGrocery`" - "`beverages`" - "`tobaccoProducts`" - "`furniture`" - "`hardware`" - "`buildingMaterials`" - "`tools`" - "`healthAndPersonalCare`" - "`beauty`" - "`householdSupplies`" - "`kitchenAndDining`" - "`majorAppliances`" - "`luggageAndBags`" - "`media`" - "`officeSupplies`" - "`softwareAndVideoGames`" - "`vehiclePartsAndAccessories`" - "`vehicleTiresAndWheels`" - "`vehicles`" - "`everythingElse`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="category")]
		public string Category { get; set; }
		
		/// <summary>
		/// Rate of the commission in percentage.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rate")]
		public string Rate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SettlementTransactionIdentifiers
	{
		
		/// <summary>
		/// The identifier of the adjustments, if it's available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adjustmentId")]
		public string AdjustmentId { get; set; }
		
		/// <summary>
		/// The merchant provided order ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="merchantOrderId")]
		public string MerchantOrderId { get; set; }
		
		/// <summary>
		/// The identifier of the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orderItemId")]
		public string OrderItemId { get; set; }
		
		/// <summary>
		/// The unique ID of the settlement transaction entry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="settlementEntryId")]
		public string SettlementEntryId { get; set; }
		
		/// <summary>
		/// The shipment ids for the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shipmentIds")]
		public string[] ShipmentIds { get; set; }
		
		/// <summary>
		/// The Google transaction ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transactionId")]
		public string TransactionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SettlementTransactionTransaction
	{
		
		/// <summary>
		/// The time on which the event occurred in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postDate")]
		public string PostDate { get; set; }
		
		/// <summary>
		/// The type of the transaction that occurred. Acceptable values are: - "`order`" - "`reversal`" - "`orderRefund`" - "`reversalRefund`" - "`issueRelatedRefundAndReplacement`" - "`returnLabelShippingFeeTransaction`" - "`reversalIssueRelatedRefundAndReplacement`" - "`reversalReturnLabelShippingFeeTransaction`" - "`lumpSumCorrectionTransaction`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SettlementreportsListResponse
	{
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "`content#settlementreportsListResponse`".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// The token for the retrieval of the next page of returns.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resources")]
		public SettlementReport[] Resources { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SettlementtransactionsListResponse
	{
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "`content#settlementtransactionsListResponse`".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// The token for the retrieval of the next page of returns.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resources")]
		public SettlementTransaction[] Resources { get; set; }
	}
	
	/// <summary>
	/// The merchant account's shipping settings. All methods except getsupportedcarriers and getsupportedholidays require the admin role.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ShippingSettings
	{
		
		/// <summary>
		/// The ID of the account to which these account shipping settings belong. Ignored upon update, always present in get request responses.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
		
		/// <summary>
		/// A list of postal code groups that can be referred to in `services`. Optional.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postalCodeGroups")]
		public PostalCodeGroup[] PostalCodeGroups { get; set; }
		
		/// <summary>
		/// The target account's list of services. Optional.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="services")]
		public Service[] Services { get; set; }
		
		/// <summary>
		/// Optional. A list of warehouses which can be referred to in `services`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="warehouses")]
		public Warehouse[] Warehouses { get; set; }
	}
	
	/// <summary>
	/// A fulfillment warehouse, which stores and handles inventory.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Warehouse
	{
		
		[System.Runtime.Serialization.DataMember(Name="businessDayConfig")]
		public BusinessDayConfig BusinessDayConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cutoffTime")]
		public WarehouseCutoffTime CutoffTime { get; set; }
		
		/// <summary>
		/// Required. The number of days it takes for this warehouse to pack up and ship an item. This is on the warehouse level, but can be overridden on the offer level based on the attributes of an item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="handlingDays")]
		public string HandlingDays { get; set; }
		
		/// <summary>
		/// Required. The name of the warehouse. Must be unique within account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="shippingAddress")]
		public Address ShippingAddress { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WarehouseCutoffTime
	{
		
		/// <summary>
		/// Required. Hour (24-hour clock) of the cutoff time until which an order has to be placed to be processed in the same day by the warehouse. Hour is based on the timezone of warehouse.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hour")]
		public System.Nullable<System.Int32> Hour { get; set; }
		
		/// <summary>
		/// Required. Minute of the cutoff time until which an order has to be placed to be processed in the same day by the warehouse. Minute is based on the timezone of warehouse.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minute")]
		public System.Nullable<System.Int32> Minute { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ShippingsettingsCustomBatchRequest
	{
		
		/// <summary>
		/// The request entries to be processed in the batch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entries")]
		public ShippingsettingsCustomBatchRequestEntry[] Entries { get; set; }
	}
	
	/// <summary>
	/// A batch entry encoding a single non-batch shippingsettings request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ShippingsettingsCustomBatchRequestEntry
	{
		
		/// <summary>
		/// The ID of the account for which to get/update account shipping settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
		
		/// <summary>
		/// An entry ID, unique within the batch request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="batchId")]
		public System.Nullable<System.UInt32> BatchId { get; set; }
		
		/// <summary>
		/// The ID of the managing account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="merchantId")]
		public string MerchantId { get; set; }
		
		/// <summary>
		/// The method of the batch entry. Acceptable values are: - "`get`" - "`update`" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="method")]
		public string Method { get; set; }
		
		/// <summary>
		/// The merchant account's shipping settings. All methods except getsupportedcarriers and getsupportedholidays require the admin role.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shippingSettings")]
		public ShippingSettings ShippingSettings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ShippingsettingsCustomBatchResponse
	{
		
		/// <summary>
		/// The result of the execution of the batch requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entries")]
		public ShippingsettingsCustomBatchResponseEntry[] Entries { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "`content#shippingsettingsCustomBatchResponse`".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	/// <summary>
	/// A batch entry encoding a single non-batch shipping settings response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ShippingsettingsCustomBatchResponseEntry
	{
		
		/// <summary>
		/// The ID of the request entry to which this entry responds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="batchId")]
		public System.Nullable<System.UInt32> BatchId { get; set; }
		
		/// <summary>
		/// A list of errors returned by a failed batch entry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Errors Errors { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "`content#shippingsettingsCustomBatchResponseEntry`"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// The merchant account's shipping settings. All methods except getsupportedcarriers and getsupportedholidays require the admin role.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shippingSettings")]
		public ShippingSettings ShippingSettings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ShippingsettingsGetSupportedCarriersResponse
	{
		
		/// <summary>
		/// A list of supported carriers. May be empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="carriers")]
		public CarriersCarrier[] Carriers { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "`content#shippingsettingsGetSupportedCarriersResponse`".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ShippingsettingsGetSupportedHolidaysResponse
	{
		
		/// <summary>
		/// A list of holidays applicable for delivery guarantees. May be empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="holidays")]
		public HolidaysHoliday[] Holidays { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "`content#shippingsettingsGetSupportedHolidaysResponse`".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ShippingsettingsGetSupportedPickupServicesResponse
	{
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "`content#shippingsettingsGetSupportedPickupServicesResponse`".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// A list of supported pickup services. May be empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pickupServices")]
		public PickupServicesPickupService[] PickupServices { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ShippingsettingsListResponse
	{
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "`content#shippingsettingsListResponse`".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// The token for the retrieval of the next page of shipping settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resources")]
		public ShippingSettings[] Resources { get; set; }
	}
	
	/// <summary>
	/// Response message for GetShoppingAdsProgramStatus.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ShoppingAdsProgramStatus
	{
		
		/// <summary>
		/// State of the program. `ENABLED` if there are offers for at least one region.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="globalState")]
		public FreeListingsProgramStatusGlobalState GlobalState { get; set; }
		
		/// <summary>
		/// Status of the program in each region. Regions with the same status and review eligibility are grouped together in `regionCodes`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="regionStatuses")]
		public ShoppingAdsProgramStatusRegionStatus[] RegionStatuses { get; set; }
	}
	
	/// <summary>
	/// Status of program and region.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ShoppingAdsProgramStatusRegionStatus
	{
		
		/// <summary>
		/// Date by which eligibilityStatus will go from `WARNING` to `DISAPPROVED`. Only visible when your eligibilityStatus is WARNING. In [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DD`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disapprovalDate")]
		public string DisapprovalDate { get; set; }
		
		/// <summary>
		/// Eligibility status of the Shopping Ads program.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eligibilityStatus")]
		public FreeListingsProgramStatusRegionStatusEligibilityStatus EligibilityStatus { get; set; }
		
		/// <summary>
		/// Issues that must be fixed to be eligible for review.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="onboardingIssues")]
		public string[] OnboardingIssues { get; set; }
		
		/// <summary>
		/// The two-letter [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) codes for all the regions with the same `eligibilityStatus` and `reviewEligibility`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="regionCodes")]
		public string[] RegionCodes { get; set; }
		
		/// <summary>
		/// If a program is eligible for review in a specific region. Only visible if `eligibilityStatus` is `DISAPPROVED`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reviewEligibilityStatus")]
		public FreeListingsProgramStatusRegionStatusReviewEligibilityStatus ReviewEligibilityStatus { get; set; }
		
		/// <summary>
		/// Review ineligibility reason if account is not eligible for review.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reviewIneligibilityReason")]
		public FreeListingsProgramStatusRegionStatusReviewIneligibilityReason ReviewIneligibilityReason { get; set; }
		
		/// <summary>
		/// Reason a program in a specific region isn’t eligible for review. Only visible if `reviewEligibilityStatus` is `INELIGIBLE`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reviewIneligibilityReasonDescription")]
		public string ReviewIneligibilityReasonDescription { get; set; }
		
		/// <summary>
		/// Additional details for review ineligibility reasons.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reviewIneligibilityReasonDetails")]
		public ShoppingAdsProgramStatusReviewIneligibilityReasonDetails ReviewIneligibilityReasonDetails { get; set; }
		
		/// <summary>
		/// Issues evaluated in the review process. Fix all issues before requesting a review.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reviewIssues")]
		public string[] ReviewIssues { get; set; }
	}
	
	/// <summary>
	/// Additional details for review ineligibility reasons.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ShoppingAdsProgramStatusReviewIneligibilityReasonDetails
	{
		
		/// <summary>
		/// This timestamp represents end of cooldown period for review ineligbility reason `IN_COOLDOWN_PERIOD`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cooldownTime")]
		public string CooldownTime { get; set; }
	}
	
	/// <summary>
	/// Request message for the UndeleteConversionSource method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UndeleteConversionSourceRequest
	{
	}
	
	/// <summary>
	/// Request message for the VerifyPhoneNumber method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VerifyPhoneNumberRequest
	{
		
		/// <summary>
		/// Verification method used to receive verification code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phoneVerificationMethod")]
		public RequestPhoneVerificationRequestPhoneVerificationMethod PhoneVerificationMethod { get; set; }
		
		/// <summary>
		/// The verification code that was sent to the phone number for validation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verificationCode")]
		public string VerificationCode { get; set; }
		
		/// <summary>
		/// The verification ID returned by `requestphoneverification`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verificationId")]
		public string VerificationId { get; set; }
	}
	
	/// <summary>
	/// Response message for the VerifyPhoneNumber method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VerifyPhoneNumberResponse
	{
		
		/// <summary>
		/// Verified phone number if verification is successful. This phone number can only be replaced by another verified phone number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verifiedPhoneNumber")]
		public string VerifiedPhoneNumber { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Returns information about the authenticated user.
		/// Content_accounts_authinfo accounts/authinfo
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<AccountsAuthInfoResponse> Content_accounts_authinfoAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "accounts/authinfo";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AccountsAuthInfoResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves, inserts, updates, and deletes multiple Merchant Center (sub-)accounts in a single request.
		/// Content_accounts_custombatch accounts/batch
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<AccountsCustomBatchResponse> Content_accounts_custombatchAsync(AccountsCustomBatchRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "accounts/batch";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AccountsCustomBatchResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists the `BusinessMessagesLink` resources for Merchant Center account.
		/// Content_accounts_businessmessageslinks_list accounts/{accountId}/businessmessageslinks
		/// </summary>
		/// <param name="accountId">Required. The ID of the account.</param>
		/// <param name="pageSize">Optional. The maximum number of `BusinessMessagesLink` resources for the Merchant Center account to return. Defaults to 50; values above 1000 will be coerced to 1000.</param>
		/// <param name="pageToken">Optional. A page token, received from a previous `ListBusinessMessagesLinks` call. Provide the page token to retrieve the subsequent page. When paginating, all other parameters provided to `ListBusinessMessagesLinks` must match the call that provided the page token.</param>
		/// <returns>Successful response</returns>
		public async Task<ListBusinessMessagesLinksResponse> Content_accounts_businessmessageslinks_listAsync(string accountId, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/businessmessageslinks&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListBusinessMessagesLinksResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a `BusinessMessagesLink` in Merchant Center account.
		/// Content_accounts_businessmessageslinks_create accounts/{accountId}/businessmessageslinks
		/// </summary>
		/// <param name="accountId">Required. The ID of the Merchant Center account.</param>
		/// <returns>Successful response</returns>
		public async Task<BusinessMessagesLink> Content_accounts_businessmessageslinks_createAsync(string accountId, BusinessMessagesLink requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/businessmessageslinks";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<BusinessMessagesLink>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes the specified `BusinessMessagesLink` resource from Merchant Center account.
		/// Content_accounts_businessmessageslinks_delete accounts/{accountId}/businessmessageslinks/{businessMessagesLinkId}
		/// </summary>
		/// <param name="accountId">Required. The ID of the Merchant Center account.</param>
		/// <param name="businessMessagesLinkId">Required. The identifier for the Business Messages Link.</param>
		/// <returns>Successful response</returns>
		public async Task Content_accounts_businessmessageslinks_deleteAsync(string accountId, string businessMessagesLinkId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/businessmessageslinks/"+ (businessMessagesLinkId==null? "" : System.Uri.EscapeDataString(businessMessagesLinkId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves `BusinessMessagesLink` in Merchant Center account.
		/// Content_accounts_businessmessageslinks_get accounts/{accountId}/businessmessageslinks/{businessMessagesLinkId}
		/// </summary>
		/// <param name="accountId">Required. The ID of the Merchant Center account.</param>
		/// <param name="businessMessagesLinkId">Required. The identifier for the Business Messages Link.</param>
		/// <returns>Successful response</returns>
		public async Task<BusinessMessagesLink> Content_accounts_businessmessageslinks_getAsync(string accountId, string businessMessagesLinkId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/businessmessageslinks/"+ (businessMessagesLinkId==null? "" : System.Uri.EscapeDataString(businessMessagesLinkId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<BusinessMessagesLink>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Uploads credentials for the Merchant Center account. If credentials already exist for this Merchant Center account and purpose, this method updates them.
		/// Content_accounts_credentials_create accounts/{accountId}/credentials
		/// </summary>
		/// <param name="accountId">Required. The merchant id of the account these credentials belong to.</param>
		/// <returns>Successful response</returns>
		public async Task<AccountCredentials> Content_accounts_credentials_createAsync(string accountId, AccountCredentials requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/credentials";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AccountCredentials>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists the labels assigned to an account.
		/// Content_accounts_labels_list accounts/{accountId}/labels
		/// </summary>
		/// <param name="accountId">Required. The account id for whose labels are to be listed.</param>
		/// <param name="pageSize">The maximum number of labels to return. The service may return fewer than this value. If unspecified, at most 50 labels will be returned. The maximum value is 1000; values above 1000 will be coerced to 1000.</param>
		/// <param name="pageToken">A page token, received from a previous `ListAccountLabels` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListAccountLabels` must match the call that provided the page token.</param>
		/// <returns>Successful response</returns>
		public async Task<ListAccountLabelsResponse> Content_accounts_labels_listAsync(string accountId, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/labels&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListAccountLabelsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a new label, not assigned to any account.
		/// Content_accounts_labels_create accounts/{accountId}/labels
		/// </summary>
		/// <param name="accountId">Required. The id of the account this label belongs to.</param>
		/// <returns>Successful response</returns>
		public async Task<AccountLabel> Content_accounts_labels_createAsync(string accountId, AccountLabel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/labels";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AccountLabel>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes a label and removes it from all accounts to which it was assigned.
		/// Content_accounts_labels_delete accounts/{accountId}/labels/{labelId}
		/// </summary>
		/// <param name="accountId">Required. The id of the account that owns the label.</param>
		/// <param name="labelId">Required. The id of the label to delete.</param>
		/// <returns>Successful response</returns>
		public async Task Content_accounts_labels_deleteAsync(string accountId, string labelId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/labels/"+ (labelId==null? "" : System.Uri.EscapeDataString(labelId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Updates a label.
		/// Content_accounts_labels_patch accounts/{accountId}/labels/{labelId}
		/// </summary>
		/// <param name="accountId">Required. The id of the account this label belongs to.</param>
		/// <param name="labelId">Required. The id of the label to update.</param>
		/// <returns>Successful response</returns>
		public async Task<AccountLabel> Content_accounts_labels_patchAsync(string accountId, string labelId, AccountLabel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/labels/"+ (labelId==null? "" : System.Uri.EscapeDataString(labelId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AccountLabel>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists available return carriers in the merchant account.
		/// Content_accounts_returncarrier_list accounts/{accountId}/returncarrier
		/// </summary>
		/// <param name="accountId">Required. The Merchant Center Account Id under which the Return Carrier is to be linked.</param>
		/// <returns>Successful response</returns>
		public async Task<ListAccountReturnCarrierResponse> Content_accounts_returncarrier_listAsync(string accountId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/returncarrier";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListAccountReturnCarrierResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Links return carrier to a merchant account.
		/// Content_accounts_returncarrier_create accounts/{accountId}/returncarrier
		/// </summary>
		/// <param name="accountId">Required. The Merchant Center Account Id under which the Return Carrier is to be linked.</param>
		/// <returns>Successful response</returns>
		public async Task<AccountReturnCarrier> Content_accounts_returncarrier_createAsync(string accountId, AccountReturnCarrier requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/returncarrier";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AccountReturnCarrier>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Delete a return carrier in the merchant account.
		/// Content_accounts_returncarrier_delete accounts/{accountId}/returncarrier/{carrierAccountId}
		/// </summary>
		/// <param name="accountId">Required. The Merchant Center Account Id under which the Return Carrier is to be linked.</param>
		/// <param name="carrierAccountId">Required. The Google-provided unique carrier ID, used to update the resource.</param>
		/// <returns>Successful response</returns>
		public async Task Content_accounts_returncarrier_deleteAsync(string accountId, string carrierAccountId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/returncarrier/"+ (carrierAccountId==null? "" : System.Uri.EscapeDataString(carrierAccountId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Updates a return carrier in the merchant account.
		/// Content_accounts_returncarrier_patch accounts/{accountId}/returncarrier/{carrierAccountId}
		/// </summary>
		/// <param name="accountId">Required. The Merchant Center Account Id under which the Return Carrier is to be linked.</param>
		/// <param name="carrierAccountId">Required. The Google-provided unique carrier ID, used to update the resource.</param>
		/// <returns>Successful response</returns>
		public async Task<AccountReturnCarrier> Content_accounts_returncarrier_patchAsync(string accountId, string carrierAccountId, AccountReturnCarrier requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/returncarrier/"+ (carrierAccountId==null? "" : System.Uri.EscapeDataString(carrierAccountId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AccountReturnCarrier>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves multiple Merchant Center account statuses in a single request.
		/// Content_accountstatuses_custombatch accountstatuses/batch
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<AccountstatusesCustomBatchResponse> Content_accountstatuses_custombatchAsync(AccountstatusesCustomBatchRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "accountstatuses/batch";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AccountstatusesCustomBatchResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves and updates tax settings of multiple accounts in a single request.
		/// Content_accounttax_custombatch accounttax/batch
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<AccounttaxCustomBatchResponse> Content_accounttax_custombatchAsync(AccounttaxCustomBatchRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "accounttax/batch";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AccounttaxCustomBatchResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes, fetches, gets, inserts and updates multiple datafeeds in a single request.
		/// Content_datafeeds_custombatch datafeeds/batch
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<DatafeedsCustomBatchResponse> Content_datafeeds_custombatchAsync(DatafeedsCustomBatchRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "datafeeds/batch";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DatafeedsCustomBatchResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets multiple Merchant Center datafeed statuses in a single request.
		/// Content_datafeedstatuses_custombatch datafeedstatuses/batch
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<DatafeedstatusesCustomBatchResponse> Content_datafeedstatuses_custombatchAsync(DatafeedstatusesCustomBatchRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "datafeedstatuses/batch";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DatafeedstatusesCustomBatchResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves and/or updates the LIA settings of multiple accounts in a single request.
		/// Content_liasettings_custombatch liasettings/batch
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<LiasettingsCustomBatchResponse> Content_liasettings_custombatchAsync(LiasettingsCustomBatchRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "liasettings/batch";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<LiasettingsCustomBatchResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the list of POS data providers that have active settings for the all eiligible countries.
		/// Content_liasettings_listposdataproviders liasettings/posdataproviders
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<LiasettingsListPosDataProvidersResponse> Content_liasettings_listposdataprovidersAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "liasettings/posdataproviders";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<LiasettingsListPosDataProvidersResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Updates local inventory for multiple products or stores in a single request.
		/// Content_localinventory_custombatch localinventory/batch
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<LocalinventoryCustomBatchResponse> Content_localinventory_custombatchAsync(LocalinventoryCustomBatchRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "localinventory/batch";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<LocalinventoryCustomBatchResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Batches multiple POS-related calls in a single request.
		/// Content_pos_custombatch pos/batch
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<PosCustomBatchResponse> Content_pos_custombatchAsync(PosCustomBatchRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "pos/batch";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<PosCustomBatchResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves, inserts, and deletes multiple products in a single request.
		/// Content_products_custombatch products/batch
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<ProductsCustomBatchResponse> Content_products_custombatchAsync(ProductsCustomBatchRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "products/batch";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ProductsCustomBatchResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets the statuses of multiple products in a single request.
		/// Content_productstatuses_custombatch productstatuses/batch
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<ProductstatusesCustomBatchResponse> Content_productstatuses_custombatchAsync(ProductstatusesCustomBatchRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "productstatuses/batch";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ProductstatusesCustomBatchResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Updates regional inventory for multiple products or regions in a single request.
		/// Content_regionalinventory_custombatch regionalinventory/batch
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<RegionalinventoryCustomBatchResponse> Content_regionalinventory_custombatchAsync(RegionalinventoryCustomBatchRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "regionalinventory/batch";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<RegionalinventoryCustomBatchResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Batches multiple return address related calls in a single request.
		/// Content_returnaddress_custombatch returnaddress/batch
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<ReturnaddressCustomBatchResponse> Content_returnaddress_custombatchAsync(ReturnaddressCustomBatchRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "returnaddress/batch";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ReturnaddressCustomBatchResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Batches multiple return policy related calls in a single request.
		/// Content_returnpolicy_custombatch returnpolicy/batch
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<ReturnpolicyCustomBatchResponse> Content_returnpolicy_custombatchAsync(ReturnpolicyCustomBatchRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "returnpolicy/batch";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ReturnpolicyCustomBatchResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves and updates the shipping settings of multiple accounts in a single request.
		/// Content_shippingsettings_custombatch shippingsettings/batch
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<ShippingsettingsCustomBatchResponse> Content_shippingsettings_custombatchAsync(ShippingsettingsCustomBatchRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "shippingsettings/batch";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ShippingsettingsCustomBatchResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists CSS domains affiliated with a CSS group.
		/// Content_csses_list {cssGroupId}/csses
		/// </summary>
		/// <param name="cssGroupId">Required. The CSS group ID of CSS domains to be listed.</param>
		/// <param name="pageSize">The maximum number of CSS domains to return. The service may return fewer than this value. If unspecified, at most 50 CSS domains will be returned. The maximum value is 1000; values above 1000 will be coerced to 1000.</param>
		/// <param name="pageToken">A page token, received from a previous `ListCsses` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListCsses` must match the call that provided the page token.</param>
		/// <returns>Successful response</returns>
		public async Task<ListCssesResponse> Content_csses_listAsync(string cssGroupId, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (cssGroupId==null? "" : System.Uri.EscapeDataString(cssGroupId))+"/csses&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListCssesResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a single CSS domain by ID.
		/// Content_csses_get {cssGroupId}/csses/{cssDomainId}
		/// </summary>
		/// <param name="cssGroupId">Required. The ID of the managing account. If this parameter is not the same as [cssDomainId](#cssDomainId), then this ID must be a CSS group ID and `cssDomainId` must be the ID of a CSS domain affiliated with this group.</param>
		/// <param name="cssDomainId">Required. The ID of the CSS domain to return.</param>
		/// <returns>Successful response</returns>
		public async Task<Css> Content_csses_getAsync(string cssGroupId, string cssDomainId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (cssGroupId==null? "" : System.Uri.EscapeDataString(cssGroupId))+"/csses/"+ (cssDomainId==null? "" : System.Uri.EscapeDataString(cssDomainId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Css>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Updates labels that are assigned to a CSS domain by its CSS group.
		/// Content_csses_updatelabels {cssGroupId}/csses/{cssDomainId}/updatelabels
		/// </summary>
		/// <param name="cssGroupId">Required. The CSS group ID of the updated CSS domain.</param>
		/// <param name="cssDomainId">Required. The ID of the updated CSS domain.</param>
		/// <returns>Successful response</returns>
		public async Task<Css> Content_csses_updatelabelsAsync(string cssGroupId, string cssDomainId, LabelIds requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (cssGroupId==null? "" : System.Uri.EscapeDataString(cssGroupId))+"/csses/"+ (cssDomainId==null? "" : System.Uri.EscapeDataString(cssDomainId))+"/updatelabels";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Css>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists the sub-accounts in your Merchant Center account.
		/// Content_accounts_list {merchantId}/accounts
		/// </summary>
		/// <param name="merchantId">The ID of the managing account. This must be a multi-client account.</param>
		/// <param name="label">If view is set to "css", only return accounts that are assigned label with given ID.</param>
		/// <param name="maxResults">The maximum number of accounts to return in the response, used for paging.</param>
		/// <param name="name">If set, only the accounts with the given name (case sensitive) will be returned.</param>
		/// <param name="pageToken">The token returned by the previous request.</param>
		/// <param name="view">Controls which fields will be populated. Acceptable values are: "merchant" and "css". The default value is "merchant".</param>
		/// <returns>Successful response</returns>
		public async Task<AccountsListResponse> Content_accounts_listAsync(string merchantId, string label, int maxResults, string name, string pageToken, Content_accounts_listView view, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/accounts&label=" + (label==null? "" : System.Uri.EscapeDataString(label))+"&maxResults="+maxResults+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&view=" + view;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AccountsListResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a Merchant Center sub-account.
		/// Content_accounts_insert {merchantId}/accounts
		/// </summary>
		/// <param name="merchantId">The ID of the managing account. This must be a multi-client account.</param>
		/// <returns>Successful response</returns>
		public async Task<Account> Content_accounts_insertAsync(string merchantId, Account requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/accounts";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Account>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes a Merchant Center sub-account.
		/// Content_accounts_delete {merchantId}/accounts/{accountId}
		/// </summary>
		/// <param name="merchantId">The ID of the managing account. This must be a multi-client account, and accountId must be the ID of a sub-account of this account.</param>
		/// <param name="accountId">The ID of the account.</param>
		/// <param name="force">Option to delete sub-accounts with products. The default value is false.</param>
		/// <returns>Successful response</returns>
		public async Task Content_accounts_deleteAsync(string merchantId, string accountId, bool force, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"&force="+force;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a Merchant Center account.
		/// Content_accounts_get {merchantId}/accounts/{accountId}
		/// </summary>
		/// <param name="merchantId">The ID of the managing account. If this parameter is not the same as accountId, then this account must be a multi-client account and `accountId` must be the ID of a sub-account of this account.</param>
		/// <param name="accountId">The ID of the account.</param>
		/// <param name="view">Controls which fields will be populated. Acceptable values are: "merchant" and "css". The default value is "merchant".</param>
		/// <returns>Successful response</returns>
		public async Task<Account> Content_accounts_getAsync(string merchantId, string accountId, Content_accounts_listView view, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"&view=" + view;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Account>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Updates a Merchant Center account. Any fields that are not provided are deleted from the resource.
		/// Content_accounts_update {merchantId}/accounts/{accountId}
		/// </summary>
		/// <param name="merchantId">The ID of the managing account. If this parameter is not the same as accountId, then this account must be a multi-client account and `accountId` must be the ID of a sub-account of this account.</param>
		/// <param name="accountId">The ID of the account.</param>
		/// <returns>Successful response</returns>
		public async Task<Account> Content_accounts_updateAsync(string merchantId, string accountId, Account requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Account>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Claims the website of a Merchant Center sub-account. Merchant accounts with approved third-party CSSs aren't required to claim a website.
		/// Content_accounts_claimwebsite {merchantId}/accounts/{accountId}/claimwebsite
		/// </summary>
		/// <param name="merchantId">The ID of the managing account. If this parameter is not the same as accountId, then this account must be a multi-client account and `accountId` must be the ID of a sub-account of this account.</param>
		/// <param name="accountId">The ID of the account whose website is claimed.</param>
		/// <param name="overwrite">Only available to selected merchants, for example multi-client accounts (MCAs) and their sub-accounts. When set to `True`, this option removes any existing claim on the requested website and replaces it with a claim from the account that makes the request.</param>
		/// <returns>Successful response</returns>
		public async Task<AccountsClaimWebsiteResponse> Content_accounts_claimwebsiteAsync(string merchantId, string accountId, bool overwrite, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/claimwebsite&overwrite="+overwrite;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AccountsClaimWebsiteResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Performs an action on a link between two Merchant Center accounts, namely accountId and linkedAccountId.
		/// Content_accounts_link {merchantId}/accounts/{accountId}/link
		/// </summary>
		/// <param name="merchantId">The ID of the managing account. If this parameter is not the same as accountId, then this account must be a multi-client account and `accountId` must be the ID of a sub-account of this account.</param>
		/// <param name="accountId">The ID of the account that should be linked.</param>
		/// <returns>Successful response</returns>
		public async Task<AccountsLinkResponse> Content_accounts_linkAsync(string merchantId, string accountId, AccountsLinkRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/link";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AccountsLinkResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns the list of accounts linked to your Merchant Center account.
		/// Content_accounts_listlinks {merchantId}/accounts/{accountId}/listlinks
		/// </summary>
		/// <param name="merchantId">The ID of the managing account. If this parameter is not the same as accountId, then this account must be a multi-client account and `accountId` must be the ID of a sub-account of this account.</param>
		/// <param name="accountId">The ID of the account for which to list links.</param>
		/// <param name="maxResults">The maximum number of links to return in the response, used for pagination. The minimum allowed value is 5 results per page. If provided value is lower than 5, it will be automatically increased to 5.</param>
		/// <param name="pageToken">The token returned by the previous request.</param>
		/// <returns>Successful response</returns>
		public async Task<AccountsListLinksResponse> Content_accounts_listlinksAsync(string merchantId, string accountId, int maxResults, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/listlinks&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AccountsListLinksResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Request verification code to start phone verification.
		/// Content_accounts_requestphoneverification {merchantId}/accounts/{accountId}/requestphoneverification
		/// </summary>
		/// <param name="merchantId">Required. The ID of the managing account. If this parameter is not the same as accountId, then this account must be a multi-client account and accountId must be the ID of a sub-account of this account.</param>
		/// <param name="accountId">Required. The ID of the account.</param>
		/// <returns>Successful response</returns>
		public async Task<RequestPhoneVerificationResponse> Content_accounts_requestphoneverificationAsync(string merchantId, string accountId, RequestPhoneVerificationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/requestphoneverification";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<RequestPhoneVerificationResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Updates labels that are assigned to the Merchant Center account by CSS user.
		/// Content_accounts_updatelabels {merchantId}/accounts/{accountId}/updatelabels
		/// </summary>
		/// <param name="merchantId">The ID of the managing account.</param>
		/// <param name="accountId">The ID of the account whose labels are updated.</param>
		/// <returns>Successful response</returns>
		public async Task<AccountsUpdateLabelsResponse> Content_accounts_updatelabelsAsync(string merchantId, string accountId, AccountsUpdateLabelsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/updatelabels";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AccountsUpdateLabelsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Validates verification code to verify phone number for the account. If successful this will overwrite the value of `accounts.businessinformation.phoneNumber`. Only verified phone number will replace an existing verified phone number.
		/// Content_accounts_verifyphonenumber {merchantId}/accounts/{accountId}/verifyphonenumber
		/// </summary>
		/// <param name="merchantId">Required. The ID of the managing account. If this parameter is not the same as accountId, then this account must be a multi-client account and accountId must be the ID of a sub-account of this account.</param>
		/// <param name="accountId">Required. The ID of the account.</param>
		/// <returns>Successful response</returns>
		public async Task<VerifyPhoneNumberResponse> Content_accounts_verifyphonenumberAsync(string merchantId, string accountId, VerifyPhoneNumberRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/verifyphonenumber";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<VerifyPhoneNumberResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists the statuses of the sub-accounts in your Merchant Center account.
		/// Content_accountstatuses_list {merchantId}/accountstatuses
		/// </summary>
		/// <param name="merchantId">The ID of the managing account. This must be a multi-client account.</param>
		/// <param name="destinations">If set, only issues for the specified destinations are returned, otherwise only issues for the Shopping destination.</param>
		/// <param name="maxResults">The maximum number of account statuses to return in the response, used for paging.</param>
		/// <param name="name">If set, only the accounts with the given name (case sensitive) will be returned.</param>
		/// <param name="pageToken">The token returned by the previous request.</param>
		/// <returns>Successful response</returns>
		public async Task<AccountstatusesListResponse> Content_accountstatuses_listAsync(string merchantId, string[] destinations, int maxResults, string name, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/accountstatuses&"+string.Join("&", destinations.Select(z => $"destinations={System.Uri.EscapeDataString(z.ToString())}"))+"&maxResults="+maxResults+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AccountstatusesListResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the status of a Merchant Center account. No itemLevelIssues are returned for multi-client accounts.
		/// Content_accountstatuses_get {merchantId}/accountstatuses/{accountId}
		/// </summary>
		/// <param name="merchantId">The ID of the managing account. If this parameter is not the same as accountId, then this account must be a multi-client account and `accountId` must be the ID of a sub-account of this account.</param>
		/// <param name="accountId">The ID of the account.</param>
		/// <param name="destinations">If set, only issues for the specified destinations are returned, otherwise only issues for the Shopping destination.</param>
		/// <returns>Successful response</returns>
		public async Task<AccountStatus> Content_accountstatuses_getAsync(string merchantId, string accountId, string[] destinations, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/accountstatuses/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"&"+string.Join("&", destinations.Select(z => $"destinations={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AccountStatus>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists the tax settings of the sub-accounts in your Merchant Center account.
		/// Content_accounttax_list {merchantId}/accounttax
		/// </summary>
		/// <param name="merchantId">The ID of the managing account. This must be a multi-client account.</param>
		/// <param name="maxResults">The maximum number of tax settings to return in the response, used for paging.</param>
		/// <param name="pageToken">The token returned by the previous request.</param>
		/// <returns>Successful response</returns>
		public async Task<AccounttaxListResponse> Content_accounttax_listAsync(string merchantId, int maxResults, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/accounttax&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AccounttaxListResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the tax settings of the account.
		/// Content_accounttax_get {merchantId}/accounttax/{accountId}
		/// </summary>
		/// <param name="merchantId">The ID of the managing account. If this parameter is not the same as accountId, then this account must be a multi-client account and `accountId` must be the ID of a sub-account of this account.</param>
		/// <param name="accountId">The ID of the account for which to get/update account tax settings.</param>
		/// <returns>Successful response</returns>
		public async Task<AccountTax> Content_accounttax_getAsync(string merchantId, string accountId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/accounttax/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AccountTax>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Updates the tax settings of the account. Any fields that are not provided are deleted from the resource.
		/// Content_accounttax_update {merchantId}/accounttax/{accountId}
		/// </summary>
		/// <param name="merchantId">The ID of the managing account. If this parameter is not the same as accountId, then this account must be a multi-client account and `accountId` must be the ID of a sub-account of this account.</param>
		/// <param name="accountId">The ID of the account for which to get/update account tax settings.</param>
		/// <returns>Successful response</returns>
		public async Task<AccountTax> Content_accounttax_updateAsync(string merchantId, string accountId, AccountTax requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/accounttax/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AccountTax>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a status of the BoG program for your Merchant Center account.
		/// Content_buyongoogleprograms_get {merchantId}/buyongoogleprograms/{regionCode}
		/// </summary>
		/// <param name="merchantId">Required. The ID of the account.</param>
		/// <param name="regionCode">Required. The Program region code [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). Currently only US is available.</param>
		/// <returns>Successful response</returns>
		public async Task<BuyOnGoogleProgramStatus> Content_buyongoogleprograms_getAsync(string merchantId, string regionCode, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/buyongoogleprograms/"+ (regionCode==null? "" : System.Uri.EscapeDataString(regionCode));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<BuyOnGoogleProgramStatus>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Updates the status of the BoG program for your Merchant Center account.
		/// Content_buyongoogleprograms_patch {merchantId}/buyongoogleprograms/{regionCode}
		/// </summary>
		/// <param name="merchantId">Required. The ID of the account.</param>
		/// <param name="regionCode">Required. The program region code [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). Currently only US is available.</param>
		/// <param name="updateMask">The list of fields to update. If the update mask is not provided, then all the fields set in buyOnGoogleProgramStatus will be updated. Clearing fields is only possible if update mask is provided.</param>
		/// <returns>Successful response</returns>
		public async Task<BuyOnGoogleProgramStatus> Content_buyongoogleprograms_patchAsync(string merchantId, string regionCode, string updateMask, BuyOnGoogleProgramStatus requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/buyongoogleprograms/"+ (regionCode==null? "" : System.Uri.EscapeDataString(regionCode))+"&updateMask=" + (updateMask==null? "" : System.Uri.EscapeDataString(updateMask));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<BuyOnGoogleProgramStatus>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Reactivates the BoG program in your Merchant Center account. Moves the program to the active state when allowed, for example, when paused. This method is only available to selected merchants.
		/// Content_buyongoogleprograms_activate {merchantId}/buyongoogleprograms/{regionCode}/activate
		/// </summary>
		/// <param name="merchantId">Required. The ID of the account.</param>
		/// <param name="regionCode">Required. The program region code [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). Currently only US is available.</param>
		/// <returns>Successful response</returns>
		public async Task Content_buyongoogleprograms_activateAsync(string merchantId, string regionCode, ActivateBuyOnGoogleProgramRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/buyongoogleprograms/"+ (regionCode==null? "" : System.Uri.EscapeDataString(regionCode))+"/activate";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Onboards the BoG program in your Merchant Center account. By using this method, you agree to the [Terms of Service](https://merchants.google.com/mc/termsofservice/transactions/US/latest). Calling this method is only possible if the authenticated account is the same as the merchant id in the request. Calling this method multiple times will only accept Terms of Service if the latest version is not currently signed.
		/// Content_buyongoogleprograms_onboard {merchantId}/buyongoogleprograms/{regionCode}/onboard
		/// </summary>
		/// <param name="merchantId">Required. The ID of the account.</param>
		/// <param name="regionCode">Required. The program region code [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). Currently only US is available.</param>
		/// <returns>Successful response</returns>
		public async Task Content_buyongoogleprograms_onboardAsync(string merchantId, string regionCode, OnboardBuyOnGoogleProgramRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/buyongoogleprograms/"+ (regionCode==null? "" : System.Uri.EscapeDataString(regionCode))+"/onboard";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Pauses the BoG program in your Merchant Center account. This method is only available to selected merchants.
		/// Content_buyongoogleprograms_pause {merchantId}/buyongoogleprograms/{regionCode}/pause
		/// </summary>
		/// <param name="merchantId">Required. The ID of the account.</param>
		/// <param name="regionCode">Required. The program region code [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). Currently only US is available.</param>
		/// <returns>Successful response</returns>
		public async Task Content_buyongoogleprograms_pauseAsync(string merchantId, string regionCode, PauseBuyOnGoogleProgramRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/buyongoogleprograms/"+ (regionCode==null? "" : System.Uri.EscapeDataString(regionCode))+"/pause";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Requests review and then activates the BoG program in your Merchant Center account for the first time. Moves the program to the REVIEW_PENDING state. This method is only available to selected merchants.
		/// Content_buyongoogleprograms_requestreview {merchantId}/buyongoogleprograms/{regionCode}/requestreview
		/// </summary>
		/// <param name="merchantId">Required. The ID of the account.</param>
		/// <param name="regionCode">Required. The program region code [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). Currently only US is available.</param>
		/// <returns>Successful response</returns>
		public async Task Content_buyongoogleprograms_requestreviewAsync(string merchantId, string regionCode, RequestReviewBuyOnGoogleProgramRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/buyongoogleprograms/"+ (regionCode==null? "" : System.Uri.EscapeDataString(regionCode))+"/requestreview";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists the collections in your Merchant Center account. The response might contain fewer items than specified by page_size. Rely on next_page_token to determine if there are more items to be requested.
		/// Content_collections_list {merchantId}/collections
		/// </summary>
		/// <param name="merchantId">Required. The ID of the account that contains the collection. This account cannot be a multi-client account.</param>
		/// <param name="pageSize">The maximum number of collections to return in the response, used for paging. Defaults to 50; values above 1000 will be coerced to 1000.</param>
		/// <param name="pageToken">Token (if provided) to retrieve the subsequent page. All other parameters must match the original call that provided the page token.</param>
		/// <returns>Successful response</returns>
		public async Task<ListCollectionsResponse> Content_collections_listAsync(string merchantId, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/collections&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListCollectionsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Uploads a collection to your Merchant Center account. If a collection with the same collectionId already exists, this method updates that entry. In each update, the collection is completely replaced by the fields in the body of the update request.
		/// Content_collections_create {merchantId}/collections
		/// </summary>
		/// <param name="merchantId">Required. The ID of the account that contains the collection. This account cannot be a multi-client account.</param>
		/// <returns>Successful response</returns>
		public async Task<Collection> Content_collections_createAsync(string merchantId, Collection requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/collections";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Collection>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes a collection from your Merchant Center account.
		/// Content_collections_delete {merchantId}/collections/{collectionId}
		/// </summary>
		/// <param name="merchantId">Required. The ID of the account that contains the collection. This account cannot be a multi-client account.</param>
		/// <param name="collectionId">Required. The collectionId of the collection. CollectionId is the same as the REST ID of the collection.</param>
		/// <returns>Successful response</returns>
		public async Task Content_collections_deleteAsync(string merchantId, string collectionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/collections/"+ (collectionId==null? "" : System.Uri.EscapeDataString(collectionId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a collection from your Merchant Center account.
		/// Content_collections_get {merchantId}/collections/{collectionId}
		/// </summary>
		/// <param name="merchantId">Required. The ID of the account that contains the collection. This account cannot be a multi-client account.</param>
		/// <param name="collectionId">Required. The REST ID of the collection.</param>
		/// <returns>Successful response</returns>
		public async Task<Collection> Content_collections_getAsync(string merchantId, string collectionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/collections/"+ (collectionId==null? "" : System.Uri.EscapeDataString(collectionId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Collection>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists the statuses of the collections in your Merchant Center account.
		/// Content_collectionstatuses_list {merchantId}/collectionstatuses
		/// </summary>
		/// <param name="merchantId">Required. The ID of the account that contains the collection. This account cannot be a multi-client account.</param>
		/// <param name="pageSize">The maximum number of collection statuses to return in the response, used for paging. Defaults to 50; values above 1000 will be coerced to 1000.</param>
		/// <param name="pageToken">Token (if provided) to retrieve the subsequent page. All other parameters must match the original call that provided the page token.</param>
		/// <returns>Successful response</returns>
		public async Task<ListCollectionStatusesResponse> Content_collectionstatuses_listAsync(string merchantId, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/collectionstatuses&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListCollectionStatusesResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets the status of a collection from your Merchant Center account.
		/// Content_collectionstatuses_get {merchantId}/collectionstatuses/{collectionId}
		/// </summary>
		/// <param name="merchantId">Required. The ID of the account that contains the collection. This account cannot be a multi-client account.</param>
		/// <param name="collectionId">Required. The collectionId of the collection. CollectionId is the same as the REST ID of the collection.</param>
		/// <returns>Successful response</returns>
		public async Task<CollectionStatus> Content_collectionstatuses_getAsync(string merchantId, string collectionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/collectionstatuses/"+ (collectionId==null? "" : System.Uri.EscapeDataString(collectionId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CollectionStatus>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the list of conversion sources the caller has access to.
		/// Content_conversionsources_list {merchantId}/conversionsources
		/// </summary>
		/// <param name="merchantId">Required. The ID of the account that owns the new conversion source.</param>
		/// <param name="pageSize">The maximum number of conversion sources to return in a page. If no `page_size` is specified, `100` is used as the default value. The maximum value is `200`. Values above `200` will be coerced to `200`. Regardless of pagination, at most `200` conversion sources are returned in total.</param>
		/// <param name="pageToken">Page token.</param>
		/// <param name="showDeleted">If true, also returns archived conversion sources.</param>
		/// <returns>Successful response</returns>
		public async Task<ListConversionSourcesResponse> Content_conversionsources_listAsync(string merchantId, int pageSize, string pageToken, bool showDeleted, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/conversionsources&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&showDeleted="+showDeleted;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListConversionSourcesResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a new conversion source.
		/// Content_conversionsources_create {merchantId}/conversionsources
		/// </summary>
		/// <param name="merchantId">Required. The ID of the account that owns the new conversion source.</param>
		/// <returns>Successful response</returns>
		public async Task<ConversionSource> Content_conversionsources_createAsync(string merchantId, ConversionSource requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/conversionsources";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ConversionSource>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Archives an existing conversion source. It will be recoverable for 30 days. This archiving behavior is not typical in the Content API and unique to this service.
		/// Content_conversionsources_delete {merchantId}/conversionsources/{conversionSourceId}
		/// </summary>
		/// <param name="merchantId">Required. The ID of the account that owns the new conversion source.</param>
		/// <param name="conversionSourceId">Required. The ID of the conversion source to be deleted.</param>
		/// <returns>Successful response</returns>
		public async Task Content_conversionsources_deleteAsync(string merchantId, string conversionSourceId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/conversionsources/"+ (conversionSourceId==null? "" : System.Uri.EscapeDataString(conversionSourceId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Fetches a conversion source.
		/// Content_conversionsources_get {merchantId}/conversionsources/{conversionSourceId}
		/// </summary>
		/// <param name="merchantId">Required. The ID of the account that owns the new conversion source.</param>
		/// <param name="conversionSourceId">Required. The REST ID of the collection.</param>
		/// <returns>Successful response</returns>
		public async Task<ConversionSource> Content_conversionsources_getAsync(string merchantId, string conversionSourceId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/conversionsources/"+ (conversionSourceId==null? "" : System.Uri.EscapeDataString(conversionSourceId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ConversionSource>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Updates information of an existing conversion source.
		/// Content_conversionsources_patch {merchantId}/conversionsources/{conversionSourceId}
		/// </summary>
		/// <param name="merchantId">Required. The ID of the account that owns the new conversion source.</param>
		/// <param name="conversionSourceId">Required. The ID of the conversion source to be updated.</param>
		/// <param name="updateMask">Required. List of fields being updated.</param>
		/// <returns>Successful response</returns>
		public async Task<ConversionSource> Content_conversionsources_patchAsync(string merchantId, string conversionSourceId, string updateMask, ConversionSource requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/conversionsources/"+ (conversionSourceId==null? "" : System.Uri.EscapeDataString(conversionSourceId))+"&updateMask=" + (updateMask==null? "" : System.Uri.EscapeDataString(updateMask));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ConversionSource>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Re-enables an archived conversion source.
		/// Content_conversionsources_undelete {merchantId}/conversionsources/{conversionSourceId}:undelete
		/// </summary>
		/// <param name="merchantId">Required. The ID of the account that owns the new conversion source.</param>
		/// <param name="conversionSourceId">Required. The ID of the conversion source to be undeleted.</param>
		/// <returns>Successful response</returns>
		public async Task Content_conversionsources_undeleteAsync(string merchantId, string conversionSourceId, UndeleteConversionSourceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/conversionsources/"+ (conversionSourceId==null? "" : System.Uri.EscapeDataString(conversionSourceId))+":undelete";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists the configurations for datafeeds in your Merchant Center account.
		/// Content_datafeeds_list {merchantId}/datafeeds
		/// </summary>
		/// <param name="merchantId">The ID of the account that manages the datafeeds. This account cannot be a multi-client account.</param>
		/// <param name="maxResults">The maximum number of products to return in the response, used for paging.</param>
		/// <param name="pageToken">The token returned by the previous request.</param>
		/// <returns>Successful response</returns>
		public async Task<DatafeedsListResponse> Content_datafeeds_listAsync(string merchantId, int maxResults, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/datafeeds&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DatafeedsListResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Registers a datafeed configuration with your Merchant Center account.
		/// Content_datafeeds_insert {merchantId}/datafeeds
		/// </summary>
		/// <param name="merchantId">The ID of the account that manages the datafeed. This account cannot be a multi-client account.</param>
		/// <returns>Successful response</returns>
		public async Task<Datafeed> Content_datafeeds_insertAsync(string merchantId, Datafeed requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/datafeeds";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Datafeed>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes a datafeed configuration from your Merchant Center account.
		/// Content_datafeeds_delete {merchantId}/datafeeds/{datafeedId}
		/// </summary>
		/// <param name="merchantId">The ID of the account that manages the datafeed. This account cannot be a multi-client account.</param>
		/// <param name="datafeedId">The ID of the datafeed.</param>
		/// <returns>Successful response</returns>
		public async Task Content_datafeeds_deleteAsync(string merchantId, string datafeedId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/datafeeds/"+ (datafeedId==null? "" : System.Uri.EscapeDataString(datafeedId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a datafeed configuration from your Merchant Center account.
		/// Content_datafeeds_get {merchantId}/datafeeds/{datafeedId}
		/// </summary>
		/// <param name="merchantId">The ID of the account that manages the datafeed. This account cannot be a multi-client account.</param>
		/// <param name="datafeedId">The ID of the datafeed.</param>
		/// <returns>Successful response</returns>
		public async Task<Datafeed> Content_datafeeds_getAsync(string merchantId, string datafeedId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/datafeeds/"+ (datafeedId==null? "" : System.Uri.EscapeDataString(datafeedId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Datafeed>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Updates a datafeed configuration of your Merchant Center account. Any fields that are not provided are deleted from the resource.
		/// Content_datafeeds_update {merchantId}/datafeeds/{datafeedId}
		/// </summary>
		/// <param name="merchantId">The ID of the account that manages the datafeed. This account cannot be a multi-client account.</param>
		/// <param name="datafeedId">The ID of the datafeed.</param>
		/// <returns>Successful response</returns>
		public async Task<Datafeed> Content_datafeeds_updateAsync(string merchantId, string datafeedId, Datafeed requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/datafeeds/"+ (datafeedId==null? "" : System.Uri.EscapeDataString(datafeedId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Datafeed>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Invokes a fetch for the datafeed in your Merchant Center account. If you need to call this method more than once per day, we recommend you use the [Products service](https://developers.google.com/shopping-content/reference/rest/v2.1/products) to update your product data.
		/// Content_datafeeds_fetchnow {merchantId}/datafeeds/{datafeedId}/fetchNow
		/// </summary>
		/// <param name="merchantId">The ID of the account that manages the datafeed. This account cannot be a multi-client account.</param>
		/// <param name="datafeedId">The ID of the datafeed to be fetched.</param>
		/// <returns>Successful response</returns>
		public async Task<DatafeedsFetchNowResponse> Content_datafeeds_fetchnowAsync(string merchantId, string datafeedId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/datafeeds/"+ (datafeedId==null? "" : System.Uri.EscapeDataString(datafeedId))+"/fetchNow";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DatafeedsFetchNowResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists the statuses of the datafeeds in your Merchant Center account.
		/// Content_datafeedstatuses_list {merchantId}/datafeedstatuses
		/// </summary>
		/// <param name="merchantId">The ID of the account that manages the datafeeds. This account cannot be a multi-client account.</param>
		/// <param name="maxResults">The maximum number of products to return in the response, used for paging.</param>
		/// <param name="pageToken">The token returned by the previous request.</param>
		/// <returns>Successful response</returns>
		public async Task<DatafeedstatusesListResponse> Content_datafeedstatuses_listAsync(string merchantId, int maxResults, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/datafeedstatuses&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DatafeedstatusesListResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the status of a datafeed from your Merchant Center account.
		/// Content_datafeedstatuses_get {merchantId}/datafeedstatuses/{datafeedId}
		/// </summary>
		/// <param name="merchantId">The ID of the account that manages the datafeed. This account cannot be a multi-client account.</param>
		/// <param name="datafeedId">The ID of the datafeed.</param>
		/// <param name="country">Deprecated. Use `feedLabel` instead. The country to get the datafeed status for. If this parameter is provided then `language` must also be provided. Note that this parameter is required for feeds targeting multiple countries and languages, since a feed may have a different status for each target.</param>
		/// <param name="feedLabel">The feed label to get the datafeed status for. If this parameter is provided then `language` must also be provided. Note that this parameter is required for feeds targeting multiple countries and languages, since a feed may have a different status for each target.</param>
		/// <param name="language">The language to get the datafeed status for. If this parameter is provided then `country` must also be provided. Note that this parameter is required for feeds targeting multiple countries and languages, since a feed may have a different status for each target.</param>
		/// <returns>Successful response</returns>
		public async Task<DatafeedStatus> Content_datafeedstatuses_getAsync(string merchantId, string datafeedId, string country, string feedLabel, string language, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/datafeedstatuses/"+ (datafeedId==null? "" : System.Uri.EscapeDataString(datafeedId))+"&country=" + (country==null? "" : System.Uri.EscapeDataString(country))+"&feedLabel=" + (feedLabel==null? "" : System.Uri.EscapeDataString(feedLabel))+"&language=" + (language==null? "" : System.Uri.EscapeDataString(language));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DatafeedStatus>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the status and review eligibility for the free listing program. Returns errors and warnings if they require action to resolve, will become disapprovals, or impact impressions. Use `accountstatuses` to view all issues for an account.
		/// Content_freelistingsprogram_get {merchantId}/freelistingsprogram
		/// </summary>
		/// <param name="merchantId">Required. The ID of the account.</param>
		/// <returns>Successful response</returns>
		public async Task<FreeListingsProgramStatus> Content_freelistingsprogram_getAsync(string merchantId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/freelistingsprogram";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<FreeListingsProgramStatus>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes `Checkout` settings and unenrolls merchant from `Checkout` program.
		/// Content_freelistingsprogram_checkoutsettings_delete {merchantId}/freelistingsprogram/checkoutsettings
		/// </summary>
		/// <param name="merchantId">Required. The ID of the account.</param>
		/// <returns>Successful response</returns>
		public async Task Content_freelistingsprogram_checkoutsettings_deleteAsync(string merchantId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/freelistingsprogram/checkoutsettings";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets Checkout settings for the given merchant. This includes information about review state, enrollment state and URL settings.
		/// Content_freelistingsprogram_checkoutsettings_get {merchantId}/freelistingsprogram/checkoutsettings
		/// </summary>
		/// <param name="merchantId">Required. The ID of the account.</param>
		/// <returns>Successful response</returns>
		public async Task<CheckoutSettings> Content_freelistingsprogram_checkoutsettings_getAsync(string merchantId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/freelistingsprogram/checkoutsettings";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CheckoutSettings>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Enrolls merchant in `Checkout` program.
		/// Content_freelistingsprogram_checkoutsettings_insert {merchantId}/freelistingsprogram/checkoutsettings
		/// </summary>
		/// <param name="merchantId">Required. The ID of the account.</param>
		/// <returns>Successful response</returns>
		public async Task<CheckoutSettings> Content_freelistingsprogram_checkoutsettings_insertAsync(string merchantId, InsertCheckoutSettingsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/freelistingsprogram/checkoutsettings";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CheckoutSettings>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Requests a review of free listings in a specific region. This method deprecated. Use the `MerchantSupportService` to view product and account issues and request a review.
		/// Content_freelistingsprogram_requestreview {merchantId}/freelistingsprogram/requestreview
		/// </summary>
		/// <param name="merchantId">Required. The ID of the account.</param>
		/// <returns>Successful response</returns>
		public async Task Content_freelistingsprogram_requestreviewAsync(string merchantId, RequestReviewFreeListingsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/freelistingsprogram/requestreview";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists the LIA settings of the sub-accounts in your Merchant Center account.
		/// Content_liasettings_list {merchantId}/liasettings
		/// </summary>
		/// <param name="merchantId">The ID of the managing account. This must be a multi-client account.</param>
		/// <param name="maxResults">The maximum number of LIA settings to return in the response, used for paging.</param>
		/// <param name="pageToken">The token returned by the previous request.</param>
		/// <returns>Successful response</returns>
		public async Task<LiasettingsListResponse> Content_liasettings_listAsync(string merchantId, int maxResults, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/liasettings&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<LiasettingsListResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the LIA settings of the account.
		/// Content_liasettings_get {merchantId}/liasettings/{accountId}
		/// </summary>
		/// <param name="merchantId">The ID of the managing account. If this parameter is not the same as accountId, then this account must be a multi-client account and `accountId` must be the ID of a sub-account of this account.</param>
		/// <param name="accountId">The ID of the account for which to get or update LIA settings.</param>
		/// <returns>Successful response</returns>
		public async Task<LiaSettings> Content_liasettings_getAsync(string merchantId, string accountId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/liasettings/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<LiaSettings>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Updates the LIA settings of the account. Any fields that are not provided are deleted from the resource.
		/// Content_liasettings_update {merchantId}/liasettings/{accountId}
		/// </summary>
		/// <param name="merchantId">The ID of the managing account. If this parameter is not the same as accountId, then this account must be a multi-client account and `accountId` must be the ID of a sub-account of this account.</param>
		/// <param name="accountId">The ID of the account for which to get or update LIA settings.</param>
		/// <returns>Successful response</returns>
		public async Task<LiaSettings> Content_liasettings_updateAsync(string merchantId, string accountId, LiaSettings requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/liasettings/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<LiaSettings>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the list of accessible Business Profiles.
		/// Content_liasettings_getaccessiblegmbaccounts {merchantId}/liasettings/{accountId}/accessiblegmbaccounts
		/// </summary>
		/// <param name="merchantId">The ID of the managing account. If this parameter is not the same as accountId, then this account must be a multi-client account and `accountId` must be the ID of a sub-account of this account.</param>
		/// <param name="accountId">The ID of the account for which to retrieve accessible Business Profiles.</param>
		/// <returns>Successful response</returns>
		public async Task<LiasettingsGetAccessibleGmbAccountsResponse> Content_liasettings_getaccessiblegmbaccountsAsync(string merchantId, string accountId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/liasettings/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/accessiblegmbaccounts";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<LiasettingsGetAccessibleGmbAccountsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Requests access to a specified Business Profile.
		/// Content_liasettings_requestgmbaccess {merchantId}/liasettings/{accountId}/requestgmbaccess
		/// </summary>
		/// <param name="merchantId">The ID of the managing account. If this parameter is not the same as accountId, then this account must be a multi-client account and `accountId` must be the ID of a sub-account of this account.</param>
		/// <param name="accountId">The ID of the account for which Business Profile access is requested.</param>
		/// <param name="gmbEmail">The email of the Business Profile.</param>
		/// <returns>Successful response</returns>
		public async Task<LiasettingsRequestGmbAccessResponse> Content_liasettings_requestgmbaccessAsync(string merchantId, string accountId, string gmbEmail, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/liasettings/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/requestgmbaccess&gmbEmail=" + (gmbEmail==null? "" : System.Uri.EscapeDataString(gmbEmail));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<LiasettingsRequestGmbAccessResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Requests inventory validation for the specified country.
		/// Content_liasettings_requestinventoryverification {merchantId}/liasettings/{accountId}/requestinventoryverification/{country}
		/// </summary>
		/// <param name="merchantId">The ID of the managing account. If this parameter is not the same as accountId, then this account must be a multi-client account and `accountId` must be the ID of a sub-account of this account.</param>
		/// <param name="accountId">The ID of the account that manages the order. This cannot be a multi-client account.</param>
		/// <param name="country">The country for which inventory validation is requested.</param>
		/// <returns>Successful response</returns>
		public async Task<LiasettingsRequestInventoryVerificationResponse> Content_liasettings_requestinventoryverificationAsync(string merchantId, string accountId, string country, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/liasettings/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/requestinventoryverification/"+ (country==null? "" : System.Uri.EscapeDataString(country));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<LiasettingsRequestInventoryVerificationResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Sets the inventory verification contract for the specified country.
		/// Content_liasettings_setinventoryverificationcontact {merchantId}/liasettings/{accountId}/setinventoryverificationcontact
		/// </summary>
		/// <param name="merchantId">The ID of the managing account. If this parameter is not the same as accountId, then this account must be a multi-client account and `accountId` must be the ID of a sub-account of this account.</param>
		/// <param name="accountId">The ID of the account that manages the order. This cannot be a multi-client account.</param>
		/// <param name="country">The country for which inventory verification is requested.</param>
		/// <param name="language">The language for which inventory verification is requested.</param>
		/// <param name="contactName">The name of the inventory verification contact.</param>
		/// <param name="contactEmail">The email of the inventory verification contact.</param>
		/// <returns>Successful response</returns>
		public async Task<LiasettingsSetInventoryVerificationContactResponse> Content_liasettings_setinventoryverificationcontactAsync(string merchantId, string accountId, string country, string language, string contactName, string contactEmail, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/liasettings/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/setinventoryverificationcontact&country=" + (country==null? "" : System.Uri.EscapeDataString(country))+"&language=" + (language==null? "" : System.Uri.EscapeDataString(language))+"&contactName=" + (contactName==null? "" : System.Uri.EscapeDataString(contactName))+"&contactEmail=" + (contactEmail==null? "" : System.Uri.EscapeDataString(contactEmail));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<LiasettingsSetInventoryVerificationContactResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Sets the omnichannel experience for the specified country. Only supported for merchants whose POS data provider is trusted to enable the corresponding experience. For more context, see these help articles [about LFP](https://support.google.com/merchants/answer/7676652) and [how to get started](https://support.google.com/merchants/answer/7676578) with it.
		/// Content_liasettings_setomnichannelexperience {merchantId}/liasettings/{accountId}/setomnichannelexperience
		/// </summary>
		/// <param name="merchantId">The ID of the managing account. If this parameter is not the same as accountId, then this account must be a multi-client account and `accountId` must be the ID of a sub-account of this account.</param>
		/// <param name="accountId">The ID of the account for which to retrieve accessible Business Profiles.</param>
		/// <param name="country">The CLDR country code (for example, "US") for which the omnichannel experience is selected.</param>
		/// <param name="lsfType">The Local Store Front (LSF) type for this country. Acceptable values are: - "`ghlsf`" (Google-Hosted Local Store Front) - "`mhlsfBasic`" (Merchant-Hosted Local Store Front Basic) - "`mhlsfFull`" (Merchant-Hosted Local Store Front Full) More details about these types can be found here.</param>
		/// <param name="pickupTypes">The Pickup types for this country. Acceptable values are: - "`pickupToday`" - "`pickupLater`" </param>
		/// <returns>Successful response</returns>
		public async Task<LiaOmnichannelExperience> Content_liasettings_setomnichannelexperienceAsync(string merchantId, string accountId, string country, string lsfType, string[] pickupTypes, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/liasettings/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/setomnichannelexperience&country=" + (country==null? "" : System.Uri.EscapeDataString(country))+"&lsfType=" + (lsfType==null? "" : System.Uri.EscapeDataString(lsfType))+"&"+string.Join("&", pickupTypes.Select(z => $"pickupTypes={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<LiaOmnichannelExperience>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Sets the POS data provider for the specified country.
		/// Content_liasettings_setposdataprovider {merchantId}/liasettings/{accountId}/setposdataprovider
		/// </summary>
		/// <param name="merchantId">The ID of the managing account. If this parameter is not the same as accountId, then this account must be a multi-client account and `accountId` must be the ID of a sub-account of this account.</param>
		/// <param name="accountId">The ID of the account for which to retrieve accessible Business Profiles.</param>
		/// <param name="country">The country for which the POS data provider is selected.</param>
		/// <param name="posDataProviderId">The ID of POS data provider.</param>
		/// <param name="posExternalAccountId">The account ID by which this merchant is known to the POS data provider.</param>
		/// <returns>Successful response</returns>
		public async Task<LiasettingsSetPosDataProviderResponse> Content_liasettings_setposdataproviderAsync(string merchantId, string accountId, string country, string posDataProviderId, string posExternalAccountId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/liasettings/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/setposdataprovider&country=" + (country==null? "" : System.Uri.EscapeDataString(country))+"&posDataProviderId=" + (posDataProviderId==null? "" : System.Uri.EscapeDataString(posDataProviderId))+"&posExternalAccountId=" + (posExternalAccountId==null? "" : System.Uri.EscapeDataString(posExternalAccountId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<LiasettingsSetPosDataProviderResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Provide a list of merchant's issues with a support content and available actions. This content and actions are meant to be rendered and shown in third-party applications.
		/// Content_merchantsupport_renderaccountissues {merchantId}/merchantsupport/renderaccountissues
		/// </summary>
		/// <param name="merchantId">Required. The ID of the account to fetch issues for.</param>
		/// <param name="languageCode">Optional. The [IETF BCP-47](https://tools.ietf.org/html/bcp47) language code used to localize support content. If not set, the result will be in default language `en-US`.</param>
		/// <param name="timeZone">Optional. The [IANA](https://www.iana.org/time-zones) timezone used to localize times in support content. For example 'America/Los_Angeles'. If not set, results will use as a default UTC.</param>
		/// <returns>Successful response</returns>
		public async Task<RenderAccountIssuesResponse> Content_merchantsupport_renderaccountissuesAsync(string merchantId, string languageCode, string timeZone, RenderAccountIssuesRequestPayload requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/merchantsupport/renderaccountissues&languageCode=" + (languageCode==null? "" : System.Uri.EscapeDataString(languageCode))+"&timeZone=" + (timeZone==null? "" : System.Uri.EscapeDataString(timeZone));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<RenderAccountIssuesResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Provide a list of issues for merchant's product with a support content and available actions. This content and actions are meant to be rendered and shown in third-party applications.
		/// Content_merchantsupport_renderproductissues {merchantId}/merchantsupport/renderproductissues/{productId}
		/// </summary>
		/// <param name="merchantId">Required. The ID of the account that contains the product.</param>
		/// <param name="productId">Required. The [REST_ID](https://developers.google.com/shopping-content/reference/rest/v2.1/products#Product.FIELDS.id) of the product to fetch issues for.</param>
		/// <param name="languageCode">Optional. The [IETF BCP-47](https://tools.ietf.org/html/bcp47) language code used to localize support content. If not set, the result will be in default language `en-US`.</param>
		/// <param name="timeZone">Optional. The [IANA](https://www.iana.org/time-zones) timezone used to localize times in support content. For example 'America/Los_Angeles'. If not set, results will use as a default UTC.</param>
		/// <returns>Successful response</returns>
		public async Task<RenderProductIssuesResponse> Content_merchantsupport_renderproductissuesAsync(string merchantId, string productId, string languageCode, string timeZone, RenderProductIssuesRequestPayload requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/merchantsupport/renderproductissues/"+ (productId==null? "" : System.Uri.EscapeDataString(productId))+"&languageCode=" + (languageCode==null? "" : System.Uri.EscapeDataString(languageCode))+"&timeZone=" + (timeZone==null? "" : System.Uri.EscapeDataString(timeZone));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<RenderProductIssuesResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a charge invoice for a shipment group, and triggers a charge capture for orderinvoice enabled orders.
		/// Content_orderinvoices_createchargeinvoice {merchantId}/orderinvoices/{orderId}/createChargeInvoice
		/// </summary>
		/// <param name="merchantId">The ID of the account that manages the order. This cannot be a multi-client account.</param>
		/// <param name="orderId">The ID of the order.</param>
		/// <returns>Successful response</returns>
		public async Task<OrderinvoicesCreateChargeInvoiceResponse> Content_orderinvoices_createchargeinvoiceAsync(string merchantId, string orderId, OrderinvoicesCreateChargeInvoiceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/orderinvoices/"+ (orderId==null? "" : System.Uri.EscapeDataString(orderId))+"/createChargeInvoice";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OrderinvoicesCreateChargeInvoiceResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a refund invoice for one or more shipment groups, and triggers a refund for orderinvoice enabled orders. This can only be used for line items that have previously been charged using `createChargeInvoice`. All amounts (except for the summary) are incremental with respect to the previous invoice.
		/// Content_orderinvoices_createrefundinvoice {merchantId}/orderinvoices/{orderId}/createRefundInvoice
		/// </summary>
		/// <param name="merchantId">The ID of the account that manages the order. This cannot be a multi-client account.</param>
		/// <param name="orderId">The ID of the order.</param>
		/// <returns>Successful response</returns>
		public async Task<OrderinvoicesCreateRefundInvoiceResponse> Content_orderinvoices_createrefundinvoiceAsync(string merchantId, string orderId, OrderinvoicesCreateRefundInvoiceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/orderinvoices/"+ (orderId==null? "" : System.Uri.EscapeDataString(orderId))+"/createRefundInvoice";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OrderinvoicesCreateRefundInvoiceResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a report for disbursements from your Merchant Center account.
		/// Content_orderreports_listdisbursements {merchantId}/orderreports/disbursements
		/// </summary>
		/// <param name="merchantId">The ID of the account that manages the order. This cannot be a multi-client account.</param>
		/// <param name="disbursementEndDate">The last date which disbursements occurred. In ISO 8601 format. Default: current date.</param>
		/// <param name="disbursementStartDate">The first date which disbursements occurred. In ISO 8601 format.</param>
		/// <param name="maxResults">The maximum number of disbursements to return in the response, used for paging.</param>
		/// <param name="pageToken">The token returned by the previous request.</param>
		/// <returns>Successful response</returns>
		public async Task<OrderreportsListDisbursementsResponse> Content_orderreports_listdisbursementsAsync(string merchantId, string disbursementEndDate, string disbursementStartDate, int maxResults, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/orderreports/disbursements&disbursementEndDate=" + (disbursementEndDate==null? "" : System.Uri.EscapeDataString(disbursementEndDate))+"&disbursementStartDate=" + (disbursementStartDate==null? "" : System.Uri.EscapeDataString(disbursementStartDate))+"&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OrderreportsListDisbursementsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a list of transactions for a disbursement from your Merchant Center account.
		/// Content_orderreports_listtransactions {merchantId}/orderreports/disbursements/{disbursementId}/transactions
		/// </summary>
		/// <param name="merchantId">The ID of the account that manages the order. This cannot be a multi-client account.</param>
		/// <param name="disbursementId">The Google-provided ID of the disbursement (found in Wallet).</param>
		/// <param name="maxResults">The maximum number of disbursements to return in the response, used for paging.</param>
		/// <param name="pageToken">The token returned by the previous request.</param>
		/// <param name="transactionEndDate">The last date in which transaction occurred. In ISO 8601 format. Default: current date.</param>
		/// <param name="transactionStartDate">The first date in which transaction occurred. In ISO 8601 format.</param>
		/// <returns>Successful response</returns>
		public async Task<OrderreportsListTransactionsResponse> Content_orderreports_listtransactionsAsync(string merchantId, string disbursementId, int maxResults, string pageToken, string transactionEndDate, string transactionStartDate, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/orderreports/disbursements/"+ (disbursementId==null? "" : System.Uri.EscapeDataString(disbursementId))+"/transactions&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&transactionEndDate=" + (transactionEndDate==null? "" : System.Uri.EscapeDataString(transactionEndDate))+"&transactionStartDate=" + (transactionStartDate==null? "" : System.Uri.EscapeDataString(transactionStartDate));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OrderreportsListTransactionsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists order returns in your Merchant Center account.
		/// Content_orderreturns_list {merchantId}/orderreturns
		/// </summary>
		/// <param name="merchantId">The ID of the account that manages the order. This cannot be a multi-client account.</param>
		/// <param name="acknowledged">Obtains order returns that match the acknowledgement status. When set to true, obtains order returns that have been acknowledged. When false, obtains order returns that have not been acknowledged. When not provided, obtains order returns regardless of their acknowledgement status. We recommend using this filter set to `false`, in conjunction with the `acknowledge` call, such that only un-acknowledged order returns are returned. </param>
		/// <param name="createdEndDate">Obtains order returns created before this date (inclusively), in ISO 8601 format.</param>
		/// <param name="createdStartDate">Obtains order returns created after this date (inclusively), in ISO 8601 format.</param>
		/// <param name="googleOrderIds">Obtains order returns with the specified order ids. If this parameter is provided, createdStartDate, createdEndDate, shipmentType, shipmentStatus, shipmentState and acknowledged parameters must be not set. Note: if googleOrderId and shipmentTrackingNumber parameters are provided, the obtained results will include all order returns that either match the specified order id or the specified tracking number.</param>
		/// <param name="maxResults">The maximum number of order returns to return in the response, used for paging. The default value is 25 returns per page, and the maximum allowed value is 250 returns per page.</param>
		/// <param name="orderBy">Return the results in the specified order.</param>
		/// <param name="pageToken">The token returned by the previous request.</param>
		/// <param name="shipmentStates">Obtains order returns that match any shipment state provided in this parameter. When this parameter is not provided, order returns are obtained regardless of their shipment states.</param>
		/// <param name="shipmentStatus">Obtains order returns that match any shipment status provided in this parameter. When this parameter is not provided, order returns are obtained regardless of their shipment statuses.</param>
		/// <param name="shipmentTrackingNumbers">Obtains order returns with the specified tracking numbers. If this parameter is provided, createdStartDate, createdEndDate, shipmentType, shipmentStatus, shipmentState and acknowledged parameters must be not set. Note: if googleOrderId and shipmentTrackingNumber parameters are provided, the obtained results will include all order returns that either match the specified order id or the specified tracking number.</param>
		/// <param name="shipmentTypes">Obtains order returns that match any shipment type provided in this parameter. When this parameter is not provided, order returns are obtained regardless of their shipment types.</param>
		/// <returns>Successful response</returns>
		public async Task<OrderreturnsListResponse> Content_orderreturns_listAsync(string merchantId, bool acknowledged, string createdEndDate, string createdStartDate, string[] googleOrderIds, int maxResults, Content_orderreturns_listOrderBy orderBy, string pageToken, string[] shipmentStates, string[] shipmentStatus, string[] shipmentTrackingNumbers, string[] shipmentTypes, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/orderreturns&acknowledged="+acknowledged+"&createdEndDate=" + (createdEndDate==null? "" : System.Uri.EscapeDataString(createdEndDate))+"&createdStartDate=" + (createdStartDate==null? "" : System.Uri.EscapeDataString(createdStartDate))+"&"+string.Join("&", googleOrderIds.Select(z => $"googleOrderIds={System.Uri.EscapeDataString(z.ToString())}"))+"&maxResults="+maxResults+"&orderBy=" + orderBy+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&"+string.Join("&", shipmentStates.Select(z => $"shipmentStates={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", shipmentStatus.Select(z => $"shipmentStatus={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", shipmentTrackingNumbers.Select(z => $"shipmentTrackingNumbers={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", shipmentTypes.Select(z => $"shipmentTypes={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OrderreturnsListResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create return in your Merchant Center account.
		/// Content_orderreturns_createorderreturn {merchantId}/orderreturns/createOrderReturn
		/// </summary>
		/// <param name="merchantId">The ID of the account that manages the order. This cannot be a multi-client account.</param>
		/// <returns>Successful response</returns>
		public async Task<OrderreturnsCreateOrderReturnResponse> Content_orderreturns_createorderreturnAsync(string merchantId, OrderreturnsCreateOrderReturnRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/orderreturns/createOrderReturn";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OrderreturnsCreateOrderReturnResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves an order return from your Merchant Center account.
		/// Content_orderreturns_get {merchantId}/orderreturns/{returnId}
		/// </summary>
		/// <param name="merchantId">The ID of the account that manages the order. This cannot be a multi-client account.</param>
		/// <param name="returnId">Merchant order return ID generated by Google.</param>
		/// <returns>Successful response</returns>
		public async Task<MerchantOrderReturn> Content_orderreturns_getAsync(string merchantId, string returnId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/orderreturns/"+ (returnId==null? "" : System.Uri.EscapeDataString(returnId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<MerchantOrderReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Acks an order return in your Merchant Center account.
		/// Content_orderreturns_acknowledge {merchantId}/orderreturns/{returnId}/acknowledge
		/// </summary>
		/// <param name="merchantId">The ID of the account that manages the order. This cannot be a multi-client account.</param>
		/// <param name="returnId">The ID of the return.</param>
		/// <returns>Successful response</returns>
		public async Task<OrderreturnsAcknowledgeResponse> Content_orderreturns_acknowledgeAsync(string merchantId, string returnId, OrderreturnsAcknowledgeRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/orderreturns/"+ (returnId==null? "" : System.Uri.EscapeDataString(returnId))+"/acknowledge";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OrderreturnsAcknowledgeResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Links a return shipping label to a return id. You can only create one return label per return id. Since the label is sent to the buyer, the linked return label cannot be updated or deleted. If you try to create multiple return shipping labels for a single return id, every create request except the first will fail.
		/// Content_orderreturns_labels_create {merchantId}/orderreturns/{returnId}/labels
		/// </summary>
		/// <param name="merchantId">Required. The merchant the Return Shipping Label belongs to.</param>
		/// <param name="returnId">Required. Provide the Google-generated merchant order return ID.</param>
		/// <returns>Successful response</returns>
		public async Task<ReturnShippingLabel> Content_orderreturns_labels_createAsync(string merchantId, string returnId, ReturnShippingLabel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/orderreturns/"+ (returnId==null? "" : System.Uri.EscapeDataString(returnId))+"/labels";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ReturnShippingLabel>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Processes return in your Merchant Center account.
		/// Content_orderreturns_process {merchantId}/orderreturns/{returnId}/process
		/// </summary>
		/// <param name="merchantId">The ID of the account that manages the order. This cannot be a multi-client account.</param>
		/// <param name="returnId">The ID of the return.</param>
		/// <returns>Successful response</returns>
		public async Task<OrderreturnsProcessResponse> Content_orderreturns_processAsync(string merchantId, string returnId, OrderreturnsProcessRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/orderreturns/"+ (returnId==null? "" : System.Uri.EscapeDataString(returnId))+"/process";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OrderreturnsProcessResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists the orders in your Merchant Center account.
		/// Content_orders_list {merchantId}/orders
		/// </summary>
		/// <param name="merchantId">The ID of the account that manages the order. This cannot be a multi-client account.</param>
		/// <param name="acknowledged">Obtains orders that match the acknowledgement status. When set to true, obtains orders that have been acknowledged. When false, obtains orders that have not been acknowledged. We recommend using this filter set to `false`, in conjunction with the `acknowledge` call, such that only un-acknowledged orders are returned. </param>
		/// <param name="maxResults">The maximum number of orders to return in the response, used for paging. The default value is 25 orders per page, and the maximum allowed value is 250 orders per page.</param>
		/// <param name="orderBy">Order results by placement date in descending or ascending order. Acceptable values are: - placedDateAsc - placedDateDesc </param>
		/// <param name="pageToken">The token returned by the previous request.</param>
		/// <param name="placedDateEnd">Obtains orders placed before this date (exclusively), in ISO 8601 format.</param>
		/// <param name="placedDateStart">Obtains orders placed after this date (inclusively), in ISO 8601 format.</param>
		/// <param name="statuses">Obtains orders that match any of the specified statuses. Note that `active` is a shortcut for `pendingShipment` and `partiallyShipped`, and `completed` is a shortcut for `shipped`, `partiallyDelivered`, `delivered`, `partiallyReturned`, `returned`, and `canceled`.</param>
		/// <returns>Successful response</returns>
		public async Task<OrdersListResponse> Content_orders_listAsync(string merchantId, bool acknowledged, int maxResults, string orderBy, string pageToken, string placedDateEnd, string placedDateStart, string[] statuses, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/orders&acknowledged="+acknowledged+"&maxResults="+maxResults+"&orderBy=" + (orderBy==null? "" : System.Uri.EscapeDataString(orderBy))+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&placedDateEnd=" + (placedDateEnd==null? "" : System.Uri.EscapeDataString(placedDateEnd))+"&placedDateStart=" + (placedDateStart==null? "" : System.Uri.EscapeDataString(placedDateStart))+"&"+string.Join("&", statuses.Select(z => $"statuses={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OrdersListResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves an order from your Merchant Center account.
		/// Content_orders_get {merchantId}/orders/{orderId}
		/// </summary>
		/// <param name="merchantId">The ID of the account that manages the order. This cannot be a multi-client account.</param>
		/// <param name="orderId">The ID of the order.</param>
		/// <returns>Successful response</returns>
		public async Task<Order> Content_orders_getAsync(string merchantId, string orderId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/orders/"+ (orderId==null? "" : System.Uri.EscapeDataString(orderId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Order>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Marks an order as acknowledged.
		/// Content_orders_acknowledge {merchantId}/orders/{orderId}/acknowledge
		/// </summary>
		/// <param name="merchantId">The ID of the account that manages the order. This cannot be a multi-client account.</param>
		/// <param name="orderId">The ID of the order.</param>
		/// <returns>Successful response</returns>
		public async Task<OrdersAcknowledgeResponse> Content_orders_acknowledgeAsync(string merchantId, string orderId, OrdersAcknowledgeRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/orders/"+ (orderId==null? "" : System.Uri.EscapeDataString(orderId))+"/acknowledge";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OrdersAcknowledgeResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Cancels all line items in an order, making a full refund.
		/// Content_orders_cancel {merchantId}/orders/{orderId}/cancel
		/// </summary>
		/// <param name="merchantId">The ID of the account that manages the order. This cannot be a multi-client account.</param>
		/// <param name="orderId">The ID of the order to cancel.</param>
		/// <returns>Successful response</returns>
		public async Task<OrdersCancelResponse> Content_orders_cancelAsync(string merchantId, string orderId, OrdersCancelRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/orders/"+ (orderId==null? "" : System.Uri.EscapeDataString(orderId))+"/cancel";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OrdersCancelResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Cancels a line item, making a full refund.
		/// Content_orders_cancellineitem {merchantId}/orders/{orderId}/cancelLineItem
		/// </summary>
		/// <param name="merchantId">The ID of the account that manages the order. This cannot be a multi-client account.</param>
		/// <param name="orderId">The ID of the order.</param>
		/// <returns>Successful response</returns>
		public async Task<OrdersCancelLineItemResponse> Content_orders_cancellineitemAsync(string merchantId, string orderId, OrdersCancelLineItemRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/orders/"+ (orderId==null? "" : System.Uri.EscapeDataString(orderId))+"/cancelLineItem";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OrdersCancelLineItemResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Capture funds from the customer for the current order total. This method should be called after the merchant verifies that they are able and ready to start shipping the order. This method blocks until a response is received from the payment processsor. If this method succeeds, the merchant is guaranteed to receive funds for the order after shipment. If the request fails, it can be retried or the order may be cancelled. This method cannot be called after the entire order is already shipped. A rejected error code is returned when the payment service provider has declined the charge. This indicates a problem between the PSP and either the merchant's or customer's account. Sometimes this error will be resolved by the customer. We recommend retrying these errors once per day or cancelling the order with reason `failedToCaptureFunds` if the items cannot be held.
		/// Content_orders_captureOrder {merchantId}/orders/{orderId}/captureOrder
		/// </summary>
		/// <param name="merchantId">Required. The ID of the account that manages the order. This cannot be a multi-client account.</param>
		/// <param name="orderId">Required. The ID of the Order.</param>
		/// <returns>Successful response</returns>
		public async Task<CaptureOrderResponse> Content_orders_captureOrderAsync(string merchantId, string orderId, CaptureOrderRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/orders/"+ (orderId==null? "" : System.Uri.EscapeDataString(orderId))+"/captureOrder";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CaptureOrderResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deprecated. Notifies that item return and refund was handled directly by merchant outside of Google payments processing (for example, cash refund done in store). Note: We recommend calling the returnrefundlineitem method to refund in-store returns. We will issue the refund directly to the customer. This helps to prevent possible differences arising between merchant and Google transaction records. We also recommend having the point of sale system communicate with Google to ensure that customers do not receive a double refund by first refunding through Google then through an in-store return.
		/// Content_orders_instorerefundlineitem {merchantId}/orders/{orderId}/inStoreRefundLineItem
		/// </summary>
		/// <param name="merchantId">The ID of the account that manages the order. This cannot be a multi-client account.</param>
		/// <param name="orderId">The ID of the order.</param>
		/// <returns>Successful response</returns>
		public async Task<OrdersInStoreRefundLineItemResponse> Content_orders_instorerefundlineitemAsync(string merchantId, string orderId, OrdersInStoreRefundLineItemRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/orders/"+ (orderId==null? "" : System.Uri.EscapeDataString(orderId))+"/inStoreRefundLineItem";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OrdersInStoreRefundLineItemResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Issues a partial or total refund for items and shipment.
		/// Content_orders_refunditem {merchantId}/orders/{orderId}/refunditem
		/// </summary>
		/// <param name="merchantId">The ID of the account that manages the order. This cannot be a multi-client account.</param>
		/// <param name="orderId">The ID of the order to refund.</param>
		/// <returns>Successful response</returns>
		public async Task<OrdersRefundItemResponse> Content_orders_refunditemAsync(string merchantId, string orderId, OrdersRefundItemRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/orders/"+ (orderId==null? "" : System.Uri.EscapeDataString(orderId))+"/refunditem";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OrdersRefundItemResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Issues a partial or total refund for an order.
		/// Content_orders_refundorder {merchantId}/orders/{orderId}/refundorder
		/// </summary>
		/// <param name="merchantId">The ID of the account that manages the order. This cannot be a multi-client account.</param>
		/// <param name="orderId">The ID of the order to refund.</param>
		/// <returns>Successful response</returns>
		public async Task<OrdersRefundOrderResponse> Content_orders_refundorderAsync(string merchantId, string orderId, OrdersRefundOrderRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/orders/"+ (orderId==null? "" : System.Uri.EscapeDataString(orderId))+"/refundorder";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OrdersRefundOrderResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Rejects return on an line item.
		/// Content_orders_rejectreturnlineitem {merchantId}/orders/{orderId}/rejectReturnLineItem
		/// </summary>
		/// <param name="merchantId">The ID of the account that manages the order. This cannot be a multi-client account.</param>
		/// <param name="orderId">The ID of the order.</param>
		/// <returns>Successful response</returns>
		public async Task<OrdersRejectReturnLineItemResponse> Content_orders_rejectreturnlineitemAsync(string merchantId, string orderId, OrdersRejectReturnLineItemRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/orders/"+ (orderId==null? "" : System.Uri.EscapeDataString(orderId))+"/rejectReturnLineItem";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OrdersRejectReturnLineItemResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns and refunds a line item. Note that this method can only be called on fully shipped orders. The Orderreturns API is the preferred way to handle returns after you receive a return from a customer. You can use Orderreturns.list or Orderreturns.get to search for the return, and then use Orderreturns.processreturn to issue the refund. If the return cannot be found, then we recommend using this API to issue a refund.
		/// Content_orders_returnrefundlineitem {merchantId}/orders/{orderId}/returnRefundLineItem
		/// </summary>
		/// <param name="merchantId">The ID of the account that manages the order. This cannot be a multi-client account.</param>
		/// <param name="orderId">The ID of the order.</param>
		/// <returns>Successful response</returns>
		public async Task<OrdersReturnRefundLineItemResponse> Content_orders_returnrefundlineitemAsync(string merchantId, string orderId, OrdersReturnRefundLineItemRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/orders/"+ (orderId==null? "" : System.Uri.EscapeDataString(orderId))+"/returnRefundLineItem";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OrdersReturnRefundLineItemResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Sets (or overrides if it already exists) merchant provided annotations in the form of key-value pairs. A common use case would be to supply us with additional structured information about a line item that cannot be provided through other methods. Submitted key-value pairs can be retrieved as part of the orders resource.
		/// Content_orders_setlineitemmetadata {merchantId}/orders/{orderId}/setLineItemMetadata
		/// </summary>
		/// <param name="merchantId">The ID of the account that manages the order. This cannot be a multi-client account.</param>
		/// <param name="orderId">The ID of the order.</param>
		/// <returns>Successful response</returns>
		public async Task<OrdersSetLineItemMetadataResponse> Content_orders_setlineitemmetadataAsync(string merchantId, string orderId, OrdersSetLineItemMetadataRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/orders/"+ (orderId==null? "" : System.Uri.EscapeDataString(orderId))+"/setLineItemMetadata";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OrdersSetLineItemMetadataResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Marks line item(s) as shipped.
		/// Content_orders_shiplineitems {merchantId}/orders/{orderId}/shipLineItems
		/// </summary>
		/// <param name="merchantId">The ID of the account that manages the order. This cannot be a multi-client account.</param>
		/// <param name="orderId">The ID of the order.</param>
		/// <returns>Successful response</returns>
		public async Task<OrdersShipLineItemsResponse> Content_orders_shiplineitemsAsync(string merchantId, string orderId, OrdersShipLineItemsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/orders/"+ (orderId==null? "" : System.Uri.EscapeDataString(orderId))+"/shipLineItems";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OrdersShipLineItemsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Sandbox only. Creates a test return.
		/// Content_orders_createtestreturn {merchantId}/orders/{orderId}/testreturn
		/// </summary>
		/// <param name="merchantId">The ID of the account that manages the order. This cannot be a multi-client account.</param>
		/// <param name="orderId">The ID of the order.</param>
		/// <returns>Successful response</returns>
		public async Task<OrdersCreateTestReturnResponse> Content_orders_createtestreturnAsync(string merchantId, string orderId, OrdersCreateTestReturnRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/orders/"+ (orderId==null? "" : System.Uri.EscapeDataString(orderId))+"/testreturn";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OrdersCreateTestReturnResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Updates ship by and delivery by dates for a line item.
		/// Content_orders_updatelineitemshippingdetails {merchantId}/orders/{orderId}/updateLineItemShippingDetails
		/// </summary>
		/// <param name="merchantId">The ID of the account that manages the order. This cannot be a multi-client account.</param>
		/// <param name="orderId">The ID of the order.</param>
		/// <returns>Successful response</returns>
		public async Task<OrdersUpdateLineItemShippingDetailsResponse> Content_orders_updatelineitemshippingdetailsAsync(string merchantId, string orderId, OrdersUpdateLineItemShippingDetailsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/orders/"+ (orderId==null? "" : System.Uri.EscapeDataString(orderId))+"/updateLineItemShippingDetails";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OrdersUpdateLineItemShippingDetailsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Updates the merchant order ID for a given order.
		/// Content_orders_updatemerchantorderid {merchantId}/orders/{orderId}/updateMerchantOrderId
		/// </summary>
		/// <param name="merchantId">The ID of the account that manages the order. This cannot be a multi-client account.</param>
		/// <param name="orderId">The ID of the order.</param>
		/// <returns>Successful response</returns>
		public async Task<OrdersUpdateMerchantOrderIdResponse> Content_orders_updatemerchantorderidAsync(string merchantId, string orderId, OrdersUpdateMerchantOrderIdRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/orders/"+ (orderId==null? "" : System.Uri.EscapeDataString(orderId))+"/updateMerchantOrderId";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OrdersUpdateMerchantOrderIdResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Updates a shipment's status, carrier, and/or tracking ID.
		/// Content_orders_updateshipment {merchantId}/orders/{orderId}/updateShipment
		/// </summary>
		/// <param name="merchantId">The ID of the account that manages the order. This cannot be a multi-client account.</param>
		/// <param name="orderId">The ID of the order.</param>
		/// <returns>Successful response</returns>
		public async Task<OrdersUpdateShipmentResponse> Content_orders_updateshipmentAsync(string merchantId, string orderId, OrdersUpdateShipmentRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/orders/"+ (orderId==null? "" : System.Uri.EscapeDataString(orderId))+"/updateShipment";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OrdersUpdateShipmentResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves an order using merchant order ID.
		/// Content_orders_getbymerchantorderid {merchantId}/ordersbymerchantid/{merchantOrderId}
		/// </summary>
		/// <param name="merchantId">The ID of the account that manages the order. This cannot be a multi-client account.</param>
		/// <param name="merchantOrderId">The merchant order ID to be looked for.</param>
		/// <returns>Successful response</returns>
		public async Task<OrdersGetByMerchantOrderIdResponse> Content_orders_getbymerchantorderidAsync(string merchantId, string merchantOrderId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/ordersbymerchantid/"+ (merchantOrderId==null? "" : System.Uri.EscapeDataString(merchantOrderId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OrdersGetByMerchantOrderIdResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates new order tracking signal.
		/// Content_ordertrackingsignals_create {merchantId}/ordertrackingsignals
		/// </summary>
		/// <param name="merchantId">The ID of the merchant for which the order signal is created.</param>
		/// <returns>Successful response</returns>
		public async Task<OrderTrackingSignal> Content_ordertrackingsignals_createAsync(string merchantId, OrderTrackingSignal requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/ordertrackingsignals";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OrderTrackingSignal>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Submit inventory for the given merchant.
		/// Content_pos_inventory {merchantId}/pos/{targetMerchantId}/inventory
		/// </summary>
		/// <param name="merchantId">The ID of the POS or inventory data provider.</param>
		/// <param name="targetMerchantId">The ID of the target merchant.</param>
		/// <returns>Successful response</returns>
		public async Task<PosInventoryResponse> Content_pos_inventoryAsync(string merchantId, string targetMerchantId, PosInventoryRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/pos/"+ (targetMerchantId==null? "" : System.Uri.EscapeDataString(targetMerchantId))+"/inventory";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<PosInventoryResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Submit a sale event for the given merchant.
		/// Content_pos_sale {merchantId}/pos/{targetMerchantId}/sale
		/// </summary>
		/// <param name="merchantId">The ID of the POS or inventory data provider.</param>
		/// <param name="targetMerchantId">The ID of the target merchant.</param>
		/// <returns>Successful response</returns>
		public async Task<PosSaleResponse> Content_pos_saleAsync(string merchantId, string targetMerchantId, PosSaleRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/pos/"+ (targetMerchantId==null? "" : System.Uri.EscapeDataString(targetMerchantId))+"/sale";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<PosSaleResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists the stores of the target merchant.
		/// Content_pos_list {merchantId}/pos/{targetMerchantId}/store
		/// </summary>
		/// <param name="merchantId">The ID of the POS or inventory data provider.</param>
		/// <param name="targetMerchantId">The ID of the target merchant.</param>
		/// <returns>Successful response</returns>
		public async Task<PosListResponse> Content_pos_listAsync(string merchantId, string targetMerchantId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/pos/"+ (targetMerchantId==null? "" : System.Uri.EscapeDataString(targetMerchantId))+"/store";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<PosListResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a store for the given merchant.
		/// Content_pos_insert {merchantId}/pos/{targetMerchantId}/store
		/// </summary>
		/// <param name="merchantId">The ID of the POS or inventory data provider.</param>
		/// <param name="targetMerchantId">The ID of the target merchant.</param>
		/// <returns>Successful response</returns>
		public async Task<PosStore> Content_pos_insertAsync(string merchantId, string targetMerchantId, PosStore requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/pos/"+ (targetMerchantId==null? "" : System.Uri.EscapeDataString(targetMerchantId))+"/store";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<PosStore>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes a store for the given merchant.
		/// Content_pos_delete {merchantId}/pos/{targetMerchantId}/store/{storeCode}
		/// </summary>
		/// <param name="merchantId">The ID of the POS or inventory data provider.</param>
		/// <param name="targetMerchantId">The ID of the target merchant.</param>
		/// <param name="storeCode">A store code that is unique per merchant.</param>
		/// <returns>Successful response</returns>
		public async Task Content_pos_deleteAsync(string merchantId, string targetMerchantId, string storeCode, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/pos/"+ (targetMerchantId==null? "" : System.Uri.EscapeDataString(targetMerchantId))+"/store/"+ (storeCode==null? "" : System.Uri.EscapeDataString(storeCode));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves information about the given store.
		/// Content_pos_get {merchantId}/pos/{targetMerchantId}/store/{storeCode}
		/// </summary>
		/// <param name="merchantId">The ID of the POS or inventory data provider.</param>
		/// <param name="targetMerchantId">The ID of the target merchant.</param>
		/// <param name="storeCode">A store code that is unique per merchant.</param>
		/// <returns>Successful response</returns>
		public async Task<PosStore> Content_pos_getAsync(string merchantId, string targetMerchantId, string storeCode, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/pos/"+ (targetMerchantId==null? "" : System.Uri.EscapeDataString(targetMerchantId))+"/store/"+ (storeCode==null? "" : System.Uri.EscapeDataString(storeCode));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<PosStore>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates or updates the delivery time of a product.
		/// Content_productdeliverytime_create {merchantId}/productdeliverytime
		/// </summary>
		/// <param name="merchantId">The Google merchant ID of the account that contains the product. This account cannot be a multi-client account.</param>
		/// <returns>Successful response</returns>
		public async Task<ProductDeliveryTime> Content_productdeliverytime_createAsync(string merchantId, ProductDeliveryTime requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/productdeliverytime";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ProductDeliveryTime>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes the delivery time of a product.
		/// Content_productdeliverytime_delete {merchantId}/productdeliverytime/{productId}
		/// </summary>
		/// <param name="merchantId">Required. The Google merchant ID of the account that contains the product. This account cannot be a multi-client account.</param>
		/// <param name="productId">Required. The Content API ID of the product, in the form `channel:contentLanguage:targetCountry:offerId`.</param>
		/// <returns>Successful response</returns>
		public async Task Content_productdeliverytime_deleteAsync(string merchantId, string productId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/productdeliverytime/"+ (productId==null? "" : System.Uri.EscapeDataString(productId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets `productDeliveryTime` by `productId`.
		/// Content_productdeliverytime_get {merchantId}/productdeliverytime/{productId}
		/// </summary>
		/// <param name="merchantId">Required. The Google merchant ID of the account that contains the product. This account cannot be a multi-client account.</param>
		/// <param name="productId">Required. The Content API ID of the product, in the form `channel:contentLanguage:targetCountry:offerId`.</param>
		/// <returns>Successful response</returns>
		public async Task<ProductDeliveryTime> Content_productdeliverytime_getAsync(string merchantId, string productId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/productdeliverytime/"+ (productId==null? "" : System.Uri.EscapeDataString(productId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ProductDeliveryTime>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists the products in your Merchant Center account. The response might contain fewer items than specified by maxResults. Rely on nextPageToken to determine if there are more items to be requested.
		/// Content_products_list {merchantId}/products
		/// </summary>
		/// <param name="merchantId">The ID of the account that contains the products. This account cannot be a multi-client account.</param>
		/// <param name="maxResults">The maximum number of products to return in the response, used for paging. The default value is 25. The maximum value is 250.</param>
		/// <param name="pageToken">The token returned by the previous request.</param>
		/// <returns>Successful response</returns>
		public async Task<ProductsListResponse> Content_products_listAsync(string merchantId, int maxResults, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/products&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ProductsListResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Uploads a product to your Merchant Center account. If an item with the same channel, contentLanguage, offerId, and targetCountry already exists, this method updates that entry.
		/// Content_products_insert {merchantId}/products
		/// </summary>
		/// <param name="merchantId">The ID of the account that contains the product. This account cannot be a multi-client account.</param>
		/// <param name="feedId">The Content API Supplemental Feed ID. If present then product insertion applies to the data in a supplemental feed.</param>
		/// <returns>Successful response</returns>
		public async Task<Product> Content_products_insertAsync(string merchantId, string feedId, Product requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/products&feedId=" + (feedId==null? "" : System.Uri.EscapeDataString(feedId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Product>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes a product from your Merchant Center account.
		/// Content_products_delete {merchantId}/products/{productId}
		/// </summary>
		/// <param name="merchantId">The ID of the account that contains the product. This account cannot be a multi-client account.</param>
		/// <param name="productId">The REST ID of the product.</param>
		/// <param name="feedId">The Content API Supplemental Feed ID. If present then product deletion applies to the data in a supplemental feed. If absent, entire product will be deleted.</param>
		/// <returns>Successful response</returns>
		public async Task Content_products_deleteAsync(string merchantId, string productId, string feedId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/products/"+ (productId==null? "" : System.Uri.EscapeDataString(productId))+"&feedId=" + (feedId==null? "" : System.Uri.EscapeDataString(feedId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a product from your Merchant Center account.
		/// Content_products_get {merchantId}/products/{productId}
		/// </summary>
		/// <param name="merchantId">The ID of the account that contains the product. This account cannot be a multi-client account.</param>
		/// <param name="productId">The REST ID of the product.</param>
		/// <returns>Successful response</returns>
		public async Task<Product> Content_products_getAsync(string merchantId, string productId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/products/"+ (productId==null? "" : System.Uri.EscapeDataString(productId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Product>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Updates an existing product in your Merchant Center account. Only updates attributes provided in the request.
		/// Content_products_update {merchantId}/products/{productId}
		/// </summary>
		/// <param name="merchantId">The ID of the account that contains the product. This account cannot be a multi-client account.</param>
		/// <param name="productId">The REST ID of the product for which to update.</param>
		/// <param name="updateMask">The comma-separated list of product attributes to be updated. Example: `"title,salePrice"`. Attributes specified in the update mask without a value specified in the body will be deleted from the product. *You must specify the update mask to delete attributes.* Only top-level product attributes can be updated. If not defined, product attributes with set values will be updated and other attributes will stay unchanged.</param>
		/// <returns>Successful response</returns>
		public async Task<Product> Content_products_updateAsync(string merchantId, string productId, string updateMask, Product requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/products/"+ (productId==null? "" : System.Uri.EscapeDataString(productId))+"&updateMask=" + (updateMask==null? "" : System.Uri.EscapeDataString(updateMask));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Product>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Updates the local inventory of a product in your Merchant Center account.
		/// Content_localinventory_insert {merchantId}/products/{productId}/localinventory
		/// </summary>
		/// <param name="merchantId">The ID of the account that contains the product. This account cannot be a multi-client account.</param>
		/// <param name="productId">The REST ID of the product for which to update local inventory.</param>
		/// <returns>Successful response</returns>
		public async Task<LocalInventory> Content_localinventory_insertAsync(string merchantId, string productId, LocalInventory requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/products/"+ (productId==null? "" : System.Uri.EscapeDataString(productId))+"/localinventory";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<LocalInventory>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Updates the regional inventory of a product in your Merchant Center account. If a regional inventory with the same region ID already exists, this method updates that entry.
		/// Content_regionalinventory_insert {merchantId}/products/{productId}/regionalinventory
		/// </summary>
		/// <param name="merchantId">The ID of the account that contains the product. This account cannot be a multi-client account.</param>
		/// <param name="productId">The REST ID of the product for which to update the regional inventory.</param>
		/// <returns>Successful response</returns>
		public async Task<RegionalInventory> Content_regionalinventory_insertAsync(string merchantId, string productId, RegionalInventory requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/products/"+ (productId==null? "" : System.Uri.EscapeDataString(productId))+"/regionalinventory";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<RegionalInventory>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists the statuses of the products in your Merchant Center account.
		/// Content_productstatuses_list {merchantId}/productstatuses
		/// </summary>
		/// <param name="merchantId">The ID of the account that contains the products. This account cannot be a multi-client account.</param>
		/// <param name="destinations">If set, only issues for the specified destinations are returned, otherwise only issues for the Shopping destination.</param>
		/// <param name="maxResults">The maximum number of product statuses to return in the response, used for paging. The default value is 25. The maximum value is 250.</param>
		/// <param name="pageToken">The token returned by the previous request.</param>
		/// <returns>Successful response</returns>
		public async Task<ProductstatusesListResponse> Content_productstatuses_listAsync(string merchantId, string[] destinations, int maxResults, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/productstatuses&"+string.Join("&", destinations.Select(z => $"destinations={System.Uri.EscapeDataString(z.ToString())}"))+"&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ProductstatusesListResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets the status of a product from your Merchant Center account.
		/// Content_productstatuses_get {merchantId}/productstatuses/{productId}
		/// </summary>
		/// <param name="merchantId">The ID of the account that contains the product. This account cannot be a multi-client account.</param>
		/// <param name="productId">The REST ID of the product.</param>
		/// <param name="destinations">If set, only issues for the specified destinations are returned, otherwise only issues for the Shopping destination.</param>
		/// <returns>Successful response</returns>
		public async Task<ProductStatus> Content_productstatuses_getAsync(string merchantId, string productId, string[] destinations, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/productstatuses/"+ (productId==null? "" : System.Uri.EscapeDataString(productId))+"&"+string.Join("&", destinations.Select(z => $"destinations={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ProductStatus>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List all promotions from your Merchant Center account.
		/// Content_promotions_list {merchantId}/promotions
		/// </summary>
		/// <param name="merchantId">Required. The ID of the account that contains the collection.</param>
		/// <param name="countryCode">[CLDR country code](http://www.unicode.org/repos/cldr/tags/latest/common/main/en.xml) (for example, "US"), used as a filter on promotions target country.</param>
		/// <param name="languageCode">The two-letter ISO 639-1 language code associated with the promotions, used as a filter.</param>
		/// <param name="pageSize">The maximum number of promotions to return. The service may return fewer than this value. If unspecified, at most 50 labels will be returned. The maximum value is 1000; values above 1000 will be coerced to 1000.</param>
		/// <param name="pageToken">A page token, received from a previous `ListPromotion` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListPromotion` must match the call that provided the page token.</param>
		/// <returns>Successful response</returns>
		public async Task<ListPromotionResponse> Content_promotions_listAsync(string merchantId, string countryCode, string languageCode, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/promotions&countryCode=" + (countryCode==null? "" : System.Uri.EscapeDataString(countryCode))+"&languageCode=" + (languageCode==null? "" : System.Uri.EscapeDataString(languageCode))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListPromotionResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Inserts a promotion for your Merchant Center account. If the promotion already exists, then it updates the promotion instead. To [end or delete] (https://developers.google.com/shopping-content/guides/promotions#end_a_promotion) a promotion update the time period of the promotion to a time that has already passed.
		/// Content_promotions_create {merchantId}/promotions
		/// </summary>
		/// <param name="merchantId">Required. The ID of the account that contains the collection.</param>
		/// <returns>Successful response</returns>
		public async Task<Promotion> Content_promotions_createAsync(string merchantId, Promotion requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/promotions";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Promotion>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a promotion from your Merchant Center account.
		/// Content_promotions_get {merchantId}/promotions/{id}
		/// </summary>
		/// <param name="merchantId">Required. The ID of the account that contains the collection.</param>
		/// <param name="id">Required. REST ID of the promotion to retrieve.</param>
		/// <returns>Successful response</returns>
		public async Task<Promotion> Content_promotions_getAsync(string merchantId, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/promotions/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Promotion>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a Merchant Center account's pubsub notification settings.
		/// Content_pubsubnotificationsettings_get {merchantId}/pubsubnotificationsettings
		/// </summary>
		/// <param name="merchantId">The ID of the account for which to get pubsub notification settings.</param>
		/// <returns>Successful response</returns>
		public async Task<PubsubNotificationSettings> Content_pubsubnotificationsettings_getAsync(string merchantId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/pubsubnotificationsettings";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<PubsubNotificationSettings>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Register a Merchant Center account for pubsub notifications. Note that cloud topic name shouldn't be provided as part of the request.
		/// Content_pubsubnotificationsettings_update {merchantId}/pubsubnotificationsettings
		/// </summary>
		/// <param name="merchantId">The ID of the account.</param>
		/// <returns>Successful response</returns>
		public async Task<PubsubNotificationSettings> Content_pubsubnotificationsettings_updateAsync(string merchantId, PubsubNotificationSettings requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/pubsubnotificationsettings";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<PubsubNotificationSettings>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists the daily call quota and usage per method for your Merchant Center account.
		/// Content_quotas_list {merchantId}/quotas
		/// </summary>
		/// <param name="merchantId">Required. The ID of the account that has quota. This account must be an admin.</param>
		/// <param name="pageSize">The maximum number of quotas to return in the response, used for paging. Defaults to 500; values above 1000 will be coerced to 1000.</param>
		/// <param name="pageToken">Token (if provided) to retrieve the subsequent page. All other parameters must match the original call that provided the page token.</param>
		/// <returns>Successful response</returns>
		public async Task<ListMethodQuotasResponse> Content_quotas_listAsync(string merchantId, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/quotas&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListMethodQuotasResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Generates recommendations for a merchant.
		/// Content_recommendations_generate {merchantId}/recommendations/generate
		/// </summary>
		/// <param name="merchantId">Required. The ID of the account to fetch recommendations for.</param>
		/// <param name="allowedTag">Optional. List of allowed tags. Tags are a set of predefined strings that describe the category that individual recommendation types belong to. User can specify zero or more tags in this field to indicate what categories of recommendations they want to receive. Current list of supported tags: - TREND</param>
		/// <param name="languageCode">Optional. Language code of the client. If not set, the result will be in default language (English). This language code affects all fields prefixed with "localized". This should be set to ISO 639-1 country code. List of currently verified supported language code: en, fr, cs, da, de, es, it, nl, no, pl, pt, pt, fi, sv, vi, tr, th, ko, zh-CN, zh-TW, ja, id, hi</param>
		/// <returns>Successful response</returns>
		public async Task<GenerateRecommendationsResponse> Content_recommendations_generateAsync(string merchantId, string[] allowedTag, string languageCode, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/recommendations/generate&"+string.Join("&", allowedTag.Select(z => $"allowedTag={System.Uri.EscapeDataString(z.ToString())}"))+"&languageCode=" + (languageCode==null? "" : System.Uri.EscapeDataString(languageCode));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GenerateRecommendationsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Reports an interaction on a recommendation for a merchant.
		/// Content_recommendations_reportInteraction {merchantId}/recommendations/reportInteraction
		/// </summary>
		/// <param name="merchantId">Required. The ID of the account that wants to report an interaction.</param>
		/// <returns>Successful response</returns>
		public async Task Content_recommendations_reportInteractionAsync(string merchantId, ReportInteractionRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/recommendations/reportInteraction";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists the regions in your Merchant Center account.
		/// Content_regions_list {merchantId}/regions
		/// </summary>
		/// <param name="merchantId">Required. The id of the merchant for which to list region definitions.</param>
		/// <param name="pageSize">The maximum number of regions to return. The service may return fewer than this value. If unspecified, at most 50 rules will be returned. The maximum value is 1000; values above 1000 will be coerced to 1000.</param>
		/// <param name="pageToken">A page token, received from a previous `ListRegions` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListRegions` must match the call that provided the page token.</param>
		/// <returns>Successful response</returns>
		public async Task<ListRegionsResponse> Content_regions_listAsync(string merchantId, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/regions&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListRegionsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a region definition in your Merchant Center account.
		/// Content_regions_create {merchantId}/regions
		/// </summary>
		/// <param name="merchantId">Required. The id of the merchant for which to create region definition.</param>
		/// <param name="regionId">Required. The id of the region to create.</param>
		/// <returns>Successful response</returns>
		public async Task<Region> Content_regions_createAsync(string merchantId, string regionId, Region requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/regions&regionId=" + (regionId==null? "" : System.Uri.EscapeDataString(regionId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Region>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes a region definition from your Merchant Center account.
		/// Content_regions_delete {merchantId}/regions/{regionId}
		/// </summary>
		/// <param name="merchantId">Required. The id of the merchant for which to delete region definition.</param>
		/// <param name="regionId">Required. The id of the region to delete.</param>
		/// <returns>Successful response</returns>
		public async Task Content_regions_deleteAsync(string merchantId, string regionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/regions/"+ (regionId==null? "" : System.Uri.EscapeDataString(regionId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a region defined in your Merchant Center account.
		/// Content_regions_get {merchantId}/regions/{regionId}
		/// </summary>
		/// <param name="merchantId">Required. The id of the merchant for which to retrieve region definition.</param>
		/// <param name="regionId">Required. The id of the region to retrieve.</param>
		/// <returns>Successful response</returns>
		public async Task<Region> Content_regions_getAsync(string merchantId, string regionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/regions/"+ (regionId==null? "" : System.Uri.EscapeDataString(regionId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Region>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Updates a region definition in your Merchant Center account.
		/// Content_regions_patch {merchantId}/regions/{regionId}
		/// </summary>
		/// <param name="merchantId">Required. The id of the merchant for which to update region definition.</param>
		/// <param name="regionId">Required. The id of the region to update.</param>
		/// <param name="updateMask">Optional. The comma-separated field mask indicating the fields to update. Example: `"displayName,postalCodeArea.regionCode"`.</param>
		/// <returns>Successful response</returns>
		public async Task<Region> Content_regions_patchAsync(string merchantId, string regionId, string updateMask, Region requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/regions/"+ (regionId==null? "" : System.Uri.EscapeDataString(regionId))+"&updateMask=" + (updateMask==null? "" : System.Uri.EscapeDataString(updateMask));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Region>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves merchant performance mertrics matching the search query and optionally segmented by selected dimensions.
		/// Content_reports_search {merchantId}/reports/search
		/// </summary>
		/// <param name="merchantId">Required. Id of the merchant making the call. Must be a standalone account or an MCA subaccount.</param>
		/// <returns>Successful response</returns>
		public async Task<SearchResponse> Content_reports_searchAsync(string merchantId, SearchRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/reports/search";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SearchResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists the return addresses of the Merchant Center account.
		/// Content_returnaddress_list {merchantId}/returnaddress
		/// </summary>
		/// <param name="merchantId">The Merchant Center account to list return addresses for.</param>
		/// <param name="country">List only return addresses applicable to the given country of sale. When omitted, all return addresses are listed.</param>
		/// <param name="maxResults">The maximum number of addresses in the response, used for paging.</param>
		/// <param name="pageToken">The token returned by the previous request.</param>
		/// <returns>Successful response</returns>
		public async Task<ReturnaddressListResponse> Content_returnaddress_listAsync(string merchantId, string country, int maxResults, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/returnaddress&country=" + (country==null? "" : System.Uri.EscapeDataString(country))+"&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ReturnaddressListResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Inserts a return address for the Merchant Center account.
		/// Content_returnaddress_insert {merchantId}/returnaddress
		/// </summary>
		/// <param name="merchantId">The Merchant Center account to insert a return address for.</param>
		/// <returns>Successful response</returns>
		public async Task<ReturnAddress> Content_returnaddress_insertAsync(string merchantId, ReturnAddress requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/returnaddress";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ReturnAddress>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes a return address for the given Merchant Center account.
		/// Content_returnaddress_delete {merchantId}/returnaddress/{returnAddressId}
		/// </summary>
		/// <param name="merchantId">The Merchant Center account from which to delete the given return address.</param>
		/// <param name="returnAddressId">Return address ID generated by Google.</param>
		/// <returns>Successful response</returns>
		public async Task Content_returnaddress_deleteAsync(string merchantId, string returnAddressId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/returnaddress/"+ (returnAddressId==null? "" : System.Uri.EscapeDataString(returnAddressId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets a return address of the Merchant Center account.
		/// Content_returnaddress_get {merchantId}/returnaddress/{returnAddressId}
		/// </summary>
		/// <param name="merchantId">The Merchant Center account to get a return address for.</param>
		/// <param name="returnAddressId">Return address ID generated by Google.</param>
		/// <returns>Successful response</returns>
		public async Task<ReturnAddress> Content_returnaddress_getAsync(string merchantId, string returnAddressId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/returnaddress/"+ (returnAddressId==null? "" : System.Uri.EscapeDataString(returnAddressId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ReturnAddress>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists the return policies of the Merchant Center account.
		/// Content_returnpolicy_list {merchantId}/returnpolicy
		/// </summary>
		/// <param name="merchantId">The Merchant Center account to list return policies for.</param>
		/// <returns>Successful response</returns>
		public async Task<ReturnpolicyListResponse> Content_returnpolicy_listAsync(string merchantId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/returnpolicy";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ReturnpolicyListResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Inserts a return policy for the Merchant Center account.
		/// Content_returnpolicy_insert {merchantId}/returnpolicy
		/// </summary>
		/// <param name="merchantId">The Merchant Center account to insert a return policy for.</param>
		/// <returns>Successful response</returns>
		public async Task<ReturnPolicy> Content_returnpolicy_insertAsync(string merchantId, ReturnPolicy requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/returnpolicy";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ReturnPolicy>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes a return policy for the given Merchant Center account.
		/// Content_returnpolicy_delete {merchantId}/returnpolicy/{returnPolicyId}
		/// </summary>
		/// <param name="merchantId">The Merchant Center account from which to delete the given return policy.</param>
		/// <param name="returnPolicyId">Return policy ID generated by Google.</param>
		/// <returns>Successful response</returns>
		public async Task Content_returnpolicy_deleteAsync(string merchantId, string returnPolicyId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/returnpolicy/"+ (returnPolicyId==null? "" : System.Uri.EscapeDataString(returnPolicyId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets a return policy of the Merchant Center account.
		/// Content_returnpolicy_get {merchantId}/returnpolicy/{returnPolicyId}
		/// </summary>
		/// <param name="merchantId">The Merchant Center account to get a return policy for.</param>
		/// <param name="returnPolicyId">Return policy ID generated by Google.</param>
		/// <returns>Successful response</returns>
		public async Task<ReturnPolicy> Content_returnpolicy_getAsync(string merchantId, string returnPolicyId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/returnpolicy/"+ (returnPolicyId==null? "" : System.Uri.EscapeDataString(returnPolicyId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ReturnPolicy>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists all existing return policies.
		/// Content_returnpolicyonline_list {merchantId}/returnpolicyonline
		/// </summary>
		/// <param name="merchantId">Required. The id of the merchant for which to retrieve the return policy online object.</param>
		/// <returns>Successful response</returns>
		public async Task<ListReturnPolicyOnlineResponse> Content_returnpolicyonline_listAsync(string merchantId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/returnpolicyonline";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListReturnPolicyOnlineResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a new return policy.
		/// Content_returnpolicyonline_create {merchantId}/returnpolicyonline
		/// </summary>
		/// <param name="merchantId">Required. The id of the merchant for which to retrieve the return policy online object.</param>
		/// <returns>Successful response</returns>
		public async Task<ReturnPolicyOnline> Content_returnpolicyonline_createAsync(string merchantId, ReturnPolicyOnline requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/returnpolicyonline";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ReturnPolicyOnline>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes an existing return policy.
		/// Content_returnpolicyonline_delete {merchantId}/returnpolicyonline/{returnPolicyId}
		/// </summary>
		/// <param name="merchantId">Required. The id of the merchant for which to retrieve the return policy online object.</param>
		/// <param name="returnPolicyId">Required. The id of the return policy to delete.</param>
		/// <returns>Successful response</returns>
		public async Task Content_returnpolicyonline_deleteAsync(string merchantId, string returnPolicyId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/returnpolicyonline/"+ (returnPolicyId==null? "" : System.Uri.EscapeDataString(returnPolicyId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets an existing return policy.
		/// Content_returnpolicyonline_get {merchantId}/returnpolicyonline/{returnPolicyId}
		/// </summary>
		/// <param name="merchantId">Required. The id of the merchant for which to retrieve the return policy online object.</param>
		/// <param name="returnPolicyId">Required. The id of the return policy to retrieve.</param>
		/// <returns>Successful response</returns>
		public async Task<ReturnPolicyOnline> Content_returnpolicyonline_getAsync(string merchantId, string returnPolicyId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/returnpolicyonline/"+ (returnPolicyId==null? "" : System.Uri.EscapeDataString(returnPolicyId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ReturnPolicyOnline>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Updates an existing return policy.
		/// Content_returnpolicyonline_patch {merchantId}/returnpolicyonline/{returnPolicyId}
		/// </summary>
		/// <param name="merchantId">Required. The id of the merchant for which to retrieve the return policy online object.</param>
		/// <param name="returnPolicyId">Required. The id of the return policy to update.</param>
		/// <returns>Successful response</returns>
		public async Task<ReturnPolicyOnline> Content_returnpolicyonline_patchAsync(string merchantId, string returnPolicyId, ReturnPolicyOnline requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/returnpolicyonline/"+ (returnPolicyId==null? "" : System.Uri.EscapeDataString(returnPolicyId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ReturnPolicyOnline>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a list of settlement reports from your Merchant Center account.
		/// Content_settlementreports_list {merchantId}/settlementreports
		/// </summary>
		/// <param name="merchantId">The Merchant Center account to list settlements for.</param>
		/// <param name="maxResults">The maximum number of settlements to return in the response, used for paging. The default value is 200 returns per page, and the maximum allowed value is 5000 returns per page.</param>
		/// <param name="pageToken">The token returned by the previous request.</param>
		/// <param name="transferEndDate">Obtains settlements which have transactions before this date (inclusively), in ISO 8601 format.</param>
		/// <param name="transferStartDate">Obtains settlements which have transactions after this date (inclusively), in ISO 8601 format.</param>
		/// <returns>Successful response</returns>
		public async Task<SettlementreportsListResponse> Content_settlementreports_listAsync(string merchantId, int maxResults, string pageToken, string transferEndDate, string transferStartDate, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/settlementreports&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&transferEndDate=" + (transferEndDate==null? "" : System.Uri.EscapeDataString(transferEndDate))+"&transferStartDate=" + (transferStartDate==null? "" : System.Uri.EscapeDataString(transferStartDate));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SettlementreportsListResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a settlement report from your Merchant Center account.
		/// Content_settlementreports_get {merchantId}/settlementreports/{settlementId}
		/// </summary>
		/// <param name="merchantId">The Merchant Center account of the settlement report.</param>
		/// <param name="settlementId">The Google-provided ID of the settlement.</param>
		/// <returns>Successful response</returns>
		public async Task<SettlementReport> Content_settlementreports_getAsync(string merchantId, string settlementId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/settlementreports/"+ (settlementId==null? "" : System.Uri.EscapeDataString(settlementId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SettlementReport>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a list of transactions for the settlement.
		/// Content_settlementtransactions_list {merchantId}/settlementreports/{settlementId}/transactions
		/// </summary>
		/// <param name="merchantId">The Merchant Center account to list transactions for.</param>
		/// <param name="settlementId">The Google-provided ID of the settlement.</param>
		/// <param name="maxResults">The maximum number of transactions to return in the response, used for paging. The default value is 200 transactions per page, and the maximum allowed value is 5000 transactions per page.</param>
		/// <param name="pageToken">The token returned by the previous request.</param>
		/// <param name="transactionIds">The list of transactions to return. If not set, all transactions will be returned.</param>
		/// <returns>Successful response</returns>
		public async Task<SettlementtransactionsListResponse> Content_settlementtransactions_listAsync(string merchantId, string settlementId, int maxResults, string pageToken, string[] transactionIds, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/settlementreports/"+ (settlementId==null? "" : System.Uri.EscapeDataString(settlementId))+"/transactions&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&"+string.Join("&", transactionIds.Select(z => $"transactionIds={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SettlementtransactionsListResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists the shipping settings of the sub-accounts in your Merchant Center account.
		/// Content_shippingsettings_list {merchantId}/shippingsettings
		/// </summary>
		/// <param name="merchantId">The ID of the managing account. This must be a multi-client account.</param>
		/// <param name="maxResults">The maximum number of shipping settings to return in the response, used for paging.</param>
		/// <param name="pageToken">The token returned by the previous request.</param>
		/// <returns>Successful response</returns>
		public async Task<ShippingsettingsListResponse> Content_shippingsettings_listAsync(string merchantId, int maxResults, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/shippingsettings&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ShippingsettingsListResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the shipping settings of the account.
		/// Content_shippingsettings_get {merchantId}/shippingsettings/{accountId}
		/// </summary>
		/// <param name="merchantId">The ID of the managing account. If this parameter is not the same as accountId, then this account must be a multi-client account and `accountId` must be the ID of a sub-account of this account.</param>
		/// <param name="accountId">The ID of the account for which to get/update shipping settings.</param>
		/// <returns>Successful response</returns>
		public async Task<ShippingSettings> Content_shippingsettings_getAsync(string merchantId, string accountId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/shippingsettings/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ShippingSettings>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Updates the shipping settings of the account. Any fields that are not provided are deleted from the resource.
		/// Content_shippingsettings_update {merchantId}/shippingsettings/{accountId}
		/// </summary>
		/// <param name="merchantId">The ID of the managing account. If this parameter is not the same as accountId, then this account must be a multi-client account and `accountId` must be the ID of a sub-account of this account.</param>
		/// <param name="accountId">The ID of the account for which to get/update shipping settings.</param>
		/// <returns>Successful response</returns>
		public async Task<ShippingSettings> Content_shippingsettings_updateAsync(string merchantId, string accountId, ShippingSettings requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/shippingsettings/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ShippingSettings>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the status and review eligibility for the Shopping Ads program. Returns errors and warnings if they require action to resolve, will become disapprovals, or impact impressions. Use `accountstatuses` to view all issues for an account.
		/// Content_shoppingadsprogram_get {merchantId}/shoppingadsprogram
		/// </summary>
		/// <param name="merchantId">Required. The ID of the account.</param>
		/// <returns>Successful response</returns>
		public async Task<ShoppingAdsProgramStatus> Content_shoppingadsprogram_getAsync(string merchantId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/shoppingadsprogram";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ShoppingAdsProgramStatus>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Requests a review of Shopping ads in a specific region. This method deprecated. Use the `MerchantSupportService` to view product and account issues and request a review.
		/// Content_shoppingadsprogram_requestreview {merchantId}/shoppingadsprogram/requestreview
		/// </summary>
		/// <param name="merchantId">Required. The ID of the account.</param>
		/// <returns>Successful response</returns>
		public async Task Content_shoppingadsprogram_requestreviewAsync(string merchantId, RequestReviewShoppingAdsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/shoppingadsprogram/requestreview";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves supported carriers and carrier services for an account.
		/// Content_shippingsettings_getsupportedcarriers {merchantId}/supportedCarriers
		/// </summary>
		/// <param name="merchantId">The ID of the account for which to retrieve the supported carriers.</param>
		/// <returns>Successful response</returns>
		public async Task<ShippingsettingsGetSupportedCarriersResponse> Content_shippingsettings_getsupportedcarriersAsync(string merchantId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/supportedCarriers";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ShippingsettingsGetSupportedCarriersResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves supported holidays for an account.
		/// Content_shippingsettings_getsupportedholidays {merchantId}/supportedHolidays
		/// </summary>
		/// <param name="merchantId">The ID of the account for which to retrieve the supported holidays.</param>
		/// <returns>Successful response</returns>
		public async Task<ShippingsettingsGetSupportedHolidaysResponse> Content_shippingsettings_getsupportedholidaysAsync(string merchantId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/supportedHolidays";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ShippingsettingsGetSupportedHolidaysResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves supported pickup services for an account.
		/// Content_shippingsettings_getsupportedpickupservices {merchantId}/supportedPickupServices
		/// </summary>
		/// <param name="merchantId">The ID of the account for which to retrieve the supported pickup services.</param>
		/// <returns>Successful response</returns>
		public async Task<ShippingsettingsGetSupportedPickupServicesResponse> Content_shippingsettings_getsupportedpickupservicesAsync(string merchantId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/supportedPickupServices";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ShippingsettingsGetSupportedPickupServicesResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Sandbox only. Creates a test order.
		/// Content_orders_createtestorder {merchantId}/testorders
		/// </summary>
		/// <param name="merchantId">The ID of the account that should manage the order. This cannot be a multi-client account.</param>
		/// <returns>Successful response</returns>
		public async Task<OrdersCreateTestOrderResponse> Content_orders_createtestorderAsync(string merchantId, OrdersCreateTestOrderRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/testorders";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OrdersCreateTestOrderResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Sandbox only. Moves a test order from state "`inProgress`" to state "`pendingShipment`".
		/// Content_orders_advancetestorder {merchantId}/testorders/{orderId}/advance
		/// </summary>
		/// <param name="merchantId">The ID of the account that manages the order. This cannot be a multi-client account.</param>
		/// <param name="orderId">The ID of the test order to modify.</param>
		/// <returns>Successful response</returns>
		public async Task<OrdersAdvanceTestOrderResponse> Content_orders_advancetestorderAsync(string merchantId, string orderId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/testorders/"+ (orderId==null? "" : System.Uri.EscapeDataString(orderId))+"/advance";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OrdersAdvanceTestOrderResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Sandbox only. Cancels a test order for customer-initiated cancellation.
		/// Content_orders_canceltestorderbycustomer {merchantId}/testorders/{orderId}/cancelByCustomer
		/// </summary>
		/// <param name="merchantId">The ID of the account that manages the order. This cannot be a multi-client account.</param>
		/// <param name="orderId">The ID of the test order to cancel.</param>
		/// <returns>Successful response</returns>
		public async Task<OrdersCancelTestOrderByCustomerResponse> Content_orders_canceltestorderbycustomerAsync(string merchantId, string orderId, OrdersCancelTestOrderByCustomerRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/testorders/"+ (orderId==null? "" : System.Uri.EscapeDataString(orderId))+"/cancelByCustomer";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OrdersCancelTestOrderByCustomerResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Sandbox only. Retrieves an order template that can be used to quickly create a new order in sandbox.
		/// Content_orders_gettestordertemplate {merchantId}/testordertemplates/{templateName}
		/// </summary>
		/// <param name="merchantId">The ID of the account that should manage the order. This cannot be a multi-client account.</param>
		/// <param name="templateName">The name of the template to retrieve.</param>
		/// <param name="country">The country of the template to retrieve. Defaults to "`US`".</param>
		/// <returns>Successful response</returns>
		public async Task<OrdersGetTestOrderTemplateResponse> Content_orders_gettestordertemplateAsync(string merchantId, Content_orders_gettestordertemplateTemplateName templateName, string country, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (merchantId==null? "" : System.Uri.EscapeDataString(merchantId))+"/testordertemplates/"+templateName+"&country=" + (country==null? "" : System.Uri.EscapeDataString(country));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OrdersGetTestOrderTemplateResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
	
	public enum Content_accounts_listView
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MERCHANT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CSS = 1,
	}
	
	public enum Content_orderreturns_listOrderBy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RETURN_CREATION_TIME_DESC = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RETURN_CREATION_TIME_ASC = 1,
	}
	
	public enum Content_orders_gettestordertemplateTemplateName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEMPLATE1 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEMPLATE2 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEMPLATE1A = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEMPLATE1B = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEMPLATE3 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEMPLATE4 = 5,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
