//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Accounts are your bank accounts with Increase. They store money, receive transfers, and send payments. They earn interest and have depository insurance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Account
	{
		
		/// <summary>
		/// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time at which the Account was created.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.DateTimeOffset Created_at { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the Account currency.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public AccountCurrency Currency { get; set; }
		
		/// <summary>
		/// The identifier for the Entity the Account belongs to.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="entity_id")]
		public string Entity_id { get; set; }
		
		/// <summary>
		/// The Account identifier.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The identifier of an Entity that, while not owning the Account, is associated with its activity.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="informational_entity_id")]
		public string Informational_entity_id { get; set; }
		
		/// <summary>
		/// The interest accrued but not yet paid, expressed as a string containing a floating-point value.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="interest_accrued")]
		public string Interest_accrued { get; set; }
		
		/// <summary>
		/// The latest [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date on which interest was accrued.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="interest_accrued_at")]
		public System.Nullable<System.DateOnly> Interest_accrued_at { get; set; }
		
		/// <summary>
		/// The name you choose for the Account.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The status of the Account.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public AccountStatus Status { get; set; }
		
		/// <summary>
		/// A constant representing the object's type. For this resource it will always be `account`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public AccountType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AccountCurrency
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CAD")]
		CAD = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CHF")]
		CHF = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EUR")]
		EUR = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GBP")]
		GBP = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="JPY")]
		JPY = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="USD")]
		USD = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AccountStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="open")]
		open = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="closed")]
		closed = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AccountType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="account")]
		account = 0,
	}
	
	/// <summary>
	/// A list of Account objects
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Account_list
	{
		
		/// <summary>
		/// The contents of the list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Account[] Data { get; set; }
		
		/// <summary>
		/// A pointer to a place in the list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="next_cursor")]
		public string Next_cursor { get; set; }
	}
	
	/// <summary>
	/// Each account can have multiple account and routing numbers. We recommend that you use a set per vendor. This is similar to how you use different passwords for different websites. Account numbers can also be used to seamlessly reconcile inbound payments. Generating a unique account number per vendor ensures you always know the originator of an incoming payment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Account_number
	{
		
		/// <summary>
		/// The identifier for the account this Account Number belongs to.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="account_id")]
		public string Account_id { get; set; }
		
		/// <summary>
		/// The account number.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="account_number")]
		public string Account_number1 { get; set; }
		
		/// <summary>
		/// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time at which the Account Number was created.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.DateTimeOffset Created_at { get; set; }
		
		/// <summary>
		/// The Account Number identifier.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The name you choose for the Account Number.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The American Bankers' Association (ABA) Routing Transit Number (RTN).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="routing_number")]
		public string Routing_number { get; set; }
		
		/// <summary>
		/// This indicates if payments can be made to the Account Number.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public Account_numberStatus Status { get; set; }
		
		/// <summary>
		/// A constant representing the object's type. For this resource it will always be `account_number`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public Account_numberType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Account_numberStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="active")]
		active = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="disabled")]
		disabled = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="canceled")]
		canceled = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Account_numberType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="account_number")]
		account_number = 0,
	}
	
	/// <summary>
	/// A list of Account Number objects
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Account_number_list
	{
		
		/// <summary>
		/// The contents of the list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Account_number[] Data { get; set; }
		
		/// <summary>
		/// A pointer to a place in the list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="next_cursor")]
		public string Next_cursor { get; set; }
	}
	
	/// <summary>
	/// Account Statements are generated monthly for every active Account. You can access the statement's data via the API or retrieve a PDF with its details via its associated File.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Account_statement
	{
		
		/// <summary>
		/// The identifier for the Account this Account Statement belongs to.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="account_id")]
		public string Account_id { get; set; }
		
		/// <summary>
		/// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time at which the Account Statement was created.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.DateTimeOffset Created_at { get; set; }
		
		/// <summary>
		/// The Account's balance at the start of its statement period.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ending_balance")]
		public int Ending_balance { get; set; }
		
		/// <summary>
		/// The identifier of the File containing a PDF of the statement.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="file_id")]
		public string File_id { get; set; }
		
		/// <summary>
		/// The Account Statement identifier.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The Account's balance at the start of its statement period.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="starting_balance")]
		public int Starting_balance { get; set; }
		
		/// <summary>
		/// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time representing the end of the period the Account Statement covers.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="statement_period_end")]
		public System.DateTimeOffset Statement_period_end { get; set; }
		
		/// <summary>
		/// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time representing the start of the period the Account Statement covers.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="statement_period_start")]
		public System.DateTimeOffset Statement_period_start { get; set; }
		
		/// <summary>
		/// A constant representing the object's type. For this resource it will always be `account_statement`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public Account_statementType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Account_statementType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="account_statement")]
		account_statement = 0,
	}
	
	/// <summary>
	/// A list of Account Statement objects
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Account_statement_list
	{
		
		/// <summary>
		/// The contents of the list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Account_statement[] Data { get; set; }
		
		/// <summary>
		/// A pointer to a place in the list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="next_cursor")]
		public string Next_cursor { get; set; }
	}
	
	/// <summary>
	/// Account transfers move funds between your own accounts at Increase.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Account_transfer
	{
		
		/// <summary>
		/// The Account to which the transfer belongs.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="account_id")]
		public string Account_id { get; set; }
		
		/// <summary>
		/// The transfer amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// If your account requires approvals for transfers and the transfer was approved, this will contain details of the approval.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="approval")]
		public Account_transferApproval Approval { get; set; }
		
		/// <summary>
		/// If your account requires approvals for transfers and the transfer was not approved, this will contain details of the cancellation.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="cancellation")]
		public Account_transferCancellation Cancellation { get; set; }
		
		/// <summary>
		/// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was created.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.DateTimeOffset Created_at { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the destination account currency.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public AccountCurrency Currency { get; set; }
		
		/// <summary>
		/// The description that will show on the transactions.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The destination account's identifier.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="destination_account_id")]
		public string Destination_account_id { get; set; }
		
		/// <summary>
		/// The ID for the transaction receiving the transfer.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="destination_transaction_id")]
		public string Destination_transaction_id { get; set; }
		
		/// <summary>
		/// The account transfer's identifier.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The transfer's network.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="network")]
		public AccountType Network { get; set; }
		
		/// <summary>
		/// The lifecycle status of the transfer.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public Account_transferStatus Status { get; set; }
		
		/// <summary>
		/// The ID for the transaction funding the transfer.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transaction_id")]
		public string Transaction_id { get; set; }
		
		/// <summary>
		/// A constant representing the object's type. For this resource it will always be `account_transfer`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public Account_transferType Type { get; set; }
	}
	
	public class Account_transferApproval
	{
		
		/// <summary>
		/// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was approved.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="approved_at")]
		public System.DateTimeOffset Approved_at { get; set; }
		
		/// <summary>
		/// If the Transfer was approved by a user in the dashboard, the email address of that user.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="approved_by")]
		public string Approved_by { get; set; }
	}
	
	public class Account_transferCancellation
	{
		
		/// <summary>
		/// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Transfer was canceled.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="canceled_at")]
		public System.DateTimeOffset Canceled_at { get; set; }
		
		/// <summary>
		/// If the Transfer was canceled by a user in the dashboard, the email address of that user.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="canceled_by")]
		public string Canceled_by { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Account_transferStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pending_approval")]
		pending_approval = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="canceled")]
		canceled = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="complete")]
		complete = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Account_transferType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="account_transfer")]
		account_transfer = 0,
	}
	
	/// <summary>
	/// A list of Account Transfer objects
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Account_transfer_list
	{
		
		/// <summary>
		/// The contents of the list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Account_transfer[] Data { get; set; }
		
		/// <summary>
		/// A pointer to a place in the list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="next_cursor")]
		public string Next_cursor { get; set; }
	}
	
	/// <summary>
	/// ACH Prenotifications are one way you can verify account and routing numbers by Automated Clearing House (ACH).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Ach_prenotification
	{
		
		/// <summary>
		/// The destination account number.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="account_number")]
		public string Account_number { get; set; }
		
		/// <summary>
		/// Additional information for the recipient.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="addendum")]
		public string Addendum { get; set; }
		
		/// <summary>
		/// The description of the date of the notification.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="company_descriptive_date")]
		public string Company_descriptive_date { get; set; }
		
		/// <summary>
		/// Optional data associated with the notification.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="company_discretionary_data")]
		public string Company_discretionary_data { get; set; }
		
		/// <summary>
		/// The description of the notification.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="company_entry_description")]
		public string Company_entry_description { get; set; }
		
		/// <summary>
		/// The name by which you know the company.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="company_name")]
		public string Company_name { get; set; }
		
		/// <summary>
		/// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the prenotification was created.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.DateTimeOffset Created_at { get; set; }
		
		/// <summary>
		/// If the notification is for a future credit or debit.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="credit_debit_indicator")]
		public System.Nullable<Ach_prenotificationCredit_debit_indicator> Credit_debit_indicator { get; set; }
		
		/// <summary>
		/// The effective date in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="effective_date")]
		public System.Nullable<System.DateTimeOffset> Effective_date { get; set; }
		
		/// <summary>
		/// The ACH Prenotification's identifier.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// If your prenotification is returned, this will contain details of the return.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="prenotification_return")]
		public Ach_prenotificationPrenotification_return Prenotification_return { get; set; }
		
		/// <summary>
		/// The American Bankers' Association (ABA) Routing Transit Number (RTN).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="routing_number")]
		public string Routing_number { get; set; }
		
		/// <summary>
		/// The lifecycle status of the ACH Prenotification.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public Ach_prenotificationStatus Status { get; set; }
		
		/// <summary>
		/// A constant representing the object's type. For this resource it will always be `ach_prenotification`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public Ach_prenotificationType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Ach_prenotificationCredit_debit_indicator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="credit")]
		credit = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="debit")]
		debit = 1,
	}
	
	public class Ach_prenotificationPrenotification_return
	{
		
		/// <summary>
		/// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Prenotification was returned.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.DateTimeOffset Created_at { get; set; }
		
		/// <summary>
		/// Why the Prenotification was returned.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="return_reason_code")]
		public string Return_reason_code { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Ach_prenotificationStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pending_submitting")]
		pending_submitting = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="requires_attention")]
		requires_attention = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="returned")]
		returned = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="submitted")]
		submitted = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Ach_prenotificationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ach_prenotification")]
		ach_prenotification = 0,
	}
	
	/// <summary>
	/// A list of ACH Prenotification objects
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Ach_prenotification_list
	{
		
		/// <summary>
		/// The contents of the list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Ach_prenotification[] Data { get; set; }
		
		/// <summary>
		/// A pointer to a place in the list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="next_cursor")]
		public string Next_cursor { get; set; }
	}
	
	/// <summary>
	/// ACH transfers move funds between your Increase account and any other account accessible by the Automated Clearing House (ACH).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Ach_transfer
	{
		
		/// <summary>
		/// The Account to which the transfer belongs.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="account_id")]
		public string Account_id { get; set; }
		
		/// <summary>
		/// The destination account number.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="account_number")]
		public string Account_number { get; set; }
		
		/// <summary>
		/// Additional information that will be sent to the recipient.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="addendum")]
		public string Addendum { get; set; }
		
		/// <summary>
		/// The transfer amount in USD cents. A positive amount indicates a credit transfer pushing funds to the receiving account. A negative amount indicates a debit transfer pulling funds from the receiving account.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// If your account requires approvals for transfers and the transfer was approved, this will contain details of the approval.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="approval")]
		public Ach_transferApproval Approval { get; set; }
		
		/// <summary>
		/// If your account requires approvals for transfers and the transfer was not approved, this will contain details of the cancellation.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="cancellation")]
		public Ach_transferCancellation Cancellation { get; set; }
		
		/// <summary>
		/// The description of the date of the transfer.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="company_descriptive_date")]
		public string Company_descriptive_date { get; set; }
		
		/// <summary>
		/// The data you chose to associate with the transfer.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="company_discretionary_data")]
		public string Company_discretionary_data { get; set; }
		
		/// <summary>
		/// The description of the transfer you set to be shown to the recipient.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="company_entry_description")]
		public string Company_entry_description { get; set; }
		
		/// <summary>
		/// The name by which the recipient knows you.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="company_name")]
		public string Company_name { get; set; }
		
		/// <summary>
		/// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was created.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.DateTimeOffset Created_at { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transfer's currency. For ACH transfers this is always equal to `usd`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public AccountCurrency Currency { get; set; }
		
		/// <summary>
		/// The transfer effective date in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="effective_date")]
		public System.Nullable<System.DateOnly> Effective_date { get; set; }
		
		/// <summary>
		/// The identifier of the External Account the transfer was made to, if any.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="external_account_id")]
		public string External_account_id { get; set; }
		
		/// <summary>
		/// The type of the account to which the transfer will be sent.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="funding")]
		public Ach_transferFunding Funding { get; set; }
		
		/// <summary>
		/// The ACH transfer's identifier.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Your identifer for the transfer recipient.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="individual_id")]
		public string Individual_id { get; set; }
		
		/// <summary>
		/// The name of the transfer recipient. This value is information and not verified by the recipient's bank.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="individual_name")]
		public string Individual_name { get; set; }
		
		/// <summary>
		/// The transfer's network.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="network")]
		public Ach_transferNetwork Network { get; set; }
		
		/// <summary>
		/// If the receiving bank accepts the transfer but notifies that future transfers should use different details, this will contain those details.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="notifications_of_change")]
		public Ach_transferNotifications_of_change[] Ach_transferNotifications_of_change { get; set; }
		
		/// <summary>
		/// If your transfer is returned, this will contain details of the return.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="return")]
		public Ach_transferReturn Return { get; set; }
		
		/// <summary>
		/// The American Bankers' Association (ABA) Routing Transit Number (RTN).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="routing_number")]
		public string Routing_number { get; set; }
		
		/// <summary>
		/// The Standard Entry Class (SEC) code to use for the transfer.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="standard_entry_class_code")]
		public Ach_transferStandard_entry_class_code Standard_entry_class_code { get; set; }
		
		/// <summary>
		/// The descriptor that will show on the recipient's bank statement.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="statement_descriptor")]
		public string Statement_descriptor { get; set; }
		
		/// <summary>
		/// The lifecycle status of the transfer.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public Ach_transferStatus Status { get; set; }
		
		/// <summary>
		/// After the transfer is submitted to FedACH, this will contain supplemental details.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="submission")]
		public Ach_transferSubmission Submission { get; set; }
		
		/// <summary>
		/// The ID for the transaction funding the transfer.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transaction_id")]
		public string Transaction_id { get; set; }
		
		/// <summary>
		/// A constant representing the object's type. For this resource it will always be `ach_transfer`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public Ach_transferType Type { get; set; }
	}
	
	public class Ach_transferApproval
	{
		
		/// <summary>
		/// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was approved.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="approved_at")]
		public System.DateTimeOffset Approved_at { get; set; }
		
		/// <summary>
		/// If the Transfer was approved by a user in the dashboard, the email address of that user.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="approved_by")]
		public string Approved_by { get; set; }
	}
	
	public class Ach_transferCancellation
	{
		
		/// <summary>
		/// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Transfer was canceled.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="canceled_at")]
		public System.DateTimeOffset Canceled_at { get; set; }
		
		/// <summary>
		/// If the Transfer was canceled by a user in the dashboard, the email address of that user.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="canceled_by")]
		public string Canceled_by { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Ach_transferFunding
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="checking")]
		checking = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="savings")]
		savings = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Ach_transferNetwork
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ach")]
		ach = 0,
	}
	
	public class Ach_transferNotifications_of_change
	{
		
		/// <summary>
		/// The type of change that occurred.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="change_code")]
		public string Change_code { get; set; }
		
		/// <summary>
		/// The corrected data.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="corrected_data")]
		public string Corrected_data { get; set; }
		
		/// <summary>
		/// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the notification occurred.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.DateTimeOffset Created_at { get; set; }
	}
	
	public class Ach_transferReturn
	{
		
		/// <summary>
		/// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was created.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.DateTimeOffset Created_at { get; set; }
		
		/// <summary>
		/// Why the ACH Transfer was returned.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="return_reason_code")]
		public Ach_transferReturnReturn_reason_code Return_reason_code { get; set; }
		
		/// <summary>
		/// The identifier of the Tranasaction associated with this return.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transaction_id")]
		public string Transaction_id { get; set; }
		
		/// <summary>
		/// The identifier of the ACH Transfer associated with this return.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transfer_id")]
		public string Transfer_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Ach_transferReturnReturn_reason_code
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="insufficient_fund")]
		insufficient_fund = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="no_account")]
		no_account = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="account_closed")]
		account_closed = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="invalid_account_number_structure")]
		invalid_account_number_structure = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="account_frozen_entry_returned_per_ofac_instruction")]
		account_frozen_entry_returned_per_ofac_instruction = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="credit_entry_refused_by_receiver")]
		credit_entry_refused_by_receiver = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="unauthorized_debit_to_consumer_account_using_corporate_sec_code")]
		unauthorized_debit_to_consumer_account_using_corporate_sec_code = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="corporate_customer_advised_not_authorized")]
		corporate_customer_advised_not_authorized = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="payment_stopped")]
		payment_stopped = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="non_transaction_account")]
		non_transaction_account = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="uncollected_funds")]
		uncollected_funds = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="routing_number_check_digit_error")]
		routing_number_check_digit_error = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="customer_advised_unauthorized_improper_ineligible_or_incomplete")]
		customer_advised_unauthorized_improper_ineligible_or_incomplete = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="amount_field_error")]
		amount_field_error = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="authorization_revoked_by_customer")]
		authorization_revoked_by_customer = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="invalid_ach_routing_number")]
		invalid_ach_routing_number = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="file_record_edit_criteria")]
		file_record_edit_criteria = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="enr_invalid_individual_name")]
		enr_invalid_individual_name = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="returned_per_odfi_request")]
		returned_per_odfi_request = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="addenda_error")]
		addenda_error = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="limited_participation_dfi")]
		limited_participation_dfi = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="incorrectly_coded_outbound_international_payment")]
		incorrectly_coded_outbound_international_payment = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="other")]
		other = 22,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Ach_transferStandard_entry_class_code
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="corporate_credit_or_debit")]
		corporate_credit_or_debit = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="prearranged_payments_and_deposit")]
		prearranged_payments_and_deposit = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="internet_initiated")]
		internet_initiated = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Ach_transferStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pending_approval")]
		pending_approval = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="canceled")]
		canceled = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pending_reviewing")]
		pending_reviewing = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pending_submission")]
		pending_submission = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="submitted")]
		submitted = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="returned")]
		returned = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="requires_attention")]
		requires_attention = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="rejected")]
		rejected = 7,
	}
	
	public class Ach_transferSubmission
	{
		
		/// <summary>
		/// When the ACH transfer was sent to FedACH.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="submitted_at")]
		public System.DateTimeOffset Submitted_at { get; set; }
		
		/// <summary>
		/// The trace number for the submission.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="trace_number")]
		public string Trace_number { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Ach_transferType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ach_transfer")]
		ach_transfer = 0,
	}
	
	/// <summary>
	/// A list of ACH Transfer objects
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Ach_transfer_list
	{
		
		/// <summary>
		/// The contents of the list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Ach_transfer[] Data { get; set; }
		
		/// <summary>
		/// A pointer to a place in the list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="next_cursor")]
		public string Next_cursor { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Action_a_real_time_decision_parameters
	{
		
		/// <summary>
		/// If the Real-Time Decision relates to a card authorization attempt, this object contains your response to the authorization.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="card_authorization")]
		public Action_a_real_time_decision_parametersCard_authorization Card_authorization { get; set; }
		
		/// <summary>
		/// If the Real-Time Decision relates to a digital wallet authentication attempt, this object contains your response to the authentication.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="digital_wallet_authentication")]
		public Action_a_real_time_decision_parametersDigital_wallet_authentication Digital_wallet_authentication { get; set; }
		
		/// <summary>
		/// If the Real-Time Decision relates to a digital wallet token provisioning attempt, this object contains your response to the attempt.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="digital_wallet_token")]
		public Action_a_real_time_decision_parametersDigital_wallet_token Digital_wallet_token { get; set; }
	}
	
	public class Action_a_real_time_decision_parametersCard_authorization
	{
		
		/// <summary>
		/// Whether the card authorization should be approved or declined.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="decision")]
		public Action_a_real_time_decision_parametersCard_authorizationDecision Decision { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Action_a_real_time_decision_parametersCard_authorizationDecision
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="approve")]
		approve = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="decline")]
		decline = 1,
	}
	
	public class Action_a_real_time_decision_parametersDigital_wallet_authentication
	{
		
		/// <summary>
		/// Whether your application was able to deliver the one-time passcode.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="result")]
		public Action_a_real_time_decision_parametersDigital_wallet_authenticationResult Result { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Action_a_real_time_decision_parametersDigital_wallet_authenticationResult
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="success")]
		success = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="failure")]
		failure = 1,
	}
	
	public class Action_a_real_time_decision_parametersDigital_wallet_token
	{
		
		/// <summary>
		/// If your application approves the provisioning attempt, this contains metadata about the digital wallet token that will be generated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="approval")]
		public Action_a_real_time_decision_parametersDigital_wallet_tokenApproval Approval { get; set; }
		
		/// <summary>
		/// If your application declines the provisioning attempt, this contains details about the decline.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="decline")]
		public Action_a_real_time_decision_parametersDigital_wallet_tokenDecline Decline { get; set; }
	}
	
	public class Action_a_real_time_decision_parametersDigital_wallet_tokenApproval
	{
		
		/// <summary>
		/// The identifier of the Card Profile to assign to the Digital Wallet token.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="card_profile_id")]
		public string Card_profile_id { get; set; }
		
		/// <summary>
		/// An email address that can be used to verify the cardholder via one-time passcode.
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Email { get; set; }
		
		/// <summary>
		/// A phone number that can be used to verify the cardholder via one-time passcode over SMS.
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phone")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Phone { get; set; }
	}
	
	public class Action_a_real_time_decision_parametersDigital_wallet_tokenDecline
	{
		
		/// <summary>
		/// Why the tokenization attempt was declined. This is for logging purposes only and is not displayed to the end-user.
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Reason { get; set; }
	}
	
	/// <summary>
	/// Represents a request to lookup the balance of an Account at a given point in time.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Balance_lookup
	{
		
		/// <summary>
		/// The identifier for the account for which the balance was queried.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="account_id")]
		public string Account_id { get; set; }
		
		/// <summary>
		/// The Account's available balance, representing the current balance less any open Pending Transactions on the Account.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="available_balance")]
		public int Available_balance { get; set; }
		
		/// <summary>
		/// The Account's current balance, representing the sum of all posted Transactions on the Account.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="current_balance")]
		public int Current_balance { get; set; }
		
		/// <summary>
		/// A constant representing the object's type. For this resource it will always be `balance_lookup`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public Balance_lookupType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Balance_lookupType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="balance_lookup")]
		balance_lookup = 0,
	}
	
	/// <summary>
	/// Accounts are T-accounts. They can store accounting entries.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Bookkeeping_account
	{
		
		/// <summary>
		/// The API Account associated with this bookkeeping account.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="account_id")]
		public string Account_id { get; set; }
		
		/// <summary>
		/// The compliance category of the account.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="compliance_category")]
		public System.Nullable<Bookkeeping_accountCompliance_category> Compliance_category { get; set; }
		
		/// <summary>
		/// The Entity associated with this bookkeeping account.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="entity_id")]
		public string Entity_id { get; set; }
		
		/// <summary>
		/// The account identifier.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The name you choose for the account.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// A constant representing the object's type. For this resource it will always be `bookkeeping_account`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public Bookkeeping_accountType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Bookkeeping_accountCompliance_category
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="commingled_cash")]
		commingled_cash = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="customer_balance")]
		customer_balance = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Bookkeeping_accountType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="bookkeeping_account")]
		bookkeeping_account = 0,
	}
	
	/// <summary>
	/// A list of Bookkeeping Account objects
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Bookkeeping_account_list
	{
		
		/// <summary>
		/// The contents of the list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Bookkeeping_account[] Data { get; set; }
		
		/// <summary>
		/// A pointer to a place in the list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="next_cursor")]
		public string Next_cursor { get; set; }
	}
	
	/// <summary>
	/// Entries are T-account entries recording debits and credits.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Bookkeeping_entry
	{
		
		/// <summary>
		/// The identifier for the Account the Entry belongs to.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="account_id")]
		public string Account_id { get; set; }
		
		/// <summary>
		/// The Entry amount in the minor unit of its currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The identifier for the Account the Entry belongs to.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="entry_set_id")]
		public string Entry_set_id { get; set; }
		
		/// <summary>
		/// The entry identifier.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// A constant representing the object's type. For this resource it will always be `bookkeeping_entry`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public Bookkeeping_entryType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Bookkeeping_entryType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="bookkeeping_entry")]
		bookkeeping_entry = 0,
	}
	
	/// <summary>
	/// A list of Bookkeeping Entry objects
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Bookkeeping_entry_list
	{
		
		/// <summary>
		/// The contents of the list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Bookkeeping_entry[] Data { get; set; }
		
		/// <summary>
		/// A pointer to a place in the list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="next_cursor")]
		public string Next_cursor { get; set; }
	}
	
	/// <summary>
	/// Entry Sets are accounting entries that are transactionally applied.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Bookkeeping_entry_set
	{
		
		/// <summary>
		/// The timestamp of the entry set.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="date")]
		public System.DateTimeOffset Date { get; set; }
		
		/// <summary>
		/// The entries
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="entries")]
		public Bookkeeping_entry_setEntries[] Bookkeeping_entry_setEntries { get; set; }
		
		/// <summary>
		/// The entry set identifier.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The transaction identifier, if any.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transaction_id")]
		public string Transaction_id { get; set; }
		
		/// <summary>
		/// A constant representing the object's type. For this resource it will always be `bookkeeping_entry_set`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public Bookkeeping_entry_setType Type { get; set; }
	}
	
	public class Bookkeeping_entry_setEntries
	{
		
		/// <summary>
		/// The bookkeeping account impacted by the entry.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="account_id")]
		public string Account_id { get; set; }
		
		/// <summary>
		/// The amount of the entry in minor units.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The entry identifier.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Bookkeeping_entry_setType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="bookkeeping_entry_set")]
		bookkeeping_entry_set = 0,
	}
	
	/// <summary>
	/// Cards are commercial credit cards. They'll immediately work for online purchases after you create them. All cards maintain a credit limit of 100% of the Account’s available balance at the time of transaction. Funds are deducted from the Account upon transaction settlement.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Card
	{
		
		/// <summary>
		/// The identifier for the account this card belongs to.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="account_id")]
		public string Account_id { get; set; }
		
		/// <summary>
		/// The Card's billing address.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="billing_address")]
		public CardBilling_address Billing_address { get; set; }
		
		/// <summary>
		/// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Card was created.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.DateTimeOffset Created_at { get; set; }
		
		/// <summary>
		/// The card's description for display purposes.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The contact information used in the two-factor steps for digital wallet card creation. At least one field must be present to complete the digital wallet steps.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="digital_wallet")]
		public CardDigital_wallet Digital_wallet { get; set; }
		
		/// <summary>
		/// The month the card expires in M format (e.g., August is 8).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="expiration_month")]
		public int Expiration_month { get; set; }
		
		/// <summary>
		/// The year the card expires in YYYY format (e.g., 2025).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="expiration_year")]
		public int Expiration_year { get; set; }
		
		/// <summary>
		/// The card identifier.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The last 4 digits of the Card's Primary Account Number.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="last4")]
		public string Last4 { get; set; }
		
		/// <summary>
		/// This indicates if payments can be made with the card.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public Account_numberStatus Status { get; set; }
		
		/// <summary>
		/// A constant representing the object's type. For this resource it will always be `card`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public CardType Type { get; set; }
	}
	
	public class CardBilling_address
	{
		
		/// <summary>
		/// The city of the billing address.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		/// <summary>
		/// The first line of the billing address.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="line1")]
		public string Line1 { get; set; }
		
		/// <summary>
		/// The second line of the billing address.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="line2")]
		public string Line2 { get; set; }
		
		/// <summary>
		/// The postal code of the billing address.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="postal_code")]
		public string Postal_code { get; set; }
		
		/// <summary>
		/// The US state of the billing address.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
	}
	
	public class CardDigital_wallet
	{
		
		/// <summary>
		/// The card profile assigned to this digital card. Card profiles may also be assigned at the program level.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="card_profile_id")]
		public string Card_profile_id { get; set; }
		
		/// <summary>
		/// An email address that can be used to verify the cardholder via one-time passcode over email.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// A phone number that can be used to verify the cardholder via one-time passcode over SMS.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="phone")]
		public string Phone { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CardType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="card")]
		card = 0,
	}
	
	/// <summary>
	/// An object containing the sensitive details (card number, cvc, etc) for a Card.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Card_details
	{
		
		/// <summary>
		/// The identifier for the Card for which sensitive details have been returned.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="card_id")]
		public string Card_id { get; set; }
		
		/// <summary>
		/// The month the card expires in M format (e.g., August is 8).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="expiration_month")]
		public int Expiration_month { get; set; }
		
		/// <summary>
		/// The year the card expires in YYYY format (e.g., 2025).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="expiration_year")]
		public int Expiration_year { get; set; }
		
		/// <summary>
		/// The card number.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="primary_account_number")]
		public string Primary_account_number { get; set; }
		
		/// <summary>
		/// A constant representing the object's type. For this resource it will always be `card_details`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public Card_detailsType Type { get; set; }
		
		/// <summary>
		/// The three-digit verification code for the card. It's also known as the Card Verification Code (CVC), the Card Verification Value (CVV), or the Card Identification (CID).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="verification_code")]
		public string Verification_code { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Card_detailsType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="card_details")]
		card_details = 0,
	}
	
	/// <summary>
	/// If unauthorized activity occurs on a card, you can create a Card Dispute and we'll return the funds if appropriate.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Card_dispute
	{
		
		/// <summary>
		/// If the Card Dispute's status is `accepted`, this will contain details of the successful dispute.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="acceptance")]
		public Card_disputeAcceptance Acceptance { get; set; }
		
		/// <summary>
		/// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Card Dispute was created.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.DateTimeOffset Created_at { get; set; }
		
		/// <summary>
		/// The identifier of the Transaction that was disputed.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="disputed_transaction_id")]
		public string Disputed_transaction_id { get; set; }
		
		/// <summary>
		/// Why you disputed the Transaction in question.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="explanation")]
		public string Explanation { get; set; }
		
		/// <summary>
		/// The Card Dispute identifier.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// If the Card Dispute's status is `rejected`, this will contain details of the unsuccessful dispute.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="rejection")]
		public Card_disputeRejection Rejection { get; set; }
		
		/// <summary>
		/// The results of the Dispute investigation.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public Card_disputeStatus Status { get; set; }
		
		/// <summary>
		/// A constant representing the object's type. For this resource it will always be `card_dispute`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public Card_disputeType Type { get; set; }
	}
	
	public class Card_disputeAcceptance
	{
		
		/// <summary>
		/// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Card Dispute was accepted.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="accepted_at")]
		public System.DateTimeOffset Accepted_at { get; set; }
		
		/// <summary>
		/// The identifier of the Card Dispute that was accepted.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="card_dispute_id")]
		public string Card_dispute_id { get; set; }
		
		/// <summary>
		/// The identifier of the Transaction that was created to return the disputed funds to your account.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transaction_id")]
		public string Transaction_id { get; set; }
	}
	
	public class Card_disputeRejection
	{
		
		/// <summary>
		/// The identifier of the Card Dispute that was rejected.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="card_dispute_id")]
		public string Card_dispute_id { get; set; }
		
		/// <summary>
		/// Why the Card Dispute was rejected.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="explanation")]
		public string Explanation { get; set; }
		
		/// <summary>
		/// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Card Dispute was rejected.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="rejected_at")]
		public System.DateTimeOffset Rejected_at { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Card_disputeStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pending_reviewing")]
		pending_reviewing = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="accepted")]
		accepted = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="rejected")]
		rejected = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Card_disputeType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="card_dispute")]
		card_dispute = 0,
	}
	
	/// <summary>
	/// A list of Card Dispute objects
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Card_dispute_list
	{
		
		/// <summary>
		/// The contents of the list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Card_dispute[] Data { get; set; }
		
		/// <summary>
		/// A pointer to a place in the list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="next_cursor")]
		public string Next_cursor { get; set; }
	}
	
	/// <summary>
	/// A list of Card objects
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Card_list
	{
		
		/// <summary>
		/// The contents of the list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Card[] Data { get; set; }
		
		/// <summary>
		/// A pointer to a place in the list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="next_cursor")]
		public string Next_cursor { get; set; }
	}
	
	/// <summary>
	/// This contains artwork and metadata relating to a Card's appearance in digital wallet apps like Apple Pay and Google Pay. For more information, see our guide on [digital card artwork](https://increase.com/documentation/card-art)
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Card_profile
	{
		
		/// <summary>
		/// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Card Dispute was created.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.DateTimeOffset Created_at { get; set; }
		
		/// <summary>
		/// A description you can use to identify the Card Profile.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// How Cards should appear in digital wallets such as Apple Pay. Different wallets will use these values to render card artwork appropriately for their app.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="digital_wallets")]
		public Card_profileDigital_wallets Digital_wallets { get; set; }
		
		/// <summary>
		/// The Card Profile identifier.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The status of the Card Profile.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public Card_profileStatus Status { get; set; }
		
		/// <summary>
		/// A constant representing the object's type. For this resource it will always be `card_profile`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public Card_profileType Type { get; set; }
	}
	
	public class Card_profileDigital_wallets
	{
		
		/// <summary>
		/// The identifier of the File containing the card's icon image.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="app_icon_file_id")]
		public string App_icon_file_id { get; set; }
		
		/// <summary>
		/// The identifier of the File containing the card's front image.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="background_image_file_id")]
		public string Background_image_file_id { get; set; }
		
		/// <summary>
		/// A user-facing description for the card itself.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="card_description")]
		public string Card_description { get; set; }
		
		/// <summary>
		/// An email address the user can contact to receive support for their card.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="contact_email")]
		public string Contact_email { get; set; }
		
		/// <summary>
		/// A phone number the user can contact to receive support for their card.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="contact_phone")]
		public string Contact_phone { get; set; }
		
		/// <summary>
		/// A website the user can visit to view and receive support for their card.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="contact_website")]
		public string Contact_website { get; set; }
		
		/// <summary>
		/// A user-facing description for whoever is issuing the card.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="issuer_name")]
		public string Issuer_name { get; set; }
		
		/// <summary>
		/// The Card's text color, specified as an RGB triple.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="text_color")]
		public Card_profileDigital_walletsText_color Text_color { get; set; }
	}
	
	public class Card_profileDigital_walletsText_color
	{
		
		/// <summary>
		/// The value of the blue channel in the RGB color.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="blue")]
		public int Blue { get; set; }
		
		/// <summary>
		/// The value of the green channel in the RGB color.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="green")]
		public int Green { get; set; }
		
		/// <summary>
		/// The value of the red channel in the RGB color.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="red")]
		public int Red { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Card_profileStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pending")]
		pending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="rejected")]
		rejected = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="active")]
		active = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="archived")]
		archived = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Card_profileType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="card_profile")]
		card_profile = 0,
	}
	
	/// <summary>
	/// A list of Card Profile objects
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Card_profile_list
	{
		
		/// <summary>
		/// The contents of the list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Card_profile[] Data { get; set; }
		
		/// <summary>
		/// A pointer to a place in the list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="next_cursor")]
		public string Next_cursor { get; set; }
	}
	
	/// <summary>
	/// Check Deposits allow you to deposit images of paper checks into your account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Check_deposit
	{
		
		/// <summary>
		/// The Account the check was deposited into.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="account_id")]
		public string Account_id { get; set; }
		
		/// <summary>
		/// The deposited amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The ID for the File containing the image of the back of the check.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="back_image_file_id")]
		public string Back_image_file_id { get; set; }
		
		/// <summary>
		/// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was created.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.DateTimeOffset Created_at { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the deposit.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public AccountCurrency Currency { get; set; }
		
		/// <summary>
		/// If your deposit is successfully parsed and accepted by Increase, this will contain details of the parsed check.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="deposit_acceptance")]
		public Check_depositDeposit_acceptance Deposit_acceptance { get; set; }
		
		/// <summary>
		/// If your deposit is rejected by Increase, this will contain details as to why it was rejected.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="deposit_rejection")]
		public Check_depositDeposit_rejection Deposit_rejection { get; set; }
		
		/// <summary>
		/// If your deposit is returned, this will contain details as to why it was returned.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="deposit_return")]
		public Check_depositDeposit_return Deposit_return { get; set; }
		
		/// <summary>
		/// The ID for the File containing the image of the front of the check.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="front_image_file_id")]
		public string Front_image_file_id { get; set; }
		
		/// <summary>
		/// The deposit's identifier.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The status of the Check Deposit.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public Check_depositStatus Status { get; set; }
		
		/// <summary>
		/// The ID for the Transaction created by the deposit.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transaction_id")]
		public string Transaction_id { get; set; }
		
		/// <summary>
		/// A constant representing the object's type. For this resource it will always be `check_deposit`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public Check_depositType Type { get; set; }
	}
	
	public class Check_depositDeposit_acceptance
	{
		
		/// <summary>
		/// The account number printed on the check.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="account_number")]
		public string Account_number { get; set; }
		
		/// <summary>
		/// The amount to be deposited in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// An additional line of metadata printed on the check. This typically includes the check number for business checks.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="auxiliary_on_us")]
		public string Auxiliary_on_us { get; set; }
		
		/// <summary>
		/// The ID of the Check Deposit that was accepted.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="check_deposit_id")]
		public string Check_deposit_id { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public AccountCurrency Currency { get; set; }
		
		/// <summary>
		/// The routing number printed on the check.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="routing_number")]
		public string Routing_number { get; set; }
		
		/// <summary>
		/// The check serial number, if present, for consumer checks. For business checks, the serial number is usually in the `auxiliary_on_us` field.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="serial_number")]
		public string Serial_number { get; set; }
	}
	
	public class Check_depositDeposit_rejection
	{
		
		/// <summary>
		/// The rejected amount in the minor unit of check's currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the check's currency.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public AccountCurrency Currency { get; set; }
		
		/// <summary>
		/// Why the check deposit was rejected.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public Check_depositDeposit_rejectionReason Reason { get; set; }
		
		/// <summary>
		/// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the check deposit was rejected.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="rejected_at")]
		public System.DateTimeOffset Rejected_at { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Check_depositDeposit_rejectionReason
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="incomplete_image")]
		incomplete_image = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="duplicate")]
		duplicate = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="poor_image_quality")]
		poor_image_quality = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="incorrect_amount")]
		incorrect_amount = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="incorrect_recipient")]
		incorrect_recipient = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="not_eligible_for_mobile_deposit")]
		not_eligible_for_mobile_deposit = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="unknown")]
		unknown = 6,
	}
	
	public class Check_depositDeposit_return
	{
		
		/// <summary>
		/// The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The identifier of the Check Deposit that was returned.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="check_deposit_id")]
		public string Check_deposit_id { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public AccountCurrency Currency { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="return_reason")]
		public Check_depositDeposit_returnReturn_reason Return_reason { get; set; }
		
		/// <summary>
		/// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the check deposit was returned.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="returned_at")]
		public System.DateTimeOffset Returned_at { get; set; }
		
		/// <summary>
		/// The identifier of the transaction that reversed the original check deposit transaction.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transaction_id")]
		public string Transaction_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Check_depositDeposit_returnReturn_reason
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ach_conversion_not_supported")]
		ach_conversion_not_supported = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="closed_account")]
		closed_account = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="duplicate_submission")]
		duplicate_submission = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="insufficient_funds")]
		insufficient_funds = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="no_account")]
		no_account = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="not_authorized")]
		not_authorized = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="stale_dated")]
		stale_dated = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="stop_payment")]
		stop_payment = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="unknown_reason")]
		unknown_reason = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="unmatched_details")]
		unmatched_details = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="unreadable_image")]
		unreadable_image = 10,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Check_depositStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pending")]
		pending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="submitted")]
		submitted = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="rejected")]
		rejected = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="returned")]
		returned = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Check_depositType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="check_deposit")]
		check_deposit = 0,
	}
	
	/// <summary>
	/// A list of Check Deposit objects
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Check_deposit_list
	{
		
		/// <summary>
		/// The contents of the list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Check_deposit[] Data { get; set; }
		
		/// <summary>
		/// A pointer to a place in the list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="next_cursor")]
		public string Next_cursor { get; set; }
	}
	
	/// <summary>
	/// Check Transfers move funds from your Increase account by mailing a physical check.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Check_transfer
	{
		
		/// <summary>
		/// The identifier of the Account from which funds will be transferred.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="account_id")]
		public string Account_id { get; set; }
		
		/// <summary>
		/// The city of the check's destination.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="address_city")]
		public string Address_city { get; set; }
		
		/// <summary>
		/// The street address of the check's destination.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="address_line1")]
		public string Address_line1 { get; set; }
		
		/// <summary>
		/// The second line of the address of the check's destination.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="address_line2")]
		public string Address_line2 { get; set; }
		
		/// <summary>
		/// The state of the check's destination.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="address_state")]
		public string Address_state { get; set; }
		
		/// <summary>
		/// The postal code of the check's destination.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="address_zip")]
		public string Address_zip { get; set; }
		
		/// <summary>
		/// The transfer amount in USD cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// If your account requires approvals for transfers and the transfer was approved, this will contain details of the approval.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="approval")]
		public Check_transferApproval Approval { get; set; }
		
		/// <summary>
		/// If your account requires approvals for transfers and the transfer was not approved, this will contain details of the cancellation.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="cancellation")]
		public Check_transferCancellation Cancellation { get; set; }
		
		/// <summary>
		/// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was created.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.DateTimeOffset Created_at { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the check's currency.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public AccountCurrency Currency { get; set; }
		
		/// <summary>
		/// After a check transfer is deposited, this will contain supplemental details.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="deposit")]
		public Check_transferDeposit Deposit { get; set; }
		
		/// <summary>
		/// The Check transfer's identifier.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the check was mailed.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mailed_at")]
		public System.Nullable<System.DateTimeOffset> Mailed_at { get; set; }
		
		/// <summary>
		/// The descriptor that will be printed on the memo field on the check.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// The descriptor that will be printed on the letter included with the check.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="note")]
		public string Note { get; set; }
		
		/// <summary>
		/// The name that will be printed on the check.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="recipient_name")]
		public string Recipient_name { get; set; }
		
		/// <summary>
		/// The return address to be printed on the check.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="return_address")]
		public Check_transferReturn_address Return_address { get; set; }
		
		/// <summary>
		/// After a check transfer is returned, this will contain supplemental details. A check transfer is returned when the receiver mails a never deposited check back to the bank printed on the check.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="return_details")]
		public Check_transferReturn_details Return_details { get; set; }
		
		/// <summary>
		/// The lifecycle status of the transfer.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public Check_transferStatus Status { get; set; }
		
		/// <summary>
		/// After a stop-payment is requested on the check, this will contain supplemental details.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="stop_payment_request")]
		public Check_transferStop_payment_request Stop_payment_request { get; set; }
		
		/// <summary>
		/// After the transfer is submitted, this will contain supplemental details.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="submission")]
		public Check_transferSubmission Submission { get; set; }
		
		/// <summary>
		/// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the check was submitted.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="submitted_at")]
		public System.Nullable<System.DateTimeOffset> Submitted_at { get; set; }
		
		/// <summary>
		/// The ID for the transaction caused by the transfer.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transaction_id")]
		public string Transaction_id { get; set; }
		
		/// <summary>
		/// A constant representing the object's type. For this resource it will always be `check_transfer`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public Check_transferType Type { get; set; }
	}
	
	public class Check_transferApproval
	{
		
		/// <summary>
		/// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was approved.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="approved_at")]
		public System.DateTimeOffset Approved_at { get; set; }
		
		/// <summary>
		/// If the Transfer was approved by a user in the dashboard, the email address of that user.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="approved_by")]
		public string Approved_by { get; set; }
	}
	
	public class Check_transferCancellation
	{
		
		/// <summary>
		/// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Transfer was canceled.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="canceled_at")]
		public System.DateTimeOffset Canceled_at { get; set; }
		
		/// <summary>
		/// If the Transfer was canceled by a user in the dashboard, the email address of that user.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="canceled_by")]
		public string Canceled_by { get; set; }
	}
	
	public class Check_transferDeposit
	{
		
		/// <summary>
		/// The ID for the File containing the image of the rear of the check.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="back_image_file_id")]
		public string Back_image_file_id { get; set; }
		
		/// <summary>
		/// When the check was deposited.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="deposited_at")]
		public System.DateTimeOffset Deposited_at { get; set; }
		
		/// <summary>
		/// The ID for the File containing the image of the front of the check.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="front_image_file_id")]
		public string Front_image_file_id { get; set; }
		
		/// <summary>
		/// A constant representing the object's type. For this resource it will always be `check_transfer_deposit`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public Check_transferDepositType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Check_transferDepositType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="check_transfer_deposit")]
		check_transfer_deposit = 0,
	}
	
	public class Check_transferReturn_address
	{
		
		/// <summary>
		/// The city of the address.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		/// <summary>
		/// The first line of the address.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="line1")]
		public string Line1 { get; set; }
		
		/// <summary>
		/// The second line of the address.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="line2")]
		public string Line2 { get; set; }
		
		/// <summary>
		/// The name of the address.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The US state of the address.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		/// <summary>
		/// The postal code of the address.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="zip")]
		public string Zip { get; set; }
	}
	
	public class Check_transferReturn_details
	{
		
		/// <summary>
		/// If available, a document with additional information about the return.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="file_id")]
		public string File_id { get; set; }
		
		/// <summary>
		/// The reason why the check was returned.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public Check_transferReturn_detailsReason Reason { get; set; }
		
		/// <summary>
		/// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the check was returned.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="returned_at")]
		public System.DateTimeOffset Returned_at { get; set; }
		
		/// <summary>
		/// The identifier of the Transaction that was created to credit you for the returned check.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transaction_id")]
		public string Transaction_id { get; set; }
		
		/// <summary>
		/// The identifier of the returned Check Transfer.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transfer_id")]
		public string Transfer_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Check_transferReturn_detailsReason
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mail_delivery_failure")]
		mail_delivery_failure = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="refused_by_recipient")]
		refused_by_recipient = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Check_transferStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pending_approval")]
		pending_approval = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pending_submission")]
		pending_submission = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="submitted")]
		submitted = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pending_mailing")]
		pending_mailing = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mailed")]
		mailed = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="canceled")]
		canceled = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="deposited")]
		deposited = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="stopped")]
		stopped = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="returned")]
		returned = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="rejected")]
		rejected = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="requires_attention")]
		requires_attention = 10,
	}
	
	public class Check_transferStop_payment_request
	{
		
		/// <summary>
		/// The time the stop-payment was requested.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="requested_at")]
		public System.DateTimeOffset Requested_at { get; set; }
		
		/// <summary>
		/// The transaction ID of the corresponding credit transaction.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transaction_id")]
		public string Transaction_id { get; set; }
		
		/// <summary>
		/// The ID of the check transfer that was stopped.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transfer_id")]
		public string Transfer_id { get; set; }
		
		/// <summary>
		/// A constant representing the object's type. For this resource it will always be `check_transfer_stop_payment_request`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public Check_transferStop_payment_requestType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Check_transferStop_payment_requestType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="check_transfer_stop_payment_request")]
		check_transfer_stop_payment_request = 0,
	}
	
	public class Check_transferSubmission
	{
		
		/// <summary>
		/// The identitying number of the check.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="check_number")]
		public string Check_number { get; set; }
		
		/// <summary>
		/// When this check transfer was submitted to our check printer.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="submitted_at")]
		public System.DateTimeOffset Submitted_at { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Check_transferType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="check_transfer")]
		check_transfer = 0,
	}
	
	/// <summary>
	/// A list of Check Transfer objects
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Check_transfer_list
	{
		
		/// <summary>
		/// The contents of the list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Check_transfer[] Data { get; set; }
		
		/// <summary>
		/// A pointer to a place in the list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="next_cursor")]
		public string Next_cursor { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Complete_a_sandbox_real_time_payments_transfer_parameters
	{
		
		/// <summary>
		/// If set, the simulation will reject the transfer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rejection")]
		public Complete_a_sandbox_real_time_payments_transfer_parametersRejection Rejection { get; set; }
	}
	
	public class Complete_a_sandbox_real_time_payments_transfer_parametersRejection
	{
		
		/// <summary>
		/// The reason code that the simulated rejection will have.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reject_reason_code")]
		public Complete_a_sandbox_real_time_payments_transfer_parametersRejectionReject_reason_code Reject_reason_code { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Complete_a_sandbox_real_time_payments_transfer_parametersRejectionReject_reason_code
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="account_closed")]
		account_closed = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="account_blocked")]
		account_blocked = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="invalid_creditor_account_type")]
		invalid_creditor_account_type = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="invalid_creditor_account_number")]
		invalid_creditor_account_number = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="invalid_creditor_financial_institution_identifier")]
		invalid_creditor_financial_institution_identifier = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="end_customer_deceased")]
		end_customer_deceased = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="narrative")]
		narrative = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="transaction_forbidden")]
		transaction_forbidden = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="transaction_type_not_supported")]
		transaction_type_not_supported = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="unexpected_amount")]
		unexpected_amount = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="amount_exceeds_bank_limits")]
		amount_exceeds_bank_limits = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="invalid_creditor_address")]
		invalid_creditor_address = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="unknown_end_customer")]
		unknown_end_customer = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="invalid_debtor_address")]
		invalid_debtor_address = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="timeout")]
		timeout = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="unsupported_message_for_recipient")]
		unsupported_message_for_recipient = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="recipient_connection_not_available")]
		recipient_connection_not_available = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="real_time_payments_suspended")]
		real_time_payments_suspended = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="instructed_agent_signed_off")]
		instructed_agent_signed_off = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="processing_error")]
		processing_error = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="other")]
		other = 20,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Create_a_bookkeeping_account_parameters
	{
		
		/// <summary>
		/// The entity, if `compliance_category` is `commingled_cash`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="account_id")]
		public string Account_id { get; set; }
		
		/// <summary>
		/// The account compliance category.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="compliance_category")]
		public Bookkeeping_accountCompliance_category Compliance_category { get; set; }
		
		/// <summary>
		/// The entity, if `compliance_category` is `customer_balance`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entity_id")]
		public string Entity_id { get; set; }
		
		/// <summary>
		/// The name you choose for the account.
		/// Required
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Create_a_bookkeeping_entry_set_parameters
	{
		
		/// <summary>
		/// The date of the transaction. If `transaction_id` is provided, this must match the `created_at` field on that resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date")]
		public System.Nullable<System.DateTimeOffset> Date { get; set; }
		
		/// <summary>
		/// The bookkeeping entries.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="entries")]
		public Create_a_bookkeeping_entry_set_parametersEntries[] Create_a_bookkeeping_entry_set_parametersEntries { get; set; }
		
		/// <summary>
		/// The identifier of the Transaction related to this entry set, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transaction_id")]
		public string Transaction_id { get; set; }
	}
	
	public class Create_a_bookkeeping_entry_set_parametersEntries
	{
		
		/// <summary>
		/// The identifier for the Bookkeeping Account impacted by this entry.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="account_id")]
		public string Account_id { get; set; }
		
		/// <summary>
		/// The entry amount in the minor unit of the account currency. For dollars, for example, this is cents. Debit entries have positive amounts; credit entries have negative amounts.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Create_a_card_dispute_parameters
	{
		
		/// <summary>
		/// The Transaction you wish to dispute. This Transaction must have a `source_type` of `card_settlement`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="disputed_transaction_id")]
		public string Disputed_transaction_id { get; set; }
		
		/// <summary>
		/// Why you are disputing this Transaction.
		/// Required
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="explanation")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Explanation { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Create_a_card_parameters
	{
		
		/// <summary>
		/// The Account the card should belong to.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="account_id")]
		public string Account_id { get; set; }
		
		/// <summary>
		/// The card's billing address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="billing_address")]
		public Create_a_card_parametersBilling_address Billing_address { get; set; }
		
		/// <summary>
		/// The description you choose to give the card.
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Description { get; set; }
		
		/// <summary>
		/// The contact information used in the two-factor steps for digital wallet card creation. To add the card to a digital wallet, you may supply an email or phone number with this request. Otherwise, subscribe and then action a Real Time Decision with the category `digital_wallet_token_requested` or `digital_wallet_authentication_requested`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="digital_wallet")]
		public Create_a_card_parametersDigital_wallet Digital_wallet { get; set; }
	}
	
	public class Create_a_card_parametersBilling_address
	{
		
		/// <summary>
		/// The city of the billing address.
		/// Required
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="city")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string City { get; set; }
		
		/// <summary>
		/// The first line of the billing address.
		/// Required
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="line1")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Line1 { get; set; }
		
		/// <summary>
		/// The second line of the billing address.
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="line2")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Line2 { get; set; }
		
		/// <summary>
		/// The postal code of the billing address.
		/// Required
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="postal_code")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Postal_code { get; set; }
		
		/// <summary>
		/// The US state of the billing address.
		/// Required
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="state")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string State { get; set; }
	}
	
	public class Create_a_card_parametersDigital_wallet
	{
		
		/// <summary>
		/// The card profile assigned to this digital card. Card profiles may also be assigned at the program level.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="card_profile_id")]
		public string Card_profile_id { get; set; }
		
		/// <summary>
		/// An email address that can be used to verify the cardholder via one-time passcode over email.
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Email { get; set; }
		
		/// <summary>
		/// A phone number that can be used to verify the cardholder via one-time passcode over SMS.
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phone")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Phone { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Create_a_card_profile_parameters
	{
		
		/// <summary>
		/// A description you can use to identify the Card Profile.
		/// Required
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Description { get; set; }
		
		/// <summary>
		/// How Cards should appear in digital wallets such as Apple Pay. Different wallets will use these values to render card artwork appropriately for their app.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="digital_wallets")]
		public Create_a_card_profile_parametersDigital_wallets Digital_wallets { get; set; }
	}
	
	public class Create_a_card_profile_parametersDigital_wallets
	{
		
		/// <summary>
		/// The identifier of the File containing the card's icon image.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="app_icon_file_id")]
		public string App_icon_file_id { get; set; }
		
		/// <summary>
		/// The identifier of the File containing the card's front image.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="background_image_file_id")]
		public string Background_image_file_id { get; set; }
		
		/// <summary>
		/// A user-facing description for the card itself.
		/// Required
		/// Max length: 32
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="card_description")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(32)]
		public string Card_description { get; set; }
		
		/// <summary>
		/// An email address the user can contact to receive support for their card.
		/// Max length: 32
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contact_email")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(32)]
		public string Contact_email { get; set; }
		
		/// <summary>
		/// A phone number the user can contact to receive support for their card.
		/// Max length: 32
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contact_phone")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(32)]
		public string Contact_phone { get; set; }
		
		/// <summary>
		/// A website the user can visit to view and receive support for their card.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contact_website")]
		public string Contact_website { get; set; }
		
		/// <summary>
		/// A user-facing description for whoever is issuing the card.
		/// Required
		/// Max length: 32
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="issuer_name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(32)]
		public string Issuer_name { get; set; }
		
		/// <summary>
		/// The Card's text color, specified as an RGB triple. The default is white.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text_color")]
		public Create_a_card_profile_parametersDigital_walletsText_color Text_color { get; set; }
	}
	
	public class Create_a_card_profile_parametersDigital_walletsText_color
	{
		
		/// <summary>
		/// The value of the blue channel in the RGB color.
		/// Required
		/// Minimum: 0
		/// Maximum: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="blue")]
		[System.ComponentModel.DataAnnotations.Range(0, 255)]
		public int Blue { get; set; }
		
		/// <summary>
		/// The value of the green channel in the RGB color.
		/// Required
		/// Minimum: 0
		/// Maximum: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="green")]
		[System.ComponentModel.DataAnnotations.Range(0, 255)]
		public int Green { get; set; }
		
		/// <summary>
		/// The value of the red channel in the RGB color.
		/// Required
		/// Minimum: 0
		/// Maximum: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="red")]
		[System.ComponentModel.DataAnnotations.Range(0, 255)]
		public int Red { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Create_a_check_deposit_parameters
	{
		
		/// <summary>
		/// The identifier for the Account to deposit the check in.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="account_id")]
		public string Account_id { get; set; }
		
		/// <summary>
		/// The deposit amount in the minor unit of the account currency. For dollars, for example, this is cents.
		/// Required
		/// Minimum: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public int Amount { get; set; }
		
		/// <summary>
		/// The File containing the check's back image.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="back_image_file_id")]
		public string Back_image_file_id { get; set; }
		
		/// <summary>
		/// The currency to use for the deposit.
		/// Required
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Currency { get; set; }
		
		/// <summary>
		/// The File containing the check's front image.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="front_image_file_id")]
		public string Front_image_file_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Create_a_check_transfer_parameters
	{
		
		/// <summary>
		/// The identifier for the account that will send the transfer.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="account_id")]
		public string Account_id { get; set; }
		
		/// <summary>
		/// The city of the check's destination.
		/// Required
		/// Max length: 250
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="address_city")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string Address_city { get; set; }
		
		/// <summary>
		/// The street address of the check's destination.
		/// Required
		/// Max length: 250
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="address_line1")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string Address_line1 { get; set; }
		
		/// <summary>
		/// The second line of the address of the check's destination.
		/// Max length: 250
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address_line2")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string Address_line2 { get; set; }
		
		/// <summary>
		/// The state of the check's destination.
		/// Required
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="address_state")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Address_state { get; set; }
		
		/// <summary>
		/// The postal code of the check's destination.
		/// Required
		/// Max length: 250
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="address_zip")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string Address_zip { get; set; }
		
		/// <summary>
		/// The transfer amount in cents.
		/// Required
		/// Minimum: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public int Amount { get; set; }
		
		/// <summary>
		/// The descriptor that will be printed on the memo field on the check.
		/// Required
		/// Max length: 73
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="message")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(73)]
		public string Message { get; set; }
		
		/// <summary>
		/// The descriptor that will be printed on the letter included with the check.
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="note")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Note { get; set; }
		
		/// <summary>
		/// The name that will be printed on the check.
		/// Required
		/// Max length: 250
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="recipient_name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string Recipient_name { get; set; }
		
		/// <summary>
		/// Whether the transfer requires explicit approval via the dashboard or API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="require_approval")]
		public System.Nullable<System.Boolean> Require_approval { get; set; }
		
		/// <summary>
		/// The return address to be printed on the check. If omitted this will default to the address of the Entity of the Account used to make the Check Transfer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="return_address")]
		public Create_a_check_transfer_parametersReturn_address Return_address { get; set; }
	}
	
	public class Create_a_check_transfer_parametersReturn_address
	{
		
		/// <summary>
		/// The city of the return address.
		/// Required
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="city")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string City { get; set; }
		
		/// <summary>
		/// The first line of the return address.
		/// Required
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="line1")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Line1 { get; set; }
		
		/// <summary>
		/// The second line of the return address.
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="line2")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Line2 { get; set; }
		
		/// <summary>
		/// The name of the return address.
		/// Required
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Name { get; set; }
		
		/// <summary>
		/// The US state of the return address.
		/// Required
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="state")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string State { get; set; }
		
		/// <summary>
		/// The postal code of the return address.
		/// Required
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="zip")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Zip { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Create_a_file_parameters
	{
		
		/// <summary>
		/// The description you choose to give the File.
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Description { get; set; }
		
		/// <summary>
		/// The file contents. This should follow the specifications of [RFC 7578](https://datatracker.ietf.org/doc/html/rfc7578) which defines file transfers for the multipart/form-data protocol.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="file")]
		public string File { get; set; }
		
		/// <summary>
		/// What the File will be used for in Increase's systems.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="purpose")]
		public Create_a_file_parametersPurpose Purpose { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Create_a_file_parametersPurpose
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="check_image_front")]
		check_image_front = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="check_image_back")]
		check_image_back = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="form_ss_4")]
		form_ss_4 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="identity_document")]
		identity_document = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="other")]
		other = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="trust_formation_document")]
		trust_formation_document = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="digital_wallet_artwork")]
		digital_wallet_artwork = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="digital_wallet_app_icon")]
		digital_wallet_app_icon = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="document_request")]
		document_request = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="entity_supplemental_document")]
		entity_supplemental_document = 9,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Create_a_limit_parameters
	{
		
		/// <summary>
		/// The interval for the metric. Required if `metric` is `count` or `volume`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="interval")]
		public System.Nullable<Create_a_limit_parametersInterval> Interval { get; set; }
		
		/// <summary>
		/// The metric for the limit.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="metric")]
		public Create_a_limit_parametersMetric Metric { get; set; }
		
		/// <summary>
		/// The identifier of the Account or Account Number you wish to associate the limit with.
		/// Required
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="model_id")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Model_id { get; set; }
		
		/// <summary>
		/// The value to test the limit against.
		/// Required
		/// Minimum: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public int Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Create_a_limit_parametersInterval
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="transaction")]
		transaction = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="day")]
		day = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="week")]
		week = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="month")]
		month = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="year")]
		year = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="all_time")]
		all_time = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Create_a_limit_parametersMetric
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="count")]
		count = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="volume")]
		volume = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Create_a_real_time_payments_transfer_parameters
	{
		
		/// <summary>
		/// The transfer amount in USD cents. For Real Time Payments transfers, must be positive.
		/// Required
		/// Minimum: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public int Amount { get; set; }
		
		/// <summary>
		/// The name of the transfer's recipient.
		/// Required
		/// Max length: 140
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="creditor_name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(140)]
		public string Creditor_name { get; set; }
		
		/// <summary>
		/// The destination account number.
		/// Max length: 34
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destination_account_number")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		public string Destination_account_number { get; set; }
		
		/// <summary>
		/// The destination American Bankers' Association (ABA) Routing Transit Number (RTN).
		/// Max length: 9
		/// Min length: 9
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destination_routing_number")]
		[System.ComponentModel.DataAnnotations.MinLength(9)]
		[System.ComponentModel.DataAnnotations.MaxLength(9)]
		public string Destination_routing_number { get; set; }
		
		/// <summary>
		/// The ID of an External Account to initiate a transfer to. If this parameter is provided, `destination_account_number` and `destination_routing_number` must be absent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="external_account_id")]
		public string External_account_id { get; set; }
		
		/// <summary>
		/// Unstructured information that will show on the recipient's bank statement.
		/// Required
		/// Max length: 140
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="remittance_information")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(140)]
		public string Remittance_information { get; set; }
		
		/// <summary>
		/// Whether the transfer requires explicit approval via the dashboard or API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="require_approval")]
		public System.Nullable<System.Boolean> Require_approval { get; set; }
		
		/// <summary>
		/// The identifier of the Account Number from which to send the transfer.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="source_account_number_id")]
		public string Source_account_number_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Create_a_supplemental_document_for_an_entity_parameters
	{
		
		/// <summary>
		/// The identifier of the File containing the document.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="file_id")]
		public string File_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Create_a_wire_drawdown_request_parameters
	{
		
		/// <summary>
		/// The Account Number to which the recipient should send funds.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="account_number_id")]
		public string Account_number_id { get; set; }
		
		/// <summary>
		/// The amount requested from the recipient, in cents.
		/// Required
		/// Minimum: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public int Amount { get; set; }
		
		/// <summary>
		/// A message the recipient will see as part of the request.
		/// Required
		/// Max length: 140
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="message_to_recipient")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(140)]
		public string Message_to_recipient { get; set; }
		
		/// <summary>
		/// The drawdown request's recipient's account number.
		/// Required
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="recipient_account_number")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Recipient_account_number { get; set; }
		
		/// <summary>
		/// Line 1 of the drawdown request's recipient's address.
		/// Max length: 35
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recipient_address_line1")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string Recipient_address_line1 { get; set; }
		
		/// <summary>
		/// Line 2 of the drawdown request's recipient's address.
		/// Max length: 35
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recipient_address_line2")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string Recipient_address_line2 { get; set; }
		
		/// <summary>
		/// Line 3 of the drawdown request's recipient's address.
		/// Max length: 35
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recipient_address_line3")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string Recipient_address_line3 { get; set; }
		
		/// <summary>
		/// The drawdown request's recipient's name.
		/// Required
		/// Max length: 35
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="recipient_name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string Recipient_name { get; set; }
		
		/// <summary>
		/// The drawdown request's recipient's routing number.
		/// Required
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="recipient_routing_number")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Recipient_routing_number { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Create_a_wire_transfer_parameters
	{
		
		/// <summary>
		/// The identifier for the account that will send the transfer.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="account_id")]
		public string Account_id { get; set; }
		
		/// <summary>
		/// The account number for the destination account.
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="account_number")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Account_number { get; set; }
		
		/// <summary>
		/// The transfer amount in cents.
		/// Required
		/// Minimum: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public int Amount { get; set; }
		
		/// <summary>
		/// The beneficiary's address line 1.
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="beneficiary_address_line1")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Beneficiary_address_line1 { get; set; }
		
		/// <summary>
		/// The beneficiary's address line 2.
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="beneficiary_address_line2")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Beneficiary_address_line2 { get; set; }
		
		/// <summary>
		/// The beneficiary's address line 3.
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="beneficiary_address_line3")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Beneficiary_address_line3 { get; set; }
		
		/// <summary>
		/// The beneficiary's name.
		/// Required
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="beneficiary_name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Beneficiary_name { get; set; }
		
		/// <summary>
		/// The ID of an External Account to initiate a transfer to. If this parameter is provided, `account_number` and `routing_number` must be absent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="external_account_id")]
		public string External_account_id { get; set; }
		
		/// <summary>
		/// The message that will show on the recipient's bank statement.
		/// Required
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="message_to_recipient")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Message_to_recipient { get; set; }
		
		/// <summary>
		/// Whether the transfer requires explicit approval via the dashboard or API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="require_approval")]
		public System.Nullable<System.Boolean> Require_approval { get; set; }
		
		/// <summary>
		/// The American Bankers' Association (ABA) Routing Transit Number (RTN) for the destination account.
		/// Max length: 9
		/// Min length: 9
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="routing_number")]
		[System.ComponentModel.DataAnnotations.MinLength(9)]
		[System.ComponentModel.DataAnnotations.MaxLength(9)]
		public string Routing_number { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Create_an_account_number_parameters
	{
		
		/// <summary>
		/// The Account the Account Number should belong to.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="account_id")]
		public string Account_id { get; set; }
		
		/// <summary>
		/// The name you choose for the Account Number.
		/// Required
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Create_an_account_parameters
	{
		
		/// <summary>
		/// The identifier for the Entity that will own the Account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entity_id")]
		public string Entity_id { get; set; }
		
		/// <summary>
		/// The identifier of an Entity that, while not owning the Account, is associated with its activity. Its relationship to your group must be `informational`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="informational_entity_id")]
		public string Informational_entity_id { get; set; }
		
		/// <summary>
		/// The name you choose for the Account.
		/// Required
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Name { get; set; }
		
		/// <summary>
		/// The identifier for the Program that this Account falls under.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="program_id")]
		public string Program_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Create_an_account_transfer_parameters
	{
		
		/// <summary>
		/// The identifier for the account that will send the transfer.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="account_id")]
		public string Account_id { get; set; }
		
		/// <summary>
		/// The transfer amount in the minor unit of the account currency. For dollars, for example, this is cents.
		/// Required
		/// Minimum: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public int Amount { get; set; }
		
		/// <summary>
		/// The description you choose to give the transfer.
		/// Required
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Description { get; set; }
		
		/// <summary>
		/// The identifier for the account that will receive the transfer.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="destination_account_id")]
		public string Destination_account_id { get; set; }
		
		/// <summary>
		/// Whether the transfer requires explicit approval via the dashboard or API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="require_approval")]
		public System.Nullable<System.Boolean> Require_approval { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Create_an_ach_prenotification_parameters
	{
		
		/// <summary>
		/// The account number for the destination account.
		/// Required
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="account_number")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Account_number { get; set; }
		
		/// <summary>
		/// Additional information that will be sent to the recipient.
		/// Max length: 80
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addendum")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(80)]
		public string Addendum { get; set; }
		
		/// <summary>
		/// The description of the date of the transfer.
		/// Max length: 6
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="company_descriptive_date")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(6)]
		public string Company_descriptive_date { get; set; }
		
		/// <summary>
		/// The data you choose to associate with the transfer.
		/// Max length: 20
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="company_discretionary_data")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(20)]
		public string Company_discretionary_data { get; set; }
		
		/// <summary>
		/// The description of the transfer you wish to be shown to the recipient.
		/// Max length: 10
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="company_entry_description")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public string Company_entry_description { get; set; }
		
		/// <summary>
		/// The name by which the recipient knows you.
		/// Max length: 16
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="company_name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(16)]
		public string Company_name { get; set; }
		
		/// <summary>
		/// Whether the Prenotification is for a future debit or credit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="credit_debit_indicator")]
		public Ach_prenotificationCredit_debit_indicator Credit_debit_indicator { get; set; }
		
		/// <summary>
		/// The transfer effective date in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="effective_date")]
		public System.Nullable<System.DateOnly> Effective_date { get; set; }
		
		/// <summary>
		/// Your identifer for the transfer recipient.
		/// Max length: 22
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="individual_id")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(22)]
		public string Individual_id { get; set; }
		
		/// <summary>
		/// The name of the transfer recipient. This value is information and not verified by the recipient's bank.
		/// Max length: 22
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="individual_name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(22)]
		public string Individual_name { get; set; }
		
		/// <summary>
		/// The American Bankers' Association (ABA) Routing Transit Number (RTN) for the destination account.
		/// Required
		/// Max length: 9
		/// Min length: 9
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="routing_number")]
		[System.ComponentModel.DataAnnotations.MinLength(9)]
		[System.ComponentModel.DataAnnotations.MaxLength(9)]
		public string Routing_number { get; set; }
		
		/// <summary>
		/// The Standard Entry Class (SEC) code to use for the ACH Prenotification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="standard_entry_class_code")]
		public Ach_transferStandard_entry_class_code Standard_entry_class_code { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Create_an_ach_return_parameters
	{
		
		/// <summary>
		/// The reason why this transfer will be returned. The most usual return codes are `payment_stopped` for debits and `credit_entry_refused_by_receiver` for credits.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public Create_an_ach_return_parametersReason Reason { get; set; }
		
		/// <summary>
		/// The transaction identifier of the Inbound ACH Transfer to return to the originating financial institution.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transaction_id")]
		public string Transaction_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Create_an_ach_return_parametersReason
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="authorization_revoked_by_customer")]
		authorization_revoked_by_customer = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="payment_stopped")]
		payment_stopped = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="customer_advised_unauthorized_improper_ineligible_or_incomplete")]
		customer_advised_unauthorized_improper_ineligible_or_incomplete = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="representative_payee_deceased_or_unable_to_continue_in_that_capacity")]
		representative_payee_deceased_or_unable_to_continue_in_that_capacity = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="beneficiary_or_account_holder_deceased")]
		beneficiary_or_account_holder_deceased = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="credit_entry_refused_by_receiver")]
		credit_entry_refused_by_receiver = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="duplicate_entry")]
		duplicate_entry = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="corporate_customer_advised_not_authorized")]
		corporate_customer_advised_not_authorized = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Create_an_ach_transfer_parameters
	{
		
		/// <summary>
		/// The Increase identifier for the account that will send the transfer.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="account_id")]
		public string Account_id { get; set; }
		
		/// <summary>
		/// The account number for the destination account.
		/// Max length: 17
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="account_number")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(17)]
		public string Account_number { get; set; }
		
		/// <summary>
		/// Additional information that will be sent to the recipient. This is included in the transfer data sent to the receiving bank.
		/// Max length: 80
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addendum")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(80)]
		public string Addendum { get; set; }
		
		/// <summary>
		/// The transfer amount in cents. A positive amount originates a credit transfer pushing funds to the receiving account. A negative amount originates a debit transfer pulling funds from the receiving account.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The description of the date of the transfer, usually in the format `YYMMDD`. This is included in the transfer data sent to the receiving bank.
		/// Max length: 6
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="company_descriptive_date")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(6)]
		public string Company_descriptive_date { get; set; }
		
		/// <summary>
		/// The data you choose to associate with the transfer. This is included in the transfer data sent to the receiving bank.
		/// Max length: 20
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="company_discretionary_data")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(20)]
		public string Company_discretionary_data { get; set; }
		
		/// <summary>
		/// A description of the transfer. This is included in the transfer data sent to the receiving bank.
		/// Max length: 10
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="company_entry_description")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public string Company_entry_description { get; set; }
		
		/// <summary>
		/// The name by which the recipient knows you. This is included in the transfer data sent to the receiving bank.
		/// Max length: 16
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="company_name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(16)]
		public string Company_name { get; set; }
		
		/// <summary>
		/// The transfer effective date in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="effective_date")]
		public System.Nullable<System.DateOnly> Effective_date { get; set; }
		
		/// <summary>
		/// The ID of an External Account to initiate a transfer to. If this parameter is provided, `account_number`, `routing_number`, and `funding` must be absent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="external_account_id")]
		public string External_account_id { get; set; }
		
		/// <summary>
		/// The type of the account to which the transfer will be sent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="funding")]
		public Ach_transferFunding Funding { get; set; }
		
		/// <summary>
		/// Your identifer for the transfer recipient.
		/// Max length: 15
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="individual_id")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(15)]
		public string Individual_id { get; set; }
		
		/// <summary>
		/// The name of the transfer recipient. This value is informational and not verified by the recipient's bank.
		/// Max length: 22
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="individual_name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(22)]
		public string Individual_name { get; set; }
		
		/// <summary>
		/// Whether the transfer requires explicit approval via the dashboard or API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="require_approval")]
		public System.Nullable<System.Boolean> Require_approval { get; set; }
		
		/// <summary>
		/// The American Bankers' Association (ABA) Routing Transit Number (RTN) for the destination account.
		/// Max length: 9
		/// Min length: 9
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="routing_number")]
		[System.ComponentModel.DataAnnotations.MinLength(9)]
		[System.ComponentModel.DataAnnotations.MaxLength(9)]
		public string Routing_number { get; set; }
		
		/// <summary>
		/// The Standard Entry Class (SEC) code to use for the transfer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="standard_entry_class_code")]
		public Ach_transferStandard_entry_class_code Standard_entry_class_code { get; set; }
		
		/// <summary>
		/// A description you choose to give the transfer. This will be saved with the transfer details, displayed in the dashboard, and returned by the API. If `individual_name` and `company_name` are not explicitly set by this API, the `statement_descriptor` will be sent in those fields to the receiving bank to help the customer recognize the transfer. You are highly encouraged to pass `individual_name` and `company_name` instead of relying on this fallback.
		/// Required
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="statement_descriptor")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Statement_descriptor { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Create_an_entity_parameters
	{
		
		/// <summary>
		/// Details of the corporation entity to create. Required if `structure` is equal to `corporation`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="corporation")]
		public Create_an_entity_parametersCorporation Corporation { get; set; }
		
		/// <summary>
		/// The description you choose to give the entity.
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Description { get; set; }
		
		/// <summary>
		/// Details of the joint entity to create. Required if `structure` is equal to `joint`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="joint")]
		public Create_an_entity_parametersJoint Joint { get; set; }
		
		/// <summary>
		/// Details of the natural person entity to create. Required if `structure` is equal to `natural_person`. Natural people entities should be submitted with `social_security_number` or `individual_taxpayer_identification_number` identification methods.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="natural_person")]
		public Create_an_entity_parametersNatural_person Natural_person { get; set; }
		
		/// <summary>
		/// The relationship between your group and the entity.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="relationship")]
		public Create_an_entity_parametersRelationship Relationship { get; set; }
		
		/// <summary>
		/// The type of Entity to create.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="structure")]
		public Create_an_entity_parametersStructure Structure { get; set; }
		
		/// <summary>
		/// Additional documentation associated with the entity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="supplemental_documents")]
		public Create_an_entity_parametersSupplemental_documents[] Create_an_entity_parametersSupplemental_documents { get; set; }
		
		/// <summary>
		/// Details of the trust entity to create. Required if `structure` is equal to `trust`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trust")]
		public Create_an_entity_parametersTrust Trust { get; set; }
	}
	
	public class Create_an_entity_parametersCorporation
	{
		
		/// <summary>
		/// The corporation's address.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="address")]
		public Create_an_entity_parametersCorporationAddress Address { get; set; }
		
		/// <summary>
		/// The identifying details of anyone controlling or owning 25% or more of the corporation.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="beneficial_owners")]
		public Create_an_entity_parametersCorporationBeneficial_owners[] Create_an_entity_parametersCorporationBeneficial_owners { get; set; }
		
		/// <summary>
		/// The two-letter United States Postal Service (USPS) abbreviation for the corporation's state of incorporation.
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="incorporation_state")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Incorporation_state { get; set; }
		
		/// <summary>
		/// The legal name of the corporation.
		/// Required
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Name { get; set; }
		
		/// <summary>
		/// The Employer Identification Number (EIN) for the corporation.
		/// Required
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tax_identifier")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Tax_identifier { get; set; }
		
		/// <summary>
		/// The website of the corporation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="website")]
		public string Website { get; set; }
	}
	
	public class Create_an_entity_parametersCorporationAddress
	{
		
		/// <summary>
		/// The city of the address.
		/// Required
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="city")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string City { get; set; }
		
		/// <summary>
		/// The first line of the address. This is usually the street number and street.
		/// Required
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="line1")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Line1 { get; set; }
		
		/// <summary>
		/// The second line of the address. This might be the floor or room number.
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="line2")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Line2 { get; set; }
		
		/// <summary>
		/// The two-letter United States Postal Service (USPS) abbreviation for the state of the address.
		/// Required
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="state")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string State { get; set; }
		
		/// <summary>
		/// The ZIP code of the address.
		/// Required
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="zip")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Zip { get; set; }
	}
	
	public class Create_an_entity_parametersCorporationBeneficial_owners
	{
		
		/// <summary>
		/// This person's role or title within the entity.
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="company_title")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Company_title { get; set; }
		
		/// <summary>
		/// Personal details for the beneficial owner.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="individual")]
		public Create_an_entity_parametersCorporationBeneficial_ownersIndividual Individual { get; set; }
		
		/// <summary>
		/// Why this person is considered a beneficial owner of the entity.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="prong")]
		public Create_an_entity_parametersCorporationBeneficial_ownersProng Prong { get; set; }
	}
	
	public class Create_an_entity_parametersCorporationBeneficial_ownersIndividual
	{
		
		/// <summary>
		/// The individual's address.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="address")]
		public Create_an_entity_parametersCorporationBeneficial_ownersIndividualAddress Address { get; set; }
		
		/// <summary>
		/// The identification method for an individual can only be a passport, driver's license, or other document if you've confirmed the individual does not have a US tax id (either a Social Security Number or Individual Taxpayer Identification Number).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="confirmed_no_us_tax_id")]
		public System.Nullable<System.Boolean> Confirmed_no_us_tax_id { get; set; }
		
		/// <summary>
		/// The person's date of birth in YYYY-MM-DD format.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="date_of_birth")]
		public System.DateOnly Date_of_birth { get; set; }
		
		/// <summary>
		/// A means of verifying the person's identity.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="identification")]
		public Create_an_entity_parametersCorporationBeneficial_ownersIndividualIdentification Identification { get; set; }
		
		/// <summary>
		/// The person's legal name.
		/// Required
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Name { get; set; }
	}
	
	public class Create_an_entity_parametersCorporationBeneficial_ownersIndividualAddress
	{
		
		/// <summary>
		/// The city of the address.
		/// Required
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="city")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string City { get; set; }
		
		/// <summary>
		/// The first line of the address. This is usually the street number and street.
		/// Required
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="line1")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Line1 { get; set; }
		
		/// <summary>
		/// The second line of the address. This might be the floor or room number.
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="line2")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Line2 { get; set; }
		
		/// <summary>
		/// The two-letter United States Postal Service (USPS) abbreviation for the state of the address.
		/// Required
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="state")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string State { get; set; }
		
		/// <summary>
		/// The ZIP code of the address.
		/// Required
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="zip")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Zip { get; set; }
	}
	
	public class Create_an_entity_parametersCorporationBeneficial_ownersIndividualIdentification
	{
		
		/// <summary>
		/// Information about the United States driver's license used for identification. Required if `method` is equal to `drivers_license`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="drivers_license")]
		public Create_an_entity_parametersCorporationBeneficial_ownersIndividualIdentificationDrivers_license Drivers_license { get; set; }
		
		/// <summary>
		/// A method that can be used to verify the individual's identity.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="method")]
		public Create_an_entity_parametersCorporationBeneficial_ownersIndividualIdentificationMethod Method { get; set; }
		
		/// <summary>
		/// An identification number that can be used to verify the individual's identity, such as a social security number.
		/// Required
		/// Max length: 200
		/// Min length: 4
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="number")]
		[System.ComponentModel.DataAnnotations.MinLength(4)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Number { get; set; }
		
		/// <summary>
		/// Information about the identification document provided. Required if `method` is equal to `other`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="other")]
		public Create_an_entity_parametersCorporationBeneficial_ownersIndividualIdentificationOther Other { get; set; }
		
		/// <summary>
		/// Information about the passport used for identification. Required if `method` is equal to `passport`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="passport")]
		public Create_an_entity_parametersCorporationBeneficial_ownersIndividualIdentificationPassport Passport { get; set; }
	}
	
	public class Create_an_entity_parametersCorporationBeneficial_ownersIndividualIdentificationDrivers_license
	{
		
		/// <summary>
		/// The driver's license's expiration date in YYYY-MM-DD format.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="expiration_date")]
		public System.DateOnly Expiration_date { get; set; }
		
		/// <summary>
		/// The identifier of the File containing the driver's license.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="file_id")]
		public string File_id { get; set; }
		
		/// <summary>
		/// The state that issued the provided driver's license.
		/// Required
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="state")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Create_an_entity_parametersCorporationBeneficial_ownersIndividualIdentificationMethod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="social_security_number")]
		social_security_number = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="individual_taxpayer_identification_number")]
		individual_taxpayer_identification_number = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="passport")]
		passport = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="drivers_license")]
		drivers_license = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="other")]
		other = 4,
	}
	
	public class Create_an_entity_parametersCorporationBeneficial_ownersIndividualIdentificationOther
	{
		
		/// <summary>
		/// The two-character ISO 3166-1 code representing the country that issued the document.
		/// Required
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="country")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Country { get; set; }
		
		/// <summary>
		/// A description of the document submitted.
		/// Required
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Description { get; set; }
		
		/// <summary>
		/// The document's expiration date in YYYY-MM-DD format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expiration_date")]
		public System.Nullable<System.DateOnly> Expiration_date { get; set; }
		
		/// <summary>
		/// The identifier of the File containing the document.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="file_id")]
		public string File_id { get; set; }
	}
	
	public class Create_an_entity_parametersCorporationBeneficial_ownersIndividualIdentificationPassport
	{
		
		/// <summary>
		/// The country that issued the passport.
		/// Required
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="country")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Country { get; set; }
		
		/// <summary>
		/// The passport's expiration date in YYYY-MM-DD format.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="expiration_date")]
		public System.DateOnly Expiration_date { get; set; }
		
		/// <summary>
		/// The identifier of the File containing the passport.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="file_id")]
		public string File_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Create_an_entity_parametersCorporationBeneficial_ownersProng
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ownership")]
		ownership = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="control")]
		control = 1,
	}
	
	public class Create_an_entity_parametersJoint
	{
		
		/// <summary>
		/// The two individuals that share control of the entity.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="individuals")]
		public Create_an_entity_parametersJointIndividuals[] Create_an_entity_parametersJointIndividuals { get; set; }
		
		/// <summary>
		/// The name of the joint entity.
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Name { get; set; }
	}
	
	public class Create_an_entity_parametersJointIndividuals
	{
		
		/// <summary>
		/// The individual's address.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="address")]
		public Create_an_entity_parametersJointIndividualsAddress Address { get; set; }
		
		/// <summary>
		/// The identification method for an individual can only be a passport, driver's license, or other document if you've confirmed the individual does not have a US tax id (either a Social Security Number or Individual Taxpayer Identification Number).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="confirmed_no_us_tax_id")]
		public System.Nullable<System.Boolean> Confirmed_no_us_tax_id { get; set; }
		
		/// <summary>
		/// The person's date of birth in YYYY-MM-DD format.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="date_of_birth")]
		public System.DateOnly Date_of_birth { get; set; }
		
		/// <summary>
		/// A means of verifying the person's identity.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="identification")]
		public Create_an_entity_parametersJointIndividualsIdentification Identification { get; set; }
		
		/// <summary>
		/// The person's legal name.
		/// Required
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Name { get; set; }
	}
	
	public class Create_an_entity_parametersJointIndividualsAddress
	{
		
		/// <summary>
		/// The city of the address.
		/// Required
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="city")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string City { get; set; }
		
		/// <summary>
		/// The first line of the address. This is usually the street number and street.
		/// Required
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="line1")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Line1 { get; set; }
		
		/// <summary>
		/// The second line of the address. This might be the floor or room number.
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="line2")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Line2 { get; set; }
		
		/// <summary>
		/// The two-letter United States Postal Service (USPS) abbreviation for the state of the address.
		/// Required
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="state")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string State { get; set; }
		
		/// <summary>
		/// The ZIP code of the address.
		/// Required
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="zip")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Zip { get; set; }
	}
	
	public class Create_an_entity_parametersJointIndividualsIdentification
	{
		
		/// <summary>
		/// Information about the United States driver's license used for identification. Required if `method` is equal to `drivers_license`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="drivers_license")]
		public Create_an_entity_parametersJointIndividualsIdentificationDrivers_license Drivers_license { get; set; }
		
		/// <summary>
		/// A method that can be used to verify the individual's identity.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="method")]
		public Create_an_entity_parametersCorporationBeneficial_ownersIndividualIdentificationMethod Method { get; set; }
		
		/// <summary>
		/// An identification number that can be used to verify the individual's identity, such as a social security number.
		/// Required
		/// Max length: 200
		/// Min length: 4
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="number")]
		[System.ComponentModel.DataAnnotations.MinLength(4)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Number { get; set; }
		
		/// <summary>
		/// Information about the identification document provided. Required if `method` is equal to `other`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="other")]
		public Create_an_entity_parametersJointIndividualsIdentificationOther Other { get; set; }
		
		/// <summary>
		/// Information about the passport used for identification. Required if `method` is equal to `passport`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="passport")]
		public Create_an_entity_parametersJointIndividualsIdentificationPassport Passport { get; set; }
	}
	
	public class Create_an_entity_parametersJointIndividualsIdentificationDrivers_license
	{
		
		/// <summary>
		/// The driver's license's expiration date in YYYY-MM-DD format.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="expiration_date")]
		public System.DateOnly Expiration_date { get; set; }
		
		/// <summary>
		/// The identifier of the File containing the driver's license.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="file_id")]
		public string File_id { get; set; }
		
		/// <summary>
		/// The state that issued the provided driver's license.
		/// Required
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="state")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string State { get; set; }
	}
	
	public class Create_an_entity_parametersJointIndividualsIdentificationOther
	{
		
		/// <summary>
		/// The two-character ISO 3166-1 code representing the country that issued the document.
		/// Required
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="country")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Country { get; set; }
		
		/// <summary>
		/// A description of the document submitted.
		/// Required
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Description { get; set; }
		
		/// <summary>
		/// The document's expiration date in YYYY-MM-DD format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expiration_date")]
		public System.Nullable<System.DateOnly> Expiration_date { get; set; }
		
		/// <summary>
		/// The identifier of the File containing the document.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="file_id")]
		public string File_id { get; set; }
	}
	
	public class Create_an_entity_parametersJointIndividualsIdentificationPassport
	{
		
		/// <summary>
		/// The country that issued the passport.
		/// Required
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="country")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Country { get; set; }
		
		/// <summary>
		/// The passport's expiration date in YYYY-MM-DD format.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="expiration_date")]
		public System.DateOnly Expiration_date { get; set; }
		
		/// <summary>
		/// The identifier of the File containing the passport.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="file_id")]
		public string File_id { get; set; }
	}
	
	public class Create_an_entity_parametersNatural_person
	{
		
		/// <summary>
		/// The individual's address.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="address")]
		public Create_an_entity_parametersNatural_personAddress Address { get; set; }
		
		/// <summary>
		/// The identification method for an individual can only be a passport, driver's license, or other document if you've confirmed the individual does not have a US tax id (either a Social Security Number or Individual Taxpayer Identification Number).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="confirmed_no_us_tax_id")]
		public System.Nullable<System.Boolean> Confirmed_no_us_tax_id { get; set; }
		
		/// <summary>
		/// The person's date of birth in YYYY-MM-DD format.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="date_of_birth")]
		public System.DateOnly Date_of_birth { get; set; }
		
		/// <summary>
		/// A means of verifying the person's identity.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="identification")]
		public Create_an_entity_parametersNatural_personIdentification Identification { get; set; }
		
		/// <summary>
		/// The person's legal name.
		/// Required
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Name { get; set; }
	}
	
	public class Create_an_entity_parametersNatural_personAddress
	{
		
		/// <summary>
		/// The city of the address.
		/// Required
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="city")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string City { get; set; }
		
		/// <summary>
		/// The first line of the address. This is usually the street number and street.
		/// Required
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="line1")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Line1 { get; set; }
		
		/// <summary>
		/// The second line of the address. This might be the floor or room number.
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="line2")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Line2 { get; set; }
		
		/// <summary>
		/// The two-letter United States Postal Service (USPS) abbreviation for the state of the address.
		/// Required
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="state")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string State { get; set; }
		
		/// <summary>
		/// The ZIP code of the address.
		/// Required
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="zip")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Zip { get; set; }
	}
	
	public class Create_an_entity_parametersNatural_personIdentification
	{
		
		/// <summary>
		/// Information about the United States driver's license used for identification. Required if `method` is equal to `drivers_license`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="drivers_license")]
		public Create_an_entity_parametersNatural_personIdentificationDrivers_license Drivers_license { get; set; }
		
		/// <summary>
		/// A method that can be used to verify the individual's identity.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="method")]
		public Create_an_entity_parametersCorporationBeneficial_ownersIndividualIdentificationMethod Method { get; set; }
		
		/// <summary>
		/// An identification number that can be used to verify the individual's identity, such as a social security number.
		/// Required
		/// Max length: 200
		/// Min length: 4
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="number")]
		[System.ComponentModel.DataAnnotations.MinLength(4)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Number { get; set; }
		
		/// <summary>
		/// Information about the identification document provided. Required if `method` is equal to `other`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="other")]
		public Create_an_entity_parametersNatural_personIdentificationOther Other { get; set; }
		
		/// <summary>
		/// Information about the passport used for identification. Required if `method` is equal to `passport`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="passport")]
		public Create_an_entity_parametersNatural_personIdentificationPassport Passport { get; set; }
	}
	
	public class Create_an_entity_parametersNatural_personIdentificationDrivers_license
	{
		
		/// <summary>
		/// The driver's license's expiration date in YYYY-MM-DD format.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="expiration_date")]
		public System.DateOnly Expiration_date { get; set; }
		
		/// <summary>
		/// The identifier of the File containing the driver's license.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="file_id")]
		public string File_id { get; set; }
		
		/// <summary>
		/// The state that issued the provided driver's license.
		/// Required
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="state")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string State { get; set; }
	}
	
	public class Create_an_entity_parametersNatural_personIdentificationOther
	{
		
		/// <summary>
		/// The two-character ISO 3166-1 code representing the country that issued the document.
		/// Required
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="country")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Country { get; set; }
		
		/// <summary>
		/// A description of the document submitted.
		/// Required
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Description { get; set; }
		
		/// <summary>
		/// The document's expiration date in YYYY-MM-DD format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expiration_date")]
		public System.Nullable<System.DateOnly> Expiration_date { get; set; }
		
		/// <summary>
		/// The identifier of the File containing the document.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="file_id")]
		public string File_id { get; set; }
	}
	
	public class Create_an_entity_parametersNatural_personIdentificationPassport
	{
		
		/// <summary>
		/// The country that issued the passport.
		/// Required
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="country")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Country { get; set; }
		
		/// <summary>
		/// The passport's expiration date in YYYY-MM-DD format.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="expiration_date")]
		public System.DateOnly Expiration_date { get; set; }
		
		/// <summary>
		/// The identifier of the File containing the passport.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="file_id")]
		public string File_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Create_an_entity_parametersRelationship
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="affiliated")]
		affiliated = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="informational")]
		informational = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="unaffiliated")]
		unaffiliated = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Create_an_entity_parametersStructure
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="corporation")]
		corporation = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="natural_person")]
		natural_person = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="joint")]
		joint = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="trust")]
		trust = 3,
	}
	
	public class Create_an_entity_parametersSupplemental_documents
	{
		
		/// <summary>
		/// The identifier of the File containing the document.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="file_id")]
		public string File_id { get; set; }
	}
	
	public class Create_an_entity_parametersTrust
	{
		
		/// <summary>
		/// The trust's address.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="address")]
		public Create_an_entity_parametersTrustAddress Address { get; set; }
		
		/// <summary>
		/// Whether the trust is `revocable` or `irrevocable`. Irrevocable trusts require their own Employer Identification Number. Revocable trusts require information about the individual `grantor` who created the trust.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="category")]
		public Create_an_entity_parametersTrustCategory Category { get; set; }
		
		/// <summary>
		/// The identifier of the File containing the formation document of the trust.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="formation_document_file_id")]
		public string Formation_document_file_id { get; set; }
		
		/// <summary>
		/// The two-letter United States Postal Service (USPS) abbreviation for the state in which the trust was formed.
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="formation_state")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Formation_state { get; set; }
		
		/// <summary>
		/// The grantor of the trust. Required if `category` is equal to `revocable`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="grantor")]
		public Create_an_entity_parametersTrustGrantor Grantor { get; set; }
		
		/// <summary>
		/// The legal name of the trust.
		/// Required
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Name { get; set; }
		
		/// <summary>
		/// The Employer Identification Number (EIN) for the trust. Required if `category` is equal to `irrevocable`.
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tax_identifier")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Tax_identifier { get; set; }
		
		/// <summary>
		/// The trustees of the trust.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="trustees")]
		public Create_an_entity_parametersTrustTrustees[] Create_an_entity_parametersTrustTrustees { get; set; }
	}
	
	public class Create_an_entity_parametersTrustAddress
	{
		
		/// <summary>
		/// The city of the address.
		/// Required
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="city")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string City { get; set; }
		
		/// <summary>
		/// The first line of the address. This is usually the street number and street.
		/// Required
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="line1")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Line1 { get; set; }
		
		/// <summary>
		/// The second line of the address. This might be the floor or room number.
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="line2")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Line2 { get; set; }
		
		/// <summary>
		/// The two-letter United States Postal Service (USPS) abbreviation for the state of the address.
		/// Required
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="state")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string State { get; set; }
		
		/// <summary>
		/// The ZIP code of the address.
		/// Required
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="zip")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Zip { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Create_an_entity_parametersTrustCategory
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="revocable")]
		revocable = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="irrevocable")]
		irrevocable = 1,
	}
	
	public class Create_an_entity_parametersTrustGrantor
	{
		
		/// <summary>
		/// The individual's address.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="address")]
		public Create_an_entity_parametersTrustGrantorAddress Address { get; set; }
		
		/// <summary>
		/// The identification method for an individual can only be a passport, driver's license, or other document if you've confirmed the individual does not have a US tax id (either a Social Security Number or Individual Taxpayer Identification Number).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="confirmed_no_us_tax_id")]
		public System.Nullable<System.Boolean> Confirmed_no_us_tax_id { get; set; }
		
		/// <summary>
		/// The person's date of birth in YYYY-MM-DD format.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="date_of_birth")]
		public System.DateOnly Date_of_birth { get; set; }
		
		/// <summary>
		/// A means of verifying the person's identity.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="identification")]
		public Create_an_entity_parametersTrustGrantorIdentification Identification { get; set; }
		
		/// <summary>
		/// The person's legal name.
		/// Required
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Name { get; set; }
	}
	
	public class Create_an_entity_parametersTrustGrantorAddress
	{
		
		/// <summary>
		/// The city of the address.
		/// Required
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="city")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string City { get; set; }
		
		/// <summary>
		/// The first line of the address. This is usually the street number and street.
		/// Required
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="line1")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Line1 { get; set; }
		
		/// <summary>
		/// The second line of the address. This might be the floor or room number.
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="line2")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Line2 { get; set; }
		
		/// <summary>
		/// The two-letter United States Postal Service (USPS) abbreviation for the state of the address.
		/// Required
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="state")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string State { get; set; }
		
		/// <summary>
		/// The ZIP code of the address.
		/// Required
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="zip")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Zip { get; set; }
	}
	
	public class Create_an_entity_parametersTrustGrantorIdentification
	{
		
		/// <summary>
		/// Information about the United States driver's license used for identification. Required if `method` is equal to `drivers_license`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="drivers_license")]
		public Create_an_entity_parametersTrustGrantorIdentificationDrivers_license Drivers_license { get; set; }
		
		/// <summary>
		/// A method that can be used to verify the individual's identity.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="method")]
		public Create_an_entity_parametersCorporationBeneficial_ownersIndividualIdentificationMethod Method { get; set; }
		
		/// <summary>
		/// An identification number that can be used to verify the individual's identity, such as a social security number.
		/// Required
		/// Max length: 200
		/// Min length: 4
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="number")]
		[System.ComponentModel.DataAnnotations.MinLength(4)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Number { get; set; }
		
		/// <summary>
		/// Information about the identification document provided. Required if `method` is equal to `other`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="other")]
		public Create_an_entity_parametersTrustGrantorIdentificationOther Other { get; set; }
		
		/// <summary>
		/// Information about the passport used for identification. Required if `method` is equal to `passport`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="passport")]
		public Create_an_entity_parametersTrustGrantorIdentificationPassport Passport { get; set; }
	}
	
	public class Create_an_entity_parametersTrustGrantorIdentificationDrivers_license
	{
		
		/// <summary>
		/// The driver's license's expiration date in YYYY-MM-DD format.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="expiration_date")]
		public System.DateOnly Expiration_date { get; set; }
		
		/// <summary>
		/// The identifier of the File containing the driver's license.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="file_id")]
		public string File_id { get; set; }
		
		/// <summary>
		/// The state that issued the provided driver's license.
		/// Required
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="state")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string State { get; set; }
	}
	
	public class Create_an_entity_parametersTrustGrantorIdentificationOther
	{
		
		/// <summary>
		/// The two-character ISO 3166-1 code representing the country that issued the document.
		/// Required
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="country")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Country { get; set; }
		
		/// <summary>
		/// A description of the document submitted.
		/// Required
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Description { get; set; }
		
		/// <summary>
		/// The document's expiration date in YYYY-MM-DD format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expiration_date")]
		public System.Nullable<System.DateOnly> Expiration_date { get; set; }
		
		/// <summary>
		/// The identifier of the File containing the document.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="file_id")]
		public string File_id { get; set; }
	}
	
	public class Create_an_entity_parametersTrustGrantorIdentificationPassport
	{
		
		/// <summary>
		/// The country that issued the passport.
		/// Required
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="country")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Country { get; set; }
		
		/// <summary>
		/// The passport's expiration date in YYYY-MM-DD format.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="expiration_date")]
		public System.DateOnly Expiration_date { get; set; }
		
		/// <summary>
		/// The identifier of the File containing the passport.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="file_id")]
		public string File_id { get; set; }
	}
	
	public class Create_an_entity_parametersTrustTrustees
	{
		
		/// <summary>
		/// Details of the individual trustee. Required when the trustee `structure` is equal to `individual`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="individual")]
		public Create_an_entity_parametersTrustTrusteesIndividual Individual { get; set; }
		
		/// <summary>
		/// The structure of the trustee.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="structure")]
		public Create_an_entity_parametersTrustTrusteesStructure Structure { get; set; }
	}
	
	public class Create_an_entity_parametersTrustTrusteesIndividual
	{
		
		/// <summary>
		/// The individual's address.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="address")]
		public Create_an_entity_parametersTrustTrusteesIndividualAddress Address { get; set; }
		
		/// <summary>
		/// The identification method for an individual can only be a passport, driver's license, or other document if you've confirmed the individual does not have a US tax id (either a Social Security Number or Individual Taxpayer Identification Number).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="confirmed_no_us_tax_id")]
		public System.Nullable<System.Boolean> Confirmed_no_us_tax_id { get; set; }
		
		/// <summary>
		/// The person's date of birth in YYYY-MM-DD format.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="date_of_birth")]
		public System.DateOnly Date_of_birth { get; set; }
		
		/// <summary>
		/// A means of verifying the person's identity.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="identification")]
		public Create_an_entity_parametersTrustTrusteesIndividualIdentification Identification { get; set; }
		
		/// <summary>
		/// The person's legal name.
		/// Required
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Name { get; set; }
	}
	
	public class Create_an_entity_parametersTrustTrusteesIndividualAddress
	{
		
		/// <summary>
		/// The city of the address.
		/// Required
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="city")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string City { get; set; }
		
		/// <summary>
		/// The first line of the address. This is usually the street number and street.
		/// Required
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="line1")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Line1 { get; set; }
		
		/// <summary>
		/// The second line of the address. This might be the floor or room number.
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="line2")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Line2 { get; set; }
		
		/// <summary>
		/// The two-letter United States Postal Service (USPS) abbreviation for the state of the address.
		/// Required
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="state")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string State { get; set; }
		
		/// <summary>
		/// The ZIP code of the address.
		/// Required
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="zip")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Zip { get; set; }
	}
	
	public class Create_an_entity_parametersTrustTrusteesIndividualIdentification
	{
		
		/// <summary>
		/// Information about the United States driver's license used for identification. Required if `method` is equal to `drivers_license`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="drivers_license")]
		public Create_an_entity_parametersTrustTrusteesIndividualIdentificationDrivers_license Drivers_license { get; set; }
		
		/// <summary>
		/// A method that can be used to verify the individual's identity.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="method")]
		public Create_an_entity_parametersCorporationBeneficial_ownersIndividualIdentificationMethod Method { get; set; }
		
		/// <summary>
		/// An identification number that can be used to verify the individual's identity, such as a social security number.
		/// Required
		/// Max length: 200
		/// Min length: 4
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="number")]
		[System.ComponentModel.DataAnnotations.MinLength(4)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Number { get; set; }
		
		/// <summary>
		/// Information about the identification document provided. Required if `method` is equal to `other`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="other")]
		public Create_an_entity_parametersTrustTrusteesIndividualIdentificationOther Other { get; set; }
		
		/// <summary>
		/// Information about the passport used for identification. Required if `method` is equal to `passport`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="passport")]
		public Create_an_entity_parametersTrustTrusteesIndividualIdentificationPassport Passport { get; set; }
	}
	
	public class Create_an_entity_parametersTrustTrusteesIndividualIdentificationDrivers_license
	{
		
		/// <summary>
		/// The driver's license's expiration date in YYYY-MM-DD format.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="expiration_date")]
		public System.DateOnly Expiration_date { get; set; }
		
		/// <summary>
		/// The identifier of the File containing the driver's license.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="file_id")]
		public string File_id { get; set; }
		
		/// <summary>
		/// The state that issued the provided driver's license.
		/// Required
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="state")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string State { get; set; }
	}
	
	public class Create_an_entity_parametersTrustTrusteesIndividualIdentificationOther
	{
		
		/// <summary>
		/// The two-character ISO 3166-1 code representing the country that issued the document.
		/// Required
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="country")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Country { get; set; }
		
		/// <summary>
		/// A description of the document submitted.
		/// Required
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Description { get; set; }
		
		/// <summary>
		/// The document's expiration date in YYYY-MM-DD format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expiration_date")]
		public System.Nullable<System.DateOnly> Expiration_date { get; set; }
		
		/// <summary>
		/// The identifier of the File containing the document.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="file_id")]
		public string File_id { get; set; }
	}
	
	public class Create_an_entity_parametersTrustTrusteesIndividualIdentificationPassport
	{
		
		/// <summary>
		/// The country that issued the passport.
		/// Required
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="country")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Country { get; set; }
		
		/// <summary>
		/// The passport's expiration date in YYYY-MM-DD format.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="expiration_date")]
		public System.DateOnly Expiration_date { get; set; }
		
		/// <summary>
		/// The identifier of the File containing the passport.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="file_id")]
		public string File_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Create_an_entity_parametersTrustTrusteesStructure
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="individual")]
		individual = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Create_an_event_subscription_parameters
	{
		
		/// <summary>
		/// If specified, this subscription will only receive webhooks for Events with the specified `category`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selected_event_category")]
		public System.Nullable<Create_an_event_subscription_parametersSelected_event_category> Selected_event_category { get; set; }
		
		/// <summary>
		/// The key that will be used to sign webhooks. If no value is passed, a random string will be used as default.
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shared_secret")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string Shared_secret { get; set; }
		
		/// <summary>
		/// The URL you'd like us to send webhooks to.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Create_an_event_subscription_parametersSelected_event_category
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="account.created")]
		account_created = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="account.updated")]
		account_updated = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="account_number.created")]
		account_number_created = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="account_number.updated")]
		account_number_updated = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="account_statement.created")]
		account_statement_created = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="account_transfer.created")]
		account_transfer_created = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="account_transfer.updated")]
		account_transfer_updated = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ach_prenotification.created")]
		ach_prenotification_created = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ach_prenotification.updated")]
		ach_prenotification_updated = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ach_transfer.created")]
		ach_transfer_created = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ach_transfer.updated")]
		ach_transfer_updated = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="card.created")]
		card_created = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="card.updated")]
		card_updated = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="card_payment.created")]
		card_payment_created = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="card_payment.updated")]
		card_payment_updated = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="card_dispute.created")]
		card_dispute_created = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="card_dispute.updated")]
		card_dispute_updated = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="check_deposit.created")]
		check_deposit_created = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="check_deposit.updated")]
		check_deposit_updated = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="check_transfer.created")]
		check_transfer_created = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="check_transfer.updated")]
		check_transfer_updated = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="declined_transaction.created")]
		declined_transaction_created = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="digital_wallet_token.created")]
		digital_wallet_token_created = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="digital_wallet_token.updated")]
		digital_wallet_token_updated = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="document.created")]
		document_created = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="entity.created")]
		entity_created = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="entity.updated")]
		entity_updated = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="external_account.created")]
		external_account_created = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="file.created")]
		file_created = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.updated")]
		group_updated = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.heartbeat")]
		group_heartbeat = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="inbound_ach_transfer_return.created")]
		inbound_ach_transfer_return_created = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="inbound_ach_transfer_return.updated")]
		inbound_ach_transfer_return_updated = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="inbound_wire_drawdown_request.created")]
		inbound_wire_drawdown_request_created = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="oauth_connection.created")]
		oauth_connection_created = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="oauth_connection.deactivated")]
		oauth_connection_deactivated = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pending_transaction.created")]
		pending_transaction_created = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pending_transaction.updated")]
		pending_transaction_updated = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="real_time_decision.card_authorization_requested")]
		real_time_decision_card_authorization_requested = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="real_time_decision.digital_wallet_token_requested")]
		real_time_decision_digital_wallet_token_requested = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="real_time_decision.digital_wallet_authentication_requested")]
		real_time_decision_digital_wallet_authentication_requested = 40,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="real_time_payments_transfer.created")]
		real_time_payments_transfer_created = 41,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="real_time_payments_transfer.updated")]
		real_time_payments_transfer_updated = 42,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="real_time_payments_request_for_payment.created")]
		real_time_payments_request_for_payment_created = 43,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="real_time_payments_request_for_payment.updated")]
		real_time_payments_request_for_payment_updated = 44,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="transaction.created")]
		transaction_created = 45,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="wire_drawdown_request.created")]
		wire_drawdown_request_created = 46,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="wire_drawdown_request.updated")]
		wire_drawdown_request_updated = 47,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="wire_transfer.created")]
		wire_transfer_created = 48,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="wire_transfer.updated")]
		wire_transfer_updated = 49,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Create_an_export_parameters
	{
		
		/// <summary>
		/// Options for the created export. Required if `category` is equal to `balance_csv`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="balance_csv")]
		public Create_an_export_parametersBalance_csv Balance_csv { get; set; }
		
		/// <summary>
		/// The type of Export to create.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="category")]
		public Create_an_export_parametersCategory Category { get; set; }
		
		/// <summary>
		/// Options for the created export. Required if `category` is equal to `transaction_csv`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transaction_csv")]
		public Create_an_export_parametersTransaction_csv Transaction_csv { get; set; }
	}
	
	public class Create_an_export_parametersBalance_csv
	{
		
		/// <summary>
		/// Filter exported Transactions to the specified Account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="account_id")]
		public string Account_id { get; set; }
		
		/// <summary>
		/// Filter results by time range on the `created_at` attribute.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public Create_an_export_parametersBalance_csvCreated_at Created_at { get; set; }
	}
	
	public class Create_an_export_parametersBalance_csvCreated_at
	{
		
		/// <summary>
		/// Return results after this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="after")]
		public System.Nullable<System.DateTimeOffset> After { get; set; }
		
		/// <summary>
		/// Return results before this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="before")]
		public System.Nullable<System.DateTimeOffset> Before { get; set; }
		
		/// <summary>
		/// Return results on or after this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="on_or_after")]
		public System.Nullable<System.DateTimeOffset> On_or_after { get; set; }
		
		/// <summary>
		/// Return results on or before this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="on_or_before")]
		public System.Nullable<System.DateTimeOffset> On_or_before { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Create_an_export_parametersCategory
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="transaction_csv")]
		transaction_csv = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="balance_csv")]
		balance_csv = 1,
	}
	
	public class Create_an_export_parametersTransaction_csv
	{
		
		/// <summary>
		/// Filter exported Transactions to the specified Account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="account_id")]
		public string Account_id { get; set; }
		
		/// <summary>
		/// Filter results by time range on the `created_at` attribute.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public Create_an_export_parametersTransaction_csvCreated_at Created_at { get; set; }
	}
	
	public class Create_an_export_parametersTransaction_csvCreated_at
	{
		
		/// <summary>
		/// Return results after this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="after")]
		public System.Nullable<System.DateTimeOffset> After { get; set; }
		
		/// <summary>
		/// Return results before this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="before")]
		public System.Nullable<System.DateTimeOffset> Before { get; set; }
		
		/// <summary>
		/// Return results on or after this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="on_or_after")]
		public System.Nullable<System.DateTimeOffset> On_or_after { get; set; }
		
		/// <summary>
		/// Return results on or before this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="on_or_before")]
		public System.Nullable<System.DateTimeOffset> On_or_before { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Create_an_external_account_parameters
	{
		
		/// <summary>
		/// The account number for the destination account.
		/// Required
		/// Max length: 17
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="account_number")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(17)]
		public string Account_number { get; set; }
		
		/// <summary>
		/// The name you choose for the Account.
		/// Required
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Description { get; set; }
		
		/// <summary>
		/// The type of the destination account. Defaults to `checking`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="funding")]
		public System.Nullable<Create_an_external_account_parametersFunding> Funding { get; set; }
		
		/// <summary>
		/// The American Bankers' Association (ABA) Routing Transit Number (RTN) for the destination account.
		/// Required
		/// Max length: 9
		/// Min length: 9
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="routing_number")]
		[System.ComponentModel.DataAnnotations.MinLength(9)]
		[System.ComponentModel.DataAnnotations.MaxLength(9)]
		public string Routing_number { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Create_an_external_account_parametersFunding
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="checking")]
		checking = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="savings")]
		savings = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="other")]
		other = 2,
	}
	
	/// <summary>
	/// Declined Transactions are refused additions and removals of money from your bank account. For example, Declined Transactions are caused when your Account has an insufficient balance or your Limits are triggered.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Declined_transaction
	{
		
		/// <summary>
		/// The identifier for the Account the Declined Transaction belongs to.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="account_id")]
		public string Account_id { get; set; }
		
		/// <summary>
		/// The Declined Transaction amount in the minor unit of its currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date on which the Transaction occured.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.DateTimeOffset Created_at { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the Declined Transaction's currency. This will match the currency on the Declined Transcation's Account.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public AccountCurrency Currency { get; set; }
		
		/// <summary>
		/// This is the description the vendor provides.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The Declined Transaction identifier.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The identifier for the route this Declined Transaction came through. Routes are things like cards and ACH details.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="route_id")]
		public string Route_id { get; set; }
		
		/// <summary>
		/// The type of the route this Declined Transaction came through.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="route_type")]
		public System.Nullable<Declined_transactionRoute_type> Route_type { get; set; }
		
		/// <summary>
		/// This is an object giving more details on the network-level event that caused the Declined Transaction. For example, for a card transaction this lists the merchant's industry and location. Note that for backwards compatibility reasons, additional undocumented keys may appear in this object. These should be treated as deprecated and will be removed in the future.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="source")]
		public Declined_transactionSource Source { get; set; }
		
		/// <summary>
		/// A constant representing the object's type. For this resource it will always be `declined_transaction`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public Declined_transactionType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Declined_transactionRoute_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="account_number")]
		account_number = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="card")]
		card = 1,
	}
	
	public class Declined_transactionSource
	{
		
		/// <summary>
		/// A ACH Decline object. This field will be present in the JSON response if and only if `category` is equal to `ach_decline`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ach_decline")]
		public Declined_transactionSourceAch_decline Ach_decline { get; set; }
		
		/// <summary>
		/// A Card Decline object. This field will be present in the JSON response if and only if `category` is equal to `card_decline`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="card_decline")]
		public Declined_transactionSourceCard_decline Card_decline { get; set; }
		
		/// <summary>
		/// A Deprecated Card Decline object. This field will be present in the JSON response if and only if `category` is equal to `card_route_decline`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="card_route_decline")]
		public Declined_transactionSourceCard_route_decline Card_route_decline { get; set; }
		
		/// <summary>
		/// The type of decline that took place. We may add additional possible values for this enum over time; your application should be able to handle such additions gracefully.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="category")]
		public Declined_transactionSourceCategory Category { get; set; }
		
		/// <summary>
		/// A Check Decline object. This field will be present in the JSON response if and only if `category` is equal to `check_decline`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="check_decline")]
		public Declined_transactionSourceCheck_decline Check_decline { get; set; }
		
		/// <summary>
		/// A Inbound Real Time Payments Transfer Decline object. This field will be present in the JSON response if and only if `category` is equal to `inbound_real_time_payments_transfer_decline`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="inbound_real_time_payments_transfer_decline")]
		public Declined_transactionSourceInbound_real_time_payments_transfer_decline Inbound_real_time_payments_transfer_decline { get; set; }
		
		/// <summary>
		/// A International ACH Decline object. This field will be present in the JSON response if and only if `category` is equal to `international_ach_decline`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="international_ach_decline")]
		public Declined_transactionSourceInternational_ach_decline International_ach_decline { get; set; }
	}
	
	public class Declined_transactionSourceAch_decline
	{
		
		/// <summary>
		/// The declined amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_company_descriptive_date")]
		public string Originator_company_descriptive_date { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_company_discretionary_data")]
		public string Originator_company_discretionary_data { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_company_id")]
		public string Originator_company_id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_company_name")]
		public string Originator_company_name { get; set; }
		
		/// <summary>
		/// Why the ACH transfer was declined.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public Declined_transactionSourceAch_declineReason Reason { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiver_id_number")]
		public string Receiver_id_number { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiver_name")]
		public string Receiver_name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="trace_number")]
		public string Trace_number { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Declined_transactionSourceAch_declineReason
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ach_route_canceled")]
		ach_route_canceled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ach_route_disabled")]
		ach_route_disabled = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="breaches_limit")]
		breaches_limit = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="credit_entry_refused_by_receiver")]
		credit_entry_refused_by_receiver = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="duplicate_return")]
		duplicate_return = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="entity_not_active")]
		entity_not_active = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group_locked")]
		group_locked = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="insufficient_funds")]
		insufficient_funds = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="misrouted_return")]
		misrouted_return = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="no_ach_route")]
		no_ach_route = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="originator_request")]
		originator_request = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="transaction_not_allowed")]
		transaction_not_allowed = 11,
	}
	
	public class Declined_transactionSourceCard_decline
	{
		
		/// <summary>
		/// The declined amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the destination account currency.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public AccountCurrency Currency { get; set; }
		
		/// <summary>
		/// If the authorization was attempted using a Digital Wallet Token (such as an Apple Pay purchase), the identifier of the token that was used.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="digital_wallet_token_id")]
		public string Digital_wallet_token_id { get; set; }
		
		/// <summary>
		/// The merchant identifier (commonly abbreviated as MID) of the merchant the card is transacting with.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_acceptor_id")]
		public string Merchant_acceptor_id { get; set; }
		
		/// <summary>
		/// The Merchant Category Code (commonly abbreviated as MCC) of the merchant the card is transacting with.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_category_code")]
		public string Merchant_category_code { get; set; }
		
		/// <summary>
		/// The city the merchant resides in.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_city")]
		public string Merchant_city { get; set; }
		
		/// <summary>
		/// The country the merchant resides in.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_country")]
		public string Merchant_country { get; set; }
		
		/// <summary>
		/// The merchant descriptor of the merchant the card is transacting with.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_descriptor")]
		public string Merchant_descriptor { get; set; }
		
		/// <summary>
		/// The state the merchant resides in.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_state")]
		public string Merchant_state { get; set; }
		
		/// <summary>
		/// The payment network used to process this card authorization
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="network")]
		public Declined_transactionSourceCard_declineNetwork Network { get; set; }
		
		/// <summary>
		/// Fields specific to the `network`
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="network_details")]
		public Declined_transactionSourceCard_declineNetwork_details Network_details { get; set; }
		
		/// <summary>
		/// The identifier of the Real-Time Decision sent to approve or decline this transaction.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="real_time_decision_id")]
		public string Real_time_decision_id { get; set; }
		
		/// <summary>
		/// Why the transaction was declined.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public Declined_transactionSourceCard_declineReason Reason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Declined_transactionSourceCard_declineNetwork
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="visa")]
		visa = 0,
	}
	
	public class Declined_transactionSourceCard_declineNetwork_details
	{
		
		/// <summary>
		/// Fields specific to the `visa` network
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="visa")]
		public Declined_transactionSourceCard_declineNetwork_detailsVisa Visa { get; set; }
	}
	
	public class Declined_transactionSourceCard_declineNetwork_detailsVisa
	{
		
		/// <summary>
		/// For electronic commerce transactions, this identifies the level of security used in obtaining the customer's payment credential. For mail or telephone order transactions, identifies the type of mail or telephone order.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="electronic_commerce_indicator")]
		public System.Nullable<Declined_transactionSourceCard_declineNetwork_detailsVisaElectronic_commerce_indicator> Electronic_commerce_indicator { get; set; }
		
		/// <summary>
		/// The method used to enter the cardholder's primary account number and card expiration date
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="point_of_service_entry_mode")]
		public System.Nullable<Declined_transactionSourceCard_declineNetwork_detailsVisaPoint_of_service_entry_mode> Point_of_service_entry_mode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Declined_transactionSourceCard_declineNetwork_detailsVisaElectronic_commerce_indicator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mail_phone_order")]
		mail_phone_order = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="recurring")]
		recurring = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="installment")]
		installment = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="unknown_mail_phone_order")]
		unknown_mail_phone_order = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="secure_electronic_commerce")]
		secure_electronic_commerce = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="non_authenticated_security_transaction_at_3ds_capable_merchant")]
		non_authenticated_security_transaction_at_3ds_capable_merchant = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="non_authenticated_security_transaction")]
		non_authenticated_security_transaction = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="non_secure_transaction")]
		non_secure_transaction = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Declined_transactionSourceCard_declineNetwork_detailsVisaPoint_of_service_entry_mode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="manual")]
		manual = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="magnetic_stripe_no_cvv")]
		magnetic_stripe_no_cvv = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="optical_code")]
		optical_code = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="integrated_circuit_card")]
		integrated_circuit_card = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="contactless")]
		contactless = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="credential_on_file")]
		credential_on_file = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="magnetic_stripe")]
		magnetic_stripe = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="contactless_magnetic_stripe")]
		contactless_magnetic_stripe = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="integrated_circuit_card_no_cvv")]
		integrated_circuit_card_no_cvv = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Declined_transactionSourceCard_declineReason
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="card_not_active")]
		card_not_active = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="entity_not_active")]
		entity_not_active = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group_locked")]
		group_locked = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="insufficient_funds")]
		insufficient_funds = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cvv2_mismatch")]
		cvv2_mismatch = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="transaction_not_allowed")]
		transaction_not_allowed = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="breaches_limit")]
		breaches_limit = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="webhook_declined")]
		webhook_declined = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="webhook_timed_out")]
		webhook_timed_out = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="declined_by_stand_in_processing")]
		declined_by_stand_in_processing = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="invalid_physical_card")]
		invalid_physical_card = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="missing_original_authorization")]
		missing_original_authorization = 11,
	}
	
	public class Declined_transactionSourceCard_route_decline
	{
		
		/// <summary>
		/// The declined amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the destination account currency.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public AccountCurrency Currency { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_acceptor_id")]
		public string Merchant_acceptor_id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_category_code")]
		public string Merchant_category_code { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_city")]
		public string Merchant_city { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_country")]
		public string Merchant_country { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_descriptor")]
		public string Merchant_descriptor { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_state")]
		public string Merchant_state { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Declined_transactionSourceCategory
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ach_decline")]
		ach_decline = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="card_decline")]
		card_decline = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="check_decline")]
		check_decline = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="inbound_real_time_payments_transfer_decline")]
		inbound_real_time_payments_transfer_decline = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="international_ach_decline")]
		international_ach_decline = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="card_route_decline")]
		card_route_decline = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="other")]
		other = 6,
	}
	
	public class Declined_transactionSourceCheck_decline
	{
		
		/// <summary>
		/// The declined amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="auxiliary_on_us")]
		public string Auxiliary_on_us { get; set; }
		
		/// <summary>
		/// Why the check was declined.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public Declined_transactionSourceCheck_declineReason Reason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Declined_transactionSourceCheck_declineReason
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ach_route_canceled")]
		ach_route_canceled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ach_route_disabled")]
		ach_route_disabled = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="breaches_limit")]
		breaches_limit = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="entity_not_active")]
		entity_not_active = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group_locked")]
		group_locked = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="insufficient_funds")]
		insufficient_funds = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="unable_to_locate_account")]
		unable_to_locate_account = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="unable_to_process")]
		unable_to_process = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="refer_to_image")]
		refer_to_image = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="stop_payment_requested")]
		stop_payment_requested = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="returned")]
		returned = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="duplicate_presentment")]
		duplicate_presentment = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="not_authorized")]
		not_authorized = 12,
	}
	
	public class Declined_transactionSourceInbound_real_time_payments_transfer_decline
	{
		
		/// <summary>
		/// The declined amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The name the sender of the transfer specified as the recipient of the transfer.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="creditor_name")]
		public string Creditor_name { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code of the declined transfer's currency. This will always be "USD" for a Real Time Payments transfer.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public AccountCurrency Currency { get; set; }
		
		/// <summary>
		/// The account number of the account that sent the transfer.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="debtor_account_number")]
		public string Debtor_account_number { get; set; }
		
		/// <summary>
		/// The name provided by the sender of the transfer.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="debtor_name")]
		public string Debtor_name { get; set; }
		
		/// <summary>
		/// The routing number of the account that sent the transfer.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="debtor_routing_number")]
		public string Debtor_routing_number { get; set; }
		
		/// <summary>
		/// Why the transfer was declined.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public Declined_transactionSourceInbound_real_time_payments_transfer_declineReason Reason { get; set; }
		
		/// <summary>
		/// Additional information included with the transfer.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="remittance_information")]
		public string Remittance_information { get; set; }
		
		/// <summary>
		/// The Real Time Payments network identification of the declined transfer.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transaction_identification")]
		public string Transaction_identification { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Declined_transactionSourceInbound_real_time_payments_transfer_declineReason
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="account_number_canceled")]
		account_number_canceled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="account_number_disabled")]
		account_number_disabled = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group_locked")]
		group_locked = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="entity_not_active")]
		entity_not_active = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="real_time_payments_not_enabled")]
		real_time_payments_not_enabled = 4,
	}
	
	public class Declined_transactionSourceInternational_ach_decline
	{
		
		/// <summary>
		/// The declined amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="destination_country_code")]
		public string Destination_country_code { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="destination_currency_code")]
		public string Destination_currency_code { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="foreign_exchange_indicator")]
		public string Foreign_exchange_indicator { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="foreign_exchange_reference")]
		public string Foreign_exchange_reference { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="foreign_exchange_reference_indicator")]
		public string Foreign_exchange_reference_indicator { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="foreign_payment_amount")]
		public int Foreign_payment_amount { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="foreign_trace_number")]
		public string Foreign_trace_number { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="international_transaction_type_code")]
		public string International_transaction_type_code { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originating_currency_code")]
		public string Originating_currency_code { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originating_depository_financial_institution_branch_country")]
		public string Originating_depository_financial_institution_branch_country { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originating_depository_financial_institution_id")]
		public string Originating_depository_financial_institution_id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originating_depository_financial_institution_id_qualifier")]
		public string Originating_depository_financial_institution_id_qualifier { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originating_depository_financial_institution_name")]
		public string Originating_depository_financial_institution_name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_city")]
		public string Originator_city { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_company_entry_description")]
		public string Originator_company_entry_description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_country")]
		public string Originator_country { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_identification")]
		public string Originator_identification { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_name")]
		public string Originator_name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_postal_code")]
		public string Originator_postal_code { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_state_or_province")]
		public string Originator_state_or_province { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_street_address")]
		public string Originator_street_address { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="payment_related_information")]
		public string Payment_related_information { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="payment_related_information2")]
		public string Payment_related_information2 { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiver_city")]
		public string Receiver_city { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiver_country")]
		public string Receiver_country { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiver_identification_number")]
		public string Receiver_identification_number { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiver_postal_code")]
		public string Receiver_postal_code { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiver_state_or_province")]
		public string Receiver_state_or_province { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiver_street_address")]
		public string Receiver_street_address { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiving_company_or_individual_name")]
		public string Receiving_company_or_individual_name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiving_depository_financial_institution_country")]
		public string Receiving_depository_financial_institution_country { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiving_depository_financial_institution_id")]
		public string Receiving_depository_financial_institution_id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiving_depository_financial_institution_id_qualifier")]
		public string Receiving_depository_financial_institution_id_qualifier { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiving_depository_financial_institution_name")]
		public string Receiving_depository_financial_institution_name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="trace_number")]
		public string Trace_number { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Declined_transactionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="declined_transaction")]
		declined_transaction = 0,
	}
	
	/// <summary>
	/// A list of Declined Transaction objects
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Declined_transaction_list
	{
		
		/// <summary>
		/// The contents of the list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Declined_transaction[] Data { get; set; }
		
		/// <summary>
		/// A pointer to a place in the list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="next_cursor")]
		public string Next_cursor { get; set; }
	}
	
	/// <summary>
	/// A Digital Wallet Token is created when a user adds a Card to their Apple Pay or Google Pay app. The Digital Wallet Token can be used for purchases just like a Card.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Digital_wallet_token
	{
		
		/// <summary>
		/// The identifier for the Card this Digital Wallet Token belongs to.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="card_id")]
		public string Card_id { get; set; }
		
		/// <summary>
		/// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Card was created.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.DateTimeOffset Created_at { get; set; }
		
		/// <summary>
		/// The Digital Wallet Token identifier.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// This indicates if payments can be made with the Digital Wallet Token.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public Digital_wallet_tokenStatus Status { get; set; }
		
		/// <summary>
		/// The digital wallet app being used.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="token_requestor")]
		public Digital_wallet_tokenToken_requestor Token_requestor { get; set; }
		
		/// <summary>
		/// A constant representing the object's type. For this resource it will always be `digital_wallet_token`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public Digital_wallet_tokenType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Digital_wallet_tokenStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="active")]
		active = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="inactive")]
		inactive = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="suspended")]
		suspended = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="deactivated")]
		deactivated = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Digital_wallet_tokenToken_requestor
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="apple_pay")]
		apple_pay = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="google_pay")]
		google_pay = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Digital_wallet_tokenType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="digital_wallet_token")]
		digital_wallet_token = 0,
	}
	
	/// <summary>
	/// A list of Digital Wallet Token objects
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Digital_wallet_token_list
	{
		
		/// <summary>
		/// The contents of the list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Digital_wallet_token[] Data { get; set; }
		
		/// <summary>
		/// A pointer to a place in the list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="next_cursor")]
		public string Next_cursor { get; set; }
	}
	
	/// <summary>
	/// Increase generates certain documents / forms automatically for your application; they can be listed here. Currently the only supported document type is IRS Form 1099-INT.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Document
	{
		
		/// <summary>
		/// The type of document.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="category")]
		public DocumentCategory Category { get; set; }
		
		/// <summary>
		/// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time at which the Document was created.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.DateTimeOffset Created_at { get; set; }
		
		/// <summary>
		/// The identifier of the Entity the document was generated for.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="entity_id")]
		public string Entity_id { get; set; }
		
		/// <summary>
		/// The identifier of the File containing the Document's contents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="file_id")]
		public string File_id { get; set; }
		
		/// <summary>
		/// The Document identifier.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// A constant representing the object's type. For this resource it will always be `document`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public DocumentType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DocumentCategory
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="account_opening_disclosures")]
		account_opening_disclosures = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="anti_money_laundering_policy")]
		anti_money_laundering_policy = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="anti_money_laundering_procedures")]
		anti_money_laundering_procedures = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="audit_report")]
		audit_report = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="background_checks")]
		background_checks = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="business_continuity_plan")]
		business_continuity_plan = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="collections_policy")]
		collections_policy = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="complaints_policy")]
		complaints_policy = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="complaint_report")]
		complaint_report = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="compliance_report")]
		compliance_report = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="compliance_staffing_plan")]
		compliance_staffing_plan = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="compliance_management_system_policy")]
		compliance_management_system_policy = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="consumer_privacy_notice")]
		consumer_privacy_notice = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="consumer_protection_policy")]
		consumer_protection_policy = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="corporate_formation_document")]
		corporate_formation_document = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="credit_monitoring_report")]
		credit_monitoring_report = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="customer_information_program_policy")]
		customer_information_program_policy = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="electronic_funds_tranfer_act_policy")]
		electronic_funds_tranfer_act_policy = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="employee_overview")]
		employee_overview = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="end_user_terms_of_service")]
		end_user_terms_of_service = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="e_sign_policy")]
		e_sign_policy = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="financial_statement")]
		financial_statement = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="form_1099_int")]
		form_1099_int = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fraud_prevention_policy")]
		fraud_prevention_policy = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="funds_availability_policy")]
		funds_availability_policy = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="funds_availability_disclosure")]
		funds_availability_disclosure = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="funds_flow_diagram")]
		funds_flow_diagram = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="gramm_leach_bliley_act_policy")]
		gramm_leach_bliley_act_policy = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="information_security_policy")]
		information_security_policy = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="insurance_policy")]
		insurance_policy = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="investor_presentation")]
		investor_presentation = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="loan_application_processing_policy")]
		loan_application_processing_policy = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="management_biography")]
		management_biography = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="marketing_and_advertising_policy")]
		marketing_and_advertising_policy = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="network_security_diagram")]
		network_security_diagram = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="onboarding_questionnaire")]
		onboarding_questionnaire = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="penetration_test_report")]
		penetration_test_report = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="program_risk_assessment")]
		program_risk_assessment = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="security_audit_report")]
		security_audit_report = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="servicing_policy")]
		servicing_policy = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="transaction_monitoring_report")]
		transaction_monitoring_report = 40,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="truth_in_savings_act_policy")]
		truth_in_savings_act_policy = 41,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="underwriting_policy")]
		underwriting_policy = 42,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="vendor_list")]
		vendor_list = 43,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="vendor_management_policy")]
		vendor_management_policy = 44,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="vendor_risk_management_report")]
		vendor_risk_management_report = 45,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="volume_forecast")]
		volume_forecast = 46,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DocumentType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="document")]
		document = 0,
	}
	
	/// <summary>
	/// A list of Document objects
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Document_list
	{
		
		/// <summary>
		/// The contents of the list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Document[] Data { get; set; }
		
		/// <summary>
		/// A pointer to a place in the list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="next_cursor")]
		public string Next_cursor { get; set; }
	}
	
	/// <summary>
	/// Entities are the legal entities that own accounts. They can be people, corporations, partnerships, or trusts.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Entity
	{
		
		/// <summary>
		/// Details of the corporation entity. Will be present if `structure` is equal to `corporation`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="corporation")]
		public EntityCorporation Corporation { get; set; }
		
		/// <summary>
		/// The entity's description for display purposes.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The entity's identifier.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Details of the joint entity. Will be present if `structure` is equal to `joint`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="joint")]
		public EntityJoint Joint { get; set; }
		
		/// <summary>
		/// Details of the natural person entity. Will be present if `structure` is equal to `natural_person`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="natural_person")]
		public EntityNatural_person Natural_person { get; set; }
		
		/// <summary>
		/// The relationship between your group and the entity.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="relationship")]
		public Create_an_entity_parametersRelationship Relationship { get; set; }
		
		/// <summary>
		/// The entity's legal structure.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="structure")]
		public Create_an_entity_parametersStructure Structure { get; set; }
		
		/// <summary>
		/// Additional documentation associated with the entity.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="supplemental_documents")]
		public EntitySupplemental_documents[] EntitySupplemental_documents { get; set; }
		
		/// <summary>
		/// Details of the trust entity. Will be present if `structure` is equal to `trust`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="trust")]
		public EntityTrust Trust { get; set; }
		
		/// <summary>
		/// A constant representing the object's type. For this resource it will always be `entity`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public EntityType Type { get; set; }
	}
	
	public class EntityCorporation
	{
		
		/// <summary>
		/// The corporation's address.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="address")]
		public EntityCorporationAddress Address { get; set; }
		
		/// <summary>
		/// The identifying details of anyone controlling or owning 25% or more of the corporation.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="beneficial_owners")]
		public EntityCorporationBeneficial_owners[] EntityCorporationBeneficial_owners { get; set; }
		
		/// <summary>
		/// The two-letter United States Postal Service (USPS) abbreviation for the corporation's state of incorporation.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="incorporation_state")]
		public string Incorporation_state { get; set; }
		
		/// <summary>
		/// The legal name of the corporation.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The Employer Identification Number (EIN) for the corporation.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tax_identifier")]
		public string Tax_identifier { get; set; }
		
		/// <summary>
		/// The website of the corporation.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="website")]
		public string Website { get; set; }
	}
	
	public class EntityCorporationAddress
	{
		
		/// <summary>
		/// The city of the address.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		/// <summary>
		/// The first line of the address.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="line1")]
		public string Line1 { get; set; }
		
		/// <summary>
		/// The second line of the address.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="line2")]
		public string Line2 { get; set; }
		
		/// <summary>
		/// The two-letter United States Postal Service (USPS) abbreviation for the state of the address.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		/// <summary>
		/// The ZIP code of the address.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="zip")]
		public string Zip { get; set; }
	}
	
	public class EntityCorporationBeneficial_owners
	{
		
		/// <summary>
		/// This person's role or title within the entity.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="company_title")]
		public string Company_title { get; set; }
		
		/// <summary>
		/// Personal details for the beneficial owner.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="individual")]
		public EntityCorporationBeneficial_ownersIndividual Individual { get; set; }
		
		/// <summary>
		/// Why this person is considered a beneficial owner of the entity.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="prong")]
		public Create_an_entity_parametersCorporationBeneficial_ownersProng Prong { get; set; }
	}
	
	public class EntityCorporationBeneficial_ownersIndividual
	{
		
		/// <summary>
		/// The person's address.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="address")]
		public EntityCorporationBeneficial_ownersIndividualAddress Address { get; set; }
		
		/// <summary>
		/// The person's date of birth in YYYY-MM-DD format.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="date_of_birth")]
		public System.DateOnly Date_of_birth { get; set; }
		
		/// <summary>
		/// A means of verifying the person's identity.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="identification")]
		public EntityCorporationBeneficial_ownersIndividualIdentification Identification { get; set; }
		
		/// <summary>
		/// The person's legal name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	public class EntityCorporationBeneficial_ownersIndividualAddress
	{
		
		/// <summary>
		/// The city of the address.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		/// <summary>
		/// The first line of the address.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="line1")]
		public string Line1 { get; set; }
		
		/// <summary>
		/// The second line of the address.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="line2")]
		public string Line2 { get; set; }
		
		/// <summary>
		/// The two-letter United States Postal Service (USPS) abbreviation for the state of the address.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		/// <summary>
		/// The ZIP code of the address.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="zip")]
		public string Zip { get; set; }
	}
	
	public class EntityCorporationBeneficial_ownersIndividualIdentification
	{
		
		/// <summary>
		/// A method that can be used to verify the individual's identity.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="method")]
		public Create_an_entity_parametersCorporationBeneficial_ownersIndividualIdentificationMethod Method { get; set; }
		
		/// <summary>
		/// The last 4 digits of the identification number that can be used to verify the individual's identity.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="number_last4")]
		public string Number_last4 { get; set; }
	}
	
	public class EntityJoint
	{
		
		/// <summary>
		/// The two individuals that share control of the entity.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="individuals")]
		public EntityJointIndividuals[] EntityJointIndividuals { get; set; }
		
		/// <summary>
		/// The entity's name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	public class EntityJointIndividuals
	{
		
		/// <summary>
		/// The person's address.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="address")]
		public EntityJointIndividualsAddress Address { get; set; }
		
		/// <summary>
		/// The person's date of birth in YYYY-MM-DD format.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="date_of_birth")]
		public System.DateOnly Date_of_birth { get; set; }
		
		/// <summary>
		/// A means of verifying the person's identity.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="identification")]
		public EntityJointIndividualsIdentification Identification { get; set; }
		
		/// <summary>
		/// The person's legal name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	public class EntityJointIndividualsAddress
	{
		
		/// <summary>
		/// The city of the address.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		/// <summary>
		/// The first line of the address.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="line1")]
		public string Line1 { get; set; }
		
		/// <summary>
		/// The second line of the address.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="line2")]
		public string Line2 { get; set; }
		
		/// <summary>
		/// The two-letter United States Postal Service (USPS) abbreviation for the state of the address.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		/// <summary>
		/// The ZIP code of the address.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="zip")]
		public string Zip { get; set; }
	}
	
	public class EntityJointIndividualsIdentification
	{
		
		/// <summary>
		/// A method that can be used to verify the individual's identity.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="method")]
		public Create_an_entity_parametersCorporationBeneficial_ownersIndividualIdentificationMethod Method { get; set; }
		
		/// <summary>
		/// The last 4 digits of the identification number that can be used to verify the individual's identity.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="number_last4")]
		public string Number_last4 { get; set; }
	}
	
	public class EntityNatural_person
	{
		
		/// <summary>
		/// The person's address.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="address")]
		public EntityNatural_personAddress Address { get; set; }
		
		/// <summary>
		/// The person's date of birth in YYYY-MM-DD format.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="date_of_birth")]
		public System.DateOnly Date_of_birth { get; set; }
		
		/// <summary>
		/// A means of verifying the person's identity.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="identification")]
		public EntityNatural_personIdentification Identification { get; set; }
		
		/// <summary>
		/// The person's legal name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	public class EntityNatural_personAddress
	{
		
		/// <summary>
		/// The city of the address.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		/// <summary>
		/// The first line of the address.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="line1")]
		public string Line1 { get; set; }
		
		/// <summary>
		/// The second line of the address.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="line2")]
		public string Line2 { get; set; }
		
		/// <summary>
		/// The two-letter United States Postal Service (USPS) abbreviation for the state of the address.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		/// <summary>
		/// The ZIP code of the address.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="zip")]
		public string Zip { get; set; }
	}
	
	public class EntityNatural_personIdentification
	{
		
		/// <summary>
		/// A method that can be used to verify the individual's identity.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="method")]
		public Create_an_entity_parametersCorporationBeneficial_ownersIndividualIdentificationMethod Method { get; set; }
		
		/// <summary>
		/// The last 4 digits of the identification number that can be used to verify the individual's identity.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="number_last4")]
		public string Number_last4 { get; set; }
	}
	
	public class EntitySupplemental_documents
	{
		
		/// <summary>
		/// The File containing the document.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="file_id")]
		public string File_id { get; set; }
	}
	
	public class EntityTrust
	{
		
		/// <summary>
		/// The trust's address.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="address")]
		public EntityTrustAddress Address { get; set; }
		
		/// <summary>
		/// Whether the trust is `revocable` or `irrevocable`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="category")]
		public Create_an_entity_parametersTrustCategory Category { get; set; }
		
		/// <summary>
		/// The ID for the File containing the formation document of the trust.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="formation_document_file_id")]
		public string Formation_document_file_id { get; set; }
		
		/// <summary>
		/// The two-letter United States Postal Service (USPS) abbreviation for the state in which the trust was formed.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="formation_state")]
		public string Formation_state { get; set; }
		
		/// <summary>
		/// The grantor of the trust. Will be present if the `category` is `revocable`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="grantor")]
		public EntityTrustGrantor Grantor { get; set; }
		
		/// <summary>
		/// The trust's name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The Employer Identification Number (EIN) of the trust itself.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tax_identifier")]
		public string Tax_identifier { get; set; }
		
		/// <summary>
		/// The trustees of the trust.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="trustees")]
		public EntityTrustTrustees[] EntityTrustTrustees { get; set; }
	}
	
	public class EntityTrustAddress
	{
		
		/// <summary>
		/// The city of the address.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		/// <summary>
		/// The first line of the address.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="line1")]
		public string Line1 { get; set; }
		
		/// <summary>
		/// The second line of the address.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="line2")]
		public string Line2 { get; set; }
		
		/// <summary>
		/// The two-letter United States Postal Service (USPS) abbreviation for the state of the address.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		/// <summary>
		/// The ZIP code of the address.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="zip")]
		public string Zip { get; set; }
	}
	
	public class EntityTrustGrantor
	{
		
		/// <summary>
		/// The person's address.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="address")]
		public EntityTrustGrantorAddress Address { get; set; }
		
		/// <summary>
		/// The person's date of birth in YYYY-MM-DD format.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="date_of_birth")]
		public System.DateOnly Date_of_birth { get; set; }
		
		/// <summary>
		/// A means of verifying the person's identity.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="identification")]
		public EntityTrustGrantorIdentification Identification { get; set; }
		
		/// <summary>
		/// The person's legal name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	public class EntityTrustGrantorAddress
	{
		
		/// <summary>
		/// The city of the address.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		/// <summary>
		/// The first line of the address.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="line1")]
		public string Line1 { get; set; }
		
		/// <summary>
		/// The second line of the address.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="line2")]
		public string Line2 { get; set; }
		
		/// <summary>
		/// The two-letter United States Postal Service (USPS) abbreviation for the state of the address.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		/// <summary>
		/// The ZIP code of the address.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="zip")]
		public string Zip { get; set; }
	}
	
	public class EntityTrustGrantorIdentification
	{
		
		/// <summary>
		/// A method that can be used to verify the individual's identity.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="method")]
		public Create_an_entity_parametersCorporationBeneficial_ownersIndividualIdentificationMethod Method { get; set; }
		
		/// <summary>
		/// The last 4 digits of the identification number that can be used to verify the individual's identity.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="number_last4")]
		public string Number_last4 { get; set; }
	}
	
	public class EntityTrustTrustees
	{
		
		/// <summary>
		/// The individual trustee of the trust. Will be present if the trustee's `structure` is equal to `individual`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="individual")]
		public EntityTrustTrusteesIndividual Individual { get; set; }
		
		/// <summary>
		/// The structure of the trustee. Will always be equal to `individual`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="structure")]
		public Create_an_entity_parametersTrustTrusteesStructure Structure { get; set; }
	}
	
	public class EntityTrustTrusteesIndividual
	{
		
		/// <summary>
		/// The person's address.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="address")]
		public EntityTrustTrusteesIndividualAddress Address { get; set; }
		
		/// <summary>
		/// The person's date of birth in YYYY-MM-DD format.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="date_of_birth")]
		public System.DateOnly Date_of_birth { get; set; }
		
		/// <summary>
		/// A means of verifying the person's identity.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="identification")]
		public EntityTrustTrusteesIndividualIdentification Identification { get; set; }
		
		/// <summary>
		/// The person's legal name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	public class EntityTrustTrusteesIndividualAddress
	{
		
		/// <summary>
		/// The city of the address.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		/// <summary>
		/// The first line of the address.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="line1")]
		public string Line1 { get; set; }
		
		/// <summary>
		/// The second line of the address.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="line2")]
		public string Line2 { get; set; }
		
		/// <summary>
		/// The two-letter United States Postal Service (USPS) abbreviation for the state of the address.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		/// <summary>
		/// The ZIP code of the address.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="zip")]
		public string Zip { get; set; }
	}
	
	public class EntityTrustTrusteesIndividualIdentification
	{
		
		/// <summary>
		/// A method that can be used to verify the individual's identity.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="method")]
		public Create_an_entity_parametersCorporationBeneficial_ownersIndividualIdentificationMethod Method { get; set; }
		
		/// <summary>
		/// The last 4 digits of the identification number that can be used to verify the individual's identity.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="number_last4")]
		public string Number_last4 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum EntityType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="entity")]
		entity = 0,
	}
	
	/// <summary>
	/// A list of Entity objects
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Entity_list
	{
		
		/// <summary>
		/// The contents of the list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Entity[] Data { get; set; }
		
		/// <summary>
		/// A pointer to a place in the list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="next_cursor")]
		public string Next_cursor { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Error
	{
	}
	
	/// <summary>
	/// Events are records of things that happened to objects in the API. They also result in webhooks being generated.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class event_
	{
		
		/// <summary>
		/// The identifier of the object that generated this Event.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="associated_object_id")]
		public string Associated_object_id { get; set; }
		
		/// <summary>
		/// The type of the object that generated this Event.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="associated_object_type")]
		public string Associated_object_type { get; set; }
		
		/// <summary>
		/// The category of the Event. We may add additional possible values for this enum over time; your application should be able to handle such additions gracefully.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="category")]
		public event_Category Category { get; set; }
		
		/// <summary>
		/// The time the Event was created.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.DateTimeOffset Created_at { get; set; }
		
		/// <summary>
		/// The Event identifier.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// A constant representing the object's type. For this resource it will always be `event`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public event_Type Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum event_Category
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="account.created")]
		account_created = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="account.updated")]
		account_updated = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="account_number.created")]
		account_number_created = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="account_number.updated")]
		account_number_updated = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="account_statement.created")]
		account_statement_created = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="account_transfer.created")]
		account_transfer_created = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="account_transfer.updated")]
		account_transfer_updated = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ach_prenotification.created")]
		ach_prenotification_created = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ach_prenotification.updated")]
		ach_prenotification_updated = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ach_transfer.created")]
		ach_transfer_created = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ach_transfer.updated")]
		ach_transfer_updated = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="card.created")]
		card_created = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="card.updated")]
		card_updated = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="card_payment.created")]
		card_payment_created = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="card_payment.updated")]
		card_payment_updated = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="card_dispute.created")]
		card_dispute_created = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="card_dispute.updated")]
		card_dispute_updated = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="check_deposit.created")]
		check_deposit_created = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="check_deposit.updated")]
		check_deposit_updated = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="check_transfer.created")]
		check_transfer_created = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="check_transfer.updated")]
		check_transfer_updated = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="declined_transaction.created")]
		declined_transaction_created = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="digital_wallet_token.created")]
		digital_wallet_token_created = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="digital_wallet_token.updated")]
		digital_wallet_token_updated = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="document.created")]
		document_created = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="entity.created")]
		entity_created = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="entity.updated")]
		entity_updated = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="external_account.created")]
		external_account_created = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="file.created")]
		file_created = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.updated")]
		group_updated = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.heartbeat")]
		group_heartbeat = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="inbound_ach_transfer_return.created")]
		inbound_ach_transfer_return_created = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="inbound_ach_transfer_return.updated")]
		inbound_ach_transfer_return_updated = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="inbound_wire_drawdown_request.created")]
		inbound_wire_drawdown_request_created = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="oauth_connection.created")]
		oauth_connection_created = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="oauth_connection.deactivated")]
		oauth_connection_deactivated = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pending_transaction.created")]
		pending_transaction_created = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pending_transaction.updated")]
		pending_transaction_updated = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="real_time_decision.card_authorization_requested")]
		real_time_decision_card_authorization_requested = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="real_time_decision.digital_wallet_token_requested")]
		real_time_decision_digital_wallet_token_requested = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="real_time_decision.digital_wallet_authentication_requested")]
		real_time_decision_digital_wallet_authentication_requested = 40,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="real_time_payments_transfer.created")]
		real_time_payments_transfer_created = 41,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="real_time_payments_transfer.updated")]
		real_time_payments_transfer_updated = 42,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="real_time_payments_request_for_payment.created")]
		real_time_payments_request_for_payment_created = 43,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="real_time_payments_request_for_payment.updated")]
		real_time_payments_request_for_payment_updated = 44,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="transaction.created")]
		transaction_created = 45,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="wire_drawdown_request.created")]
		wire_drawdown_request_created = 46,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="wire_drawdown_request.updated")]
		wire_drawdown_request_updated = 47,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="wire_transfer.created")]
		wire_transfer_created = 48,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="wire_transfer.updated")]
		wire_transfer_updated = 49,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum event_Type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="event")]
		_event = 0,
	}
	
	/// <summary>
	/// A list of Event objects
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Event_list
	{
		
		/// <summary>
		/// The contents of the list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public event_[] Data { get; set; }
		
		/// <summary>
		/// A pointer to a place in the list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="next_cursor")]
		public string Next_cursor { get; set; }
	}
	
	/// <summary>
	/// Webhooks are event notifications we send to you by HTTPS POST requests. Event Subscriptions are how you configure your application to listen for them. You can create an Event Subscription through your [developer dashboard](https://dashboard.increase.com/developers/webhooks) or the API. For more information, see our [webhooks guide](https://increase.com/documentation/webhooks).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Event_subscription
	{
		
		/// <summary>
		/// The time the event subscription was created.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.DateTimeOffset Created_at { get; set; }
		
		/// <summary>
		/// The event subscription identifier.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// If specified, this subscription will only receive webhooks for Events with the specified `category`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="selected_event_category")]
		public System.Nullable<Event_subscriptionSelected_event_category> Selected_event_category { get; set; }
		
		/// <summary>
		/// The key that will be used to sign webhooks.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="shared_secret")]
		public string Shared_secret { get; set; }
		
		/// <summary>
		/// This indicates if we'll send notifications to this subscription.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public Event_subscriptionStatus Status { get; set; }
		
		/// <summary>
		/// A constant representing the object's type. For this resource it will always be `event_subscription`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public Event_subscriptionType Type { get; set; }
		
		/// <summary>
		/// The webhook url where we'll send notifications.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Event_subscriptionSelected_event_category
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="account.created")]
		account_created = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="account.updated")]
		account_updated = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="account_number.created")]
		account_number_created = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="account_number.updated")]
		account_number_updated = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="account_statement.created")]
		account_statement_created = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="account_transfer.created")]
		account_transfer_created = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="account_transfer.updated")]
		account_transfer_updated = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ach_prenotification.created")]
		ach_prenotification_created = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ach_prenotification.updated")]
		ach_prenotification_updated = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ach_transfer.created")]
		ach_transfer_created = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ach_transfer.updated")]
		ach_transfer_updated = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="card.created")]
		card_created = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="card.updated")]
		card_updated = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="card_payment.created")]
		card_payment_created = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="card_payment.updated")]
		card_payment_updated = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="card_dispute.created")]
		card_dispute_created = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="card_dispute.updated")]
		card_dispute_updated = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="check_deposit.created")]
		check_deposit_created = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="check_deposit.updated")]
		check_deposit_updated = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="check_transfer.created")]
		check_transfer_created = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="check_transfer.updated")]
		check_transfer_updated = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="declined_transaction.created")]
		declined_transaction_created = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="digital_wallet_token.created")]
		digital_wallet_token_created = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="digital_wallet_token.updated")]
		digital_wallet_token_updated = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="document.created")]
		document_created = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="entity.created")]
		entity_created = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="entity.updated")]
		entity_updated = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="external_account.created")]
		external_account_created = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="file.created")]
		file_created = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.updated")]
		group_updated = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.heartbeat")]
		group_heartbeat = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="inbound_ach_transfer_return.created")]
		inbound_ach_transfer_return_created = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="inbound_ach_transfer_return.updated")]
		inbound_ach_transfer_return_updated = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="inbound_wire_drawdown_request.created")]
		inbound_wire_drawdown_request_created = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="oauth_connection.created")]
		oauth_connection_created = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="oauth_connection.deactivated")]
		oauth_connection_deactivated = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pending_transaction.created")]
		pending_transaction_created = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pending_transaction.updated")]
		pending_transaction_updated = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="real_time_decision.card_authorization_requested")]
		real_time_decision_card_authorization_requested = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="real_time_decision.digital_wallet_token_requested")]
		real_time_decision_digital_wallet_token_requested = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="real_time_decision.digital_wallet_authentication_requested")]
		real_time_decision_digital_wallet_authentication_requested = 40,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="real_time_payments_transfer.created")]
		real_time_payments_transfer_created = 41,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="real_time_payments_transfer.updated")]
		real_time_payments_transfer_updated = 42,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="real_time_payments_request_for_payment.created")]
		real_time_payments_request_for_payment_created = 43,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="real_time_payments_request_for_payment.updated")]
		real_time_payments_request_for_payment_updated = 44,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="transaction.created")]
		transaction_created = 45,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="wire_drawdown_request.created")]
		wire_drawdown_request_created = 46,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="wire_drawdown_request.updated")]
		wire_drawdown_request_updated = 47,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="wire_transfer.created")]
		wire_transfer_created = 48,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="wire_transfer.updated")]
		wire_transfer_updated = 49,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Event_subscriptionStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="active")]
		active = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="disabled")]
		disabled = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="deleted")]
		deleted = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="requires_attention")]
		requires_attention = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Event_subscriptionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="event_subscription")]
		event_subscription = 0,
	}
	
	/// <summary>
	/// A list of Event Subscription objects
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Event_subscription_list
	{
		
		/// <summary>
		/// The contents of the list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Event_subscription[] Data { get; set; }
		
		/// <summary>
		/// A pointer to a place in the list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="next_cursor")]
		public string Next_cursor { get; set; }
	}
	
	/// <summary>
	/// Exports are batch summaries of your Increase data. You can make them from the API or dashboard. Since they can take a while, they are generated asynchronously. We send a webhook when they are ready. For more information, please read our [Exports documentation](https://increase.com/documentation/exports).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Export
	{
		
		/// <summary>
		/// The category of the Export. We may add additional possible values for this enum over time; your application should be able to handle that gracefully.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="category")]
		public Create_an_export_parametersCategory Category { get; set; }
		
		/// <summary>
		/// The time the Export was created.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.DateTimeOffset Created_at { get; set; }
		
		/// <summary>
		/// A URL at which the Export's file can be downloaded. This will be present when the Export's status transitions to `complete`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="file_download_url")]
		public string File_download_url { get; set; }
		
		/// <summary>
		/// The File containing the contents of the Export. This will be present when the Export's status transitions to `complete`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="file_id")]
		public string File_id { get; set; }
		
		/// <summary>
		/// The Export identifier.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The status of the Export.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ExportStatus Status { get; set; }
		
		/// <summary>
		/// A constant representing the object's type. For this resource it will always be `export`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public ExportType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ExportStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pending")]
		pending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="complete")]
		complete = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ExportType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="export")]
		export = 0,
	}
	
	/// <summary>
	/// A list of Export objects
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Export_list
	{
		
		/// <summary>
		/// The contents of the list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Export[] Data { get; set; }
		
		/// <summary>
		/// A pointer to a place in the list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="next_cursor")]
		public string Next_cursor { get; set; }
	}
	
	/// <summary>
	/// External Accounts represent accounts at financial institutions other than Increase. You can use this API to store their details for reuse.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class External_account
	{
		
		/// <summary>
		/// The destination account number.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="account_number")]
		public string Account_number { get; set; }
		
		/// <summary>
		/// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the External Account was created.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.DateTimeOffset Created_at { get; set; }
		
		/// <summary>
		/// The External Account's description for display purposes.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The type of the account to which the transfer will be sent.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="funding")]
		public Create_an_external_account_parametersFunding Funding { get; set; }
		
		/// <summary>
		/// The External Account's identifier.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The American Bankers' Association (ABA) Routing Transit Number (RTN).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="routing_number")]
		public string Routing_number { get; set; }
		
		/// <summary>
		/// The External Account's status.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public External_accountStatus Status { get; set; }
		
		/// <summary>
		/// A constant representing the object's type. For this resource it will always be `external_account`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public External_accountType Type { get; set; }
		
		/// <summary>
		/// If you have verified ownership of the External Account.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="verification_status")]
		public External_accountVerification_status Verification_status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum External_accountStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="active")]
		active = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="archived")]
		archived = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum External_accountType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="external_account")]
		external_account = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum External_accountVerification_status
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="unverified")]
		unverified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pending")]
		pending = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="verified")]
		verified = 2,
	}
	
	/// <summary>
	/// A list of External Account objects
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class External_account_list
	{
		
		/// <summary>
		/// The contents of the list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public External_account[] Data { get; set; }
		
		/// <summary>
		/// A pointer to a place in the list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="next_cursor")]
		public string Next_cursor { get; set; }
	}
	
	/// <summary>
	/// Files are objects that represent a file hosted on Increase's servers. The file may have been uploaded by you (for example, when uploading a check image) or it may have been created by Increase (for example, an autogenerated statement PDF).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class File
	{
		
		/// <summary>
		/// The time the File was created.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.DateTimeOffset Created_at { get; set; }
		
		/// <summary>
		/// A description of the File.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Whether the File was generated by Increase or by you and sent to Increase.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="direction")]
		public FileDirection Direction { get; set; }
		
		/// <summary>
		/// A URL from where the File can be downloaded at this point in time. The location of this URL may change over time.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="download_url")]
		public string Download_url { get; set; }
		
		/// <summary>
		/// The filename that was provided upon upload or generated by Increase.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="filename")]
		public string Filename { get; set; }
		
		/// <summary>
		/// The File's identifier.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// What the File will be used for. We may add additional possible values for this enum over time; your application should be able to handle such additions gracefully.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="purpose")]
		public FilePurpose Purpose { get; set; }
		
		/// <summary>
		/// A constant representing the object's type. For this resource it will always be `file`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public FileType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum FileDirection
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="to_increase")]
		to_increase = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="from_increase")]
		from_increase = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum FilePurpose
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="check_image_front")]
		check_image_front = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="check_image_back")]
		check_image_back = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="form_1099_int")]
		form_1099_int = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="form_ss_4")]
		form_ss_4 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="identity_document")]
		identity_document = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="increase_statement")]
		increase_statement = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="other")]
		other = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="trust_formation_document")]
		trust_formation_document = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="digital_wallet_artwork")]
		digital_wallet_artwork = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="digital_wallet_app_icon")]
		digital_wallet_app_icon = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="document_request")]
		document_request = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="entity_supplemental_document")]
		entity_supplemental_document = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="export")]
		export = 12,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum FileType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="file")]
		file = 0,
	}
	
	/// <summary>
	/// A list of File objects
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class File_list
	{
		
		/// <summary>
		/// The contents of the list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public File[] Data { get; set; }
		
		/// <summary>
		/// A pointer to a place in the list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="next_cursor")]
		public string Next_cursor { get; set; }
	}
	
	/// <summary>
	/// Groups represent organizations using Increase. You can retrieve information about your own organization via the API, or (more commonly) OAuth platforms can retrieve information about the organizations that have granted them access.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Group
	{
		
		/// <summary>
		/// If the Group is allowed to create ACH debits.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ach_debit_status")]
		public GroupAch_debit_status Ach_debit_status { get; set; }
		
		/// <summary>
		/// If the Group is activated or not.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="activation_status")]
		public GroupActivation_status Activation_status { get; set; }
		
		/// <summary>
		/// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time at which the Group was created.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.DateTimeOffset Created_at { get; set; }
		
		/// <summary>
		/// The Group identifier.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// A constant representing the object's type. For this resource it will always be `group`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public GroupType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum GroupAch_debit_status
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="disabled")]
		disabled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="enabled")]
		enabled = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum GroupActivation_status
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="unactivated")]
		unactivated = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="activated")]
		activated = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum GroupType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group")]
		group = 0,
	}
	
	/// <summary>
	/// If unauthorized activity occurs via ACH, you can create an Inbound ACH Transfer Return and we'll reverse the transaction. You can create an Inbound ACH Transfer return the first two days after receiving an Inbound ACH Transfer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Inbound_ach_transfer_return
	{
		
		/// <summary>
		/// The ID of the Inbound ACH Transfer Return.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The ID for the Transaction that is being returned.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="inbound_ach_transfer_transaction_id")]
		public string Inbound_ach_transfer_transaction_id { get; set; }
		
		/// <summary>
		/// The reason why this transfer will be returned. This is sent to the initiating bank.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public Create_an_ach_return_parametersReason Reason { get; set; }
		
		/// <summary>
		/// The lifecycle status of the transfer.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public Inbound_ach_transfer_returnStatus Status { get; set; }
		
		/// <summary>
		/// After the return is submitted to FedACH, this will contain supplemental details.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="submission")]
		public Inbound_ach_transfer_returnSubmission Submission { get; set; }
		
		/// <summary>
		/// The ID for the transaction refunding the transfer.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transaction_id")]
		public string Transaction_id { get; set; }
		
		/// <summary>
		/// A constant representing the object's type. For this resource it will always be `inbound_ach_transfer_return`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public Inbound_ach_transfer_returnType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Inbound_ach_transfer_returnStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pending_submitting")]
		pending_submitting = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="submitted")]
		submitted = 1,
	}
	
	public class Inbound_ach_transfer_returnSubmission
	{
		
		/// <summary>
		/// When the ACH transfer return was sent to FedACH.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="submitted_at")]
		public System.DateTimeOffset Submitted_at { get; set; }
		
		/// <summary>
		/// The trace number for the submission.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="trace_number")]
		public string Trace_number { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Inbound_ach_transfer_returnType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="inbound_ach_transfer_return")]
		inbound_ach_transfer_return = 0,
	}
	
	/// <summary>
	/// A list of Inbound ACH Transfer Return objects
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Inbound_ach_transfer_return_list
	{
		
		/// <summary>
		/// The contents of the list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Inbound_ach_transfer_return[] Data { get; set; }
		
		/// <summary>
		/// A pointer to a place in the list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="next_cursor")]
		public string Next_cursor { get; set; }
	}
	
	/// <summary>
	/// The results of an inbound ACH Transfer simulation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Inbound_ach_transfer_simulation_result
	{
		
		/// <summary>
		/// If the ACH Transfer attempt fails, this will contain the resulting [Declined Transaction](#declined-transactions) object. The Declined Transaction's `source` will be of `category: inbound_ach_transfer`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="declined_transaction")]
		public Inbound_ach_transfer_simulation_resultDeclined_transaction Declined_transaction { get; set; }
		
		/// <summary>
		/// If the ACH Transfer attempt succeeds, this will contain the resulting [Transaction](#transactions) object. The Transaction's `source` will be of `category: inbound_ach_transfer`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transaction")]
		public Inbound_ach_transfer_simulation_resultTransaction Transaction { get; set; }
		
		/// <summary>
		/// A constant representing the object's type. For this resource it will always be `inbound_ach_transfer_simulation_result`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public Inbound_ach_transfer_simulation_resultType Type { get; set; }
	}
	
	public class Inbound_ach_transfer_simulation_resultDeclined_transaction
	{
		
		/// <summary>
		/// The identifier for the Account the Declined Transaction belongs to.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="account_id")]
		public string Account_id { get; set; }
		
		/// <summary>
		/// The Declined Transaction amount in the minor unit of its currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date on which the Transaction occured.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.DateTimeOffset Created_at { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the Declined Transaction's currency. This will match the currency on the Declined Transcation's Account.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public AccountCurrency Currency { get; set; }
		
		/// <summary>
		/// This is the description the vendor provides.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The Declined Transaction identifier.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The identifier for the route this Declined Transaction came through. Routes are things like cards and ACH details.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="route_id")]
		public string Route_id { get; set; }
		
		/// <summary>
		/// The type of the route this Declined Transaction came through.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="route_type")]
		public Declined_transactionRoute_type Route_type { get; set; }
		
		/// <summary>
		/// This is an object giving more details on the network-level event that caused the Declined Transaction. For example, for a card transaction this lists the merchant's industry and location. Note that for backwards compatibility reasons, additional undocumented keys may appear in this object. These should be treated as deprecated and will be removed in the future.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="source")]
		public Inbound_ach_transfer_simulation_resultDeclined_transactionSource Source { get; set; }
		
		/// <summary>
		/// A constant representing the object's type. For this resource it will always be `declined_transaction`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public Declined_transactionType Type { get; set; }
	}
	
	public class Inbound_ach_transfer_simulation_resultDeclined_transactionSource
	{
		
		/// <summary>
		/// A ACH Decline object. This field will be present in the JSON response if and only if `category` is equal to `ach_decline`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ach_decline")]
		public Inbound_ach_transfer_simulation_resultDeclined_transactionSourceAch_decline Ach_decline { get; set; }
		
		/// <summary>
		/// A Card Decline object. This field will be present in the JSON response if and only if `category` is equal to `card_decline`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="card_decline")]
		public Inbound_ach_transfer_simulation_resultDeclined_transactionSourceCard_decline Card_decline { get; set; }
		
		/// <summary>
		/// A Deprecated Card Decline object. This field will be present in the JSON response if and only if `category` is equal to `card_route_decline`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="card_route_decline")]
		public Inbound_ach_transfer_simulation_resultDeclined_transactionSourceCard_route_decline Card_route_decline { get; set; }
		
		/// <summary>
		/// The type of decline that took place. We may add additional possible values for this enum over time; your application should be able to handle such additions gracefully.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="category")]
		public Declined_transactionSourceCategory Category { get; set; }
		
		/// <summary>
		/// A Check Decline object. This field will be present in the JSON response if and only if `category` is equal to `check_decline`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="check_decline")]
		public Inbound_ach_transfer_simulation_resultDeclined_transactionSourceCheck_decline Check_decline { get; set; }
		
		/// <summary>
		/// A Inbound Real Time Payments Transfer Decline object. This field will be present in the JSON response if and only if `category` is equal to `inbound_real_time_payments_transfer_decline`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="inbound_real_time_payments_transfer_decline")]
		public Inbound_ach_transfer_simulation_resultDeclined_transactionSourceInbound_real_time_payments_transfer_decline Inbound_real_time_payments_transfer_decline { get; set; }
		
		/// <summary>
		/// A International ACH Decline object. This field will be present in the JSON response if and only if `category` is equal to `international_ach_decline`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="international_ach_decline")]
		public Inbound_ach_transfer_simulation_resultDeclined_transactionSourceInternational_ach_decline International_ach_decline { get; set; }
	}
	
	public class Inbound_ach_transfer_simulation_resultDeclined_transactionSourceAch_decline
	{
		
		/// <summary>
		/// The declined amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_company_descriptive_date")]
		public string Originator_company_descriptive_date { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_company_discretionary_data")]
		public string Originator_company_discretionary_data { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_company_id")]
		public string Originator_company_id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_company_name")]
		public string Originator_company_name { get; set; }
		
		/// <summary>
		/// Why the ACH transfer was declined.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public Declined_transactionSourceAch_declineReason Reason { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiver_id_number")]
		public string Receiver_id_number { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiver_name")]
		public string Receiver_name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="trace_number")]
		public string Trace_number { get; set; }
	}
	
	public class Inbound_ach_transfer_simulation_resultDeclined_transactionSourceCard_decline
	{
		
		/// <summary>
		/// The declined amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the destination account currency.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public AccountCurrency Currency { get; set; }
		
		/// <summary>
		/// If the authorization was attempted using a Digital Wallet Token (such as an Apple Pay purchase), the identifier of the token that was used.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="digital_wallet_token_id")]
		public string Digital_wallet_token_id { get; set; }
		
		/// <summary>
		/// The merchant identifier (commonly abbreviated as MID) of the merchant the card is transacting with.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_acceptor_id")]
		public string Merchant_acceptor_id { get; set; }
		
		/// <summary>
		/// The Merchant Category Code (commonly abbreviated as MCC) of the merchant the card is transacting with.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_category_code")]
		public string Merchant_category_code { get; set; }
		
		/// <summary>
		/// The city the merchant resides in.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_city")]
		public string Merchant_city { get; set; }
		
		/// <summary>
		/// The country the merchant resides in.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_country")]
		public string Merchant_country { get; set; }
		
		/// <summary>
		/// The merchant descriptor of the merchant the card is transacting with.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_descriptor")]
		public string Merchant_descriptor { get; set; }
		
		/// <summary>
		/// The state the merchant resides in.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_state")]
		public string Merchant_state { get; set; }
		
		/// <summary>
		/// The payment network used to process this card authorization
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="network")]
		public Declined_transactionSourceCard_declineNetwork Network { get; set; }
		
		/// <summary>
		/// Fields specific to the `network`
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="network_details")]
		public Inbound_ach_transfer_simulation_resultDeclined_transactionSourceCard_declineNetwork_details Network_details { get; set; }
		
		/// <summary>
		/// The identifier of the Real-Time Decision sent to approve or decline this transaction.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="real_time_decision_id")]
		public string Real_time_decision_id { get; set; }
		
		/// <summary>
		/// Why the transaction was declined.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public Declined_transactionSourceCard_declineReason Reason { get; set; }
	}
	
	public class Inbound_ach_transfer_simulation_resultDeclined_transactionSourceCard_declineNetwork_details
	{
		
		/// <summary>
		/// Fields specific to the `visa` network
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="visa")]
		public Inbound_ach_transfer_simulation_resultDeclined_transactionSourceCard_declineNetwork_detailsVisa Visa { get; set; }
	}
	
	public class Inbound_ach_transfer_simulation_resultDeclined_transactionSourceCard_declineNetwork_detailsVisa
	{
		
		/// <summary>
		/// For electronic commerce transactions, this identifies the level of security used in obtaining the customer's payment credential. For mail or telephone order transactions, identifies the type of mail or telephone order.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="electronic_commerce_indicator")]
		public Declined_transactionSourceCard_declineNetwork_detailsVisaElectronic_commerce_indicator Electronic_commerce_indicator { get; set; }
		
		/// <summary>
		/// The method used to enter the cardholder's primary account number and card expiration date
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="point_of_service_entry_mode")]
		public Declined_transactionSourceCard_declineNetwork_detailsVisaPoint_of_service_entry_mode Point_of_service_entry_mode { get; set; }
	}
	
	public class Inbound_ach_transfer_simulation_resultDeclined_transactionSourceCard_route_decline
	{
		
		/// <summary>
		/// The declined amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the destination account currency.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public AccountCurrency Currency { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_acceptor_id")]
		public string Merchant_acceptor_id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_category_code")]
		public string Merchant_category_code { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_city")]
		public string Merchant_city { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_country")]
		public string Merchant_country { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_descriptor")]
		public string Merchant_descriptor { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_state")]
		public string Merchant_state { get; set; }
	}
	
	public class Inbound_ach_transfer_simulation_resultDeclined_transactionSourceCheck_decline
	{
		
		/// <summary>
		/// The declined amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="auxiliary_on_us")]
		public string Auxiliary_on_us { get; set; }
		
		/// <summary>
		/// Why the check was declined.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public Declined_transactionSourceCheck_declineReason Reason { get; set; }
	}
	
	public class Inbound_ach_transfer_simulation_resultDeclined_transactionSourceInbound_real_time_payments_transfer_decline
	{
		
		/// <summary>
		/// The declined amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The name the sender of the transfer specified as the recipient of the transfer.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="creditor_name")]
		public string Creditor_name { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code of the declined transfer's currency. This will always be "USD" for a Real Time Payments transfer.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public AccountCurrency Currency { get; set; }
		
		/// <summary>
		/// The account number of the account that sent the transfer.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="debtor_account_number")]
		public string Debtor_account_number { get; set; }
		
		/// <summary>
		/// The name provided by the sender of the transfer.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="debtor_name")]
		public string Debtor_name { get; set; }
		
		/// <summary>
		/// The routing number of the account that sent the transfer.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="debtor_routing_number")]
		public string Debtor_routing_number { get; set; }
		
		/// <summary>
		/// Why the transfer was declined.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public Declined_transactionSourceInbound_real_time_payments_transfer_declineReason Reason { get; set; }
		
		/// <summary>
		/// Additional information included with the transfer.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="remittance_information")]
		public string Remittance_information { get; set; }
		
		/// <summary>
		/// The Real Time Payments network identification of the declined transfer.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transaction_identification")]
		public string Transaction_identification { get; set; }
	}
	
	public class Inbound_ach_transfer_simulation_resultDeclined_transactionSourceInternational_ach_decline
	{
		
		/// <summary>
		/// The declined amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="destination_country_code")]
		public string Destination_country_code { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="destination_currency_code")]
		public string Destination_currency_code { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="foreign_exchange_indicator")]
		public string Foreign_exchange_indicator { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="foreign_exchange_reference")]
		public string Foreign_exchange_reference { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="foreign_exchange_reference_indicator")]
		public string Foreign_exchange_reference_indicator { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="foreign_payment_amount")]
		public int Foreign_payment_amount { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="foreign_trace_number")]
		public string Foreign_trace_number { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="international_transaction_type_code")]
		public string International_transaction_type_code { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originating_currency_code")]
		public string Originating_currency_code { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originating_depository_financial_institution_branch_country")]
		public string Originating_depository_financial_institution_branch_country { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originating_depository_financial_institution_id")]
		public string Originating_depository_financial_institution_id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originating_depository_financial_institution_id_qualifier")]
		public string Originating_depository_financial_institution_id_qualifier { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originating_depository_financial_institution_name")]
		public string Originating_depository_financial_institution_name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_city")]
		public string Originator_city { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_company_entry_description")]
		public string Originator_company_entry_description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_country")]
		public string Originator_country { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_identification")]
		public string Originator_identification { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_name")]
		public string Originator_name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_postal_code")]
		public string Originator_postal_code { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_state_or_province")]
		public string Originator_state_or_province { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_street_address")]
		public string Originator_street_address { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="payment_related_information")]
		public string Payment_related_information { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="payment_related_information2")]
		public string Payment_related_information2 { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiver_city")]
		public string Receiver_city { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiver_country")]
		public string Receiver_country { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiver_identification_number")]
		public string Receiver_identification_number { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiver_postal_code")]
		public string Receiver_postal_code { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiver_state_or_province")]
		public string Receiver_state_or_province { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiver_street_address")]
		public string Receiver_street_address { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiving_company_or_individual_name")]
		public string Receiving_company_or_individual_name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiving_depository_financial_institution_country")]
		public string Receiving_depository_financial_institution_country { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiving_depository_financial_institution_id")]
		public string Receiving_depository_financial_institution_id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiving_depository_financial_institution_id_qualifier")]
		public string Receiving_depository_financial_institution_id_qualifier { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiving_depository_financial_institution_name")]
		public string Receiving_depository_financial_institution_name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="trace_number")]
		public string Trace_number { get; set; }
	}
	
	public class Inbound_ach_transfer_simulation_resultTransaction
	{
		
		/// <summary>
		/// The identifier for the Account the Transaction belongs to.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="account_id")]
		public string Account_id { get; set; }
		
		/// <summary>
		/// The Transaction amount in the minor unit of its currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date on which the Transaction occured.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.DateTimeOffset Created_at { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the Transaction's currency. This will match the currency on the Transcation's Account.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public AccountCurrency Currency { get; set; }
		
		/// <summary>
		/// For a Transaction related to a transfer, this is the description you provide. For a Transaction related to a payment, this is the description the vendor provides.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The Transaction identifier.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The identifier for the route this Transaction came through. Routes are things like cards and ACH details.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="route_id")]
		public string Route_id { get; set; }
		
		/// <summary>
		/// The type of the route this Transaction came through.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="route_type")]
		public Declined_transactionRoute_type Route_type { get; set; }
		
		/// <summary>
		/// This is an object giving more details on the network-level event that caused the Transaction. Note that for backwards compatibility reasons, additional undocumented keys may appear in this object. These should be treated as deprecated and will be removed in the future.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="source")]
		public Inbound_ach_transfer_simulation_resultTransactionSource Source { get; set; }
		
		/// <summary>
		/// A constant representing the object's type. For this resource it will always be `transaction`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public Inbound_ach_transfer_simulation_resultTransactionType Type { get; set; }
	}
	
	public class Inbound_ach_transfer_simulation_resultTransactionSource
	{
		
		/// <summary>
		/// A Account Transfer Intention object. This field will be present in the JSON response if and only if `category` is equal to `account_transfer_intention`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="account_transfer_intention")]
		public Inbound_ach_transfer_simulation_resultTransactionSourceAccount_transfer_intention Account_transfer_intention { get; set; }
		
		/// <summary>
		/// A ACH Check Conversion object. This field will be present in the JSON response if and only if `category` is equal to `ach_check_conversion`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ach_check_conversion")]
		public Inbound_ach_transfer_simulation_resultTransactionSourceAch_check_conversion Ach_check_conversion { get; set; }
		
		/// <summary>
		/// A ACH Check Conversion Return object. This field will be present in the JSON response if and only if `category` is equal to `ach_check_conversion_return`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ach_check_conversion_return")]
		public Inbound_ach_transfer_simulation_resultTransactionSourceAch_check_conversion_return Ach_check_conversion_return { get; set; }
		
		/// <summary>
		/// A ACH Transfer Intention object. This field will be present in the JSON response if and only if `category` is equal to `ach_transfer_intention`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ach_transfer_intention")]
		public Inbound_ach_transfer_simulation_resultTransactionSourceAch_transfer_intention Ach_transfer_intention { get; set; }
		
		/// <summary>
		/// A ACH Transfer Rejection object. This field will be present in the JSON response if and only if `category` is equal to `ach_transfer_rejection`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ach_transfer_rejection")]
		public Inbound_ach_transfer_simulation_resultTransactionSourceAch_transfer_rejection Ach_transfer_rejection { get; set; }
		
		/// <summary>
		/// A ACH Transfer Return object. This field will be present in the JSON response if and only if `category` is equal to `ach_transfer_return`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ach_transfer_return")]
		public Inbound_ach_transfer_simulation_resultTransactionSourceAch_transfer_return Ach_transfer_return { get; set; }
		
		/// <summary>
		/// A Card Dispute Acceptance object. This field will be present in the JSON response if and only if `category` is equal to `card_dispute_acceptance`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="card_dispute_acceptance")]
		public Inbound_ach_transfer_simulation_resultTransactionSourceCard_dispute_acceptance Card_dispute_acceptance { get; set; }
		
		/// <summary>
		/// A Card Refund object. This field will be present in the JSON response if and only if `category` is equal to `card_refund`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="card_refund")]
		public Inbound_ach_transfer_simulation_resultTransactionSourceCard_refund Card_refund { get; set; }
		
		/// <summary>
		/// A Card Revenue Payment object. This field will be present in the JSON response if and only if `category` is equal to `card_revenue_payment`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="card_revenue_payment")]
		public Inbound_ach_transfer_simulation_resultTransactionSourceCard_revenue_payment Card_revenue_payment { get; set; }
		
		/// <summary>
		/// A Deprecated Card Refund object. This field will be present in the JSON response if and only if `category` is equal to `card_route_refund`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="card_route_refund")]
		public Inbound_ach_transfer_simulation_resultTransactionSourceCard_route_refund Card_route_refund { get; set; }
		
		/// <summary>
		/// A Deprecated Card Settlement object. This field will be present in the JSON response if and only if `category` is equal to `card_route_settlement`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="card_route_settlement")]
		public Inbound_ach_transfer_simulation_resultTransactionSourceCard_route_settlement Card_route_settlement { get; set; }
		
		/// <summary>
		/// A Card Settlement object. This field will be present in the JSON response if and only if `category` is equal to `card_settlement`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="card_settlement")]
		public Inbound_ach_transfer_simulation_resultTransactionSourceCard_settlement Card_settlement { get; set; }
		
		/// <summary>
		/// The type of transaction that took place. We may add additional possible values for this enum over time; your application should be able to handle such additions gracefully.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="category")]
		public Inbound_ach_transfer_simulation_resultTransactionSourceCategory Category { get; set; }
		
		/// <summary>
		/// A Check Deposit Acceptance object. This field will be present in the JSON response if and only if `category` is equal to `check_deposit_acceptance`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="check_deposit_acceptance")]
		public Inbound_ach_transfer_simulation_resultTransactionSourceCheck_deposit_acceptance Check_deposit_acceptance { get; set; }
		
		/// <summary>
		/// A Check Deposit Return object. This field will be present in the JSON response if and only if `category` is equal to `check_deposit_return`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="check_deposit_return")]
		public Inbound_ach_transfer_simulation_resultTransactionSourceCheck_deposit_return Check_deposit_return { get; set; }
		
		/// <summary>
		/// A Check Transfer Intention object. This field will be present in the JSON response if and only if `category` is equal to `check_transfer_intention`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="check_transfer_intention")]
		public Inbound_ach_transfer_simulation_resultTransactionSourceCheck_transfer_intention Check_transfer_intention { get; set; }
		
		/// <summary>
		/// A Check Transfer Rejection object. This field will be present in the JSON response if and only if `category` is equal to `check_transfer_rejection`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="check_transfer_rejection")]
		public Inbound_ach_transfer_simulation_resultTransactionSourceCheck_transfer_rejection Check_transfer_rejection { get; set; }
		
		/// <summary>
		/// A Check Transfer Return object. This field will be present in the JSON response if and only if `category` is equal to `check_transfer_return`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="check_transfer_return")]
		public Inbound_ach_transfer_simulation_resultTransactionSourceCheck_transfer_return Check_transfer_return { get; set; }
		
		/// <summary>
		/// A Check Transfer Stop Payment Request object. This field will be present in the JSON response if and only if `category` is equal to `check_transfer_stop_payment_request`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="check_transfer_stop_payment_request")]
		public Inbound_ach_transfer_simulation_resultTransactionSourceCheck_transfer_stop_payment_request Check_transfer_stop_payment_request { get; set; }
		
		/// <summary>
		/// A Dispute Resolution object. This field will be present in the JSON response if and only if `category` is equal to `dispute_resolution`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dispute_resolution")]
		public Inbound_ach_transfer_simulation_resultTransactionSourceDispute_resolution Dispute_resolution { get; set; }
		
		/// <summary>
		/// A Empyreal Cash Deposit object. This field will be present in the JSON response if and only if `category` is equal to `empyreal_cash_deposit`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="empyreal_cash_deposit")]
		public Inbound_ach_transfer_simulation_resultTransactionSourceEmpyreal_cash_deposit Empyreal_cash_deposit { get; set; }
		
		/// <summary>
		/// A Fee Payment object. This field will be present in the JSON response if and only if `category` is equal to `fee_payment`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fee_payment")]
		public Inbound_ach_transfer_simulation_resultTransactionSourceFee_payment Fee_payment { get; set; }
		
		/// <summary>
		/// A Inbound ACH Transfer object. This field will be present in the JSON response if and only if `category` is equal to `inbound_ach_transfer`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="inbound_ach_transfer")]
		public Inbound_ach_transfer_simulation_resultTransactionSourceInbound_ach_transfer Inbound_ach_transfer { get; set; }
		
		/// <summary>
		/// A Inbound Check object. This field will be present in the JSON response if and only if `category` is equal to `inbound_check`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="inbound_check")]
		public Inbound_ach_transfer_simulation_resultTransactionSourceInbound_check Inbound_check { get; set; }
		
		/// <summary>
		/// A Inbound International ACH Transfer object. This field will be present in the JSON response if and only if `category` is equal to `inbound_international_ach_transfer`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="inbound_international_ach_transfer")]
		public Inbound_ach_transfer_simulation_resultTransactionSourceInbound_international_ach_transfer Inbound_international_ach_transfer { get; set; }
		
		/// <summary>
		/// A Inbound Real Time Payments Transfer Confirmation object. This field will be present in the JSON response if and only if `category` is equal to `inbound_real_time_payments_transfer_confirmation`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="inbound_real_time_payments_transfer_confirmation")]
		public Inbound_ach_transfer_simulation_resultTransactionSourceInbound_real_time_payments_transfer_confirmation Inbound_real_time_payments_transfer_confirmation { get; set; }
		
		/// <summary>
		/// A Inbound Wire Drawdown Payment object. This field will be present in the JSON response if and only if `category` is equal to `inbound_wire_drawdown_payment`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="inbound_wire_drawdown_payment")]
		public Inbound_ach_transfer_simulation_resultTransactionSourceInbound_wire_drawdown_payment Inbound_wire_drawdown_payment { get; set; }
		
		/// <summary>
		/// A Inbound Wire Drawdown Payment Reversal object. This field will be present in the JSON response if and only if `category` is equal to `inbound_wire_drawdown_payment_reversal`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="inbound_wire_drawdown_payment_reversal")]
		public Inbound_ach_transfer_simulation_resultTransactionSourceInbound_wire_drawdown_payment_reversal Inbound_wire_drawdown_payment_reversal { get; set; }
		
		/// <summary>
		/// A Inbound Wire Reversal object. This field will be present in the JSON response if and only if `category` is equal to `inbound_wire_reversal`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="inbound_wire_reversal")]
		public Inbound_ach_transfer_simulation_resultTransactionSourceInbound_wire_reversal Inbound_wire_reversal { get; set; }
		
		/// <summary>
		/// A Inbound Wire Transfer object. This field will be present in the JSON response if and only if `category` is equal to `inbound_wire_transfer`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="inbound_wire_transfer")]
		public Inbound_ach_transfer_simulation_resultTransactionSourceInbound_wire_transfer Inbound_wire_transfer { get; set; }
		
		/// <summary>
		/// A Interest Payment object. This field will be present in the JSON response if and only if `category` is equal to `interest_payment`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="interest_payment")]
		public Inbound_ach_transfer_simulation_resultTransactionSourceInterest_payment Interest_payment { get; set; }
		
		/// <summary>
		/// A Internal Source object. This field will be present in the JSON response if and only if `category` is equal to `internal_source`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="internal_source")]
		public Inbound_ach_transfer_simulation_resultTransactionSourceInternal_source Internal_source { get; set; }
		
		/// <summary>
		/// A Real Time Payments Transfer Acknowledgement object. This field will be present in the JSON response if and only if `category` is equal to `real_time_payments_transfer_acknowledgement`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="real_time_payments_transfer_acknowledgement")]
		public Inbound_ach_transfer_simulation_resultTransactionSourceReal_time_payments_transfer_acknowledgement Real_time_payments_transfer_acknowledgement { get; set; }
		
		/// <summary>
		/// A Sample Funds object. This field will be present in the JSON response if and only if `category` is equal to `sample_funds`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sample_funds")]
		public Inbound_ach_transfer_simulation_resultTransactionSourceSample_funds Sample_funds { get; set; }
		
		/// <summary>
		/// A Wire Drawdown Payment Intention object. This field will be present in the JSON response if and only if `category` is equal to `wire_drawdown_payment_intention`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="wire_drawdown_payment_intention")]
		public Inbound_ach_transfer_simulation_resultTransactionSourceWire_drawdown_payment_intention Wire_drawdown_payment_intention { get; set; }
		
		/// <summary>
		/// A Wire Drawdown Payment Rejection object. This field will be present in the JSON response if and only if `category` is equal to `wire_drawdown_payment_rejection`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="wire_drawdown_payment_rejection")]
		public Inbound_ach_transfer_simulation_resultTransactionSourceWire_drawdown_payment_rejection Wire_drawdown_payment_rejection { get; set; }
		
		/// <summary>
		/// A Wire Transfer Intention object. This field will be present in the JSON response if and only if `category` is equal to `wire_transfer_intention`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="wire_transfer_intention")]
		public Inbound_ach_transfer_simulation_resultTransactionSourceWire_transfer_intention Wire_transfer_intention { get; set; }
		
		/// <summary>
		/// A Wire Transfer Rejection object. This field will be present in the JSON response if and only if `category` is equal to `wire_transfer_rejection`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="wire_transfer_rejection")]
		public Inbound_ach_transfer_simulation_resultTransactionSourceWire_transfer_rejection Wire_transfer_rejection { get; set; }
	}
	
	public class Inbound_ach_transfer_simulation_resultTransactionSourceAccount_transfer_intention
	{
		
		/// <summary>
		/// The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the destination account currency.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public AccountCurrency Currency { get; set; }
		
		/// <summary>
		/// The description you chose to give the transfer.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The identifier of the Account to where the Account Transfer was sent.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="destination_account_id")]
		public string Destination_account_id { get; set; }
		
		/// <summary>
		/// The identifier of the Account from where the Account Transfer was sent.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="source_account_id")]
		public string Source_account_id { get; set; }
		
		/// <summary>
		/// The identifier of the Account Transfer that led to this Pending Transaction.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transfer_id")]
		public string Transfer_id { get; set; }
	}
	
	public class Inbound_ach_transfer_simulation_resultTransactionSourceAch_check_conversion
	{
		
		/// <summary>
		/// The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The identifier of the File containing an image of the returned check.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="file_id")]
		public string File_id { get; set; }
	}
	
	public class Inbound_ach_transfer_simulation_resultTransactionSourceAch_check_conversion_return
	{
		
		/// <summary>
		/// The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// Why the transfer was returned.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="return_reason_code")]
		public string Return_reason_code { get; set; }
	}
	
	public class Inbound_ach_transfer_simulation_resultTransactionSourceAch_transfer_intention
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="account_number")]
		public string Account_number { get; set; }
		
		/// <summary>
		/// The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="routing_number")]
		public string Routing_number { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="statement_descriptor")]
		public string Statement_descriptor { get; set; }
		
		/// <summary>
		/// The identifier of the ACH Transfer that led to this Transaction.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transfer_id")]
		public string Transfer_id { get; set; }
	}
	
	public class Inbound_ach_transfer_simulation_resultTransactionSourceAch_transfer_rejection
	{
		
		/// <summary>
		/// The identifier of the ACH Transfer that led to this Transaction.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transfer_id")]
		public string Transfer_id { get; set; }
	}
	
	public class Inbound_ach_transfer_simulation_resultTransactionSourceAch_transfer_return
	{
		
		/// <summary>
		/// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was created.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.DateTimeOffset Created_at { get; set; }
		
		/// <summary>
		/// Why the ACH Transfer was returned.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="return_reason_code")]
		public Ach_transferReturnReturn_reason_code Return_reason_code { get; set; }
		
		/// <summary>
		/// The identifier of the Tranasaction associated with this return.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transaction_id")]
		public string Transaction_id { get; set; }
		
		/// <summary>
		/// The identifier of the ACH Transfer associated with this return.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transfer_id")]
		public string Transfer_id { get; set; }
	}
	
	public class Inbound_ach_transfer_simulation_resultTransactionSourceCard_dispute_acceptance
	{
		
		/// <summary>
		/// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Card Dispute was accepted.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="accepted_at")]
		public System.DateTimeOffset Accepted_at { get; set; }
		
		/// <summary>
		/// The identifier of the Card Dispute that was accepted.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="card_dispute_id")]
		public string Card_dispute_id { get; set; }
		
		/// <summary>
		/// The identifier of the Transaction that was created to return the disputed funds to your account.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transaction_id")]
		public string Transaction_id { get; set; }
	}
	
	public class Inbound_ach_transfer_simulation_resultTransactionSourceCard_refund
	{
		
		/// <summary>
		/// The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The identifier for the Transaction this refunds, if any.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="card_settlement_transaction_id")]
		public string Card_settlement_transaction_id { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public AccountCurrency Currency { get; set; }
		
		/// <summary>
		/// The Card Refund identifier.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The merchant identifier (commonly abbreviated as MID) of the merchant the card is transacting with.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_acceptor_id")]
		public string Merchant_acceptor_id { get; set; }
		
		/// <summary>
		/// The 4-digit MCC describing the merchant's business.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_category_code")]
		public string Merchant_category_code { get; set; }
		
		/// <summary>
		/// The city the merchant resides in.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_city")]
		public string Merchant_city { get; set; }
		
		/// <summary>
		/// The country the merchant resides in.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_country")]
		public string Merchant_country { get; set; }
		
		/// <summary>
		/// The name of the merchant.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_name")]
		public string Merchant_name { get; set; }
		
		/// <summary>
		/// The state the merchant resides in.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_state")]
		public string Merchant_state { get; set; }
		
		/// <summary>
		/// A constant representing the object's type. For this resource it will always be `card_refund`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public Inbound_ach_transfer_simulation_resultTransactionSourceCard_refundType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Inbound_ach_transfer_simulation_resultTransactionSourceCard_refundType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="card_refund")]
		card_refund = 0,
	}
	
	public class Inbound_ach_transfer_simulation_resultTransactionSourceCard_revenue_payment
	{
		
		/// <summary>
		/// The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction currency.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public AccountCurrency Currency { get; set; }
		
		/// <summary>
		/// The end of the period for which this transaction paid interest.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="period_end")]
		public System.DateTimeOffset Period_end { get; set; }
		
		/// <summary>
		/// The start of the period for which this transaction paid interest.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="period_start")]
		public System.DateTimeOffset Period_start { get; set; }
		
		/// <summary>
		/// The account the card belonged to.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transacted_on_account_id")]
		public string Transacted_on_account_id { get; set; }
	}
	
	public class Inbound_ach_transfer_simulation_resultTransactionSourceCard_route_refund
	{
		
		/// <summary>
		/// The refunded amount in the minor unit of the refunded currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the refund currency.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public AccountCurrency Currency { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_acceptor_id")]
		public string Merchant_acceptor_id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_category_code")]
		public string Merchant_category_code { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_city")]
		public string Merchant_city { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_country")]
		public string Merchant_country { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_descriptor")]
		public string Merchant_descriptor { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_state")]
		public string Merchant_state { get; set; }
	}
	
	public class Inbound_ach_transfer_simulation_resultTransactionSourceCard_route_settlement
	{
		
		/// <summary>
		/// The settled amount in the minor unit of the settlement currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the settlement currency.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public AccountCurrency Currency { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_acceptor_id")]
		public string Merchant_acceptor_id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_category_code")]
		public string Merchant_category_code { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_city")]
		public string Merchant_city { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_country")]
		public string Merchant_country { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_descriptor")]
		public string Merchant_descriptor { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_state")]
		public string Merchant_state { get; set; }
	}
	
	public class Inbound_ach_transfer_simulation_resultTransactionSourceCard_settlement
	{
		
		/// <summary>
		/// The amount in the minor unit of the transaction's settlement currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The Card Authorization that was created prior to this Card Settlement, if on exists.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="card_authorization")]
		public string Card_authorization { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's settlement currency.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public AccountCurrency Currency { get; set; }
		
		/// <summary>
		/// The Card Settlement identifier.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The merchant identifier (commonly abbreviated as MID) of the merchant the card is transacting with.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_acceptor_id")]
		public string Merchant_acceptor_id { get; set; }
		
		/// <summary>
		/// The 4-digit MCC describing the merchant's business.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_category_code")]
		public string Merchant_category_code { get; set; }
		
		/// <summary>
		/// The city the merchant resides in.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_city")]
		public string Merchant_city { get; set; }
		
		/// <summary>
		/// The country the merchant resides in.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_country")]
		public string Merchant_country { get; set; }
		
		/// <summary>
		/// The name of the merchant.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_name")]
		public string Merchant_name { get; set; }
		
		/// <summary>
		/// The state the merchant resides in.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_state")]
		public string Merchant_state { get; set; }
		
		/// <summary>
		/// The identifier of the Pending Transaction associated with this Transaction.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pending_transaction_id")]
		public string Pending_transaction_id { get; set; }
		
		/// <summary>
		/// The amount in the minor unit of the transaction's presentment currency.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="presentment_amount")]
		public int Presentment_amount { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's presentment currency.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="presentment_currency")]
		public string Presentment_currency { get; set; }
		
		/// <summary>
		/// A constant representing the object's type. For this resource it will always be `card_settlement`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public Inbound_ach_transfer_simulation_resultTransactionSourceCard_settlementType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Inbound_ach_transfer_simulation_resultTransactionSourceCard_settlementType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="card_settlement")]
		card_settlement = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Inbound_ach_transfer_simulation_resultTransactionSourceCategory
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="account_transfer_intention")]
		account_transfer_intention = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ach_check_conversion_return")]
		ach_check_conversion_return = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ach_check_conversion")]
		ach_check_conversion = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ach_transfer_intention")]
		ach_transfer_intention = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ach_transfer_rejection")]
		ach_transfer_rejection = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ach_transfer_return")]
		ach_transfer_return = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="card_dispute_acceptance")]
		card_dispute_acceptance = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="card_refund")]
		card_refund = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="card_settlement")]
		card_settlement = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="card_revenue_payment")]
		card_revenue_payment = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="check_deposit_acceptance")]
		check_deposit_acceptance = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="check_deposit_return")]
		check_deposit_return = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="check_transfer_intention")]
		check_transfer_intention = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="check_transfer_return")]
		check_transfer_return = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="check_transfer_rejection")]
		check_transfer_rejection = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="check_transfer_stop_payment_request")]
		check_transfer_stop_payment_request = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="dispute_resolution")]
		dispute_resolution = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="empyreal_cash_deposit")]
		empyreal_cash_deposit = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fee_payment")]
		fee_payment = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="inbound_ach_transfer")]
		inbound_ach_transfer = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="inbound_ach_transfer_return_intention")]
		inbound_ach_transfer_return_intention = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="inbound_check")]
		inbound_check = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="inbound_international_ach_transfer")]
		inbound_international_ach_transfer = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="inbound_real_time_payments_transfer_confirmation")]
		inbound_real_time_payments_transfer_confirmation = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="inbound_wire_drawdown_payment_reversal")]
		inbound_wire_drawdown_payment_reversal = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="inbound_wire_drawdown_payment")]
		inbound_wire_drawdown_payment = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="inbound_wire_reversal")]
		inbound_wire_reversal = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="inbound_wire_transfer")]
		inbound_wire_transfer = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="interest_payment")]
		interest_payment = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="internal_general_ledger_transaction")]
		internal_general_ledger_transaction = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="internal_source")]
		internal_source = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="card_route_refund")]
		card_route_refund = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="card_route_settlement")]
		card_route_settlement = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="real_time_payments_transfer_acknowledgement")]
		real_time_payments_transfer_acknowledgement = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="sample_funds")]
		sample_funds = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="wire_drawdown_payment_intention")]
		wire_drawdown_payment_intention = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="wire_drawdown_payment_rejection")]
		wire_drawdown_payment_rejection = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="wire_transfer_intention")]
		wire_transfer_intention = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="wire_transfer_rejection")]
		wire_transfer_rejection = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="other")]
		other = 39,
	}
	
	public class Inbound_ach_transfer_simulation_resultTransactionSourceCheck_deposit_acceptance
	{
		
		/// <summary>
		/// The account number printed on the check.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="account_number")]
		public string Account_number { get; set; }
		
		/// <summary>
		/// The amount to be deposited in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// An additional line of metadata printed on the check. This typically includes the check number for business checks.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="auxiliary_on_us")]
		public string Auxiliary_on_us { get; set; }
		
		/// <summary>
		/// The ID of the Check Deposit that was accepted.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="check_deposit_id")]
		public string Check_deposit_id { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public AccountCurrency Currency { get; set; }
		
		/// <summary>
		/// The routing number printed on the check.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="routing_number")]
		public string Routing_number { get; set; }
		
		/// <summary>
		/// The check serial number, if present, for consumer checks. For business checks, the serial number is usually in the `auxiliary_on_us` field.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="serial_number")]
		public string Serial_number { get; set; }
	}
	
	public class Inbound_ach_transfer_simulation_resultTransactionSourceCheck_deposit_return
	{
		
		/// <summary>
		/// The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The identifier of the Check Deposit that was returned.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="check_deposit_id")]
		public string Check_deposit_id { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public AccountCurrency Currency { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="return_reason")]
		public Check_depositDeposit_returnReturn_reason Return_reason { get; set; }
		
		/// <summary>
		/// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the check deposit was returned.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="returned_at")]
		public System.DateTimeOffset Returned_at { get; set; }
		
		/// <summary>
		/// The identifier of the transaction that reversed the original check deposit transaction.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transaction_id")]
		public string Transaction_id { get; set; }
	}
	
	public class Inbound_ach_transfer_simulation_resultTransactionSourceCheck_transfer_intention
	{
		
		/// <summary>
		/// The city of the check's destination.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="address_city")]
		public string Address_city { get; set; }
		
		/// <summary>
		/// The street address of the check's destination.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="address_line1")]
		public string Address_line1 { get; set; }
		
		/// <summary>
		/// The second line of the address of the check's destination.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="address_line2")]
		public string Address_line2 { get; set; }
		
		/// <summary>
		/// The state of the check's destination.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="address_state")]
		public string Address_state { get; set; }
		
		/// <summary>
		/// The postal code of the check's destination.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="address_zip")]
		public string Address_zip { get; set; }
		
		/// <summary>
		/// The transfer amount in USD cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the check's currency.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public AccountCurrency Currency { get; set; }
		
		/// <summary>
		/// The name that will be printed on the check.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="recipient_name")]
		public string Recipient_name { get; set; }
		
		/// <summary>
		/// The identifier of the Check Transfer with which this is associated.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transfer_id")]
		public string Transfer_id { get; set; }
	}
	
	public class Inbound_ach_transfer_simulation_resultTransactionSourceCheck_transfer_rejection
	{
		
		/// <summary>
		/// The identifier of the Check Transfer that led to this Transaction.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transfer_id")]
		public string Transfer_id { get; set; }
	}
	
	public class Inbound_ach_transfer_simulation_resultTransactionSourceCheck_transfer_return
	{
		
		/// <summary>
		/// If available, a document with additional information about the return.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="file_id")]
		public string File_id { get; set; }
		
		/// <summary>
		/// The reason why the check was returned.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public Check_transferReturn_detailsReason Reason { get; set; }
		
		/// <summary>
		/// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the check was returned.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="returned_at")]
		public System.DateTimeOffset Returned_at { get; set; }
		
		/// <summary>
		/// The identifier of the Transaction that was created to credit you for the returned check.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transaction_id")]
		public string Transaction_id { get; set; }
		
		/// <summary>
		/// The identifier of the returned Check Transfer.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transfer_id")]
		public string Transfer_id { get; set; }
	}
	
	public class Inbound_ach_transfer_simulation_resultTransactionSourceCheck_transfer_stop_payment_request
	{
		
		/// <summary>
		/// The time the stop-payment was requested.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="requested_at")]
		public System.DateTimeOffset Requested_at { get; set; }
		
		/// <summary>
		/// The transaction ID of the corresponding credit transaction.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transaction_id")]
		public string Transaction_id { get; set; }
		
		/// <summary>
		/// The ID of the check transfer that was stopped.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transfer_id")]
		public string Transfer_id { get; set; }
		
		/// <summary>
		/// A constant representing the object's type. For this resource it will always be `check_transfer_stop_payment_request`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public Check_transferStop_payment_requestType Type { get; set; }
	}
	
	public class Inbound_ach_transfer_simulation_resultTransactionSourceDispute_resolution
	{
		
		/// <summary>
		/// The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public AccountCurrency Currency { get; set; }
		
		/// <summary>
		/// The identifier of the Transaction that was disputed.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="disputed_transaction_id")]
		public string Disputed_transaction_id { get; set; }
	}
	
	public class Inbound_ach_transfer_simulation_resultTransactionSourceEmpyreal_cash_deposit
	{
		
		/// <summary>
		/// The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="bag_id")]
		public string Bag_id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="deposit_date")]
		public System.DateTimeOffset Deposit_date { get; set; }
	}
	
	public class Inbound_ach_transfer_simulation_resultTransactionSourceFee_payment
	{
		
		/// <summary>
		/// The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction currency.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public AccountCurrency Currency { get; set; }
	}
	
	public class Inbound_ach_transfer_simulation_resultTransactionSourceInbound_ach_transfer
	{
		
		/// <summary>
		/// The amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_company_descriptive_date")]
		public string Originator_company_descriptive_date { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_company_discretionary_data")]
		public string Originator_company_discretionary_data { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_company_entry_description")]
		public string Originator_company_entry_description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_company_id")]
		public string Originator_company_id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_company_name")]
		public string Originator_company_name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiver_id_number")]
		public string Receiver_id_number { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiver_name")]
		public string Receiver_name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="trace_number")]
		public string Trace_number { get; set; }
	}
	
	public class Inbound_ach_transfer_simulation_resultTransactionSourceInbound_check
	{
		
		/// <summary>
		/// The amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="check_front_image_file_id")]
		public string Check_front_image_file_id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="check_number")]
		public string Check_number { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="check_rear_image_file_id")]
		public string Check_rear_image_file_id { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public AccountCurrency Currency { get; set; }
	}
	
	public class Inbound_ach_transfer_simulation_resultTransactionSourceInbound_international_ach_transfer
	{
		
		/// <summary>
		/// The amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="destination_country_code")]
		public string Destination_country_code { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="destination_currency_code")]
		public string Destination_currency_code { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="foreign_exchange_indicator")]
		public string Foreign_exchange_indicator { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="foreign_exchange_reference")]
		public string Foreign_exchange_reference { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="foreign_exchange_reference_indicator")]
		public string Foreign_exchange_reference_indicator { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="foreign_payment_amount")]
		public int Foreign_payment_amount { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="foreign_trace_number")]
		public string Foreign_trace_number { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="international_transaction_type_code")]
		public string International_transaction_type_code { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originating_currency_code")]
		public string Originating_currency_code { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originating_depository_financial_institution_branch_country")]
		public string Originating_depository_financial_institution_branch_country { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originating_depository_financial_institution_id")]
		public string Originating_depository_financial_institution_id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originating_depository_financial_institution_id_qualifier")]
		public string Originating_depository_financial_institution_id_qualifier { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originating_depository_financial_institution_name")]
		public string Originating_depository_financial_institution_name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_city")]
		public string Originator_city { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_company_entry_description")]
		public string Originator_company_entry_description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_country")]
		public string Originator_country { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_identification")]
		public string Originator_identification { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_name")]
		public string Originator_name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_postal_code")]
		public string Originator_postal_code { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_state_or_province")]
		public string Originator_state_or_province { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_street_address")]
		public string Originator_street_address { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="payment_related_information")]
		public string Payment_related_information { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="payment_related_information2")]
		public string Payment_related_information2 { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiver_city")]
		public string Receiver_city { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiver_country")]
		public string Receiver_country { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiver_identification_number")]
		public string Receiver_identification_number { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiver_postal_code")]
		public string Receiver_postal_code { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiver_state_or_province")]
		public string Receiver_state_or_province { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiver_street_address")]
		public string Receiver_street_address { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiving_company_or_individual_name")]
		public string Receiving_company_or_individual_name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiving_depository_financial_institution_country")]
		public string Receiving_depository_financial_institution_country { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiving_depository_financial_institution_id")]
		public string Receiving_depository_financial_institution_id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiving_depository_financial_institution_id_qualifier")]
		public string Receiving_depository_financial_institution_id_qualifier { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiving_depository_financial_institution_name")]
		public string Receiving_depository_financial_institution_name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="trace_number")]
		public string Trace_number { get; set; }
	}
	
	public class Inbound_ach_transfer_simulation_resultTransactionSourceInbound_real_time_payments_transfer_confirmation
	{
		
		/// <summary>
		/// The amount in the minor unit of the transfer's currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The name the sender of the transfer specified as the recipient of the transfer.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="creditor_name")]
		public string Creditor_name { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code of the transfer's currency. This will always be "USD" for a Real Time Payments transfer.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public AccountCurrency Currency { get; set; }
		
		/// <summary>
		/// The account number of the account that sent the transfer.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="debtor_account_number")]
		public string Debtor_account_number { get; set; }
		
		/// <summary>
		/// The name provided by the sender of the transfer.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="debtor_name")]
		public string Debtor_name { get; set; }
		
		/// <summary>
		/// The routing number of the account that sent the transfer.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="debtor_routing_number")]
		public string Debtor_routing_number { get; set; }
		
		/// <summary>
		/// Additional information included with the transfer.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="remittance_information")]
		public string Remittance_information { get; set; }
		
		/// <summary>
		/// The Real Time Payments network identification of the transfer
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transaction_identification")]
		public string Transaction_identification { get; set; }
	}
	
	public class Inbound_ach_transfer_simulation_resultTransactionSourceInbound_wire_drawdown_payment
	{
		
		/// <summary>
		/// The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="beneficiary_address_line1")]
		public string Beneficiary_address_line1 { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="beneficiary_address_line2")]
		public string Beneficiary_address_line2 { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="beneficiary_address_line3")]
		public string Beneficiary_address_line3 { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="beneficiary_name")]
		public string Beneficiary_name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="beneficiary_reference")]
		public string Beneficiary_reference { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="input_message_accountability_data")]
		public string Input_message_accountability_data { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_address_line1")]
		public string Originator_address_line1 { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_address_line2")]
		public string Originator_address_line2 { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_address_line3")]
		public string Originator_address_line3 { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_name")]
		public string Originator_name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_to_beneficiary_information")]
		public string Originator_to_beneficiary_information { get; set; }
	}
	
	public class Inbound_ach_transfer_simulation_resultTransactionSourceInbound_wire_drawdown_payment_reversal
	{
		
		/// <summary>
		/// The amount that was reversed.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The description on the reversal message from Fedwire.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The Fedwire cycle date for the wire reversal.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="input_cycle_date")]
		public System.DateOnly Input_cycle_date { get; set; }
		
		/// <summary>
		/// The Fedwire transaction identifier.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="input_message_accountability_data")]
		public string Input_message_accountability_data { get; set; }
		
		/// <summary>
		/// The Fedwire sequence number.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="input_sequence_number")]
		public string Input_sequence_number { get; set; }
		
		/// <summary>
		/// The Fedwire input source identifier.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="input_source")]
		public string Input_source { get; set; }
		
		/// <summary>
		/// The Fedwire cycle date for the wire transfer that was reversed.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="previous_message_input_cycle_date")]
		public System.DateOnly Previous_message_input_cycle_date { get; set; }
		
		/// <summary>
		/// The Fedwire transaction identifier for the wire transfer that was reversed.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="previous_message_input_message_accountability_data")]
		public string Previous_message_input_message_accountability_data { get; set; }
		
		/// <summary>
		/// The Fedwire sequence number for the wire transfer that was reversed.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="previous_message_input_sequence_number")]
		public string Previous_message_input_sequence_number { get; set; }
		
		/// <summary>
		/// The Fedwire input source identifier for the wire transfer that was reversed.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="previous_message_input_source")]
		public string Previous_message_input_source { get; set; }
	}
	
	public class Inbound_ach_transfer_simulation_resultTransactionSourceInbound_wire_reversal
	{
		
		/// <summary>
		/// The amount that was reversed.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the reversal was created.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.DateTimeOffset Created_at { get; set; }
		
		/// <summary>
		/// The description on the reversal message from Fedwire.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Additional financial institution information included in the wire reversal.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="financial_institution_to_financial_institution_information")]
		public string Financial_institution_to_financial_institution_information { get; set; }
		
		/// <summary>
		/// The Fedwire cycle date for the wire reversal.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="input_cycle_date")]
		public System.DateOnly Input_cycle_date { get; set; }
		
		/// <summary>
		/// The Fedwire transaction identifier.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="input_message_accountability_data")]
		public string Input_message_accountability_data { get; set; }
		
		/// <summary>
		/// The Fedwire sequence number.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="input_sequence_number")]
		public string Input_sequence_number { get; set; }
		
		/// <summary>
		/// The Fedwire input source identifier.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="input_source")]
		public string Input_source { get; set; }
		
		/// <summary>
		/// The Fedwire cycle date for the wire transfer that was reversed.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="previous_message_input_cycle_date")]
		public System.DateOnly Previous_message_input_cycle_date { get; set; }
		
		/// <summary>
		/// The Fedwire transaction identifier for the wire transfer that was reversed.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="previous_message_input_message_accountability_data")]
		public string Previous_message_input_message_accountability_data { get; set; }
		
		/// <summary>
		/// The Fedwire sequence number for the wire transfer that was reversed.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="previous_message_input_sequence_number")]
		public string Previous_message_input_sequence_number { get; set; }
		
		/// <summary>
		/// The Fedwire input source identifier for the wire transfer that was reversed.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="previous_message_input_source")]
		public string Previous_message_input_source { get; set; }
		
		/// <summary>
		/// Information included in the wire reversal for the receiving financial institution.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiver_financial_institution_information")]
		public string Receiver_financial_institution_information { get; set; }
		
		/// <summary>
		/// The ID for the Transaction associated with the transfer reversal.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transaction_id")]
		public string Transaction_id { get; set; }
	}
	
	public class Inbound_ach_transfer_simulation_resultTransactionSourceInbound_wire_transfer
	{
		
		/// <summary>
		/// The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="beneficiary_address_line1")]
		public string Beneficiary_address_line1 { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="beneficiary_address_line2")]
		public string Beneficiary_address_line2 { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="beneficiary_address_line3")]
		public string Beneficiary_address_line3 { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="beneficiary_name")]
		public string Beneficiary_name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="beneficiary_reference")]
		public string Beneficiary_reference { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="input_message_accountability_data")]
		public string Input_message_accountability_data { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_address_line1")]
		public string Originator_address_line1 { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_address_line2")]
		public string Originator_address_line2 { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_address_line3")]
		public string Originator_address_line3 { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_name")]
		public string Originator_name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_to_beneficiary_information")]
		public string Originator_to_beneficiary_information { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_to_beneficiary_information_line1")]
		public string Originator_to_beneficiary_information_line1 { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_to_beneficiary_information_line2")]
		public string Originator_to_beneficiary_information_line2 { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_to_beneficiary_information_line3")]
		public string Originator_to_beneficiary_information_line3 { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_to_beneficiary_information_line4")]
		public string Originator_to_beneficiary_information_line4 { get; set; }
	}
	
	public class Inbound_ach_transfer_simulation_resultTransactionSourceInterest_payment
	{
		
		/// <summary>
		/// The account on which the interest was accrued.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="accrued_on_account_id")]
		public string Accrued_on_account_id { get; set; }
		
		/// <summary>
		/// The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction currency.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public AccountCurrency Currency { get; set; }
		
		/// <summary>
		/// The end of the period for which this transaction paid interest.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="period_end")]
		public System.DateTimeOffset Period_end { get; set; }
		
		/// <summary>
		/// The start of the period for which this transaction paid interest.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="period_start")]
		public System.DateTimeOffset Period_start { get; set; }
	}
	
	public class Inbound_ach_transfer_simulation_resultTransactionSourceInternal_source
	{
		
		/// <summary>
		/// The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction currency.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public AccountCurrency Currency { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public Inbound_ach_transfer_simulation_resultTransactionSourceInternal_sourceReason Reason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Inbound_ach_transfer_simulation_resultTransactionSourceInternal_sourceReason
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="bank_migration")]
		bank_migration = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cashback")]
		cashback = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="empyreal_adjustment")]
		empyreal_adjustment = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="error")]
		error = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="error_correction")]
		error_correction = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fees")]
		fees = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="interest")]
		interest = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="sample_funds")]
		sample_funds = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="sample_funds_return")]
		sample_funds_return = 8,
	}
	
	public class Inbound_ach_transfer_simulation_resultTransactionSourceReal_time_payments_transfer_acknowledgement
	{
		
		/// <summary>
		/// The transfer amount in USD cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The destination account number.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="destination_account_number")]
		public string Destination_account_number { get; set; }
		
		/// <summary>
		/// The American Bankers' Association (ABA) Routing Transit Number (RTN).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="destination_routing_number")]
		public string Destination_routing_number { get; set; }
		
		/// <summary>
		/// Unstructured information that will show on the recipient's bank statement.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="remittance_information")]
		public string Remittance_information { get; set; }
		
		/// <summary>
		/// The identifier of the Real Time Payments Transfer that led to this Transaction.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transfer_id")]
		public string Transfer_id { get; set; }
	}
	
	public class Inbound_ach_transfer_simulation_resultTransactionSourceSample_funds
	{
		
		/// <summary>
		/// Where the sample funds came from.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator")]
		public string Originator { get; set; }
	}
	
	public class Inbound_ach_transfer_simulation_resultTransactionSourceWire_drawdown_payment_intention
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="account_number")]
		public string Account_number { get; set; }
		
		/// <summary>
		/// The transfer amount in USD cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="message_to_recipient")]
		public string Message_to_recipient { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="routing_number")]
		public string Routing_number { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transfer_id")]
		public string Transfer_id { get; set; }
	}
	
	public class Inbound_ach_transfer_simulation_resultTransactionSourceWire_drawdown_payment_rejection
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transfer_id")]
		public string Transfer_id { get; set; }
	}
	
	public class Inbound_ach_transfer_simulation_resultTransactionSourceWire_transfer_intention
	{
		
		/// <summary>
		/// The destination account number.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="account_number")]
		public string Account_number { get; set; }
		
		/// <summary>
		/// The transfer amount in USD cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The message that will show on the recipient's bank statement.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="message_to_recipient")]
		public string Message_to_recipient { get; set; }
		
		/// <summary>
		/// The American Bankers' Association (ABA) Routing Transit Number (RTN).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="routing_number")]
		public string Routing_number { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transfer_id")]
		public string Transfer_id { get; set; }
	}
	
	public class Inbound_ach_transfer_simulation_resultTransactionSourceWire_transfer_rejection
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transfer_id")]
		public string Transfer_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Inbound_ach_transfer_simulation_resultTransactionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="transaction")]
		transaction = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Inbound_ach_transfer_simulation_resultType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="inbound_ach_transfer_simulation_result")]
		inbound_ach_transfer_simulation_result = 0,
	}
	
	/// <summary>
	/// The results of a Card Authorization simulation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Inbound_card_authorization_simulation_result
	{
		
		/// <summary>
		/// If the authorization attempt fails, this will contain the resulting [Declined Transaction](#declined-transactions) object. The Declined Transaction's `source` will be of `category: card_decline`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="declined_transaction")]
		public Inbound_card_authorization_simulation_resultDeclined_transaction Declined_transaction { get; set; }
		
		/// <summary>
		/// If the authorization attempt succeeds, this will contain the resulting Pending Transaction object. The Pending Transaction's `source` will be of `category: card_authorization`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pending_transaction")]
		public Inbound_card_authorization_simulation_resultPending_transaction Pending_transaction { get; set; }
		
		/// <summary>
		/// A constant representing the object's type. For this resource it will always be `inbound_card_authorization_simulation_result`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public Inbound_card_authorization_simulation_resultType Type { get; set; }
	}
	
	public class Inbound_card_authorization_simulation_resultDeclined_transaction
	{
		
		/// <summary>
		/// The identifier for the Account the Declined Transaction belongs to.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="account_id")]
		public string Account_id { get; set; }
		
		/// <summary>
		/// The Declined Transaction amount in the minor unit of its currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date on which the Transaction occured.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.DateTimeOffset Created_at { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the Declined Transaction's currency. This will match the currency on the Declined Transcation's Account.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public AccountCurrency Currency { get; set; }
		
		/// <summary>
		/// This is the description the vendor provides.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The Declined Transaction identifier.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The identifier for the route this Declined Transaction came through. Routes are things like cards and ACH details.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="route_id")]
		public string Route_id { get; set; }
		
		/// <summary>
		/// The type of the route this Declined Transaction came through.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="route_type")]
		public Declined_transactionRoute_type Route_type { get; set; }
		
		/// <summary>
		/// This is an object giving more details on the network-level event that caused the Declined Transaction. For example, for a card transaction this lists the merchant's industry and location. Note that for backwards compatibility reasons, additional undocumented keys may appear in this object. These should be treated as deprecated and will be removed in the future.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="source")]
		public Inbound_card_authorization_simulation_resultDeclined_transactionSource Source { get; set; }
		
		/// <summary>
		/// A constant representing the object's type. For this resource it will always be `declined_transaction`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public Declined_transactionType Type { get; set; }
	}
	
	public class Inbound_card_authorization_simulation_resultDeclined_transactionSource
	{
		
		/// <summary>
		/// A ACH Decline object. This field will be present in the JSON response if and only if `category` is equal to `ach_decline`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ach_decline")]
		public Inbound_card_authorization_simulation_resultDeclined_transactionSourceAch_decline Ach_decline { get; set; }
		
		/// <summary>
		/// A Card Decline object. This field will be present in the JSON response if and only if `category` is equal to `card_decline`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="card_decline")]
		public Inbound_card_authorization_simulation_resultDeclined_transactionSourceCard_decline Card_decline { get; set; }
		
		/// <summary>
		/// A Deprecated Card Decline object. This field will be present in the JSON response if and only if `category` is equal to `card_route_decline`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="card_route_decline")]
		public Inbound_card_authorization_simulation_resultDeclined_transactionSourceCard_route_decline Card_route_decline { get; set; }
		
		/// <summary>
		/// The type of decline that took place. We may add additional possible values for this enum over time; your application should be able to handle such additions gracefully.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="category")]
		public Declined_transactionSourceCategory Category { get; set; }
		
		/// <summary>
		/// A Check Decline object. This field will be present in the JSON response if and only if `category` is equal to `check_decline`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="check_decline")]
		public Inbound_card_authorization_simulation_resultDeclined_transactionSourceCheck_decline Check_decline { get; set; }
		
		/// <summary>
		/// A Inbound Real Time Payments Transfer Decline object. This field will be present in the JSON response if and only if `category` is equal to `inbound_real_time_payments_transfer_decline`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="inbound_real_time_payments_transfer_decline")]
		public Inbound_card_authorization_simulation_resultDeclined_transactionSourceInbound_real_time_payments_transfer_decline Inbound_real_time_payments_transfer_decline { get; set; }
		
		/// <summary>
		/// A International ACH Decline object. This field will be present in the JSON response if and only if `category` is equal to `international_ach_decline`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="international_ach_decline")]
		public Inbound_card_authorization_simulation_resultDeclined_transactionSourceInternational_ach_decline International_ach_decline { get; set; }
	}
	
	public class Inbound_card_authorization_simulation_resultDeclined_transactionSourceAch_decline
	{
		
		/// <summary>
		/// The declined amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_company_descriptive_date")]
		public string Originator_company_descriptive_date { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_company_discretionary_data")]
		public string Originator_company_discretionary_data { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_company_id")]
		public string Originator_company_id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_company_name")]
		public string Originator_company_name { get; set; }
		
		/// <summary>
		/// Why the ACH transfer was declined.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public Declined_transactionSourceAch_declineReason Reason { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiver_id_number")]
		public string Receiver_id_number { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiver_name")]
		public string Receiver_name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="trace_number")]
		public string Trace_number { get; set; }
	}
	
	public class Inbound_card_authorization_simulation_resultDeclined_transactionSourceCard_decline
	{
		
		/// <summary>
		/// The declined amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the destination account currency.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public AccountCurrency Currency { get; set; }
		
		/// <summary>
		/// If the authorization was attempted using a Digital Wallet Token (such as an Apple Pay purchase), the identifier of the token that was used.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="digital_wallet_token_id")]
		public string Digital_wallet_token_id { get; set; }
		
		/// <summary>
		/// The merchant identifier (commonly abbreviated as MID) of the merchant the card is transacting with.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_acceptor_id")]
		public string Merchant_acceptor_id { get; set; }
		
		/// <summary>
		/// The Merchant Category Code (commonly abbreviated as MCC) of the merchant the card is transacting with.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_category_code")]
		public string Merchant_category_code { get; set; }
		
		/// <summary>
		/// The city the merchant resides in.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_city")]
		public string Merchant_city { get; set; }
		
		/// <summary>
		/// The country the merchant resides in.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_country")]
		public string Merchant_country { get; set; }
		
		/// <summary>
		/// The merchant descriptor of the merchant the card is transacting with.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_descriptor")]
		public string Merchant_descriptor { get; set; }
		
		/// <summary>
		/// The state the merchant resides in.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_state")]
		public string Merchant_state { get; set; }
		
		/// <summary>
		/// The payment network used to process this card authorization
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="network")]
		public Declined_transactionSourceCard_declineNetwork Network { get; set; }
		
		/// <summary>
		/// Fields specific to the `network`
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="network_details")]
		public Inbound_card_authorization_simulation_resultDeclined_transactionSourceCard_declineNetwork_details Network_details { get; set; }
		
		/// <summary>
		/// The identifier of the Real-Time Decision sent to approve or decline this transaction.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="real_time_decision_id")]
		public string Real_time_decision_id { get; set; }
		
		/// <summary>
		/// Why the transaction was declined.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public Declined_transactionSourceCard_declineReason Reason { get; set; }
	}
	
	public class Inbound_card_authorization_simulation_resultDeclined_transactionSourceCard_declineNetwork_details
	{
		
		/// <summary>
		/// Fields specific to the `visa` network
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="visa")]
		public Inbound_card_authorization_simulation_resultDeclined_transactionSourceCard_declineNetwork_detailsVisa Visa { get; set; }
	}
	
	public class Inbound_card_authorization_simulation_resultDeclined_transactionSourceCard_declineNetwork_detailsVisa
	{
		
		/// <summary>
		/// For electronic commerce transactions, this identifies the level of security used in obtaining the customer's payment credential. For mail or telephone order transactions, identifies the type of mail or telephone order.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="electronic_commerce_indicator")]
		public Declined_transactionSourceCard_declineNetwork_detailsVisaElectronic_commerce_indicator Electronic_commerce_indicator { get; set; }
		
		/// <summary>
		/// The method used to enter the cardholder's primary account number and card expiration date
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="point_of_service_entry_mode")]
		public Declined_transactionSourceCard_declineNetwork_detailsVisaPoint_of_service_entry_mode Point_of_service_entry_mode { get; set; }
	}
	
	public class Inbound_card_authorization_simulation_resultDeclined_transactionSourceCard_route_decline
	{
		
		/// <summary>
		/// The declined amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the destination account currency.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public AccountCurrency Currency { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_acceptor_id")]
		public string Merchant_acceptor_id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_category_code")]
		public string Merchant_category_code { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_city")]
		public string Merchant_city { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_country")]
		public string Merchant_country { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_descriptor")]
		public string Merchant_descriptor { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_state")]
		public string Merchant_state { get; set; }
	}
	
	public class Inbound_card_authorization_simulation_resultDeclined_transactionSourceCheck_decline
	{
		
		/// <summary>
		/// The declined amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="auxiliary_on_us")]
		public string Auxiliary_on_us { get; set; }
		
		/// <summary>
		/// Why the check was declined.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public Declined_transactionSourceCheck_declineReason Reason { get; set; }
	}
	
	public class Inbound_card_authorization_simulation_resultDeclined_transactionSourceInbound_real_time_payments_transfer_decline
	{
		
		/// <summary>
		/// The declined amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The name the sender of the transfer specified as the recipient of the transfer.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="creditor_name")]
		public string Creditor_name { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code of the declined transfer's currency. This will always be "USD" for a Real Time Payments transfer.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public AccountCurrency Currency { get; set; }
		
		/// <summary>
		/// The account number of the account that sent the transfer.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="debtor_account_number")]
		public string Debtor_account_number { get; set; }
		
		/// <summary>
		/// The name provided by the sender of the transfer.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="debtor_name")]
		public string Debtor_name { get; set; }
		
		/// <summary>
		/// The routing number of the account that sent the transfer.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="debtor_routing_number")]
		public string Debtor_routing_number { get; set; }
		
		/// <summary>
		/// Why the transfer was declined.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public Declined_transactionSourceInbound_real_time_payments_transfer_declineReason Reason { get; set; }
		
		/// <summary>
		/// Additional information included with the transfer.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="remittance_information")]
		public string Remittance_information { get; set; }
		
		/// <summary>
		/// The Real Time Payments network identification of the declined transfer.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transaction_identification")]
		public string Transaction_identification { get; set; }
	}
	
	public class Inbound_card_authorization_simulation_resultDeclined_transactionSourceInternational_ach_decline
	{
		
		/// <summary>
		/// The declined amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="destination_country_code")]
		public string Destination_country_code { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="destination_currency_code")]
		public string Destination_currency_code { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="foreign_exchange_indicator")]
		public string Foreign_exchange_indicator { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="foreign_exchange_reference")]
		public string Foreign_exchange_reference { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="foreign_exchange_reference_indicator")]
		public string Foreign_exchange_reference_indicator { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="foreign_payment_amount")]
		public int Foreign_payment_amount { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="foreign_trace_number")]
		public string Foreign_trace_number { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="international_transaction_type_code")]
		public string International_transaction_type_code { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originating_currency_code")]
		public string Originating_currency_code { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originating_depository_financial_institution_branch_country")]
		public string Originating_depository_financial_institution_branch_country { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originating_depository_financial_institution_id")]
		public string Originating_depository_financial_institution_id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originating_depository_financial_institution_id_qualifier")]
		public string Originating_depository_financial_institution_id_qualifier { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originating_depository_financial_institution_name")]
		public string Originating_depository_financial_institution_name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_city")]
		public string Originator_city { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_company_entry_description")]
		public string Originator_company_entry_description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_country")]
		public string Originator_country { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_identification")]
		public string Originator_identification { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_name")]
		public string Originator_name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_postal_code")]
		public string Originator_postal_code { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_state_or_province")]
		public string Originator_state_or_province { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_street_address")]
		public string Originator_street_address { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="payment_related_information")]
		public string Payment_related_information { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="payment_related_information2")]
		public string Payment_related_information2 { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiver_city")]
		public string Receiver_city { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiver_country")]
		public string Receiver_country { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiver_identification_number")]
		public string Receiver_identification_number { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiver_postal_code")]
		public string Receiver_postal_code { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiver_state_or_province")]
		public string Receiver_state_or_province { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiver_street_address")]
		public string Receiver_street_address { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiving_company_or_individual_name")]
		public string Receiving_company_or_individual_name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiving_depository_financial_institution_country")]
		public string Receiving_depository_financial_institution_country { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiving_depository_financial_institution_id")]
		public string Receiving_depository_financial_institution_id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiving_depository_financial_institution_id_qualifier")]
		public string Receiving_depository_financial_institution_id_qualifier { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiving_depository_financial_institution_name")]
		public string Receiving_depository_financial_institution_name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="trace_number")]
		public string Trace_number { get; set; }
	}
	
	public class Inbound_card_authorization_simulation_resultPending_transaction
	{
		
		/// <summary>
		/// The identifier for the account this Pending Transaction belongs to.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="account_id")]
		public string Account_id { get; set; }
		
		/// <summary>
		/// The Pending Transaction amount in the minor unit of its currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date on which the Pending Transaction was completed.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="completed_at")]
		public System.Nullable<System.DateTimeOffset> Completed_at { get; set; }
		
		/// <summary>
		/// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date on which the Pending Transaction occured.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.DateTimeOffset Created_at { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the Pending Transaction's currency. This will match the currency on the Pending Transcation's Account.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public AccountCurrency Currency { get; set; }
		
		/// <summary>
		/// For a Pending Transaction related to a transfer, this is the description you provide. For a Pending Transaction related to a payment, this is the description the vendor provides.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The Pending Transaction identifier.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The identifier for the route this Pending Transaction came through. Routes are things like cards and ACH details.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="route_id")]
		public string Route_id { get; set; }
		
		/// <summary>
		/// The type of the route this Pending Transaction came through.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="route_type")]
		public Declined_transactionRoute_type Route_type { get; set; }
		
		/// <summary>
		/// This is an object giving more details on the network-level event that caused the Pending Transaction. For example, for a card transaction this lists the merchant's industry and location.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="source")]
		public Inbound_card_authorization_simulation_resultPending_transactionSource Source { get; set; }
		
		/// <summary>
		/// Whether the Pending Transaction has been confirmed and has an associated Transaction.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ExportStatus Status { get; set; }
		
		/// <summary>
		/// A constant representing the object's type. For this resource it will always be `pending_transaction`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public Inbound_card_authorization_simulation_resultPending_transactionType Type { get; set; }
	}
	
	public class Inbound_card_authorization_simulation_resultPending_transactionSource
	{
		
		/// <summary>
		/// A Account Transfer Instruction object. This field will be present in the JSON response if and only if `category` is equal to `account_transfer_instruction`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="account_transfer_instruction")]
		public Inbound_card_authorization_simulation_resultPending_transactionSourceAccount_transfer_instruction Account_transfer_instruction { get; set; }
		
		/// <summary>
		/// A ACH Transfer Instruction object. This field will be present in the JSON response if and only if `category` is equal to `ach_transfer_instruction`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ach_transfer_instruction")]
		public Inbound_card_authorization_simulation_resultPending_transactionSourceAch_transfer_instruction Ach_transfer_instruction { get; set; }
		
		/// <summary>
		/// A Card Authorization object. This field will be present in the JSON response if and only if `category` is equal to `card_authorization`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="card_authorization")]
		public Inbound_card_authorization_simulation_resultPending_transactionSourceCard_authorization Card_authorization { get; set; }
		
		/// <summary>
		/// A Deprecated Card Authorization object. This field will be present in the JSON response if and only if `category` is equal to `card_route_authorization`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="card_route_authorization")]
		public Inbound_card_authorization_simulation_resultPending_transactionSourceCard_route_authorization Card_route_authorization { get; set; }
		
		/// <summary>
		/// The type of transaction that took place. We may add additional possible values for this enum over time; your application should be able to handle such additions gracefully.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="category")]
		public Inbound_card_authorization_simulation_resultPending_transactionSourceCategory Category { get; set; }
		
		/// <summary>
		/// A Check Deposit Instruction object. This field will be present in the JSON response if and only if `category` is equal to `check_deposit_instruction`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="check_deposit_instruction")]
		public Inbound_card_authorization_simulation_resultPending_transactionSourceCheck_deposit_instruction Check_deposit_instruction { get; set; }
		
		/// <summary>
		/// A Check Transfer Instruction object. This field will be present in the JSON response if and only if `category` is equal to `check_transfer_instruction`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="check_transfer_instruction")]
		public Inbound_card_authorization_simulation_resultPending_transactionSourceCheck_transfer_instruction Check_transfer_instruction { get; set; }
		
		/// <summary>
		/// A Inbound Funds Hold object. This field will be present in the JSON response if and only if `category` is equal to `inbound_funds_hold`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="inbound_funds_hold")]
		public Inbound_card_authorization_simulation_resultPending_transactionSourceInbound_funds_hold Inbound_funds_hold { get; set; }
		
		/// <summary>
		/// A Real Time Payments Transfer Instruction object. This field will be present in the JSON response if and only if `category` is equal to `real_time_payments_transfer_instruction`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="real_time_payments_transfer_instruction")]
		public Inbound_card_authorization_simulation_resultPending_transactionSourceReal_time_payments_transfer_instruction Real_time_payments_transfer_instruction { get; set; }
		
		/// <summary>
		/// A Wire Drawdown Payment Instruction object. This field will be present in the JSON response if and only if `category` is equal to `wire_drawdown_payment_instruction`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="wire_drawdown_payment_instruction")]
		public Inbound_card_authorization_simulation_resultPending_transactionSourceWire_drawdown_payment_instruction Wire_drawdown_payment_instruction { get; set; }
		
		/// <summary>
		/// A Wire Transfer Instruction object. This field will be present in the JSON response if and only if `category` is equal to `wire_transfer_instruction`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="wire_transfer_instruction")]
		public Inbound_card_authorization_simulation_resultPending_transactionSourceWire_transfer_instruction Wire_transfer_instruction { get; set; }
	}
	
	public class Inbound_card_authorization_simulation_resultPending_transactionSourceAccount_transfer_instruction
	{
		
		/// <summary>
		/// The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the destination account currency.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public AccountCurrency Currency { get; set; }
		
		/// <summary>
		/// The identifier of the Account Transfer that led to this Pending Transaction.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transfer_id")]
		public string Transfer_id { get; set; }
	}
	
	public class Inbound_card_authorization_simulation_resultPending_transactionSourceAch_transfer_instruction
	{
		
		/// <summary>
		/// The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The identifier of the ACH Transfer that led to this Pending Transaction.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transfer_id")]
		public string Transfer_id { get; set; }
	}
	
	public class Inbound_card_authorization_simulation_resultPending_transactionSourceCard_authorization
	{
		
		/// <summary>
		/// The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public AccountCurrency Currency { get; set; }
		
		/// <summary>
		/// If the authorization was made via a Digital Wallet Token (such as an Apple Pay purchase), the identifier of the token that was used.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="digital_wallet_token_id")]
		public string Digital_wallet_token_id { get; set; }
		
		/// <summary>
		/// The Card Authorization identifier.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The merchant identifier (commonly abbreviated as MID) of the merchant the card is transacting with.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_acceptor_id")]
		public string Merchant_acceptor_id { get; set; }
		
		/// <summary>
		/// The Merchant Category Code (commonly abbreviated as MCC) of the merchant the card is transacting with.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_category_code")]
		public string Merchant_category_code { get; set; }
		
		/// <summary>
		/// The city the merchant resides in.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_city")]
		public string Merchant_city { get; set; }
		
		/// <summary>
		/// The country the merchant resides in.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_country")]
		public string Merchant_country { get; set; }
		
		/// <summary>
		/// The merchant descriptor of the merchant the card is transacting with.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_descriptor")]
		public string Merchant_descriptor { get; set; }
		
		/// <summary>
		/// The payment network used to process this card authorization
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="network")]
		public Declined_transactionSourceCard_declineNetwork Network { get; set; }
		
		/// <summary>
		/// Fields specific to the `network`
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="network_details")]
		public Inbound_card_authorization_simulation_resultPending_transactionSourceCard_authorizationNetwork_details Network_details { get; set; }
		
		/// <summary>
		/// The identifier of the Real-Time Decision sent to approve or decline this transaction.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="real_time_decision_id")]
		public string Real_time_decision_id { get; set; }
		
		/// <summary>
		/// A constant representing the object's type. For this resource it will always be `card_authorization`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public Inbound_card_authorization_simulation_resultPending_transactionSourceCard_authorizationType Type { get; set; }
	}
	
	public class Inbound_card_authorization_simulation_resultPending_transactionSourceCard_authorizationNetwork_details
	{
		
		/// <summary>
		/// Fields specific to the `visa` network
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="visa")]
		public Inbound_card_authorization_simulation_resultPending_transactionSourceCard_authorizationNetwork_detailsVisa Visa { get; set; }
	}
	
	public class Inbound_card_authorization_simulation_resultPending_transactionSourceCard_authorizationNetwork_detailsVisa
	{
		
		/// <summary>
		/// For electronic commerce transactions, this identifies the level of security used in obtaining the customer's payment credential. For mail or telephone order transactions, identifies the type of mail or telephone order.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="electronic_commerce_indicator")]
		public Declined_transactionSourceCard_declineNetwork_detailsVisaElectronic_commerce_indicator Electronic_commerce_indicator { get; set; }
		
		/// <summary>
		/// The method used to enter the cardholder's primary account number and card expiration date
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="point_of_service_entry_mode")]
		public Declined_transactionSourceCard_declineNetwork_detailsVisaPoint_of_service_entry_mode Point_of_service_entry_mode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Inbound_card_authorization_simulation_resultPending_transactionSourceCard_authorizationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="card_authorization")]
		card_authorization = 0,
	}
	
	public class Inbound_card_authorization_simulation_resultPending_transactionSourceCard_route_authorization
	{
		
		/// <summary>
		/// The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public AccountCurrency Currency { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_acceptor_id")]
		public string Merchant_acceptor_id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_category_code")]
		public string Merchant_category_code { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_city")]
		public string Merchant_city { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_country")]
		public string Merchant_country { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_descriptor")]
		public string Merchant_descriptor { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_state")]
		public string Merchant_state { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Inbound_card_authorization_simulation_resultPending_transactionSourceCategory
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="account_transfer_instruction")]
		account_transfer_instruction = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ach_transfer_instruction")]
		ach_transfer_instruction = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="card_authorization")]
		card_authorization = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="check_deposit_instruction")]
		check_deposit_instruction = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="check_transfer_instruction")]
		check_transfer_instruction = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="inbound_funds_hold")]
		inbound_funds_hold = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="card_route_authorization")]
		card_route_authorization = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="real_time_payments_transfer_instruction")]
		real_time_payments_transfer_instruction = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="wire_drawdown_payment_instruction")]
		wire_drawdown_payment_instruction = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="wire_transfer_instruction")]
		wire_transfer_instruction = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="other")]
		other = 10,
	}
	
	public class Inbound_card_authorization_simulation_resultPending_transactionSourceCheck_deposit_instruction
	{
		
		/// <summary>
		/// The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The identifier of the File containing the image of the back of the check that was deposited.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="back_image_file_id")]
		public string Back_image_file_id { get; set; }
		
		/// <summary>
		/// The identifier of the Check Deposit.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="check_deposit_id")]
		public string Check_deposit_id { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public AccountCurrency Currency { get; set; }
		
		/// <summary>
		/// The identifier of the File containing the image of the front of the check that was deposited.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="front_image_file_id")]
		public string Front_image_file_id { get; set; }
	}
	
	public class Inbound_card_authorization_simulation_resultPending_transactionSourceCheck_transfer_instruction
	{
		
		/// <summary>
		/// The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the check's currency.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public AccountCurrency Currency { get; set; }
		
		/// <summary>
		/// The identifier of the Check Transfer that led to this Pending Transaction.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transfer_id")]
		public string Transfer_id { get; set; }
	}
	
	public class Inbound_card_authorization_simulation_resultPending_transactionSourceInbound_funds_hold
	{
		
		/// <summary>
		/// The held amount in the minor unit of the account's currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// When the hold will be released automatically. Certain conditions may cause it to be released before this time.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="automatically_releases_at")]
		public System.DateTimeOffset Automatically_releases_at { get; set; }
		
		/// <summary>
		/// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time at which the hold was created.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.DateTimeOffset Created_at { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the hold's currency.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public AccountCurrency Currency { get; set; }
		
		/// <summary>
		/// The ID of the Transaction for which funds were held.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="held_transaction_id")]
		public string Held_transaction_id { get; set; }
		
		/// <summary>
		/// The ID of the Pending Transaction representing the held funds.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pending_transaction_id")]
		public string Pending_transaction_id { get; set; }
		
		/// <summary>
		/// When the hold was released (if it has been released).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="released_at")]
		public System.Nullable<System.DateTimeOffset> Released_at { get; set; }
		
		/// <summary>
		/// The status of the hold.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public Inbound_card_authorization_simulation_resultPending_transactionSourceInbound_funds_holdStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Inbound_card_authorization_simulation_resultPending_transactionSourceInbound_funds_holdStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="held")]
		held = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="complete")]
		complete = 1,
	}
	
	public class Inbound_card_authorization_simulation_resultPending_transactionSourceReal_time_payments_transfer_instruction
	{
		
		/// <summary>
		/// The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The identifier of the Real Time Payments Transfer that led to this Pending Transaction.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transfer_id")]
		public string Transfer_id { get; set; }
	}
	
	public class Inbound_card_authorization_simulation_resultPending_transactionSourceWire_drawdown_payment_instruction
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="account_number")]
		public string Account_number { get; set; }
		
		/// <summary>
		/// The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="message_to_recipient")]
		public string Message_to_recipient { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="routing_number")]
		public string Routing_number { get; set; }
	}
	
	public class Inbound_card_authorization_simulation_resultPending_transactionSourceWire_transfer_instruction
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="account_number")]
		public string Account_number { get; set; }
		
		/// <summary>
		/// The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="message_to_recipient")]
		public string Message_to_recipient { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="routing_number")]
		public string Routing_number { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transfer_id")]
		public string Transfer_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Inbound_card_authorization_simulation_resultPending_transactionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pending_transaction")]
		pending_transaction = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Inbound_card_authorization_simulation_resultType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="inbound_card_authorization_simulation_result")]
		inbound_card_authorization_simulation_result = 0,
	}
	
	/// <summary>
	/// The results of a Digital Wallet Token simulation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Inbound_digital_wallet_token_request_simulation_result
	{
		
		/// <summary>
		/// If the simulated tokenization attempt was declined, this field contains details as to why.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="decline_reason")]
		public System.Nullable<Inbound_digital_wallet_token_request_simulation_resultDecline_reason> Decline_reason { get; set; }
		
		/// <summary>
		/// If the simulated tokenization attempt was accepted, this field contains the id of the Digital Wallet Token that was created.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="digital_wallet_token_id")]
		public string Digital_wallet_token_id { get; set; }
		
		/// <summary>
		/// A constant representing the object's type. For this resource it will always be `inbound_digital_wallet_token_request_simulation_result`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public Inbound_digital_wallet_token_request_simulation_resultType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Inbound_digital_wallet_token_request_simulation_resultDecline_reason
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="card_not_active")]
		card_not_active = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="no_verification_method")]
		no_verification_method = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="webhook_timed_out")]
		webhook_timed_out = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="webhook_declined")]
		webhook_declined = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Inbound_digital_wallet_token_request_simulation_resultType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="inbound_digital_wallet_token_request_simulation_result")]
		inbound_digital_wallet_token_request_simulation_result = 0,
	}
	
	/// <summary>
	/// The results of an inbound Real Time Payments Transfer simulation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Inbound_real_time_payments_transfer_simulation_result
	{
		
		/// <summary>
		/// If the Real Time Payments Transfer attempt fails, this will contain the resulting [Declined Transaction](#declined-transactions) object. The Declined Transaction's `source` will be of `category: inbound_real_time_payments_transfer_decline`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="declined_transaction")]
		public Inbound_real_time_payments_transfer_simulation_resultDeclined_transaction Declined_transaction { get; set; }
		
		/// <summary>
		/// If the Real Time Payments Transfer attempt succeeds, this will contain the resulting [Transaction](#transactions) object. The Transaction's `source` will be of `category: inbound_real_time_payments_transfer_confirmation`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transaction")]
		public Inbound_real_time_payments_transfer_simulation_resultTransaction Transaction { get; set; }
		
		/// <summary>
		/// A constant representing the object's type. For this resource it will always be `inbound_real_time_payments_transfer_simulation_result`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public Inbound_real_time_payments_transfer_simulation_resultType Type { get; set; }
	}
	
	public class Inbound_real_time_payments_transfer_simulation_resultDeclined_transaction
	{
		
		/// <summary>
		/// The identifier for the Account the Declined Transaction belongs to.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="account_id")]
		public string Account_id { get; set; }
		
		/// <summary>
		/// The Declined Transaction amount in the minor unit of its currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date on which the Transaction occured.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.DateTimeOffset Created_at { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the Declined Transaction's currency. This will match the currency on the Declined Transcation's Account.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public AccountCurrency Currency { get; set; }
		
		/// <summary>
		/// This is the description the vendor provides.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The Declined Transaction identifier.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The identifier for the route this Declined Transaction came through. Routes are things like cards and ACH details.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="route_id")]
		public string Route_id { get; set; }
		
		/// <summary>
		/// The type of the route this Declined Transaction came through.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="route_type")]
		public Declined_transactionRoute_type Route_type { get; set; }
		
		/// <summary>
		/// This is an object giving more details on the network-level event that caused the Declined Transaction. For example, for a card transaction this lists the merchant's industry and location. Note that for backwards compatibility reasons, additional undocumented keys may appear in this object. These should be treated as deprecated and will be removed in the future.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="source")]
		public Inbound_real_time_payments_transfer_simulation_resultDeclined_transactionSource Source { get; set; }
		
		/// <summary>
		/// A constant representing the object's type. For this resource it will always be `declined_transaction`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public Declined_transactionType Type { get; set; }
	}
	
	public class Inbound_real_time_payments_transfer_simulation_resultDeclined_transactionSource
	{
		
		/// <summary>
		/// A ACH Decline object. This field will be present in the JSON response if and only if `category` is equal to `ach_decline`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ach_decline")]
		public Inbound_real_time_payments_transfer_simulation_resultDeclined_transactionSourceAch_decline Ach_decline { get; set; }
		
		/// <summary>
		/// A Card Decline object. This field will be present in the JSON response if and only if `category` is equal to `card_decline`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="card_decline")]
		public Inbound_real_time_payments_transfer_simulation_resultDeclined_transactionSourceCard_decline Card_decline { get; set; }
		
		/// <summary>
		/// A Deprecated Card Decline object. This field will be present in the JSON response if and only if `category` is equal to `card_route_decline`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="card_route_decline")]
		public Inbound_real_time_payments_transfer_simulation_resultDeclined_transactionSourceCard_route_decline Card_route_decline { get; set; }
		
		/// <summary>
		/// The type of decline that took place. We may add additional possible values for this enum over time; your application should be able to handle such additions gracefully.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="category")]
		public Declined_transactionSourceCategory Category { get; set; }
		
		/// <summary>
		/// A Check Decline object. This field will be present in the JSON response if and only if `category` is equal to `check_decline`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="check_decline")]
		public Inbound_real_time_payments_transfer_simulation_resultDeclined_transactionSourceCheck_decline Check_decline { get; set; }
		
		/// <summary>
		/// A Inbound Real Time Payments Transfer Decline object. This field will be present in the JSON response if and only if `category` is equal to `inbound_real_time_payments_transfer_decline`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="inbound_real_time_payments_transfer_decline")]
		public Inbound_real_time_payments_transfer_simulation_resultDeclined_transactionSourceInbound_real_time_payments_transfer_decline Inbound_real_time_payments_transfer_decline { get; set; }
		
		/// <summary>
		/// A International ACH Decline object. This field will be present in the JSON response if and only if `category` is equal to `international_ach_decline`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="international_ach_decline")]
		public Inbound_real_time_payments_transfer_simulation_resultDeclined_transactionSourceInternational_ach_decline International_ach_decline { get; set; }
	}
	
	public class Inbound_real_time_payments_transfer_simulation_resultDeclined_transactionSourceAch_decline
	{
		
		/// <summary>
		/// The declined amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_company_descriptive_date")]
		public string Originator_company_descriptive_date { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_company_discretionary_data")]
		public string Originator_company_discretionary_data { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_company_id")]
		public string Originator_company_id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_company_name")]
		public string Originator_company_name { get; set; }
		
		/// <summary>
		/// Why the ACH transfer was declined.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public Declined_transactionSourceAch_declineReason Reason { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiver_id_number")]
		public string Receiver_id_number { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiver_name")]
		public string Receiver_name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="trace_number")]
		public string Trace_number { get; set; }
	}
	
	public class Inbound_real_time_payments_transfer_simulation_resultDeclined_transactionSourceCard_decline
	{
		
		/// <summary>
		/// The declined amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the destination account currency.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public AccountCurrency Currency { get; set; }
		
		/// <summary>
		/// If the authorization was attempted using a Digital Wallet Token (such as an Apple Pay purchase), the identifier of the token that was used.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="digital_wallet_token_id")]
		public string Digital_wallet_token_id { get; set; }
		
		/// <summary>
		/// The merchant identifier (commonly abbreviated as MID) of the merchant the card is transacting with.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_acceptor_id")]
		public string Merchant_acceptor_id { get; set; }
		
		/// <summary>
		/// The Merchant Category Code (commonly abbreviated as MCC) of the merchant the card is transacting with.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_category_code")]
		public string Merchant_category_code { get; set; }
		
		/// <summary>
		/// The city the merchant resides in.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_city")]
		public string Merchant_city { get; set; }
		
		/// <summary>
		/// The country the merchant resides in.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_country")]
		public string Merchant_country { get; set; }
		
		/// <summary>
		/// The merchant descriptor of the merchant the card is transacting with.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_descriptor")]
		public string Merchant_descriptor { get; set; }
		
		/// <summary>
		/// The state the merchant resides in.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_state")]
		public string Merchant_state { get; set; }
		
		/// <summary>
		/// The payment network used to process this card authorization
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="network")]
		public Declined_transactionSourceCard_declineNetwork Network { get; set; }
		
		/// <summary>
		/// Fields specific to the `network`
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="network_details")]
		public Inbound_real_time_payments_transfer_simulation_resultDeclined_transactionSourceCard_declineNetwork_details Network_details { get; set; }
		
		/// <summary>
		/// The identifier of the Real-Time Decision sent to approve or decline this transaction.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="real_time_decision_id")]
		public string Real_time_decision_id { get; set; }
		
		/// <summary>
		/// Why the transaction was declined.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public Declined_transactionSourceCard_declineReason Reason { get; set; }
	}
	
	public class Inbound_real_time_payments_transfer_simulation_resultDeclined_transactionSourceCard_declineNetwork_details
	{
		
		/// <summary>
		/// Fields specific to the `visa` network
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="visa")]
		public Inbound_real_time_payments_transfer_simulation_resultDeclined_transactionSourceCard_declineNetwork_detailsVisa Visa { get; set; }
	}
	
	public class Inbound_real_time_payments_transfer_simulation_resultDeclined_transactionSourceCard_declineNetwork_detailsVisa
	{
		
		/// <summary>
		/// For electronic commerce transactions, this identifies the level of security used in obtaining the customer's payment credential. For mail or telephone order transactions, identifies the type of mail or telephone order.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="electronic_commerce_indicator")]
		public Declined_transactionSourceCard_declineNetwork_detailsVisaElectronic_commerce_indicator Electronic_commerce_indicator { get; set; }
		
		/// <summary>
		/// The method used to enter the cardholder's primary account number and card expiration date
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="point_of_service_entry_mode")]
		public Declined_transactionSourceCard_declineNetwork_detailsVisaPoint_of_service_entry_mode Point_of_service_entry_mode { get; set; }
	}
	
	public class Inbound_real_time_payments_transfer_simulation_resultDeclined_transactionSourceCard_route_decline
	{
		
		/// <summary>
		/// The declined amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the destination account currency.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public AccountCurrency Currency { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_acceptor_id")]
		public string Merchant_acceptor_id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_category_code")]
		public string Merchant_category_code { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_city")]
		public string Merchant_city { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_country")]
		public string Merchant_country { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_descriptor")]
		public string Merchant_descriptor { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_state")]
		public string Merchant_state { get; set; }
	}
	
	public class Inbound_real_time_payments_transfer_simulation_resultDeclined_transactionSourceCheck_decline
	{
		
		/// <summary>
		/// The declined amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="auxiliary_on_us")]
		public string Auxiliary_on_us { get; set; }
		
		/// <summary>
		/// Why the check was declined.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public Declined_transactionSourceCheck_declineReason Reason { get; set; }
	}
	
	public class Inbound_real_time_payments_transfer_simulation_resultDeclined_transactionSourceInbound_real_time_payments_transfer_decline
	{
		
		/// <summary>
		/// The declined amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The name the sender of the transfer specified as the recipient of the transfer.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="creditor_name")]
		public string Creditor_name { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code of the declined transfer's currency. This will always be "USD" for a Real Time Payments transfer.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public AccountCurrency Currency { get; set; }
		
		/// <summary>
		/// The account number of the account that sent the transfer.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="debtor_account_number")]
		public string Debtor_account_number { get; set; }
		
		/// <summary>
		/// The name provided by the sender of the transfer.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="debtor_name")]
		public string Debtor_name { get; set; }
		
		/// <summary>
		/// The routing number of the account that sent the transfer.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="debtor_routing_number")]
		public string Debtor_routing_number { get; set; }
		
		/// <summary>
		/// Why the transfer was declined.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public Declined_transactionSourceInbound_real_time_payments_transfer_declineReason Reason { get; set; }
		
		/// <summary>
		/// Additional information included with the transfer.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="remittance_information")]
		public string Remittance_information { get; set; }
		
		/// <summary>
		/// The Real Time Payments network identification of the declined transfer.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transaction_identification")]
		public string Transaction_identification { get; set; }
	}
	
	public class Inbound_real_time_payments_transfer_simulation_resultDeclined_transactionSourceInternational_ach_decline
	{
		
		/// <summary>
		/// The declined amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="destination_country_code")]
		public string Destination_country_code { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="destination_currency_code")]
		public string Destination_currency_code { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="foreign_exchange_indicator")]
		public string Foreign_exchange_indicator { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="foreign_exchange_reference")]
		public string Foreign_exchange_reference { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="foreign_exchange_reference_indicator")]
		public string Foreign_exchange_reference_indicator { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="foreign_payment_amount")]
		public int Foreign_payment_amount { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="foreign_trace_number")]
		public string Foreign_trace_number { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="international_transaction_type_code")]
		public string International_transaction_type_code { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originating_currency_code")]
		public string Originating_currency_code { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originating_depository_financial_institution_branch_country")]
		public string Originating_depository_financial_institution_branch_country { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originating_depository_financial_institution_id")]
		public string Originating_depository_financial_institution_id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originating_depository_financial_institution_id_qualifier")]
		public string Originating_depository_financial_institution_id_qualifier { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originating_depository_financial_institution_name")]
		public string Originating_depository_financial_institution_name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_city")]
		public string Originator_city { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_company_entry_description")]
		public string Originator_company_entry_description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_country")]
		public string Originator_country { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_identification")]
		public string Originator_identification { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_name")]
		public string Originator_name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_postal_code")]
		public string Originator_postal_code { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_state_or_province")]
		public string Originator_state_or_province { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_street_address")]
		public string Originator_street_address { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="payment_related_information")]
		public string Payment_related_information { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="payment_related_information2")]
		public string Payment_related_information2 { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiver_city")]
		public string Receiver_city { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiver_country")]
		public string Receiver_country { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiver_identification_number")]
		public string Receiver_identification_number { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiver_postal_code")]
		public string Receiver_postal_code { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiver_state_or_province")]
		public string Receiver_state_or_province { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiver_street_address")]
		public string Receiver_street_address { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiving_company_or_individual_name")]
		public string Receiving_company_or_individual_name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiving_depository_financial_institution_country")]
		public string Receiving_depository_financial_institution_country { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiving_depository_financial_institution_id")]
		public string Receiving_depository_financial_institution_id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiving_depository_financial_institution_id_qualifier")]
		public string Receiving_depository_financial_institution_id_qualifier { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiving_depository_financial_institution_name")]
		public string Receiving_depository_financial_institution_name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="trace_number")]
		public string Trace_number { get; set; }
	}
	
	public class Inbound_real_time_payments_transfer_simulation_resultTransaction
	{
		
		/// <summary>
		/// The identifier for the Account the Transaction belongs to.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="account_id")]
		public string Account_id { get; set; }
		
		/// <summary>
		/// The Transaction amount in the minor unit of its currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date on which the Transaction occured.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.DateTimeOffset Created_at { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the Transaction's currency. This will match the currency on the Transcation's Account.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public AccountCurrency Currency { get; set; }
		
		/// <summary>
		/// For a Transaction related to a transfer, this is the description you provide. For a Transaction related to a payment, this is the description the vendor provides.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The Transaction identifier.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The identifier for the route this Transaction came through. Routes are things like cards and ACH details.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="route_id")]
		public string Route_id { get; set; }
		
		/// <summary>
		/// The type of the route this Transaction came through.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="route_type")]
		public Declined_transactionRoute_type Route_type { get; set; }
		
		/// <summary>
		/// This is an object giving more details on the network-level event that caused the Transaction. Note that for backwards compatibility reasons, additional undocumented keys may appear in this object. These should be treated as deprecated and will be removed in the future.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="source")]
		public Inbound_real_time_payments_transfer_simulation_resultTransactionSource Source { get; set; }
		
		/// <summary>
		/// A constant representing the object's type. For this resource it will always be `transaction`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public Inbound_ach_transfer_simulation_resultTransactionType Type { get; set; }
	}
	
	public class Inbound_real_time_payments_transfer_simulation_resultTransactionSource
	{
		
		/// <summary>
		/// A Account Transfer Intention object. This field will be present in the JSON response if and only if `category` is equal to `account_transfer_intention`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="account_transfer_intention")]
		public Inbound_real_time_payments_transfer_simulation_resultTransactionSourceAccount_transfer_intention Account_transfer_intention { get; set; }
		
		/// <summary>
		/// A ACH Check Conversion object. This field will be present in the JSON response if and only if `category` is equal to `ach_check_conversion`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ach_check_conversion")]
		public Inbound_real_time_payments_transfer_simulation_resultTransactionSourceAch_check_conversion Ach_check_conversion { get; set; }
		
		/// <summary>
		/// A ACH Check Conversion Return object. This field will be present in the JSON response if and only if `category` is equal to `ach_check_conversion_return`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ach_check_conversion_return")]
		public Inbound_real_time_payments_transfer_simulation_resultTransactionSourceAch_check_conversion_return Ach_check_conversion_return { get; set; }
		
		/// <summary>
		/// A ACH Transfer Intention object. This field will be present in the JSON response if and only if `category` is equal to `ach_transfer_intention`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ach_transfer_intention")]
		public Inbound_real_time_payments_transfer_simulation_resultTransactionSourceAch_transfer_intention Ach_transfer_intention { get; set; }
		
		/// <summary>
		/// A ACH Transfer Rejection object. This field will be present in the JSON response if and only if `category` is equal to `ach_transfer_rejection`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ach_transfer_rejection")]
		public Inbound_real_time_payments_transfer_simulation_resultTransactionSourceAch_transfer_rejection Ach_transfer_rejection { get; set; }
		
		/// <summary>
		/// A ACH Transfer Return object. This field will be present in the JSON response if and only if `category` is equal to `ach_transfer_return`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ach_transfer_return")]
		public Inbound_real_time_payments_transfer_simulation_resultTransactionSourceAch_transfer_return Ach_transfer_return { get; set; }
		
		/// <summary>
		/// A Card Dispute Acceptance object. This field will be present in the JSON response if and only if `category` is equal to `card_dispute_acceptance`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="card_dispute_acceptance")]
		public Inbound_real_time_payments_transfer_simulation_resultTransactionSourceCard_dispute_acceptance Card_dispute_acceptance { get; set; }
		
		/// <summary>
		/// A Card Refund object. This field will be present in the JSON response if and only if `category` is equal to `card_refund`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="card_refund")]
		public Inbound_real_time_payments_transfer_simulation_resultTransactionSourceCard_refund Card_refund { get; set; }
		
		/// <summary>
		/// A Card Revenue Payment object. This field will be present in the JSON response if and only if `category` is equal to `card_revenue_payment`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="card_revenue_payment")]
		public Inbound_real_time_payments_transfer_simulation_resultTransactionSourceCard_revenue_payment Card_revenue_payment { get; set; }
		
		/// <summary>
		/// A Deprecated Card Refund object. This field will be present in the JSON response if and only if `category` is equal to `card_route_refund`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="card_route_refund")]
		public Inbound_real_time_payments_transfer_simulation_resultTransactionSourceCard_route_refund Card_route_refund { get; set; }
		
		/// <summary>
		/// A Deprecated Card Settlement object. This field will be present in the JSON response if and only if `category` is equal to `card_route_settlement`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="card_route_settlement")]
		public Inbound_real_time_payments_transfer_simulation_resultTransactionSourceCard_route_settlement Card_route_settlement { get; set; }
		
		/// <summary>
		/// A Card Settlement object. This field will be present in the JSON response if and only if `category` is equal to `card_settlement`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="card_settlement")]
		public Inbound_real_time_payments_transfer_simulation_resultTransactionSourceCard_settlement Card_settlement { get; set; }
		
		/// <summary>
		/// The type of transaction that took place. We may add additional possible values for this enum over time; your application should be able to handle such additions gracefully.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="category")]
		public Inbound_ach_transfer_simulation_resultTransactionSourceCategory Category { get; set; }
		
		/// <summary>
		/// A Check Deposit Acceptance object. This field will be present in the JSON response if and only if `category` is equal to `check_deposit_acceptance`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="check_deposit_acceptance")]
		public Inbound_real_time_payments_transfer_simulation_resultTransactionSourceCheck_deposit_acceptance Check_deposit_acceptance { get; set; }
		
		/// <summary>
		/// A Check Deposit Return object. This field will be present in the JSON response if and only if `category` is equal to `check_deposit_return`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="check_deposit_return")]
		public Inbound_real_time_payments_transfer_simulation_resultTransactionSourceCheck_deposit_return Check_deposit_return { get; set; }
		
		/// <summary>
		/// A Check Transfer Intention object. This field will be present in the JSON response if and only if `category` is equal to `check_transfer_intention`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="check_transfer_intention")]
		public Inbound_real_time_payments_transfer_simulation_resultTransactionSourceCheck_transfer_intention Check_transfer_intention { get; set; }
		
		/// <summary>
		/// A Check Transfer Rejection object. This field will be present in the JSON response if and only if `category` is equal to `check_transfer_rejection`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="check_transfer_rejection")]
		public Inbound_real_time_payments_transfer_simulation_resultTransactionSourceCheck_transfer_rejection Check_transfer_rejection { get; set; }
		
		/// <summary>
		/// A Check Transfer Return object. This field will be present in the JSON response if and only if `category` is equal to `check_transfer_return`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="check_transfer_return")]
		public Inbound_real_time_payments_transfer_simulation_resultTransactionSourceCheck_transfer_return Check_transfer_return { get; set; }
		
		/// <summary>
		/// A Check Transfer Stop Payment Request object. This field will be present in the JSON response if and only if `category` is equal to `check_transfer_stop_payment_request`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="check_transfer_stop_payment_request")]
		public Inbound_real_time_payments_transfer_simulation_resultTransactionSourceCheck_transfer_stop_payment_request Check_transfer_stop_payment_request { get; set; }
		
		/// <summary>
		/// A Dispute Resolution object. This field will be present in the JSON response if and only if `category` is equal to `dispute_resolution`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dispute_resolution")]
		public Inbound_real_time_payments_transfer_simulation_resultTransactionSourceDispute_resolution Dispute_resolution { get; set; }
		
		/// <summary>
		/// A Empyreal Cash Deposit object. This field will be present in the JSON response if and only if `category` is equal to `empyreal_cash_deposit`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="empyreal_cash_deposit")]
		public Inbound_real_time_payments_transfer_simulation_resultTransactionSourceEmpyreal_cash_deposit Empyreal_cash_deposit { get; set; }
		
		/// <summary>
		/// A Fee Payment object. This field will be present in the JSON response if and only if `category` is equal to `fee_payment`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fee_payment")]
		public Inbound_real_time_payments_transfer_simulation_resultTransactionSourceFee_payment Fee_payment { get; set; }
		
		/// <summary>
		/// A Inbound ACH Transfer object. This field will be present in the JSON response if and only if `category` is equal to `inbound_ach_transfer`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="inbound_ach_transfer")]
		public Inbound_real_time_payments_transfer_simulation_resultTransactionSourceInbound_ach_transfer Inbound_ach_transfer { get; set; }
		
		/// <summary>
		/// A Inbound Check object. This field will be present in the JSON response if and only if `category` is equal to `inbound_check`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="inbound_check")]
		public Inbound_real_time_payments_transfer_simulation_resultTransactionSourceInbound_check Inbound_check { get; set; }
		
		/// <summary>
		/// A Inbound International ACH Transfer object. This field will be present in the JSON response if and only if `category` is equal to `inbound_international_ach_transfer`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="inbound_international_ach_transfer")]
		public Inbound_real_time_payments_transfer_simulation_resultTransactionSourceInbound_international_ach_transfer Inbound_international_ach_transfer { get; set; }
		
		/// <summary>
		/// A Inbound Real Time Payments Transfer Confirmation object. This field will be present in the JSON response if and only if `category` is equal to `inbound_real_time_payments_transfer_confirmation`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="inbound_real_time_payments_transfer_confirmation")]
		public Inbound_real_time_payments_transfer_simulation_resultTransactionSourceInbound_real_time_payments_transfer_confirmation Inbound_real_time_payments_transfer_confirmation { get; set; }
		
		/// <summary>
		/// A Inbound Wire Drawdown Payment object. This field will be present in the JSON response if and only if `category` is equal to `inbound_wire_drawdown_payment`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="inbound_wire_drawdown_payment")]
		public Inbound_real_time_payments_transfer_simulation_resultTransactionSourceInbound_wire_drawdown_payment Inbound_wire_drawdown_payment { get; set; }
		
		/// <summary>
		/// A Inbound Wire Drawdown Payment Reversal object. This field will be present in the JSON response if and only if `category` is equal to `inbound_wire_drawdown_payment_reversal`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="inbound_wire_drawdown_payment_reversal")]
		public Inbound_real_time_payments_transfer_simulation_resultTransactionSourceInbound_wire_drawdown_payment_reversal Inbound_wire_drawdown_payment_reversal { get; set; }
		
		/// <summary>
		/// A Inbound Wire Reversal object. This field will be present in the JSON response if and only if `category` is equal to `inbound_wire_reversal`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="inbound_wire_reversal")]
		public Inbound_real_time_payments_transfer_simulation_resultTransactionSourceInbound_wire_reversal Inbound_wire_reversal { get; set; }
		
		/// <summary>
		/// A Inbound Wire Transfer object. This field will be present in the JSON response if and only if `category` is equal to `inbound_wire_transfer`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="inbound_wire_transfer")]
		public Inbound_real_time_payments_transfer_simulation_resultTransactionSourceInbound_wire_transfer Inbound_wire_transfer { get; set; }
		
		/// <summary>
		/// A Interest Payment object. This field will be present in the JSON response if and only if `category` is equal to `interest_payment`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="interest_payment")]
		public Inbound_real_time_payments_transfer_simulation_resultTransactionSourceInterest_payment Interest_payment { get; set; }
		
		/// <summary>
		/// A Internal Source object. This field will be present in the JSON response if and only if `category` is equal to `internal_source`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="internal_source")]
		public Inbound_real_time_payments_transfer_simulation_resultTransactionSourceInternal_source Internal_source { get; set; }
		
		/// <summary>
		/// A Real Time Payments Transfer Acknowledgement object. This field will be present in the JSON response if and only if `category` is equal to `real_time_payments_transfer_acknowledgement`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="real_time_payments_transfer_acknowledgement")]
		public Inbound_real_time_payments_transfer_simulation_resultTransactionSourceReal_time_payments_transfer_acknowledgement Real_time_payments_transfer_acknowledgement { get; set; }
		
		/// <summary>
		/// A Sample Funds object. This field will be present in the JSON response if and only if `category` is equal to `sample_funds`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sample_funds")]
		public Inbound_real_time_payments_transfer_simulation_resultTransactionSourceSample_funds Sample_funds { get; set; }
		
		/// <summary>
		/// A Wire Drawdown Payment Intention object. This field will be present in the JSON response if and only if `category` is equal to `wire_drawdown_payment_intention`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="wire_drawdown_payment_intention")]
		public Inbound_real_time_payments_transfer_simulation_resultTransactionSourceWire_drawdown_payment_intention Wire_drawdown_payment_intention { get; set; }
		
		/// <summary>
		/// A Wire Drawdown Payment Rejection object. This field will be present in the JSON response if and only if `category` is equal to `wire_drawdown_payment_rejection`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="wire_drawdown_payment_rejection")]
		public Inbound_real_time_payments_transfer_simulation_resultTransactionSourceWire_drawdown_payment_rejection Wire_drawdown_payment_rejection { get; set; }
		
		/// <summary>
		/// A Wire Transfer Intention object. This field will be present in the JSON response if and only if `category` is equal to `wire_transfer_intention`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="wire_transfer_intention")]
		public Inbound_real_time_payments_transfer_simulation_resultTransactionSourceWire_transfer_intention Wire_transfer_intention { get; set; }
		
		/// <summary>
		/// A Wire Transfer Rejection object. This field will be present in the JSON response if and only if `category` is equal to `wire_transfer_rejection`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="wire_transfer_rejection")]
		public Inbound_real_time_payments_transfer_simulation_resultTransactionSourceWire_transfer_rejection Wire_transfer_rejection { get; set; }
	}
	
	public class Inbound_real_time_payments_transfer_simulation_resultTransactionSourceAccount_transfer_intention
	{
		
		/// <summary>
		/// The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the destination account currency.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public AccountCurrency Currency { get; set; }
		
		/// <summary>
		/// The description you chose to give the transfer.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The identifier of the Account to where the Account Transfer was sent.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="destination_account_id")]
		public string Destination_account_id { get; set; }
		
		/// <summary>
		/// The identifier of the Account from where the Account Transfer was sent.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="source_account_id")]
		public string Source_account_id { get; set; }
		
		/// <summary>
		/// The identifier of the Account Transfer that led to this Pending Transaction.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transfer_id")]
		public string Transfer_id { get; set; }
	}
	
	public class Inbound_real_time_payments_transfer_simulation_resultTransactionSourceAch_check_conversion
	{
		
		/// <summary>
		/// The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The identifier of the File containing an image of the returned check.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="file_id")]
		public string File_id { get; set; }
	}
	
	public class Inbound_real_time_payments_transfer_simulation_resultTransactionSourceAch_check_conversion_return
	{
		
		/// <summary>
		/// The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// Why the transfer was returned.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="return_reason_code")]
		public string Return_reason_code { get; set; }
	}
	
	public class Inbound_real_time_payments_transfer_simulation_resultTransactionSourceAch_transfer_intention
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="account_number")]
		public string Account_number { get; set; }
		
		/// <summary>
		/// The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="routing_number")]
		public string Routing_number { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="statement_descriptor")]
		public string Statement_descriptor { get; set; }
		
		/// <summary>
		/// The identifier of the ACH Transfer that led to this Transaction.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transfer_id")]
		public string Transfer_id { get; set; }
	}
	
	public class Inbound_real_time_payments_transfer_simulation_resultTransactionSourceAch_transfer_rejection
	{
		
		/// <summary>
		/// The identifier of the ACH Transfer that led to this Transaction.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transfer_id")]
		public string Transfer_id { get; set; }
	}
	
	public class Inbound_real_time_payments_transfer_simulation_resultTransactionSourceAch_transfer_return
	{
		
		/// <summary>
		/// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was created.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.DateTimeOffset Created_at { get; set; }
		
		/// <summary>
		/// Why the ACH Transfer was returned.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="return_reason_code")]
		public Ach_transferReturnReturn_reason_code Return_reason_code { get; set; }
		
		/// <summary>
		/// The identifier of the Tranasaction associated with this return.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transaction_id")]
		public string Transaction_id { get; set; }
		
		/// <summary>
		/// The identifier of the ACH Transfer associated with this return.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transfer_id")]
		public string Transfer_id { get; set; }
	}
	
	public class Inbound_real_time_payments_transfer_simulation_resultTransactionSourceCard_dispute_acceptance
	{
		
		/// <summary>
		/// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Card Dispute was accepted.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="accepted_at")]
		public System.DateTimeOffset Accepted_at { get; set; }
		
		/// <summary>
		/// The identifier of the Card Dispute that was accepted.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="card_dispute_id")]
		public string Card_dispute_id { get; set; }
		
		/// <summary>
		/// The identifier of the Transaction that was created to return the disputed funds to your account.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transaction_id")]
		public string Transaction_id { get; set; }
	}
	
	public class Inbound_real_time_payments_transfer_simulation_resultTransactionSourceCard_refund
	{
		
		/// <summary>
		/// The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The identifier for the Transaction this refunds, if any.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="card_settlement_transaction_id")]
		public string Card_settlement_transaction_id { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public AccountCurrency Currency { get; set; }
		
		/// <summary>
		/// The Card Refund identifier.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The merchant identifier (commonly abbreviated as MID) of the merchant the card is transacting with.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_acceptor_id")]
		public string Merchant_acceptor_id { get; set; }
		
		/// <summary>
		/// The 4-digit MCC describing the merchant's business.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_category_code")]
		public string Merchant_category_code { get; set; }
		
		/// <summary>
		/// The city the merchant resides in.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_city")]
		public string Merchant_city { get; set; }
		
		/// <summary>
		/// The country the merchant resides in.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_country")]
		public string Merchant_country { get; set; }
		
		/// <summary>
		/// The name of the merchant.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_name")]
		public string Merchant_name { get; set; }
		
		/// <summary>
		/// The state the merchant resides in.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_state")]
		public string Merchant_state { get; set; }
		
		/// <summary>
		/// A constant representing the object's type. For this resource it will always be `card_refund`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public Inbound_ach_transfer_simulation_resultTransactionSourceCard_refundType Type { get; set; }
	}
	
	public class Inbound_real_time_payments_transfer_simulation_resultTransactionSourceCard_revenue_payment
	{
		
		/// <summary>
		/// The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction currency.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public AccountCurrency Currency { get; set; }
		
		/// <summary>
		/// The end of the period for which this transaction paid interest.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="period_end")]
		public System.DateTimeOffset Period_end { get; set; }
		
		/// <summary>
		/// The start of the period for which this transaction paid interest.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="period_start")]
		public System.DateTimeOffset Period_start { get; set; }
		
		/// <summary>
		/// The account the card belonged to.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transacted_on_account_id")]
		public string Transacted_on_account_id { get; set; }
	}
	
	public class Inbound_real_time_payments_transfer_simulation_resultTransactionSourceCard_route_refund
	{
		
		/// <summary>
		/// The refunded amount in the minor unit of the refunded currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the refund currency.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public AccountCurrency Currency { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_acceptor_id")]
		public string Merchant_acceptor_id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_category_code")]
		public string Merchant_category_code { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_city")]
		public string Merchant_city { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_country")]
		public string Merchant_country { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_descriptor")]
		public string Merchant_descriptor { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_state")]
		public string Merchant_state { get; set; }
	}
	
	public class Inbound_real_time_payments_transfer_simulation_resultTransactionSourceCard_route_settlement
	{
		
		/// <summary>
		/// The settled amount in the minor unit of the settlement currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the settlement currency.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public AccountCurrency Currency { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_acceptor_id")]
		public string Merchant_acceptor_id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_category_code")]
		public string Merchant_category_code { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_city")]
		public string Merchant_city { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_country")]
		public string Merchant_country { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_descriptor")]
		public string Merchant_descriptor { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_state")]
		public string Merchant_state { get; set; }
	}
	
	public class Inbound_real_time_payments_transfer_simulation_resultTransactionSourceCard_settlement
	{
		
		/// <summary>
		/// The amount in the minor unit of the transaction's settlement currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The Card Authorization that was created prior to this Card Settlement, if on exists.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="card_authorization")]
		public string Card_authorization { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's settlement currency.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public AccountCurrency Currency { get; set; }
		
		/// <summary>
		/// The Card Settlement identifier.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The merchant identifier (commonly abbreviated as MID) of the merchant the card is transacting with.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_acceptor_id")]
		public string Merchant_acceptor_id { get; set; }
		
		/// <summary>
		/// The 4-digit MCC describing the merchant's business.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_category_code")]
		public string Merchant_category_code { get; set; }
		
		/// <summary>
		/// The city the merchant resides in.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_city")]
		public string Merchant_city { get; set; }
		
		/// <summary>
		/// The country the merchant resides in.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_country")]
		public string Merchant_country { get; set; }
		
		/// <summary>
		/// The name of the merchant.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_name")]
		public string Merchant_name { get; set; }
		
		/// <summary>
		/// The state the merchant resides in.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_state")]
		public string Merchant_state { get; set; }
		
		/// <summary>
		/// The identifier of the Pending Transaction associated with this Transaction.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pending_transaction_id")]
		public string Pending_transaction_id { get; set; }
		
		/// <summary>
		/// The amount in the minor unit of the transaction's presentment currency.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="presentment_amount")]
		public int Presentment_amount { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's presentment currency.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="presentment_currency")]
		public string Presentment_currency { get; set; }
		
		/// <summary>
		/// A constant representing the object's type. For this resource it will always be `card_settlement`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public Inbound_ach_transfer_simulation_resultTransactionSourceCard_settlementType Type { get; set; }
	}
	
	public class Inbound_real_time_payments_transfer_simulation_resultTransactionSourceCheck_deposit_acceptance
	{
		
		/// <summary>
		/// The account number printed on the check.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="account_number")]
		public string Account_number { get; set; }
		
		/// <summary>
		/// The amount to be deposited in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// An additional line of metadata printed on the check. This typically includes the check number for business checks.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="auxiliary_on_us")]
		public string Auxiliary_on_us { get; set; }
		
		/// <summary>
		/// The ID of the Check Deposit that was accepted.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="check_deposit_id")]
		public string Check_deposit_id { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public AccountCurrency Currency { get; set; }
		
		/// <summary>
		/// The routing number printed on the check.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="routing_number")]
		public string Routing_number { get; set; }
		
		/// <summary>
		/// The check serial number, if present, for consumer checks. For business checks, the serial number is usually in the `auxiliary_on_us` field.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="serial_number")]
		public string Serial_number { get; set; }
	}
	
	public class Inbound_real_time_payments_transfer_simulation_resultTransactionSourceCheck_deposit_return
	{
		
		/// <summary>
		/// The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The identifier of the Check Deposit that was returned.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="check_deposit_id")]
		public string Check_deposit_id { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public AccountCurrency Currency { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="return_reason")]
		public Check_depositDeposit_returnReturn_reason Return_reason { get; set; }
		
		/// <summary>
		/// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the check deposit was returned.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="returned_at")]
		public System.DateTimeOffset Returned_at { get; set; }
		
		/// <summary>
		/// The identifier of the transaction that reversed the original check deposit transaction.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transaction_id")]
		public string Transaction_id { get; set; }
	}
	
	public class Inbound_real_time_payments_transfer_simulation_resultTransactionSourceCheck_transfer_intention
	{
		
		/// <summary>
		/// The city of the check's destination.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="address_city")]
		public string Address_city { get; set; }
		
		/// <summary>
		/// The street address of the check's destination.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="address_line1")]
		public string Address_line1 { get; set; }
		
		/// <summary>
		/// The second line of the address of the check's destination.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="address_line2")]
		public string Address_line2 { get; set; }
		
		/// <summary>
		/// The state of the check's destination.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="address_state")]
		public string Address_state { get; set; }
		
		/// <summary>
		/// The postal code of the check's destination.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="address_zip")]
		public string Address_zip { get; set; }
		
		/// <summary>
		/// The transfer amount in USD cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the check's currency.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public AccountCurrency Currency { get; set; }
		
		/// <summary>
		/// The name that will be printed on the check.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="recipient_name")]
		public string Recipient_name { get; set; }
		
		/// <summary>
		/// The identifier of the Check Transfer with which this is associated.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transfer_id")]
		public string Transfer_id { get; set; }
	}
	
	public class Inbound_real_time_payments_transfer_simulation_resultTransactionSourceCheck_transfer_rejection
	{
		
		/// <summary>
		/// The identifier of the Check Transfer that led to this Transaction.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transfer_id")]
		public string Transfer_id { get; set; }
	}
	
	public class Inbound_real_time_payments_transfer_simulation_resultTransactionSourceCheck_transfer_return
	{
		
		/// <summary>
		/// If available, a document with additional information about the return.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="file_id")]
		public string File_id { get; set; }
		
		/// <summary>
		/// The reason why the check was returned.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public Check_transferReturn_detailsReason Reason { get; set; }
		
		/// <summary>
		/// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the check was returned.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="returned_at")]
		public System.DateTimeOffset Returned_at { get; set; }
		
		/// <summary>
		/// The identifier of the Transaction that was created to credit you for the returned check.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transaction_id")]
		public string Transaction_id { get; set; }
		
		/// <summary>
		/// The identifier of the returned Check Transfer.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transfer_id")]
		public string Transfer_id { get; set; }
	}
	
	public class Inbound_real_time_payments_transfer_simulation_resultTransactionSourceCheck_transfer_stop_payment_request
	{
		
		/// <summary>
		/// The time the stop-payment was requested.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="requested_at")]
		public System.DateTimeOffset Requested_at { get; set; }
		
		/// <summary>
		/// The transaction ID of the corresponding credit transaction.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transaction_id")]
		public string Transaction_id { get; set; }
		
		/// <summary>
		/// The ID of the check transfer that was stopped.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transfer_id")]
		public string Transfer_id { get; set; }
		
		/// <summary>
		/// A constant representing the object's type. For this resource it will always be `check_transfer_stop_payment_request`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public Check_transferStop_payment_requestType Type { get; set; }
	}
	
	public class Inbound_real_time_payments_transfer_simulation_resultTransactionSourceDispute_resolution
	{
		
		/// <summary>
		/// The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public AccountCurrency Currency { get; set; }
		
		/// <summary>
		/// The identifier of the Transaction that was disputed.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="disputed_transaction_id")]
		public string Disputed_transaction_id { get; set; }
	}
	
	public class Inbound_real_time_payments_transfer_simulation_resultTransactionSourceEmpyreal_cash_deposit
	{
		
		/// <summary>
		/// The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="bag_id")]
		public string Bag_id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="deposit_date")]
		public System.DateTimeOffset Deposit_date { get; set; }
	}
	
	public class Inbound_real_time_payments_transfer_simulation_resultTransactionSourceFee_payment
	{
		
		/// <summary>
		/// The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction currency.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public AccountCurrency Currency { get; set; }
	}
	
	public class Inbound_real_time_payments_transfer_simulation_resultTransactionSourceInbound_ach_transfer
	{
		
		/// <summary>
		/// The amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_company_descriptive_date")]
		public string Originator_company_descriptive_date { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_company_discretionary_data")]
		public string Originator_company_discretionary_data { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_company_entry_description")]
		public string Originator_company_entry_description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_company_id")]
		public string Originator_company_id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_company_name")]
		public string Originator_company_name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiver_id_number")]
		public string Receiver_id_number { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiver_name")]
		public string Receiver_name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="trace_number")]
		public string Trace_number { get; set; }
	}
	
	public class Inbound_real_time_payments_transfer_simulation_resultTransactionSourceInbound_check
	{
		
		/// <summary>
		/// The amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="check_front_image_file_id")]
		public string Check_front_image_file_id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="check_number")]
		public string Check_number { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="check_rear_image_file_id")]
		public string Check_rear_image_file_id { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public AccountCurrency Currency { get; set; }
	}
	
	public class Inbound_real_time_payments_transfer_simulation_resultTransactionSourceInbound_international_ach_transfer
	{
		
		/// <summary>
		/// The amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="destination_country_code")]
		public string Destination_country_code { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="destination_currency_code")]
		public string Destination_currency_code { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="foreign_exchange_indicator")]
		public string Foreign_exchange_indicator { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="foreign_exchange_reference")]
		public string Foreign_exchange_reference { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="foreign_exchange_reference_indicator")]
		public string Foreign_exchange_reference_indicator { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="foreign_payment_amount")]
		public int Foreign_payment_amount { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="foreign_trace_number")]
		public string Foreign_trace_number { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="international_transaction_type_code")]
		public string International_transaction_type_code { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originating_currency_code")]
		public string Originating_currency_code { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originating_depository_financial_institution_branch_country")]
		public string Originating_depository_financial_institution_branch_country { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originating_depository_financial_institution_id")]
		public string Originating_depository_financial_institution_id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originating_depository_financial_institution_id_qualifier")]
		public string Originating_depository_financial_institution_id_qualifier { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originating_depository_financial_institution_name")]
		public string Originating_depository_financial_institution_name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_city")]
		public string Originator_city { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_company_entry_description")]
		public string Originator_company_entry_description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_country")]
		public string Originator_country { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_identification")]
		public string Originator_identification { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_name")]
		public string Originator_name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_postal_code")]
		public string Originator_postal_code { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_state_or_province")]
		public string Originator_state_or_province { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_street_address")]
		public string Originator_street_address { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="payment_related_information")]
		public string Payment_related_information { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="payment_related_information2")]
		public string Payment_related_information2 { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiver_city")]
		public string Receiver_city { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiver_country")]
		public string Receiver_country { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiver_identification_number")]
		public string Receiver_identification_number { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiver_postal_code")]
		public string Receiver_postal_code { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiver_state_or_province")]
		public string Receiver_state_or_province { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiver_street_address")]
		public string Receiver_street_address { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiving_company_or_individual_name")]
		public string Receiving_company_or_individual_name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiving_depository_financial_institution_country")]
		public string Receiving_depository_financial_institution_country { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiving_depository_financial_institution_id")]
		public string Receiving_depository_financial_institution_id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiving_depository_financial_institution_id_qualifier")]
		public string Receiving_depository_financial_institution_id_qualifier { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiving_depository_financial_institution_name")]
		public string Receiving_depository_financial_institution_name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="trace_number")]
		public string Trace_number { get; set; }
	}
	
	public class Inbound_real_time_payments_transfer_simulation_resultTransactionSourceInbound_real_time_payments_transfer_confirmation
	{
		
		/// <summary>
		/// The amount in the minor unit of the transfer's currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The name the sender of the transfer specified as the recipient of the transfer.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="creditor_name")]
		public string Creditor_name { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code of the transfer's currency. This will always be "USD" for a Real Time Payments transfer.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public AccountCurrency Currency { get; set; }
		
		/// <summary>
		/// The account number of the account that sent the transfer.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="debtor_account_number")]
		public string Debtor_account_number { get; set; }
		
		/// <summary>
		/// The name provided by the sender of the transfer.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="debtor_name")]
		public string Debtor_name { get; set; }
		
		/// <summary>
		/// The routing number of the account that sent the transfer.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="debtor_routing_number")]
		public string Debtor_routing_number { get; set; }
		
		/// <summary>
		/// Additional information included with the transfer.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="remittance_information")]
		public string Remittance_information { get; set; }
		
		/// <summary>
		/// The Real Time Payments network identification of the transfer
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transaction_identification")]
		public string Transaction_identification { get; set; }
	}
	
	public class Inbound_real_time_payments_transfer_simulation_resultTransactionSourceInbound_wire_drawdown_payment
	{
		
		/// <summary>
		/// The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="beneficiary_address_line1")]
		public string Beneficiary_address_line1 { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="beneficiary_address_line2")]
		public string Beneficiary_address_line2 { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="beneficiary_address_line3")]
		public string Beneficiary_address_line3 { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="beneficiary_name")]
		public string Beneficiary_name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="beneficiary_reference")]
		public string Beneficiary_reference { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="input_message_accountability_data")]
		public string Input_message_accountability_data { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_address_line1")]
		public string Originator_address_line1 { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_address_line2")]
		public string Originator_address_line2 { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_address_line3")]
		public string Originator_address_line3 { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_name")]
		public string Originator_name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_to_beneficiary_information")]
		public string Originator_to_beneficiary_information { get; set; }
	}
	
	public class Inbound_real_time_payments_transfer_simulation_resultTransactionSourceInbound_wire_drawdown_payment_reversal
	{
		
		/// <summary>
		/// The amount that was reversed.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The description on the reversal message from Fedwire.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The Fedwire cycle date for the wire reversal.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="input_cycle_date")]
		public System.DateOnly Input_cycle_date { get; set; }
		
		/// <summary>
		/// The Fedwire transaction identifier.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="input_message_accountability_data")]
		public string Input_message_accountability_data { get; set; }
		
		/// <summary>
		/// The Fedwire sequence number.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="input_sequence_number")]
		public string Input_sequence_number { get; set; }
		
		/// <summary>
		/// The Fedwire input source identifier.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="input_source")]
		public string Input_source { get; set; }
		
		/// <summary>
		/// The Fedwire cycle date for the wire transfer that was reversed.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="previous_message_input_cycle_date")]
		public System.DateOnly Previous_message_input_cycle_date { get; set; }
		
		/// <summary>
		/// The Fedwire transaction identifier for the wire transfer that was reversed.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="previous_message_input_message_accountability_data")]
		public string Previous_message_input_message_accountability_data { get; set; }
		
		/// <summary>
		/// The Fedwire sequence number for the wire transfer that was reversed.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="previous_message_input_sequence_number")]
		public string Previous_message_input_sequence_number { get; set; }
		
		/// <summary>
		/// The Fedwire input source identifier for the wire transfer that was reversed.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="previous_message_input_source")]
		public string Previous_message_input_source { get; set; }
	}
	
	public class Inbound_real_time_payments_transfer_simulation_resultTransactionSourceInbound_wire_reversal
	{
		
		/// <summary>
		/// The amount that was reversed.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the reversal was created.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.DateTimeOffset Created_at { get; set; }
		
		/// <summary>
		/// The description on the reversal message from Fedwire.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Additional financial institution information included in the wire reversal.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="financial_institution_to_financial_institution_information")]
		public string Financial_institution_to_financial_institution_information { get; set; }
		
		/// <summary>
		/// The Fedwire cycle date for the wire reversal.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="input_cycle_date")]
		public System.DateOnly Input_cycle_date { get; set; }
		
		/// <summary>
		/// The Fedwire transaction identifier.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="input_message_accountability_data")]
		public string Input_message_accountability_data { get; set; }
		
		/// <summary>
		/// The Fedwire sequence number.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="input_sequence_number")]
		public string Input_sequence_number { get; set; }
		
		/// <summary>
		/// The Fedwire input source identifier.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="input_source")]
		public string Input_source { get; set; }
		
		/// <summary>
		/// The Fedwire cycle date for the wire transfer that was reversed.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="previous_message_input_cycle_date")]
		public System.DateOnly Previous_message_input_cycle_date { get; set; }
		
		/// <summary>
		/// The Fedwire transaction identifier for the wire transfer that was reversed.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="previous_message_input_message_accountability_data")]
		public string Previous_message_input_message_accountability_data { get; set; }
		
		/// <summary>
		/// The Fedwire sequence number for the wire transfer that was reversed.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="previous_message_input_sequence_number")]
		public string Previous_message_input_sequence_number { get; set; }
		
		/// <summary>
		/// The Fedwire input source identifier for the wire transfer that was reversed.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="previous_message_input_source")]
		public string Previous_message_input_source { get; set; }
		
		/// <summary>
		/// Information included in the wire reversal for the receiving financial institution.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiver_financial_institution_information")]
		public string Receiver_financial_institution_information { get; set; }
		
		/// <summary>
		/// The ID for the Transaction associated with the transfer reversal.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transaction_id")]
		public string Transaction_id { get; set; }
	}
	
	public class Inbound_real_time_payments_transfer_simulation_resultTransactionSourceInbound_wire_transfer
	{
		
		/// <summary>
		/// The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="beneficiary_address_line1")]
		public string Beneficiary_address_line1 { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="beneficiary_address_line2")]
		public string Beneficiary_address_line2 { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="beneficiary_address_line3")]
		public string Beneficiary_address_line3 { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="beneficiary_name")]
		public string Beneficiary_name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="beneficiary_reference")]
		public string Beneficiary_reference { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="input_message_accountability_data")]
		public string Input_message_accountability_data { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_address_line1")]
		public string Originator_address_line1 { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_address_line2")]
		public string Originator_address_line2 { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_address_line3")]
		public string Originator_address_line3 { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_name")]
		public string Originator_name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_to_beneficiary_information")]
		public string Originator_to_beneficiary_information { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_to_beneficiary_information_line1")]
		public string Originator_to_beneficiary_information_line1 { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_to_beneficiary_information_line2")]
		public string Originator_to_beneficiary_information_line2 { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_to_beneficiary_information_line3")]
		public string Originator_to_beneficiary_information_line3 { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_to_beneficiary_information_line4")]
		public string Originator_to_beneficiary_information_line4 { get; set; }
	}
	
	public class Inbound_real_time_payments_transfer_simulation_resultTransactionSourceInterest_payment
	{
		
		/// <summary>
		/// The account on which the interest was accrued.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="accrued_on_account_id")]
		public string Accrued_on_account_id { get; set; }
		
		/// <summary>
		/// The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction currency.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public AccountCurrency Currency { get; set; }
		
		/// <summary>
		/// The end of the period for which this transaction paid interest.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="period_end")]
		public System.DateTimeOffset Period_end { get; set; }
		
		/// <summary>
		/// The start of the period for which this transaction paid interest.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="period_start")]
		public System.DateTimeOffset Period_start { get; set; }
	}
	
	public class Inbound_real_time_payments_transfer_simulation_resultTransactionSourceInternal_source
	{
		
		/// <summary>
		/// The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction currency.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public AccountCurrency Currency { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public Inbound_ach_transfer_simulation_resultTransactionSourceInternal_sourceReason Reason { get; set; }
	}
	
	public class Inbound_real_time_payments_transfer_simulation_resultTransactionSourceReal_time_payments_transfer_acknowledgement
	{
		
		/// <summary>
		/// The transfer amount in USD cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The destination account number.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="destination_account_number")]
		public string Destination_account_number { get; set; }
		
		/// <summary>
		/// The American Bankers' Association (ABA) Routing Transit Number (RTN).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="destination_routing_number")]
		public string Destination_routing_number { get; set; }
		
		/// <summary>
		/// Unstructured information that will show on the recipient's bank statement.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="remittance_information")]
		public string Remittance_information { get; set; }
		
		/// <summary>
		/// The identifier of the Real Time Payments Transfer that led to this Transaction.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transfer_id")]
		public string Transfer_id { get; set; }
	}
	
	public class Inbound_real_time_payments_transfer_simulation_resultTransactionSourceSample_funds
	{
		
		/// <summary>
		/// Where the sample funds came from.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator")]
		public string Originator { get; set; }
	}
	
	public class Inbound_real_time_payments_transfer_simulation_resultTransactionSourceWire_drawdown_payment_intention
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="account_number")]
		public string Account_number { get; set; }
		
		/// <summary>
		/// The transfer amount in USD cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="message_to_recipient")]
		public string Message_to_recipient { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="routing_number")]
		public string Routing_number { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transfer_id")]
		public string Transfer_id { get; set; }
	}
	
	public class Inbound_real_time_payments_transfer_simulation_resultTransactionSourceWire_drawdown_payment_rejection
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transfer_id")]
		public string Transfer_id { get; set; }
	}
	
	public class Inbound_real_time_payments_transfer_simulation_resultTransactionSourceWire_transfer_intention
	{
		
		/// <summary>
		/// The destination account number.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="account_number")]
		public string Account_number { get; set; }
		
		/// <summary>
		/// The transfer amount in USD cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The message that will show on the recipient's bank statement.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="message_to_recipient")]
		public string Message_to_recipient { get; set; }
		
		/// <summary>
		/// The American Bankers' Association (ABA) Routing Transit Number (RTN).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="routing_number")]
		public string Routing_number { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transfer_id")]
		public string Transfer_id { get; set; }
	}
	
	public class Inbound_real_time_payments_transfer_simulation_resultTransactionSourceWire_transfer_rejection
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transfer_id")]
		public string Transfer_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Inbound_real_time_payments_transfer_simulation_resultType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="inbound_real_time_payments_transfer_simulation_result")]
		inbound_real_time_payments_transfer_simulation_result = 0,
	}
	
	/// <summary>
	/// Inbound wire drawdown requests are requests from someone else to send them a wire. This feature is in beta; reach out to [support@increase.com](mailto:support@increase.com) to learn more.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Inbound_wire_drawdown_request
	{
		
		/// <summary>
		/// The amount being requested in cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The drawdown request's beneficiary's account number.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="beneficiary_account_number")]
		public string Beneficiary_account_number { get; set; }
		
		/// <summary>
		/// Line 1 of the drawdown request's beneficiary's address.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="beneficiary_address_line1")]
		public string Beneficiary_address_line1 { get; set; }
		
		/// <summary>
		/// Line 2 of the drawdown request's beneficiary's address.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="beneficiary_address_line2")]
		public string Beneficiary_address_line2 { get; set; }
		
		/// <summary>
		/// Line 3 of the drawdown request's beneficiary's address.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="beneficiary_address_line3")]
		public string Beneficiary_address_line3 { get; set; }
		
		/// <summary>
		/// The drawdown request's beneficiary's name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="beneficiary_name")]
		public string Beneficiary_name { get; set; }
		
		/// <summary>
		/// The drawdown request's beneficiary's routing number.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="beneficiary_routing_number")]
		public string Beneficiary_routing_number { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the amount being requested. Will always be "USD".
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public string Currency { get; set; }
		
		/// <summary>
		/// The Wire drawdown request identifier.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// A message from the drawdown request's originator.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="message_to_recipient")]
		public string Message_to_recipient { get; set; }
		
		/// <summary>
		/// The drawdown request's originator's account number.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_account_number")]
		public string Originator_account_number { get; set; }
		
		/// <summary>
		/// Line 1 of the drawdown request's originator's address.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_address_line1")]
		public string Originator_address_line1 { get; set; }
		
		/// <summary>
		/// Line 2 of the drawdown request's originator's address.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_address_line2")]
		public string Originator_address_line2 { get; set; }
		
		/// <summary>
		/// Line 3 of the drawdown request's originator's address.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_address_line3")]
		public string Originator_address_line3 { get; set; }
		
		/// <summary>
		/// The drawdown request's originator's name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_name")]
		public string Originator_name { get; set; }
		
		/// <summary>
		/// The drawdown request's originator's routing number.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_routing_number")]
		public string Originator_routing_number { get; set; }
		
		/// <summary>
		/// Line 1 of the information conveyed from the originator of the message to the beneficiary.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_to_beneficiary_information_line1")]
		public string Originator_to_beneficiary_information_line1 { get; set; }
		
		/// <summary>
		/// Line 2 of the information conveyed from the originator of the message to the beneficiary.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_to_beneficiary_information_line2")]
		public string Originator_to_beneficiary_information_line2 { get; set; }
		
		/// <summary>
		/// Line 3 of the information conveyed from the originator of the message to the beneficiary.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_to_beneficiary_information_line3")]
		public string Originator_to_beneficiary_information_line3 { get; set; }
		
		/// <summary>
		/// Line 4 of the information conveyed from the originator of the message to the beneficiary.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_to_beneficiary_information_line4")]
		public string Originator_to_beneficiary_information_line4 { get; set; }
		
		/// <summary>
		/// The Account Number from which the recipient of this request is being requested to send funds.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="recipient_account_number_id")]
		public string Recipient_account_number_id { get; set; }
		
		/// <summary>
		/// A constant representing the object's type. For this resource it will always be `inbound_wire_drawdown_request`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public Inbound_wire_drawdown_requestType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Inbound_wire_drawdown_requestType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="inbound_wire_drawdown_request")]
		inbound_wire_drawdown_request = 0,
	}
	
	/// <summary>
	/// A list of Inbound Wire Drawdown Request objects
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Inbound_wire_drawdown_request_list
	{
		
		/// <summary>
		/// The contents of the list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Inbound_wire_drawdown_request[] Data { get; set; }
		
		/// <summary>
		/// A pointer to a place in the list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="next_cursor")]
		public string Next_cursor { get; set; }
	}
	
	/// <summary>
	/// The results of an inbound Wire Transfer simulation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Inbound_wire_transfer_simulation_result
	{
		
		/// <summary>
		/// If the Wire Transfer attempt succeeds, this will contain the resulting [Transaction](#transactions) object. The Transaction's `source` will be of `category: inbound_wire_transfer`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transaction")]
		public Inbound_wire_transfer_simulation_resultTransaction Transaction { get; set; }
		
		/// <summary>
		/// A constant representing the object's type. For this resource it will always be `inbound_wire_transfer_simulation_result`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public Inbound_wire_transfer_simulation_resultType Type { get; set; }
	}
	
	public class Inbound_wire_transfer_simulation_resultTransaction
	{
		
		/// <summary>
		/// The identifier for the Account the Transaction belongs to.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="account_id")]
		public string Account_id { get; set; }
		
		/// <summary>
		/// The Transaction amount in the minor unit of its currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date on which the Transaction occured.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.DateTimeOffset Created_at { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the Transaction's currency. This will match the currency on the Transcation's Account.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public AccountCurrency Currency { get; set; }
		
		/// <summary>
		/// For a Transaction related to a transfer, this is the description you provide. For a Transaction related to a payment, this is the description the vendor provides.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The Transaction identifier.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The identifier for the route this Transaction came through. Routes are things like cards and ACH details.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="route_id")]
		public string Route_id { get; set; }
		
		/// <summary>
		/// The type of the route this Transaction came through.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="route_type")]
		public Declined_transactionRoute_type Route_type { get; set; }
		
		/// <summary>
		/// This is an object giving more details on the network-level event that caused the Transaction. Note that for backwards compatibility reasons, additional undocumented keys may appear in this object. These should be treated as deprecated and will be removed in the future.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="source")]
		public Inbound_wire_transfer_simulation_resultTransactionSource Source { get; set; }
		
		/// <summary>
		/// A constant representing the object's type. For this resource it will always be `transaction`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public Inbound_ach_transfer_simulation_resultTransactionType Type { get; set; }
	}
	
	public class Inbound_wire_transfer_simulation_resultTransactionSource
	{
		
		/// <summary>
		/// A Account Transfer Intention object. This field will be present in the JSON response if and only if `category` is equal to `account_transfer_intention`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="account_transfer_intention")]
		public Inbound_wire_transfer_simulation_resultTransactionSourceAccount_transfer_intention Account_transfer_intention { get; set; }
		
		/// <summary>
		/// A ACH Check Conversion object. This field will be present in the JSON response if and only if `category` is equal to `ach_check_conversion`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ach_check_conversion")]
		public Inbound_wire_transfer_simulation_resultTransactionSourceAch_check_conversion Ach_check_conversion { get; set; }
		
		/// <summary>
		/// A ACH Check Conversion Return object. This field will be present in the JSON response if and only if `category` is equal to `ach_check_conversion_return`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ach_check_conversion_return")]
		public Inbound_wire_transfer_simulation_resultTransactionSourceAch_check_conversion_return Ach_check_conversion_return { get; set; }
		
		/// <summary>
		/// A ACH Transfer Intention object. This field will be present in the JSON response if and only if `category` is equal to `ach_transfer_intention`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ach_transfer_intention")]
		public Inbound_wire_transfer_simulation_resultTransactionSourceAch_transfer_intention Ach_transfer_intention { get; set; }
		
		/// <summary>
		/// A ACH Transfer Rejection object. This field will be present in the JSON response if and only if `category` is equal to `ach_transfer_rejection`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ach_transfer_rejection")]
		public Inbound_wire_transfer_simulation_resultTransactionSourceAch_transfer_rejection Ach_transfer_rejection { get; set; }
		
		/// <summary>
		/// A ACH Transfer Return object. This field will be present in the JSON response if and only if `category` is equal to `ach_transfer_return`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ach_transfer_return")]
		public Inbound_wire_transfer_simulation_resultTransactionSourceAch_transfer_return Ach_transfer_return { get; set; }
		
		/// <summary>
		/// A Card Dispute Acceptance object. This field will be present in the JSON response if and only if `category` is equal to `card_dispute_acceptance`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="card_dispute_acceptance")]
		public Inbound_wire_transfer_simulation_resultTransactionSourceCard_dispute_acceptance Card_dispute_acceptance { get; set; }
		
		/// <summary>
		/// A Card Refund object. This field will be present in the JSON response if and only if `category` is equal to `card_refund`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="card_refund")]
		public Inbound_wire_transfer_simulation_resultTransactionSourceCard_refund Card_refund { get; set; }
		
		/// <summary>
		/// A Card Revenue Payment object. This field will be present in the JSON response if and only if `category` is equal to `card_revenue_payment`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="card_revenue_payment")]
		public Inbound_wire_transfer_simulation_resultTransactionSourceCard_revenue_payment Card_revenue_payment { get; set; }
		
		/// <summary>
		/// A Deprecated Card Refund object. This field will be present in the JSON response if and only if `category` is equal to `card_route_refund`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="card_route_refund")]
		public Inbound_wire_transfer_simulation_resultTransactionSourceCard_route_refund Card_route_refund { get; set; }
		
		/// <summary>
		/// A Deprecated Card Settlement object. This field will be present in the JSON response if and only if `category` is equal to `card_route_settlement`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="card_route_settlement")]
		public Inbound_wire_transfer_simulation_resultTransactionSourceCard_route_settlement Card_route_settlement { get; set; }
		
		/// <summary>
		/// A Card Settlement object. This field will be present in the JSON response if and only if `category` is equal to `card_settlement`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="card_settlement")]
		public Inbound_wire_transfer_simulation_resultTransactionSourceCard_settlement Card_settlement { get; set; }
		
		/// <summary>
		/// The type of transaction that took place. We may add additional possible values for this enum over time; your application should be able to handle such additions gracefully.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="category")]
		public Inbound_ach_transfer_simulation_resultTransactionSourceCategory Category { get; set; }
		
		/// <summary>
		/// A Check Deposit Acceptance object. This field will be present in the JSON response if and only if `category` is equal to `check_deposit_acceptance`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="check_deposit_acceptance")]
		public Inbound_wire_transfer_simulation_resultTransactionSourceCheck_deposit_acceptance Check_deposit_acceptance { get; set; }
		
		/// <summary>
		/// A Check Deposit Return object. This field will be present in the JSON response if and only if `category` is equal to `check_deposit_return`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="check_deposit_return")]
		public Inbound_wire_transfer_simulation_resultTransactionSourceCheck_deposit_return Check_deposit_return { get; set; }
		
		/// <summary>
		/// A Check Transfer Intention object. This field will be present in the JSON response if and only if `category` is equal to `check_transfer_intention`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="check_transfer_intention")]
		public Inbound_wire_transfer_simulation_resultTransactionSourceCheck_transfer_intention Check_transfer_intention { get; set; }
		
		/// <summary>
		/// A Check Transfer Rejection object. This field will be present in the JSON response if and only if `category` is equal to `check_transfer_rejection`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="check_transfer_rejection")]
		public Inbound_wire_transfer_simulation_resultTransactionSourceCheck_transfer_rejection Check_transfer_rejection { get; set; }
		
		/// <summary>
		/// A Check Transfer Return object. This field will be present in the JSON response if and only if `category` is equal to `check_transfer_return`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="check_transfer_return")]
		public Inbound_wire_transfer_simulation_resultTransactionSourceCheck_transfer_return Check_transfer_return { get; set; }
		
		/// <summary>
		/// A Check Transfer Stop Payment Request object. This field will be present in the JSON response if and only if `category` is equal to `check_transfer_stop_payment_request`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="check_transfer_stop_payment_request")]
		public Inbound_wire_transfer_simulation_resultTransactionSourceCheck_transfer_stop_payment_request Check_transfer_stop_payment_request { get; set; }
		
		/// <summary>
		/// A Dispute Resolution object. This field will be present in the JSON response if and only if `category` is equal to `dispute_resolution`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dispute_resolution")]
		public Inbound_wire_transfer_simulation_resultTransactionSourceDispute_resolution Dispute_resolution { get; set; }
		
		/// <summary>
		/// A Empyreal Cash Deposit object. This field will be present in the JSON response if and only if `category` is equal to `empyreal_cash_deposit`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="empyreal_cash_deposit")]
		public Inbound_wire_transfer_simulation_resultTransactionSourceEmpyreal_cash_deposit Empyreal_cash_deposit { get; set; }
		
		/// <summary>
		/// A Fee Payment object. This field will be present in the JSON response if and only if `category` is equal to `fee_payment`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fee_payment")]
		public Inbound_wire_transfer_simulation_resultTransactionSourceFee_payment Fee_payment { get; set; }
		
		/// <summary>
		/// A Inbound ACH Transfer object. This field will be present in the JSON response if and only if `category` is equal to `inbound_ach_transfer`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="inbound_ach_transfer")]
		public Inbound_wire_transfer_simulation_resultTransactionSourceInbound_ach_transfer Inbound_ach_transfer { get; set; }
		
		/// <summary>
		/// A Inbound Check object. This field will be present in the JSON response if and only if `category` is equal to `inbound_check`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="inbound_check")]
		public Inbound_wire_transfer_simulation_resultTransactionSourceInbound_check Inbound_check { get; set; }
		
		/// <summary>
		/// A Inbound International ACH Transfer object. This field will be present in the JSON response if and only if `category` is equal to `inbound_international_ach_transfer`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="inbound_international_ach_transfer")]
		public Inbound_wire_transfer_simulation_resultTransactionSourceInbound_international_ach_transfer Inbound_international_ach_transfer { get; set; }
		
		/// <summary>
		/// A Inbound Real Time Payments Transfer Confirmation object. This field will be present in the JSON response if and only if `category` is equal to `inbound_real_time_payments_transfer_confirmation`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="inbound_real_time_payments_transfer_confirmation")]
		public Inbound_wire_transfer_simulation_resultTransactionSourceInbound_real_time_payments_transfer_confirmation Inbound_real_time_payments_transfer_confirmation { get; set; }
		
		/// <summary>
		/// A Inbound Wire Drawdown Payment object. This field will be present in the JSON response if and only if `category` is equal to `inbound_wire_drawdown_payment`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="inbound_wire_drawdown_payment")]
		public Inbound_wire_transfer_simulation_resultTransactionSourceInbound_wire_drawdown_payment Inbound_wire_drawdown_payment { get; set; }
		
		/// <summary>
		/// A Inbound Wire Drawdown Payment Reversal object. This field will be present in the JSON response if and only if `category` is equal to `inbound_wire_drawdown_payment_reversal`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="inbound_wire_drawdown_payment_reversal")]
		public Inbound_wire_transfer_simulation_resultTransactionSourceInbound_wire_drawdown_payment_reversal Inbound_wire_drawdown_payment_reversal { get; set; }
		
		/// <summary>
		/// A Inbound Wire Reversal object. This field will be present in the JSON response if and only if `category` is equal to `inbound_wire_reversal`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="inbound_wire_reversal")]
		public Inbound_wire_transfer_simulation_resultTransactionSourceInbound_wire_reversal Inbound_wire_reversal { get; set; }
		
		/// <summary>
		/// A Inbound Wire Transfer object. This field will be present in the JSON response if and only if `category` is equal to `inbound_wire_transfer`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="inbound_wire_transfer")]
		public Inbound_wire_transfer_simulation_resultTransactionSourceInbound_wire_transfer Inbound_wire_transfer { get; set; }
		
		/// <summary>
		/// A Interest Payment object. This field will be present in the JSON response if and only if `category` is equal to `interest_payment`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="interest_payment")]
		public Inbound_wire_transfer_simulation_resultTransactionSourceInterest_payment Interest_payment { get; set; }
		
		/// <summary>
		/// A Internal Source object. This field will be present in the JSON response if and only if `category` is equal to `internal_source`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="internal_source")]
		public Inbound_wire_transfer_simulation_resultTransactionSourceInternal_source Internal_source { get; set; }
		
		/// <summary>
		/// A Real Time Payments Transfer Acknowledgement object. This field will be present in the JSON response if and only if `category` is equal to `real_time_payments_transfer_acknowledgement`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="real_time_payments_transfer_acknowledgement")]
		public Inbound_wire_transfer_simulation_resultTransactionSourceReal_time_payments_transfer_acknowledgement Real_time_payments_transfer_acknowledgement { get; set; }
		
		/// <summary>
		/// A Sample Funds object. This field will be present in the JSON response if and only if `category` is equal to `sample_funds`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sample_funds")]
		public Inbound_wire_transfer_simulation_resultTransactionSourceSample_funds Sample_funds { get; set; }
		
		/// <summary>
		/// A Wire Drawdown Payment Intention object. This field will be present in the JSON response if and only if `category` is equal to `wire_drawdown_payment_intention`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="wire_drawdown_payment_intention")]
		public Inbound_wire_transfer_simulation_resultTransactionSourceWire_drawdown_payment_intention Wire_drawdown_payment_intention { get; set; }
		
		/// <summary>
		/// A Wire Drawdown Payment Rejection object. This field will be present in the JSON response if and only if `category` is equal to `wire_drawdown_payment_rejection`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="wire_drawdown_payment_rejection")]
		public Inbound_wire_transfer_simulation_resultTransactionSourceWire_drawdown_payment_rejection Wire_drawdown_payment_rejection { get; set; }
		
		/// <summary>
		/// A Wire Transfer Intention object. This field will be present in the JSON response if and only if `category` is equal to `wire_transfer_intention`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="wire_transfer_intention")]
		public Inbound_wire_transfer_simulation_resultTransactionSourceWire_transfer_intention Wire_transfer_intention { get; set; }
		
		/// <summary>
		/// A Wire Transfer Rejection object. This field will be present in the JSON response if and only if `category` is equal to `wire_transfer_rejection`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="wire_transfer_rejection")]
		public Inbound_wire_transfer_simulation_resultTransactionSourceWire_transfer_rejection Wire_transfer_rejection { get; set; }
	}
	
	public class Inbound_wire_transfer_simulation_resultTransactionSourceAccount_transfer_intention
	{
		
		/// <summary>
		/// The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the destination account currency.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public AccountCurrency Currency { get; set; }
		
		/// <summary>
		/// The description you chose to give the transfer.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The identifier of the Account to where the Account Transfer was sent.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="destination_account_id")]
		public string Destination_account_id { get; set; }
		
		/// <summary>
		/// The identifier of the Account from where the Account Transfer was sent.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="source_account_id")]
		public string Source_account_id { get; set; }
		
		/// <summary>
		/// The identifier of the Account Transfer that led to this Pending Transaction.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transfer_id")]
		public string Transfer_id { get; set; }
	}
	
	public class Inbound_wire_transfer_simulation_resultTransactionSourceAch_check_conversion
	{
		
		/// <summary>
		/// The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The identifier of the File containing an image of the returned check.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="file_id")]
		public string File_id { get; set; }
	}
	
	public class Inbound_wire_transfer_simulation_resultTransactionSourceAch_check_conversion_return
	{
		
		/// <summary>
		/// The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// Why the transfer was returned.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="return_reason_code")]
		public string Return_reason_code { get; set; }
	}
	
	public class Inbound_wire_transfer_simulation_resultTransactionSourceAch_transfer_intention
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="account_number")]
		public string Account_number { get; set; }
		
		/// <summary>
		/// The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="routing_number")]
		public string Routing_number { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="statement_descriptor")]
		public string Statement_descriptor { get; set; }
		
		/// <summary>
		/// The identifier of the ACH Transfer that led to this Transaction.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transfer_id")]
		public string Transfer_id { get; set; }
	}
	
	public class Inbound_wire_transfer_simulation_resultTransactionSourceAch_transfer_rejection
	{
		
		/// <summary>
		/// The identifier of the ACH Transfer that led to this Transaction.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transfer_id")]
		public string Transfer_id { get; set; }
	}
	
	public class Inbound_wire_transfer_simulation_resultTransactionSourceAch_transfer_return
	{
		
		/// <summary>
		/// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was created.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.DateTimeOffset Created_at { get; set; }
		
		/// <summary>
		/// Why the ACH Transfer was returned.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="return_reason_code")]
		public Ach_transferReturnReturn_reason_code Return_reason_code { get; set; }
		
		/// <summary>
		/// The identifier of the Tranasaction associated with this return.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transaction_id")]
		public string Transaction_id { get; set; }
		
		/// <summary>
		/// The identifier of the ACH Transfer associated with this return.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transfer_id")]
		public string Transfer_id { get; set; }
	}
	
	public class Inbound_wire_transfer_simulation_resultTransactionSourceCard_dispute_acceptance
	{
		
		/// <summary>
		/// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Card Dispute was accepted.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="accepted_at")]
		public System.DateTimeOffset Accepted_at { get; set; }
		
		/// <summary>
		/// The identifier of the Card Dispute that was accepted.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="card_dispute_id")]
		public string Card_dispute_id { get; set; }
		
		/// <summary>
		/// The identifier of the Transaction that was created to return the disputed funds to your account.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transaction_id")]
		public string Transaction_id { get; set; }
	}
	
	public class Inbound_wire_transfer_simulation_resultTransactionSourceCard_refund
	{
		
		/// <summary>
		/// The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The identifier for the Transaction this refunds, if any.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="card_settlement_transaction_id")]
		public string Card_settlement_transaction_id { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public AccountCurrency Currency { get; set; }
		
		/// <summary>
		/// The Card Refund identifier.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The merchant identifier (commonly abbreviated as MID) of the merchant the card is transacting with.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_acceptor_id")]
		public string Merchant_acceptor_id { get; set; }
		
		/// <summary>
		/// The 4-digit MCC describing the merchant's business.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_category_code")]
		public string Merchant_category_code { get; set; }
		
		/// <summary>
		/// The city the merchant resides in.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_city")]
		public string Merchant_city { get; set; }
		
		/// <summary>
		/// The country the merchant resides in.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_country")]
		public string Merchant_country { get; set; }
		
		/// <summary>
		/// The name of the merchant.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_name")]
		public string Merchant_name { get; set; }
		
		/// <summary>
		/// The state the merchant resides in.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_state")]
		public string Merchant_state { get; set; }
		
		/// <summary>
		/// A constant representing the object's type. For this resource it will always be `card_refund`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public Inbound_ach_transfer_simulation_resultTransactionSourceCard_refundType Type { get; set; }
	}
	
	public class Inbound_wire_transfer_simulation_resultTransactionSourceCard_revenue_payment
	{
		
		/// <summary>
		/// The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction currency.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public AccountCurrency Currency { get; set; }
		
		/// <summary>
		/// The end of the period for which this transaction paid interest.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="period_end")]
		public System.DateTimeOffset Period_end { get; set; }
		
		/// <summary>
		/// The start of the period for which this transaction paid interest.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="period_start")]
		public System.DateTimeOffset Period_start { get; set; }
		
		/// <summary>
		/// The account the card belonged to.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transacted_on_account_id")]
		public string Transacted_on_account_id { get; set; }
	}
	
	public class Inbound_wire_transfer_simulation_resultTransactionSourceCard_route_refund
	{
		
		/// <summary>
		/// The refunded amount in the minor unit of the refunded currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the refund currency.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public AccountCurrency Currency { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_acceptor_id")]
		public string Merchant_acceptor_id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_category_code")]
		public string Merchant_category_code { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_city")]
		public string Merchant_city { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_country")]
		public string Merchant_country { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_descriptor")]
		public string Merchant_descriptor { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_state")]
		public string Merchant_state { get; set; }
	}
	
	public class Inbound_wire_transfer_simulation_resultTransactionSourceCard_route_settlement
	{
		
		/// <summary>
		/// The settled amount in the minor unit of the settlement currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the settlement currency.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public AccountCurrency Currency { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_acceptor_id")]
		public string Merchant_acceptor_id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_category_code")]
		public string Merchant_category_code { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_city")]
		public string Merchant_city { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_country")]
		public string Merchant_country { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_descriptor")]
		public string Merchant_descriptor { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_state")]
		public string Merchant_state { get; set; }
	}
	
	public class Inbound_wire_transfer_simulation_resultTransactionSourceCard_settlement
	{
		
		/// <summary>
		/// The amount in the minor unit of the transaction's settlement currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The Card Authorization that was created prior to this Card Settlement, if on exists.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="card_authorization")]
		public string Card_authorization { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's settlement currency.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public AccountCurrency Currency { get; set; }
		
		/// <summary>
		/// The Card Settlement identifier.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The merchant identifier (commonly abbreviated as MID) of the merchant the card is transacting with.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_acceptor_id")]
		public string Merchant_acceptor_id { get; set; }
		
		/// <summary>
		/// The 4-digit MCC describing the merchant's business.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_category_code")]
		public string Merchant_category_code { get; set; }
		
		/// <summary>
		/// The city the merchant resides in.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_city")]
		public string Merchant_city { get; set; }
		
		/// <summary>
		/// The country the merchant resides in.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_country")]
		public string Merchant_country { get; set; }
		
		/// <summary>
		/// The name of the merchant.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_name")]
		public string Merchant_name { get; set; }
		
		/// <summary>
		/// The state the merchant resides in.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_state")]
		public string Merchant_state { get; set; }
		
		/// <summary>
		/// The identifier of the Pending Transaction associated with this Transaction.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pending_transaction_id")]
		public string Pending_transaction_id { get; set; }
		
		/// <summary>
		/// The amount in the minor unit of the transaction's presentment currency.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="presentment_amount")]
		public int Presentment_amount { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's presentment currency.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="presentment_currency")]
		public string Presentment_currency { get; set; }
		
		/// <summary>
		/// A constant representing the object's type. For this resource it will always be `card_settlement`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public Inbound_ach_transfer_simulation_resultTransactionSourceCard_settlementType Type { get; set; }
	}
	
	public class Inbound_wire_transfer_simulation_resultTransactionSourceCheck_deposit_acceptance
	{
		
		/// <summary>
		/// The account number printed on the check.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="account_number")]
		public string Account_number { get; set; }
		
		/// <summary>
		/// The amount to be deposited in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// An additional line of metadata printed on the check. This typically includes the check number for business checks.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="auxiliary_on_us")]
		public string Auxiliary_on_us { get; set; }
		
		/// <summary>
		/// The ID of the Check Deposit that was accepted.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="check_deposit_id")]
		public string Check_deposit_id { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public AccountCurrency Currency { get; set; }
		
		/// <summary>
		/// The routing number printed on the check.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="routing_number")]
		public string Routing_number { get; set; }
		
		/// <summary>
		/// The check serial number, if present, for consumer checks. For business checks, the serial number is usually in the `auxiliary_on_us` field.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="serial_number")]
		public string Serial_number { get; set; }
	}
	
	public class Inbound_wire_transfer_simulation_resultTransactionSourceCheck_deposit_return
	{
		
		/// <summary>
		/// The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The identifier of the Check Deposit that was returned.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="check_deposit_id")]
		public string Check_deposit_id { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public AccountCurrency Currency { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="return_reason")]
		public Check_depositDeposit_returnReturn_reason Return_reason { get; set; }
		
		/// <summary>
		/// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the check deposit was returned.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="returned_at")]
		public System.DateTimeOffset Returned_at { get; set; }
		
		/// <summary>
		/// The identifier of the transaction that reversed the original check deposit transaction.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transaction_id")]
		public string Transaction_id { get; set; }
	}
	
	public class Inbound_wire_transfer_simulation_resultTransactionSourceCheck_transfer_intention
	{
		
		/// <summary>
		/// The city of the check's destination.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="address_city")]
		public string Address_city { get; set; }
		
		/// <summary>
		/// The street address of the check's destination.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="address_line1")]
		public string Address_line1 { get; set; }
		
		/// <summary>
		/// The second line of the address of the check's destination.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="address_line2")]
		public string Address_line2 { get; set; }
		
		/// <summary>
		/// The state of the check's destination.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="address_state")]
		public string Address_state { get; set; }
		
		/// <summary>
		/// The postal code of the check's destination.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="address_zip")]
		public string Address_zip { get; set; }
		
		/// <summary>
		/// The transfer amount in USD cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the check's currency.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public AccountCurrency Currency { get; set; }
		
		/// <summary>
		/// The name that will be printed on the check.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="recipient_name")]
		public string Recipient_name { get; set; }
		
		/// <summary>
		/// The identifier of the Check Transfer with which this is associated.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transfer_id")]
		public string Transfer_id { get; set; }
	}
	
	public class Inbound_wire_transfer_simulation_resultTransactionSourceCheck_transfer_rejection
	{
		
		/// <summary>
		/// The identifier of the Check Transfer that led to this Transaction.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transfer_id")]
		public string Transfer_id { get; set; }
	}
	
	public class Inbound_wire_transfer_simulation_resultTransactionSourceCheck_transfer_return
	{
		
		/// <summary>
		/// If available, a document with additional information about the return.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="file_id")]
		public string File_id { get; set; }
		
		/// <summary>
		/// The reason why the check was returned.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public Check_transferReturn_detailsReason Reason { get; set; }
		
		/// <summary>
		/// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the check was returned.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="returned_at")]
		public System.DateTimeOffset Returned_at { get; set; }
		
		/// <summary>
		/// The identifier of the Transaction that was created to credit you for the returned check.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transaction_id")]
		public string Transaction_id { get; set; }
		
		/// <summary>
		/// The identifier of the returned Check Transfer.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transfer_id")]
		public string Transfer_id { get; set; }
	}
	
	public class Inbound_wire_transfer_simulation_resultTransactionSourceCheck_transfer_stop_payment_request
	{
		
		/// <summary>
		/// The time the stop-payment was requested.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="requested_at")]
		public System.DateTimeOffset Requested_at { get; set; }
		
		/// <summary>
		/// The transaction ID of the corresponding credit transaction.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transaction_id")]
		public string Transaction_id { get; set; }
		
		/// <summary>
		/// The ID of the check transfer that was stopped.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transfer_id")]
		public string Transfer_id { get; set; }
		
		/// <summary>
		/// A constant representing the object's type. For this resource it will always be `check_transfer_stop_payment_request`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public Check_transferStop_payment_requestType Type { get; set; }
	}
	
	public class Inbound_wire_transfer_simulation_resultTransactionSourceDispute_resolution
	{
		
		/// <summary>
		/// The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public AccountCurrency Currency { get; set; }
		
		/// <summary>
		/// The identifier of the Transaction that was disputed.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="disputed_transaction_id")]
		public string Disputed_transaction_id { get; set; }
	}
	
	public class Inbound_wire_transfer_simulation_resultTransactionSourceEmpyreal_cash_deposit
	{
		
		/// <summary>
		/// The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="bag_id")]
		public string Bag_id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="deposit_date")]
		public System.DateTimeOffset Deposit_date { get; set; }
	}
	
	public class Inbound_wire_transfer_simulation_resultTransactionSourceFee_payment
	{
		
		/// <summary>
		/// The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction currency.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public AccountCurrency Currency { get; set; }
	}
	
	public class Inbound_wire_transfer_simulation_resultTransactionSourceInbound_ach_transfer
	{
		
		/// <summary>
		/// The amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_company_descriptive_date")]
		public string Originator_company_descriptive_date { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_company_discretionary_data")]
		public string Originator_company_discretionary_data { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_company_entry_description")]
		public string Originator_company_entry_description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_company_id")]
		public string Originator_company_id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_company_name")]
		public string Originator_company_name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiver_id_number")]
		public string Receiver_id_number { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiver_name")]
		public string Receiver_name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="trace_number")]
		public string Trace_number { get; set; }
	}
	
	public class Inbound_wire_transfer_simulation_resultTransactionSourceInbound_check
	{
		
		/// <summary>
		/// The amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="check_front_image_file_id")]
		public string Check_front_image_file_id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="check_number")]
		public string Check_number { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="check_rear_image_file_id")]
		public string Check_rear_image_file_id { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public AccountCurrency Currency { get; set; }
	}
	
	public class Inbound_wire_transfer_simulation_resultTransactionSourceInbound_international_ach_transfer
	{
		
		/// <summary>
		/// The amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="destination_country_code")]
		public string Destination_country_code { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="destination_currency_code")]
		public string Destination_currency_code { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="foreign_exchange_indicator")]
		public string Foreign_exchange_indicator { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="foreign_exchange_reference")]
		public string Foreign_exchange_reference { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="foreign_exchange_reference_indicator")]
		public string Foreign_exchange_reference_indicator { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="foreign_payment_amount")]
		public int Foreign_payment_amount { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="foreign_trace_number")]
		public string Foreign_trace_number { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="international_transaction_type_code")]
		public string International_transaction_type_code { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originating_currency_code")]
		public string Originating_currency_code { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originating_depository_financial_institution_branch_country")]
		public string Originating_depository_financial_institution_branch_country { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originating_depository_financial_institution_id")]
		public string Originating_depository_financial_institution_id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originating_depository_financial_institution_id_qualifier")]
		public string Originating_depository_financial_institution_id_qualifier { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originating_depository_financial_institution_name")]
		public string Originating_depository_financial_institution_name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_city")]
		public string Originator_city { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_company_entry_description")]
		public string Originator_company_entry_description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_country")]
		public string Originator_country { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_identification")]
		public string Originator_identification { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_name")]
		public string Originator_name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_postal_code")]
		public string Originator_postal_code { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_state_or_province")]
		public string Originator_state_or_province { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_street_address")]
		public string Originator_street_address { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="payment_related_information")]
		public string Payment_related_information { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="payment_related_information2")]
		public string Payment_related_information2 { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiver_city")]
		public string Receiver_city { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiver_country")]
		public string Receiver_country { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiver_identification_number")]
		public string Receiver_identification_number { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiver_postal_code")]
		public string Receiver_postal_code { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiver_state_or_province")]
		public string Receiver_state_or_province { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiver_street_address")]
		public string Receiver_street_address { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiving_company_or_individual_name")]
		public string Receiving_company_or_individual_name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiving_depository_financial_institution_country")]
		public string Receiving_depository_financial_institution_country { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiving_depository_financial_institution_id")]
		public string Receiving_depository_financial_institution_id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiving_depository_financial_institution_id_qualifier")]
		public string Receiving_depository_financial_institution_id_qualifier { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiving_depository_financial_institution_name")]
		public string Receiving_depository_financial_institution_name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="trace_number")]
		public string Trace_number { get; set; }
	}
	
	public class Inbound_wire_transfer_simulation_resultTransactionSourceInbound_real_time_payments_transfer_confirmation
	{
		
		/// <summary>
		/// The amount in the minor unit of the transfer's currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The name the sender of the transfer specified as the recipient of the transfer.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="creditor_name")]
		public string Creditor_name { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code of the transfer's currency. This will always be "USD" for a Real Time Payments transfer.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public AccountCurrency Currency { get; set; }
		
		/// <summary>
		/// The account number of the account that sent the transfer.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="debtor_account_number")]
		public string Debtor_account_number { get; set; }
		
		/// <summary>
		/// The name provided by the sender of the transfer.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="debtor_name")]
		public string Debtor_name { get; set; }
		
		/// <summary>
		/// The routing number of the account that sent the transfer.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="debtor_routing_number")]
		public string Debtor_routing_number { get; set; }
		
		/// <summary>
		/// Additional information included with the transfer.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="remittance_information")]
		public string Remittance_information { get; set; }
		
		/// <summary>
		/// The Real Time Payments network identification of the transfer
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transaction_identification")]
		public string Transaction_identification { get; set; }
	}
	
	public class Inbound_wire_transfer_simulation_resultTransactionSourceInbound_wire_drawdown_payment
	{
		
		/// <summary>
		/// The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="beneficiary_address_line1")]
		public string Beneficiary_address_line1 { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="beneficiary_address_line2")]
		public string Beneficiary_address_line2 { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="beneficiary_address_line3")]
		public string Beneficiary_address_line3 { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="beneficiary_name")]
		public string Beneficiary_name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="beneficiary_reference")]
		public string Beneficiary_reference { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="input_message_accountability_data")]
		public string Input_message_accountability_data { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_address_line1")]
		public string Originator_address_line1 { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_address_line2")]
		public string Originator_address_line2 { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_address_line3")]
		public string Originator_address_line3 { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_name")]
		public string Originator_name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_to_beneficiary_information")]
		public string Originator_to_beneficiary_information { get; set; }
	}
	
	public class Inbound_wire_transfer_simulation_resultTransactionSourceInbound_wire_drawdown_payment_reversal
	{
		
		/// <summary>
		/// The amount that was reversed.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The description on the reversal message from Fedwire.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The Fedwire cycle date for the wire reversal.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="input_cycle_date")]
		public System.DateOnly Input_cycle_date { get; set; }
		
		/// <summary>
		/// The Fedwire transaction identifier.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="input_message_accountability_data")]
		public string Input_message_accountability_data { get; set; }
		
		/// <summary>
		/// The Fedwire sequence number.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="input_sequence_number")]
		public string Input_sequence_number { get; set; }
		
		/// <summary>
		/// The Fedwire input source identifier.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="input_source")]
		public string Input_source { get; set; }
		
		/// <summary>
		/// The Fedwire cycle date for the wire transfer that was reversed.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="previous_message_input_cycle_date")]
		public System.DateOnly Previous_message_input_cycle_date { get; set; }
		
		/// <summary>
		/// The Fedwire transaction identifier for the wire transfer that was reversed.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="previous_message_input_message_accountability_data")]
		public string Previous_message_input_message_accountability_data { get; set; }
		
		/// <summary>
		/// The Fedwire sequence number for the wire transfer that was reversed.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="previous_message_input_sequence_number")]
		public string Previous_message_input_sequence_number { get; set; }
		
		/// <summary>
		/// The Fedwire input source identifier for the wire transfer that was reversed.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="previous_message_input_source")]
		public string Previous_message_input_source { get; set; }
	}
	
	public class Inbound_wire_transfer_simulation_resultTransactionSourceInbound_wire_reversal
	{
		
		/// <summary>
		/// The amount that was reversed.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the reversal was created.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.DateTimeOffset Created_at { get; set; }
		
		/// <summary>
		/// The description on the reversal message from Fedwire.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Additional financial institution information included in the wire reversal.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="financial_institution_to_financial_institution_information")]
		public string Financial_institution_to_financial_institution_information { get; set; }
		
		/// <summary>
		/// The Fedwire cycle date for the wire reversal.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="input_cycle_date")]
		public System.DateOnly Input_cycle_date { get; set; }
		
		/// <summary>
		/// The Fedwire transaction identifier.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="input_message_accountability_data")]
		public string Input_message_accountability_data { get; set; }
		
		/// <summary>
		/// The Fedwire sequence number.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="input_sequence_number")]
		public string Input_sequence_number { get; set; }
		
		/// <summary>
		/// The Fedwire input source identifier.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="input_source")]
		public string Input_source { get; set; }
		
		/// <summary>
		/// The Fedwire cycle date for the wire transfer that was reversed.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="previous_message_input_cycle_date")]
		public System.DateOnly Previous_message_input_cycle_date { get; set; }
		
		/// <summary>
		/// The Fedwire transaction identifier for the wire transfer that was reversed.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="previous_message_input_message_accountability_data")]
		public string Previous_message_input_message_accountability_data { get; set; }
		
		/// <summary>
		/// The Fedwire sequence number for the wire transfer that was reversed.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="previous_message_input_sequence_number")]
		public string Previous_message_input_sequence_number { get; set; }
		
		/// <summary>
		/// The Fedwire input source identifier for the wire transfer that was reversed.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="previous_message_input_source")]
		public string Previous_message_input_source { get; set; }
		
		/// <summary>
		/// Information included in the wire reversal for the receiving financial institution.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiver_financial_institution_information")]
		public string Receiver_financial_institution_information { get; set; }
		
		/// <summary>
		/// The ID for the Transaction associated with the transfer reversal.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transaction_id")]
		public string Transaction_id { get; set; }
	}
	
	public class Inbound_wire_transfer_simulation_resultTransactionSourceInbound_wire_transfer
	{
		
		/// <summary>
		/// The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="beneficiary_address_line1")]
		public string Beneficiary_address_line1 { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="beneficiary_address_line2")]
		public string Beneficiary_address_line2 { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="beneficiary_address_line3")]
		public string Beneficiary_address_line3 { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="beneficiary_name")]
		public string Beneficiary_name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="beneficiary_reference")]
		public string Beneficiary_reference { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="input_message_accountability_data")]
		public string Input_message_accountability_data { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_address_line1")]
		public string Originator_address_line1 { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_address_line2")]
		public string Originator_address_line2 { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_address_line3")]
		public string Originator_address_line3 { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_name")]
		public string Originator_name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_to_beneficiary_information")]
		public string Originator_to_beneficiary_information { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_to_beneficiary_information_line1")]
		public string Originator_to_beneficiary_information_line1 { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_to_beneficiary_information_line2")]
		public string Originator_to_beneficiary_information_line2 { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_to_beneficiary_information_line3")]
		public string Originator_to_beneficiary_information_line3 { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_to_beneficiary_information_line4")]
		public string Originator_to_beneficiary_information_line4 { get; set; }
	}
	
	public class Inbound_wire_transfer_simulation_resultTransactionSourceInterest_payment
	{
		
		/// <summary>
		/// The account on which the interest was accrued.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="accrued_on_account_id")]
		public string Accrued_on_account_id { get; set; }
		
		/// <summary>
		/// The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction currency.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public AccountCurrency Currency { get; set; }
		
		/// <summary>
		/// The end of the period for which this transaction paid interest.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="period_end")]
		public System.DateTimeOffset Period_end { get; set; }
		
		/// <summary>
		/// The start of the period for which this transaction paid interest.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="period_start")]
		public System.DateTimeOffset Period_start { get; set; }
	}
	
	public class Inbound_wire_transfer_simulation_resultTransactionSourceInternal_source
	{
		
		/// <summary>
		/// The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction currency.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public AccountCurrency Currency { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public Inbound_ach_transfer_simulation_resultTransactionSourceInternal_sourceReason Reason { get; set; }
	}
	
	public class Inbound_wire_transfer_simulation_resultTransactionSourceReal_time_payments_transfer_acknowledgement
	{
		
		/// <summary>
		/// The transfer amount in USD cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The destination account number.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="destination_account_number")]
		public string Destination_account_number { get; set; }
		
		/// <summary>
		/// The American Bankers' Association (ABA) Routing Transit Number (RTN).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="destination_routing_number")]
		public string Destination_routing_number { get; set; }
		
		/// <summary>
		/// Unstructured information that will show on the recipient's bank statement.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="remittance_information")]
		public string Remittance_information { get; set; }
		
		/// <summary>
		/// The identifier of the Real Time Payments Transfer that led to this Transaction.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transfer_id")]
		public string Transfer_id { get; set; }
	}
	
	public class Inbound_wire_transfer_simulation_resultTransactionSourceSample_funds
	{
		
		/// <summary>
		/// Where the sample funds came from.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator")]
		public string Originator { get; set; }
	}
	
	public class Inbound_wire_transfer_simulation_resultTransactionSourceWire_drawdown_payment_intention
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="account_number")]
		public string Account_number { get; set; }
		
		/// <summary>
		/// The transfer amount in USD cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="message_to_recipient")]
		public string Message_to_recipient { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="routing_number")]
		public string Routing_number { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transfer_id")]
		public string Transfer_id { get; set; }
	}
	
	public class Inbound_wire_transfer_simulation_resultTransactionSourceWire_drawdown_payment_rejection
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transfer_id")]
		public string Transfer_id { get; set; }
	}
	
	public class Inbound_wire_transfer_simulation_resultTransactionSourceWire_transfer_intention
	{
		
		/// <summary>
		/// The destination account number.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="account_number")]
		public string Account_number { get; set; }
		
		/// <summary>
		/// The transfer amount in USD cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The message that will show on the recipient's bank statement.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="message_to_recipient")]
		public string Message_to_recipient { get; set; }
		
		/// <summary>
		/// The American Bankers' Association (ABA) Routing Transit Number (RTN).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="routing_number")]
		public string Routing_number { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transfer_id")]
		public string Transfer_id { get; set; }
	}
	
	public class Inbound_wire_transfer_simulation_resultTransactionSourceWire_transfer_rejection
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transfer_id")]
		public string Transfer_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Inbound_wire_transfer_simulation_resultType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="inbound_wire_transfer_simulation_result")]
		inbound_wire_transfer_simulation_result = 0,
	}
	
	/// <summary>
	/// The results of an Interest Payment simulation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Interest_payment_simulation_result
	{
		
		/// <summary>
		/// This will contain the resulting [Transaction](#transactions) object. The Transaction's `source` will be of `category: interest_payment`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transaction")]
		public Interest_payment_simulation_resultTransaction Transaction { get; set; }
		
		/// <summary>
		/// A constant representing the object's type. For this resource it will always be `interest_payment_simulation_result`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public Interest_payment_simulation_resultType Type { get; set; }
	}
	
	public class Interest_payment_simulation_resultTransaction
	{
		
		/// <summary>
		/// The identifier for the Account the Transaction belongs to.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="account_id")]
		public string Account_id { get; set; }
		
		/// <summary>
		/// The Transaction amount in the minor unit of its currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date on which the Transaction occured.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.DateTimeOffset Created_at { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the Transaction's currency. This will match the currency on the Transcation's Account.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public AccountCurrency Currency { get; set; }
		
		/// <summary>
		/// For a Transaction related to a transfer, this is the description you provide. For a Transaction related to a payment, this is the description the vendor provides.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The Transaction identifier.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The identifier for the route this Transaction came through. Routes are things like cards and ACH details.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="route_id")]
		public string Route_id { get; set; }
		
		/// <summary>
		/// The type of the route this Transaction came through.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="route_type")]
		public Declined_transactionRoute_type Route_type { get; set; }
		
		/// <summary>
		/// This is an object giving more details on the network-level event that caused the Transaction. Note that for backwards compatibility reasons, additional undocumented keys may appear in this object. These should be treated as deprecated and will be removed in the future.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="source")]
		public Interest_payment_simulation_resultTransactionSource Source { get; set; }
		
		/// <summary>
		/// A constant representing the object's type. For this resource it will always be `transaction`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public Inbound_ach_transfer_simulation_resultTransactionType Type { get; set; }
	}
	
	public class Interest_payment_simulation_resultTransactionSource
	{
		
		/// <summary>
		/// A Account Transfer Intention object. This field will be present in the JSON response if and only if `category` is equal to `account_transfer_intention`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="account_transfer_intention")]
		public Interest_payment_simulation_resultTransactionSourceAccount_transfer_intention Account_transfer_intention { get; set; }
		
		/// <summary>
		/// A ACH Check Conversion object. This field will be present in the JSON response if and only if `category` is equal to `ach_check_conversion`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ach_check_conversion")]
		public Interest_payment_simulation_resultTransactionSourceAch_check_conversion Ach_check_conversion { get; set; }
		
		/// <summary>
		/// A ACH Check Conversion Return object. This field will be present in the JSON response if and only if `category` is equal to `ach_check_conversion_return`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ach_check_conversion_return")]
		public Interest_payment_simulation_resultTransactionSourceAch_check_conversion_return Ach_check_conversion_return { get; set; }
		
		/// <summary>
		/// A ACH Transfer Intention object. This field will be present in the JSON response if and only if `category` is equal to `ach_transfer_intention`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ach_transfer_intention")]
		public Interest_payment_simulation_resultTransactionSourceAch_transfer_intention Ach_transfer_intention { get; set; }
		
		/// <summary>
		/// A ACH Transfer Rejection object. This field will be present in the JSON response if and only if `category` is equal to `ach_transfer_rejection`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ach_transfer_rejection")]
		public Interest_payment_simulation_resultTransactionSourceAch_transfer_rejection Ach_transfer_rejection { get; set; }
		
		/// <summary>
		/// A ACH Transfer Return object. This field will be present in the JSON response if and only if `category` is equal to `ach_transfer_return`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ach_transfer_return")]
		public Interest_payment_simulation_resultTransactionSourceAch_transfer_return Ach_transfer_return { get; set; }
		
		/// <summary>
		/// A Card Dispute Acceptance object. This field will be present in the JSON response if and only if `category` is equal to `card_dispute_acceptance`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="card_dispute_acceptance")]
		public Interest_payment_simulation_resultTransactionSourceCard_dispute_acceptance Card_dispute_acceptance { get; set; }
		
		/// <summary>
		/// A Card Refund object. This field will be present in the JSON response if and only if `category` is equal to `card_refund`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="card_refund")]
		public Interest_payment_simulation_resultTransactionSourceCard_refund Card_refund { get; set; }
		
		/// <summary>
		/// A Card Revenue Payment object. This field will be present in the JSON response if and only if `category` is equal to `card_revenue_payment`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="card_revenue_payment")]
		public Interest_payment_simulation_resultTransactionSourceCard_revenue_payment Card_revenue_payment { get; set; }
		
		/// <summary>
		/// A Deprecated Card Refund object. This field will be present in the JSON response if and only if `category` is equal to `card_route_refund`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="card_route_refund")]
		public Interest_payment_simulation_resultTransactionSourceCard_route_refund Card_route_refund { get; set; }
		
		/// <summary>
		/// A Deprecated Card Settlement object. This field will be present in the JSON response if and only if `category` is equal to `card_route_settlement`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="card_route_settlement")]
		public Interest_payment_simulation_resultTransactionSourceCard_route_settlement Card_route_settlement { get; set; }
		
		/// <summary>
		/// A Card Settlement object. This field will be present in the JSON response if and only if `category` is equal to `card_settlement`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="card_settlement")]
		public Interest_payment_simulation_resultTransactionSourceCard_settlement Card_settlement { get; set; }
		
		/// <summary>
		/// The type of transaction that took place. We may add additional possible values for this enum over time; your application should be able to handle such additions gracefully.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="category")]
		public Inbound_ach_transfer_simulation_resultTransactionSourceCategory Category { get; set; }
		
		/// <summary>
		/// A Check Deposit Acceptance object. This field will be present in the JSON response if and only if `category` is equal to `check_deposit_acceptance`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="check_deposit_acceptance")]
		public Interest_payment_simulation_resultTransactionSourceCheck_deposit_acceptance Check_deposit_acceptance { get; set; }
		
		/// <summary>
		/// A Check Deposit Return object. This field will be present in the JSON response if and only if `category` is equal to `check_deposit_return`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="check_deposit_return")]
		public Interest_payment_simulation_resultTransactionSourceCheck_deposit_return Check_deposit_return { get; set; }
		
		/// <summary>
		/// A Check Transfer Intention object. This field will be present in the JSON response if and only if `category` is equal to `check_transfer_intention`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="check_transfer_intention")]
		public Interest_payment_simulation_resultTransactionSourceCheck_transfer_intention Check_transfer_intention { get; set; }
		
		/// <summary>
		/// A Check Transfer Rejection object. This field will be present in the JSON response if and only if `category` is equal to `check_transfer_rejection`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="check_transfer_rejection")]
		public Interest_payment_simulation_resultTransactionSourceCheck_transfer_rejection Check_transfer_rejection { get; set; }
		
		/// <summary>
		/// A Check Transfer Return object. This field will be present in the JSON response if and only if `category` is equal to `check_transfer_return`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="check_transfer_return")]
		public Interest_payment_simulation_resultTransactionSourceCheck_transfer_return Check_transfer_return { get; set; }
		
		/// <summary>
		/// A Check Transfer Stop Payment Request object. This field will be present in the JSON response if and only if `category` is equal to `check_transfer_stop_payment_request`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="check_transfer_stop_payment_request")]
		public Interest_payment_simulation_resultTransactionSourceCheck_transfer_stop_payment_request Check_transfer_stop_payment_request { get; set; }
		
		/// <summary>
		/// A Dispute Resolution object. This field will be present in the JSON response if and only if `category` is equal to `dispute_resolution`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dispute_resolution")]
		public Interest_payment_simulation_resultTransactionSourceDispute_resolution Dispute_resolution { get; set; }
		
		/// <summary>
		/// A Empyreal Cash Deposit object. This field will be present in the JSON response if and only if `category` is equal to `empyreal_cash_deposit`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="empyreal_cash_deposit")]
		public Interest_payment_simulation_resultTransactionSourceEmpyreal_cash_deposit Empyreal_cash_deposit { get; set; }
		
		/// <summary>
		/// A Fee Payment object. This field will be present in the JSON response if and only if `category` is equal to `fee_payment`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fee_payment")]
		public Interest_payment_simulation_resultTransactionSourceFee_payment Fee_payment { get; set; }
		
		/// <summary>
		/// A Inbound ACH Transfer object. This field will be present in the JSON response if and only if `category` is equal to `inbound_ach_transfer`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="inbound_ach_transfer")]
		public Interest_payment_simulation_resultTransactionSourceInbound_ach_transfer Inbound_ach_transfer { get; set; }
		
		/// <summary>
		/// A Inbound Check object. This field will be present in the JSON response if and only if `category` is equal to `inbound_check`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="inbound_check")]
		public Interest_payment_simulation_resultTransactionSourceInbound_check Inbound_check { get; set; }
		
		/// <summary>
		/// A Inbound International ACH Transfer object. This field will be present in the JSON response if and only if `category` is equal to `inbound_international_ach_transfer`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="inbound_international_ach_transfer")]
		public Interest_payment_simulation_resultTransactionSourceInbound_international_ach_transfer Inbound_international_ach_transfer { get; set; }
		
		/// <summary>
		/// A Inbound Real Time Payments Transfer Confirmation object. This field will be present in the JSON response if and only if `category` is equal to `inbound_real_time_payments_transfer_confirmation`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="inbound_real_time_payments_transfer_confirmation")]
		public Interest_payment_simulation_resultTransactionSourceInbound_real_time_payments_transfer_confirmation Inbound_real_time_payments_transfer_confirmation { get; set; }
		
		/// <summary>
		/// A Inbound Wire Drawdown Payment object. This field will be present in the JSON response if and only if `category` is equal to `inbound_wire_drawdown_payment`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="inbound_wire_drawdown_payment")]
		public Interest_payment_simulation_resultTransactionSourceInbound_wire_drawdown_payment Inbound_wire_drawdown_payment { get; set; }
		
		/// <summary>
		/// A Inbound Wire Drawdown Payment Reversal object. This field will be present in the JSON response if and only if `category` is equal to `inbound_wire_drawdown_payment_reversal`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="inbound_wire_drawdown_payment_reversal")]
		public Interest_payment_simulation_resultTransactionSourceInbound_wire_drawdown_payment_reversal Inbound_wire_drawdown_payment_reversal { get; set; }
		
		/// <summary>
		/// A Inbound Wire Reversal object. This field will be present in the JSON response if and only if `category` is equal to `inbound_wire_reversal`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="inbound_wire_reversal")]
		public Interest_payment_simulation_resultTransactionSourceInbound_wire_reversal Inbound_wire_reversal { get; set; }
		
		/// <summary>
		/// A Inbound Wire Transfer object. This field will be present in the JSON response if and only if `category` is equal to `inbound_wire_transfer`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="inbound_wire_transfer")]
		public Interest_payment_simulation_resultTransactionSourceInbound_wire_transfer Inbound_wire_transfer { get; set; }
		
		/// <summary>
		/// A Interest Payment object. This field will be present in the JSON response if and only if `category` is equal to `interest_payment`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="interest_payment")]
		public Interest_payment_simulation_resultTransactionSourceInterest_payment Interest_payment { get; set; }
		
		/// <summary>
		/// A Internal Source object. This field will be present in the JSON response if and only if `category` is equal to `internal_source`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="internal_source")]
		public Interest_payment_simulation_resultTransactionSourceInternal_source Internal_source { get; set; }
		
		/// <summary>
		/// A Real Time Payments Transfer Acknowledgement object. This field will be present in the JSON response if and only if `category` is equal to `real_time_payments_transfer_acknowledgement`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="real_time_payments_transfer_acknowledgement")]
		public Interest_payment_simulation_resultTransactionSourceReal_time_payments_transfer_acknowledgement Real_time_payments_transfer_acknowledgement { get; set; }
		
		/// <summary>
		/// A Sample Funds object. This field will be present in the JSON response if and only if `category` is equal to `sample_funds`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sample_funds")]
		public Interest_payment_simulation_resultTransactionSourceSample_funds Sample_funds { get; set; }
		
		/// <summary>
		/// A Wire Drawdown Payment Intention object. This field will be present in the JSON response if and only if `category` is equal to `wire_drawdown_payment_intention`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="wire_drawdown_payment_intention")]
		public Interest_payment_simulation_resultTransactionSourceWire_drawdown_payment_intention Wire_drawdown_payment_intention { get; set; }
		
		/// <summary>
		/// A Wire Drawdown Payment Rejection object. This field will be present in the JSON response if and only if `category` is equal to `wire_drawdown_payment_rejection`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="wire_drawdown_payment_rejection")]
		public Interest_payment_simulation_resultTransactionSourceWire_drawdown_payment_rejection Wire_drawdown_payment_rejection { get; set; }
		
		/// <summary>
		/// A Wire Transfer Intention object. This field will be present in the JSON response if and only if `category` is equal to `wire_transfer_intention`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="wire_transfer_intention")]
		public Interest_payment_simulation_resultTransactionSourceWire_transfer_intention Wire_transfer_intention { get; set; }
		
		/// <summary>
		/// A Wire Transfer Rejection object. This field will be present in the JSON response if and only if `category` is equal to `wire_transfer_rejection`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="wire_transfer_rejection")]
		public Interest_payment_simulation_resultTransactionSourceWire_transfer_rejection Wire_transfer_rejection { get; set; }
	}
	
	public class Interest_payment_simulation_resultTransactionSourceAccount_transfer_intention
	{
		
		/// <summary>
		/// The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the destination account currency.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public AccountCurrency Currency { get; set; }
		
		/// <summary>
		/// The description you chose to give the transfer.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The identifier of the Account to where the Account Transfer was sent.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="destination_account_id")]
		public string Destination_account_id { get; set; }
		
		/// <summary>
		/// The identifier of the Account from where the Account Transfer was sent.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="source_account_id")]
		public string Source_account_id { get; set; }
		
		/// <summary>
		/// The identifier of the Account Transfer that led to this Pending Transaction.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transfer_id")]
		public string Transfer_id { get; set; }
	}
	
	public class Interest_payment_simulation_resultTransactionSourceAch_check_conversion
	{
		
		/// <summary>
		/// The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The identifier of the File containing an image of the returned check.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="file_id")]
		public string File_id { get; set; }
	}
	
	public class Interest_payment_simulation_resultTransactionSourceAch_check_conversion_return
	{
		
		/// <summary>
		/// The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// Why the transfer was returned.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="return_reason_code")]
		public string Return_reason_code { get; set; }
	}
	
	public class Interest_payment_simulation_resultTransactionSourceAch_transfer_intention
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="account_number")]
		public string Account_number { get; set; }
		
		/// <summary>
		/// The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="routing_number")]
		public string Routing_number { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="statement_descriptor")]
		public string Statement_descriptor { get; set; }
		
		/// <summary>
		/// The identifier of the ACH Transfer that led to this Transaction.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transfer_id")]
		public string Transfer_id { get; set; }
	}
	
	public class Interest_payment_simulation_resultTransactionSourceAch_transfer_rejection
	{
		
		/// <summary>
		/// The identifier of the ACH Transfer that led to this Transaction.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transfer_id")]
		public string Transfer_id { get; set; }
	}
	
	public class Interest_payment_simulation_resultTransactionSourceAch_transfer_return
	{
		
		/// <summary>
		/// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was created.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.DateTimeOffset Created_at { get; set; }
		
		/// <summary>
		/// Why the ACH Transfer was returned.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="return_reason_code")]
		public Ach_transferReturnReturn_reason_code Return_reason_code { get; set; }
		
		/// <summary>
		/// The identifier of the Tranasaction associated with this return.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transaction_id")]
		public string Transaction_id { get; set; }
		
		/// <summary>
		/// The identifier of the ACH Transfer associated with this return.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transfer_id")]
		public string Transfer_id { get; set; }
	}
	
	public class Interest_payment_simulation_resultTransactionSourceCard_dispute_acceptance
	{
		
		/// <summary>
		/// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Card Dispute was accepted.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="accepted_at")]
		public System.DateTimeOffset Accepted_at { get; set; }
		
		/// <summary>
		/// The identifier of the Card Dispute that was accepted.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="card_dispute_id")]
		public string Card_dispute_id { get; set; }
		
		/// <summary>
		/// The identifier of the Transaction that was created to return the disputed funds to your account.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transaction_id")]
		public string Transaction_id { get; set; }
	}
	
	public class Interest_payment_simulation_resultTransactionSourceCard_refund
	{
		
		/// <summary>
		/// The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The identifier for the Transaction this refunds, if any.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="card_settlement_transaction_id")]
		public string Card_settlement_transaction_id { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public AccountCurrency Currency { get; set; }
		
		/// <summary>
		/// The Card Refund identifier.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The merchant identifier (commonly abbreviated as MID) of the merchant the card is transacting with.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_acceptor_id")]
		public string Merchant_acceptor_id { get; set; }
		
		/// <summary>
		/// The 4-digit MCC describing the merchant's business.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_category_code")]
		public string Merchant_category_code { get; set; }
		
		/// <summary>
		/// The city the merchant resides in.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_city")]
		public string Merchant_city { get; set; }
		
		/// <summary>
		/// The country the merchant resides in.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_country")]
		public string Merchant_country { get; set; }
		
		/// <summary>
		/// The name of the merchant.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_name")]
		public string Merchant_name { get; set; }
		
		/// <summary>
		/// The state the merchant resides in.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_state")]
		public string Merchant_state { get; set; }
		
		/// <summary>
		/// A constant representing the object's type. For this resource it will always be `card_refund`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public Inbound_ach_transfer_simulation_resultTransactionSourceCard_refundType Type { get; set; }
	}
	
	public class Interest_payment_simulation_resultTransactionSourceCard_revenue_payment
	{
		
		/// <summary>
		/// The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction currency.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public AccountCurrency Currency { get; set; }
		
		/// <summary>
		/// The end of the period for which this transaction paid interest.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="period_end")]
		public System.DateTimeOffset Period_end { get; set; }
		
		/// <summary>
		/// The start of the period for which this transaction paid interest.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="period_start")]
		public System.DateTimeOffset Period_start { get; set; }
		
		/// <summary>
		/// The account the card belonged to.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transacted_on_account_id")]
		public string Transacted_on_account_id { get; set; }
	}
	
	public class Interest_payment_simulation_resultTransactionSourceCard_route_refund
	{
		
		/// <summary>
		/// The refunded amount in the minor unit of the refunded currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the refund currency.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public AccountCurrency Currency { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_acceptor_id")]
		public string Merchant_acceptor_id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_category_code")]
		public string Merchant_category_code { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_city")]
		public string Merchant_city { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_country")]
		public string Merchant_country { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_descriptor")]
		public string Merchant_descriptor { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_state")]
		public string Merchant_state { get; set; }
	}
	
	public class Interest_payment_simulation_resultTransactionSourceCard_route_settlement
	{
		
		/// <summary>
		/// The settled amount in the minor unit of the settlement currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the settlement currency.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public AccountCurrency Currency { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_acceptor_id")]
		public string Merchant_acceptor_id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_category_code")]
		public string Merchant_category_code { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_city")]
		public string Merchant_city { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_country")]
		public string Merchant_country { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_descriptor")]
		public string Merchant_descriptor { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_state")]
		public string Merchant_state { get; set; }
	}
	
	public class Interest_payment_simulation_resultTransactionSourceCard_settlement
	{
		
		/// <summary>
		/// The amount in the minor unit of the transaction's settlement currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The Card Authorization that was created prior to this Card Settlement, if on exists.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="card_authorization")]
		public string Card_authorization { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's settlement currency.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public AccountCurrency Currency { get; set; }
		
		/// <summary>
		/// The Card Settlement identifier.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The merchant identifier (commonly abbreviated as MID) of the merchant the card is transacting with.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_acceptor_id")]
		public string Merchant_acceptor_id { get; set; }
		
		/// <summary>
		/// The 4-digit MCC describing the merchant's business.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_category_code")]
		public string Merchant_category_code { get; set; }
		
		/// <summary>
		/// The city the merchant resides in.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_city")]
		public string Merchant_city { get; set; }
		
		/// <summary>
		/// The country the merchant resides in.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_country")]
		public string Merchant_country { get; set; }
		
		/// <summary>
		/// The name of the merchant.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_name")]
		public string Merchant_name { get; set; }
		
		/// <summary>
		/// The state the merchant resides in.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_state")]
		public string Merchant_state { get; set; }
		
		/// <summary>
		/// The identifier of the Pending Transaction associated with this Transaction.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pending_transaction_id")]
		public string Pending_transaction_id { get; set; }
		
		/// <summary>
		/// The amount in the minor unit of the transaction's presentment currency.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="presentment_amount")]
		public int Presentment_amount { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's presentment currency.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="presentment_currency")]
		public string Presentment_currency { get; set; }
		
		/// <summary>
		/// A constant representing the object's type. For this resource it will always be `card_settlement`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public Inbound_ach_transfer_simulation_resultTransactionSourceCard_settlementType Type { get; set; }
	}
	
	public class Interest_payment_simulation_resultTransactionSourceCheck_deposit_acceptance
	{
		
		/// <summary>
		/// The account number printed on the check.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="account_number")]
		public string Account_number { get; set; }
		
		/// <summary>
		/// The amount to be deposited in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// An additional line of metadata printed on the check. This typically includes the check number for business checks.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="auxiliary_on_us")]
		public string Auxiliary_on_us { get; set; }
		
		/// <summary>
		/// The ID of the Check Deposit that was accepted.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="check_deposit_id")]
		public string Check_deposit_id { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public AccountCurrency Currency { get; set; }
		
		/// <summary>
		/// The routing number printed on the check.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="routing_number")]
		public string Routing_number { get; set; }
		
		/// <summary>
		/// The check serial number, if present, for consumer checks. For business checks, the serial number is usually in the `auxiliary_on_us` field.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="serial_number")]
		public string Serial_number { get; set; }
	}
	
	public class Interest_payment_simulation_resultTransactionSourceCheck_deposit_return
	{
		
		/// <summary>
		/// The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The identifier of the Check Deposit that was returned.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="check_deposit_id")]
		public string Check_deposit_id { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public AccountCurrency Currency { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="return_reason")]
		public Check_depositDeposit_returnReturn_reason Return_reason { get; set; }
		
		/// <summary>
		/// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the check deposit was returned.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="returned_at")]
		public System.DateTimeOffset Returned_at { get; set; }
		
		/// <summary>
		/// The identifier of the transaction that reversed the original check deposit transaction.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transaction_id")]
		public string Transaction_id { get; set; }
	}
	
	public class Interest_payment_simulation_resultTransactionSourceCheck_transfer_intention
	{
		
		/// <summary>
		/// The city of the check's destination.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="address_city")]
		public string Address_city { get; set; }
		
		/// <summary>
		/// The street address of the check's destination.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="address_line1")]
		public string Address_line1 { get; set; }
		
		/// <summary>
		/// The second line of the address of the check's destination.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="address_line2")]
		public string Address_line2 { get; set; }
		
		/// <summary>
		/// The state of the check's destination.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="address_state")]
		public string Address_state { get; set; }
		
		/// <summary>
		/// The postal code of the check's destination.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="address_zip")]
		public string Address_zip { get; set; }
		
		/// <summary>
		/// The transfer amount in USD cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the check's currency.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public AccountCurrency Currency { get; set; }
		
		/// <summary>
		/// The name that will be printed on the check.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="recipient_name")]
		public string Recipient_name { get; set; }
		
		/// <summary>
		/// The identifier of the Check Transfer with which this is associated.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transfer_id")]
		public string Transfer_id { get; set; }
	}
	
	public class Interest_payment_simulation_resultTransactionSourceCheck_transfer_rejection
	{
		
		/// <summary>
		/// The identifier of the Check Transfer that led to this Transaction.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transfer_id")]
		public string Transfer_id { get; set; }
	}
	
	public class Interest_payment_simulation_resultTransactionSourceCheck_transfer_return
	{
		
		/// <summary>
		/// If available, a document with additional information about the return.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="file_id")]
		public string File_id { get; set; }
		
		/// <summary>
		/// The reason why the check was returned.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public Check_transferReturn_detailsReason Reason { get; set; }
		
		/// <summary>
		/// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the check was returned.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="returned_at")]
		public System.DateTimeOffset Returned_at { get; set; }
		
		/// <summary>
		/// The identifier of the Transaction that was created to credit you for the returned check.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transaction_id")]
		public string Transaction_id { get; set; }
		
		/// <summary>
		/// The identifier of the returned Check Transfer.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transfer_id")]
		public string Transfer_id { get; set; }
	}
	
	public class Interest_payment_simulation_resultTransactionSourceCheck_transfer_stop_payment_request
	{
		
		/// <summary>
		/// The time the stop-payment was requested.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="requested_at")]
		public System.DateTimeOffset Requested_at { get; set; }
		
		/// <summary>
		/// The transaction ID of the corresponding credit transaction.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transaction_id")]
		public string Transaction_id { get; set; }
		
		/// <summary>
		/// The ID of the check transfer that was stopped.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transfer_id")]
		public string Transfer_id { get; set; }
		
		/// <summary>
		/// A constant representing the object's type. For this resource it will always be `check_transfer_stop_payment_request`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public Check_transferStop_payment_requestType Type { get; set; }
	}
	
	public class Interest_payment_simulation_resultTransactionSourceDispute_resolution
	{
		
		/// <summary>
		/// The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public AccountCurrency Currency { get; set; }
		
		/// <summary>
		/// The identifier of the Transaction that was disputed.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="disputed_transaction_id")]
		public string Disputed_transaction_id { get; set; }
	}
	
	public class Interest_payment_simulation_resultTransactionSourceEmpyreal_cash_deposit
	{
		
		/// <summary>
		/// The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="bag_id")]
		public string Bag_id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="deposit_date")]
		public System.DateTimeOffset Deposit_date { get; set; }
	}
	
	public class Interest_payment_simulation_resultTransactionSourceFee_payment
	{
		
		/// <summary>
		/// The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction currency.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public AccountCurrency Currency { get; set; }
	}
	
	public class Interest_payment_simulation_resultTransactionSourceInbound_ach_transfer
	{
		
		/// <summary>
		/// The amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_company_descriptive_date")]
		public string Originator_company_descriptive_date { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_company_discretionary_data")]
		public string Originator_company_discretionary_data { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_company_entry_description")]
		public string Originator_company_entry_description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_company_id")]
		public string Originator_company_id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_company_name")]
		public string Originator_company_name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiver_id_number")]
		public string Receiver_id_number { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiver_name")]
		public string Receiver_name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="trace_number")]
		public string Trace_number { get; set; }
	}
	
	public class Interest_payment_simulation_resultTransactionSourceInbound_check
	{
		
		/// <summary>
		/// The amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="check_front_image_file_id")]
		public string Check_front_image_file_id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="check_number")]
		public string Check_number { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="check_rear_image_file_id")]
		public string Check_rear_image_file_id { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public AccountCurrency Currency { get; set; }
	}
	
	public class Interest_payment_simulation_resultTransactionSourceInbound_international_ach_transfer
	{
		
		/// <summary>
		/// The amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="destination_country_code")]
		public string Destination_country_code { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="destination_currency_code")]
		public string Destination_currency_code { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="foreign_exchange_indicator")]
		public string Foreign_exchange_indicator { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="foreign_exchange_reference")]
		public string Foreign_exchange_reference { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="foreign_exchange_reference_indicator")]
		public string Foreign_exchange_reference_indicator { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="foreign_payment_amount")]
		public int Foreign_payment_amount { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="foreign_trace_number")]
		public string Foreign_trace_number { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="international_transaction_type_code")]
		public string International_transaction_type_code { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originating_currency_code")]
		public string Originating_currency_code { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originating_depository_financial_institution_branch_country")]
		public string Originating_depository_financial_institution_branch_country { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originating_depository_financial_institution_id")]
		public string Originating_depository_financial_institution_id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originating_depository_financial_institution_id_qualifier")]
		public string Originating_depository_financial_institution_id_qualifier { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originating_depository_financial_institution_name")]
		public string Originating_depository_financial_institution_name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_city")]
		public string Originator_city { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_company_entry_description")]
		public string Originator_company_entry_description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_country")]
		public string Originator_country { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_identification")]
		public string Originator_identification { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_name")]
		public string Originator_name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_postal_code")]
		public string Originator_postal_code { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_state_or_province")]
		public string Originator_state_or_province { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_street_address")]
		public string Originator_street_address { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="payment_related_information")]
		public string Payment_related_information { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="payment_related_information2")]
		public string Payment_related_information2 { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiver_city")]
		public string Receiver_city { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiver_country")]
		public string Receiver_country { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiver_identification_number")]
		public string Receiver_identification_number { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiver_postal_code")]
		public string Receiver_postal_code { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiver_state_or_province")]
		public string Receiver_state_or_province { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiver_street_address")]
		public string Receiver_street_address { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiving_company_or_individual_name")]
		public string Receiving_company_or_individual_name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiving_depository_financial_institution_country")]
		public string Receiving_depository_financial_institution_country { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiving_depository_financial_institution_id")]
		public string Receiving_depository_financial_institution_id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiving_depository_financial_institution_id_qualifier")]
		public string Receiving_depository_financial_institution_id_qualifier { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiving_depository_financial_institution_name")]
		public string Receiving_depository_financial_institution_name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="trace_number")]
		public string Trace_number { get; set; }
	}
	
	public class Interest_payment_simulation_resultTransactionSourceInbound_real_time_payments_transfer_confirmation
	{
		
		/// <summary>
		/// The amount in the minor unit of the transfer's currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The name the sender of the transfer specified as the recipient of the transfer.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="creditor_name")]
		public string Creditor_name { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code of the transfer's currency. This will always be "USD" for a Real Time Payments transfer.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public AccountCurrency Currency { get; set; }
		
		/// <summary>
		/// The account number of the account that sent the transfer.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="debtor_account_number")]
		public string Debtor_account_number { get; set; }
		
		/// <summary>
		/// The name provided by the sender of the transfer.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="debtor_name")]
		public string Debtor_name { get; set; }
		
		/// <summary>
		/// The routing number of the account that sent the transfer.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="debtor_routing_number")]
		public string Debtor_routing_number { get; set; }
		
		/// <summary>
		/// Additional information included with the transfer.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="remittance_information")]
		public string Remittance_information { get; set; }
		
		/// <summary>
		/// The Real Time Payments network identification of the transfer
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transaction_identification")]
		public string Transaction_identification { get; set; }
	}
	
	public class Interest_payment_simulation_resultTransactionSourceInbound_wire_drawdown_payment
	{
		
		/// <summary>
		/// The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="beneficiary_address_line1")]
		public string Beneficiary_address_line1 { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="beneficiary_address_line2")]
		public string Beneficiary_address_line2 { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="beneficiary_address_line3")]
		public string Beneficiary_address_line3 { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="beneficiary_name")]
		public string Beneficiary_name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="beneficiary_reference")]
		public string Beneficiary_reference { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="input_message_accountability_data")]
		public string Input_message_accountability_data { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_address_line1")]
		public string Originator_address_line1 { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_address_line2")]
		public string Originator_address_line2 { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_address_line3")]
		public string Originator_address_line3 { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_name")]
		public string Originator_name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_to_beneficiary_information")]
		public string Originator_to_beneficiary_information { get; set; }
	}
	
	public class Interest_payment_simulation_resultTransactionSourceInbound_wire_drawdown_payment_reversal
	{
		
		/// <summary>
		/// The amount that was reversed.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The description on the reversal message from Fedwire.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The Fedwire cycle date for the wire reversal.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="input_cycle_date")]
		public System.DateOnly Input_cycle_date { get; set; }
		
		/// <summary>
		/// The Fedwire transaction identifier.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="input_message_accountability_data")]
		public string Input_message_accountability_data { get; set; }
		
		/// <summary>
		/// The Fedwire sequence number.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="input_sequence_number")]
		public string Input_sequence_number { get; set; }
		
		/// <summary>
		/// The Fedwire input source identifier.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="input_source")]
		public string Input_source { get; set; }
		
		/// <summary>
		/// The Fedwire cycle date for the wire transfer that was reversed.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="previous_message_input_cycle_date")]
		public System.DateOnly Previous_message_input_cycle_date { get; set; }
		
		/// <summary>
		/// The Fedwire transaction identifier for the wire transfer that was reversed.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="previous_message_input_message_accountability_data")]
		public string Previous_message_input_message_accountability_data { get; set; }
		
		/// <summary>
		/// The Fedwire sequence number for the wire transfer that was reversed.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="previous_message_input_sequence_number")]
		public string Previous_message_input_sequence_number { get; set; }
		
		/// <summary>
		/// The Fedwire input source identifier for the wire transfer that was reversed.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="previous_message_input_source")]
		public string Previous_message_input_source { get; set; }
	}
	
	public class Interest_payment_simulation_resultTransactionSourceInbound_wire_reversal
	{
		
		/// <summary>
		/// The amount that was reversed.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the reversal was created.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.DateTimeOffset Created_at { get; set; }
		
		/// <summary>
		/// The description on the reversal message from Fedwire.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Additional financial institution information included in the wire reversal.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="financial_institution_to_financial_institution_information")]
		public string Financial_institution_to_financial_institution_information { get; set; }
		
		/// <summary>
		/// The Fedwire cycle date for the wire reversal.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="input_cycle_date")]
		public System.DateOnly Input_cycle_date { get; set; }
		
		/// <summary>
		/// The Fedwire transaction identifier.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="input_message_accountability_data")]
		public string Input_message_accountability_data { get; set; }
		
		/// <summary>
		/// The Fedwire sequence number.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="input_sequence_number")]
		public string Input_sequence_number { get; set; }
		
		/// <summary>
		/// The Fedwire input source identifier.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="input_source")]
		public string Input_source { get; set; }
		
		/// <summary>
		/// The Fedwire cycle date for the wire transfer that was reversed.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="previous_message_input_cycle_date")]
		public System.DateOnly Previous_message_input_cycle_date { get; set; }
		
		/// <summary>
		/// The Fedwire transaction identifier for the wire transfer that was reversed.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="previous_message_input_message_accountability_data")]
		public string Previous_message_input_message_accountability_data { get; set; }
		
		/// <summary>
		/// The Fedwire sequence number for the wire transfer that was reversed.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="previous_message_input_sequence_number")]
		public string Previous_message_input_sequence_number { get; set; }
		
		/// <summary>
		/// The Fedwire input source identifier for the wire transfer that was reversed.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="previous_message_input_source")]
		public string Previous_message_input_source { get; set; }
		
		/// <summary>
		/// Information included in the wire reversal for the receiving financial institution.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiver_financial_institution_information")]
		public string Receiver_financial_institution_information { get; set; }
		
		/// <summary>
		/// The ID for the Transaction associated with the transfer reversal.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transaction_id")]
		public string Transaction_id { get; set; }
	}
	
	public class Interest_payment_simulation_resultTransactionSourceInbound_wire_transfer
	{
		
		/// <summary>
		/// The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="beneficiary_address_line1")]
		public string Beneficiary_address_line1 { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="beneficiary_address_line2")]
		public string Beneficiary_address_line2 { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="beneficiary_address_line3")]
		public string Beneficiary_address_line3 { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="beneficiary_name")]
		public string Beneficiary_name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="beneficiary_reference")]
		public string Beneficiary_reference { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="input_message_accountability_data")]
		public string Input_message_accountability_data { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_address_line1")]
		public string Originator_address_line1 { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_address_line2")]
		public string Originator_address_line2 { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_address_line3")]
		public string Originator_address_line3 { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_name")]
		public string Originator_name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_to_beneficiary_information")]
		public string Originator_to_beneficiary_information { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_to_beneficiary_information_line1")]
		public string Originator_to_beneficiary_information_line1 { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_to_beneficiary_information_line2")]
		public string Originator_to_beneficiary_information_line2 { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_to_beneficiary_information_line3")]
		public string Originator_to_beneficiary_information_line3 { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_to_beneficiary_information_line4")]
		public string Originator_to_beneficiary_information_line4 { get; set; }
	}
	
	public class Interest_payment_simulation_resultTransactionSourceInterest_payment
	{
		
		/// <summary>
		/// The account on which the interest was accrued.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="accrued_on_account_id")]
		public string Accrued_on_account_id { get; set; }
		
		/// <summary>
		/// The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction currency.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public AccountCurrency Currency { get; set; }
		
		/// <summary>
		/// The end of the period for which this transaction paid interest.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="period_end")]
		public System.DateTimeOffset Period_end { get; set; }
		
		/// <summary>
		/// The start of the period for which this transaction paid interest.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="period_start")]
		public System.DateTimeOffset Period_start { get; set; }
	}
	
	public class Interest_payment_simulation_resultTransactionSourceInternal_source
	{
		
		/// <summary>
		/// The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction currency.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public AccountCurrency Currency { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public Inbound_ach_transfer_simulation_resultTransactionSourceInternal_sourceReason Reason { get; set; }
	}
	
	public class Interest_payment_simulation_resultTransactionSourceReal_time_payments_transfer_acknowledgement
	{
		
		/// <summary>
		/// The transfer amount in USD cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The destination account number.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="destination_account_number")]
		public string Destination_account_number { get; set; }
		
		/// <summary>
		/// The American Bankers' Association (ABA) Routing Transit Number (RTN).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="destination_routing_number")]
		public string Destination_routing_number { get; set; }
		
		/// <summary>
		/// Unstructured information that will show on the recipient's bank statement.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="remittance_information")]
		public string Remittance_information { get; set; }
		
		/// <summary>
		/// The identifier of the Real Time Payments Transfer that led to this Transaction.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transfer_id")]
		public string Transfer_id { get; set; }
	}
	
	public class Interest_payment_simulation_resultTransactionSourceSample_funds
	{
		
		/// <summary>
		/// Where the sample funds came from.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator")]
		public string Originator { get; set; }
	}
	
	public class Interest_payment_simulation_resultTransactionSourceWire_drawdown_payment_intention
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="account_number")]
		public string Account_number { get; set; }
		
		/// <summary>
		/// The transfer amount in USD cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="message_to_recipient")]
		public string Message_to_recipient { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="routing_number")]
		public string Routing_number { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transfer_id")]
		public string Transfer_id { get; set; }
	}
	
	public class Interest_payment_simulation_resultTransactionSourceWire_drawdown_payment_rejection
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transfer_id")]
		public string Transfer_id { get; set; }
	}
	
	public class Interest_payment_simulation_resultTransactionSourceWire_transfer_intention
	{
		
		/// <summary>
		/// The destination account number.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="account_number")]
		public string Account_number { get; set; }
		
		/// <summary>
		/// The transfer amount in USD cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The message that will show on the recipient's bank statement.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="message_to_recipient")]
		public string Message_to_recipient { get; set; }
		
		/// <summary>
		/// The American Bankers' Association (ABA) Routing Transit Number (RTN).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="routing_number")]
		public string Routing_number { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transfer_id")]
		public string Transfer_id { get; set; }
	}
	
	public class Interest_payment_simulation_resultTransactionSourceWire_transfer_rejection
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transfer_id")]
		public string Transfer_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Interest_payment_simulation_resultType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="interest_payment_simulation_result")]
		interest_payment_simulation_result = 0,
	}
	
	/// <summary>
	/// You can set limits at the Account, Account Number, or Card level. Limits applied to Accounts will apply to all Account Numbers and Cards in the Account. You can specify any number of Limits and they will all be applied to inbound debits and card authorizations. Volume and count Limits are designed to prevent unauthorized debits.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Limit
	{
		
		/// <summary>
		/// The Limit identifier.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The interval for the metric. This is required if `metric` is `count` or `volume`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="interval")]
		public Create_a_limit_parametersInterval Interval { get; set; }
		
		/// <summary>
		/// The metric for the Limit.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="metric")]
		public Create_a_limit_parametersMetric Metric { get; set; }
		
		/// <summary>
		/// The identifier of the Account Number, Account, or Card the Limit applies to.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="model_id")]
		public string Model_id { get; set; }
		
		/// <summary>
		/// The type of the model you wish to associate the Limit with.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="model_type")]
		public LimitModel_type Model_type { get; set; }
		
		/// <summary>
		/// The current status of the Limit.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public LimitStatus Status { get; set; }
		
		/// <summary>
		/// A constant representing the object's type. For this resource it will always be `limit`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public LimitType Type { get; set; }
		
		/// <summary>
		/// The value to evaluate the Limit against.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public int Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum LimitModel_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="account")]
		account = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="account_number")]
		account_number = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="card")]
		card = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum LimitStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="active")]
		active = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="inactive")]
		inactive = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum LimitType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="limit")]
		limit = 0,
	}
	
	/// <summary>
	/// A list of Limit objects
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Limit_list
	{
		
		/// <summary>
		/// The contents of the list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Limit[] Data { get; set; }
		
		/// <summary>
		/// A pointer to a place in the list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="next_cursor")]
		public string Next_cursor { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Look_up_the_balance_for_an_account_parameters
	{
		
		/// <summary>
		/// The Account to query the balance for.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="account_id")]
		public string Account_id { get; set; }
	}
	
	/// <summary>
	/// When a user authorizes your OAuth application, an OAuth Connection object is created.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Oauth_connection
	{
		
		/// <summary>
		/// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp when the OAuth Connection was created.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.DateTimeOffset Created_at { get; set; }
		
		/// <summary>
		/// The identifier of the Group that has authorized your OAuth application.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="group_id")]
		public string Group_id { get; set; }
		
		/// <summary>
		/// The OAuth Connection's identifier.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Whether the connection is active.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public LimitStatus Status { get; set; }
		
		/// <summary>
		/// A constant representing the object's type. For this resource it will always be `oauth_connection`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public Oauth_connectionType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Oauth_connectionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="oauth_connection")]
		oauth_connection = 0,
	}
	
	/// <summary>
	/// A list of OAuth Connection objects
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Oauth_connection_list
	{
		
		/// <summary>
		/// The contents of the list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Oauth_connection[] Data { get; set; }
		
		/// <summary>
		/// A pointer to a place in the list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="next_cursor")]
		public string Next_cursor { get; set; }
	}
	
	/// <summary>
	/// Pending Transactions are potential future additions and removals of money from your bank account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Pending_transaction
	{
		
		/// <summary>
		/// The identifier for the account this Pending Transaction belongs to.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="account_id")]
		public string Account_id { get; set; }
		
		/// <summary>
		/// The Pending Transaction amount in the minor unit of its currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date on which the Pending Transaction was completed.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="completed_at")]
		public System.Nullable<System.DateTimeOffset> Completed_at { get; set; }
		
		/// <summary>
		/// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date on which the Pending Transaction occured.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.DateTimeOffset Created_at { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the Pending Transaction's currency. This will match the currency on the Pending Transcation's Account.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public AccountCurrency Currency { get; set; }
		
		/// <summary>
		/// For a Pending Transaction related to a transfer, this is the description you provide. For a Pending Transaction related to a payment, this is the description the vendor provides.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The Pending Transaction identifier.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The identifier for the route this Pending Transaction came through. Routes are things like cards and ACH details.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="route_id")]
		public string Route_id { get; set; }
		
		/// <summary>
		/// The type of the route this Pending Transaction came through.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="route_type")]
		public Declined_transactionRoute_type Route_type { get; set; }
		
		/// <summary>
		/// This is an object giving more details on the network-level event that caused the Pending Transaction. For example, for a card transaction this lists the merchant's industry and location.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="source")]
		public Pending_transactionSource Source { get; set; }
		
		/// <summary>
		/// Whether the Pending Transaction has been confirmed and has an associated Transaction.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ExportStatus Status { get; set; }
		
		/// <summary>
		/// A constant representing the object's type. For this resource it will always be `pending_transaction`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public Inbound_card_authorization_simulation_resultPending_transactionType Type { get; set; }
	}
	
	public class Pending_transactionSource
	{
		
		/// <summary>
		/// A Account Transfer Instruction object. This field will be present in the JSON response if and only if `category` is equal to `account_transfer_instruction`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="account_transfer_instruction")]
		public Pending_transactionSourceAccount_transfer_instruction Account_transfer_instruction { get; set; }
		
		/// <summary>
		/// A ACH Transfer Instruction object. This field will be present in the JSON response if and only if `category` is equal to `ach_transfer_instruction`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ach_transfer_instruction")]
		public Pending_transactionSourceAch_transfer_instruction Ach_transfer_instruction { get; set; }
		
		/// <summary>
		/// A Card Authorization object. This field will be present in the JSON response if and only if `category` is equal to `card_authorization`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="card_authorization")]
		public Pending_transactionSourceCard_authorization Card_authorization { get; set; }
		
		/// <summary>
		/// A Deprecated Card Authorization object. This field will be present in the JSON response if and only if `category` is equal to `card_route_authorization`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="card_route_authorization")]
		public Pending_transactionSourceCard_route_authorization Card_route_authorization { get; set; }
		
		/// <summary>
		/// The type of transaction that took place. We may add additional possible values for this enum over time; your application should be able to handle such additions gracefully.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="category")]
		public Inbound_card_authorization_simulation_resultPending_transactionSourceCategory Category { get; set; }
		
		/// <summary>
		/// A Check Deposit Instruction object. This field will be present in the JSON response if and only if `category` is equal to `check_deposit_instruction`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="check_deposit_instruction")]
		public Pending_transactionSourceCheck_deposit_instruction Check_deposit_instruction { get; set; }
		
		/// <summary>
		/// A Check Transfer Instruction object. This field will be present in the JSON response if and only if `category` is equal to `check_transfer_instruction`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="check_transfer_instruction")]
		public Pending_transactionSourceCheck_transfer_instruction Check_transfer_instruction { get; set; }
		
		/// <summary>
		/// A Inbound Funds Hold object. This field will be present in the JSON response if and only if `category` is equal to `inbound_funds_hold`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="inbound_funds_hold")]
		public Pending_transactionSourceInbound_funds_hold Inbound_funds_hold { get; set; }
		
		/// <summary>
		/// A Real Time Payments Transfer Instruction object. This field will be present in the JSON response if and only if `category` is equal to `real_time_payments_transfer_instruction`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="real_time_payments_transfer_instruction")]
		public Pending_transactionSourceReal_time_payments_transfer_instruction Real_time_payments_transfer_instruction { get; set; }
		
		/// <summary>
		/// A Wire Drawdown Payment Instruction object. This field will be present in the JSON response if and only if `category` is equal to `wire_drawdown_payment_instruction`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="wire_drawdown_payment_instruction")]
		public Pending_transactionSourceWire_drawdown_payment_instruction Wire_drawdown_payment_instruction { get; set; }
		
		/// <summary>
		/// A Wire Transfer Instruction object. This field will be present in the JSON response if and only if `category` is equal to `wire_transfer_instruction`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="wire_transfer_instruction")]
		public Pending_transactionSourceWire_transfer_instruction Wire_transfer_instruction { get; set; }
	}
	
	public class Pending_transactionSourceAccount_transfer_instruction
	{
		
		/// <summary>
		/// The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the destination account currency.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public AccountCurrency Currency { get; set; }
		
		/// <summary>
		/// The identifier of the Account Transfer that led to this Pending Transaction.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transfer_id")]
		public string Transfer_id { get; set; }
	}
	
	public class Pending_transactionSourceAch_transfer_instruction
	{
		
		/// <summary>
		/// The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The identifier of the ACH Transfer that led to this Pending Transaction.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transfer_id")]
		public string Transfer_id { get; set; }
	}
	
	public class Pending_transactionSourceCard_authorization
	{
		
		/// <summary>
		/// The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public AccountCurrency Currency { get; set; }
		
		/// <summary>
		/// If the authorization was made via a Digital Wallet Token (such as an Apple Pay purchase), the identifier of the token that was used.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="digital_wallet_token_id")]
		public string Digital_wallet_token_id { get; set; }
		
		/// <summary>
		/// The Card Authorization identifier.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The merchant identifier (commonly abbreviated as MID) of the merchant the card is transacting with.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_acceptor_id")]
		public string Merchant_acceptor_id { get; set; }
		
		/// <summary>
		/// The Merchant Category Code (commonly abbreviated as MCC) of the merchant the card is transacting with.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_category_code")]
		public string Merchant_category_code { get; set; }
		
		/// <summary>
		/// The city the merchant resides in.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_city")]
		public string Merchant_city { get; set; }
		
		/// <summary>
		/// The country the merchant resides in.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_country")]
		public string Merchant_country { get; set; }
		
		/// <summary>
		/// The merchant descriptor of the merchant the card is transacting with.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_descriptor")]
		public string Merchant_descriptor { get; set; }
		
		/// <summary>
		/// The payment network used to process this card authorization
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="network")]
		public Declined_transactionSourceCard_declineNetwork Network { get; set; }
		
		/// <summary>
		/// Fields specific to the `network`
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="network_details")]
		public Pending_transactionSourceCard_authorizationNetwork_details Network_details { get; set; }
		
		/// <summary>
		/// The identifier of the Real-Time Decision sent to approve or decline this transaction.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="real_time_decision_id")]
		public string Real_time_decision_id { get; set; }
		
		/// <summary>
		/// A constant representing the object's type. For this resource it will always be `card_authorization`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public Inbound_card_authorization_simulation_resultPending_transactionSourceCard_authorizationType Type { get; set; }
	}
	
	public class Pending_transactionSourceCard_authorizationNetwork_details
	{
		
		/// <summary>
		/// Fields specific to the `visa` network
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="visa")]
		public Pending_transactionSourceCard_authorizationNetwork_detailsVisa Visa { get; set; }
	}
	
	public class Pending_transactionSourceCard_authorizationNetwork_detailsVisa
	{
		
		/// <summary>
		/// For electronic commerce transactions, this identifies the level of security used in obtaining the customer's payment credential. For mail or telephone order transactions, identifies the type of mail or telephone order.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="electronic_commerce_indicator")]
		public Declined_transactionSourceCard_declineNetwork_detailsVisaElectronic_commerce_indicator Electronic_commerce_indicator { get; set; }
		
		/// <summary>
		/// The method used to enter the cardholder's primary account number and card expiration date
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="point_of_service_entry_mode")]
		public Declined_transactionSourceCard_declineNetwork_detailsVisaPoint_of_service_entry_mode Point_of_service_entry_mode { get; set; }
	}
	
	public class Pending_transactionSourceCard_route_authorization
	{
		
		/// <summary>
		/// The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public AccountCurrency Currency { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_acceptor_id")]
		public string Merchant_acceptor_id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_category_code")]
		public string Merchant_category_code { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_city")]
		public string Merchant_city { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_country")]
		public string Merchant_country { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_descriptor")]
		public string Merchant_descriptor { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_state")]
		public string Merchant_state { get; set; }
	}
	
	public class Pending_transactionSourceCheck_deposit_instruction
	{
		
		/// <summary>
		/// The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The identifier of the File containing the image of the back of the check that was deposited.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="back_image_file_id")]
		public string Back_image_file_id { get; set; }
		
		/// <summary>
		/// The identifier of the Check Deposit.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="check_deposit_id")]
		public string Check_deposit_id { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public AccountCurrency Currency { get; set; }
		
		/// <summary>
		/// The identifier of the File containing the image of the front of the check that was deposited.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="front_image_file_id")]
		public string Front_image_file_id { get; set; }
	}
	
	public class Pending_transactionSourceCheck_transfer_instruction
	{
		
		/// <summary>
		/// The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the check's currency.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public AccountCurrency Currency { get; set; }
		
		/// <summary>
		/// The identifier of the Check Transfer that led to this Pending Transaction.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transfer_id")]
		public string Transfer_id { get; set; }
	}
	
	public class Pending_transactionSourceInbound_funds_hold
	{
		
		/// <summary>
		/// The held amount in the minor unit of the account's currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// When the hold will be released automatically. Certain conditions may cause it to be released before this time.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="automatically_releases_at")]
		public System.DateTimeOffset Automatically_releases_at { get; set; }
		
		/// <summary>
		/// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time at which the hold was created.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.DateTimeOffset Created_at { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the hold's currency.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public AccountCurrency Currency { get; set; }
		
		/// <summary>
		/// The ID of the Transaction for which funds were held.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="held_transaction_id")]
		public string Held_transaction_id { get; set; }
		
		/// <summary>
		/// The ID of the Pending Transaction representing the held funds.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pending_transaction_id")]
		public string Pending_transaction_id { get; set; }
		
		/// <summary>
		/// When the hold was released (if it has been released).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="released_at")]
		public System.Nullable<System.DateTimeOffset> Released_at { get; set; }
		
		/// <summary>
		/// The status of the hold.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public Inbound_card_authorization_simulation_resultPending_transactionSourceInbound_funds_holdStatus Status { get; set; }
	}
	
	public class Pending_transactionSourceReal_time_payments_transfer_instruction
	{
		
		/// <summary>
		/// The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The identifier of the Real Time Payments Transfer that led to this Pending Transaction.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transfer_id")]
		public string Transfer_id { get; set; }
	}
	
	public class Pending_transactionSourceWire_drawdown_payment_instruction
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="account_number")]
		public string Account_number { get; set; }
		
		/// <summary>
		/// The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="message_to_recipient")]
		public string Message_to_recipient { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="routing_number")]
		public string Routing_number { get; set; }
	}
	
	public class Pending_transactionSourceWire_transfer_instruction
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="account_number")]
		public string Account_number { get; set; }
		
		/// <summary>
		/// The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="message_to_recipient")]
		public string Message_to_recipient { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="routing_number")]
		public string Routing_number { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transfer_id")]
		public string Transfer_id { get; set; }
	}
	
	/// <summary>
	/// A list of Pending Transaction objects
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Pending_transaction_list
	{
		
		/// <summary>
		/// The contents of the list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Pending_transaction[] Data { get; set; }
		
		/// <summary>
		/// A pointer to a place in the list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="next_cursor")]
		public string Next_cursor { get; set; }
	}
	
	/// <summary>
	/// Programs determine the compliance and commercial terms of Accounts. By default, you have a Commercial Banking program for managing your own funds. If you are lending or managing funds on behalf of your customers, or otherwise engaged in regulated activity, we will work together to create additional Programs for you.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Program
	{
		
		/// <summary>
		/// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time at which the Program was created.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.DateTimeOffset Created_at { get; set; }
		
		/// <summary>
		/// The Program identifier.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The name of the Program.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// A constant representing the object's type. For this resource it will always be `program`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public ProgramType Type { get; set; }
		
		/// <summary>
		/// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time at which the Program was last updated.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public System.DateTimeOffset Updated_at { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ProgramType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="program")]
		program = 0,
	}
	
	/// <summary>
	/// A list of Program objects
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Program_list
	{
		
		/// <summary>
		/// The contents of the list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Program[] Data { get; set; }
		
		/// <summary>
		/// A pointer to a place in the list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="next_cursor")]
		public string Next_cursor { get; set; }
	}
	
	/// <summary>
	/// Real Time Decisions are created when your application needs to take action in real-time to some event such as a card authorization. Real time decisions are currently in beta; please contact support@increase.com if you're interested in trying them out!
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Real_time_decision
	{
		
		/// <summary>
		/// Fields related to a card authorization.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="card_authorization")]
		public Real_time_decisionCard_authorization Card_authorization { get; set; }
		
		/// <summary>
		/// The category of the Real-Time Decision.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="category")]
		public Real_time_decisionCategory Category { get; set; }
		
		/// <summary>
		/// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Real-Time Decision was created.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.DateTimeOffset Created_at { get; set; }
		
		/// <summary>
		/// Fields related to a digital wallet authentication attempt.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="digital_wallet_authentication")]
		public Real_time_decisionDigital_wallet_authentication Digital_wallet_authentication { get; set; }
		
		/// <summary>
		/// Fields related to a digital wallet token provisioning attempt.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="digital_wallet_token")]
		public Real_time_decisionDigital_wallet_token Digital_wallet_token { get; set; }
		
		/// <summary>
		/// The Real-Time Decision identifier.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The status of the Real-Time Decision.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public Real_time_decisionStatus Status { get; set; }
		
		/// <summary>
		/// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which your application can no longer respond to the Real-Time Decision.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="timeout_at")]
		public System.DateTimeOffset Timeout_at { get; set; }
		
		/// <summary>
		/// A constant representing the object's type. For this resource it will always be `real_time_decision`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public Real_time_decisionType Type { get; set; }
	}
	
	public class Real_time_decisionCard_authorization
	{
		
		/// <summary>
		/// The identifier of the Account the authorization will debit.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="account_id")]
		public string Account_id { get; set; }
		
		/// <summary>
		/// The identifier of the Card that is being authorized.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="card_id")]
		public string Card_id { get; set; }
		
		/// <summary>
		/// Whether or not the authorization was approved.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="decision")]
		public Action_a_real_time_decision_parametersCard_authorizationDecision Decision { get; set; }
		
		/// <summary>
		/// The merchant identifier (commonly abbreviated as MID) of the merchant the card is transacting with.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_acceptor_id")]
		public string Merchant_acceptor_id { get; set; }
		
		/// <summary>
		/// The Merchant Category Code (commonly abbreviated as MCC) of the merchant the card is transacting with.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_category_code")]
		public string Merchant_category_code { get; set; }
		
		/// <summary>
		/// The city the merchant resides in.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_city")]
		public string Merchant_city { get; set; }
		
		/// <summary>
		/// The country the merchant resides in.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_country")]
		public string Merchant_country { get; set; }
		
		/// <summary>
		/// The merchant descriptor of the merchant the card is transacting with.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_descriptor")]
		public string Merchant_descriptor { get; set; }
		
		/// <summary>
		/// The payment network used to process this card authorization
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="network")]
		public Declined_transactionSourceCard_declineNetwork Network { get; set; }
		
		/// <summary>
		/// Fields specific to the `network`
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="network_details")]
		public Real_time_decisionCard_authorizationNetwork_details Network_details { get; set; }
		
		/// <summary>
		/// The amount of the attempted authorization in the currency the card user sees at the time of purchase, in the minor unit of that currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="presentment_amount")]
		public int Presentment_amount { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the currency the user sees at the time of purchase.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="presentment_currency")]
		public string Presentment_currency { get; set; }
		
		/// <summary>
		/// The amount of the attempted authorization in the currency it will be settled in. This currency is the same as that of the Account the card belongs to.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="settlement_amount")]
		public int Settlement_amount { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the currency the transaction will be settled in.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="settlement_currency")]
		public string Settlement_currency { get; set; }
	}
	
	public class Real_time_decisionCard_authorizationNetwork_details
	{
		
		/// <summary>
		/// Fields specific to the `visa` network
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="visa")]
		public Real_time_decisionCard_authorizationNetwork_detailsVisa Visa { get; set; }
	}
	
	public class Real_time_decisionCard_authorizationNetwork_detailsVisa
	{
		
		/// <summary>
		/// For electronic commerce transactions, this identifies the level of security used in obtaining the customer's payment credential. For mail or telephone order transactions, identifies the type of mail or telephone order.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="electronic_commerce_indicator")]
		public Declined_transactionSourceCard_declineNetwork_detailsVisaElectronic_commerce_indicator Electronic_commerce_indicator { get; set; }
		
		/// <summary>
		/// The method used to enter the cardholder's primary account number and card expiration date
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="point_of_service_entry_mode")]
		public Declined_transactionSourceCard_declineNetwork_detailsVisaPoint_of_service_entry_mode Point_of_service_entry_mode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Real_time_decisionCategory
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="card_authorization_requested")]
		card_authorization_requested = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="digital_wallet_token_requested")]
		digital_wallet_token_requested = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="digital_wallet_authentication_requested")]
		digital_wallet_authentication_requested = 2,
	}
	
	public class Real_time_decisionDigital_wallet_authentication
	{
		
		/// <summary>
		/// The identifier of the Card that is being tokenized.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="card_id")]
		public string Card_id { get; set; }
		
		/// <summary>
		/// The channel to send the card user their one-time passcode.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="channel")]
		public Real_time_decisionDigital_wallet_authenticationChannel Channel { get; set; }
		
		/// <summary>
		/// The digital wallet app being used.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="digital_wallet")]
		public Digital_wallet_tokenToken_requestor Digital_wallet { get; set; }
		
		/// <summary>
		/// The email to send the one-time passcode to if `channel` is equal to `email`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// The one-time passcode to send the card user.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="one_time_passcode")]
		public string One_time_passcode { get; set; }
		
		/// <summary>
		/// The phone number to send the one-time passcode to if `channel` is equal to `sms`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="phone")]
		public string Phone { get; set; }
		
		/// <summary>
		/// Whether your application successfully delivered the one-time passcode.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="result")]
		public Action_a_real_time_decision_parametersDigital_wallet_authenticationResult Result { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Real_time_decisionDigital_wallet_authenticationChannel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="sms")]
		sms = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="email")]
		email = 1,
	}
	
	public class Real_time_decisionDigital_wallet_token
	{
		
		/// <summary>
		/// The identifier of the Card that is being tokenized.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="card_id")]
		public string Card_id { get; set; }
		
		/// <summary>
		/// The identifier of the Card Profile that was set via the real time decision. This will be null until the real time decision is responded to or if the real time decision did not set a card profile.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="card_profile_id")]
		public string Card_profile_id { get; set; }
		
		/// <summary>
		/// Whether or not the provisioning request was approved. This will be null until the real time decision is responded to.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="decision")]
		public Action_a_real_time_decision_parametersCard_authorizationDecision Decision { get; set; }
		
		/// <summary>
		/// The digital wallet app being used.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="digital_wallet")]
		public Digital_wallet_tokenToken_requestor Digital_wallet { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Real_time_decisionStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pending")]
		pending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="responded")]
		responded = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="timed_out")]
		timed_out = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Real_time_decisionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="real_time_decision")]
		real_time_decision = 0,
	}
	
	/// <summary>
	/// Real Time Payments transfers move funds, within seconds, between your Increase account and any other account on the Real Time Payments network.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Real_time_payments_transfer
	{
		
		/// <summary>
		/// The Account from which the transfer was sent.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="account_id")]
		public string Account_id { get; set; }
		
		/// <summary>
		/// The transfer amount in USD cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// If your account requires approvals for transfers and the transfer was approved, this will contain details of the approval.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="approval")]
		public Real_time_payments_transferApproval Approval { get; set; }
		
		/// <summary>
		/// If your account requires approvals for transfers and the transfer was not approved, this will contain details of the cancellation.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="cancellation")]
		public Real_time_payments_transferCancellation Cancellation { get; set; }
		
		/// <summary>
		/// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was created.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.DateTimeOffset Created_at { get; set; }
		
		/// <summary>
		/// The name of the transfer's recipient as provided by the sender.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="creditor_name")]
		public string Creditor_name { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transfer's currency. For real time payments transfers this is always equal to `USD`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public AccountCurrency Currency { get; set; }
		
		/// <summary>
		/// The destination account number.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="destination_account_number")]
		public string Destination_account_number { get; set; }
		
		/// <summary>
		/// The destination American Bankers' Association (ABA) Routing Transit Number (RTN).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="destination_routing_number")]
		public string Destination_routing_number { get; set; }
		
		/// <summary>
		/// The identifier of the External Account the transfer was made to, if any.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="external_account_id")]
		public string External_account_id { get; set; }
		
		/// <summary>
		/// The Real Time Payments Transfer's identifier.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// If the transfer is rejected by Real Time Payments or the destination financial institution, this will contain supplemental details.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="rejection")]
		public Real_time_payments_transferRejection Rejection { get; set; }
		
		/// <summary>
		/// Unstructured information that will show on the recipient's bank statement.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="remittance_information")]
		public string Remittance_information { get; set; }
		
		/// <summary>
		/// The Account Number the recipient will see as having sent the transfer.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="source_account_number_id")]
		public string Source_account_number_id { get; set; }
		
		/// <summary>
		/// The lifecycle status of the transfer.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public Real_time_payments_transferStatus Status { get; set; }
		
		/// <summary>
		/// After the transfer is submitted to Real Time Payments, this will contain supplemental details.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="submission")]
		public Real_time_payments_transferSubmission Submission { get; set; }
		
		/// <summary>
		/// The Transaction funding the transfer once it is complete.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transaction_id")]
		public string Transaction_id { get; set; }
		
		/// <summary>
		/// A constant representing the object's type. For this resource it will always be `real_time_payments_transfer`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public Real_time_payments_transferType Type { get; set; }
	}
	
	public class Real_time_payments_transferApproval
	{
		
		/// <summary>
		/// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was approved.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="approved_at")]
		public System.DateTimeOffset Approved_at { get; set; }
		
		/// <summary>
		/// If the Transfer was approved by a user in the dashboard, the email address of that user.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="approved_by")]
		public string Approved_by { get; set; }
	}
	
	public class Real_time_payments_transferCancellation
	{
		
		/// <summary>
		/// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Transfer was canceled.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="canceled_at")]
		public System.DateTimeOffset Canceled_at { get; set; }
		
		/// <summary>
		/// If the Transfer was canceled by a user in the dashboard, the email address of that user.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="canceled_by")]
		public string Canceled_by { get; set; }
	}
	
	public class Real_time_payments_transferRejection
	{
		
		/// <summary>
		/// Additional information about the rejection provided by the recipient bank when the `reject_reason_code` is `NARRATIVE`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reject_reason_additional_information")]
		public string Reject_reason_additional_information { get; set; }
		
		/// <summary>
		/// The reason the transfer was rejected as provided by the recipient bank or the Real Time Payments network.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reject_reason_code")]
		public Complete_a_sandbox_real_time_payments_transfer_parametersRejectionReject_reason_code Reject_reason_code { get; set; }
		
		/// <summary>
		/// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was rejected.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="rejected_at")]
		public System.Nullable<System.DateTimeOffset> Rejected_at { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Real_time_payments_transferStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pending_approval")]
		pending_approval = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="canceled")]
		canceled = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pending_submission")]
		pending_submission = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="submitted")]
		submitted = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="complete")]
		complete = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="rejected")]
		rejected = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="requires_attention")]
		requires_attention = 6,
	}
	
	public class Real_time_payments_transferSubmission
	{
		
		/// <summary>
		/// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was submitted to The Clearing House.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="submitted_at")]
		public System.Nullable<System.DateTimeOffset> Submitted_at { get; set; }
		
		/// <summary>
		/// The Real Time Payments network identification of the transfer.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transaction_identification")]
		public string Transaction_identification { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Real_time_payments_transferType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="real_time_payments_transfer")]
		real_time_payments_transfer = 0,
	}
	
	/// <summary>
	/// A list of Real Time Payments Transfer objects
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Real_time_payments_transfer_list
	{
		
		/// <summary>
		/// The contents of the list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Real_time_payments_transfer[] Data { get; set; }
		
		/// <summary>
		/// A pointer to a place in the list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="next_cursor")]
		public string Next_cursor { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Return_a_sandbox_ach_transfer_parameters
	{
		
		/// <summary>
		/// The reason why the Federal Reserve or destination bank returned this transfer. Defaults to `no_account`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public Ach_transferReturnReturn_reason_code Reason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Return_a_sandbox_check_transfer_parameters
	{
		
		/// <summary>
		/// The reason why the Check Transfer was returned to Increase.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public Check_transferReturn_detailsReason Reason { get; set; }
	}
	
	/// <summary>
	/// Routing numbers are used to identify your bank in a financial transaction.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Routing_number
	{
		
		/// <summary>
		/// This routing number's support for ACH Transfers.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ach_transfers")]
		public Routing_numberAch_transfers Ach_transfers { get; set; }
		
		/// <summary>
		/// The name of the financial institution belonging to a routing number.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// This routing number's support for Real Time Payments Transfers.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="real_time_payments_transfers")]
		public Routing_numberAch_transfers Real_time_payments_transfers { get; set; }
		
		/// <summary>
		/// The nine digit routing number identifier.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="routing_number")]
		public string Routing_number1 { get; set; }
		
		/// <summary>
		/// A constant representing the object's type. For this resource it will always be `routing_number`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public Routing_numberType Type { get; set; }
		
		/// <summary>
		/// This routing number's support for Wire Transfers.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="wire_transfers")]
		public Routing_numberAch_transfers Wire_transfers { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Routing_numberAch_transfers
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="supported")]
		supported = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="not_supported")]
		not_supported = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Routing_numberType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="routing_number")]
		routing_number = 0,
	}
	
	/// <summary>
	/// A list of Routing Number objects
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Routing_number_list
	{
		
		/// <summary>
		/// The contents of the list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Routing_number[] Data { get; set; }
		
		/// <summary>
		/// A pointer to a place in the list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="next_cursor")]
		public string Next_cursor { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Simulate_a_real_time_payments_transfer_to_your_account_parameters
	{
		
		/// <summary>
		/// The identifier of the Account Number the inbound Real Time Payments Transfer is for.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="account_number_id")]
		public string Account_number_id { get; set; }
		
		/// <summary>
		/// The transfer amount in USD cents. Must be positive.
		/// Required
		/// Minimum: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public int Amount { get; set; }
		
		/// <summary>
		/// The account number of the account that sent the transfer.
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="debtor_account_number")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Debtor_account_number { get; set; }
		
		/// <summary>
		/// The name provided by the sender of the transfer.
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="debtor_name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Debtor_name { get; set; }
		
		/// <summary>
		/// The routing number of the account that sent the transfer.
		/// Max length: 9
		/// Min length: 9
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="debtor_routing_number")]
		[System.ComponentModel.DataAnnotations.MinLength(9)]
		[System.ComponentModel.DataAnnotations.MaxLength(9)]
		public string Debtor_routing_number { get; set; }
		
		/// <summary>
		/// Additional information included with the transfer.
		/// Max length: 140
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="remittance_information")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(140)]
		public string Remittance_information { get; set; }
		
		/// <summary>
		/// The identifier of a pending Request for Payment that this transfer will fulfill.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="request_for_payment_id")]
		public string Request_for_payment_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Simulate_a_refund_on_a_card_parameters
	{
		
		/// <summary>
		/// The identifier for the Transaction to refund. The Transaction's source must have a category of card_settlement.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transaction_id")]
		public string Transaction_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Simulate_a_tax_document_being_created_parameters
	{
		
		/// <summary>
		/// The identifier of the Account the tax document is for.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="account_id")]
		public string Account_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Simulate_a_wire_transfer_to_your_account_parameters
	{
		
		/// <summary>
		/// The identifier of the Account Number the inbound Wire Transfer is for.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="account_number_id")]
		public string Account_number_id { get; set; }
		
		/// <summary>
		/// The transfer amount in cents. Must be positive.
		/// Required
		/// Minimum: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public int Amount { get; set; }
		
		/// <summary>
		/// The sending bank will set beneficiary_address_line1 in production. You can simulate any value here.
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="beneficiary_address_line1")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Beneficiary_address_line1 { get; set; }
		
		/// <summary>
		/// The sending bank will set beneficiary_address_line2 in production. You can simulate any value here.
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="beneficiary_address_line2")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Beneficiary_address_line2 { get; set; }
		
		/// <summary>
		/// The sending bank will set beneficiary_address_line3 in production. You can simulate any value here.
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="beneficiary_address_line3")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Beneficiary_address_line3 { get; set; }
		
		/// <summary>
		/// The sending bank will set beneficiary_name in production. You can simulate any value here.
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="beneficiary_name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Beneficiary_name { get; set; }
		
		/// <summary>
		/// The sending bank will set beneficiary_reference in production. You can simulate any value here.
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="beneficiary_reference")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Beneficiary_reference { get; set; }
		
		/// <summary>
		/// The sending bank will set originator_address_line1 in production. You can simulate any value here.
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originator_address_line1")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Originator_address_line1 { get; set; }
		
		/// <summary>
		/// The sending bank will set originator_address_line2 in production. You can simulate any value here.
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originator_address_line2")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Originator_address_line2 { get; set; }
		
		/// <summary>
		/// The sending bank will set originator_address_line3 in production. You can simulate any value here.
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originator_address_line3")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Originator_address_line3 { get; set; }
		
		/// <summary>
		/// The sending bank will set originator_name in production. You can simulate any value here.
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originator_name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Originator_name { get; set; }
		
		/// <summary>
		/// The sending bank will set originator_to_beneficiary_information_line1 in production. You can simulate any value here.
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originator_to_beneficiary_information_line1")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Originator_to_beneficiary_information_line1 { get; set; }
		
		/// <summary>
		/// The sending bank will set originator_to_beneficiary_information_line2 in production. You can simulate any value here.
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originator_to_beneficiary_information_line2")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Originator_to_beneficiary_information_line2 { get; set; }
		
		/// <summary>
		/// The sending bank will set originator_to_beneficiary_information_line3 in production. You can simulate any value here.
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originator_to_beneficiary_information_line3")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Originator_to_beneficiary_information_line3 { get; set; }
		
		/// <summary>
		/// The sending bank will set originator_to_beneficiary_information_line4 in production. You can simulate any value here.
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originator_to_beneficiary_information_line4")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Originator_to_beneficiary_information_line4 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Simulate_an_account_statement_being_created_parameters
	{
		
		/// <summary>
		/// The identifier of the Account the statement is for.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="account_id")]
		public string Account_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Simulate_an_ach_transfer_to_your_account_parameters
	{
		
		/// <summary>
		/// The identifier of the Account Number the inbound ACH Transfer is for.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="account_number_id")]
		public string Account_number_id { get; set; }
		
		/// <summary>
		/// The transfer amount in cents. A positive amount originates a credit transfer pushing funds to the receiving account. A negative amount originates a debit transfer pulling funds from the receiving account.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The description of the date of the transfer.
		/// Max length: 6
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="company_descriptive_date")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(6)]
		public string Company_descriptive_date { get; set; }
		
		/// <summary>
		/// Data associated with the transfer set by the sender.
		/// Max length: 20
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="company_discretionary_data")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(20)]
		public string Company_discretionary_data { get; set; }
		
		/// <summary>
		/// The description of the transfer set by the sender.
		/// Max length: 10
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="company_entry_description")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public string Company_entry_description { get; set; }
		
		/// <summary>
		/// The sender's company id.
		/// Max length: 15
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="company_id")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(15)]
		public string Company_id { get; set; }
		
		/// <summary>
		/// The name of the sender.
		/// Max length: 16
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="company_name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(16)]
		public string Company_name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Simulate_an_authorization_on_a_card_parameters
	{
		
		/// <summary>
		/// The authorization amount in cents.
		/// Required
		/// Minimum: 1
		/// Maximum: 1000000000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		[System.ComponentModel.DataAnnotations.Range(1, 1000000000)]
		public int Amount { get; set; }
		
		/// <summary>
		/// The identifier of the Card to be authorized.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="card_id")]
		public string Card_id { get; set; }
		
		/// <summary>
		/// The identifier of the Digital Wallet Token to be authorized.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="digital_wallet_token_id")]
		public string Digital_wallet_token_id { get; set; }
		
		/// <summary>
		/// The identifier of the Event Subscription to use. If provided, will override the default real time event subscription. Because you can only create one real time decision event subscription, you can use this field to route events to any specified event subscription for testing purposes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="event_subscription_id")]
		public string Event_subscription_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Simulate_an_inbound_wire_drawdown_request_being_created_parameters
	{
		
		/// <summary>
		/// The amount being requested in cents.
		/// Required
		/// Minimum: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public int Amount { get; set; }
		
		/// <summary>
		/// The drawdown request's beneficiary's account number.
		/// Required
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="beneficiary_account_number")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Beneficiary_account_number { get; set; }
		
		/// <summary>
		/// Line 1 of the drawdown request's beneficiary's address.
		/// Max length: 35
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="beneficiary_address_line1")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string Beneficiary_address_line1 { get; set; }
		
		/// <summary>
		/// Line 2 of the drawdown request's beneficiary's address.
		/// Max length: 35
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="beneficiary_address_line2")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string Beneficiary_address_line2 { get; set; }
		
		/// <summary>
		/// Line 3 of the drawdown request's beneficiary's address.
		/// Max length: 35
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="beneficiary_address_line3")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string Beneficiary_address_line3 { get; set; }
		
		/// <summary>
		/// The drawdown request's beneficiary's name.
		/// Max length: 35
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="beneficiary_name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string Beneficiary_name { get; set; }
		
		/// <summary>
		/// The drawdown request's beneficiary's routing number.
		/// Required
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="beneficiary_routing_number")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Beneficiary_routing_number { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the amount being requested. Will always be "USD".
		/// Required
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Currency { get; set; }
		
		/// <summary>
		/// A message from the drawdown request's originator.
		/// Required
		/// Max length: 140
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="message_to_recipient")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(140)]
		public string Message_to_recipient { get; set; }
		
		/// <summary>
		/// The drawdown request's originator's account number.
		/// Required
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_account_number")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Originator_account_number { get; set; }
		
		/// <summary>
		/// Line 1 of the drawdown request's originator's address.
		/// Max length: 35
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originator_address_line1")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string Originator_address_line1 { get; set; }
		
		/// <summary>
		/// Line 2 of the drawdown request's originator's address.
		/// Max length: 35
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originator_address_line2")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string Originator_address_line2 { get; set; }
		
		/// <summary>
		/// Line 3 of the drawdown request's originator's address.
		/// Max length: 35
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originator_address_line3")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string Originator_address_line3 { get; set; }
		
		/// <summary>
		/// The drawdown request's originator's name.
		/// Max length: 35
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originator_name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string Originator_name { get; set; }
		
		/// <summary>
		/// The drawdown request's originator's routing number.
		/// Required
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_routing_number")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Originator_routing_number { get; set; }
		
		/// <summary>
		/// Line 1 of the information conveyed from the originator of the message to the beneficiary.
		/// Max length: 35
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originator_to_beneficiary_information_line1")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string Originator_to_beneficiary_information_line1 { get; set; }
		
		/// <summary>
		/// Line 2 of the information conveyed from the originator of the message to the beneficiary.
		/// Max length: 35
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originator_to_beneficiary_information_line2")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string Originator_to_beneficiary_information_line2 { get; set; }
		
		/// <summary>
		/// Line 3 of the information conveyed from the originator of the message to the beneficiary.
		/// Max length: 35
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originator_to_beneficiary_information_line3")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string Originator_to_beneficiary_information_line3 { get; set; }
		
		/// <summary>
		/// Line 4 of the information conveyed from the originator of the message to the beneficiary.
		/// Max length: 35
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originator_to_beneficiary_information_line4")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string Originator_to_beneficiary_information_line4 { get; set; }
		
		/// <summary>
		/// The Account Number to which the recipient of this request is being requested to send funds from.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="recipient_account_number_id")]
		public string Recipient_account_number_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Simulate_an_interest_payment_to_your_account_parameters
	{
		
		/// <summary>
		/// The identifier of the Account Number the Interest Payment is for.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="account_id")]
		public string Account_id { get; set; }
		
		/// <summary>
		/// The interest amount in cents. Must be positive.
		/// Required
		/// Minimum: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public int Amount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Simulate_digital_wallet_provisioning_for_a_card_parameters
	{
		
		/// <summary>
		/// The identifier of the Card to be authorized.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="card_id")]
		public string Card_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Simulate_settling_a_card_authorization_parameters
	{
		
		/// <summary>
		/// The amount to be settled. This defaults to the amount of the Pending Transaction being settled.
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amount")]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> Amount { get; set; }
		
		/// <summary>
		/// The identifier of the Card to create a settlement on.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="card_id")]
		public string Card_id { get; set; }
		
		/// <summary>
		/// The identifier of the Pending Transaction for the Card Authorization you wish to settle.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pending_transaction_id")]
		public string Pending_transaction_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Simulates_advancing_the_state_of_a_card_dispute_parameters
	{
		
		/// <summary>
		/// Why the dispute was rejected. Not required for accepting disputes.
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="explanation")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Explanation { get; set; }
		
		/// <summary>
		/// The status to move the dispute to.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public Simulates_advancing_the_state_of_a_card_dispute_parametersStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Simulates_advancing_the_state_of_a_card_dispute_parametersStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="accepted")]
		accepted = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="rejected")]
		rejected = 1,
	}
	
	/// <summary>
	/// Transactions are the immutable additions and removals of money from your bank account. They're the equivalent of line items on your bank statement.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Transaction
	{
		
		/// <summary>
		/// The identifier for the Account the Transaction belongs to.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="account_id")]
		public string Account_id { get; set; }
		
		/// <summary>
		/// The Transaction amount in the minor unit of its currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date on which the Transaction occured.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.DateTimeOffset Created_at { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the Transaction's currency. This will match the currency on the Transcation's Account.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public AccountCurrency Currency { get; set; }
		
		/// <summary>
		/// For a Transaction related to a transfer, this is the description you provide. For a Transaction related to a payment, this is the description the vendor provides.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The Transaction identifier.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The identifier for the route this Transaction came through. Routes are things like cards and ACH details.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="route_id")]
		public string Route_id { get; set; }
		
		/// <summary>
		/// The type of the route this Transaction came through.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="route_type")]
		public Declined_transactionRoute_type Route_type { get; set; }
		
		/// <summary>
		/// This is an object giving more details on the network-level event that caused the Transaction. Note that for backwards compatibility reasons, additional undocumented keys may appear in this object. These should be treated as deprecated and will be removed in the future.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="source")]
		public TransactionSource Source { get; set; }
		
		/// <summary>
		/// A constant representing the object's type. For this resource it will always be `transaction`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public Inbound_ach_transfer_simulation_resultTransactionType Type { get; set; }
	}
	
	public class TransactionSource
	{
		
		/// <summary>
		/// A Account Transfer Intention object. This field will be present in the JSON response if and only if `category` is equal to `account_transfer_intention`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="account_transfer_intention")]
		public TransactionSourceAccount_transfer_intention Account_transfer_intention { get; set; }
		
		/// <summary>
		/// A ACH Check Conversion object. This field will be present in the JSON response if and only if `category` is equal to `ach_check_conversion`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ach_check_conversion")]
		public TransactionSourceAch_check_conversion Ach_check_conversion { get; set; }
		
		/// <summary>
		/// A ACH Check Conversion Return object. This field will be present in the JSON response if and only if `category` is equal to `ach_check_conversion_return`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ach_check_conversion_return")]
		public TransactionSourceAch_check_conversion_return Ach_check_conversion_return { get; set; }
		
		/// <summary>
		/// A ACH Transfer Intention object. This field will be present in the JSON response if and only if `category` is equal to `ach_transfer_intention`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ach_transfer_intention")]
		public TransactionSourceAch_transfer_intention Ach_transfer_intention { get; set; }
		
		/// <summary>
		/// A ACH Transfer Rejection object. This field will be present in the JSON response if and only if `category` is equal to `ach_transfer_rejection`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ach_transfer_rejection")]
		public TransactionSourceAch_transfer_rejection Ach_transfer_rejection { get; set; }
		
		/// <summary>
		/// A ACH Transfer Return object. This field will be present in the JSON response if and only if `category` is equal to `ach_transfer_return`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ach_transfer_return")]
		public TransactionSourceAch_transfer_return Ach_transfer_return { get; set; }
		
		/// <summary>
		/// A Card Dispute Acceptance object. This field will be present in the JSON response if and only if `category` is equal to `card_dispute_acceptance`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="card_dispute_acceptance")]
		public TransactionSourceCard_dispute_acceptance Card_dispute_acceptance { get; set; }
		
		/// <summary>
		/// A Card Refund object. This field will be present in the JSON response if and only if `category` is equal to `card_refund`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="card_refund")]
		public TransactionSourceCard_refund Card_refund { get; set; }
		
		/// <summary>
		/// A Card Revenue Payment object. This field will be present in the JSON response if and only if `category` is equal to `card_revenue_payment`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="card_revenue_payment")]
		public TransactionSourceCard_revenue_payment Card_revenue_payment { get; set; }
		
		/// <summary>
		/// A Deprecated Card Refund object. This field will be present in the JSON response if and only if `category` is equal to `card_route_refund`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="card_route_refund")]
		public TransactionSourceCard_route_refund Card_route_refund { get; set; }
		
		/// <summary>
		/// A Deprecated Card Settlement object. This field will be present in the JSON response if and only if `category` is equal to `card_route_settlement`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="card_route_settlement")]
		public TransactionSourceCard_route_settlement Card_route_settlement { get; set; }
		
		/// <summary>
		/// A Card Settlement object. This field will be present in the JSON response if and only if `category` is equal to `card_settlement`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="card_settlement")]
		public TransactionSourceCard_settlement Card_settlement { get; set; }
		
		/// <summary>
		/// The type of transaction that took place. We may add additional possible values for this enum over time; your application should be able to handle such additions gracefully.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="category")]
		public Inbound_ach_transfer_simulation_resultTransactionSourceCategory Category { get; set; }
		
		/// <summary>
		/// A Check Deposit Acceptance object. This field will be present in the JSON response if and only if `category` is equal to `check_deposit_acceptance`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="check_deposit_acceptance")]
		public TransactionSourceCheck_deposit_acceptance Check_deposit_acceptance { get; set; }
		
		/// <summary>
		/// A Check Deposit Return object. This field will be present in the JSON response if and only if `category` is equal to `check_deposit_return`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="check_deposit_return")]
		public TransactionSourceCheck_deposit_return Check_deposit_return { get; set; }
		
		/// <summary>
		/// A Check Transfer Intention object. This field will be present in the JSON response if and only if `category` is equal to `check_transfer_intention`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="check_transfer_intention")]
		public TransactionSourceCheck_transfer_intention Check_transfer_intention { get; set; }
		
		/// <summary>
		/// A Check Transfer Rejection object. This field will be present in the JSON response if and only if `category` is equal to `check_transfer_rejection`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="check_transfer_rejection")]
		public TransactionSourceCheck_transfer_rejection Check_transfer_rejection { get; set; }
		
		/// <summary>
		/// A Check Transfer Return object. This field will be present in the JSON response if and only if `category` is equal to `check_transfer_return`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="check_transfer_return")]
		public TransactionSourceCheck_transfer_return Check_transfer_return { get; set; }
		
		/// <summary>
		/// A Check Transfer Stop Payment Request object. This field will be present in the JSON response if and only if `category` is equal to `check_transfer_stop_payment_request`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="check_transfer_stop_payment_request")]
		public TransactionSourceCheck_transfer_stop_payment_request Check_transfer_stop_payment_request { get; set; }
		
		/// <summary>
		/// A Dispute Resolution object. This field will be present in the JSON response if and only if `category` is equal to `dispute_resolution`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dispute_resolution")]
		public TransactionSourceDispute_resolution Dispute_resolution { get; set; }
		
		/// <summary>
		/// A Empyreal Cash Deposit object. This field will be present in the JSON response if and only if `category` is equal to `empyreal_cash_deposit`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="empyreal_cash_deposit")]
		public TransactionSourceEmpyreal_cash_deposit Empyreal_cash_deposit { get; set; }
		
		/// <summary>
		/// A Fee Payment object. This field will be present in the JSON response if and only if `category` is equal to `fee_payment`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fee_payment")]
		public TransactionSourceFee_payment Fee_payment { get; set; }
		
		/// <summary>
		/// A Inbound ACH Transfer object. This field will be present in the JSON response if and only if `category` is equal to `inbound_ach_transfer`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="inbound_ach_transfer")]
		public TransactionSourceInbound_ach_transfer Inbound_ach_transfer { get; set; }
		
		/// <summary>
		/// A Inbound Check object. This field will be present in the JSON response if and only if `category` is equal to `inbound_check`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="inbound_check")]
		public TransactionSourceInbound_check Inbound_check { get; set; }
		
		/// <summary>
		/// A Inbound International ACH Transfer object. This field will be present in the JSON response if and only if `category` is equal to `inbound_international_ach_transfer`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="inbound_international_ach_transfer")]
		public TransactionSourceInbound_international_ach_transfer Inbound_international_ach_transfer { get; set; }
		
		/// <summary>
		/// A Inbound Real Time Payments Transfer Confirmation object. This field will be present in the JSON response if and only if `category` is equal to `inbound_real_time_payments_transfer_confirmation`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="inbound_real_time_payments_transfer_confirmation")]
		public TransactionSourceInbound_real_time_payments_transfer_confirmation Inbound_real_time_payments_transfer_confirmation { get; set; }
		
		/// <summary>
		/// A Inbound Wire Drawdown Payment object. This field will be present in the JSON response if and only if `category` is equal to `inbound_wire_drawdown_payment`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="inbound_wire_drawdown_payment")]
		public TransactionSourceInbound_wire_drawdown_payment Inbound_wire_drawdown_payment { get; set; }
		
		/// <summary>
		/// A Inbound Wire Drawdown Payment Reversal object. This field will be present in the JSON response if and only if `category` is equal to `inbound_wire_drawdown_payment_reversal`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="inbound_wire_drawdown_payment_reversal")]
		public TransactionSourceInbound_wire_drawdown_payment_reversal Inbound_wire_drawdown_payment_reversal { get; set; }
		
		/// <summary>
		/// A Inbound Wire Reversal object. This field will be present in the JSON response if and only if `category` is equal to `inbound_wire_reversal`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="inbound_wire_reversal")]
		public TransactionSourceInbound_wire_reversal Inbound_wire_reversal { get; set; }
		
		/// <summary>
		/// A Inbound Wire Transfer object. This field will be present in the JSON response if and only if `category` is equal to `inbound_wire_transfer`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="inbound_wire_transfer")]
		public TransactionSourceInbound_wire_transfer Inbound_wire_transfer { get; set; }
		
		/// <summary>
		/// A Interest Payment object. This field will be present in the JSON response if and only if `category` is equal to `interest_payment`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="interest_payment")]
		public TransactionSourceInterest_payment Interest_payment { get; set; }
		
		/// <summary>
		/// A Internal Source object. This field will be present in the JSON response if and only if `category` is equal to `internal_source`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="internal_source")]
		public TransactionSourceInternal_source Internal_source { get; set; }
		
		/// <summary>
		/// A Real Time Payments Transfer Acknowledgement object. This field will be present in the JSON response if and only if `category` is equal to `real_time_payments_transfer_acknowledgement`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="real_time_payments_transfer_acknowledgement")]
		public TransactionSourceReal_time_payments_transfer_acknowledgement Real_time_payments_transfer_acknowledgement { get; set; }
		
		/// <summary>
		/// A Sample Funds object. This field will be present in the JSON response if and only if `category` is equal to `sample_funds`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sample_funds")]
		public TransactionSourceSample_funds Sample_funds { get; set; }
		
		/// <summary>
		/// A Wire Drawdown Payment Intention object. This field will be present in the JSON response if and only if `category` is equal to `wire_drawdown_payment_intention`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="wire_drawdown_payment_intention")]
		public TransactionSourceWire_drawdown_payment_intention Wire_drawdown_payment_intention { get; set; }
		
		/// <summary>
		/// A Wire Drawdown Payment Rejection object. This field will be present in the JSON response if and only if `category` is equal to `wire_drawdown_payment_rejection`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="wire_drawdown_payment_rejection")]
		public TransactionSourceWire_drawdown_payment_rejection Wire_drawdown_payment_rejection { get; set; }
		
		/// <summary>
		/// A Wire Transfer Intention object. This field will be present in the JSON response if and only if `category` is equal to `wire_transfer_intention`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="wire_transfer_intention")]
		public TransactionSourceWire_transfer_intention Wire_transfer_intention { get; set; }
		
		/// <summary>
		/// A Wire Transfer Rejection object. This field will be present in the JSON response if and only if `category` is equal to `wire_transfer_rejection`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="wire_transfer_rejection")]
		public TransactionSourceWire_transfer_rejection Wire_transfer_rejection { get; set; }
	}
	
	public class TransactionSourceAccount_transfer_intention
	{
		
		/// <summary>
		/// The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the destination account currency.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public AccountCurrency Currency { get; set; }
		
		/// <summary>
		/// The description you chose to give the transfer.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The identifier of the Account to where the Account Transfer was sent.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="destination_account_id")]
		public string Destination_account_id { get; set; }
		
		/// <summary>
		/// The identifier of the Account from where the Account Transfer was sent.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="source_account_id")]
		public string Source_account_id { get; set; }
		
		/// <summary>
		/// The identifier of the Account Transfer that led to this Pending Transaction.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transfer_id")]
		public string Transfer_id { get; set; }
	}
	
	public class TransactionSourceAch_check_conversion
	{
		
		/// <summary>
		/// The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The identifier of the File containing an image of the returned check.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="file_id")]
		public string File_id { get; set; }
	}
	
	public class TransactionSourceAch_check_conversion_return
	{
		
		/// <summary>
		/// The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// Why the transfer was returned.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="return_reason_code")]
		public string Return_reason_code { get; set; }
	}
	
	public class TransactionSourceAch_transfer_intention
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="account_number")]
		public string Account_number { get; set; }
		
		/// <summary>
		/// The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="routing_number")]
		public string Routing_number { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="statement_descriptor")]
		public string Statement_descriptor { get; set; }
		
		/// <summary>
		/// The identifier of the ACH Transfer that led to this Transaction.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transfer_id")]
		public string Transfer_id { get; set; }
	}
	
	public class TransactionSourceAch_transfer_rejection
	{
		
		/// <summary>
		/// The identifier of the ACH Transfer that led to this Transaction.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transfer_id")]
		public string Transfer_id { get; set; }
	}
	
	public class TransactionSourceAch_transfer_return
	{
		
		/// <summary>
		/// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was created.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.DateTimeOffset Created_at { get; set; }
		
		/// <summary>
		/// Why the ACH Transfer was returned.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="return_reason_code")]
		public Ach_transferReturnReturn_reason_code Return_reason_code { get; set; }
		
		/// <summary>
		/// The identifier of the Tranasaction associated with this return.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transaction_id")]
		public string Transaction_id { get; set; }
		
		/// <summary>
		/// The identifier of the ACH Transfer associated with this return.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transfer_id")]
		public string Transfer_id { get; set; }
	}
	
	public class TransactionSourceCard_dispute_acceptance
	{
		
		/// <summary>
		/// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Card Dispute was accepted.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="accepted_at")]
		public System.DateTimeOffset Accepted_at { get; set; }
		
		/// <summary>
		/// The identifier of the Card Dispute that was accepted.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="card_dispute_id")]
		public string Card_dispute_id { get; set; }
		
		/// <summary>
		/// The identifier of the Transaction that was created to return the disputed funds to your account.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transaction_id")]
		public string Transaction_id { get; set; }
	}
	
	public class TransactionSourceCard_refund
	{
		
		/// <summary>
		/// The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The identifier for the Transaction this refunds, if any.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="card_settlement_transaction_id")]
		public string Card_settlement_transaction_id { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public AccountCurrency Currency { get; set; }
		
		/// <summary>
		/// The Card Refund identifier.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The merchant identifier (commonly abbreviated as MID) of the merchant the card is transacting with.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_acceptor_id")]
		public string Merchant_acceptor_id { get; set; }
		
		/// <summary>
		/// The 4-digit MCC describing the merchant's business.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_category_code")]
		public string Merchant_category_code { get; set; }
		
		/// <summary>
		/// The city the merchant resides in.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_city")]
		public string Merchant_city { get; set; }
		
		/// <summary>
		/// The country the merchant resides in.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_country")]
		public string Merchant_country { get; set; }
		
		/// <summary>
		/// The name of the merchant.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_name")]
		public string Merchant_name { get; set; }
		
		/// <summary>
		/// The state the merchant resides in.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_state")]
		public string Merchant_state { get; set; }
		
		/// <summary>
		/// A constant representing the object's type. For this resource it will always be `card_refund`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public Inbound_ach_transfer_simulation_resultTransactionSourceCard_refundType Type { get; set; }
	}
	
	public class TransactionSourceCard_revenue_payment
	{
		
		/// <summary>
		/// The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction currency.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public AccountCurrency Currency { get; set; }
		
		/// <summary>
		/// The end of the period for which this transaction paid interest.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="period_end")]
		public System.DateTimeOffset Period_end { get; set; }
		
		/// <summary>
		/// The start of the period for which this transaction paid interest.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="period_start")]
		public System.DateTimeOffset Period_start { get; set; }
		
		/// <summary>
		/// The account the card belonged to.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transacted_on_account_id")]
		public string Transacted_on_account_id { get; set; }
	}
	
	public class TransactionSourceCard_route_refund
	{
		
		/// <summary>
		/// The refunded amount in the minor unit of the refunded currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the refund currency.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public AccountCurrency Currency { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_acceptor_id")]
		public string Merchant_acceptor_id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_category_code")]
		public string Merchant_category_code { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_city")]
		public string Merchant_city { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_country")]
		public string Merchant_country { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_descriptor")]
		public string Merchant_descriptor { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_state")]
		public string Merchant_state { get; set; }
	}
	
	public class TransactionSourceCard_route_settlement
	{
		
		/// <summary>
		/// The settled amount in the minor unit of the settlement currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the settlement currency.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public AccountCurrency Currency { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_acceptor_id")]
		public string Merchant_acceptor_id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_category_code")]
		public string Merchant_category_code { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_city")]
		public string Merchant_city { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_country")]
		public string Merchant_country { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_descriptor")]
		public string Merchant_descriptor { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_state")]
		public string Merchant_state { get; set; }
	}
	
	public class TransactionSourceCard_settlement
	{
		
		/// <summary>
		/// The amount in the minor unit of the transaction's settlement currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The Card Authorization that was created prior to this Card Settlement, if on exists.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="card_authorization")]
		public string Card_authorization { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's settlement currency.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public AccountCurrency Currency { get; set; }
		
		/// <summary>
		/// The Card Settlement identifier.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The merchant identifier (commonly abbreviated as MID) of the merchant the card is transacting with.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_acceptor_id")]
		public string Merchant_acceptor_id { get; set; }
		
		/// <summary>
		/// The 4-digit MCC describing the merchant's business.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_category_code")]
		public string Merchant_category_code { get; set; }
		
		/// <summary>
		/// The city the merchant resides in.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_city")]
		public string Merchant_city { get; set; }
		
		/// <summary>
		/// The country the merchant resides in.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_country")]
		public string Merchant_country { get; set; }
		
		/// <summary>
		/// The name of the merchant.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_name")]
		public string Merchant_name { get; set; }
		
		/// <summary>
		/// The state the merchant resides in.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_state")]
		public string Merchant_state { get; set; }
		
		/// <summary>
		/// The identifier of the Pending Transaction associated with this Transaction.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pending_transaction_id")]
		public string Pending_transaction_id { get; set; }
		
		/// <summary>
		/// The amount in the minor unit of the transaction's presentment currency.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="presentment_amount")]
		public int Presentment_amount { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's presentment currency.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="presentment_currency")]
		public string Presentment_currency { get; set; }
		
		/// <summary>
		/// A constant representing the object's type. For this resource it will always be `card_settlement`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public Inbound_ach_transfer_simulation_resultTransactionSourceCard_settlementType Type { get; set; }
	}
	
	public class TransactionSourceCheck_deposit_acceptance
	{
		
		/// <summary>
		/// The account number printed on the check.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="account_number")]
		public string Account_number { get; set; }
		
		/// <summary>
		/// The amount to be deposited in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// An additional line of metadata printed on the check. This typically includes the check number for business checks.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="auxiliary_on_us")]
		public string Auxiliary_on_us { get; set; }
		
		/// <summary>
		/// The ID of the Check Deposit that was accepted.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="check_deposit_id")]
		public string Check_deposit_id { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public AccountCurrency Currency { get; set; }
		
		/// <summary>
		/// The routing number printed on the check.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="routing_number")]
		public string Routing_number { get; set; }
		
		/// <summary>
		/// The check serial number, if present, for consumer checks. For business checks, the serial number is usually in the `auxiliary_on_us` field.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="serial_number")]
		public string Serial_number { get; set; }
	}
	
	public class TransactionSourceCheck_deposit_return
	{
		
		/// <summary>
		/// The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The identifier of the Check Deposit that was returned.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="check_deposit_id")]
		public string Check_deposit_id { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public AccountCurrency Currency { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="return_reason")]
		public Check_depositDeposit_returnReturn_reason Return_reason { get; set; }
		
		/// <summary>
		/// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the check deposit was returned.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="returned_at")]
		public System.DateTimeOffset Returned_at { get; set; }
		
		/// <summary>
		/// The identifier of the transaction that reversed the original check deposit transaction.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transaction_id")]
		public string Transaction_id { get; set; }
	}
	
	public class TransactionSourceCheck_transfer_intention
	{
		
		/// <summary>
		/// The city of the check's destination.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="address_city")]
		public string Address_city { get; set; }
		
		/// <summary>
		/// The street address of the check's destination.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="address_line1")]
		public string Address_line1 { get; set; }
		
		/// <summary>
		/// The second line of the address of the check's destination.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="address_line2")]
		public string Address_line2 { get; set; }
		
		/// <summary>
		/// The state of the check's destination.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="address_state")]
		public string Address_state { get; set; }
		
		/// <summary>
		/// The postal code of the check's destination.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="address_zip")]
		public string Address_zip { get; set; }
		
		/// <summary>
		/// The transfer amount in USD cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the check's currency.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public AccountCurrency Currency { get; set; }
		
		/// <summary>
		/// The name that will be printed on the check.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="recipient_name")]
		public string Recipient_name { get; set; }
		
		/// <summary>
		/// The identifier of the Check Transfer with which this is associated.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transfer_id")]
		public string Transfer_id { get; set; }
	}
	
	public class TransactionSourceCheck_transfer_rejection
	{
		
		/// <summary>
		/// The identifier of the Check Transfer that led to this Transaction.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transfer_id")]
		public string Transfer_id { get; set; }
	}
	
	public class TransactionSourceCheck_transfer_return
	{
		
		/// <summary>
		/// If available, a document with additional information about the return.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="file_id")]
		public string File_id { get; set; }
		
		/// <summary>
		/// The reason why the check was returned.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public Check_transferReturn_detailsReason Reason { get; set; }
		
		/// <summary>
		/// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the check was returned.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="returned_at")]
		public System.DateTimeOffset Returned_at { get; set; }
		
		/// <summary>
		/// The identifier of the Transaction that was created to credit you for the returned check.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transaction_id")]
		public string Transaction_id { get; set; }
		
		/// <summary>
		/// The identifier of the returned Check Transfer.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transfer_id")]
		public string Transfer_id { get; set; }
	}
	
	public class TransactionSourceCheck_transfer_stop_payment_request
	{
		
		/// <summary>
		/// The time the stop-payment was requested.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="requested_at")]
		public System.DateTimeOffset Requested_at { get; set; }
		
		/// <summary>
		/// The transaction ID of the corresponding credit transaction.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transaction_id")]
		public string Transaction_id { get; set; }
		
		/// <summary>
		/// The ID of the check transfer that was stopped.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transfer_id")]
		public string Transfer_id { get; set; }
		
		/// <summary>
		/// A constant representing the object's type. For this resource it will always be `check_transfer_stop_payment_request`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public Check_transferStop_payment_requestType Type { get; set; }
	}
	
	public class TransactionSourceDispute_resolution
	{
		
		/// <summary>
		/// The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public AccountCurrency Currency { get; set; }
		
		/// <summary>
		/// The identifier of the Transaction that was disputed.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="disputed_transaction_id")]
		public string Disputed_transaction_id { get; set; }
	}
	
	public class TransactionSourceEmpyreal_cash_deposit
	{
		
		/// <summary>
		/// The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="bag_id")]
		public string Bag_id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="deposit_date")]
		public System.DateTimeOffset Deposit_date { get; set; }
	}
	
	public class TransactionSourceFee_payment
	{
		
		/// <summary>
		/// The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction currency.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public AccountCurrency Currency { get; set; }
	}
	
	public class TransactionSourceInbound_ach_transfer
	{
		
		/// <summary>
		/// The amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_company_descriptive_date")]
		public string Originator_company_descriptive_date { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_company_discretionary_data")]
		public string Originator_company_discretionary_data { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_company_entry_description")]
		public string Originator_company_entry_description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_company_id")]
		public string Originator_company_id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_company_name")]
		public string Originator_company_name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiver_id_number")]
		public string Receiver_id_number { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiver_name")]
		public string Receiver_name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="trace_number")]
		public string Trace_number { get; set; }
	}
	
	public class TransactionSourceInbound_check
	{
		
		/// <summary>
		/// The amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="check_front_image_file_id")]
		public string Check_front_image_file_id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="check_number")]
		public string Check_number { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="check_rear_image_file_id")]
		public string Check_rear_image_file_id { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public AccountCurrency Currency { get; set; }
	}
	
	public class TransactionSourceInbound_international_ach_transfer
	{
		
		/// <summary>
		/// The amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="destination_country_code")]
		public string Destination_country_code { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="destination_currency_code")]
		public string Destination_currency_code { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="foreign_exchange_indicator")]
		public string Foreign_exchange_indicator { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="foreign_exchange_reference")]
		public string Foreign_exchange_reference { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="foreign_exchange_reference_indicator")]
		public string Foreign_exchange_reference_indicator { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="foreign_payment_amount")]
		public int Foreign_payment_amount { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="foreign_trace_number")]
		public string Foreign_trace_number { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="international_transaction_type_code")]
		public string International_transaction_type_code { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originating_currency_code")]
		public string Originating_currency_code { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originating_depository_financial_institution_branch_country")]
		public string Originating_depository_financial_institution_branch_country { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originating_depository_financial_institution_id")]
		public string Originating_depository_financial_institution_id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originating_depository_financial_institution_id_qualifier")]
		public string Originating_depository_financial_institution_id_qualifier { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originating_depository_financial_institution_name")]
		public string Originating_depository_financial_institution_name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_city")]
		public string Originator_city { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_company_entry_description")]
		public string Originator_company_entry_description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_country")]
		public string Originator_country { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_identification")]
		public string Originator_identification { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_name")]
		public string Originator_name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_postal_code")]
		public string Originator_postal_code { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_state_or_province")]
		public string Originator_state_or_province { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_street_address")]
		public string Originator_street_address { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="payment_related_information")]
		public string Payment_related_information { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="payment_related_information2")]
		public string Payment_related_information2 { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiver_city")]
		public string Receiver_city { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiver_country")]
		public string Receiver_country { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiver_identification_number")]
		public string Receiver_identification_number { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiver_postal_code")]
		public string Receiver_postal_code { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiver_state_or_province")]
		public string Receiver_state_or_province { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiver_street_address")]
		public string Receiver_street_address { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiving_company_or_individual_name")]
		public string Receiving_company_or_individual_name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiving_depository_financial_institution_country")]
		public string Receiving_depository_financial_institution_country { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiving_depository_financial_institution_id")]
		public string Receiving_depository_financial_institution_id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiving_depository_financial_institution_id_qualifier")]
		public string Receiving_depository_financial_institution_id_qualifier { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiving_depository_financial_institution_name")]
		public string Receiving_depository_financial_institution_name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="trace_number")]
		public string Trace_number { get; set; }
	}
	
	public class TransactionSourceInbound_real_time_payments_transfer_confirmation
	{
		
		/// <summary>
		/// The amount in the minor unit of the transfer's currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The name the sender of the transfer specified as the recipient of the transfer.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="creditor_name")]
		public string Creditor_name { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code of the transfer's currency. This will always be "USD" for a Real Time Payments transfer.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public AccountCurrency Currency { get; set; }
		
		/// <summary>
		/// The account number of the account that sent the transfer.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="debtor_account_number")]
		public string Debtor_account_number { get; set; }
		
		/// <summary>
		/// The name provided by the sender of the transfer.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="debtor_name")]
		public string Debtor_name { get; set; }
		
		/// <summary>
		/// The routing number of the account that sent the transfer.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="debtor_routing_number")]
		public string Debtor_routing_number { get; set; }
		
		/// <summary>
		/// Additional information included with the transfer.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="remittance_information")]
		public string Remittance_information { get; set; }
		
		/// <summary>
		/// The Real Time Payments network identification of the transfer
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transaction_identification")]
		public string Transaction_identification { get; set; }
	}
	
	public class TransactionSourceInbound_wire_drawdown_payment
	{
		
		/// <summary>
		/// The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="beneficiary_address_line1")]
		public string Beneficiary_address_line1 { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="beneficiary_address_line2")]
		public string Beneficiary_address_line2 { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="beneficiary_address_line3")]
		public string Beneficiary_address_line3 { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="beneficiary_name")]
		public string Beneficiary_name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="beneficiary_reference")]
		public string Beneficiary_reference { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="input_message_accountability_data")]
		public string Input_message_accountability_data { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_address_line1")]
		public string Originator_address_line1 { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_address_line2")]
		public string Originator_address_line2 { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_address_line3")]
		public string Originator_address_line3 { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_name")]
		public string Originator_name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_to_beneficiary_information")]
		public string Originator_to_beneficiary_information { get; set; }
	}
	
	public class TransactionSourceInbound_wire_drawdown_payment_reversal
	{
		
		/// <summary>
		/// The amount that was reversed.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The description on the reversal message from Fedwire.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The Fedwire cycle date for the wire reversal.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="input_cycle_date")]
		public System.DateOnly Input_cycle_date { get; set; }
		
		/// <summary>
		/// The Fedwire transaction identifier.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="input_message_accountability_data")]
		public string Input_message_accountability_data { get; set; }
		
		/// <summary>
		/// The Fedwire sequence number.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="input_sequence_number")]
		public string Input_sequence_number { get; set; }
		
		/// <summary>
		/// The Fedwire input source identifier.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="input_source")]
		public string Input_source { get; set; }
		
		/// <summary>
		/// The Fedwire cycle date for the wire transfer that was reversed.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="previous_message_input_cycle_date")]
		public System.DateOnly Previous_message_input_cycle_date { get; set; }
		
		/// <summary>
		/// The Fedwire transaction identifier for the wire transfer that was reversed.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="previous_message_input_message_accountability_data")]
		public string Previous_message_input_message_accountability_data { get; set; }
		
		/// <summary>
		/// The Fedwire sequence number for the wire transfer that was reversed.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="previous_message_input_sequence_number")]
		public string Previous_message_input_sequence_number { get; set; }
		
		/// <summary>
		/// The Fedwire input source identifier for the wire transfer that was reversed.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="previous_message_input_source")]
		public string Previous_message_input_source { get; set; }
	}
	
	public class TransactionSourceInbound_wire_reversal
	{
		
		/// <summary>
		/// The amount that was reversed.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the reversal was created.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.DateTimeOffset Created_at { get; set; }
		
		/// <summary>
		/// The description on the reversal message from Fedwire.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Additional financial institution information included in the wire reversal.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="financial_institution_to_financial_institution_information")]
		public string Financial_institution_to_financial_institution_information { get; set; }
		
		/// <summary>
		/// The Fedwire cycle date for the wire reversal.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="input_cycle_date")]
		public System.DateOnly Input_cycle_date { get; set; }
		
		/// <summary>
		/// The Fedwire transaction identifier.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="input_message_accountability_data")]
		public string Input_message_accountability_data { get; set; }
		
		/// <summary>
		/// The Fedwire sequence number.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="input_sequence_number")]
		public string Input_sequence_number { get; set; }
		
		/// <summary>
		/// The Fedwire input source identifier.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="input_source")]
		public string Input_source { get; set; }
		
		/// <summary>
		/// The Fedwire cycle date for the wire transfer that was reversed.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="previous_message_input_cycle_date")]
		public System.DateOnly Previous_message_input_cycle_date { get; set; }
		
		/// <summary>
		/// The Fedwire transaction identifier for the wire transfer that was reversed.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="previous_message_input_message_accountability_data")]
		public string Previous_message_input_message_accountability_data { get; set; }
		
		/// <summary>
		/// The Fedwire sequence number for the wire transfer that was reversed.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="previous_message_input_sequence_number")]
		public string Previous_message_input_sequence_number { get; set; }
		
		/// <summary>
		/// The Fedwire input source identifier for the wire transfer that was reversed.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="previous_message_input_source")]
		public string Previous_message_input_source { get; set; }
		
		/// <summary>
		/// Information included in the wire reversal for the receiving financial institution.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiver_financial_institution_information")]
		public string Receiver_financial_institution_information { get; set; }
		
		/// <summary>
		/// The ID for the Transaction associated with the transfer reversal.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transaction_id")]
		public string Transaction_id { get; set; }
	}
	
	public class TransactionSourceInbound_wire_transfer
	{
		
		/// <summary>
		/// The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="beneficiary_address_line1")]
		public string Beneficiary_address_line1 { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="beneficiary_address_line2")]
		public string Beneficiary_address_line2 { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="beneficiary_address_line3")]
		public string Beneficiary_address_line3 { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="beneficiary_name")]
		public string Beneficiary_name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="beneficiary_reference")]
		public string Beneficiary_reference { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="input_message_accountability_data")]
		public string Input_message_accountability_data { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_address_line1")]
		public string Originator_address_line1 { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_address_line2")]
		public string Originator_address_line2 { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_address_line3")]
		public string Originator_address_line3 { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_name")]
		public string Originator_name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_to_beneficiary_information")]
		public string Originator_to_beneficiary_information { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_to_beneficiary_information_line1")]
		public string Originator_to_beneficiary_information_line1 { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_to_beneficiary_information_line2")]
		public string Originator_to_beneficiary_information_line2 { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_to_beneficiary_information_line3")]
		public string Originator_to_beneficiary_information_line3 { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator_to_beneficiary_information_line4")]
		public string Originator_to_beneficiary_information_line4 { get; set; }
	}
	
	public class TransactionSourceInterest_payment
	{
		
		/// <summary>
		/// The account on which the interest was accrued.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="accrued_on_account_id")]
		public string Accrued_on_account_id { get; set; }
		
		/// <summary>
		/// The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction currency.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public AccountCurrency Currency { get; set; }
		
		/// <summary>
		/// The end of the period for which this transaction paid interest.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="period_end")]
		public System.DateTimeOffset Period_end { get; set; }
		
		/// <summary>
		/// The start of the period for which this transaction paid interest.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="period_start")]
		public System.DateTimeOffset Period_start { get; set; }
	}
	
	public class TransactionSourceInternal_source
	{
		
		/// <summary>
		/// The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction currency.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public AccountCurrency Currency { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public Inbound_ach_transfer_simulation_resultTransactionSourceInternal_sourceReason Reason { get; set; }
	}
	
	public class TransactionSourceReal_time_payments_transfer_acknowledgement
	{
		
		/// <summary>
		/// The transfer amount in USD cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The destination account number.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="destination_account_number")]
		public string Destination_account_number { get; set; }
		
		/// <summary>
		/// The American Bankers' Association (ABA) Routing Transit Number (RTN).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="destination_routing_number")]
		public string Destination_routing_number { get; set; }
		
		/// <summary>
		/// Unstructured information that will show on the recipient's bank statement.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="remittance_information")]
		public string Remittance_information { get; set; }
		
		/// <summary>
		/// The identifier of the Real Time Payments Transfer that led to this Transaction.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transfer_id")]
		public string Transfer_id { get; set; }
	}
	
	public class TransactionSourceSample_funds
	{
		
		/// <summary>
		/// Where the sample funds came from.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originator")]
		public string Originator { get; set; }
	}
	
	public class TransactionSourceWire_drawdown_payment_intention
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="account_number")]
		public string Account_number { get; set; }
		
		/// <summary>
		/// The transfer amount in USD cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="message_to_recipient")]
		public string Message_to_recipient { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="routing_number")]
		public string Routing_number { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transfer_id")]
		public string Transfer_id { get; set; }
	}
	
	public class TransactionSourceWire_drawdown_payment_rejection
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transfer_id")]
		public string Transfer_id { get; set; }
	}
	
	public class TransactionSourceWire_transfer_intention
	{
		
		/// <summary>
		/// The destination account number.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="account_number")]
		public string Account_number { get; set; }
		
		/// <summary>
		/// The transfer amount in USD cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The message that will show on the recipient's bank statement.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="message_to_recipient")]
		public string Message_to_recipient { get; set; }
		
		/// <summary>
		/// The American Bankers' Association (ABA) Routing Transit Number (RTN).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="routing_number")]
		public string Routing_number { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transfer_id")]
		public string Transfer_id { get; set; }
	}
	
	public class TransactionSourceWire_transfer_rejection
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transfer_id")]
		public string Transfer_id { get; set; }
	}
	
	/// <summary>
	/// A list of Transaction objects
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Transaction_list
	{
		
		/// <summary>
		/// The contents of the list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Transaction[] Data { get; set; }
		
		/// <summary>
		/// A pointer to a place in the list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="next_cursor")]
		public string Next_cursor { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Update_a_card_parameters
	{
		
		/// <summary>
		/// The card's updated billing address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="billing_address")]
		public Update_a_card_parametersBilling_address Billing_address { get; set; }
		
		/// <summary>
		/// The description you choose to give the card.
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Description { get; set; }
		
		/// <summary>
		/// The contact information used in the two-factor steps for digital wallet card creation. At least one field must be present to complete the digital wallet steps.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="digital_wallet")]
		public Update_a_card_parametersDigital_wallet Digital_wallet { get; set; }
		
		/// <summary>
		/// The status to update the Card with.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public Account_numberStatus Status { get; set; }
	}
	
	public class Update_a_card_parametersBilling_address
	{
		
		/// <summary>
		/// The city of the billing address.
		/// Required
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="city")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string City { get; set; }
		
		/// <summary>
		/// The first line of the billing address.
		/// Required
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="line1")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Line1 { get; set; }
		
		/// <summary>
		/// The second line of the billing address.
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="line2")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Line2 { get; set; }
		
		/// <summary>
		/// The postal code of the billing address.
		/// Required
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="postal_code")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Postal_code { get; set; }
		
		/// <summary>
		/// The US state of the billing address.
		/// Required
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="state")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string State { get; set; }
	}
	
	public class Update_a_card_parametersDigital_wallet
	{
		
		/// <summary>
		/// The card profile assigned to this digital card. Card profiles may also be assigned at the program level.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="card_profile_id")]
		public string Card_profile_id { get; set; }
		
		/// <summary>
		/// An email address that can be used to verify the cardholder via one-time passcode over email.
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Email { get; set; }
		
		/// <summary>
		/// A phone number that can be used to verify the cardholder via one-time passcode over SMS.
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phone")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Phone { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Update_a_limit_parameters
	{
		
		/// <summary>
		/// The status to update the limit with.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public Update_a_limit_parametersStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Update_a_limit_parametersStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="inactive")]
		inactive = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="active")]
		active = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Update_an_account_number_parameters
	{
		
		/// <summary>
		/// The name you choose for the Account Number.
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Name { get; set; }
		
		/// <summary>
		/// This indicates if transfers can be made to the Account Number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public Account_numberStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Update_an_account_parameters
	{
		
		/// <summary>
		/// The new name of the Account.
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Update_an_event_subscription_parameters
	{
		
		/// <summary>
		/// The status to update the Event Subscription with.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<Update_an_event_subscription_parametersStatus> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Update_an_event_subscription_parametersStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="active")]
		active = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="disabled")]
		disabled = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="deleted")]
		deleted = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Update_an_external_account_parameters
	{
		
		/// <summary>
		/// The description you choose to give the external account.
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Description { get; set; }
		
		/// <summary>
		/// The status of the External Account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public External_accountStatus Status { get; set; }
	}
	
	/// <summary>
	/// Wire drawdown requests enable you to request that someone else send you a wire. This feature is in beta; reach out to [support@increase.com](mailto:support@increase.com) to learn more.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Wire_drawdown_request
	{
		
		/// <summary>
		/// The Account Number to which the recipient of this request is being requested to send funds.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="account_number_id")]
		public string Account_number_id { get; set; }
		
		/// <summary>
		/// The amount being requested in cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the amount being requested. Will always be "USD".
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public string Currency { get; set; }
		
		/// <summary>
		/// If the recipient fulfills the drawdown request by sending funds, then this will be the identifier of the corresponding Transaction.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fulfillment_transaction_id")]
		public string Fulfillment_transaction_id { get; set; }
		
		/// <summary>
		/// The Wire drawdown request identifier.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The message the recipient will see as part of the drawdown request.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="message_to_recipient")]
		public string Message_to_recipient { get; set; }
		
		/// <summary>
		/// The drawdown request's recipient's account number.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="recipient_account_number")]
		public string Recipient_account_number { get; set; }
		
		/// <summary>
		/// Line 1 of the drawdown request's recipient's address.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="recipient_address_line1")]
		public string Recipient_address_line1 { get; set; }
		
		/// <summary>
		/// Line 2 of the drawdown request's recipient's address.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="recipient_address_line2")]
		public string Recipient_address_line2 { get; set; }
		
		/// <summary>
		/// Line 3 of the drawdown request's recipient's address.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="recipient_address_line3")]
		public string Recipient_address_line3 { get; set; }
		
		/// <summary>
		/// The drawdown request's recipient's name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="recipient_name")]
		public string Recipient_name { get; set; }
		
		/// <summary>
		/// The drawdown request's recipient's routing number.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="recipient_routing_number")]
		public string Recipient_routing_number { get; set; }
		
		/// <summary>
		/// The lifecycle status of the drawdown request.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public Wire_drawdown_requestStatus Status { get; set; }
		
		/// <summary>
		/// After the drawdown request is submitted to Fedwire, this will contain supplemental details.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="submission")]
		public Wire_drawdown_requestSubmission Submission { get; set; }
		
		/// <summary>
		/// A constant representing the object's type. For this resource it will always be `wire_drawdown_request`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public Wire_drawdown_requestType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Wire_drawdown_requestStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pending_submission")]
		pending_submission = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pending_response")]
		pending_response = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fulfilled")]
		fulfilled = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="refused")]
		refused = 3,
	}
	
	public class Wire_drawdown_requestSubmission
	{
		
		/// <summary>
		/// The input message accountability data (IMAD) uniquely identifying the submission with Fedwire.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="input_message_accountability_data")]
		public string Input_message_accountability_data { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Wire_drawdown_requestType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="wire_drawdown_request")]
		wire_drawdown_request = 0,
	}
	
	/// <summary>
	/// A list of Wire Drawdown Request objects
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Wire_drawdown_request_list
	{
		
		/// <summary>
		/// The contents of the list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Wire_drawdown_request[] Data { get; set; }
		
		/// <summary>
		/// A pointer to a place in the list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="next_cursor")]
		public string Next_cursor { get; set; }
	}
	
	/// <summary>
	/// Wire transfers move funds between your Increase account and any other account accessible by Fedwire.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Wire_transfer
	{
		
		/// <summary>
		/// The Account to which the transfer belongs.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="account_id")]
		public string Account_id { get; set; }
		
		/// <summary>
		/// The destination account number.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="account_number")]
		public string Account_number { get; set; }
		
		/// <summary>
		/// The transfer amount in USD cents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// If your account requires approvals for transfers and the transfer was approved, this will contain details of the approval.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="approval")]
		public Wire_transferApproval Approval { get; set; }
		
		/// <summary>
		/// The beneficiary's address line 1.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="beneficiary_address_line1")]
		public string Beneficiary_address_line1 { get; set; }
		
		/// <summary>
		/// The beneficiary's address line 2.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="beneficiary_address_line2")]
		public string Beneficiary_address_line2 { get; set; }
		
		/// <summary>
		/// The beneficiary's address line 3.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="beneficiary_address_line3")]
		public string Beneficiary_address_line3 { get; set; }
		
		/// <summary>
		/// The beneficiary's name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="beneficiary_name")]
		public string Beneficiary_name { get; set; }
		
		/// <summary>
		/// If your account requires approvals for transfers and the transfer was not approved, this will contain details of the cancellation.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="cancellation")]
		public Wire_transferCancellation Cancellation { get; set; }
		
		/// <summary>
		/// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was created.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.DateTimeOffset Created_at { get; set; }
		
		/// <summary>
		/// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transfer's currency. For wire transfers this is always equal to `usd`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public AccountCurrency Currency { get; set; }
		
		/// <summary>
		/// The identifier of the External Account the transfer was made to, if any.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="external_account_id")]
		public string External_account_id { get; set; }
		
		/// <summary>
		/// The wire transfer's identifier.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The message that will show on the recipient's bank statement.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="message_to_recipient")]
		public string Message_to_recipient { get; set; }
		
		/// <summary>
		/// The transfer's network.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="network")]
		public Wire_transferNetwork Network { get; set; }
		
		/// <summary>
		/// If your transfer is reversed, this will contain details of the reversal.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reversal")]
		public Wire_transferReversal Reversal { get; set; }
		
		/// <summary>
		/// The American Bankers' Association (ABA) Routing Transit Number (RTN).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="routing_number")]
		public string Routing_number { get; set; }
		
		/// <summary>
		/// The lifecycle status of the transfer.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public Wire_transferStatus Status { get; set; }
		
		/// <summary>
		/// After the transfer is submitted to Fedwire, this will contain supplemental details.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="submission")]
		public Wire_transferSubmission Submission { get; set; }
		
		/// <summary>
		/// The ID for the transaction funding the transfer.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transaction_id")]
		public string Transaction_id { get; set; }
		
		/// <summary>
		/// A constant representing the object's type. For this resource it will always be `wire_transfer`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public Wire_transferType Type { get; set; }
	}
	
	public class Wire_transferApproval
	{
		
		/// <summary>
		/// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was approved.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="approved_at")]
		public System.DateTimeOffset Approved_at { get; set; }
		
		/// <summary>
		/// If the Transfer was approved by a user in the dashboard, the email address of that user.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="approved_by")]
		public string Approved_by { get; set; }
	}
	
	public class Wire_transferCancellation
	{
		
		/// <summary>
		/// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Transfer was canceled.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="canceled_at")]
		public System.DateTimeOffset Canceled_at { get; set; }
		
		/// <summary>
		/// If the Transfer was canceled by a user in the dashboard, the email address of that user.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="canceled_by")]
		public string Canceled_by { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Wire_transferNetwork
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="wire")]
		wire = 0,
	}
	
	public class Wire_transferReversal
	{
		
		/// <summary>
		/// The amount that was reversed.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the reversal was created.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.DateTimeOffset Created_at { get; set; }
		
		/// <summary>
		/// The description on the reversal message from Fedwire.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Additional financial institution information included in the wire reversal.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="financial_institution_to_financial_institution_information")]
		public string Financial_institution_to_financial_institution_information { get; set; }
		
		/// <summary>
		/// The Fedwire cycle date for the wire reversal.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="input_cycle_date")]
		public System.DateOnly Input_cycle_date { get; set; }
		
		/// <summary>
		/// The Fedwire transaction identifier.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="input_message_accountability_data")]
		public string Input_message_accountability_data { get; set; }
		
		/// <summary>
		/// The Fedwire sequence number.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="input_sequence_number")]
		public string Input_sequence_number { get; set; }
		
		/// <summary>
		/// The Fedwire input source identifier.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="input_source")]
		public string Input_source { get; set; }
		
		/// <summary>
		/// The Fedwire cycle date for the wire transfer that was reversed.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="previous_message_input_cycle_date")]
		public System.DateOnly Previous_message_input_cycle_date { get; set; }
		
		/// <summary>
		/// The Fedwire transaction identifier for the wire transfer that was reversed.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="previous_message_input_message_accountability_data")]
		public string Previous_message_input_message_accountability_data { get; set; }
		
		/// <summary>
		/// The Fedwire sequence number for the wire transfer that was reversed.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="previous_message_input_sequence_number")]
		public string Previous_message_input_sequence_number { get; set; }
		
		/// <summary>
		/// The Fedwire input source identifier for the wire transfer that was reversed.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="previous_message_input_source")]
		public string Previous_message_input_source { get; set; }
		
		/// <summary>
		/// Information included in the wire reversal for the receiving financial institution.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receiver_financial_institution_information")]
		public string Receiver_financial_institution_information { get; set; }
		
		/// <summary>
		/// The ID for the Transaction associated with the transfer reversal.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transaction_id")]
		public string Transaction_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Wire_transferStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="canceled")]
		canceled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="requires_attention")]
		requires_attention = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pending_approval")]
		pending_approval = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="rejected")]
		rejected = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="reversed")]
		reversed = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="complete")]
		complete = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pending_creating")]
		pending_creating = 6,
	}
	
	public class Wire_transferSubmission
	{
		
		/// <summary>
		/// The accountability data for the submission.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="input_message_accountability_data")]
		public string Input_message_accountability_data { get; set; }
		
		/// <summary>
		/// When this wire transfer was submitted to Fedwire.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="submitted_at")]
		public System.DateTimeOffset Submitted_at { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Wire_transferType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="wire_transfer")]
		wire_transfer = 0,
	}
	
	/// <summary>
	/// A list of Wire Transfer objects
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Wire_transfer_list
	{
		
		/// <summary>
		/// The contents of the list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Wire_transfer[] Data { get; set; }
		
		/// <summary>
		/// A pointer to a place in the list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="next_cursor")]
		public string Next_cursor { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// List Account Numbers
		/// List_account_numbers account_numbers
		/// </summary>
		/// <param name="limit">Minimum: 0</param>
		/// <returns>Account Number List</returns>
		public async Task<Account_number_list> List_account_numbersAsync(string cursor, int limit, Account_numberStatus status, string account_id, System.DateTimeOffset created_at_after, System.DateTimeOffset created_at_before, System.DateTimeOffset created_at_on_or_after, System.DateTimeOffset created_at_on_or_before, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account_numbers?cursor=" + (cursor==null? "" : System.Uri.EscapeDataString(cursor))+"&limit="+limit+"&status=" + status+"&account_id=" + (account_id==null? "" : System.Uri.EscapeDataString(account_id))+"&created_at.after=" + created_at_after.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&created_at.before=" + created_at_before.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&created_at.on_or_after=" + created_at_on_or_after.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&created_at.on_or_before=" + created_at_on_or_before.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Account_number_list>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create an Account Number
		/// Create_an_account_number account_numbers
		/// </summary>
		/// <returns>Account Number</returns>
		public async Task<Account_number> Create_an_account_numberAsync(Create_an_account_number_parameters requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account_numbers";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Account_number>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieve an Account Number
		/// Retrieve_an_account_number account_numbers/{account_number_id}
		/// </summary>
		/// <returns>Account Number</returns>
		public async Task<Account_number> Retrieve_an_account_numberAsync(string account_number_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account_numbers/"+ (account_number_id==null? "" : System.Uri.EscapeDataString(account_number_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Account_number>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update an Account Number
		/// Update_an_account_number account_numbers/{account_number_id}
		/// </summary>
		/// <returns>Account Number</returns>
		public async Task<Account_number> Update_an_account_numberAsync(string account_number_id, Update_an_account_number_parameters requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account_numbers/"+ (account_number_id==null? "" : System.Uri.EscapeDataString(account_number_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Account_number>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List Account Statements
		/// List_account_statements account_statements
		/// </summary>
		/// <param name="limit">Minimum: 0</param>
		/// <returns>Account Statement List</returns>
		public async Task<Account_statement_list> List_account_statementsAsync(string cursor, int limit, string account_id, System.DateTimeOffset statement_period_start_after, System.DateTimeOffset statement_period_start_before, System.DateTimeOffset statement_period_start_on_or_after, System.DateTimeOffset statement_period_start_on_or_before, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account_statements?cursor=" + (cursor==null? "" : System.Uri.EscapeDataString(cursor))+"&limit="+limit+"&account_id=" + (account_id==null? "" : System.Uri.EscapeDataString(account_id))+"&statement_period_start.after=" + statement_period_start_after.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&statement_period_start.before=" + statement_period_start_before.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&statement_period_start.on_or_after=" + statement_period_start_on_or_after.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&statement_period_start.on_or_before=" + statement_period_start_on_or_before.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Account_statement_list>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve an Account Statement
		/// Retrieve_an_account_statement account_statements/{account_statement_id}
		/// </summary>
		/// <returns>Account Statement</returns>
		public async Task<Account_statement> Retrieve_an_account_statementAsync(string account_statement_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account_statements/"+ (account_statement_id==null? "" : System.Uri.EscapeDataString(account_statement_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Account_statement>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List Account Transfers
		/// List_account_transfers account_transfers
		/// </summary>
		/// <param name="limit">Minimum: 0</param>
		/// <returns>Account Transfer List</returns>
		public async Task<Account_transfer_list> List_account_transfersAsync(string cursor, int limit, string account_id, System.DateTimeOffset created_at_after, System.DateTimeOffset created_at_before, System.DateTimeOffset created_at_on_or_after, System.DateTimeOffset created_at_on_or_before, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account_transfers?cursor=" + (cursor==null? "" : System.Uri.EscapeDataString(cursor))+"&limit="+limit+"&account_id=" + (account_id==null? "" : System.Uri.EscapeDataString(account_id))+"&created_at.after=" + created_at_after.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&created_at.before=" + created_at_before.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&created_at.on_or_after=" + created_at_on_or_after.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&created_at.on_or_before=" + created_at_on_or_before.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Account_transfer_list>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create an Account Transfer
		/// Create_an_account_transfer account_transfers
		/// </summary>
		/// <returns>Account Transfer</returns>
		public async Task<Account_transfer> Create_an_account_transferAsync(Create_an_account_transfer_parameters requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account_transfers";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Account_transfer>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieve an Account Transfer
		/// Retrieve_an_account_transfer account_transfers/{account_transfer_id}
		/// </summary>
		/// <returns>Account Transfer</returns>
		public async Task<Account_transfer> Retrieve_an_account_transferAsync(string account_transfer_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account_transfers/"+ (account_transfer_id==null? "" : System.Uri.EscapeDataString(account_transfer_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Account_transfer>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Approve an Account Transfer
		/// Approve_an_account_transfer account_transfers/{account_transfer_id}/approve
		/// </summary>
		/// <returns>Account Transfer</returns>
		public async Task<Account_transfer> Approve_an_account_transferAsync(string account_transfer_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account_transfers/"+ (account_transfer_id==null? "" : System.Uri.EscapeDataString(account_transfer_id))+"/approve";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Account_transfer>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Cancel an Account Transfer
		/// Cancel_an_account_transfer account_transfers/{account_transfer_id}/cancel
		/// </summary>
		/// <returns>Account Transfer</returns>
		public async Task<Account_transfer> Cancel_an_account_transferAsync(string account_transfer_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account_transfers/"+ (account_transfer_id==null? "" : System.Uri.EscapeDataString(account_transfer_id))+"/cancel";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Account_transfer>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List Accounts
		/// List_accounts accounts
		/// </summary>
		/// <param name="limit">Minimum: 0</param>
		/// <returns>Account List</returns>
		public async Task<Account_list> List_accountsAsync(string cursor, int limit, string entity_id, AccountStatus status, System.DateTimeOffset created_at_after, System.DateTimeOffset created_at_before, System.DateTimeOffset created_at_on_or_after, System.DateTimeOffset created_at_on_or_before, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "accounts?cursor=" + (cursor==null? "" : System.Uri.EscapeDataString(cursor))+"&limit="+limit+"&entity_id=" + (entity_id==null? "" : System.Uri.EscapeDataString(entity_id))+"&status=" + status+"&created_at.after=" + created_at_after.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&created_at.before=" + created_at_before.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&created_at.on_or_after=" + created_at_on_or_after.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&created_at.on_or_before=" + created_at_on_or_before.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Account_list>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create an Account
		/// Create_an_account accounts
		/// </summary>
		/// <returns>Account</returns>
		public async Task<Account> Create_an_accountAsync(Create_an_account_parameters requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "accounts";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Account>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieve an Account
		/// Retrieve_an_account accounts/{account_id}
		/// </summary>
		/// <returns>Account</returns>
		public async Task<Account> Retrieve_an_accountAsync(string account_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "accounts/"+ (account_id==null? "" : System.Uri.EscapeDataString(account_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Account>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update an Account
		/// Update_an_account accounts/{account_id}
		/// </summary>
		/// <returns>Account</returns>
		public async Task<Account> Update_an_accountAsync(string account_id, Update_an_account_parameters requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "accounts/"+ (account_id==null? "" : System.Uri.EscapeDataString(account_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Account>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Close an Account
		/// Close_an_account accounts/{account_id}/close
		/// </summary>
		/// <returns>Account</returns>
		public async Task<Account> Close_an_accountAsync(string account_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "accounts/"+ (account_id==null? "" : System.Uri.EscapeDataString(account_id))+"/close";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Account>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List ACH Prenotifications
		/// List_ach_prenotifications ach_prenotifications
		/// </summary>
		/// <param name="limit">Minimum: 0</param>
		/// <returns>ACH Prenotification List</returns>
		public async Task<Ach_prenotification_list> List_ach_prenotificationsAsync(string cursor, int limit, System.DateTimeOffset created_at_after, System.DateTimeOffset created_at_before, System.DateTimeOffset created_at_on_or_after, System.DateTimeOffset created_at_on_or_before, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ach_prenotifications?cursor=" + (cursor==null? "" : System.Uri.EscapeDataString(cursor))+"&limit="+limit+"&created_at.after=" + created_at_after.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&created_at.before=" + created_at_before.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&created_at.on_or_after=" + created_at_on_or_after.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&created_at.on_or_before=" + created_at_on_or_before.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Ach_prenotification_list>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create an ACH Prenotification
		/// Create_an_ach_prenotification ach_prenotifications
		/// </summary>
		/// <returns>ACH Prenotification</returns>
		public async Task<Ach_prenotification> Create_an_ach_prenotificationAsync(Create_an_ach_prenotification_parameters requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ach_prenotifications";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Ach_prenotification>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieve an ACH Prenotification
		/// Retrieve_an_ach_prenotification ach_prenotifications/{ach_prenotification_id}
		/// </summary>
		/// <returns>ACH Prenotification</returns>
		public async Task<Ach_prenotification> Retrieve_an_ach_prenotificationAsync(string ach_prenotification_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ach_prenotifications/"+ (ach_prenotification_id==null? "" : System.Uri.EscapeDataString(ach_prenotification_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Ach_prenotification>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List ACH Transfers
		/// List_ach_transfers ach_transfers
		/// </summary>
		/// <param name="limit">Minimum: 0</param>
		/// <returns>ACH Transfer List</returns>
		public async Task<Ach_transfer_list> List_ach_transfersAsync(string cursor, int limit, string account_id, string external_account_id, System.DateTimeOffset created_at_after, System.DateTimeOffset created_at_before, System.DateTimeOffset created_at_on_or_after, System.DateTimeOffset created_at_on_or_before, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ach_transfers?cursor=" + (cursor==null? "" : System.Uri.EscapeDataString(cursor))+"&limit="+limit+"&account_id=" + (account_id==null? "" : System.Uri.EscapeDataString(account_id))+"&external_account_id=" + (external_account_id==null? "" : System.Uri.EscapeDataString(external_account_id))+"&created_at.after=" + created_at_after.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&created_at.before=" + created_at_before.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&created_at.on_or_after=" + created_at_on_or_after.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&created_at.on_or_before=" + created_at_on_or_before.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Ach_transfer_list>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create an ACH Transfer
		/// Create_an_ach_transfer ach_transfers
		/// </summary>
		/// <returns>ACH Transfer</returns>
		public async Task<Ach_transfer> Create_an_ach_transferAsync(Create_an_ach_transfer_parameters requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ach_transfers";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Ach_transfer>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieve an ACH Transfer
		/// Retrieve_an_ach_transfer ach_transfers/{ach_transfer_id}
		/// </summary>
		/// <returns>ACH Transfer</returns>
		public async Task<Ach_transfer> Retrieve_an_ach_transferAsync(string ach_transfer_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ach_transfers/"+ (ach_transfer_id==null? "" : System.Uri.EscapeDataString(ach_transfer_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Ach_transfer>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Approve an ACH Transfer
		/// Approves an ACH Transfer in a pending_approval state.
		/// Approve_an_ach_transfer ach_transfers/{ach_transfer_id}/approve
		/// </summary>
		/// <returns>ACH Transfer</returns>
		public async Task<Ach_transfer> Approve_an_ach_transferAsync(string ach_transfer_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ach_transfers/"+ (ach_transfer_id==null? "" : System.Uri.EscapeDataString(ach_transfer_id))+"/approve";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Ach_transfer>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Cancel a pending ACH Transfer
		/// Cancels an ACH Transfer in a pending_approval state.
		/// Cancel_a_pending_ach_transfer ach_transfers/{ach_transfer_id}/cancel
		/// </summary>
		/// <returns>ACH Transfer</returns>
		public async Task<Ach_transfer> Cancel_a_pending_ach_transferAsync(string ach_transfer_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ach_transfers/"+ (ach_transfer_id==null? "" : System.Uri.EscapeDataString(ach_transfer_id))+"/cancel";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Ach_transfer>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Look up the balance for an Account
		/// Look_up_the_balance_for_an_account balance_lookups
		/// </summary>
		/// <returns>Balance Lookup</returns>
		public async Task<Balance_lookup> Look_up_the_balance_for_an_accountAsync(Look_up_the_balance_for_an_account_parameters requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "balance_lookups";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Balance_lookup>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List Bookkeeping Accounts
		/// List_bookkeeping_accounts bookkeeping_accounts
		/// </summary>
		/// <param name="limit">Minimum: 0</param>
		/// <returns>Bookkeeping Account List</returns>
		public async Task<Bookkeeping_account_list> List_bookkeeping_accountsAsync(string cursor, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "bookkeeping_accounts?cursor=" + (cursor==null? "" : System.Uri.EscapeDataString(cursor))+"&limit="+limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Bookkeeping_account_list>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a Bookkeeping Account
		/// Create_a_bookkeeping_account bookkeeping_accounts
		/// </summary>
		/// <returns>Bookkeeping Account</returns>
		public async Task<Bookkeeping_account> Create_a_bookkeeping_accountAsync(Create_a_bookkeeping_account_parameters requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "bookkeeping_accounts";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Bookkeeping_account>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List Bookkeeping Entries
		/// List_bookkeeping_entries bookkeeping_entries
		/// </summary>
		/// <param name="limit">Minimum: 0</param>
		/// <returns>Bookkeeping Entry List</returns>
		public async Task<Bookkeeping_entry_list> List_bookkeeping_entriesAsync(string cursor, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "bookkeeping_entries?cursor=" + (cursor==null? "" : System.Uri.EscapeDataString(cursor))+"&limit="+limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Bookkeeping_entry_list>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a Bookkeeping Entry Set
		/// Create_a_bookkeeping_entry_set bookkeeping_entry_sets
		/// </summary>
		/// <returns>Bookkeeping Entry Set</returns>
		public async Task<Bookkeeping_entry_set> Create_a_bookkeeping_entry_setAsync(Create_a_bookkeeping_entry_set_parameters requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "bookkeeping_entry_sets";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Bookkeeping_entry_set>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List Card Disputes
		/// List_card_disputes card_disputes
		/// </summary>
		/// <param name="limit">Minimum: 0</param>
		/// <returns>Card Dispute List</returns>
		public async Task<Card_dispute_list> List_card_disputesAsync(string cursor, int limit, System.DateTimeOffset created_at_after, System.DateTimeOffset created_at_before, System.DateTimeOffset created_at_on_or_after, System.DateTimeOffset created_at_on_or_before, Card_disputeStatus[] status_in, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "card_disputes?cursor=" + (cursor==null? "" : System.Uri.EscapeDataString(cursor))+"&limit="+limit+"&created_at.after=" + created_at_after.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&created_at.before=" + created_at_before.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&created_at.on_or_after=" + created_at_on_or_after.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&created_at.on_or_before=" + created_at_on_or_before.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&"+string.Join("&", status_in.Select(z => $"status.in={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Card_dispute_list>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a Card Dispute
		/// Create_a_card_dispute card_disputes
		/// </summary>
		/// <returns>Card Dispute</returns>
		public async Task<Card_dispute> Create_a_card_disputeAsync(Create_a_card_dispute_parameters requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "card_disputes";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Card_dispute>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieve a Card Dispute
		/// Retrieve_a_card_dispute card_disputes/{card_dispute_id}
		/// </summary>
		/// <returns>Card Dispute</returns>
		public async Task<Card_dispute> Retrieve_a_card_disputeAsync(string card_dispute_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "card_disputes/"+ (card_dispute_id==null? "" : System.Uri.EscapeDataString(card_dispute_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Card_dispute>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List Card Profiles
		/// List_card_profiles card_profiles
		/// </summary>
		/// <param name="limit">Minimum: 0</param>
		/// <returns>Card Profile List</returns>
		public async Task<Card_profile_list> List_card_profilesAsync(string cursor, int limit, Card_profileStatus[] status_in, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "card_profiles?cursor=" + (cursor==null? "" : System.Uri.EscapeDataString(cursor))+"&limit="+limit+"&"+string.Join("&", status_in.Select(z => $"status.in={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Card_profile_list>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a Card Profile
		/// Create_a_card_profile card_profiles
		/// </summary>
		/// <returns>Card Profile</returns>
		public async Task<Card_profile> Create_a_card_profileAsync(Create_a_card_profile_parameters requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "card_profiles";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Card_profile>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieve a Card Profile
		/// Retrieve_a_card_profile card_profiles/{card_profile_id}
		/// </summary>
		/// <returns>Card Profile</returns>
		public async Task<Card_profile> Retrieve_a_card_profileAsync(string card_profile_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "card_profiles/"+ (card_profile_id==null? "" : System.Uri.EscapeDataString(card_profile_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Card_profile>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List Cards
		/// List_cards cards
		/// </summary>
		/// <param name="limit">Minimum: 0</param>
		/// <returns>Card List</returns>
		public async Task<Card_list> List_cardsAsync(string cursor, int limit, string account_id, System.DateTimeOffset created_at_after, System.DateTimeOffset created_at_before, System.DateTimeOffset created_at_on_or_after, System.DateTimeOffset created_at_on_or_before, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "cards?cursor=" + (cursor==null? "" : System.Uri.EscapeDataString(cursor))+"&limit="+limit+"&account_id=" + (account_id==null? "" : System.Uri.EscapeDataString(account_id))+"&created_at.after=" + created_at_after.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&created_at.before=" + created_at_before.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&created_at.on_or_after=" + created_at_on_or_after.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&created_at.on_or_before=" + created_at_on_or_before.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Card_list>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a Card
		/// Create_a_card cards
		/// </summary>
		/// <returns>Card</returns>
		public async Task<Card> Create_a_cardAsync(Create_a_card_parameters requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "cards";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Card>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieve a Card
		/// Retrieve_a_card cards/{card_id}
		/// </summary>
		/// <returns>Card</returns>
		public async Task<Card> Retrieve_a_cardAsync(string card_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "cards/"+ (card_id==null? "" : System.Uri.EscapeDataString(card_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Card>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a Card
		/// Update_a_card cards/{card_id}
		/// </summary>
		/// <returns>Card</returns>
		public async Task<Card> Update_a_cardAsync(string card_id, Update_a_card_parameters requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "cards/"+ (card_id==null? "" : System.Uri.EscapeDataString(card_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Card>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieve sensitive details for a Card
		/// Retrieve_sensitive_details_for_a_card cards/{card_id}/details
		/// </summary>
		/// <returns>Card Details</returns>
		public async Task<Card_details> Retrieve_sensitive_details_for_a_cardAsync(string card_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "cards/"+ (card_id==null? "" : System.Uri.EscapeDataString(card_id))+"/details";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Card_details>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List Check Deposits
		/// List_check_deposits check_deposits
		/// </summary>
		/// <param name="limit">Minimum: 0</param>
		/// <returns>Check Deposit List</returns>
		public async Task<Check_deposit_list> List_check_depositsAsync(string cursor, int limit, string account_id, System.DateTimeOffset created_at_after, System.DateTimeOffset created_at_before, System.DateTimeOffset created_at_on_or_after, System.DateTimeOffset created_at_on_or_before, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "check_deposits?cursor=" + (cursor==null? "" : System.Uri.EscapeDataString(cursor))+"&limit="+limit+"&account_id=" + (account_id==null? "" : System.Uri.EscapeDataString(account_id))+"&created_at.after=" + created_at_after.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&created_at.before=" + created_at_before.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&created_at.on_or_after=" + created_at_on_or_after.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&created_at.on_or_before=" + created_at_on_or_before.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Check_deposit_list>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a Check Deposit
		/// Create_a_check_deposit check_deposits
		/// </summary>
		/// <returns>Check Deposit</returns>
		public async Task<Check_deposit> Create_a_check_depositAsync(Create_a_check_deposit_parameters requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "check_deposits";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Check_deposit>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieve a Check Deposit
		/// Retrieve_a_check_deposit check_deposits/{check_deposit_id}
		/// </summary>
		/// <returns>Check Deposit</returns>
		public async Task<Check_deposit> Retrieve_a_check_depositAsync(string check_deposit_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "check_deposits/"+ (check_deposit_id==null? "" : System.Uri.EscapeDataString(check_deposit_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Check_deposit>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List Check Transfers
		/// List_check_transfers check_transfers
		/// </summary>
		/// <param name="limit">Minimum: 0</param>
		/// <returns>Check Transfer List</returns>
		public async Task<Check_transfer_list> List_check_transfersAsync(string cursor, int limit, string account_id, System.DateTimeOffset created_at_after, System.DateTimeOffset created_at_before, System.DateTimeOffset created_at_on_or_after, System.DateTimeOffset created_at_on_or_before, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "check_transfers?cursor=" + (cursor==null? "" : System.Uri.EscapeDataString(cursor))+"&limit="+limit+"&account_id=" + (account_id==null? "" : System.Uri.EscapeDataString(account_id))+"&created_at.after=" + created_at_after.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&created_at.before=" + created_at_before.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&created_at.on_or_after=" + created_at_on_or_after.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&created_at.on_or_before=" + created_at_on_or_before.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Check_transfer_list>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a Check Transfer
		/// Create_a_check_transfer check_transfers
		/// </summary>
		/// <returns>Check Transfer</returns>
		public async Task<Check_transfer> Create_a_check_transferAsync(Create_a_check_transfer_parameters requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "check_transfers";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Check_transfer>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieve a Check Transfer
		/// Retrieve_a_check_transfer check_transfers/{check_transfer_id}
		/// </summary>
		/// <returns>Check Transfer</returns>
		public async Task<Check_transfer> Retrieve_a_check_transferAsync(string check_transfer_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "check_transfers/"+ (check_transfer_id==null? "" : System.Uri.EscapeDataString(check_transfer_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Check_transfer>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Approve a Check Transfer
		/// Approve_a_check_transfer check_transfers/{check_transfer_id}/approve
		/// </summary>
		/// <returns>Check Transfer</returns>
		public async Task<Check_transfer> Approve_a_check_transferAsync(string check_transfer_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "check_transfers/"+ (check_transfer_id==null? "" : System.Uri.EscapeDataString(check_transfer_id))+"/approve";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Check_transfer>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Cancel a pending Check Transfer
		/// Cancel_a_pending_check_transfer check_transfers/{check_transfer_id}/cancel
		/// </summary>
		/// <returns>Check Transfer</returns>
		public async Task<Check_transfer> Cancel_a_pending_check_transferAsync(string check_transfer_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "check_transfers/"+ (check_transfer_id==null? "" : System.Uri.EscapeDataString(check_transfer_id))+"/cancel";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Check_transfer>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request a stop payment on a Check Transfer
		/// Request_a_stop_payment_on_a_check_transfer check_transfers/{check_transfer_id}/stop_payment
		/// </summary>
		/// <returns>Check Transfer</returns>
		public async Task<Check_transfer> Request_a_stop_payment_on_a_check_transferAsync(string check_transfer_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "check_transfers/"+ (check_transfer_id==null? "" : System.Uri.EscapeDataString(check_transfer_id))+"/stop_payment";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Check_transfer>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List Declined Transactions
		/// List_declined_transactions declined_transactions
		/// </summary>
		/// <param name="limit">Minimum: 0</param>
		/// <returns>Declined Transaction List</returns>
		public async Task<Declined_transaction_list> List_declined_transactionsAsync(string cursor, int limit, string account_id, System.DateTimeOffset created_at_after, System.DateTimeOffset created_at_before, System.DateTimeOffset created_at_on_or_after, System.DateTimeOffset created_at_on_or_before, string route_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "declined_transactions?cursor=" + (cursor==null? "" : System.Uri.EscapeDataString(cursor))+"&limit="+limit+"&account_id=" + (account_id==null? "" : System.Uri.EscapeDataString(account_id))+"&created_at.after=" + created_at_after.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&created_at.before=" + created_at_before.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&created_at.on_or_after=" + created_at_on_or_after.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&created_at.on_or_before=" + created_at_on_or_before.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&route_id=" + (route_id==null? "" : System.Uri.EscapeDataString(route_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Declined_transaction_list>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve a Declined Transaction
		/// Retrieve_a_declined_transaction declined_transactions/{declined_transaction_id}
		/// </summary>
		/// <returns>Declined Transaction</returns>
		public async Task<Declined_transaction> Retrieve_a_declined_transactionAsync(string declined_transaction_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "declined_transactions/"+ (declined_transaction_id==null? "" : System.Uri.EscapeDataString(declined_transaction_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Declined_transaction>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List Digital Wallet Tokens
		/// List_digital_wallet_tokens digital_wallet_tokens
		/// </summary>
		/// <param name="limit">Minimum: 0</param>
		/// <returns>Digital Wallet Token List</returns>
		public async Task<Digital_wallet_token_list> List_digital_wallet_tokensAsync(string cursor, int limit, string card_id, System.DateTimeOffset created_at_after, System.DateTimeOffset created_at_before, System.DateTimeOffset created_at_on_or_after, System.DateTimeOffset created_at_on_or_before, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "digital_wallet_tokens?cursor=" + (cursor==null? "" : System.Uri.EscapeDataString(cursor))+"&limit="+limit+"&card_id=" + (card_id==null? "" : System.Uri.EscapeDataString(card_id))+"&created_at.after=" + created_at_after.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&created_at.before=" + created_at_before.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&created_at.on_or_after=" + created_at_on_or_after.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&created_at.on_or_before=" + created_at_on_or_before.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Digital_wallet_token_list>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve a Digital Wallet Token
		/// Retrieve_a_digital_wallet_token digital_wallet_tokens/{digital_wallet_token_id}
		/// </summary>
		/// <returns>Digital Wallet Token</returns>
		public async Task<Digital_wallet_token> Retrieve_a_digital_wallet_tokenAsync(string digital_wallet_token_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "digital_wallet_tokens/"+ (digital_wallet_token_id==null? "" : System.Uri.EscapeDataString(digital_wallet_token_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Digital_wallet_token>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List Documents
		/// List_documents documents
		/// </summary>
		/// <param name="limit">Minimum: 0</param>
		/// <returns>Document List</returns>
		public async Task<Document_list> List_documentsAsync(string cursor, int limit, string entity_id, DocumentCategory[] category_in, System.DateTimeOffset created_at_after, System.DateTimeOffset created_at_before, System.DateTimeOffset created_at_on_or_after, System.DateTimeOffset created_at_on_or_before, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "documents?cursor=" + (cursor==null? "" : System.Uri.EscapeDataString(cursor))+"&limit="+limit+"&entity_id=" + (entity_id==null? "" : System.Uri.EscapeDataString(entity_id))+"&"+string.Join("&", category_in.Select(z => $"category.in={z}"))+"&created_at.after=" + created_at_after.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&created_at.before=" + created_at_before.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&created_at.on_or_after=" + created_at_on_or_after.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&created_at.on_or_before=" + created_at_on_or_before.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Document_list>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve a Document
		/// Retrieve_a_document documents/{document_id}
		/// </summary>
		/// <returns>Document</returns>
		public async Task<Document> Retrieve_a_documentAsync(string document_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "documents/"+ (document_id==null? "" : System.Uri.EscapeDataString(document_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Document>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List Entities
		/// List_entities entities
		/// </summary>
		/// <param name="limit">Minimum: 0</param>
		/// <returns>Entity List</returns>
		public async Task<Entity_list> List_entitiesAsync(string cursor, int limit, System.DateTimeOffset created_at_after, System.DateTimeOffset created_at_before, System.DateTimeOffset created_at_on_or_after, System.DateTimeOffset created_at_on_or_before, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "entities?cursor=" + (cursor==null? "" : System.Uri.EscapeDataString(cursor))+"&limit="+limit+"&created_at.after=" + created_at_after.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&created_at.before=" + created_at_before.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&created_at.on_or_after=" + created_at_on_or_after.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&created_at.on_or_before=" + created_at_on_or_before.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Entity_list>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create an Entity
		/// Create_an_entity entities
		/// </summary>
		/// <returns>Entity</returns>
		public async Task<Entity> Create_an_entityAsync(Create_an_entity_parameters requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "entities";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Entity>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieve an Entity
		/// Retrieve_an_entity entities/{entity_id}
		/// </summary>
		/// <returns>Entity</returns>
		public async Task<Entity> Retrieve_an_entityAsync(string entity_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "entities/"+ (entity_id==null? "" : System.Uri.EscapeDataString(entity_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Entity>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a supplemental document for an Entity
		/// Create_a_supplemental_document_for_an_entity entities/{entity_id}/supplemental_documents
		/// </summary>
		/// <returns>Entity</returns>
		public async Task<Entity> Create_a_supplemental_document_for_an_entityAsync(string entity_id, Create_a_supplemental_document_for_an_entity_parameters requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "entities/"+ (entity_id==null? "" : System.Uri.EscapeDataString(entity_id))+"/supplemental_documents";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Entity>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List Event Subscriptions
		/// List_event_subscriptions event_subscriptions
		/// </summary>
		/// <param name="limit">Minimum: 0</param>
		/// <returns>Event Subscription List</returns>
		public async Task<Event_subscription_list> List_event_subscriptionsAsync(string cursor, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "event_subscriptions?cursor=" + (cursor==null? "" : System.Uri.EscapeDataString(cursor))+"&limit="+limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Event_subscription_list>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create an Event Subscription
		/// Create_an_event_subscription event_subscriptions
		/// </summary>
		/// <returns>Event Subscription</returns>
		public async Task<Event_subscription> Create_an_event_subscriptionAsync(Create_an_event_subscription_parameters requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "event_subscriptions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Event_subscription>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieve an Event Subscription
		/// Retrieve_an_event_subscription event_subscriptions/{event_subscription_id}
		/// </summary>
		/// <returns>Event Subscription</returns>
		public async Task<Event_subscription> Retrieve_an_event_subscriptionAsync(string event_subscription_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "event_subscriptions/"+ (event_subscription_id==null? "" : System.Uri.EscapeDataString(event_subscription_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Event_subscription>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update an Event Subscription
		/// Update_an_event_subscription event_subscriptions/{event_subscription_id}
		/// </summary>
		/// <returns>Event Subscription</returns>
		public async Task<Event_subscription> Update_an_event_subscriptionAsync(string event_subscription_id, Update_an_event_subscription_parameters requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "event_subscriptions/"+ (event_subscription_id==null? "" : System.Uri.EscapeDataString(event_subscription_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Event_subscription>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List Events
		/// List_events events
		/// </summary>
		/// <param name="limit">Minimum: 0</param>
		/// <returns>Event List</returns>
		public async Task<Event_list> List_eventsAsync(string cursor, int limit, System.DateTimeOffset created_at_after, System.DateTimeOffset created_at_before, System.DateTimeOffset created_at_on_or_after, System.DateTimeOffset created_at_on_or_before, string[] category_in, string associated_object_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "events?cursor=" + (cursor==null? "" : System.Uri.EscapeDataString(cursor))+"&limit="+limit+"&created_at.after=" + created_at_after.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&created_at.before=" + created_at_before.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&created_at.on_or_after=" + created_at_on_or_after.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&created_at.on_or_before=" + created_at_on_or_before.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&"+string.Join("&", category_in.Select(z => $"category.in={System.Uri.EscapeDataString(z.ToString())}"))+"&associated_object_id=" + (associated_object_id==null? "" : System.Uri.EscapeDataString(associated_object_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Event_list>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve an Event
		/// Retrieve_an_event events/{event_id}
		/// </summary>
		/// <returns>Event</returns>
		public async Task<event_> Retrieve_an_eventAsync(string event_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "events/"+ (event_id==null? "" : System.Uri.EscapeDataString(event_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<event_>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List Exports
		/// List_exports exports
		/// </summary>
		/// <param name="limit">Minimum: 0</param>
		/// <returns>Export List</returns>
		public async Task<Export_list> List_exportsAsync(string cursor, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "exports?cursor=" + (cursor==null? "" : System.Uri.EscapeDataString(cursor))+"&limit="+limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Export_list>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create an Export
		/// Create_an_export exports
		/// </summary>
		/// <returns>Export</returns>
		public async Task<Export> Create_an_exportAsync(Create_an_export_parameters requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "exports";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Export>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieve an Export
		/// Retrieve_an_export exports/{export_id}
		/// </summary>
		/// <returns>Export</returns>
		public async Task<Export> Retrieve_an_exportAsync(string export_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "exports/"+ (export_id==null? "" : System.Uri.EscapeDataString(export_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Export>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List External Accounts
		/// List_external_accounts external_accounts
		/// </summary>
		/// <param name="limit">Minimum: 0</param>
		/// <returns>External Account List</returns>
		public async Task<External_account_list> List_external_accountsAsync(string cursor, int limit, External_accountStatus[] status_in, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "external_accounts?cursor=" + (cursor==null? "" : System.Uri.EscapeDataString(cursor))+"&limit="+limit+"&"+string.Join("&", status_in.Select(z => $"status.in={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<External_account_list>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create an External Account
		/// Create_an_external_account external_accounts
		/// </summary>
		/// <returns>External Account</returns>
		public async Task<External_account> Create_an_external_accountAsync(Create_an_external_account_parameters requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "external_accounts";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<External_account>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieve an External Account
		/// Retrieve_an_external_account external_accounts/{external_account_id}
		/// </summary>
		/// <returns>External Account</returns>
		public async Task<External_account> Retrieve_an_external_accountAsync(string external_account_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "external_accounts/"+ (external_account_id==null? "" : System.Uri.EscapeDataString(external_account_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<External_account>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update an External Account
		/// Update_an_external_account external_accounts/{external_account_id}
		/// </summary>
		/// <returns>External Account</returns>
		public async Task<External_account> Update_an_external_accountAsync(string external_account_id, Update_an_external_account_parameters requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "external_accounts/"+ (external_account_id==null? "" : System.Uri.EscapeDataString(external_account_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<External_account>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List Files
		/// List_files files
		/// </summary>
		/// <param name="limit">Minimum: 0</param>
		/// <returns>File List</returns>
		public async Task<File_list> List_filesAsync(string cursor, int limit, System.DateTimeOffset created_at_after, System.DateTimeOffset created_at_before, System.DateTimeOffset created_at_on_or_after, System.DateTimeOffset created_at_on_or_before, FilePurpose[] purpose_in, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "files?cursor=" + (cursor==null? "" : System.Uri.EscapeDataString(cursor))+"&limit="+limit+"&created_at.after=" + created_at_after.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&created_at.before=" + created_at_before.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&created_at.on_or_after=" + created_at_on_or_after.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&created_at.on_or_before=" + created_at_on_or_before.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&"+string.Join("&", purpose_in.Select(z => $"purpose.in={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<File_list>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve a File
		/// Retrieve_a_file files/{file_id}
		/// </summary>
		/// <returns>File</returns>
		public async Task<File> Retrieve_a_fileAsync(string file_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "files/"+ (file_id==null? "" : System.Uri.EscapeDataString(file_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<File>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve Group details
		/// Returns details for the currently authenticated Group.
		/// Retrieve_group_details groups/current
		/// </summary>
		/// <returns>Group</returns>
		public async Task<Group> Retrieve_group_detailsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "groups/current";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Group>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List Inbound ACH Transfer Returns
		/// List_inbound_ach_transfer_returns inbound_ach_transfer_returns
		/// </summary>
		/// <param name="limit">Minimum: 0</param>
		/// <returns>Inbound ACH Transfer Return List</returns>
		public async Task<Inbound_ach_transfer_return_list> List_inbound_ach_transfer_returnsAsync(string cursor, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "inbound_ach_transfer_returns?cursor=" + (cursor==null? "" : System.Uri.EscapeDataString(cursor))+"&limit="+limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Inbound_ach_transfer_return_list>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create an ACH Return
		/// Create_an_ach_return inbound_ach_transfer_returns
		/// </summary>
		/// <returns>Inbound ACH Transfer Return</returns>
		public async Task<Inbound_ach_transfer_return> Create_an_ach_returnAsync(Create_an_ach_return_parameters requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "inbound_ach_transfer_returns";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Inbound_ach_transfer_return>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieve an Inbound ACH Transfer Return
		/// Retrieve_an_inbound_ach_transfer_return inbound_ach_transfer_returns/{inbound_ach_transfer_return_id}
		/// </summary>
		/// <returns>Inbound ACH Transfer Return</returns>
		public async Task<Inbound_ach_transfer_return> Retrieve_an_inbound_ach_transfer_returnAsync(string inbound_ach_transfer_return_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "inbound_ach_transfer_returns/"+ (inbound_ach_transfer_return_id==null? "" : System.Uri.EscapeDataString(inbound_ach_transfer_return_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Inbound_ach_transfer_return>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List Inbound Wire Drawdown Requests
		/// List_inbound_wire_drawdown_requests inbound_wire_drawdown_requests
		/// </summary>
		/// <param name="limit">Minimum: 0</param>
		/// <returns>Inbound Wire Drawdown Request List</returns>
		public async Task<Inbound_wire_drawdown_request_list> List_inbound_wire_drawdown_requestsAsync(string cursor, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "inbound_wire_drawdown_requests?cursor=" + (cursor==null? "" : System.Uri.EscapeDataString(cursor))+"&limit="+limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Inbound_wire_drawdown_request_list>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve an Inbound Wire Drawdown Request
		/// Retrieve_an_inbound_wire_drawdown_request inbound_wire_drawdown_requests/{inbound_wire_drawdown_request_id}
		/// </summary>
		/// <returns>Inbound Wire Drawdown Request</returns>
		public async Task<Inbound_wire_drawdown_request> Retrieve_an_inbound_wire_drawdown_requestAsync(string inbound_wire_drawdown_request_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "inbound_wire_drawdown_requests/"+ (inbound_wire_drawdown_request_id==null? "" : System.Uri.EscapeDataString(inbound_wire_drawdown_request_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Inbound_wire_drawdown_request>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List Limits
		/// List_limits limits
		/// </summary>
		/// <param name="limit">Minimum: 0</param>
		/// <param name="model_id">Max length: 200
		/// Min length: 1
		// </param>
		/// <param name="status">Max length: 200
		/// Min length: 1
		// </param>
		/// <returns>Limit List</returns>
		public async Task<Limit_list> List_limitsAsync(string cursor, int limit, string model_id, string status, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "limits?cursor=" + (cursor==null? "" : System.Uri.EscapeDataString(cursor))+"&limit="+limit+"&model_id=" + (model_id==null? "" : System.Uri.EscapeDataString(model_id))+"&status=" + (status==null? "" : System.Uri.EscapeDataString(status));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Limit_list>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a Limit
		/// Create_a_limit limits
		/// </summary>
		/// <returns>Limit</returns>
		public async Task<Limit> Create_a_limitAsync(Create_a_limit_parameters requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "limits";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Limit>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieve a Limit
		/// Retrieve_a_limit limits/{limit_id}
		/// </summary>
		/// <returns>Limit</returns>
		public async Task<Limit> Retrieve_a_limitAsync(string limit_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "limits/"+ (limit_id==null? "" : System.Uri.EscapeDataString(limit_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Limit>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a Limit
		/// Update_a_limit limits/{limit_id}
		/// </summary>
		/// <returns>Limit</returns>
		public async Task<Limit> Update_a_limitAsync(string limit_id, Update_a_limit_parameters requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "limits/"+ (limit_id==null? "" : System.Uri.EscapeDataString(limit_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Limit>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List OAuth Connections
		/// List_oauth_connections oauth_connections
		/// </summary>
		/// <param name="limit">Minimum: 0</param>
		/// <returns>OAuth Connection List</returns>
		public async Task<Oauth_connection_list> List_oauth_connectionsAsync(string cursor, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "oauth_connections?cursor=" + (cursor==null? "" : System.Uri.EscapeDataString(cursor))+"&limit="+limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Oauth_connection_list>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve an OAuth Connection
		/// Retrieve_an_oauth_connection oauth_connections/{oauth_connection_id}
		/// </summary>
		/// <returns>OAuth Connection</returns>
		public async Task<Oauth_connection> Retrieve_an_oauth_connectionAsync(string oauth_connection_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "oauth_connections/"+ (oauth_connection_id==null? "" : System.Uri.EscapeDataString(oauth_connection_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Oauth_connection>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List Pending Transactions
		/// List_pending_transactions pending_transactions
		/// </summary>
		/// <param name="limit">Minimum: 0</param>
		/// <returns>Pending Transaction List</returns>
		public async Task<Pending_transaction_list> List_pending_transactionsAsync(string cursor, int limit, string account_id, string route_id, string source_id, ExportStatus[] status_in, System.DateTimeOffset created_at_after, System.DateTimeOffset created_at_before, System.DateTimeOffset created_at_on_or_after, System.DateTimeOffset created_at_on_or_before, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "pending_transactions?cursor=" + (cursor==null? "" : System.Uri.EscapeDataString(cursor))+"&limit="+limit+"&account_id=" + (account_id==null? "" : System.Uri.EscapeDataString(account_id))+"&route_id=" + (route_id==null? "" : System.Uri.EscapeDataString(route_id))+"&source_id=" + (source_id==null? "" : System.Uri.EscapeDataString(source_id))+"&"+string.Join("&", status_in.Select(z => $"status.in={z}"))+"&created_at.after=" + created_at_after.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&created_at.before=" + created_at_before.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&created_at.on_or_after=" + created_at_on_or_after.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&created_at.on_or_before=" + created_at_on_or_before.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Pending_transaction_list>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve a Pending Transaction
		/// Retrieve_a_pending_transaction pending_transactions/{pending_transaction_id}
		/// </summary>
		/// <returns>Pending Transaction</returns>
		public async Task<Pending_transaction> Retrieve_a_pending_transactionAsync(string pending_transaction_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "pending_transactions/"+ (pending_transaction_id==null? "" : System.Uri.EscapeDataString(pending_transaction_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Pending_transaction>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List Programs
		/// List_programs programs
		/// </summary>
		/// <param name="limit">Minimum: 0</param>
		/// <returns>Program List</returns>
		public async Task<Program_list> List_programsAsync(string cursor, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "programs?cursor=" + (cursor==null? "" : System.Uri.EscapeDataString(cursor))+"&limit="+limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Program_list>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve a Program
		/// Retrieve_a_program programs/{program_id}
		/// </summary>
		/// <returns>Program</returns>
		public async Task<Program> Retrieve_a_programAsync(string program_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "programs/"+ (program_id==null? "" : System.Uri.EscapeDataString(program_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Program>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve a Real-Time Decision
		/// Retrieve_a_real_time_decision real_time_decisions/{real_time_decision_id}
		/// </summary>
		/// <returns>Real-Time Decision</returns>
		public async Task<Real_time_decision> Retrieve_a_real_time_decisionAsync(string real_time_decision_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "real_time_decisions/"+ (real_time_decision_id==null? "" : System.Uri.EscapeDataString(real_time_decision_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Real_time_decision>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Action a Real-Time Decision
		/// Action_a_real_time_decision real_time_decisions/{real_time_decision_id}/action
		/// </summary>
		/// <returns>Real-Time Decision</returns>
		public async Task<Real_time_decision> Action_a_real_time_decisionAsync(string real_time_decision_id, Action_a_real_time_decision_parameters requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "real_time_decisions/"+ (real_time_decision_id==null? "" : System.Uri.EscapeDataString(real_time_decision_id))+"/action";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Real_time_decision>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List Real Time Payments Transfers
		/// List_real_time_payments_transfers real_time_payments_transfers
		/// </summary>
		/// <param name="limit">Minimum: 0</param>
		/// <returns>Real Time Payments Transfer List</returns>
		public async Task<Real_time_payments_transfer_list> List_real_time_payments_transfersAsync(string cursor, int limit, string account_id, string external_account_id, System.DateTimeOffset created_at_after, System.DateTimeOffset created_at_before, System.DateTimeOffset created_at_on_or_after, System.DateTimeOffset created_at_on_or_before, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "real_time_payments_transfers?cursor=" + (cursor==null? "" : System.Uri.EscapeDataString(cursor))+"&limit="+limit+"&account_id=" + (account_id==null? "" : System.Uri.EscapeDataString(account_id))+"&external_account_id=" + (external_account_id==null? "" : System.Uri.EscapeDataString(external_account_id))+"&created_at.after=" + created_at_after.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&created_at.before=" + created_at_before.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&created_at.on_or_after=" + created_at_on_or_after.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&created_at.on_or_before=" + created_at_on_or_before.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Real_time_payments_transfer_list>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a Real Time Payments Transfer
		/// Create_a_real_time_payments_transfer real_time_payments_transfers
		/// </summary>
		/// <returns>Real Time Payments Transfer</returns>
		public async Task<Real_time_payments_transfer> Create_a_real_time_payments_transferAsync(Create_a_real_time_payments_transfer_parameters requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "real_time_payments_transfers";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Real_time_payments_transfer>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieve a Real Time Payments Transfer
		/// Retrieve_a_real_time_payments_transfer real_time_payments_transfers/{real_time_payments_transfer_id}
		/// </summary>
		/// <returns>Real Time Payments Transfer</returns>
		public async Task<Real_time_payments_transfer> Retrieve_a_real_time_payments_transferAsync(string real_time_payments_transfer_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "real_time_payments_transfers/"+ (real_time_payments_transfer_id==null? "" : System.Uri.EscapeDataString(real_time_payments_transfer_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Real_time_payments_transfer>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List Routing Numbers
		/// You can use this API to confirm if a routing number is valid, such as when a user is providing you with bank account details. Since routing numbers uniquely identify a bank, this will always return 0 or 1 entry. In Sandbox, the only valid routing number for this method is 110000000.
		/// List_routing_numbers routing_numbers
		/// </summary>
		/// <param name="limit">Minimum: 0</param>
		/// <param name="routing_number">Max length: 9
		/// Min length: 9
		// </param>
		/// <returns>Routing Number List</returns>
		public async Task<Routing_number_list> List_routing_numbersAsync(string cursor, int limit, string routing_number, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "routing_numbers?cursor=" + (cursor==null? "" : System.Uri.EscapeDataString(cursor))+"&limit="+limit+"&routing_number=" + (routing_number==null? "" : System.Uri.EscapeDataString(routing_number));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Routing_number_list>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Simulate an Account Statement being created
		/// Simulates an [Account Statement](#account-statements) being created for an account. In production, Account Statements are generated once per month.
		/// Simulate_an_account_statement_being_created simulations/account_statements
		/// </summary>
		/// <returns>Account Statement</returns>
		public async Task<Account_statement> Simulate_an_account_statement_being_createdAsync(Simulate_an_account_statement_being_created_parameters requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "simulations/account_statements";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Account_statement>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Complete a Sandbox Account Transfer
		/// If your account is configured to require approval for each transfer, this endpoint simulates the approval of an [Account Transfer](#account-transfers). You can also approve sandbox Account Transfers in the dashboard. This transfer must first have a `status` of `pending_approval`.
		/// Complete_a_sandbox_account_transfer simulations/account_transfers/{account_transfer_id}/complete
		/// </summary>
		/// <returns>Account Transfer</returns>
		public async Task<Account_transfer> Complete_a_sandbox_account_transferAsync(string account_transfer_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "simulations/account_transfers/"+ (account_transfer_id==null? "" : System.Uri.EscapeDataString(account_transfer_id))+"/complete";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Account_transfer>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Return a Sandbox ACH Transfer
		/// Simulates the return of an [ACH Transfer](#ach-transfers) by the Federal Reserve due to an error condition. This will also create a Transaction to account for the returned funds. This transfer must first have a `status` of `submitted`.
		/// Return_a_sandbox_ach_transfer simulations/ach_transfers/{ach_transfer_id}/return
		/// </summary>
		/// <returns>ACH Transfer</returns>
		public async Task<Ach_transfer> Return_a_sandbox_ach_transferAsync(string ach_transfer_id, Return_a_sandbox_ach_transfer_parameters requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "simulations/ach_transfers/"+ (ach_transfer_id==null? "" : System.Uri.EscapeDataString(ach_transfer_id))+"/return";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Ach_transfer>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Submit a Sandbox ACH Transfer
		/// Simulates the submission of an [ACH Transfer](#ach-transfers) to the Federal Reserve. This transfer must first have a `status` of `pending_approval` or `pending_submission`. In production, Increase submits ACH Transfers to the Federal Reserve three times per day on weekdays. Since sandbox ACH Transfers are not submitted to the Federal Reserve, this endpoint allows you to skip that delay and transition the ACH Transfer to a status of `submitted`.
		/// Submit_a_sandbox_ach_transfer simulations/ach_transfers/{ach_transfer_id}/submit
		/// </summary>
		/// <returns>ACH Transfer</returns>
		public async Task<Ach_transfer> Submit_a_sandbox_ach_transferAsync(string ach_transfer_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "simulations/ach_transfers/"+ (ach_transfer_id==null? "" : System.Uri.EscapeDataString(ach_transfer_id))+"/submit";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Ach_transfer>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Simulate an authorization on a Card
		/// Simulates a purchase authorization on a [Card](#cards). Depending on the balance available to the card and the `amount` submitted, the authorization activity will result in a [Pending Transaction](#pending-transactions) of type `card_authorization` or a [Declined Transaction](#declined-transactions) of type `card_decline`. You can pass either a Card id or a [Digital Wallet Token](#digital-wallet-tokens) id to simulate the two different ways purchases can be made.
		/// Simulate_an_authorization_on_a_card simulations/card_authorizations
		/// </summary>
		/// <returns>Inbound Card Authorization Simulation Result</returns>
		public async Task<Inbound_card_authorization_simulation_result> Simulate_an_authorization_on_a_cardAsync(Simulate_an_authorization_on_a_card_parameters requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "simulations/card_authorizations";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Inbound_card_authorization_simulation_result>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Simulates advancing the state of a card dispute
		/// After a [Card Dispute](#card-disputes) is created in production, the dispute will be reviewed. Since no review happens in sandbox, this endpoint simulates moving a Card Dispute into a rejected or accepted state. A Card Dispute can only be actioned one time and must have a status of `pending_reviewing`.
		/// Simulates_advancing_the_state_of_a_card_dispute simulations/card_disputes/{card_dispute_id}/action
		/// </summary>
		/// <returns>Card Dispute</returns>
		public async Task<Card_dispute> Simulates_advancing_the_state_of_a_card_disputeAsync(string card_dispute_id, Simulates_advancing_the_state_of_a_card_dispute_parameters requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "simulations/card_disputes/"+ (card_dispute_id==null? "" : System.Uri.EscapeDataString(card_dispute_id))+"/action";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Card_dispute>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Simulate a refund on a card
		/// Simulates refunding a card transaction. The full value of the original sandbox transaction is refunded.
		/// Simulate_a_refund_on_a_card simulations/card_refunds
		/// </summary>
		/// <returns>Transaction</returns>
		public async Task<Transaction> Simulate_a_refund_on_a_cardAsync(Simulate_a_refund_on_a_card_parameters requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "simulations/card_refunds";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Transaction>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Simulate settling a card authorization
		/// Simulates the settlement of an authorization by a card acquirer. After a card authorization is created, the merchant will eventually send a settlement. This simulates that event, which may occur many days after the purchase in production. The amount settled can be different from the amount originally authorized, for example, when adding a tip to a restaurant bill.
		/// Simulate_settling_a_card_authorization simulations/card_settlements
		/// </summary>
		/// <returns>Transaction</returns>
		public async Task<Transaction> Simulate_settling_a_card_authorizationAsync(Simulate_settling_a_card_authorization_parameters requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "simulations/card_settlements";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Transaction>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Reject a Sandbox Check Deposit
		/// Simulates the rejection of a [Check Deposit](#check-deposits) by Increase due to factors like poor image quality. This Check Deposit must first have a `status` of `pending`.
		/// Reject_a_sandbox_check_deposit simulations/check_deposits/{check_deposit_id}/reject
		/// </summary>
		/// <returns>Check Deposit</returns>
		public async Task<Check_deposit> Reject_a_sandbox_check_depositAsync(string check_deposit_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "simulations/check_deposits/"+ (check_deposit_id==null? "" : System.Uri.EscapeDataString(check_deposit_id))+"/reject";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Check_deposit>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Return a Sandbox Check Deposit
		/// Simulates the return of a [Check Deposit](#check-deposits). This Check Deposit must first have a `status` of `submitted`.
		/// Return_a_sandbox_check_deposit simulations/check_deposits/{check_deposit_id}/return
		/// </summary>
		/// <returns>Check Deposit</returns>
		public async Task<Check_deposit> Return_a_sandbox_check_depositAsync(string check_deposit_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "simulations/check_deposits/"+ (check_deposit_id==null? "" : System.Uri.EscapeDataString(check_deposit_id))+"/return";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Check_deposit>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Submit a Sandbox Check Deposit
		/// Simulates the submission of a [Check Deposit](#check-deposits) to the Federal Reserve. This Check Deposit must first have a `status` of `pending`.
		/// Submit_a_sandbox_check_deposit simulations/check_deposits/{check_deposit_id}/submit
		/// </summary>
		/// <returns>Check Deposit</returns>
		public async Task<Check_deposit> Submit_a_sandbox_check_depositAsync(string check_deposit_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "simulations/check_deposits/"+ (check_deposit_id==null? "" : System.Uri.EscapeDataString(check_deposit_id))+"/submit";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Check_deposit>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deposit a Sandbox Check Transfer
		/// Simulates a [Check Transfer](#check-transfers) being deposited at a bank. This transfer must first have a `status` of `mailed`.
		/// Deposit_a_sandbox_check_transfer simulations/check_transfers/{check_transfer_id}/deposit
		/// </summary>
		/// <returns>Check Transfer</returns>
		public async Task<Check_transfer> Deposit_a_sandbox_check_transferAsync(string check_transfer_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "simulations/check_transfers/"+ (check_transfer_id==null? "" : System.Uri.EscapeDataString(check_transfer_id))+"/deposit";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Check_transfer>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Mail a Sandbox Check Transfer
		/// Simulates the mailing of a [Check Transfer](#check-transfers), which happens once per weekday in production but can be sped up in sandbox. This transfer must first have a `status` of `pending_approval` or `pending_submission`.
		/// Mail_a_sandbox_check_transfer simulations/check_transfers/{check_transfer_id}/mail
		/// </summary>
		/// <returns>Check Transfer</returns>
		public async Task<Check_transfer> Mail_a_sandbox_check_transferAsync(string check_transfer_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "simulations/check_transfers/"+ (check_transfer_id==null? "" : System.Uri.EscapeDataString(check_transfer_id))+"/mail";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Check_transfer>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Return a Sandbox Check Transfer
		/// Simulates a [Check Transfer](#check-transfers) being returned via USPS to Increase. This transfer must first have a `status` of `mailed`.
		/// Return_a_sandbox_check_transfer simulations/check_transfers/{check_transfer_id}/return
		/// </summary>
		/// <returns>Check Transfer</returns>
		public async Task<Check_transfer> Return_a_sandbox_check_transferAsync(string check_transfer_id, Return_a_sandbox_check_transfer_parameters requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "simulations/check_transfers/"+ (check_transfer_id==null? "" : System.Uri.EscapeDataString(check_transfer_id))+"/return";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Check_transfer>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Simulate digital wallet provisioning for a card
		/// Simulates a user attempting add a [Card](#cards) to a digital wallet such as Apple Pay.
		/// Simulate_digital_wallet_provisioning_for_a_card simulations/digital_wallet_token_requests
		/// </summary>
		/// <returns>Inbound Digital Wallet Token Request Simulation Result</returns>
		public async Task<Inbound_digital_wallet_token_request_simulation_result> Simulate_digital_wallet_provisioning_for_a_cardAsync(Simulate_digital_wallet_provisioning_for_a_card_parameters requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "simulations/digital_wallet_token_requests";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Inbound_digital_wallet_token_request_simulation_result>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Simulate a tax document being created
		/// Simulates an tax document being created for an account.
		/// Simulate_a_tax_document_being_created simulations/documents
		/// </summary>
		/// <returns>Document</returns>
		public async Task<Document> Simulate_a_tax_document_being_createdAsync(Simulate_a_tax_document_being_created_parameters requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "simulations/documents";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Document>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Simulate an ACH Transfer to your account
		/// Simulates an inbound ACH transfer to your account. This imitates initiating a transaction to an Increase account from a different financial institution. The transfer may be either a credit or a debit depending on if the `amount` is positive or negative. The result of calling this API will be either a [Transaction](#transactions) or a [Declined Transaction](#declined-transactions) depending on whether or not the transfer is allowed.
		/// Simulate_an_ach_transfer_to_your_account simulations/inbound_ach_transfers
		/// </summary>
		/// <returns>Inbound ACH Transfer Simulation Result</returns>
		public async Task<Inbound_ach_transfer_simulation_result> Simulate_an_ach_transfer_to_your_accountAsync(Simulate_an_ach_transfer_to_your_account_parameters requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "simulations/inbound_ach_transfers";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Inbound_ach_transfer_simulation_result>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Simulate a Real Time Payments Transfer to your account
		/// Simulates an inbound Real Time Payments transfer to your account. Real Time Payments are a beta feature.
		/// Simulate_a_real_time_payments_transfer_to_your_account simulations/inbound_real_time_payments_transfers
		/// </summary>
		/// <returns>Inbound Real Time Payments Transfer Simulation Result</returns>
		public async Task<Inbound_real_time_payments_transfer_simulation_result> Simulate_a_real_time_payments_transfer_to_your_accountAsync(Simulate_a_real_time_payments_transfer_to_your_account_parameters requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "simulations/inbound_real_time_payments_transfers";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Inbound_real_time_payments_transfer_simulation_result>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Simulate an Inbound Wire Drawdown request being created
		/// Simulates the receival of an [Inbound Wire Drawdown Request](#inbound-wire-drawdown-requests).
		/// Simulate_an_inbound_wire_drawdown_request_being_created simulations/inbound_wire_drawdown_requests
		/// </summary>
		/// <returns>Inbound Wire Drawdown Request</returns>
		public async Task<Inbound_wire_drawdown_request> Simulate_an_inbound_wire_drawdown_request_being_createdAsync(Simulate_an_inbound_wire_drawdown_request_being_created_parameters requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "simulations/inbound_wire_drawdown_requests";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Inbound_wire_drawdown_request>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Simulate a Wire Transfer to your account
		/// Simulates an inbound Wire Transfer to your account.
		/// Simulate_a_wire_transfer_to_your_account simulations/inbound_wire_transfers
		/// </summary>
		/// <returns>Inbound Wire Transfer Simulation Result</returns>
		public async Task<Inbound_wire_transfer_simulation_result> Simulate_a_wire_transfer_to_your_accountAsync(Simulate_a_wire_transfer_to_your_account_parameters requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "simulations/inbound_wire_transfers";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Inbound_wire_transfer_simulation_result>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Simulate an Interest Payment to your account
		/// Simulates an interest payment to your account. In production, this happens automatically on the first of each month.
		/// Simulate_an_interest_payment_to_your_account simulations/interest_payment
		/// </summary>
		/// <returns>Interest Payment Simulation Result</returns>
		public async Task<Interest_payment_simulation_result> Simulate_an_interest_payment_to_your_accountAsync(Simulate_an_interest_payment_to_your_account_parameters requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "simulations/interest_payment";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Interest_payment_simulation_result>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Complete a Sandbox Real Time Payments Transfer
		/// Simulates submission of a Real Time Payments transfer and handling the response from the destination financial institution. This transfer must first have a `status` of `pending_submission`.
		/// Complete_a_sandbox_real_time_payments_transfer simulations/real_time_payments_transfers/{real_time_payments_transfer_id}/complete
		/// </summary>
		/// <returns>Real Time Payments Transfer</returns>
		public async Task<Real_time_payments_transfer> Complete_a_sandbox_real_time_payments_transferAsync(string real_time_payments_transfer_id, Complete_a_sandbox_real_time_payments_transfer_parameters requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "simulations/real_time_payments_transfers/"+ (real_time_payments_transfer_id==null? "" : System.Uri.EscapeDataString(real_time_payments_transfer_id))+"/complete";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Real_time_payments_transfer>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Reverse a Sandbox Wire Transfer
		/// Simulates the reversal of a [Wire Transfer](#wire-transfers) by the Federal Reserve due to error conditions. This will also create a [Transaction](#transaction) to account for the returned funds. This Wire Transfer must first have a `status` of `complete`.'
		/// Reverse_a_sandbox_wire_transfer simulations/wire_transfers/{wire_transfer_id}/reverse
		/// </summary>
		/// <returns>Wire Transfer</returns>
		public async Task<Wire_transfer> Reverse_a_sandbox_wire_transferAsync(string wire_transfer_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "simulations/wire_transfers/"+ (wire_transfer_id==null? "" : System.Uri.EscapeDataString(wire_transfer_id))+"/reverse";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Wire_transfer>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Submit a Sandbox Wire Transfer
		/// Simulates the submission of a [Wire Transfer](#wire-transfers) to the Federal Reserve. This transfer must first have a `status` of `pending_approval` or `pending_creating`.
		/// Submit_a_sandbox_wire_transfer simulations/wire_transfers/{wire_transfer_id}/submit
		/// </summary>
		/// <returns>Wire Transfer</returns>
		public async Task<Wire_transfer> Submit_a_sandbox_wire_transferAsync(string wire_transfer_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "simulations/wire_transfers/"+ (wire_transfer_id==null? "" : System.Uri.EscapeDataString(wire_transfer_id))+"/submit";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Wire_transfer>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List Transactions
		/// List_transactions transactions
		/// </summary>
		/// <param name="limit">Minimum: 0</param>
		/// <returns>Transaction List</returns>
		public async Task<Transaction_list> List_transactionsAsync(string cursor, int limit, string account_id, System.DateTimeOffset created_at_after, System.DateTimeOffset created_at_before, System.DateTimeOffset created_at_on_or_after, System.DateTimeOffset created_at_on_or_before, Inbound_ach_transfer_simulation_resultTransactionSourceCategory[] category_in, string route_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "transactions?cursor=" + (cursor==null? "" : System.Uri.EscapeDataString(cursor))+"&limit="+limit+"&account_id=" + (account_id==null? "" : System.Uri.EscapeDataString(account_id))+"&created_at.after=" + created_at_after.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&created_at.before=" + created_at_before.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&created_at.on_or_after=" + created_at_on_or_after.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&created_at.on_or_before=" + created_at_on_or_before.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&"+string.Join("&", category_in.Select(z => $"category.in={z}"))+"&route_id=" + (route_id==null? "" : System.Uri.EscapeDataString(route_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Transaction_list>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve a Transaction
		/// Retrieve_a_transaction transactions/{transaction_id}
		/// </summary>
		/// <returns>Transaction</returns>
		public async Task<Transaction> Retrieve_a_transactionAsync(string transaction_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "transactions/"+ (transaction_id==null? "" : System.Uri.EscapeDataString(transaction_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Transaction>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List Wire Drawdown Requests
		/// List_wire_drawdown_requests wire_drawdown_requests
		/// </summary>
		/// <param name="limit">Minimum: 0</param>
		/// <returns>Wire Drawdown Request List</returns>
		public async Task<Wire_drawdown_request_list> List_wire_drawdown_requestsAsync(string cursor, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "wire_drawdown_requests?cursor=" + (cursor==null? "" : System.Uri.EscapeDataString(cursor))+"&limit="+limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Wire_drawdown_request_list>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a Wire Drawdown Request
		/// Create_a_wire_drawdown_request wire_drawdown_requests
		/// </summary>
		/// <returns>Wire Drawdown Request</returns>
		public async Task<Wire_drawdown_request> Create_a_wire_drawdown_requestAsync(Create_a_wire_drawdown_request_parameters requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "wire_drawdown_requests";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Wire_drawdown_request>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieve a Wire Drawdown Request
		/// Retrieve_a_wire_drawdown_request wire_drawdown_requests/{wire_drawdown_request_id}
		/// </summary>
		/// <returns>Wire Drawdown Request</returns>
		public async Task<Wire_drawdown_request> Retrieve_a_wire_drawdown_requestAsync(string wire_drawdown_request_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "wire_drawdown_requests/"+ (wire_drawdown_request_id==null? "" : System.Uri.EscapeDataString(wire_drawdown_request_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Wire_drawdown_request>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List Wire Transfers
		/// List_wire_transfers wire_transfers
		/// </summary>
		/// <param name="limit">Minimum: 0</param>
		/// <returns>Wire Transfer List</returns>
		public async Task<Wire_transfer_list> List_wire_transfersAsync(string cursor, int limit, string account_id, string external_account_id, System.DateTimeOffset created_at_after, System.DateTimeOffset created_at_before, System.DateTimeOffset created_at_on_or_after, System.DateTimeOffset created_at_on_or_before, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "wire_transfers?cursor=" + (cursor==null? "" : System.Uri.EscapeDataString(cursor))+"&limit="+limit+"&account_id=" + (account_id==null? "" : System.Uri.EscapeDataString(account_id))+"&external_account_id=" + (external_account_id==null? "" : System.Uri.EscapeDataString(external_account_id))+"&created_at.after=" + created_at_after.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&created_at.before=" + created_at_before.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&created_at.on_or_after=" + created_at_on_or_after.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&created_at.on_or_before=" + created_at_on_or_before.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Wire_transfer_list>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a Wire Transfer
		/// Create_a_wire_transfer wire_transfers
		/// </summary>
		/// <returns>Wire Transfer</returns>
		public async Task<Wire_transfer> Create_a_wire_transferAsync(Create_a_wire_transfer_parameters requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "wire_transfers";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Wire_transfer>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieve a Wire Transfer
		/// Retrieve_a_wire_transfer wire_transfers/{wire_transfer_id}
		/// </summary>
		/// <returns>Wire Transfer</returns>
		public async Task<Wire_transfer> Retrieve_a_wire_transferAsync(string wire_transfer_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "wire_transfers/"+ (wire_transfer_id==null? "" : System.Uri.EscapeDataString(wire_transfer_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Wire_transfer>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Approve a Wire Transfer
		/// Approve_a_wire_transfer wire_transfers/{wire_transfer_id}/approve
		/// </summary>
		/// <returns>Wire Transfer</returns>
		public async Task<Wire_transfer> Approve_a_wire_transferAsync(string wire_transfer_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "wire_transfers/"+ (wire_transfer_id==null? "" : System.Uri.EscapeDataString(wire_transfer_id))+"/approve";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Wire_transfer>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Cancel a pending Wire Transfer
		/// Cancel_a_pending_wire_transfer wire_transfers/{wire_transfer_id}/cancel
		/// </summary>
		/// <returns>Wire Transfer</returns>
		public async Task<Wire_transfer> Cancel_a_pending_wire_transferAsync(string wire_transfer_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "wire_transfers/"+ (wire_transfer_id==null? "" : System.Uri.EscapeDataString(wire_transfer_id))+"/cancel";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Wire_transfer>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
