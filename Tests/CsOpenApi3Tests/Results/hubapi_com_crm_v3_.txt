//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ActionConfirmationBody
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="cancelButtonLabel")]
		public string CancelButtonLabel { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="confirmButtonLabel")]
		public string ConfirmButtonLabel { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="prompt")]
		public string Prompt { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ActionHookActionBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="confirmation")]
		public ActionConfirmationBody Confirmation { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="httpMethod")]
		public ActionHookActionBodyHttpMethod HttpMethod { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="propertyNamesIncluded")]
		public string[] PropertyNamesIncluded { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(ActionHookActionBodyType.ACTION_HOOK)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public ActionHookActionBodyType Type { get; set; } = ActionHookActionBodyType.ACTION_HOOK;
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ActionHookActionBodyHttpMethod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONNECT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GET = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HEAD = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPTIONS = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PATCH = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		POST = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PUT = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TRACE = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ActionHookActionBodyType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTION_HOOK = 0,
	}
	
	/// <summary>
	/// Configuration for custom user actions on cards.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CardActions
	{
		
		/// <summary>
		/// A list of URL prefixes that will be accepted for card action URLs. If your data fetch response includes an action URL that doesn't begin with one of these values, it will result in an error and the card will not be displayed.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="baseUrls")]
		public string[] BaseUrls { get; set; }
	}
	
	/// <summary>
	/// State of card definition to be created
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CardCreateRequest
	{
		
		/// <summary>
		/// Configuration for custom user actions on cards.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="actions")]
		public CardActions Actions { get; set; }
		
		/// <summary>
		/// Configuration for displayed info on a card
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="display")]
		public CardDisplayBody Display { get; set; }
		
		/// <summary>
		/// Configuration for this card's data fetch request.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fetch")]
		public CardFetchBody Fetch { get; set; }
		
		/// <summary>
		/// The top-level title for this card. Displayed to users in the CRM UI.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	/// <summary>
	/// Configuration for displayed info on a card
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CardDisplayBody
	{
		
		/// <summary>
		/// Card display properties. These will will be rendered as "label : value" pairs in the card UI. See the [example card](#) in the overview docs for more details.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public CardDisplayProperty[] Properties { get; set; }
	}
	
	/// <summary>
	/// Definition for a card display property.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CardDisplayProperty
	{
		
		/// <summary>
		/// Type of data represented by this property.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dataType")]
		public CardDisplayPropertyDataType DataType { get; set; }
		
		/// <summary>
		/// The label for this property as you'd like it displayed to users.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
		
		/// <summary>
		/// An internal identifier for this property. This value must be unique TODO.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// An array of available options that can be displayed. Only used in when `dataType` is `STATUS`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="options")]
		public DisplayOption[] Options { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CardDisplayPropertyDataType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BOOLEAN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CURRENCY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATETIME = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EMAIL = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LINK = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NUMERIC = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STRING = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATUS = 8,
	}
	
	/// <summary>
	/// Option definition for STATUS dataTypes.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DisplayOption
	{
		
		/// <summary>
		/// The text that will be displayed to users for this option.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
		
		/// <summary>
		/// JSON-friendly unique name for option.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The type of status.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public DisplayOptionType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DisplayOptionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEFAULT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WARNING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DANGER = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INFO = 4,
	}
	
	/// <summary>
	/// Configuration for this card's data fetch request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CardFetchBody
	{
		
		/// <summary>
		/// An array of CRM object types where this card should be displayed. HubSpot will call your data fetch URL whenever a user visits a record page of the types defined here.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="objectTypes")]
		public CardObjectTypeBody[] ObjectTypes { get; set; }
		
		/// <summary>
		/// URL to a service endpoints that will respond with card details. HubSpot will call this endpoint each time a user visits a CRM record page where this card should be displayed.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="targetUrl")]
		public string TargetUrl { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CardObjectTypeBody
	{
		
		/// <summary>
		/// A CRM object type where this card should be displayed.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public CardObjectTypeBodyName Name { get; set; }
		
		/// <summary>
		/// An array of properties that should be sent to this card's target URL when the data fetch request is made. Must be valid properties for the corresponding CRM object type.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="propertiesToSend")]
		public string[] PropertiesToSend { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CardObjectTypeBodyName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		contacts = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deals = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		companies = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		tickets = 3,
	}
	
	/// <summary>
	/// Variant of CardFetchBody with fields as optional for patches
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CardFetchBodyPatch
	{
		
		/// <summary>
		/// An array of CRM object types where this card should be displayed. HubSpot will call your target URL whenever a user visits a record page of the types defined here.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="objectTypes")]
		public CardObjectTypeBody[] ObjectTypes { get; set; }
		
		/// <summary>
		/// URL to a service endpoint that will respond with details for this card. HubSpot will call this endpoint each time a user visits a CRM record page where this card should be displayed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetUrl")]
		public string TargetUrl { get; set; }
	}
	
	/// <summary>
	/// List of card definitions
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CardListResponse
	{
		
		/// <summary>
		/// List of card definitions
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="results")]
		public CardResponse[] Results { get; set; }
	}
	
	/// <summary>
	/// Current state of Card Definition
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CardResponse
	{
		
		/// <summary>
		/// Configuration for custom user actions on cards.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="actions")]
		public CardActions Actions { get; set; }
		
		/// <summary>
		/// When this card was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// Configuration for displayed info on a card
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="display")]
		public CardDisplayBody Display { get; set; }
		
		/// <summary>
		/// Configuration for this card's data fetch request.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fetch")]
		public CardFetchBody Fetch { get; set; }
		
		/// <summary>
		/// Generated unique ID for card.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Displayed title of this card.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// The last time this card was updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updatedAt")]
		public System.Nullable<System.DateTimeOffset> UpdatedAt { get; set; }
	}
	
	/// <summary>
	/// Body for a patch with optional fields
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CardPatchRequest
	{
		
		/// <summary>
		/// Configuration for custom user actions on cards.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="actions")]
		public CardActions Actions { get; set; }
		
		/// <summary>
		/// Configuration for displayed info on a card
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="display")]
		public CardDisplayBody Display { get; set; }
		
		/// <summary>
		/// Variant of CardFetchBody with fields as optional for patches
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fetch")]
		public CardFetchBodyPatch Fetch { get; set; }
		
		/// <summary>
		/// The top-level title for this card. Displayed to users in the CRM UI.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Error
	{
		
		/// <summary>
		/// The error category
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="category")]
		public string Category { get; set; }
		
		/// <summary>
		/// Context about the error condition
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="context")]
		public System.Collections.Generic.Dictionary<string, string[]> Context { get; set; }
		
		/// <summary>
		/// A unique identifier for the request. Include this value with any error reports or support tickets
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="correlationId")]
		public string CorrelationId { get; set; }
		
		/// <summary>
		/// further information about the error
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public ErrorDetail[] Errors { get; set; }
		
		/// <summary>
		/// A map of link names to associated URIs containing documentation about the error or recommended remediation steps
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="links")]
		public System.Collections.Generic.Dictionary<string, string> Links { get; set; }
		
		/// <summary>
		/// A human readable message describing the error along with remediation steps where appropriate
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// A specific category that contains more specific detail about the error
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subCategory")]
		public string SubCategory { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ErrorDetail
	{
		
		/// <summary>
		/// The status code associated with the error detail
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// Context about the error condition
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="context")]
		public System.Collections.Generic.Dictionary<string, string[]> Context { get; set; }
		
		/// <summary>
		/// The name of the field or parameter in which the error was found.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="in")]
		public string In { get; set; }
		
		/// <summary>
		/// A human readable message describing the error along with remediation steps where appropriate
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// A specific category that contains more specific detail about the error
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subCategory")]
		public string SubCategory { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IFrameActionBody
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="height")]
		public int Height { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="propertyNamesIncluded")]
		public string[] PropertyNamesIncluded { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(IFrameActionBodyType.IFRAME)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public IFrameActionBodyType Type { get; set; } = IFrameActionBodyType.IFRAME;
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="width")]
		public int Width { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum IFrameActionBodyType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IFRAME = 0,
	}
	
	/// <summary>
	/// The card details payload, sent to HubSpot by an app in response to a data fetch request when a user visits a CRM record page.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IntegratorCardPayloadResponse
	{
		
		/// <summary>
		/// URL to a page the integrator has built that displays all details for this card. This URL will be displayed to users under a `See more [x]` link if there are more than five items in your response, where `[x]` is the value of `itemLabel`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allItemsLinkUrl")]
		public string AllItemsLinkUrl { get; set; }
		
		/// <summary>
		/// The label to be used for the `allItemsLinkUrl` link (e.g. 'See more tickets'). If not provided, this falls back to the card's title.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cardLabel")]
		public string CardLabel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="responseVersion")]
		public System.Nullable<IntegratorCardPayloadResponseResponseVersion> ResponseVersion { get; set; }
		
		/// <summary>
		/// A list of up to five valid card sub categories.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sections")]
		public IntegratorObjectResult[] Sections { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="topLevelActions")]
		public TopLevelActions TopLevelActions { get; set; }
		
		/// <summary>
		/// The total number of card properties that will be sent in this response.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalCount")]
		public int TotalCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum IntegratorCardPayloadResponseResponseVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		v1 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		v3 = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IntegratorObjectResult
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="actions")]
		public string[] Actions { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="linkUrl")]
		public string LinkUrl { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tokens")]
		public ObjectToken[] Tokens { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ObjectToken
	{
		
		[System.Runtime.Serialization.DataMember(Name="dataType")]
		public CardDisplayPropertyDataType DataType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TopLevelActions
	{
		
		[System.Runtime.Serialization.DataMember(Name="primary")]
		public ActionHookActionBody Primary { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="secondary")]
		public string[] Secondary { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="settings")]
		public IFrameActionBody Settings { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Get sample card detail response
		/// Returns an example card detail response. This is the payload with displayed details for a card that will be shown to a user. An app should send this in response to the data fetch request.
		/// Get_SlashcrmSlashv3SlashextensionsSlashcardsSlashsample_response_getCardsSampleResponse crm/v3/extensions/cards/sample-response
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<IntegratorCardPayloadResponse> Get_SlashcrmSlashv3SlashextensionsSlashcardsSlashsample_response_getCardsSampleResponseAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "crm/v3/extensions/cards/sample-response";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<IntegratorCardPayloadResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all cards
		/// Returns a list of cards for a given app.
		/// Get_SlashcrmSlashv3SlashextensionsSlashcardsSlashappId_getAll crm/v3/extensions/cards/{appId}
		/// </summary>
		/// <param name="appId">The ID of the target app.</param>
		/// <returns>successful operation</returns>
		public async Task<CardListResponse> Get_SlashcrmSlashv3SlashextensionsSlashcardsSlashappId_getAllAsync(int appId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "crm/v3/extensions/cards/"+appId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CardListResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new card
		/// Defines a new card that will become active on an account when this app is installed.
		/// Post_SlashcrmSlashv3SlashextensionsSlashcardsSlashappId_create crm/v3/extensions/cards/{appId}
		/// </summary>
		/// <param name="appId">The ID of the target app.</param>
		/// <param name="requestBody">The new card definition.</param>
		public async Task Post_SlashcrmSlashv3SlashextensionsSlashcardsSlashappId_createAsync(int appId, CardCreateRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "crm/v3/extensions/cards/"+appId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a card
		/// Permanently deletes a card definition with the given ID. Once deleted, data fetch requests for this card will no longer be sent to your service. This can't be undone.
		/// Delete_SlashcrmSlashv3SlashextensionsSlashcardsSlashappIdSlashcardId_archive crm/v3/extensions/cards/{appId}/{cardId}
		/// </summary>
		/// <param name="appId">The ID of the target app.</param>
		/// <param name="cardId">The ID of the card to delete.</param>
		public async Task Delete_SlashcrmSlashv3SlashextensionsSlashcardsSlashappIdSlashcardId_archiveAsync(int appId, string cardId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "crm/v3/extensions/cards/"+appId+"/"+ (cardId==null? "" : System.Uri.EscapeDataString(cardId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a card.
		/// Returns the definition for a card with the given ID.
		/// Get_SlashcrmSlashv3SlashextensionsSlashcardsSlashappIdSlashcardId_getById crm/v3/extensions/cards/{appId}/{cardId}
		/// </summary>
		/// <param name="appId">The ID of the target app.</param>
		/// <param name="cardId">The ID of the target card.</param>
		/// <returns>successful operation</returns>
		public async Task<CardResponse> Get_SlashcrmSlashv3SlashextensionsSlashcardsSlashappIdSlashcardId_getByIdAsync(int appId, string cardId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "crm/v3/extensions/cards/"+appId+"/"+ (cardId==null? "" : System.Uri.EscapeDataString(cardId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CardResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a card
		/// Update a card definition with new details.
		/// Patch_SlashcrmSlashv3SlashextensionsSlashcardsSlashappIdSlashcardId_update crm/v3/extensions/cards/{appId}/{cardId}
		/// </summary>
		/// <param name="appId">The ID of the target app.</param>
		/// <param name="cardId">The ID of the card to update.</param>
		/// <param name="requestBody">Card definition fields to be updated.</param>
		/// <returns>successful operation</returns>
		public async Task<CardResponse> Patch_SlashcrmSlashv3SlashextensionsSlashcardsSlashappIdSlashcardId_updateAsync(int appId, string cardId, CardPatchRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "crm/v3/extensions/cards/"+appId+"/"+ (cardId==null? "" : System.Uri.EscapeDataString(cardId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CardResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
