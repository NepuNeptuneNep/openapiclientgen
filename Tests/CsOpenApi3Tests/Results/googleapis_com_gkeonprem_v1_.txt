//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Authorization defines the On-Prem cluster authorization configuration to bootstrap onto the admin cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Authorization
	{
		
		/// <summary>
		/// For VMware and bare metal user clusters, users will be granted the cluster-admin role on the cluster, which provides full administrative access to the cluster. For bare metal admin clusters, users will be granted the cluster-view role, which limits users to read-only access.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adminUsers")]
		public ClusterUser[] AdminUsers { get; set; }
	}
	
	/// <summary>
	/// ClusterUser configures user principals for an RBAC policy.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ClusterUser
	{
		
		/// <summary>
		/// Required. The name of the user, e.g. `my-gcp-id@gmail.com`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
	}
	
	/// <summary>
	/// BareMetalAdminApiServerArgument represents an arg name->value pair. Only a subset of customized flags are supported. Please refer to the API server documentation below to know the exact format: https://kubernetes.io/docs/reference/command-line-tools-reference/kube-apiserver/
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BareMetalAdminApiServerArgument
	{
		
		/// <summary>
		/// Required. The argument name as it appears on the API Server command line please make sure to remove the leading dashes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="argument")]
		public string Argument { get; set; }
		
		/// <summary>
		/// Required. The value of the arg as it will be passed to the API Server command line.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// Resource that represents a bare metal admin cluster. LINT.IfChange
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BareMetalAdminCluster
	{
		
		/// <summary>
		/// Annotations on the bare metal admin cluster. This field has the same restrictions as Kubernetes annotations. The total size of all keys and values combined is limited to 256k. Key can have 2 segments: prefix (optional) and name (required), separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="annotations")]
		public System.Collections.Generic.Dictionary<string, string> Annotations { get; set; }
		
		/// <summary>
		/// The Anthos clusters on bare metal version for the bare metal admin cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bareMetalVersion")]
		public string BareMetalVersion { get; set; }
		
		/// <summary>
		/// Configuration for Binary Authorization.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="binaryAuthorization")]
		public BinaryAuthorization BinaryAuthorization { get; set; }
		
		/// <summary>
		/// BareMetalAdminClusterOperationsConfig specifies the admin cluster's observability infrastructure.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clusterOperations")]
		public BareMetalAdminClusterOperationsConfig ClusterOperations { get; set; }
		
		/// <summary>
		/// BareMetalAdminControlPlaneConfig specifies the control plane configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="controlPlane")]
		public BareMetalAdminControlPlaneConfig ControlPlane { get; set; }
		
		/// <summary>
		/// Output only. The time at which this bare metal admin cluster was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// Output only. The time at which this bare metal admin cluster was deleted. If the resource is not deleted, this must be empty
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deleteTime")]
		public string DeleteTime { get; set; }
		
		/// <summary>
		/// A human readable description of this bare metal admin cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Output only. The IP address name of bare metal admin cluster's API server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endpoint")]
		public string Endpoint { get; set; }
		
		/// <summary>
		/// This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding. Allows clients to perform consistent read-modify-writes through optimistic concurrency control.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// Fleet related configuration. Fleets are a Google Cloud concept for logically organizing clusters, letting you use and manage multi-cluster capabilities and apply consistent policies across your systems. See [Anthos Fleets](`https://cloud.google.com/anthos/multicluster-management/fleets`) for more details on Anthos multi-cluster capabilities using Fleets. ##
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fleet")]
		public Fleet Fleet { get; set; }
		
		/// <summary>
		/// BareMetalAdminLoadBalancerConfig specifies the load balancer configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="loadBalancer")]
		public BareMetalAdminLoadBalancerConfig LoadBalancer { get; set; }
		
		/// <summary>
		/// Output only. The object name of the bare metal cluster custom resource. This field is used to support conflicting names when enrolling existing clusters to the API. When used as a part of cluster enrollment, this field will differ from the ID in the resource name. For new clusters, this field will match the user provided cluster name and be visible in the last component of the resource name. It is not modifiable. All users should use this name to access their cluster using gkectl or kubectl and should expect to see the local name when viewing admin cluster controller logs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="localName")]
		public string LocalName { get; set; }
		
		/// <summary>
		/// BareMetalAdminMaintenanceConfig specifies configurations to put bare metal Admin cluster CRs nodes in and out of maintenance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maintenanceConfig")]
		public BareMetalAdminMaintenanceConfig MaintenanceConfig { get; set; }
		
		/// <summary>
		/// BareMetalAdminMaintenanceStatus represents the maintenance status for bare metal Admin cluster CR's nodes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maintenanceStatus")]
		public BareMetalAdminMaintenanceStatus MaintenanceStatus { get; set; }
		
		/// <summary>
		/// Immutable. The bare metal admin cluster resource name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// BareMetalAdminNetworkConfig specifies the cluster network configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="networkConfig")]
		public BareMetalAdminNetworkConfig NetworkConfig { get; set; }
		
		/// <summary>
		/// Specifies the node access related settings for the bare metal admin cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodeAccessConfig")]
		public BareMetalAdminNodeAccessConfig NodeAccessConfig { get; set; }
		
		/// <summary>
		/// BareMetalAdminWorkloadNodeConfig specifies the workload node configurations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodeConfig")]
		public BareMetalAdminWorkloadNodeConfig NodeConfig { get; set; }
		
		/// <summary>
		/// Specifies operating system operation settings for cluster provisioning.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="osEnvironmentConfig")]
		public BareMetalAdminOsEnvironmentConfig OsEnvironmentConfig { get; set; }
		
		/// <summary>
		/// BareMetalAdminProxyConfig specifies the cluster proxy configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="proxy")]
		public BareMetalAdminProxyConfig Proxy { get; set; }
		
		/// <summary>
		/// Output only. If set, there are currently changes in flight to the bare metal Admin Cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reconciling")]
		public System.Nullable<System.Boolean> Reconciling { get; set; }
		
		/// <summary>
		/// Specifies the security related settings for the bare metal admin cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="securityConfig")]
		public BareMetalAdminSecurityConfig SecurityConfig { get; set; }
		
		/// <summary>
		/// Output only. The current state of the bare metal admin cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<BareMetalAdminClusterState> State { get; set; }
		
		/// <summary>
		/// ResourceStatus describes why a cluster or node pool has a certain status. (e.g., ERROR or DEGRADED).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ResourceStatus Status { get; set; }
		
		/// <summary>
		/// BareMetalAdminStorageConfig specifies the cluster storage configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storage")]
		public BareMetalAdminStorageConfig Storage { get; set; }
		
		/// <summary>
		/// Output only. The unique identifier of the bare metal admin cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uid")]
		public string Uid { get; set; }
		
		/// <summary>
		/// Output only. The time at which this bare metal admin cluster was last updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
		
		/// <summary>
		/// ValidationCheck represents the result of preflight check.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="validationCheck")]
		public ValidationCheck ValidationCheck { get; set; }
	}
	
	/// <summary>
	/// Configuration for Binary Authorization.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BinaryAuthorization
	{
		
		/// <summary>
		/// Mode of operation for binauthz policy evaluation. If unspecified, defaults to DISABLED.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="evaluationMode")]
		public System.Nullable<BinaryAuthorizationEvaluationMode> EvaluationMode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum BinaryAuthorizationEvaluationMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EVALUATION_MODE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROJECT_SINGLETON_POLICY_ENFORCE = 2,
	}
	
	/// <summary>
	/// BareMetalAdminClusterOperationsConfig specifies the admin cluster's observability infrastructure.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BareMetalAdminClusterOperationsConfig
	{
		
		/// <summary>
		/// Whether collection of application logs/metrics should be enabled (in addition to system logs/metrics).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableApplicationLogs")]
		public System.Nullable<System.Boolean> EnableApplicationLogs { get; set; }
	}
	
	/// <summary>
	/// BareMetalAdminControlPlaneConfig specifies the control plane configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BareMetalAdminControlPlaneConfig
	{
		
		/// <summary>
		/// Customizes the default API server args. Only a subset of customized flags are supported. Please refer to the API server documentation below to know the exact format: https://kubernetes.io/docs/reference/command-line-tools-reference/kube-apiserver/
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apiServerArgs")]
		public BareMetalAdminApiServerArgument[] ApiServerArgs { get; set; }
		
		/// <summary>
		/// BareMetalAdminControlPlaneNodePoolConfig specifies the control plane node pool configuration. We have a control plane specific node pool config so that we can flexible about supporting control plane specific fields in the future.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="controlPlaneNodePoolConfig")]
		public BareMetalAdminControlPlaneNodePoolConfig ControlPlaneNodePoolConfig { get; set; }
	}
	
	/// <summary>
	/// BareMetalAdminControlPlaneNodePoolConfig specifies the control plane node pool configuration. We have a control plane specific node pool config so that we can flexible about supporting control plane specific fields in the future.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BareMetalAdminControlPlaneNodePoolConfig
	{
		
		/// <summary>
		/// BareMetalNodePoolConfig describes the configuration of all nodes within a given bare metal node pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodePoolConfig")]
		public BareMetalNodePoolConfig NodePoolConfig { get; set; }
	}
	
	/// <summary>
	/// BareMetalNodePoolConfig describes the configuration of all nodes within a given bare metal node pool.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BareMetalNodePoolConfig
	{
		
		/// <summary>
		/// KubeletConfig defines the modifiable kubelet configurations for bare metal machines. Note: this list includes fields supported in GKE (see https://cloud.google.com/kubernetes-engine/docs/how-to/node-system-config#kubelet-options).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kubeletConfig")]
		public BareMetalKubeletConfig KubeletConfig { get; set; }
		
		/// <summary>
		/// The labels assigned to nodes of this node pool. An object containing a list of key/value pairs. Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// Required. The list of machine addresses in the bare metal node pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodeConfigs")]
		public BareMetalNodeConfig[] NodeConfigs { get; set; }
		
		/// <summary>
		/// Specifies the nodes operating system (default: LINUX).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operatingSystem")]
		public System.Nullable<BareMetalNodePoolConfigOperatingSystem> OperatingSystem { get; set; }
		
		/// <summary>
		/// The initial taints assigned to nodes of this node pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taints")]
		public NodeTaint[] Taints { get; set; }
	}
	
	/// <summary>
	/// KubeletConfig defines the modifiable kubelet configurations for bare metal machines. Note: this list includes fields supported in GKE (see https://cloud.google.com/kubernetes-engine/docs/how-to/node-system-config#kubelet-options).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BareMetalKubeletConfig
	{
		
		/// <summary>
		/// The maximum size of bursty pulls, temporarily allows pulls to burst to this number, while still not exceeding registry_pull_qps. The value must not be a negative number. Updating this field may impact scalability by changing the amount of traffic produced by image pulls. Defaults to 10.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="registryBurst")]
		public System.Nullable<System.Int32> RegistryBurst { get; set; }
		
		/// <summary>
		/// The limit of registry pulls per second. Setting this value to 0 means no limit. Updating this field may impact scalability by changing the amount of traffic produced by image pulls. Defaults to 5.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="registryPullQps")]
		public System.Nullable<System.Int32> RegistryPullQps { get; set; }
		
		/// <summary>
		/// Prevents the Kubelet from pulling multiple images at a time. We recommend *not* changing the default value on nodes that run docker daemon with version < 1.9 or an Another Union File System (Aufs) storage backend. Issue https://github.com/kubernetes/kubernetes/issues/10959 has more details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serializeImagePullsDisabled")]
		public System.Nullable<System.Boolean> SerializeImagePullsDisabled { get; set; }
	}
	
	/// <summary>
	/// BareMetalNodeConfig lists machine addresses to access Nodes.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BareMetalNodeConfig
	{
		
		/// <summary>
		/// The labels assigned to this node. An object containing a list of key/value pairs. The labels here, unioned with the labels set on BareMetalNodePoolConfig are the set of labels that will be applied to the node. If there are any conflicts, the BareMetalNodeConfig labels take precedence. Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// The default IPv4 address for SSH access and Kubernetes node. Example: 192.168.0.1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodeIp")]
		public string NodeIp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum BareMetalNodePoolConfigOperatingSystem
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPERATING_SYSTEM_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LINUX = 1,
	}
	
	/// <summary>
	/// NodeTaint applied to every Kubernetes node in a node pool. Kubernetes taints can be used together with tolerations to control how workloads are scheduled to your nodes. Node taints are permanent.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NodeTaint
	{
		
		/// <summary>
		/// The taint effect.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="effect")]
		public System.Nullable<NodeTaintEffect> Effect { get; set; }
		
		/// <summary>
		/// Key associated with the effect.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		/// <summary>
		/// Value associated with the effect.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum NodeTaintEffect
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EFFECT_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_SCHEDULE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PREFER_NO_SCHEDULE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_EXECUTE = 3,
	}
	
	/// <summary>
	/// Fleet related configuration. Fleets are a Google Cloud concept for logically organizing clusters, letting you use and manage multi-cluster capabilities and apply consistent policies across your systems. See [Anthos Fleets](`https://cloud.google.com/anthos/multicluster-management/fleets`) for more details on Anthos multi-cluster capabilities using Fleets. ##
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Fleet
	{
		
		/// <summary>
		/// Output only. The name of the managed fleet Membership resource associated to this cluster. Membership names are formatted as `projects//locations//memberships/`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="membership")]
		public string Membership { get; set; }
	}
	
	/// <summary>
	/// BareMetalAdminLoadBalancerConfig specifies the load balancer configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BareMetalAdminLoadBalancerConfig
	{
		
		/// <summary>
		/// BareMetalAdminManualLbConfig represents configuration parameters for a manual load balancer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="manualLbConfig")]
		public BareMetalAdminManualLbConfig ManualLbConfig { get; set; }
		
		/// <summary>
		/// BareMetalAdminPortConfig is the specification of load balancer ports.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="portConfig")]
		public BareMetalAdminPortConfig PortConfig { get; set; }
		
		/// <summary>
		/// BareMetalAdminVipConfig for bare metal load balancer configurations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vipConfig")]
		public BareMetalAdminVipConfig VipConfig { get; set; }
	}
	
	/// <summary>
	/// BareMetalAdminManualLbConfig represents configuration parameters for a manual load balancer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BareMetalAdminManualLbConfig
	{
		
		/// <summary>
		/// Whether manual load balancing is enabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
	}
	
	/// <summary>
	/// BareMetalAdminPortConfig is the specification of load balancer ports.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BareMetalAdminPortConfig
	{
		
		/// <summary>
		/// The port that control plane hosted load balancers will listen on.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="controlPlaneLoadBalancerPort")]
		public System.Nullable<System.Int32> ControlPlaneLoadBalancerPort { get; set; }
	}
	
	/// <summary>
	/// BareMetalAdminVipConfig for bare metal load balancer configurations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BareMetalAdminVipConfig
	{
		
		/// <summary>
		/// The VIP which you previously set aside for the Kubernetes API of this bare metal admin cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="controlPlaneVip")]
		public string ControlPlaneVip { get; set; }
	}
	
	/// <summary>
	/// BareMetalAdminMaintenanceConfig specifies configurations to put bare metal Admin cluster CRs nodes in and out of maintenance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BareMetalAdminMaintenanceConfig
	{
		
		/// <summary>
		/// Required. All IPv4 address from these ranges will be placed into maintenance mode. Nodes in maintenance mode will be cordoned and drained. When both of these are true, the "baremetal.cluster.gke.io/maintenance" annotation will be set on the node resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maintenanceAddressCidrBlocks")]
		public string[] MaintenanceAddressCidrBlocks { get; set; }
	}
	
	/// <summary>
	/// BareMetalAdminMaintenanceStatus represents the maintenance status for bare metal Admin cluster CR's nodes.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BareMetalAdminMaintenanceStatus
	{
		
		/// <summary>
		/// BareMetalAdminMachineDrainStatus represents the status of bare metal node machines that are undergoing drain operations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="machineDrainStatus")]
		public BareMetalAdminMachineDrainStatus MachineDrainStatus { get; set; }
	}
	
	/// <summary>
	/// BareMetalAdminMachineDrainStatus represents the status of bare metal node machines that are undergoing drain operations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BareMetalAdminMachineDrainStatus
	{
		
		/// <summary>
		/// The list of drained machines.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="drainedMachines")]
		public BareMetalAdminDrainedMachine[] DrainedMachines { get; set; }
		
		/// <summary>
		/// The list of draning machines.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="drainingMachines")]
		public BareMetalAdminDrainingMachine[] DrainingMachines { get; set; }
	}
	
	/// <summary>
	/// BareMetalAdminDrainedMachine represents the machines that are drained.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BareMetalAdminDrainedMachine
	{
		
		/// <summary>
		/// Drained machine IP address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodeIp")]
		public string NodeIp { get; set; }
	}
	
	/// <summary>
	/// BareMetalAdminDrainingMachine represents the machines that are currently draining.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BareMetalAdminDrainingMachine
	{
		
		/// <summary>
		/// Draining machine IP address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodeIp")]
		public string NodeIp { get; set; }
		
		/// <summary>
		/// The count of pods yet to drain.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="podCount")]
		public System.Nullable<System.Int32> PodCount { get; set; }
	}
	
	/// <summary>
	/// BareMetalAdminNetworkConfig specifies the cluster network configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BareMetalAdminNetworkConfig
	{
		
		/// <summary>
		/// BareMetalAdminIslandModeCidrConfig specifies the cluster CIDR configuration while running in island mode.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="islandModeCidr")]
		public BareMetalAdminIslandModeCidrConfig IslandModeCidr { get; set; }
	}
	
	/// <summary>
	/// BareMetalAdminIslandModeCidrConfig specifies the cluster CIDR configuration while running in island mode.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BareMetalAdminIslandModeCidrConfig
	{
		
		/// <summary>
		/// Required. All pods in the cluster are assigned an RFC1918 IPv4 address from these ranges. This field cannot be changed after creation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="podAddressCidrBlocks")]
		public string[] PodAddressCidrBlocks { get; set; }
		
		/// <summary>
		/// Required. All services in the cluster are assigned an RFC1918 IPv4 address from these ranges. This field cannot be changed after creation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceAddressCidrBlocks")]
		public string[] ServiceAddressCidrBlocks { get; set; }
	}
	
	/// <summary>
	/// Specifies the node access related settings for the bare metal admin cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BareMetalAdminNodeAccessConfig
	{
		
		/// <summary>
		/// Required. LoginUser is the user name used to access node machines. It defaults to "root" if not set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="loginUser")]
		public string LoginUser { get; set; }
	}
	
	/// <summary>
	/// BareMetalAdminWorkloadNodeConfig specifies the workload node configurations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BareMetalAdminWorkloadNodeConfig
	{
		
		/// <summary>
		/// The maximum number of pods a node can run. The size of the CIDR range assigned to the node will be derived from this parameter. By default 110 Pods are created per Node. Upper bound is 250 for both HA and non-HA admin cluster. Lower bound is 64 for non-HA admin cluster and 32 for HA admin cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxPodsPerNode")]
		public string MaxPodsPerNode { get; set; }
	}
	
	/// <summary>
	/// Specifies operating system operation settings for cluster provisioning.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BareMetalAdminOsEnvironmentConfig
	{
		
		/// <summary>
		/// Whether the package repo should be added when initializing bare metal machines.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="packageRepoExcluded")]
		public System.Nullable<System.Boolean> PackageRepoExcluded { get; set; }
	}
	
	/// <summary>
	/// BareMetalAdminProxyConfig specifies the cluster proxy configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BareMetalAdminProxyConfig
	{
		
		/// <summary>
		/// A list of IPs, hostnames, and domains that should skip the proxy. Examples: ["127.0.0.1", "example.com", ".corp", "localhost"].
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="noProxy")]
		public string[] NoProxy { get; set; }
		
		/// <summary>
		/// Required. Specifies the address of your proxy server. Examples: `http://domain` WARNING: Do not provide credentials in the format `http://(username:password@)domain` these will be rejected by the server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	/// <summary>
	/// Specifies the security related settings for the bare metal admin cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BareMetalAdminSecurityConfig
	{
		
		/// <summary>
		/// Authorization defines the On-Prem cluster authorization configuration to bootstrap onto the admin cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authorization")]
		public Authorization Authorization { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum BareMetalAdminClusterState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROVISIONING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUNNING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RECONCILING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STOPPING = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERROR = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEGRADED = 6,
	}
	
	/// <summary>
	/// ResourceStatus describes why a cluster or node pool has a certain status. (e.g., ERROR or DEGRADED).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceStatus
	{
		
		/// <summary>
		/// ResourceCondition provide a standard mechanism for higher-level status reporting from controller.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="conditions")]
		public ResourceCondition[] Conditions { get; set; }
		
		/// <summary>
		/// Human-friendly representation of the error message from controller. The error message can be temporary as the controller controller creates a cluster or node pool. If the error message persists for a longer period of time, it can be used to surface error message to indicate real problems requiring user intervention.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errorMessage")]
		public string ErrorMessage { get; set; }
	}
	
	/// <summary>
	/// ResourceCondition provides a standard mechanism for higher-level status reporting from controller.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceCondition
	{
		
		/// <summary>
		/// Last time the condition transit from one status to another.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastTransitionTime")]
		public string LastTransitionTime { get; set; }
		
		/// <summary>
		/// Human-readable message indicating details about last transition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// Machine-readable message indicating details about last transition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		/// <summary>
		/// state of the condition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<ResourceConditionState> State { get; set; }
		
		/// <summary>
		/// Type of the condition. (e.g., ClusterRunning, NodePoolRunning or ServerSidePreflightReady)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ResourceConditionState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATE_TRUE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATE_FALSE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATE_UNKNOWN = 3,
	}
	
	/// <summary>
	/// BareMetalAdminStorageConfig specifies the cluster storage configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BareMetalAdminStorageConfig
	{
		
		/// <summary>
		/// Specifies the configs for local persistent volumes (PVs).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lvpNodeMountsConfig")]
		public BareMetalLvpConfig LvpNodeMountsConfig { get; set; }
		
		/// <summary>
		/// Specifies the configs for local persistent volumes under a shared file system.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lvpShareConfig")]
		public BareMetalLvpShareConfig LvpShareConfig { get; set; }
	}
	
	/// <summary>
	/// Specifies the configs for local persistent volumes (PVs).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BareMetalLvpConfig
	{
		
		/// <summary>
		/// Required. The host machine path.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="path")]
		public string Path { get; set; }
		
		/// <summary>
		/// Required. The StorageClass name that PVs will be created with.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storageClass")]
		public string StorageClass { get; set; }
	}
	
	/// <summary>
	/// Specifies the configs for local persistent volumes under a shared file system.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BareMetalLvpShareConfig
	{
		
		/// <summary>
		/// Specifies the configs for local persistent volumes (PVs).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lvpConfig")]
		public BareMetalLvpConfig LvpConfig { get; set; }
		
		/// <summary>
		/// The number of subdirectories to create under path.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sharedPathPvCount")]
		public System.Nullable<System.Int32> SharedPathPvCount { get; set; }
	}
	
	/// <summary>
	/// ValidationCheck represents the result of preflight check.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ValidationCheck
	{
		
		/// <summary>
		/// Options used for the validation check
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="option")]
		public System.Nullable<ValidationCheckOption> Option { get; set; }
		
		/// <summary>
		/// Output only. The scenario when the preflight checks were run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scenario")]
		public System.Nullable<ValidationCheckScenario> Scenario { get; set; }
		
		/// <summary>
		/// ValidationCheckStatus defines the detailed validation check status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ValidationCheckStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ValidationCheckOption
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPTIONS_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SKIP_VALIDATION_CHECK_BLOCKING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SKIP_VALIDATION_ALL = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ValidationCheckScenario
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCENARIO_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE = 2,
	}
	
	/// <summary>
	/// ValidationCheckStatus defines the detailed validation check status.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ValidationCheckStatus
	{
		
		/// <summary>
		/// Individual checks which failed as part of the Preflight check execution.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="result")]
		public ValidationCheckResult[] Result { get; set; }
	}
	
	/// <summary>
	/// ValidationCheckResult defines the details about the validation check.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ValidationCheckResult
	{
		
		/// <summary>
		/// The category of the validation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="category")]
		public string Category { get; set; }
		
		/// <summary>
		/// The description of the validation check.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Detailed failure information, which might be unformatted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string Details { get; set; }
		
		/// <summary>
		/// A human-readable message of the check failure.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		/// <summary>
		/// The validation check state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<ValidationCheckResultState> State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ValidationCheckResultState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATE_UNKNOWN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATE_FAILURE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATE_SKIPPED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATE_FATAL = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATE_WARNING = 4,
	}
	
	/// <summary>
	/// Represents an arg name->value pair. Only a subset of customized flags are supported. For the exact format, refer to the [API server documentation](https://kubernetes.io/docs/reference/command-line-tools-reference/kube-apiserver/).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BareMetalApiServerArgument
	{
		
		/// <summary>
		/// Required. The argument name as it appears on the API Server command line, make sure to remove the leading dashes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="argument")]
		public string Argument { get; set; }
		
		/// <summary>
		/// Required. The value of the arg as it will be passed to the API Server command line.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// BareMetalBgpLbConfig represents configuration parameters for a Border Gateway Protocol (BGP) load balancer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BareMetalBgpLbConfig
	{
		
		/// <summary>
		/// Required. AddressPools is a list of non-overlapping IP pools used by load balancer typed services. All addresses must be routable to load balancer nodes. IngressVIP must be included in the pools.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addressPools")]
		public BareMetalLoadBalancerAddressPool[] AddressPools { get; set; }
		
		/// <summary>
		/// Required. BGP autonomous system number (ASN) of the cluster. This field can be updated after cluster creation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="asn")]
		public string Asn { get; set; }
		
		/// <summary>
		/// Required. The list of BGP peers that the cluster will connect to. At least one peer must be configured for each control plane node. Control plane nodes will connect to these peers to advertise the control plane VIP. The Services load balancer also uses these peers by default. This field can be updated after cluster creation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bgpPeerConfigs")]
		public BareMetalBgpPeerConfig[] BgpPeerConfigs { get; set; }
		
		/// <summary>
		/// Specifies the load balancer's node pool configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="loadBalancerNodePoolConfig")]
		public BareMetalLoadBalancerNodePoolConfig LoadBalancerNodePoolConfig { get; set; }
	}
	
	/// <summary>
	/// Represents an IP pool used by the load balancer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BareMetalLoadBalancerAddressPool
	{
		
		/// <summary>
		/// Required. The addresses that are part of this pool. Each address must be either in the CIDR form (1.2.3.0/24) or range form (1.2.3.1-1.2.3.5).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addresses")]
		public string[] Addresses { get; set; }
		
		/// <summary>
		/// If true, avoid using IPs ending in .0 or .255. This avoids buggy consumer devices mistakenly dropping IPv4 traffic for those special IP addresses.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="avoidBuggyIps")]
		public System.Nullable<System.Boolean> AvoidBuggyIps { get; set; }
		
		/// <summary>
		/// If true, prevent IP addresses from being automatically assigned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="manualAssign")]
		public System.Nullable<System.Boolean> ManualAssign { get; set; }
		
		/// <summary>
		/// Required. The name of the address pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pool")]
		public string Pool { get; set; }
	}
	
	/// <summary>
	/// BareMetalBgpPeerConfig represents configuration parameters for a Border Gateway Protocol (BGP) peer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BareMetalBgpPeerConfig
	{
		
		/// <summary>
		/// Required. BGP autonomous system number (ASN) for the network that contains the external peer device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="asn")]
		public string Asn { get; set; }
		
		/// <summary>
		/// The IP address of the control plane node that connects to the external peer. If you don't specify any control plane nodes, all control plane nodes can connect to the external peer. If you specify one or more IP addresses, only the nodes specified participate in peering sessions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="controlPlaneNodes")]
		public string[] ControlPlaneNodes { get; set; }
		
		/// <summary>
		/// Required. The IP address of the external peer device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ipAddress")]
		public string IpAddress { get; set; }
	}
	
	/// <summary>
	/// Specifies the load balancer's node pool configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BareMetalLoadBalancerNodePoolConfig
	{
		
		/// <summary>
		/// BareMetalNodePoolConfig describes the configuration of all nodes within a given bare metal node pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodePoolConfig")]
		public BareMetalNodePoolConfig NodePoolConfig { get; set; }
	}
	
	/// <summary>
	/// Resource that represents a bare metal user cluster. LINT.IfChange
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BareMetalCluster
	{
		
		/// <summary>
		/// Required. The admin cluster this bare metal user cluster belongs to. This is the full resource name of the admin cluster's fleet membership.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adminClusterMembership")]
		public string AdminClusterMembership { get; set; }
		
		/// <summary>
		/// Output only. The resource name of the bare metal admin cluster managing this user cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adminClusterName")]
		public string AdminClusterName { get; set; }
		
		/// <summary>
		/// Annotations on the bare metal user cluster. This field has the same restrictions as Kubernetes annotations. The total size of all keys and values combined is limited to 256k. Key can have 2 segments: prefix (optional) and name (required), separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="annotations")]
		public System.Collections.Generic.Dictionary<string, string> Annotations { get; set; }
		
		/// <summary>
		/// Required. The Anthos clusters on bare metal version for your user cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bareMetalVersion")]
		public string BareMetalVersion { get; set; }
		
		/// <summary>
		/// Configuration for Binary Authorization.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="binaryAuthorization")]
		public BinaryAuthorization BinaryAuthorization { get; set; }
		
		/// <summary>
		/// Specifies the bare metal user cluster's observability infrastructure.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clusterOperations")]
		public BareMetalClusterOperationsConfig ClusterOperations { get; set; }
		
		/// <summary>
		/// Specifies the control plane configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="controlPlane")]
		public BareMetalControlPlaneConfig ControlPlane { get; set; }
		
		/// <summary>
		/// Output only. The time when the bare metal user cluster was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// Output only. The time when the bare metal user cluster was deleted. If the resource is not deleted, this must be empty
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deleteTime")]
		public string DeleteTime { get; set; }
		
		/// <summary>
		/// A human readable description of this bare metal user cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Output only. The IP address of the bare metal user cluster's API server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endpoint")]
		public string Endpoint { get; set; }
		
		/// <summary>
		/// Output only. This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding. Allows clients to perform consistent read-modify-writes through optimistic concurrency control.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// Fleet related configuration. Fleets are a Google Cloud concept for logically organizing clusters, letting you use and manage multi-cluster capabilities and apply consistent policies across your systems. See [Anthos Fleets](`https://cloud.google.com/anthos/multicluster-management/fleets`) for more details on Anthos multi-cluster capabilities using Fleets. ##
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fleet")]
		public Fleet Fleet { get; set; }
		
		/// <summary>
		/// Specifies the load balancer configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="loadBalancer")]
		public BareMetalLoadBalancerConfig LoadBalancer { get; set; }
		
		/// <summary>
		/// Output only. The object name of the bare metal user cluster custom resource on the associated admin cluster. This field is used to support conflicting names when enrolling existing clusters to the API. When used as a part of cluster enrollment, this field will differ from the name in the resource name. For new clusters, this field will match the user provided cluster name and be visible in the last component of the resource name. It is not modifiable. When the local name and cluster name differ, the local name is used in the admin cluster controller logs. You use the cluster name when accessing the cluster using bmctl and kubectl.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="localName")]
		public string LocalName { get; set; }
		
		/// <summary>
		/// Specifies configurations to put bare metal nodes in and out of maintenance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maintenanceConfig")]
		public BareMetalMaintenanceConfig MaintenanceConfig { get; set; }
		
		/// <summary>
		/// Represents the maintenance status of the bare metal user cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maintenanceStatus")]
		public BareMetalMaintenanceStatus MaintenanceStatus { get; set; }
		
		/// <summary>
		/// Immutable. The bare metal user cluster resource name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Specifies the cluster network configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="networkConfig")]
		public BareMetalNetworkConfig NetworkConfig { get; set; }
		
		/// <summary>
		/// Specifies the node access related settings for the bare metal user cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodeAccessConfig")]
		public BareMetalNodeAccessConfig NodeAccessConfig { get; set; }
		
		/// <summary>
		/// Specifies the workload node configurations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodeConfig")]
		public BareMetalWorkloadNodeConfig NodeConfig { get; set; }
		
		/// <summary>
		/// Specifies operating system settings for cluster provisioning.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="osEnvironmentConfig")]
		public BareMetalOsEnvironmentConfig OsEnvironmentConfig { get; set; }
		
		/// <summary>
		/// Specifies the cluster proxy configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="proxy")]
		public BareMetalProxyConfig Proxy { get; set; }
		
		/// <summary>
		/// Output only. If set, there are currently changes in flight to the bare metal user cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reconciling")]
		public System.Nullable<System.Boolean> Reconciling { get; set; }
		
		/// <summary>
		/// Specifies the security related settings for the bare metal user cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="securityConfig")]
		public BareMetalSecurityConfig SecurityConfig { get; set; }
		
		/// <summary>
		/// Output only. The current state of the bare metal user cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public BareMetalAdminClusterState State { get; set; }
		
		/// <summary>
		/// ResourceStatus describes why a cluster or node pool has a certain status. (e.g., ERROR or DEGRADED).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ResourceStatus Status { get; set; }
		
		/// <summary>
		/// BareMetalStorageConfig specifies the cluster storage configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storage")]
		public BareMetalStorageConfig Storage { get; set; }
		
		/// <summary>
		/// Output only. The unique identifier of the bare metal user cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uid")]
		public string Uid { get; set; }
		
		/// <summary>
		/// Output only. The time when the bare metal user cluster was last updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
		
		/// <summary>
		/// BareMetalClusterUpgradePolicy defines the cluster upgrade policy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="upgradePolicy")]
		public BareMetalClusterUpgradePolicy UpgradePolicy { get; set; }
		
		/// <summary>
		/// ValidationCheck represents the result of preflight check.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="validationCheck")]
		public ValidationCheck ValidationCheck { get; set; }
	}
	
	/// <summary>
	/// Specifies the bare metal user cluster's observability infrastructure.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BareMetalClusterOperationsConfig
	{
		
		/// <summary>
		/// Whether collection of application logs/metrics should be enabled (in addition to system logs/metrics).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableApplicationLogs")]
		public System.Nullable<System.Boolean> EnableApplicationLogs { get; set; }
	}
	
	/// <summary>
	/// Specifies the control plane configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BareMetalControlPlaneConfig
	{
		
		/// <summary>
		/// Customizes the default API server args. Only a subset of customized flags are supported. For the exact format, refer to the [API server documentation](https://kubernetes.io/docs/reference/command-line-tools-reference/kube-apiserver/).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apiServerArgs")]
		public BareMetalApiServerArgument[] ApiServerArgs { get; set; }
		
		/// <summary>
		/// Specifies the control plane node pool configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="controlPlaneNodePoolConfig")]
		public BareMetalControlPlaneNodePoolConfig ControlPlaneNodePoolConfig { get; set; }
	}
	
	/// <summary>
	/// Specifies the control plane node pool configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BareMetalControlPlaneNodePoolConfig
	{
		
		/// <summary>
		/// BareMetalNodePoolConfig describes the configuration of all nodes within a given bare metal node pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodePoolConfig")]
		public BareMetalNodePoolConfig NodePoolConfig { get; set; }
	}
	
	/// <summary>
	/// Specifies the load balancer configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BareMetalLoadBalancerConfig
	{
		
		/// <summary>
		/// BareMetalBgpLbConfig represents configuration parameters for a Border Gateway Protocol (BGP) load balancer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bgpLbConfig")]
		public BareMetalBgpLbConfig BgpLbConfig { get; set; }
		
		/// <summary>
		/// Represents configuration parameters for a manual load balancer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="manualLbConfig")]
		public BareMetalManualLbConfig ManualLbConfig { get; set; }
		
		/// <summary>
		/// Represents configuration parameters for a MetalLB load balancer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metalLbConfig")]
		public BareMetalMetalLbConfig MetalLbConfig { get; set; }
		
		/// <summary>
		/// Specifies load balancer ports for the bare metal user cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="portConfig")]
		public BareMetalPortConfig PortConfig { get; set; }
		
		/// <summary>
		/// Specifies the VIP config for the bare metal load balancer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vipConfig")]
		public BareMetalVipConfig VipConfig { get; set; }
	}
	
	/// <summary>
	/// Represents configuration parameters for a manual load balancer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BareMetalManualLbConfig
	{
		
		/// <summary>
		/// Whether manual load balancing is enabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
	}
	
	/// <summary>
	/// Represents configuration parameters for a MetalLB load balancer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BareMetalMetalLbConfig
	{
		
		/// <summary>
		/// Required. AddressPools is a list of non-overlapping IP pools used by load balancer typed services. All addresses must be routable to load balancer nodes. IngressVIP must be included in the pools.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addressPools")]
		public BareMetalLoadBalancerAddressPool[] AddressPools { get; set; }
		
		/// <summary>
		/// Specifies the load balancer's node pool configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="loadBalancerNodePoolConfig")]
		public BareMetalLoadBalancerNodePoolConfig LoadBalancerNodePoolConfig { get; set; }
	}
	
	/// <summary>
	/// Specifies load balancer ports for the bare metal user cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BareMetalPortConfig
	{
		
		/// <summary>
		/// The port that control plane hosted load balancers will listen on.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="controlPlaneLoadBalancerPort")]
		public System.Nullable<System.Int32> ControlPlaneLoadBalancerPort { get; set; }
	}
	
	/// <summary>
	/// Specifies the VIP config for the bare metal load balancer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BareMetalVipConfig
	{
		
		/// <summary>
		/// The VIP which you previously set aside for the Kubernetes API of this bare metal user cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="controlPlaneVip")]
		public string ControlPlaneVip { get; set; }
		
		/// <summary>
		/// The VIP which you previously set aside for ingress traffic into this bare metal user cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ingressVip")]
		public string IngressVip { get; set; }
	}
	
	/// <summary>
	/// Specifies configurations to put bare metal nodes in and out of maintenance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BareMetalMaintenanceConfig
	{
		
		/// <summary>
		/// Required. All IPv4 address from these ranges will be placed into maintenance mode. Nodes in maintenance mode will be cordoned and drained. When both of these are true, the "baremetal.cluster.gke.io/maintenance" annotation will be set on the node resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maintenanceAddressCidrBlocks")]
		public string[] MaintenanceAddressCidrBlocks { get; set; }
	}
	
	/// <summary>
	/// Represents the maintenance status of the bare metal user cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BareMetalMaintenanceStatus
	{
		
		/// <summary>
		/// Represents the status of node machines that are undergoing drain operations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="machineDrainStatus")]
		public BareMetalMachineDrainStatus MachineDrainStatus { get; set; }
	}
	
	/// <summary>
	/// Represents the status of node machines that are undergoing drain operations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BareMetalMachineDrainStatus
	{
		
		/// <summary>
		/// The list of drained machines.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="drainedMachines")]
		public BareMetalDrainedMachine[] DrainedMachines { get; set; }
		
		/// <summary>
		/// The list of draning machines.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="drainingMachines")]
		public BareMetalDrainingMachine[] DrainingMachines { get; set; }
	}
	
	/// <summary>
	/// Represents a machine that is currently drained.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BareMetalDrainedMachine
	{
		
		/// <summary>
		/// Drained machine IP address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodeIp")]
		public string NodeIp { get; set; }
	}
	
	/// <summary>
	/// Represents a machine that is currently draining.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BareMetalDrainingMachine
	{
		
		/// <summary>
		/// Draining machine IP address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodeIp")]
		public string NodeIp { get; set; }
		
		/// <summary>
		/// The count of pods yet to drain.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="podCount")]
		public System.Nullable<System.Int32> PodCount { get; set; }
	}
	
	/// <summary>
	/// Specifies the cluster network configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BareMetalNetworkConfig
	{
		
		/// <summary>
		/// Enables the use of advanced Anthos networking features, such as Bundled Load Balancing with BGP or the egress NAT gateway. Setting configuration for advanced networking features will automatically set this flag.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="advancedNetworking")]
		public System.Nullable<System.Boolean> AdvancedNetworking { get; set; }
		
		/// <summary>
		/// Specifies the cluster CIDR configuration while running in island mode.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="islandModeCidr")]
		public BareMetalIslandModeCidrConfig IslandModeCidr { get; set; }
		
		/// <summary>
		/// Specifies the multiple networking interfaces cluster configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="multipleNetworkInterfacesConfig")]
		public BareMetalMultipleNetworkInterfacesConfig MultipleNetworkInterfacesConfig { get; set; }
		
		/// <summary>
		/// Specifies the SR-IOV networking operator config.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="srIovConfig")]
		public BareMetalSrIovConfig SrIovConfig { get; set; }
	}
	
	/// <summary>
	/// Specifies the cluster CIDR configuration while running in island mode.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BareMetalIslandModeCidrConfig
	{
		
		/// <summary>
		/// Required. All pods in the cluster are assigned an RFC1918 IPv4 address from these ranges. This field cannot be changed after creation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="podAddressCidrBlocks")]
		public string[] PodAddressCidrBlocks { get; set; }
		
		/// <summary>
		/// Required. All services in the cluster are assigned an RFC1918 IPv4 address from these ranges. This field is mutable after creation starting with version 1.15.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceAddressCidrBlocks")]
		public string[] ServiceAddressCidrBlocks { get; set; }
	}
	
	/// <summary>
	/// Specifies the multiple networking interfaces cluster configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BareMetalMultipleNetworkInterfacesConfig
	{
		
		/// <summary>
		/// Whether to enable multiple network interfaces for your pods. When set network_config.advanced_networking is automatically set to true.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
	}
	
	/// <summary>
	/// Specifies the SR-IOV networking operator config.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BareMetalSrIovConfig
	{
		
		/// <summary>
		/// Whether to install the SR-IOV operator.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
	}
	
	/// <summary>
	/// Specifies the node access related settings for the bare metal user cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BareMetalNodeAccessConfig
	{
		
		/// <summary>
		/// LoginUser is the user name used to access node machines. It defaults to "root" if not set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="loginUser")]
		public string LoginUser { get; set; }
	}
	
	/// <summary>
	/// Specifies the workload node configurations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BareMetalWorkloadNodeConfig
	{
		
		/// <summary>
		/// Specifies which container runtime will be used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="containerRuntime")]
		public System.Nullable<BareMetalWorkloadNodeConfigContainerRuntime> ContainerRuntime { get; set; }
		
		/// <summary>
		/// The maximum number of pods a node can run. The size of the CIDR range assigned to the node will be derived from this parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxPodsPerNode")]
		public string MaxPodsPerNode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum BareMetalWorkloadNodeConfigContainerRuntime
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTAINER_RUNTIME_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTAINERD = 1,
	}
	
	/// <summary>
	/// Specifies operating system settings for cluster provisioning.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BareMetalOsEnvironmentConfig
	{
		
		/// <summary>
		/// Whether the package repo should not be included when initializing bare metal machines.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="packageRepoExcluded")]
		public System.Nullable<System.Boolean> PackageRepoExcluded { get; set; }
	}
	
	/// <summary>
	/// Specifies the cluster proxy configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BareMetalProxyConfig
	{
		
		/// <summary>
		/// A list of IPs, hostnames, and domains that should skip the proxy. Examples: ["127.0.0.1", "example.com", ".corp", "localhost"].
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="noProxy")]
		public string[] NoProxy { get; set; }
		
		/// <summary>
		/// Required. Specifies the address of your proxy server. Examples: `http://domain` Do not provide credentials in the format `http://(username:password@)domain` these will be rejected by the server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	/// <summary>
	/// Specifies the security related settings for the bare metal user cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BareMetalSecurityConfig
	{
		
		/// <summary>
		/// Authorization defines the On-Prem cluster authorization configuration to bootstrap onto the admin cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authorization")]
		public Authorization Authorization { get; set; }
	}
	
	/// <summary>
	/// BareMetalStorageConfig specifies the cluster storage configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BareMetalStorageConfig
	{
		
		/// <summary>
		/// Specifies the configs for local persistent volumes (PVs).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lvpNodeMountsConfig")]
		public BareMetalLvpConfig LvpNodeMountsConfig { get; set; }
		
		/// <summary>
		/// Specifies the configs for local persistent volumes under a shared file system.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lvpShareConfig")]
		public BareMetalLvpShareConfig LvpShareConfig { get; set; }
	}
	
	/// <summary>
	/// BareMetalClusterUpgradePolicy defines the cluster upgrade policy.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BareMetalClusterUpgradePolicy
	{
		
		/// <summary>
		/// Specifies which upgrade policy to use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="policy")]
		public System.Nullable<BareMetalClusterUpgradePolicyPolicy> Policy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum BareMetalClusterUpgradePolicyPolicy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NODE_POOL_POLICY_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SERIAL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONCURRENT = 2,
	}
	
	/// <summary>
	/// Resource that represents a bare metal node pool.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BareMetalNodePool
	{
		
		/// <summary>
		/// Annotations on the bare metal node pool. This field has the same restrictions as Kubernetes annotations. The total size of all keys and values combined is limited to 256k. Key can have 2 segments: prefix (optional) and name (required), separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="annotations")]
		public System.Collections.Generic.Dictionary<string, string> Annotations { get; set; }
		
		/// <summary>
		/// Output only. The time at which this bare metal node pool was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// Output only. The time at which this bare metal node pool was deleted. If the resource is not deleted, this must be empty
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deleteTime")]
		public string DeleteTime { get; set; }
		
		/// <summary>
		/// The display name for the bare metal node pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding. Allows clients to perform consistent read-modify-writes through optimistic concurrency control.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// Immutable. The bare metal node pool resource name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// BareMetalNodePoolConfig describes the configuration of all nodes within a given bare metal node pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodePoolConfig")]
		public BareMetalNodePoolConfig NodePoolConfig { get; set; }
		
		/// <summary>
		/// Output only. If set, there are currently changes in flight to the bare metal node pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reconciling")]
		public System.Nullable<System.Boolean> Reconciling { get; set; }
		
		/// <summary>
		/// Output only. The current state of the bare metal node pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public BareMetalAdminClusterState State { get; set; }
		
		/// <summary>
		/// ResourceStatus describes why a cluster or node pool has a certain status. (e.g., ERROR or DEGRADED).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ResourceStatus Status { get; set; }
		
		/// <summary>
		/// Output only. The unique identifier of the bare metal node pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uid")]
		public string Uid { get; set; }
		
		/// <summary>
		/// Output only. The time at which this bare metal node pool was last updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
		
		/// <summary>
		/// BareMetalNodePoolUpgradePolicy defines the node pool upgrade policy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="upgradePolicy")]
		public BareMetalNodePoolUpgradePolicy UpgradePolicy { get; set; }
	}
	
	/// <summary>
	/// BareMetalNodePoolUpgradePolicy defines the node pool upgrade policy.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BareMetalNodePoolUpgradePolicy
	{
		
		/// <summary>
		/// BareMetalParallelUpgradeConfig defines the parallel upgrade settings for worker node pools.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parallelUpgradeConfig")]
		public BareMetalParallelUpgradeConfig ParallelUpgradeConfig { get; set; }
	}
	
	/// <summary>
	/// BareMetalParallelUpgradeConfig defines the parallel upgrade settings for worker node pools.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BareMetalParallelUpgradeConfig
	{
		
		/// <summary>
		/// The maximum number of nodes that can be upgraded at once.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="concurrentNodes")]
		public System.Nullable<System.Int32> ConcurrentNodes { get; set; }
		
		/// <summary>
		/// The minimum number of nodes that should be healthy and available during an upgrade. If set to the default value of 0, it is possible that none of the nodes will be available during an upgrade.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minimumAvailableNodes")]
		public System.Nullable<System.Int32> MinimumAvailableNodes { get; set; }
	}
	
	/// <summary>
	/// Contains information about a specific Anthos on bare metal version.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BareMetalVersionInfo
	{
		
		/// <summary>
		/// The list of upgrade dependencies for this version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dependencies")]
		public UpgradeDependency[] Dependencies { get; set; }
		
		/// <summary>
		/// If set, the cluster dependencies (e.g. the admin cluster, other user clusters managed by the same admin cluster, version skew policy, etc) must be upgraded before this version can be installed or upgraded to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hasDependencies")]
		public System.Nullable<System.Boolean> HasDependencies { get; set; }
		
		/// <summary>
		/// Version number e.g. 1.13.1.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	/// <summary>
	/// UpgradeDependency represents a dependency when upgrading a resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpgradeDependency
	{
		
		/// <summary>
		/// Current version of the dependency e.g. 1.15.0.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentVersion")]
		public string CurrentVersion { get; set; }
		
		/// <summary>
		/// Membership names are formatted as `projects//locations//memberships/`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="membership")]
		public string Membership { get; set; }
		
		/// <summary>
		/// Resource name of the dependency.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceName")]
		public string ResourceName { get; set; }
		
		/// <summary>
		/// Target version of the dependency e.g. 1.16.1. This is the version the dependency needs to be upgraded to before a resource can be upgraded.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetVersion")]
		public string TargetVersion { get; set; }
	}
	
	/// <summary>
	/// Associates `members`, or principals, with a `role`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Binding
	{
		
		/// <summary>
		/// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="condition")]
		public Expr Condition { get; set; }
		
		/// <summary>
		/// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="members")]
		public string[] Members { get; set; }
		
		/// <summary>
		/// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="role")]
		public string Role { get; set; }
	}
	
	/// <summary>
	/// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Expr
	{
		
		/// <summary>
		/// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Textual representation of an expression in Common Expression Language syntax.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expression")]
		public string Expression { get; set; }
		
		/// <summary>
		/// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	/// <summary>
	/// The request message for Operations.CancelOperation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CancelOperationRequest
	{
	}
	
	/// <summary>
	/// A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Empty
	{
	}
	
	/// <summary>
	/// Message for enrolling an existing bare metal admin cluster to the GKE on-prem API.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EnrollBareMetalAdminClusterRequest
	{
		
		/// <summary>
		/// User provided OnePlatform identifier that is used as part of the resource name. This must be unique among all GKE on-prem clusters within a project and location and will return a 409 if the cluster already exists. (https://tools.ietf.org/html/rfc1123) format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bareMetalAdminClusterId")]
		public string BareMetalAdminClusterId { get; set; }
		
		/// <summary>
		/// Required. This is the full resource name of this admin cluster's fleet membership.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="membership")]
		public string Membership { get; set; }
	}
	
	/// <summary>
	/// Message for enrolling an existing bare metal cluster to the Anthos On-Prem API.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EnrollBareMetalClusterRequest
	{
		
		/// <summary>
		/// Required. The admin cluster this bare metal user cluster belongs to. This is the full resource name of the admin cluster's fleet membership. In the future, references to other resource types might be allowed if admin clusters are modeled as their own resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adminClusterMembership")]
		public string AdminClusterMembership { get; set; }
		
		/// <summary>
		/// User provided OnePlatform identifier that is used as part of the resource name. This must be unique among all bare metal clusters within a project and location and will return a 409 if the cluster already exists. (https://tools.ietf.org/html/rfc1123) format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bareMetalClusterId")]
		public string BareMetalClusterId { get; set; }
		
		/// <summary>
		/// Optional. The object name of the bare metal cluster custom resource on the associated admin cluster. This field is used to support conflicting resource names when enrolling existing clusters to the API. When not provided, this field will resolve to the bare_metal_cluster_id. Otherwise, it must match the object name of the bare metal cluster custom resource. It is not modifiable outside / beyond the enrollment operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="localName")]
		public string LocalName { get; set; }
	}
	
	/// <summary>
	/// Message for enrolling an existing bare metal node pool to the GKE on-prem API.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EnrollBareMetalNodePoolRequest
	{
		
		/// <summary>
		/// User provided OnePlatform identifier that is used as part of the resource name. (https://tools.ietf.org/html/rfc1123) format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bareMetalNodePoolId")]
		public string BareMetalNodePoolId { get; set; }
		
		/// <summary>
		/// If set, only validate the request, but do not actually enroll the node pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="validateOnly")]
		public System.Nullable<System.Boolean> ValidateOnly { get; set; }
	}
	
	/// <summary>
	/// Message for enrolling an existing VMware admin cluster to the GKE on-prem API.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EnrollVmwareAdminClusterRequest
	{
		
		/// <summary>
		/// Required. This is the full resource name of this admin cluster's fleet membership.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="membership")]
		public string Membership { get; set; }
		
		/// <summary>
		/// User provided OnePlatform identifier that is used as part of the resource name. This must be unique among all GKE on-prem clusters within a project and location and will return a 409 if the cluster already exists. (https://tools.ietf.org/html/rfc1123) format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vmwareAdminClusterId")]
		public string VmwareAdminClusterId { get; set; }
	}
	
	/// <summary>
	/// Message for enrolling an existing VMware cluster to the Anthos On-Prem API.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EnrollVmwareClusterRequest
	{
		
		/// <summary>
		/// Required. The admin cluster this VMware user cluster belongs to. This is the full resource name of the admin cluster's fleet membership. In the future, references to other resource types might be allowed if admin clusters are modeled as their own resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adminClusterMembership")]
		public string AdminClusterMembership { get; set; }
		
		/// <summary>
		/// Optional. The object name of the VMware OnPremUserCluster custom resource on the associated admin cluster. This field is used to support conflicting resource names when enrolling existing clusters to the API. When not provided, this field will resolve to the vmware_cluster_id. Otherwise, it must match the object name of the VMware OnPremUserCluster custom resource. It is not modifiable outside / beyond the enrollment operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="localName")]
		public string LocalName { get; set; }
		
		/// <summary>
		/// Validate the request without actually doing any updates.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="validateOnly")]
		public System.Nullable<System.Boolean> ValidateOnly { get; set; }
		
		/// <summary>
		/// User provided OnePlatform identifier that is used as part of the resource name. This must be unique among all GKE on-prem clusters within a project and location and will return a 409 if the cluster already exists. (https://tools.ietf.org/html/rfc1123) format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vmwareClusterId")]
		public string VmwareClusterId { get; set; }
	}
	
	/// <summary>
	/// Message for enrolling a VMware node pool.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EnrollVmwareNodePoolRequest
	{
		
		/// <summary>
		/// The target node pool id to be enrolled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vmwareNodePoolId")]
		public string VmwareNodePoolId { get; set; }
	}
	
	/// <summary>
	/// Response message for listing bare metal admin clusters.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListBareMetalAdminClustersResponse
	{
		
		/// <summary>
		/// The list of bare metal admin cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bareMetalAdminClusters")]
		public BareMetalAdminCluster[] BareMetalAdminClusters { get; set; }
		
		/// <summary>
		/// A token identifying a page of results the server should return. If the token is not empty this means that more results are available and should be retrieved by repeating the request with the provided page token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// Locations that could not be reached.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unreachable")]
		public string[] Unreachable { get; set; }
	}
	
	/// <summary>
	/// Response message for listing bare metal Clusters.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListBareMetalClustersResponse
	{
		
		/// <summary>
		/// The list of bare metal Clusters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bareMetalClusters")]
		public BareMetalCluster[] BareMetalClusters { get; set; }
		
		/// <summary>
		/// A token identifying a page of results the server should return. If the token is not empty this means that more results are available and should be retrieved by repeating the request with the provided page token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// Locations that could not be reached.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unreachable")]
		public string[] Unreachable { get; set; }
	}
	
	/// <summary>
	/// Response message for listing bare metal node pools.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListBareMetalNodePoolsResponse
	{
		
		/// <summary>
		/// The node pools from the specified parent resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bareMetalNodePools")]
		public BareMetalNodePool[] BareMetalNodePools { get; set; }
		
		/// <summary>
		/// A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// Locations that could not be reached.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unreachable")]
		public string[] Unreachable { get; set; }
	}
	
	/// <summary>
	/// The response message for Locations.ListLocations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListLocationsResponse
	{
		
		/// <summary>
		/// A list of locations that matches the specified filter in the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locations")]
		public Location[] Locations { get; set; }
		
		/// <summary>
		/// The standard List next-page token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// A resource that represents a Google Cloud location.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Location
	{
		
		/// <summary>
		/// The friendly name for this location, typically a nearby city name. For example, "Tokyo".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Cross-service attributes for the location. For example {"cloud.googleapis.com/region": "us-east1"}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// The canonical id for this location. For example: `"us-east1"`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locationId")]
		public string LocationId { get; set; }
		
		/// <summary>
		/// Service-specific metadata. For example the available capacity at the given location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public System.Collections.Generic.Dictionary<string, object> Metadata { get; set; }
		
		/// <summary>
		/// Resource name for the location, which may vary between implementations. For example: `"projects/example-project/locations/us-east1"`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// The response message for Operations.ListOperations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListOperationsResponse
	{
		
		/// <summary>
		/// The standard List next-page token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// A list of operations that matches the specified filter in the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operations")]
		public Operation[] Operations { get; set; }
	}
	
	/// <summary>
	/// This resource represents a long-running operation that is the result of a network API call.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Operation
	{
		
		/// <summary>
		/// If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="done")]
		public System.Nullable<System.Boolean> Done { get; set; }
		
		/// <summary>
		/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public Status Error { get; set; }
		
		/// <summary>
		/// Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public System.Collections.Generic.Dictionary<string, object> Metadata { get; set; }
		
		/// <summary>
		/// The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="response")]
		public System.Collections.Generic.Dictionary<string, object> Response { get; set; }
	}
	
	/// <summary>
	/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Status
	{
		
		/// <summary>
		/// The status code, which should be an enum value of google.rpc.Code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		/// <summary>
		/// A list of messages that carry the error details. There is a common set of message types for APIs to use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string[] Details { get; set; }
		
		/// <summary>
		/// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// Response message for listing VMware admin clusters.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListVmwareAdminClustersResponse
	{
		
		/// <summary>
		/// A token identifying a page of results the server should return. If the token is not empty this means that more results are available and should be retrieved by repeating the request with the provided page token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// Locations that could not be reached.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unreachable")]
		public string[] Unreachable { get; set; }
		
		/// <summary>
		/// The list of VMware admin cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vmwareAdminClusters")]
		public VmwareAdminCluster[] VmwareAdminClusters { get; set; }
	}
	
	/// <summary>
	/// Resource that represents a VMware admin cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VmwareAdminCluster
	{
		
		/// <summary>
		/// VmwareAdminAddonNodeConfig contains add-on node configurations for VMware admin cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addonNode")]
		public VmwareAdminAddonNodeConfig AddonNode { get; set; }
		
		/// <summary>
		/// Annotations on the VMware admin cluster. This field has the same restrictions as Kubernetes annotations. The total size of all keys and values combined is limited to 256k. Key can have 2 segments: prefix (optional) and name (required), separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="annotations")]
		public System.Collections.Generic.Dictionary<string, string> Annotations { get; set; }
		
		/// <summary>
		/// Specifies anti affinity group config for the VMware user cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="antiAffinityGroups")]
		public VmwareAAGConfig AntiAffinityGroups { get; set; }
		
		/// <summary>
		/// VmwareAdminAuthorizationConfig represents configuration for admin cluster authorization.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authorization")]
		public VmwareAdminAuthorizationConfig Authorization { get; set; }
		
		/// <summary>
		/// Specifies config to enable/disable auto repair. The cluster-health-controller is deployed only if Enabled is true.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoRepairConfig")]
		public VmwareAutoRepairConfig AutoRepairConfig { get; set; }
		
		/// <summary>
		/// The bootstrap cluster this VMware admin cluster belongs to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bootstrapClusterMembership")]
		public string BootstrapClusterMembership { get; set; }
		
		/// <summary>
		/// VmwareAdminControlPlaneNodeConfig contains control plane node configuration for VMware admin cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="controlPlaneNode")]
		public VmwareAdminControlPlaneNodeConfig ControlPlaneNode { get; set; }
		
		/// <summary>
		/// Output only. The time at which VMware admin cluster was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// A human readable description of this VMware admin cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Output only. The DNS name of VMware admin cluster's API server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endpoint")]
		public string Endpoint { get; set; }
		
		/// <summary>
		/// This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding. Allows clients to perform consistent read-modify-writes through optimistic concurrency control.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// Fleet related configuration. Fleets are a Google Cloud concept for logically organizing clusters, letting you use and manage multi-cluster capabilities and apply consistent policies across your systems. See [Anthos Fleets](`https://cloud.google.com/anthos/multicluster-management/fleets`) for more details on Anthos multi-cluster capabilities using Fleets. ##
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fleet")]
		public Fleet Fleet { get; set; }
		
		/// <summary>
		/// The OS image type for the VMware admin cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageType")]
		public string ImageType { get; set; }
		
		/// <summary>
		/// VmwareAdminLoadBalancerConfig contains load balancer configuration for VMware admin cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="loadBalancer")]
		public VmwareAdminLoadBalancerConfig LoadBalancer { get; set; }
		
		/// <summary>
		/// Output only. The object name of the VMware OnPremAdminCluster custom resource. This field is used to support conflicting names when enrolling existing clusters to the API. When used as a part of cluster enrollment, this field will differ from the ID in the resource name. For new clusters, this field will match the user provided cluster name and be visible in the last component of the resource name. It is not modifiable. All users should use this name to access their cluster using gkectl or kubectl and should expect to see the local name when viewing admin cluster controller logs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="localName")]
		public string LocalName { get; set; }
		
		/// <summary>
		/// Immutable. The VMware admin cluster resource name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// VmwareAdminNetworkConfig contains network configuration for VMware admin cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="networkConfig")]
		public VmwareAdminNetworkConfig NetworkConfig { get; set; }
		
		/// <summary>
		/// The Anthos clusters on the VMware version for the admin cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="onPremVersion")]
		public string OnPremVersion { get; set; }
		
		/// <summary>
		/// VmwarePlatformConfig represents configuration for the VMware platform.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="platformConfig")]
		public VmwarePlatformConfig PlatformConfig { get; set; }
		
		/// <summary>
		/// VmwareAdminPreparedSecretsConfig represents configuration for admin cluster prepared secrets.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="preparedSecrets")]
		public VmwareAdminPreparedSecretsConfig PreparedSecrets { get; set; }
		
		/// <summary>
		/// Output only. If set, there are currently changes in flight to the VMware admin cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reconciling")]
		public System.Nullable<System.Boolean> Reconciling { get; set; }
		
		/// <summary>
		/// Output only. The current state of VMware admin cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public BareMetalAdminClusterState State { get; set; }
		
		/// <summary>
		/// ResourceStatus describes why a cluster or node pool has a certain status. (e.g., ERROR or DEGRADED).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ResourceStatus Status { get; set; }
		
		/// <summary>
		/// Output only. The unique identifier of the VMware admin cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uid")]
		public string Uid { get; set; }
		
		/// <summary>
		/// Output only. The time at which VMware admin cluster was last updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
		
		/// <summary>
		/// VmwareAdminVCenterConfig contains VCenter configuration for VMware admin cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vcenter")]
		public VmwareAdminVCenterConfig Vcenter { get; set; }
	}
	
	/// <summary>
	/// VmwareAdminAddonNodeConfig contains add-on node configurations for VMware admin cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VmwareAdminAddonNodeConfig
	{
		
		/// <summary>
		/// Represents auto resizing configurations for the VMware user cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoResizeConfig")]
		public VmwareAutoResizeConfig AutoResizeConfig { get; set; }
	}
	
	/// <summary>
	/// Represents auto resizing configurations for the VMware user cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VmwareAutoResizeConfig
	{
		
		/// <summary>
		/// Whether to enable controle plane node auto resizing.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
	}
	
	/// <summary>
	/// Specifies anti affinity group config for the VMware user cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VmwareAAGConfig
	{
		
		/// <summary>
		/// Spread nodes across at least three physical hosts (requires at least three hosts). Enabled by default.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="aagConfigDisabled")]
		public System.Nullable<System.Boolean> AagConfigDisabled { get; set; }
	}
	
	/// <summary>
	/// VmwareAdminAuthorizationConfig represents configuration for admin cluster authorization.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VmwareAdminAuthorizationConfig
	{
		
		/// <summary>
		/// For VMware admin clusters, users will be granted the cluster-viewer role on the cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="viewerUsers")]
		public ClusterUser[] ViewerUsers { get; set; }
	}
	
	/// <summary>
	/// Specifies config to enable/disable auto repair. The cluster-health-controller is deployed only if Enabled is true.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VmwareAutoRepairConfig
	{
		
		/// <summary>
		/// Whether auto repair is enabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
	}
	
	/// <summary>
	/// VmwareAdminControlPlaneNodeConfig contains control plane node configuration for VMware admin cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VmwareAdminControlPlaneNodeConfig
	{
		
		/// <summary>
		/// The number of vCPUs for the control-plane node of the admin cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cpus")]
		public string Cpus { get; set; }
		
		/// <summary>
		/// The number of mebibytes of memory for the control-plane node of the admin cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="memory")]
		public string Memory { get; set; }
		
		/// <summary>
		/// The number of control plane nodes for this VMware admin cluster. (default: 1 replica).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="replicas")]
		public string Replicas { get; set; }
	}
	
	/// <summary>
	/// VmwareAdminLoadBalancerConfig contains load balancer configuration for VMware admin cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VmwareAdminLoadBalancerConfig
	{
		
		/// <summary>
		/// VmwareAdminF5BigIpConfig represents configuration parameters for an F5 BIG-IP load balancer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="f5Config")]
		public VmwareAdminF5BigIpConfig F5Config { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="manualLbConfig")]
		public VmwareAdminManualLbConfig ManualLbConfig { get; set; }
		
		/// <summary>
		/// VmwareAdminMetalLbConfig represents configuration parameters for a MetalLB load balancer. For admin clusters, currently no configurations is needed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metalLbConfig")]
		public VmwareAdminMetalLbConfig MetalLbConfig { get; set; }
		
		/// <summary>
		/// VmwareSeesawConfig represents configuration parameters for an already existing Seesaw load balancer. IMPORTANT: Please note that the Anthos On-Prem API will not generate or update Seesaw configurations it can only bind a pre-existing configuration to a new user cluster. IMPORTANT: When attempting to create a user cluster with a pre-existing Seesaw load balancer you will need to follow some preparation steps before calling the 'CreateVmwareCluster' API method. First you will need to create the user cluster's namespace via kubectl. The namespace will need to use the following naming convention : -gke-onprem-mgmt or -gke-onprem-mgmt depending on whether you used the 'VmwareCluster.local_name' to disambiguate collisions; for more context see the documentation of 'VmwareCluster.local_name'. Once the namespace is created you will need to create a secret resource via kubectl. This secret will contain copies of your Seesaw credentials. The Secret must be called 'user-cluster-creds' and contain Seesaw's SSH and Cert credentials. The credentials must be keyed with the following names: 'seesaw-ssh-private-key', 'seesaw-ssh-public-key', 'seesaw-ssh-ca-key', 'seesaw-ssh-ca-cert'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="seesawConfig")]
		public VmwareAdminSeesawConfig SeesawConfig { get; set; }
		
		/// <summary>
		/// VmwareAdminVipConfig for VMware load balancer configurations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vipConfig")]
		public VmwareAdminVipConfig VipConfig { get; set; }
	}
	
	/// <summary>
	/// VmwareAdminF5BigIpConfig represents configuration parameters for an F5 BIG-IP load balancer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VmwareAdminF5BigIpConfig
	{
		
		/// <summary>
		/// The load balancer's IP address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address")]
		public string Address { get; set; }
		
		/// <summary>
		/// The preexisting partition to be used by the load balancer. This partition is usually created for the admin cluster for example: 'my-f5-admin-partition'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The pool name. Only necessary, if using SNAT.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="snatPool")]
		public string SnatPool { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VmwareAdminManualLbConfig
	{
		
		/// <summary>
		/// NodePort for add-ons server in the admin cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addonsNodePort")]
		public System.Nullable<System.Int32> AddonsNodePort { get; set; }
		
		/// <summary>
		/// NodePort for control plane service. The Kubernetes API server in the admin cluster is implemented as a Service of type NodePort (ex. 30968).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="controlPlaneNodePort")]
		public System.Nullable<System.Int32> ControlPlaneNodePort { get; set; }
		
		/// <summary>
		/// NodePort for ingress service's http. The ingress service in the admin cluster is implemented as a Service of type NodePort (ex. 32527).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ingressHttpNodePort")]
		public System.Nullable<System.Int32> IngressHttpNodePort { get; set; }
		
		/// <summary>
		/// NodePort for ingress service's https. The ingress service in the admin cluster is implemented as a Service of type NodePort (ex. 30139).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ingressHttpsNodePort")]
		public System.Nullable<System.Int32> IngressHttpsNodePort { get; set; }
		
		/// <summary>
		/// NodePort for konnectivity server service running as a sidecar in each kube-apiserver pod (ex. 30564).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="konnectivityServerNodePort")]
		public System.Nullable<System.Int32> KonnectivityServerNodePort { get; set; }
	}
	
	/// <summary>
	/// VmwareAdminMetalLbConfig represents configuration parameters for a MetalLB load balancer. For admin clusters, currently no configurations is needed.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VmwareAdminMetalLbConfig
	{
	}
	
	/// <summary>
	/// VmwareSeesawConfig represents configuration parameters for an already existing Seesaw load balancer. IMPORTANT: Please note that the Anthos On-Prem API will not generate or update Seesaw configurations it can only bind a pre-existing configuration to a new user cluster. IMPORTANT: When attempting to create a user cluster with a pre-existing Seesaw load balancer you will need to follow some preparation steps before calling the 'CreateVmwareCluster' API method. First you will need to create the user cluster's namespace via kubectl. The namespace will need to use the following naming convention : -gke-onprem-mgmt or -gke-onprem-mgmt depending on whether you used the 'VmwareCluster.local_name' to disambiguate collisions; for more context see the documentation of 'VmwareCluster.local_name'. Once the namespace is created you will need to create a secret resource via kubectl. This secret will contain copies of your Seesaw credentials. The Secret must be called 'user-cluster-creds' and contain Seesaw's SSH and Cert credentials. The credentials must be keyed with the following names: 'seesaw-ssh-private-key', 'seesaw-ssh-public-key', 'seesaw-ssh-ca-key', 'seesaw-ssh-ca-cert'.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VmwareAdminSeesawConfig
	{
		
		/// <summary>
		/// Enable two load balancer VMs to achieve a highly-available Seesaw load balancer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableHa")]
		public System.Nullable<System.Boolean> EnableHa { get; set; }
		
		/// <summary>
		/// In general the following format should be used for the Seesaw group name: seesaw-for-[cluster_name].
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="group")]
		public string Group { get; set; }
		
		/// <summary>
		/// The IP Blocks to be used by the Seesaw load balancer
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ipBlocks")]
		public VmwareIpBlock[] IpBlocks { get; set; }
		
		/// <summary>
		/// MasterIP is the IP announced by the master of Seesaw group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="masterIp")]
		public string MasterIp { get; set; }
		
		/// <summary>
		/// Name to be used by Stackdriver.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stackdriverName")]
		public string StackdriverName { get; set; }
		
		/// <summary>
		/// Names of the VMs created for this Seesaw group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vms")]
		public string[] Vms { get; set; }
	}
	
	/// <summary>
	/// Represents a collection of IP addresses to assign to nodes.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VmwareIpBlock
	{
		
		/// <summary>
		/// The network gateway used by the VMware user cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gateway")]
		public string Gateway { get; set; }
		
		/// <summary>
		/// The node's network configurations used by the VMware user cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ips")]
		public VmwareHostIp[] Ips { get; set; }
		
		/// <summary>
		/// The netmask used by the VMware user cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="netmask")]
		public string Netmask { get; set; }
	}
	
	/// <summary>
	/// Represents VMware user cluster node's network configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VmwareHostIp
	{
		
		/// <summary>
		/// Hostname of the machine. VM's name will be used if this field is empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hostname")]
		public string Hostname { get; set; }
		
		/// <summary>
		/// IP could be an IP address (like 1.2.3.4) or a CIDR (like 1.2.3.0/24).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ip")]
		public string Ip { get; set; }
	}
	
	/// <summary>
	/// VmwareAdminVipConfig for VMware load balancer configurations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VmwareAdminVipConfig
	{
		
		/// <summary>
		/// The VIP to configure the load balancer for add-ons.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addonsVip")]
		public string AddonsVip { get; set; }
		
		/// <summary>
		/// The VIP which you previously set aside for the Kubernetes API of the admin cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="controlPlaneVip")]
		public string ControlPlaneVip { get; set; }
	}
	
	/// <summary>
	/// VmwareAdminNetworkConfig contains network configuration for VMware admin cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VmwareAdminNetworkConfig
	{
		
		/// <summary>
		/// Represents the network configuration required for the VMware user clusters with DHCP IP configurations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dhcpIpConfig")]
		public VmwareDhcpIpConfig DhcpIpConfig { get; set; }
		
		/// <summary>
		/// Specifies HA admin control plane config.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="haControlPlaneConfig")]
		public VmwareAdminHAControlPlaneConfig HaControlPlaneConfig { get; set; }
		
		/// <summary>
		/// Represents the common parameters for all the hosts irrespective of their IP address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hostConfig")]
		public VmwareHostConfig HostConfig { get; set; }
		
		/// <summary>
		/// Required. All pods in the cluster are assigned an RFC1918 IPv4 address from these ranges. Only a single range is supported. This field cannot be changed after creation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="podAddressCidrBlocks")]
		public string[] PodAddressCidrBlocks { get; set; }
		
		/// <summary>
		/// Required. All services in the cluster are assigned an RFC1918 IPv4 address from these ranges. Only a single range is supported. This field cannot be changed after creation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceAddressCidrBlocks")]
		public string[] ServiceAddressCidrBlocks { get; set; }
		
		/// <summary>
		/// Represents the network configuration required for the VMware user clusters with Static IP configurations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="staticIpConfig")]
		public VmwareStaticIpConfig StaticIpConfig { get; set; }
		
		/// <summary>
		/// vcenter_network specifies vCenter network name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vcenterNetwork")]
		public string VcenterNetwork { get; set; }
	}
	
	/// <summary>
	/// Represents the network configuration required for the VMware user clusters with DHCP IP configurations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VmwareDhcpIpConfig
	{
		
		/// <summary>
		/// enabled is a flag to mark if DHCP IP allocation is used for VMware user clusters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
	}
	
	/// <summary>
	/// Specifies HA admin control plane config.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VmwareAdminHAControlPlaneConfig
	{
		
		/// <summary>
		/// Represents a collection of IP addresses to assign to nodes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="controlPlaneIpBlock")]
		public VmwareIpBlock ControlPlaneIpBlock { get; set; }
	}
	
	/// <summary>
	/// Represents the common parameters for all the hosts irrespective of their IP address.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VmwareHostConfig
	{
		
		/// <summary>
		/// DNS search domains.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dnsSearchDomains")]
		public string[] DnsSearchDomains { get; set; }
		
		/// <summary>
		/// DNS servers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dnsServers")]
		public string[] DnsServers { get; set; }
		
		/// <summary>
		/// NTP servers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ntpServers")]
		public string[] NtpServers { get; set; }
	}
	
	/// <summary>
	/// Represents the network configuration required for the VMware user clusters with Static IP configurations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VmwareStaticIpConfig
	{
		
		/// <summary>
		/// Represents the configuration values for static IP allocation to nodes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ipBlocks")]
		public VmwareIpBlock[] IpBlocks { get; set; }
	}
	
	/// <summary>
	/// VmwarePlatformConfig represents configuration for the VMware platform.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VmwarePlatformConfig
	{
		
		/// <summary>
		/// Output only. The list of bundles installed in the admin cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bundles")]
		public VmwareBundleConfig[] Bundles { get; set; }
		
		/// <summary>
		/// Output only. The platform version e.g. 1.13.2.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="platformVersion")]
		public string PlatformVersion { get; set; }
		
		/// <summary>
		/// Input only. The required platform version e.g. 1.13.1. If the current platform version is lower than the target version, the platform version will be updated to the target version. If the target version is not installed in the platform (bundle versions), download the target version bundle.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requiredPlatformVersion")]
		public string RequiredPlatformVersion { get; set; }
		
		/// <summary>
		/// ResourceStatus describes why a cluster or node pool has a certain status. (e.g., ERROR or DEGRADED).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ResourceStatus Status { get; set; }
	}
	
	/// <summary>
	/// VmwareBundleConfig represents configuration for the bundle.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VmwareBundleConfig
	{
		
		/// <summary>
		/// ResourceStatus describes why a cluster or node pool has a certain status. (e.g., ERROR or DEGRADED).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ResourceStatus Status { get; set; }
		
		/// <summary>
		/// The version of the bundle.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	/// <summary>
	/// VmwareAdminPreparedSecretsConfig represents configuration for admin cluster prepared secrets.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VmwareAdminPreparedSecretsConfig
	{
		
		/// <summary>
		/// Whether prepared secrets is enabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
	}
	
	/// <summary>
	/// VmwareAdminVCenterConfig contains VCenter configuration for VMware admin cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VmwareAdminVCenterConfig
	{
		
		/// <summary>
		/// The vCenter IP address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address")]
		public string Address { get; set; }
		
		/// <summary>
		/// Contains the vCenter CA certificate public key for SSL verification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="caCertData")]
		public string CaCertData { get; set; }
		
		/// <summary>
		/// The name of the vCenter cluster for the admin cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cluster")]
		public string Cluster { get; set; }
		
		/// <summary>
		/// The name of the virtual machine disk (VMDK) for the admin cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataDisk")]
		public string DataDisk { get; set; }
		
		/// <summary>
		/// The name of the vCenter datacenter for the admin cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="datacenter")]
		public string Datacenter { get; set; }
		
		/// <summary>
		/// The name of the vCenter datastore for the admin cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="datastore")]
		public string Datastore { get; set; }
		
		/// <summary>
		/// The name of the vCenter folder for the admin cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="folder")]
		public string Folder { get; set; }
		
		/// <summary>
		/// The name of the vCenter resource pool for the admin cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourcePool")]
		public string ResourcePool { get; set; }
		
		/// <summary>
		/// The name of the vCenter storage policy for the user cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storagePolicyName")]
		public string StoragePolicyName { get; set; }
	}
	
	/// <summary>
	/// Response message for listing VMware Clusters.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListVmwareClustersResponse
	{
		
		/// <summary>
		/// A token identifying a page of results the server should return. If the token is not empty this means that more results are available and should be retrieved by repeating the request with the provided page token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// Locations that could not be reached.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unreachable")]
		public string[] Unreachable { get; set; }
		
		/// <summary>
		/// The list of VMware Cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vmwareClusters")]
		public VmwareCluster[] VmwareClusters { get; set; }
	}
	
	/// <summary>
	/// Resource that represents a VMware user cluster. ##
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VmwareCluster
	{
		
		/// <summary>
		/// Required. The admin cluster this VMware user cluster belongs to. This is the full resource name of the admin cluster's fleet membership. In the future, references to other resource types might be allowed if admin clusters are modeled as their own resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adminClusterMembership")]
		public string AdminClusterMembership { get; set; }
		
		/// <summary>
		/// Output only. The resource name of the VMware admin cluster hosting this user cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adminClusterName")]
		public string AdminClusterName { get; set; }
		
		/// <summary>
		/// Annotations on the VMware user cluster. This field has the same restrictions as Kubernetes annotations. The total size of all keys and values combined is limited to 256k. Key can have 2 segments: prefix (optional) and name (required), separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="annotations")]
		public System.Collections.Generic.Dictionary<string, string> Annotations { get; set; }
		
		/// <summary>
		/// Specifies anti affinity group config for the VMware user cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="antiAffinityGroups")]
		public VmwareAAGConfig AntiAffinityGroups { get; set; }
		
		/// <summary>
		/// Authorization defines the On-Prem cluster authorization configuration to bootstrap onto the admin cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authorization")]
		public Authorization Authorization { get; set; }
		
		/// <summary>
		/// Specifies config to enable/disable auto repair. The cluster-health-controller is deployed only if Enabled is true.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoRepairConfig")]
		public VmwareAutoRepairConfig AutoRepairConfig { get; set; }
		
		/// <summary>
		/// Specifies control plane node config for the VMware user cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="controlPlaneNode")]
		public VmwareControlPlaneNodeConfig ControlPlaneNode { get; set; }
		
		/// <summary>
		/// Output only. The time at which VMware user cluster was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// Contains configurations for Dataplane V2, which is optimized dataplane for Kubernetes networking. For more information, see: https://cloud.google.com/kubernetes-engine/docs/concepts/dataplane-v2
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataplaneV2")]
		public VmwareDataplaneV2Config DataplaneV2 { get; set; }
		
		/// <summary>
		/// Output only. The time at which VMware user cluster was deleted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deleteTime")]
		public string DeleteTime { get; set; }
		
		/// <summary>
		/// A human readable description of this VMware user cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Disable bundled ingress.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disableBundledIngress")]
		public System.Nullable<System.Boolean> DisableBundledIngress { get; set; }
		
		/// <summary>
		/// Enable control plane V2. Default to false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableControlPlaneV2")]
		public System.Nullable<System.Boolean> EnableControlPlaneV2 { get; set; }
		
		/// <summary>
		/// Output only. The DNS name of VMware user cluster's API server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endpoint")]
		public string Endpoint { get; set; }
		
		/// <summary>
		/// This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding. Allows clients to perform consistent read-modify-writes through optimistic concurrency control.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// Fleet related configuration. Fleets are a Google Cloud concept for logically organizing clusters, letting you use and manage multi-cluster capabilities and apply consistent policies across your systems. See [Anthos Fleets](`https://cloud.google.com/anthos/multicluster-management/fleets`) for more details on Anthos multi-cluster capabilities using Fleets. ##
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fleet")]
		public Fleet Fleet { get; set; }
		
		/// <summary>
		/// Specifies the locad balancer config for the VMware user cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="loadBalancer")]
		public VmwareLoadBalancerConfig LoadBalancer { get; set; }
		
		/// <summary>
		/// Output only. The object name of the VMware OnPremUserCluster custom resource on the associated admin cluster. This field is used to support conflicting names when enrolling existing clusters to the API. When used as a part of cluster enrollment, this field will differ from the ID in the resource name. For new clusters, this field will match the user provided cluster name and be visible in the last component of the resource name. It is not modifiable. All users should use this name to access their cluster using gkectl or kubectl and should expect to see the local name when viewing admin cluster controller logs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="localName")]
		public string LocalName { get; set; }
		
		/// <summary>
		/// Immutable. The VMware user cluster resource name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Specifies network config for the VMware user cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="networkConfig")]
		public VmwareNetworkConfig NetworkConfig { get; set; }
		
		/// <summary>
		/// Required. The Anthos clusters on the VMware version for your user cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="onPremVersion")]
		public string OnPremVersion { get; set; }
		
		/// <summary>
		/// Output only. If set, there are currently changes in flight to the VMware user cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reconciling")]
		public System.Nullable<System.Boolean> Reconciling { get; set; }
		
		/// <summary>
		/// Output only. The current state of VMware user cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public BareMetalAdminClusterState State { get; set; }
		
		/// <summary>
		/// ResourceStatus describes why a cluster or node pool has a certain status. (e.g., ERROR or DEGRADED).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ResourceStatus Status { get; set; }
		
		/// <summary>
		/// Specifies vSphere CSI components deployment config in the VMware user cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storage")]
		public VmwareStorageConfig Storage { get; set; }
		
		/// <summary>
		/// Output only. The unique identifier of the VMware user cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uid")]
		public string Uid { get; set; }
		
		/// <summary>
		/// Output only. The time at which VMware user cluster was last updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
		
		/// <summary>
		/// VmwareClusterUpgradePolicy defines the cluster upgrade policy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="upgradePolicy")]
		public VmwareClusterUpgradePolicy UpgradePolicy { get; set; }
		
		/// <summary>
		/// ValidationCheck represents the result of preflight check.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="validationCheck")]
		public ValidationCheck ValidationCheck { get; set; }
		
		/// <summary>
		/// Represents configuration for the VMware VCenter for the user cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vcenter")]
		public VmwareVCenterConfig Vcenter { get; set; }
		
		/// <summary>
		/// Enable VM tracking.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vmTrackingEnabled")]
		public System.Nullable<System.Boolean> VmTrackingEnabled { get; set; }
	}
	
	/// <summary>
	/// Specifies control plane node config for the VMware user cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VmwareControlPlaneNodeConfig
	{
		
		/// <summary>
		/// Represents auto resizing configurations for the VMware user cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoResizeConfig")]
		public VmwareAutoResizeConfig AutoResizeConfig { get; set; }
		
		/// <summary>
		/// The number of CPUs for each admin cluster node that serve as control planes for this VMware user cluster. (default: 4 CPUs)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cpus")]
		public string Cpus { get; set; }
		
		/// <summary>
		/// The megabytes of memory for each admin cluster node that serves as a control plane for this VMware user cluster (default: 8192 MB memory).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="memory")]
		public string Memory { get; set; }
		
		/// <summary>
		/// The number of control plane nodes for this VMware user cluster. (default: 1 replica).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="replicas")]
		public string Replicas { get; set; }
		
		/// <summary>
		/// Specifies control plane node config.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vsphereConfig")]
		public VmwareControlPlaneVsphereConfig VsphereConfig { get; set; }
	}
	
	/// <summary>
	/// Specifies control plane node config.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VmwareControlPlaneVsphereConfig
	{
		
		/// <summary>
		/// The Vsphere datastore used by the control plane Node.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="datastore")]
		public string Datastore { get; set; }
		
		/// <summary>
		/// The Vsphere storage policy used by the control plane Node.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storagePolicyName")]
		public string StoragePolicyName { get; set; }
	}
	
	/// <summary>
	/// Contains configurations for Dataplane V2, which is optimized dataplane for Kubernetes networking. For more information, see: https://cloud.google.com/kubernetes-engine/docs/concepts/dataplane-v2
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VmwareDataplaneV2Config
	{
		
		/// <summary>
		/// Enable advanced networking which requires dataplane_v2_enabled to be set true.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="advancedNetworking")]
		public System.Nullable<System.Boolean> AdvancedNetworking { get; set; }
		
		/// <summary>
		/// Enables Dataplane V2.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataplaneV2Enabled")]
		public System.Nullable<System.Boolean> DataplaneV2Enabled { get; set; }
		
		/// <summary>
		/// Enable Dataplane V2 for clusters with Windows nodes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="windowsDataplaneV2Enabled")]
		public System.Nullable<System.Boolean> WindowsDataplaneV2Enabled { get; set; }
	}
	
	/// <summary>
	/// Specifies the locad balancer config for the VMware user cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VmwareLoadBalancerConfig
	{
		
		/// <summary>
		/// Represents configuration parameters for an F5 BIG-IP load balancer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="f5Config")]
		public VmwareF5BigIpConfig F5Config { get; set; }
		
		/// <summary>
		/// Represents configuration parameters for an already existing manual load balancer. Given the nature of manual load balancers it is expected that said load balancer will be fully managed by users. IMPORTANT: Please note that the Anthos On-Prem API will not generate or update ManualLB configurations it can only bind a pre-existing configuration to a new VMware user cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="manualLbConfig")]
		public VmwareManualLbConfig ManualLbConfig { get; set; }
		
		/// <summary>
		/// Represents configuration parameters for the MetalLB load balancer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metalLbConfig")]
		public VmwareMetalLbConfig MetalLbConfig { get; set; }
		
		/// <summary>
		/// VmwareSeesawConfig represents configuration parameters for an already existing Seesaw load balancer. IMPORTANT: Please note that the Anthos On-Prem API will not generate or update Seesaw configurations it can only bind a pre-existing configuration to a new user cluster. IMPORTANT: When attempting to create a user cluster with a pre-existing Seesaw load balancer you will need to follow some preparation steps before calling the 'CreateVmwareCluster' API method. First you will need to create the user cluster's namespace via kubectl. The namespace will need to use the following naming convention : -gke-onprem-mgmt or -gke-onprem-mgmt depending on whether you used the 'VmwareCluster.local_name' to disambiguate collisions; for more context see the documentation of 'VmwareCluster.local_name'. Once the namespace is created you will need to create a secret resource via kubectl. This secret will contain copies of your Seesaw credentials. The Secret must be called 'user-cluster-creds' and contain Seesaw's SSH and Cert credentials. The credentials must be keyed with the following names: 'seesaw-ssh-private-key', 'seesaw-ssh-public-key', 'seesaw-ssh-ca-key', 'seesaw-ssh-ca-cert'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="seesawConfig")]
		public VmwareSeesawConfig SeesawConfig { get; set; }
		
		/// <summary>
		/// Specifies the VIP config for the VMware user cluster load balancer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vipConfig")]
		public VmwareVipConfig VipConfig { get; set; }
	}
	
	/// <summary>
	/// Represents configuration parameters for an F5 BIG-IP load balancer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VmwareF5BigIpConfig
	{
		
		/// <summary>
		/// The load balancer's IP address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address")]
		public string Address { get; set; }
		
		/// <summary>
		/// The preexisting partition to be used by the load balancer. This partition is usually created for the admin cluster for example: 'my-f5-admin-partition'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// The pool name. Only necessary, if using SNAT.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="snatPool")]
		public string SnatPool { get; set; }
	}
	
	/// <summary>
	/// Represents configuration parameters for an already existing manual load balancer. Given the nature of manual load balancers it is expected that said load balancer will be fully managed by users. IMPORTANT: Please note that the Anthos On-Prem API will not generate or update ManualLB configurations it can only bind a pre-existing configuration to a new VMware user cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VmwareManualLbConfig
	{
		
		/// <summary>
		/// NodePort for control plane service. The Kubernetes API server in the admin cluster is implemented as a Service of type NodePort (ex. 30968).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="controlPlaneNodePort")]
		public System.Nullable<System.Int32> ControlPlaneNodePort { get; set; }
		
		/// <summary>
		/// NodePort for ingress service's http. The ingress service in the admin cluster is implemented as a Service of type NodePort (ex. 32527).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ingressHttpNodePort")]
		public System.Nullable<System.Int32> IngressHttpNodePort { get; set; }
		
		/// <summary>
		/// NodePort for ingress service's https. The ingress service in the admin cluster is implemented as a Service of type NodePort (ex. 30139).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ingressHttpsNodePort")]
		public System.Nullable<System.Int32> IngressHttpsNodePort { get; set; }
		
		/// <summary>
		/// NodePort for konnectivity server service running as a sidecar in each kube-apiserver pod (ex. 30564).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="konnectivityServerNodePort")]
		public System.Nullable<System.Int32> KonnectivityServerNodePort { get; set; }
	}
	
	/// <summary>
	/// Represents configuration parameters for the MetalLB load balancer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VmwareMetalLbConfig
	{
		
		/// <summary>
		/// Required. AddressPools is a list of non-overlapping IP pools used by load balancer typed services. All addresses must be routable to load balancer nodes. IngressVIP must be included in the pools.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addressPools")]
		public VmwareAddressPool[] AddressPools { get; set; }
	}
	
	/// <summary>
	/// Represents an IP pool used by the load balancer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VmwareAddressPool
	{
		
		/// <summary>
		/// Required. The addresses that are part of this pool. Each address must be either in the CIDR form (1.2.3.0/24) or range form (1.2.3.1-1.2.3.5).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addresses")]
		public string[] Addresses { get; set; }
		
		/// <summary>
		/// If true, avoid using IPs ending in .0 or .255. This avoids buggy consumer devices mistakenly dropping IPv4 traffic for those special IP addresses.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="avoidBuggyIps")]
		public System.Nullable<System.Boolean> AvoidBuggyIps { get; set; }
		
		/// <summary>
		/// If true, prevent IP addresses from being automatically assigned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="manualAssign")]
		public System.Nullable<System.Boolean> ManualAssign { get; set; }
		
		/// <summary>
		/// Required. The name of the address pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pool")]
		public string Pool { get; set; }
	}
	
	/// <summary>
	/// VmwareSeesawConfig represents configuration parameters for an already existing Seesaw load balancer. IMPORTANT: Please note that the Anthos On-Prem API will not generate or update Seesaw configurations it can only bind a pre-existing configuration to a new user cluster. IMPORTANT: When attempting to create a user cluster with a pre-existing Seesaw load balancer you will need to follow some preparation steps before calling the 'CreateVmwareCluster' API method. First you will need to create the user cluster's namespace via kubectl. The namespace will need to use the following naming convention : -gke-onprem-mgmt or -gke-onprem-mgmt depending on whether you used the 'VmwareCluster.local_name' to disambiguate collisions; for more context see the documentation of 'VmwareCluster.local_name'. Once the namespace is created you will need to create a secret resource via kubectl. This secret will contain copies of your Seesaw credentials. The Secret must be called 'user-cluster-creds' and contain Seesaw's SSH and Cert credentials. The credentials must be keyed with the following names: 'seesaw-ssh-private-key', 'seesaw-ssh-public-key', 'seesaw-ssh-ca-key', 'seesaw-ssh-ca-cert'.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VmwareSeesawConfig
	{
		
		/// <summary>
		/// Enable two load balancer VMs to achieve a highly-available Seesaw load balancer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableHa")]
		public System.Nullable<System.Boolean> EnableHa { get; set; }
		
		/// <summary>
		/// Required. In general the following format should be used for the Seesaw group name: seesaw-for-[cluster_name].
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="group")]
		public string Group { get; set; }
		
		/// <summary>
		/// Required. The IP Blocks to be used by the Seesaw load balancer
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ipBlocks")]
		public VmwareIpBlock[] IpBlocks { get; set; }
		
		/// <summary>
		/// Required. MasterIP is the IP announced by the master of Seesaw group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="masterIp")]
		public string MasterIp { get; set; }
		
		/// <summary>
		/// Name to be used by Stackdriver.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stackdriverName")]
		public string StackdriverName { get; set; }
		
		/// <summary>
		/// Names of the VMs created for this Seesaw group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vms")]
		public string[] Vms { get; set; }
	}
	
	/// <summary>
	/// Specifies the VIP config for the VMware user cluster load balancer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VmwareVipConfig
	{
		
		/// <summary>
		/// The VIP which you previously set aside for the Kubernetes API of this cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="controlPlaneVip")]
		public string ControlPlaneVip { get; set; }
		
		/// <summary>
		/// The VIP which you previously set aside for ingress traffic into this cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ingressVip")]
		public string IngressVip { get; set; }
	}
	
	/// <summary>
	/// Specifies network config for the VMware user cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VmwareNetworkConfig
	{
		
		/// <summary>
		/// Specifies control plane V2 config.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="controlPlaneV2Config")]
		public VmwareControlPlaneV2Config ControlPlaneV2Config { get; set; }
		
		/// <summary>
		/// Represents the network configuration required for the VMware user clusters with DHCP IP configurations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dhcpIpConfig")]
		public VmwareDhcpIpConfig DhcpIpConfig { get; set; }
		
		/// <summary>
		/// Represents the common parameters for all the hosts irrespective of their IP address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hostConfig")]
		public VmwareHostConfig HostConfig { get; set; }
		
		/// <summary>
		/// Required. All pods in the cluster are assigned an RFC1918 IPv4 address from these ranges. Only a single range is supported. This field cannot be changed after creation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="podAddressCidrBlocks")]
		public string[] PodAddressCidrBlocks { get; set; }
		
		/// <summary>
		/// Required. All services in the cluster are assigned an RFC1918 IPv4 address from these ranges. Only a single range is supported. This field cannot be changed after creation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceAddressCidrBlocks")]
		public string[] ServiceAddressCidrBlocks { get; set; }
		
		/// <summary>
		/// Represents the network configuration required for the VMware user clusters with Static IP configurations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="staticIpConfig")]
		public VmwareStaticIpConfig StaticIpConfig { get; set; }
		
		/// <summary>
		/// Output only. vcenter_network specifies vCenter network name. Inherited from the admin cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vcenterNetwork")]
		public string VcenterNetwork { get; set; }
	}
	
	/// <summary>
	/// Specifies control plane V2 config.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VmwareControlPlaneV2Config
	{
		
		/// <summary>
		/// Represents a collection of IP addresses to assign to nodes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="controlPlaneIpBlock")]
		public VmwareIpBlock ControlPlaneIpBlock { get; set; }
	}
	
	/// <summary>
	/// Specifies vSphere CSI components deployment config in the VMware user cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VmwareStorageConfig
	{
		
		/// <summary>
		/// Whether or not to deploy vSphere CSI components in the VMware user cluster. Enabled by default.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vsphereCsiDisabled")]
		public System.Nullable<System.Boolean> VsphereCsiDisabled { get; set; }
	}
	
	/// <summary>
	/// VmwareClusterUpgradePolicy defines the cluster upgrade policy.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VmwareClusterUpgradePolicy
	{
		
		/// <summary>
		/// Controls whether the upgrade applies to the control plane only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="controlPlaneOnly")]
		public System.Nullable<System.Boolean> ControlPlaneOnly { get; set; }
	}
	
	/// <summary>
	/// Represents configuration for the VMware VCenter for the user cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VmwareVCenterConfig
	{
		
		/// <summary>
		/// Output only. The vCenter IP address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address")]
		public string Address { get; set; }
		
		/// <summary>
		/// Contains the vCenter CA certificate public key for SSL verification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="caCertData")]
		public string CaCertData { get; set; }
		
		/// <summary>
		/// The name of the vCenter cluster for the user cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cluster")]
		public string Cluster { get; set; }
		
		/// <summary>
		/// The name of the vCenter datacenter for the user cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="datacenter")]
		public string Datacenter { get; set; }
		
		/// <summary>
		/// The name of the vCenter datastore for the user cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="datastore")]
		public string Datastore { get; set; }
		
		/// <summary>
		/// The name of the vCenter folder for the user cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="folder")]
		public string Folder { get; set; }
		
		/// <summary>
		/// The name of the vCenter resource pool for the user cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourcePool")]
		public string ResourcePool { get; set; }
		
		/// <summary>
		/// The name of the vCenter storage policy for the user cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storagePolicyName")]
		public string StoragePolicyName { get; set; }
	}
	
	/// <summary>
	/// Response message for listing VMware node pools.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListVmwareNodePoolsResponse
	{
		
		/// <summary>
		/// A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// Locations that could not be reached.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unreachable")]
		public string[] Unreachable { get; set; }
		
		/// <summary>
		/// The node pools from the specified parent resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vmwareNodePools")]
		public VmwareNodePool[] VmwareNodePools { get; set; }
	}
	
	/// <summary>
	/// Resource VmwareNodePool represents a VMware node pool. ##
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VmwareNodePool
	{
		
		/// <summary>
		/// Annotations on the node pool. This field has the same restrictions as Kubernetes annotations. The total size of all keys and values combined is limited to 256k. Key can have 2 segments: prefix (optional) and name (required), separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="annotations")]
		public System.Collections.Generic.Dictionary<string, string> Annotations { get; set; }
		
		/// <summary>
		/// Parameters that describe the configuration of all nodes within a given node pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="config")]
		public VmwareNodeConfig Config { get; set; }
		
		/// <summary>
		/// Output only. The time at which this node pool was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// Output only. The time at which this node pool was deleted. If the resource is not deleted, this must be empty
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deleteTime")]
		public string DeleteTime { get; set; }
		
		/// <summary>
		/// The display name for the node pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding. Allows clients to perform consistent read-modify-writes through optimistic concurrency control.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// Immutable. The resource name of this node pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// NodePoolAutoscaling config for the NodePool to allow for the kubernetes to scale NodePool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodePoolAutoscaling")]
		public VmwareNodePoolAutoscalingConfig NodePoolAutoscaling { get; set; }
		
		/// <summary>
		/// Anthos version for the node pool. Defaults to the user cluster version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="onPremVersion")]
		public string OnPremVersion { get; set; }
		
		/// <summary>
		/// Output only. If set, there are currently changes in flight to the node pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reconciling")]
		public System.Nullable<System.Boolean> Reconciling { get; set; }
		
		/// <summary>
		/// Output only. The current state of the node pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public BareMetalAdminClusterState State { get; set; }
		
		/// <summary>
		/// ResourceStatus describes why a cluster or node pool has a certain status. (e.g., ERROR or DEGRADED).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ResourceStatus Status { get; set; }
		
		/// <summary>
		/// Output only. The unique identifier of the node pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uid")]
		public string Uid { get; set; }
		
		/// <summary>
		/// Output only. The time at which this node pool was last updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
	}
	
	/// <summary>
	/// Parameters that describe the configuration of all nodes within a given node pool.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VmwareNodeConfig
	{
		
		/// <summary>
		/// VMware disk size to be used during creation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bootDiskSizeGb")]
		public string BootDiskSizeGb { get; set; }
		
		/// <summary>
		/// The number of CPUs for each node in the node pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cpus")]
		public string Cpus { get; set; }
		
		/// <summary>
		/// Allow node pool traffic to be load balanced. Only works for clusters with MetalLB load balancers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableLoadBalancer")]
		public System.Nullable<System.Boolean> EnableLoadBalancer { get; set; }
		
		/// <summary>
		/// The OS image name in vCenter, only valid when using Windows.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="image")]
		public string Image { get; set; }
		
		/// <summary>
		/// Required. The OS image to be used for each node in a node pool. Currently `cos`, `ubuntu`, `ubuntu_containerd` and `windows` are supported.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageType")]
		public string ImageType { get; set; }
		
		/// <summary>
		/// The map of Kubernetes labels (key/value pairs) to be applied to each node. These will added in addition to any default label(s) that Kubernetes may apply to the node. In case of conflict in label keys, the applied set may differ depending on the Kubernetes version -- it's best to assume the behavior is undefined and conflicts should be avoided. For more information, including usage and the valid values, see: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// The megabytes of memory for each node in the node pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="memoryMb")]
		public string MemoryMb { get; set; }
		
		/// <summary>
		/// The number of nodes in the node pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="replicas")]
		public string Replicas { get; set; }
		
		/// <summary>
		/// The initial taints assigned to nodes of this node pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taints")]
		public NodeTaint[] Taints { get; set; }
		
		/// <summary>
		/// VmwareVsphereConfig represents configuration for the VMware VCenter for node pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vsphereConfig")]
		public VmwareVsphereConfig VsphereConfig { get; set; }
	}
	
	/// <summary>
	/// VmwareVsphereConfig represents configuration for the VMware VCenter for node pool.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VmwareVsphereConfig
	{
		
		/// <summary>
		/// The name of the vCenter datastore. Inherited from the user cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="datastore")]
		public string Datastore { get; set; }
		
		/// <summary>
		/// Vsphere host groups to apply to all VMs in the node pool
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hostGroups")]
		public string[] HostGroups { get; set; }
		
		/// <summary>
		/// Tags to apply to VMs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public VmwareVsphereTag[] Tags { get; set; }
	}
	
	/// <summary>
	/// VmwareVsphereTag describes a vSphere tag to be placed on VMs in the node pool. For more information, see https://docs.vmware.com/en/VMware-vSphere/7.0/com.vmware.vsphere.vcenterhost.doc/GUID-E8E854DD-AA97-4E0C-8419-CE84F93C4058.html
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VmwareVsphereTag
	{
		
		/// <summary>
		/// The Vsphere tag category.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="category")]
		public string Category { get; set; }
		
		/// <summary>
		/// The Vsphere tag name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tag")]
		public string Tag { get; set; }
	}
	
	/// <summary>
	/// NodePoolAutoscaling config for the NodePool to allow for the kubernetes to scale NodePool.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VmwareNodePoolAutoscalingConfig
	{
		
		/// <summary>
		/// Maximum number of replicas in the NodePool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxReplicas")]
		public System.Nullable<System.Int32> MaxReplicas { get; set; }
		
		/// <summary>
		/// Minimum number of replicas in the NodePool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minReplicas")]
		public System.Nullable<System.Int32> MinReplicas { get; set; }
	}
	
	/// <summary>
	/// Progress metric is (string, int|float|string) pair.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Metric
	{
		
		/// <summary>
		/// For metrics with floating point value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="doubleValue")]
		public System.Nullable<System.Double> DoubleValue { get; set; }
		
		/// <summary>
		/// For metrics with integer value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="intValue")]
		public string IntValue { get; set; }
		
		/// <summary>
		/// Required. The metric name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metric")]
		public System.Nullable<MetricMetric1> Metric1 { get; set; }
		
		/// <summary>
		/// For metrics with custom values (ratios, visual progress, etc.).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stringValue")]
		public string StringValue { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum MetricMetric1
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		METRIC_ID_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NODES_TOTAL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NODES_DRAINING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NODES_UPGRADING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NODES_PENDING_UPGRADE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NODES_UPGRADED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NODES_FAILED = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NODES_HEALTHY = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NODES_RECONCILING = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NODES_IN_MAINTENANCE = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PREFLIGHTS_COMPLETED = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PREFLIGHTS_RUNNING = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PREFLIGHTS_FAILED = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PREFLIGHTS_TOTAL = 13,
	}
	
	/// <summary>
	/// Represents the metadata of the long-running operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OperationMetadata
	{
		
		/// <summary>
		/// Output only. API version used to start the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apiVersion")]
		public string ApiVersion { get; set; }
		
		/// <summary>
		/// Output only. Denotes if the local managing cluster's control plane is currently disconnected. This is expected to occur temporarily during self-managed cluster upgrades.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="controlPlaneDisconnected")]
		public System.Nullable<System.Boolean> ControlPlaneDisconnected { get; set; }
		
		/// <summary>
		/// Output only. The time the operation was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// Output only. The time the operation finished running.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public string EndTime { get; set; }
		
		/// <summary>
		/// Information about operation progress. LINT.IfChange
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="progress")]
		public OperationProgress Progress { get; set; }
		
		/// <summary>
		/// Output only. Identifies whether the user has requested cancellation of the operation. Operations that have successfully been cancelled have [Operation.error] value with a [google.rpc.Status.code] of 1, corresponding to `Code.CANCELLED`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestedCancellation")]
		public System.Nullable<System.Boolean> RequestedCancellation { get; set; }
		
		/// <summary>
		/// Output only. Human-readable status of the operation, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statusMessage")]
		public string StatusMessage { get; set; }
		
		/// <summary>
		/// Output only. Server-defined resource path for the target of the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="target")]
		public string Target { get; set; }
		
		/// <summary>
		/// Output only. Type of operation being executed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<OperationMetadataType> Type { get; set; }
		
		/// <summary>
		/// Output only. Name of the verb executed by the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verb")]
		public string Verb { get; set; }
	}
	
	/// <summary>
	/// Information about operation progress. LINT.IfChange
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OperationProgress
	{
		
		/// <summary>
		/// The stages of the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stages")]
		public OperationStage[] Stages { get; set; }
	}
	
	/// <summary>
	/// Information about a particular stage of an operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OperationStage
	{
		
		/// <summary>
		/// Time the stage ended.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public string EndTime { get; set; }
		
		/// <summary>
		/// Progress metric bundle.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metrics")]
		public Metric[] Metrics { get; set; }
		
		/// <summary>
		/// The high-level stage of the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stage")]
		public System.Nullable<OperationStageStage> Stage { get; set; }
		
		/// <summary>
		/// Time the stage started.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public string StartTime { get; set; }
		
		/// <summary>
		/// Output only. State of the stage.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<OperationStageState> State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum OperationStageStage
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STAGE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PREFLIGHT_CHECK = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONFIGURE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEPLOY = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HEALTH_CHECK = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum OperationStageState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUNNING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCEEDED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum OperationMetadataType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPERATION_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPGRADE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PLATFORM_UPGRADE = 5,
	}
	
	/// <summary>
	/// An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members`, or principals, to a single `role`. Principals can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** ``` { "bindings": [ { "role": "roles/resourcemanager.organizationAdmin", "members": [ "user:mike@example.com", "group:admins@example.com", "domain:google.com", "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, { "role": "roles/resourcemanager.organizationViewer", "members": [ "user:eve@example.com" ], "condition": { "title": "expirable access", "description": "Does not grant access after Sep 2020", "expression": "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag": "BwWWja0YfJA=", "version": 3 } ``` **YAML example:** ``` bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') etag: BwWWja0YfJA= version: 3 ``` For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Policy
	{
		
		/// <summary>
		/// Associates a list of `members`, or principals, with a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one principal. The `bindings` in a `Policy` can refer to up to 1,500 principals; up to 250 of these principals can be Google groups. Each occurrence of a principal counts towards these limits. For example, if the `bindings` grant 50 different roles to `user:alice@example.com`, and not to any other principal, then you can add another 1,450 principals to the `bindings` in the `Policy`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bindings")]
		public Binding[] Bindings { get; set; }
		
		/// <summary>
		/// `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<System.Int32> Version { get; set; }
	}
	
	/// <summary>
	/// Response message for querying bare metal admin cluster version config.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class QueryBareMetalAdminVersionConfigResponse
	{
		
		/// <summary>
		/// List of available versions to install or to upgrade to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="versions")]
		public BareMetalVersionInfo[] Versions { get; set; }
	}
	
	/// <summary>
	/// Response message for querying bare metal admin cluster version config.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class QueryBareMetalVersionConfigResponse
	{
		
		/// <summary>
		/// List of available versions to install or to upgrade to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="versions")]
		public BareMetalVersionInfo[] Versions { get; set; }
	}
	
	/// <summary>
	/// Response message for querying VMware user cluster version config.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class QueryVmwareVersionConfigResponse
	{
		
		/// <summary>
		/// List of available versions to install or to upgrade to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="versions")]
		public VmwareVersionInfo[] Versions { get; set; }
	}
	
	/// <summary>
	/// Contains information about a specific Anthos on VMware version.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VmwareVersionInfo
	{
		
		/// <summary>
		/// The list of upgrade dependencies for this version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dependencies")]
		public UpgradeDependency[] Dependencies { get; set; }
		
		/// <summary>
		/// If set, the cluster dependencies (e.g. the admin cluster, other user clusters managed by the same admin cluster) must be upgraded before this version can be installed or upgraded to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hasDependencies")]
		public System.Nullable<System.Boolean> HasDependencies { get; set; }
		
		/// <summary>
		/// If set, the version is installed in the admin cluster. Otherwise, the version bundle must be downloaded and installed before a user cluster can be created at or upgraded to this version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isInstalled")]
		public System.Nullable<System.Boolean> IsInstalled { get; set; }
		
		/// <summary>
		/// Version number e.g. 1.13.1-gke.1000.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	/// <summary>
	/// Request message for `SetIamPolicy` method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SetIamPolicyRequest
	{
		
		/// <summary>
		/// An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members`, or principals, to a single `role`. Principals can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** ``` { "bindings": [ { "role": "roles/resourcemanager.organizationAdmin", "members": [ "user:mike@example.com", "group:admins@example.com", "domain:google.com", "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, { "role": "roles/resourcemanager.organizationViewer", "members": [ "user:eve@example.com" ], "condition": { "title": "expirable access", "description": "Does not grant access after Sep 2020", "expression": "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag": "BwWWja0YfJA=", "version": 3 } ``` **YAML example:** ``` bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') etag: BwWWja0YfJA= version: 3 ``` For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="policy")]
		public Policy Policy { get; set; }
	}
	
	/// <summary>
	/// Request message for `TestIamPermissions` method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TestIamPermissionsRequest
	{
		
		/// <summary>
		/// The set of permissions to check for the `resource`. Permissions with wildcards (such as `*` or `storage.*`) are not allowed. For more information see [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="permissions")]
		public string[] Permissions { get; set; }
	}
	
	/// <summary>
	/// Response message for `TestIamPermissions` method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TestIamPermissionsResponse
	{
		
		/// <summary>
		/// A subset of `TestPermissionsRequest.permissions` that the caller is allowed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="permissions")]
		public string[] Permissions { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Deletes a single VMware node pool.
		/// Gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_delete v1/{name}
		/// </summary>
		/// <param name="name">Required. The name of the node pool to delete. Format: projects/{project}/locations/{location}/vmwareClusters/{cluster}/vmwareNodePools/{nodepool}</param>
		/// <param name="allowMissing">If set to true, and the VMware node pool is not found, the request will succeed but no action will be taken on the server and return a completed LRO.</param>
		/// <param name="etag">The current etag of the VmwareNodePool. If an etag is provided and does not match the current etag of the node pool, deletion will be blocked and an ABORTED error will be returned.</param>
		/// <param name="ignoreErrors">If set to true, the deletion of a VMware node pool resource will succeed even if errors occur during deletion. This parameter can be used when you want to delete GCP's node pool resource and you've already deleted the on-prem admin cluster that hosted your node pool. WARNING: Using this parameter when your user cluster still exists may result in a deleted GCP node pool but an existing on-prem node pool.</param>
		/// <param name="validateOnly">If set, only validate the request, but do not actually delete the node pool.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_deleteAsync(string name, bool allowMissing, string etag, bool ignoreErrors, bool validateOnly, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&allowMissing="+allowMissing+"&etag=" + (etag==null? "" : System.Uri.EscapeDataString(etag))+"&ignoreErrors="+ignoreErrors+"&validateOnly="+validateOnly;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
		/// Gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_operations_get v1/{name}
		/// </summary>
		/// <param name="name">The name of the operation resource.</param>
		/// <param name="view">View for VMware node pool. When `BASIC` is specified, only the node pool resource name is returned. The default/unset value `NODE_POOL_VIEW_UNSPECIFIED` is the same as `FULL', which returns the complete node pool configuration details.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_operations_getAsync(string name, Gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_operations_getView view, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&view=" + view;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the parameters of a single VMware node pool.
		/// Gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_patch v1/{name}
		/// </summary>
		/// <param name="name">Immutable. The resource name of this node pool.</param>
		/// <param name="updateMask">Required. Field mask is used to specify the fields to be overwritten in the VMwareNodePool resource by the update. The fields specified in the update_mask are relative to the resource, not the full request. A field will be overwritten if it is in the mask. If the user does not provide a mask then all populated fields in the VMwareNodePool message will be updated. Empty fields will be ignored unless a field mask is used.</param>
		/// <param name="validateOnly">Validate the request without actually doing any updates.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_patchAsync(string name, string updateMask, bool validateOnly, VmwareNodePool requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&updateMask=" + (updateMask==null? "" : System.Uri.EscapeDataString(updateMask))+"&validateOnly="+validateOnly;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists information about the supported locations for this service.
		/// Gkeonprem_projects_locations_list v1/{name}/locations
		/// </summary>
		/// <param name="name">The resource that owns the locations collection, if applicable.</param>
		/// <param name="filter">A filter to narrow down results to a preferred subset. The filtering language accepts strings like `"displayName=tokyo"`, and is documented in more detail in [AIP-160](https://google.aip.dev/160).</param>
		/// <param name="pageSize">The maximum number of results to return. If not set, the service selects a default.</param>
		/// <param name="pageToken">A page token received from the `next_page_token` field in the response. Send that page token to receive the subsequent page.</param>
		/// <returns>Successful response</returns>
		public async Task<ListLocationsResponse> Gkeonprem_projects_locations_listAsync(string name, string filter, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/locations&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListLocationsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
		/// Gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_operations_list v1/{name}/operations
		/// </summary>
		/// <param name="name">The name of the operation's parent resource.</param>
		/// <param name="filter">The standard list filter.</param>
		/// <param name="pageSize">The standard list page size.</param>
		/// <param name="pageToken">The standard list page token.</param>
		/// <returns>Successful response</returns>
		public async Task<ListOperationsResponse> Gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_operations_listAsync(string name, string filter, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/operations&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListOperationsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
		/// Gkeonprem_projects_locations_operations_cancel v1/{name}:cancel
		/// </summary>
		/// <param name="name">The name of the operation resource to be cancelled.</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Gkeonprem_projects_locations_operations_cancelAsync(string name, CancelOperationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":cancel";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Empty>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Unenrolls a VMware node pool to Anthos On-Prem API
		/// Gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_unenroll v1/{name}:unenroll
		/// </summary>
		/// <param name="name">Required. The name of the node pool to unenroll. Format: projects/{project}/locations/{location}/vmwareClusters/{cluster}/vmwareNodePools/{nodepool}</param>
		/// <param name="allowMissing">If set to true, and the VMware node pool is not found, the request will succeed but no action will be taken on the server and return a completed LRO.</param>
		/// <param name="etag">The current etag of the VMware node pool. If an etag is provided and does not match the current etag of node pool, deletion will be blocked and an ABORTED error will be returned.</param>
		/// <param name="validateOnly">If set, only validate the request, but do not actually unenroll the node pool.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_unenrollAsync(string name, bool allowMissing, string etag, bool validateOnly, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":unenroll&allowMissing="+allowMissing+"&etag=" + (etag==null? "" : System.Uri.EscapeDataString(etag))+"&validateOnly="+validateOnly;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists bare metal admin clusters in a given project and location.
		/// Gkeonprem_projects_locations_bareMetalAdminClusters_list v1/{parent}/bareMetalAdminClusters
		/// </summary>
		/// <param name="parent">Required. The parent of the project and location where the clusters are listed in. Format: "projects/{project}/locations/{location}"</param>
		/// <param name="pageSize">Requested page size. Server may return fewer items than requested. If unspecified, at most 50 clusters will be returned. The maximum value is 1000; values above 1000 will be coerced to 1000.</param>
		/// <param name="pageToken">A token identifying a page of results the server should return.</param>
		/// <param name="view">View for bare metal admin clusters. When `BASIC` is specified, only the admin cluster resource name and membership are returned. The default/unset value `CLUSTER_VIEW_UNSPECIFIED` is the same as `FULL', which returns the complete admin cluster configuration details.</param>
		/// <returns>Successful response</returns>
		public async Task<ListBareMetalAdminClustersResponse> Gkeonprem_projects_locations_bareMetalAdminClusters_listAsync(string parent, int pageSize, string pageToken, Gkeonprem_projects_locations_bareMetalAdminClusters_listView view, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/bareMetalAdminClusters&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&view=" + view;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListBareMetalAdminClustersResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new bare metal admin cluster in a given project and location. The API needs to be combined with creating a bootstrap cluster to work. See: https://cloud.google.com/anthos/clusters/docs/bare-metal/latest/installing/creating-clusters/create-admin-cluster-api#prepare_bootstrap_environment
		/// Gkeonprem_projects_locations_bareMetalAdminClusters_create v1/{parent}/bareMetalAdminClusters
		/// </summary>
		/// <param name="parent">Required. The parent of the project and location where the cluster is created in. Format: "projects/{project}/locations/{location}"</param>
		/// <param name="bareMetalAdminClusterId">Required. User provided identifier that is used as part of the resource name; must conform to RFC-1034 and additionally restrict to lower-cased letters. This comes out roughly to: /^a-z+[a-z0-9]$/</param>
		/// <param name="validateOnly">Validate the request without actually doing any updates.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Gkeonprem_projects_locations_bareMetalAdminClusters_createAsync(string parent, string bareMetalAdminClusterId, bool validateOnly, BareMetalAdminCluster requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/bareMetalAdminClusters&bareMetalAdminClusterId=" + (bareMetalAdminClusterId==null? "" : System.Uri.EscapeDataString(bareMetalAdminClusterId))+"&validateOnly="+validateOnly;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Enrolls an existing bare metal admin cluster to the Anthos On-Prem API within a given project and location. Through enrollment, an existing admin cluster will become Anthos On-Prem API managed. The corresponding GCP resources will be created and all future modifications to the cluster will be expected to be performed through the API.
		/// Gkeonprem_projects_locations_bareMetalAdminClusters_enroll v1/{parent}/bareMetalAdminClusters:enroll
		/// </summary>
		/// <param name="parent">Required. The parent of the project and location where the cluster is enrolled in. Format: "projects/{project}/locations/{location}"</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Gkeonprem_projects_locations_bareMetalAdminClusters_enrollAsync(string parent, EnrollBareMetalAdminClusterRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/bareMetalAdminClusters:enroll";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Queries the bare metal admin cluster version config.
		/// Gkeonprem_projects_locations_bareMetalAdminClusters_queryVersionConfig v1/{parent}/bareMetalAdminClusters:queryVersionConfig
		/// </summary>
		/// <param name="parent">Required. The parent of the project and location to query for version config. Format: "projects/{project}/locations/{location}"</param>
		/// <param name="upgradeConfig_clusterName">The admin cluster resource name. This is the full resource name of the admin cluster resource. Format: "projects/{project}/locations/{location}/bareMetalAdminClusters/{bare_metal_admin_cluster}"</param>
		/// <returns>Successful response</returns>
		public async Task<QueryBareMetalAdminVersionConfigResponse> Gkeonprem_projects_locations_bareMetalAdminClusters_queryVersionConfigAsync(string parent, string upgradeConfig_clusterName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/bareMetalAdminClusters:queryVersionConfig&upgradeConfig.clusterName=" + (upgradeConfig_clusterName==null? "" : System.Uri.EscapeDataString(upgradeConfig_clusterName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<QueryBareMetalAdminVersionConfigResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists bare metal clusters in a given project and location.
		/// Gkeonprem_projects_locations_bareMetalClusters_list v1/{parent}/bareMetalClusters
		/// </summary>
		/// <param name="parent">Required. The parent of the project and location where the clusters are listed in. Format: "projects/{project}/locations/{location}"</param>
		/// <param name="filter">A resource filtering expression following https://google.aip.dev/160. When non-empty, only resource's whose attributes field matches the filter are returned.</param>
		/// <param name="pageSize">Requested page size. Server may return fewer items than requested. If unspecified, at most 50 clusters will be returned. The maximum value is 1000; values above 1000 will be coerced to 1000.</param>
		/// <param name="pageToken">A token identifying a page of results the server should return.</param>
		/// <param name="view">View for bare metal Clusters. When `BASIC` is specified, only the cluster resource name and admin cluster membership are returned. The default/unset value `CLUSTER_VIEW_UNSPECIFIED` is the same as `FULL', which returns the complete cluster configuration details.</param>
		/// <returns>Successful response</returns>
		public async Task<ListBareMetalClustersResponse> Gkeonprem_projects_locations_bareMetalClusters_listAsync(string parent, string filter, int pageSize, string pageToken, Gkeonprem_projects_locations_bareMetalAdminClusters_listView view, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/bareMetalClusters&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&view=" + view;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListBareMetalClustersResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new bare metal cluster in a given project and location.
		/// Gkeonprem_projects_locations_bareMetalClusters_create v1/{parent}/bareMetalClusters
		/// </summary>
		/// <param name="parent">Required. The parent of the project and location where the cluster is created in. Format: "projects/{project}/locations/{location}"</param>
		/// <param name="bareMetalClusterId">Required. User provided identifier that is used as part of the resource name; must conform to RFC-1034 and additionally restrict to lower-cased letters. This comes out roughly to: /^a-z+[a-z0-9]$/</param>
		/// <param name="validateOnly">Validate the request without actually doing any updates.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Gkeonprem_projects_locations_bareMetalClusters_createAsync(string parent, string bareMetalClusterId, bool validateOnly, BareMetalCluster requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/bareMetalClusters&bareMetalClusterId=" + (bareMetalClusterId==null? "" : System.Uri.EscapeDataString(bareMetalClusterId))+"&validateOnly="+validateOnly;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Enrolls an existing bare metal user cluster and its node pools to the Anthos On-Prem API within a given project and location. Through enrollment, an existing cluster will become Anthos On-Prem API managed. The corresponding GCP resources will be created and all future modifications to the cluster and/or its node pools will be expected to be performed through the API.
		/// Gkeonprem_projects_locations_bareMetalClusters_enroll v1/{parent}/bareMetalClusters:enroll
		/// </summary>
		/// <param name="parent">Required. The parent of the project and location where the cluster is enrolled in. Format: "projects/{project}/locations/{location}"</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Gkeonprem_projects_locations_bareMetalClusters_enrollAsync(string parent, EnrollBareMetalClusterRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/bareMetalClusters:enroll";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Queries the bare metal user cluster version config.
		/// Gkeonprem_projects_locations_bareMetalClusters_queryVersionConfig v1/{parent}/bareMetalClusters:queryVersionConfig
		/// </summary>
		/// <param name="parent">Required. The parent of the project and location to query for version config. Format: "projects/{project}/locations/{location}"</param>
		/// <param name="createConfig_adminClusterMembership">The admin cluster membership. This is the full resource name of the admin cluster's fleet membership. Format: "projects/{project}/locations/{location}/memberships/{membership}"</param>
		/// <param name="createConfig_adminClusterName">The admin cluster resource name. This is the full resource name of the admin cluster resource. Format: "projects/{project}/locations/{location}/bareMetalAdminClusters/{bare_metal_admin_cluster}"</param>
		/// <param name="upgradeConfig_clusterName">The user cluster resource name. This is the full resource name of the user cluster resource. Format: "projects/{project}/locations/{location}/bareMetalClusters/{bare_metal_cluster}"</param>
		/// <returns>Successful response</returns>
		public async Task<QueryBareMetalVersionConfigResponse> Gkeonprem_projects_locations_bareMetalClusters_queryVersionConfigAsync(string parent, string createConfig_adminClusterMembership, string createConfig_adminClusterName, string upgradeConfig_clusterName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/bareMetalClusters:queryVersionConfig&createConfig.adminClusterMembership=" + (createConfig_adminClusterMembership==null? "" : System.Uri.EscapeDataString(createConfig_adminClusterMembership))+"&createConfig.adminClusterName=" + (createConfig_adminClusterName==null? "" : System.Uri.EscapeDataString(createConfig_adminClusterName))+"&upgradeConfig.clusterName=" + (upgradeConfig_clusterName==null? "" : System.Uri.EscapeDataString(upgradeConfig_clusterName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<QueryBareMetalVersionConfigResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists bare metal node pools in a given project, location and bare metal cluster.
		/// Gkeonprem_projects_locations_bareMetalClusters_bareMetalNodePools_list v1/{parent}/bareMetalNodePools
		/// </summary>
		/// <param name="parent">Required. The parent, which owns this collection of node pools. Format: projects/{project}/locations/{location}/bareMetalClusters/{bareMetalCluster}</param>
		/// <param name="pageSize">The maximum number of node pools to return. The service may return fewer than this value. If unspecified, at most 50 node pools will be returned. The maximum value is 1000; values above 1000 will be coerced to 1000.</param>
		/// <param name="pageToken">A page token, received from a previous `ListBareMetalNodePools` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListBareMetalNodePools` must match the call that provided the page token.</param>
		/// <param name="view">View for bare metal node pools. When `BASIC` is specified, only the node pool resource name is returned. The default/unset value `NODE_POOL_VIEW_UNSPECIFIED` is the same as `FULL', which returns the complete node pool configuration details.</param>
		/// <returns>Successful response</returns>
		public async Task<ListBareMetalNodePoolsResponse> Gkeonprem_projects_locations_bareMetalClusters_bareMetalNodePools_listAsync(string parent, int pageSize, string pageToken, Gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_operations_getView view, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/bareMetalNodePools&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&view=" + view;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListBareMetalNodePoolsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new bare metal node pool in a given project, location and Bare Metal cluster.
		/// Gkeonprem_projects_locations_bareMetalClusters_bareMetalNodePools_create v1/{parent}/bareMetalNodePools
		/// </summary>
		/// <param name="parent">Required. The parent resource where this node pool will be created. projects/{project}/locations/{location}/bareMetalClusters/{cluster}</param>
		/// <param name="bareMetalNodePoolId">The ID to use for the node pool, which will become the final component of the node pool's resource name. This value must be up to 63 characters, and valid characters are /a-z-/. The value must not be permitted to be a UUID (or UUID-like: anything matching /^[0-9a-f]{8}(-[0-9a-f]{4}){3}-[0-9a-f]{12}$/i).</param>
		/// <param name="validateOnly">If set, only validate the request, but do not actually create the node pool.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Gkeonprem_projects_locations_bareMetalClusters_bareMetalNodePools_createAsync(string parent, string bareMetalNodePoolId, bool validateOnly, BareMetalNodePool requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/bareMetalNodePools&bareMetalNodePoolId=" + (bareMetalNodePoolId==null? "" : System.Uri.EscapeDataString(bareMetalNodePoolId))+"&validateOnly="+validateOnly;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Enrolls an existing bare metal node pool to the Anthos On-Prem API within a given project and location. Through enrollment, an existing node pool will become Anthos On-Prem API managed. The corresponding GCP resources will be created.
		/// Gkeonprem_projects_locations_bareMetalClusters_bareMetalNodePools_enroll v1/{parent}/bareMetalNodePools:enroll
		/// </summary>
		/// <param name="parent">Required. The parent resource where this node pool will be created. projects/{project}/locations/{location}/bareMetalClusters/{cluster}</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Gkeonprem_projects_locations_bareMetalClusters_bareMetalNodePools_enrollAsync(string parent, EnrollBareMetalNodePoolRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/bareMetalNodePools:enroll";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists VMware admin clusters in a given project and location.
		/// Gkeonprem_projects_locations_vmwareAdminClusters_list v1/{parent}/vmwareAdminClusters
		/// </summary>
		/// <param name="parent">Required. The parent of the project and location where the clusters are listed in. Format: "projects/{project}/locations/{location}"</param>
		/// <param name="pageSize">Requested page size. Server may return fewer items than requested. If unspecified, at most 50 clusters will be returned. The maximum value is 1000; values above 1000 will be coerced to 1000.</param>
		/// <param name="pageToken">A token identifying a page of results the server should return.</param>
		/// <param name="view">View for VMware admin clusters. When `BASIC` is specified, only the admin cluster resource name and membership are returned. The default/unset value `CLUSTER_VIEW_UNSPECIFIED` is the same as `FULL', which returns the complete admin cluster configuration details.</param>
		/// <returns>Successful response</returns>
		public async Task<ListVmwareAdminClustersResponse> Gkeonprem_projects_locations_vmwareAdminClusters_listAsync(string parent, int pageSize, string pageToken, Gkeonprem_projects_locations_bareMetalAdminClusters_listView view, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/vmwareAdminClusters&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&view=" + view;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListVmwareAdminClustersResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Enrolls an existing VMware admin cluster to the Anthos On-Prem API within a given project and location. Through enrollment, an existing admin cluster will become Anthos On-Prem API managed. The corresponding GCP resources will be created and all future modifications to the cluster will be expected to be performed through the API.
		/// Gkeonprem_projects_locations_vmwareAdminClusters_enroll v1/{parent}/vmwareAdminClusters:enroll
		/// </summary>
		/// <param name="parent">Required. The parent of the project and location where the cluster is enrolled in. Format: "projects/{project}/locations/{location}"</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Gkeonprem_projects_locations_vmwareAdminClusters_enrollAsync(string parent, EnrollVmwareAdminClusterRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/vmwareAdminClusters:enroll";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists VMware Clusters in a given project and location.
		/// Gkeonprem_projects_locations_vmwareClusters_list v1/{parent}/vmwareClusters
		/// </summary>
		/// <param name="parent">Required. The parent of the project and location where the clusters are listed in. Format: "projects/{project}/locations/{location}"</param>
		/// <param name="filter">A resource filtering expression following https://google.aip.dev/160. When non-empty, only resource's whose attributes field matches the filter are returned.</param>
		/// <param name="pageSize">Requested page size. Server may return fewer items than requested. If unspecified, at most 50 clusters will be returned. The maximum value is 1000; values above 1000 will be coerced to 1000.</param>
		/// <param name="pageToken">A token identifying a page of results the server should return.</param>
		/// <param name="view">View for VMware clusters. When `BASIC` is specified, only the cluster resource name and admin cluster membership are returned. The default/unset value `CLUSTER_VIEW_UNSPECIFIED` is the same as `FULL', which returns the complete cluster configuration details.</param>
		/// <returns>Successful response</returns>
		public async Task<ListVmwareClustersResponse> Gkeonprem_projects_locations_vmwareClusters_listAsync(string parent, string filter, int pageSize, string pageToken, Gkeonprem_projects_locations_bareMetalAdminClusters_listView view, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/vmwareClusters&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&view=" + view;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListVmwareClustersResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new VMware user cluster in a given project and location.
		/// Gkeonprem_projects_locations_vmwareClusters_create v1/{parent}/vmwareClusters
		/// </summary>
		/// <param name="parent">Required. The parent of the project and location where this cluster is created in. Format: "projects/{project}/locations/{location}"</param>
		/// <param name="validateOnly">Validate the request without actually doing any updates.</param>
		/// <param name="vmwareClusterId">User provided identifier that is used as part of the resource name; This value must be up to 40 characters and follow RFC-1123 (https://tools.ietf.org/html/rfc1123) format.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Gkeonprem_projects_locations_vmwareClusters_createAsync(string parent, bool validateOnly, string vmwareClusterId, VmwareCluster requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/vmwareClusters&validateOnly="+validateOnly+"&vmwareClusterId=" + (vmwareClusterId==null? "" : System.Uri.EscapeDataString(vmwareClusterId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Enrolls an existing VMware user cluster and its node pools to the Anthos On-Prem API within a given project and location. Through enrollment, an existing cluster will become Anthos On-Prem API managed. The corresponding GCP resources will be created and all future modifications to the cluster and/or its node pools will be expected to be performed through the API.
		/// Gkeonprem_projects_locations_vmwareClusters_enroll v1/{parent}/vmwareClusters:enroll
		/// </summary>
		/// <param name="parent">Required. The parent of the project and location where the cluster is Enrolled in. Format: "projects/{project}/locations/{location}"</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Gkeonprem_projects_locations_vmwareClusters_enrollAsync(string parent, EnrollVmwareClusterRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/vmwareClusters:enroll";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Queries the VMware user cluster version config.
		/// Gkeonprem_projects_locations_vmwareClusters_queryVersionConfig v1/{parent}/vmwareClusters:queryVersionConfig
		/// </summary>
		/// <param name="parent">Required. The parent of the project and location to query for version config. Format: "projects/{project}/locations/{location}"</param>
		/// <param name="createConfig_adminClusterMembership">The admin cluster membership. This is the full resource name of the admin cluster's fleet membership. Format: "projects/{project}/locations/{location}/memberships/{membership}"</param>
		/// <param name="createConfig_adminClusterName">The admin cluster resource name. This is the full resource name of the admin cluster resource. Format: "projects/{project}/locations/{location}/vmwareAdminClusters/{vmware_admin_cluster}"</param>
		/// <param name="upgradeConfig_clusterName">The user cluster resource name. This is the full resource name of the user cluster resource. Format: "projects/{project}/locations/{location}/vmwareClusters/{vmware_cluster}"</param>
		/// <returns>Successful response</returns>
		public async Task<QueryVmwareVersionConfigResponse> Gkeonprem_projects_locations_vmwareClusters_queryVersionConfigAsync(string parent, string createConfig_adminClusterMembership, string createConfig_adminClusterName, string upgradeConfig_clusterName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/vmwareClusters:queryVersionConfig&createConfig.adminClusterMembership=" + (createConfig_adminClusterMembership==null? "" : System.Uri.EscapeDataString(createConfig_adminClusterMembership))+"&createConfig.adminClusterName=" + (createConfig_adminClusterName==null? "" : System.Uri.EscapeDataString(createConfig_adminClusterName))+"&upgradeConfig.clusterName=" + (upgradeConfig_clusterName==null? "" : System.Uri.EscapeDataString(upgradeConfig_clusterName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<QueryVmwareVersionConfigResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists VMware node pools in a given project, location and VMWare cluster.
		/// Gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_list v1/{parent}/vmwareNodePools
		/// </summary>
		/// <param name="parent">Required. The parent, which owns this collection of node pools. Format: projects/{project}/locations/{location}/vmwareClusters/{vmwareCluster}</param>
		/// <param name="pageSize">The maximum number of node pools to return. The service may return fewer than this value. If unspecified, at most 50 node pools will be returned. The maximum value is 1000; values above 1000 will be coerced to 1000.</param>
		/// <param name="pageToken">A page token, received from a previous `ListVmwareNodePools` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListVmwareNodePools` must match the call that provided the page token.</param>
		/// <param name="view">View for VMware node pools. When `BASIC` is specified, only the node pool resource name is returned. The default/unset value `NODE_POOL_VIEW_UNSPECIFIED` is the same as `FULL', which returns the complete node pool configuration details.</param>
		/// <returns>Successful response</returns>
		public async Task<ListVmwareNodePoolsResponse> Gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_listAsync(string parent, int pageSize, string pageToken, Gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_operations_getView view, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/vmwareNodePools&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&view=" + view;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListVmwareNodePoolsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new VMware node pool in a given project, location and VMWare cluster.
		/// Gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_create v1/{parent}/vmwareNodePools
		/// </summary>
		/// <param name="parent">Required. The parent resource where this node pool will be created. projects/{project}/locations/{location}/vmwareClusters/{cluster}</param>
		/// <param name="validateOnly">If set, only validate the request, but do not actually create the node pool.</param>
		/// <param name="vmwareNodePoolId">The ID to use for the node pool, which will become the final component of the node pool's resource name. This value must be up to 40 characters and follow RFC-1123 (https://tools.ietf.org/html/rfc1123) format. The value must not be permitted to be a UUID (or UUID-like: anything matching /^[0-9a-f]{8}(-[0-9a-f]{4}){3}-[0-9a-f]{12}$/i).</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_createAsync(string parent, bool validateOnly, string vmwareNodePoolId, VmwareNodePool requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/vmwareNodePools&validateOnly="+validateOnly+"&vmwareNodePoolId=" + (vmwareNodePoolId==null? "" : System.Uri.EscapeDataString(vmwareNodePoolId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Enrolls a VMware node pool to Anthos On-Prem API
		/// Gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_enroll v1/{parent}/vmwareNodePools:enroll
		/// </summary>
		/// <param name="parent">Required. The parent resource where the node pool is enrolled in.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_enrollAsync(string parent, EnrollVmwareNodePoolRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/vmwareNodePools:enroll";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
		/// Gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_getIamPolicy v1/{resource}:getIamPolicy
		/// </summary>
		/// <param name="resource">REQUIRED: The resource for which the policy is being requested. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field.</param>
		/// <param name="options_requestedPolicyVersion">Optional. The maximum policy version that will be used to format the policy. Valid values are 0, 1, and 3. Requests specifying an invalid value will be rejected. Requests for policies with any conditional role bindings must specify version 3. Policies with no conditional role bindings may specify any valid value or leave the field unset. The policy in the response might use the policy version that you specified, or it might use a lower policy version. For example, if you specify version 3, but the policy has no conditional role bindings, the response uses version 1. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).</param>
		/// <returns>Successful response</returns>
		public async Task<Policy> Gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_getIamPolicyAsync(string resource, int options_requestedPolicyVersion, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (resource==null? "" : System.Uri.EscapeDataString(resource))+":getIamPolicy&options.requestedPolicyVersion="+options_requestedPolicyVersion;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Policy>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
		/// Gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_setIamPolicy v1/{resource}:setIamPolicy
		/// </summary>
		/// <param name="resource">REQUIRED: The resource for which the policy is being specified. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field.</param>
		/// <returns>Successful response</returns>
		public async Task<Policy> Gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_setIamPolicyAsync(string resource, SetIamPolicyRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (resource==null? "" : System.Uri.EscapeDataString(resource))+":setIamPolicy";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Policy>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
		/// Gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_testIamPermissions v1/{resource}:testIamPermissions
		/// </summary>
		/// <param name="resource">REQUIRED: The resource for which the policy detail is being requested. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field.</param>
		/// <returns>Successful response</returns>
		public async Task<TestIamPermissionsResponse> Gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_testIamPermissionsAsync(string resource, TestIamPermissionsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (resource==null? "" : System.Uri.EscapeDataString(resource))+":testIamPermissions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TestIamPermissionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
	
	public enum Gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_operations_getView
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NODE_POOL_VIEW_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BASIC = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FULL = 2,
	}
	
	public enum Gkeonprem_projects_locations_bareMetalAdminClusters_listView
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLUSTER_VIEW_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BASIC = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FULL = 2,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
