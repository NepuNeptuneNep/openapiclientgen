//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApplicationCharge
	{
		
		/// <summary>
		/// 課金ID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// 作成日時
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="make_date")]
		public System.Nullable<System.Int32> Make_date { get; set; }
		
		/// <summary>
		/// ポイント請求額(税抜)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="point")]
		public System.Nullable<System.Int32> Point { get; set; }
		
		/// <summary>
		/// 更新日時
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="update_date")]
		public System.Nullable<System.Int32> Update_date { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CartScriptTag
	{
		
		/// <summary>
		/// アカウントID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="account_id")]
		public string Account_id { get; set; }
		
		/// <summary>
		/// スクリプトタグID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// スクリプトファイルのハッシュ値（script tagのintegrity属性）
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="integrity")]
		public string Integrity { get; set; }
		
		/// <summary>
		/// 作成日時
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="make_date")]
		public System.Nullable<System.Int32> Make_date { get; set; }
		
		/// <summary>
		/// OAuthアプリケーションID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oauth_application_id")]
		public System.Nullable<System.Int32> Oauth_application_id { get; set; }
		
		/// <summary>
		/// スクリプトURL
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="src")]
		public string Src { get; set; }
		
		/// <summary>
		/// 更新日時
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="update_date")]
		public System.Nullable<System.Int32> Update_date { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InlineScriptTag
	{
		
		/// <summary>
		/// アカウントID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="account_id")]
		public string Account_id { get; set; }
		
		/// <summary>
		/// インラインスクリプトを出力するページ。
		///
		///- `all`: カートの途中のページと注文完了ページの両方
		///- `thanks_page`: 注文完了ページ
		///- `cart`: カートの途中のページ
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="display_scope")]
		public System.Nullable<InlineScriptTagDisplay_scope> Display_scope { get; set; }
		
		/// <summary>
		/// インラインスクリプトタグID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// 作成日時
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="make_date")]
		public System.Nullable<System.Int32> Make_date { get; set; }
		
		/// <summary>
		/// アプリID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oauth_application_id")]
		public System.Nullable<System.Int32> Oauth_application_id { get; set; }
		
		/// <summary>
		/// インラインスクリプト
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="script")]
		public string Script { get; set; }
		
		/// <summary>
		/// インラインスクリプトを実行するタイミング。
		///
		///- `object_builded`: JSオブジェクトの作成が完了した時
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trigger_event")]
		public System.Nullable<InlineScriptTagTrigger_event> Trigger_event { get; set; }
		
		/// <summary>
		/// 更新日時
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="update_date")]
		public System.Nullable<System.Int32> Update_date { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum InlineScriptTagDisplay_scope
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		all = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		thanks_page = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		cart = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum InlineScriptTagTrigger_event
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		object_builded = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ScriptTag
	{
		
		/// <summary>
		/// スクリプトを出力するページ。
		///
		///- `all`: ショップページと注文完了ページの両方
		///- `shop`: ショップページ
		///- `thanks_page`: 注文完了ページ
		///- `cart`: カートの途中のページ
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="display_scope")]
		public System.Nullable<ScriptTagDisplay_scope> Display_scope { get; set; }
		
		/// <summary>
		/// スクリプトタグID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// 作成日時
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="make_date")]
		public System.Nullable<System.Int32> Make_date { get; set; }
		
		/// <summary>
		/// スクリプトURL
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="src")]
		public string Src { get; set; }
		
		/// <summary>
		/// 更新日時
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="update_date")]
		public System.Nullable<System.Int32> Update_date { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ScriptTagDisplay_scope
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		all = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		shop = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		thanks_page = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		cart = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ShopScriptTag
	{
		
		/// <summary>
		/// アカウントID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="account_id")]
		public string Account_id { get; set; }
		
		/// <summary>
		/// スクリプトを出力するページ
		///- `shop`: ショップページ
		///- `thanks_page`: 注文完了ページ
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="display_scope")]
		public System.Nullable<ShopScriptTagDisplay_scope> Display_scope { get; set; }
		
		/// <summary>
		/// スクリプトタグID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// スクリプトファイルのハッシュ値（script tagのintegrity属性）
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="integrity")]
		public string Integrity { get; set; }
		
		/// <summary>
		/// 作成日時
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="make_date")]
		public System.Nullable<System.Int32> Make_date { get; set; }
		
		/// <summary>
		/// OAuthアプリケーションID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oauth_application_id")]
		public System.Nullable<System.Int32> Oauth_application_id { get; set; }
		
		/// <summary>
		/// スクリプトURL
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="src")]
		public string Src { get; set; }
		
		/// <summary>
		/// 更新日時
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="update_date")]
		public System.Nullable<System.Int32> Update_date { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ShopScriptTagDisplay_scope
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		shop = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		thanks_page = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UsageCharge
	{
		
		/// <summary>
		/// 従量課金発生理由
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// 従量課金ID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// 作成日時
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="make_date")]
		public System.Nullable<System.Int32> Make_date { get; set; }
		
		/// <summary>
		/// ポイント請求額(税抜)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="point")]
		public System.Nullable<System.Int32> Point { get; set; }
		
		/// <summary>
		/// 更新日時
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="update_date")]
		public System.Nullable<System.Int32> Update_date { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateScriptTagScriptTag
	{
		
		[System.Runtime.Serialization.DataMember(Name="script_tag")]
		public CreateScriptTagScriptTagScript_tag Script_tag { get; set; }
	}
	
	public class CreateScriptTagScriptTagScript_tag
	{
		
		/// <summary>
		/// スクリプトを出力するページ。
		///
		///- `all`: ショップページと注文完了ページの両方
		///- `shop`: ショップページ
		///- `thanks_page`: 注文完了ページ
		///- `cart`: カートの途中のページ
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="display_scope")]
		public ScriptTagDisplay_scope Display_scope { get; set; }
		
		/// <summary>
		/// スクリプトURL
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="src")]
		public string Src { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateShopScriptTagScriptTag
	{
		
		[System.Runtime.Serialization.DataMember(Name="script_tag")]
		public CreateShopScriptTagScriptTagScript_tag Script_tag { get; set; }
	}
	
	public class CreateShopScriptTagScriptTagScript_tag
	{
		
		/// <summary>
		/// スクリプトを出力するページ
		///- `shop`: ショップページ
		///- `thanks_page`: 注文完了ページ
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="display_scope")]
		public ShopScriptTagDisplay_scope Display_scope { get; set; }
		
		/// <summary>
		/// スクリプトのハッシュ値をBase64エンコードした値を設定します。この値はスクリプトタグのIntegrity属性値として利用されます。
		///詳しくは [サブリソース完全性 - Web セキュリティ | MDN](https://developer.mozilla.org/ja/docs/Web/Security/Subresource_Integrity) (外部サイト) をご覧ください。
		///※この値が正しく設定されない場合はブラウザがスクリプトの読み込みをブロックします。この場合、一般的なWebブラウザ(e.g. Google Chrome, Firefox)の開発者ツールのコンソールでエラーを確認できます。
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="integrity")]
		public string Integrity { get; set; }
		
		/// <summary>
		/// スクリプトURL
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="src")]
		public string Src { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// アプリ内課金データの作成
		/// 「アプリ内課金」はすでにインストール済みのアプリ上において、利用者が追加の買い切りによる課金によって新たなアプリ内の機能を提供される場合などに、利用者へ買い切りの課金分の請求を行うための課金形式です。
		/// 
		/// この課金はプラン課金の情報に紐付かないため、リクエストされたタイミングで課金データが作成されます。また、同一のアプリ内課金IDで同じ利用者へ複数回請求を行うことも可能です。
		/// 
		/// ただし、アプリの基本機能として提供しているサービスを利用した量やその頻度などに伴って毎月異なった額の請求を行うような課金については、プラン課金の「従量による課金」の機能を使って請求を行う必要があります。
		/// 
		/// PostApplicationCharge appstore/v1/application_charges.json
		/// </summary>
		public async Task PostApplicationChargeAsync(PostApplicationChargePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "appstore/v1/application_charges.json";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// アプリストアアプリのアンインストール
		/// このAPIは OAuth のアクセストークンに紐付くアプリケーションをショップから削除します。
		/// このAPIを利用した場合、ショップオーナーがアンインストールした場合と異なり、アンインストールフックは実行されません。
		/// 代わりにアンインストールフックで通知される情報は、このAPIのレスポンスに含まれています。
		/// 
		/// アンインストール時の注意点については、[アプリのアンインストール](https://app.shop-pro.jp/open_api#section/API/アプリのインストール)を参照して下さい。
		/// 
		/// DeleteInstallation appstore/v1/installation.json
		/// </summary>
		/// <returns>アンインストール成功</returns>
		public async Task<DeleteInstallationReturn> DeleteInstallationAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "appstore/v1/installation.json";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DeleteInstallationReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// 従量課金データの作成
		/// アプリ内で基本機能が利用された頻度に伴って毎月の請求が変動するようなアプリの場合は「従量課金」を使って利用者に変動分の請求を行うことができます。
		/// ※無料お試し期間中のショップに対しては従量課金データを作成できません。
		/// 
		/// CreateUsageCharge appstore/v1/recurring_application_charges/{recurringApplicationChargeId}/usage_charges.json
		/// </summary>
		/// <param name="recurringApplicationChargeId">課金契約ID</param>
		/// <param name="requestBody">従量課金データ</param>
		public async Task CreateUsageChargeAsync(string recurringApplicationChargeId, CreateUsageChargePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "appstore/v1/recurring_application_charges/"+ (recurringApplicationChargeId==null? "" : System.Uri.EscapeDataString(recurringApplicationChargeId))+"/usage_charges.json";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// スクリプトタグの取得
		/// GetShopScriptTags appstore/v1/script_tags.json
		/// </summary>
		public async Task<GetShopScriptTagsReturn> GetShopScriptTagsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "appstore/v1/script_tags.json";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetShopScriptTagsReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// スクリプトタグの作成
		/// CreateShopScriptTag appstore/v1/script_tags.json
		/// </summary>
		/// <param name="requestBody">作成するスクリプトタグの情報</param>
		public async Task<CreateShopScriptTagReturn> CreateShopScriptTagAsync(CreateShopScriptTagScriptTag requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "appstore/v1/script_tags.json";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CreateShopScriptTagReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// スクリプトタグの削除
		/// DeleteScriptTag appstore/v1/script_tags/{scriptTagId}.json
		/// </summary>
		/// <param name="scriptTagId">スクリプトタグID</param>
		public async Task DeleteScriptTagAsync(int scriptTagId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "appstore/v1/script_tags/"+scriptTagId+".json";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// スクリプトタグの取得
		/// GetShopScriptTag appstore/v1/script_tags/{scriptTagId}.json
		/// </summary>
		/// <param name="scriptTagId">スクリプトタグID</param>
		public async Task<GetShopScriptTagReturn> GetShopScriptTagAsync(int scriptTagId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "appstore/v1/script_tags/"+scriptTagId+".json";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetShopScriptTagReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// スクリプトタグの更新
		/// UpdateShopScriptTag appstore/v1/script_tags/{scriptTagId}.json
		/// </summary>
		/// <param name="scriptTagId">スクリプトタグID</param>
		/// <param name="requestBody">作成するスクリプトタグの情報</param>
		public async Task<UpdateShopScriptTagReturn> UpdateShopScriptTagAsync(int scriptTagId, CreateShopScriptTagScriptTag requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "appstore/v1/script_tags/"+scriptTagId+".json";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UpdateShopScriptTagReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// インラインスクリプトタグの取得
		/// GetInlineScriptTags v1/inline_script_tags.json
		/// </summary>
		public async Task<GetInlineScriptTagsReturn> GetInlineScriptTagsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/inline_script_tags.json";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetInlineScriptTagsReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// インラインスクリプトタグの登録
		/// CreateInlineScriptTag v1/inline_script_tags.json
		/// </summary>
		/// <param name="requestBody">作成するインラインスクリプトタグの情報</param>
		public async Task CreateInlineScriptTagAsync(CreateInlineScriptTagPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/inline_script_tags.json";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// インラインスクリプトタグの削除
		/// DeleteInlineScriptTag v1/inline_script_tags/{inlineScriptTagId}.json
		/// </summary>
		/// <param name="inlineScriptTagId">インラインスクリプトタグID</param>
		public async Task DeleteInlineScriptTagAsync(int inlineScriptTagId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/inline_script_tags/"+inlineScriptTagId+".json";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// インラインスクリプトタグの取得
		/// GetInlineScriptTag v1/inline_script_tags/{inlineScriptTagId}.json
		/// </summary>
		/// <param name="inlineScriptTagId">インラインスクリプトタグID</param>
		public async Task<GetInlineScriptTagReturn> GetInlineScriptTagAsync(int inlineScriptTagId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/inline_script_tags/"+inlineScriptTagId+".json";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetInlineScriptTagReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// インラインスクリプトタグの更新
		/// UpdateInlineScriptTag v1/inline_script_tags/{inlineScriptTagId}.json
		/// </summary>
		/// <param name="inlineScriptTagId">インラインスクリプトタグID</param>
		/// <param name="requestBody">更新するスクリプトタグの情報</param>
		public async Task<UpdateInlineScriptTagReturn> UpdateInlineScriptTagAsync(int inlineScriptTagId, UpdateInlineScriptTagPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/inline_script_tags/"+inlineScriptTagId+".json";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UpdateInlineScriptTagReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// スクリプトタグの取得
		/// GetScriptTags v1/script_tags.json
		/// </summary>
		public async Task<GetScriptTagsReturn> GetScriptTagsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/script_tags.json";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetScriptTagsReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// スクリプトタグの作成
		/// CreateScriptTag v1/script_tags.json
		/// </summary>
		/// <param name="requestBody">作成するスクリプトタグの情報</param>
		public async Task<CreateScriptTagReturn> CreateScriptTagAsync(CreateScriptTagScriptTag requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/script_tags.json";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CreateScriptTagReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// スクリプトタグの削除
		/// ScriptdeprecatedDeleteByScriptTagId v1/script_tags/{scriptTagId}.json
		/// </summary>
		/// <param name="scriptTagId">スクリプトタグID</param>
		public async Task ScriptdeprecatedDeleteByScriptTagIdAsync(int scriptTagId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/script_tags/"+scriptTagId+".json";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// スクリプトタグの取得
		/// GetScriptTag v1/script_tags/{scriptTagId}.json
		/// </summary>
		/// <param name="scriptTagId">スクリプトタグID</param>
		public async Task<GetScriptTagReturn> GetScriptTagAsync(int scriptTagId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/script_tags/"+scriptTagId+".json";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetScriptTagReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// スクリプトタグの更新
		/// UpdateScriptTag v1/script_tags/{scriptTagId}.json
		/// </summary>
		/// <param name="scriptTagId">スクリプトタグID</param>
		/// <param name="requestBody">作成するスクリプトタグの情報</param>
		public async Task<UpdateScriptTagReturn> UpdateScriptTagAsync(int scriptTagId, CreateScriptTagScriptTag requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/script_tags/"+scriptTagId+".json";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UpdateScriptTagReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
	
	public class PostApplicationChargePostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="application_charge")]
		public PostApplicationChargePostBodyApplication_charge Application_charge { get; set; }
	}
	
	public class PostApplicationChargePostBodyApplication_charge
	{
		
		/// <summary>
		/// アプリ内課金ID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="application_charge_source_id")]
		public string Application_charge_source_id { get; set; }
	}
	
	public class DeleteInstallationReturn
	{
		
		/// <summary>
		/// アンインストールしたショップオーナーのアカウントID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="account_id")]
		public string Account_id { get; set; }
		
		/// <summary>
		/// プラン課金ID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="application_charge_source_id")]
		public string Application_charge_source_id { get; set; }
		
		/// <summary>
		/// （買い切り以外の課金の場合）課金契約ID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recurring_application_charge_id")]
		public string Recurring_application_charge_id { get; set; }
		
		/// <summary>
		/// アンインストール日時
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uninstalled_at")]
		public System.Nullable<System.Int32> Uninstalled_at { get; set; }
		
		/// <summary>
		/// （従量課金の場合）従量課金アンインストール情報
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="usage_charge")]
		public DeleteInstallationReturnUsage_charge Usage_charge { get; set; }
	}
	
	public class DeleteInstallationReturnUsage_charge
	{
		
		/// <summary>
		/// アンインストール後に従量課金APIを利用いただくために必要な情報
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="api_token")]
		public string Api_token { get; set; }
		
		/// <summary>
		/// ポイント締め日
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="closing_on")]
		public System.Nullable<System.Int32> Closing_on { get; set; }
	}
	
	public class CreateUsageChargePostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="usage_charge")]
		public CreateUsageChargePostBodyUsage_charge Usage_charge { get; set; }
	}
	
	public class CreateUsageChargePostBodyUsage_charge
	{
		
		/// <summary>
		/// 従量課金の発生理由。使用可能文字は ASCII, JIS X 0208, JIS X 0201, JIS X 0212に限ります。（[デベロッパー](https://developer.shop-pro.jp) ページに掲載される各アプリの「従量課金」一覧で登録内容を確認できます。カラーミーショップ側がこのパラメータを参照して課金の内容を確認することがあります。）
		/// Required
		/// Max length: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string Description { get; set; }
		
		/// <summary>
		/// ポイント数（税抜）。100 円以上 100 万円以下が指定可能。このポイントに消費税を加算してショップオーナーに請求します。
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="point")]
		public int Point { get; set; }
	}
	
	public class GetShopScriptTagsReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="script_tags")]
		public GetShopScriptTagsReturnScript_tags[] GetShopScriptTagsReturnScript_tags { get; set; }
	}
	
	public class GetShopScriptTagsReturnScript_tags
	{
		
		/// <summary>
		/// アカウントID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="account_id")]
		public string Account_id { get; set; }
		
		/// <summary>
		/// スクリプトを出力するページ
		///- `shop`: ショップページ
		///- `thanks_page`: 注文完了ページ
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="display_scope")]
		public ShopScriptTagDisplay_scope Display_scope { get; set; }
		
		/// <summary>
		/// スクリプトタグID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// スクリプトファイルのハッシュ値（script tagのintegrity属性）
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="integrity")]
		public string Integrity { get; set; }
		
		/// <summary>
		/// 作成日時
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="make_date")]
		public System.Nullable<System.Int32> Make_date { get; set; }
		
		/// <summary>
		/// OAuthアプリケーションID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oauth_application_id")]
		public System.Nullable<System.Int32> Oauth_application_id { get; set; }
		
		/// <summary>
		/// スクリプトURL
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="src")]
		public string Src { get; set; }
		
		/// <summary>
		/// 更新日時
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="update_date")]
		public System.Nullable<System.Int32> Update_date { get; set; }
	}
	
	public class CreateShopScriptTagReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="script_tag")]
		public CreateShopScriptTagReturnScript_tag Script_tag { get; set; }
	}
	
	public class CreateShopScriptTagReturnScript_tag
	{
		
		/// <summary>
		/// アカウントID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="account_id")]
		public string Account_id { get; set; }
		
		/// <summary>
		/// スクリプトを出力するページ
		///- `shop`: ショップページ
		///- `thanks_page`: 注文完了ページ
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="display_scope")]
		public ShopScriptTagDisplay_scope Display_scope { get; set; }
		
		/// <summary>
		/// スクリプトタグID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// スクリプトファイルのハッシュ値（script tagのintegrity属性）
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="integrity")]
		public string Integrity { get; set; }
		
		/// <summary>
		/// 作成日時
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="make_date")]
		public System.Nullable<System.Int32> Make_date { get; set; }
		
		/// <summary>
		/// OAuthアプリケーションID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oauth_application_id")]
		public System.Nullable<System.Int32> Oauth_application_id { get; set; }
		
		/// <summary>
		/// スクリプトURL
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="src")]
		public string Src { get; set; }
		
		/// <summary>
		/// 更新日時
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="update_date")]
		public System.Nullable<System.Int32> Update_date { get; set; }
	}
	
	public class GetShopScriptTagReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="script_tag")]
		public GetShopScriptTagReturnScript_tag Script_tag { get; set; }
	}
	
	public class GetShopScriptTagReturnScript_tag
	{
		
		/// <summary>
		/// アカウントID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="account_id")]
		public string Account_id { get; set; }
		
		/// <summary>
		/// スクリプトを出力するページ
		///- `shop`: ショップページ
		///- `thanks_page`: 注文完了ページ
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="display_scope")]
		public ShopScriptTagDisplay_scope Display_scope { get; set; }
		
		/// <summary>
		/// スクリプトタグID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// スクリプトファイルのハッシュ値（script tagのintegrity属性）
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="integrity")]
		public string Integrity { get; set; }
		
		/// <summary>
		/// 作成日時
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="make_date")]
		public System.Nullable<System.Int32> Make_date { get; set; }
		
		/// <summary>
		/// OAuthアプリケーションID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oauth_application_id")]
		public System.Nullable<System.Int32> Oauth_application_id { get; set; }
		
		/// <summary>
		/// スクリプトURL
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="src")]
		public string Src { get; set; }
		
		/// <summary>
		/// 更新日時
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="update_date")]
		public System.Nullable<System.Int32> Update_date { get; set; }
	}
	
	public class UpdateShopScriptTagReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="script_tag")]
		public UpdateShopScriptTagReturnScript_tag Script_tag { get; set; }
	}
	
	public class UpdateShopScriptTagReturnScript_tag
	{
		
		/// <summary>
		/// アカウントID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="account_id")]
		public string Account_id { get; set; }
		
		/// <summary>
		/// スクリプトを出力するページ
		///- `shop`: ショップページ
		///- `thanks_page`: 注文完了ページ
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="display_scope")]
		public ShopScriptTagDisplay_scope Display_scope { get; set; }
		
		/// <summary>
		/// スクリプトタグID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// スクリプトファイルのハッシュ値（script tagのintegrity属性）
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="integrity")]
		public string Integrity { get; set; }
		
		/// <summary>
		/// 作成日時
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="make_date")]
		public System.Nullable<System.Int32> Make_date { get; set; }
		
		/// <summary>
		/// OAuthアプリケーションID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oauth_application_id")]
		public System.Nullable<System.Int32> Oauth_application_id { get; set; }
		
		/// <summary>
		/// スクリプトURL
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="src")]
		public string Src { get; set; }
		
		/// <summary>
		/// 更新日時
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="update_date")]
		public System.Nullable<System.Int32> Update_date { get; set; }
	}
	
	public class GetInlineScriptTagsReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="inline_script_tags")]
		public GetInlineScriptTagsReturnInline_script_tags[] GetInlineScriptTagsReturnInline_script_tags { get; set; }
	}
	
	public class GetInlineScriptTagsReturnInline_script_tags
	{
		
		/// <summary>
		/// アカウントID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="account_id")]
		public string Account_id { get; set; }
		
		/// <summary>
		/// インラインスクリプトを出力するページ。
		///
		///- `all`: カートの途中のページと注文完了ページの両方
		///- `thanks_page`: 注文完了ページ
		///- `cart`: カートの途中のページ
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="display_scope")]
		public InlineScriptTagDisplay_scope Display_scope { get; set; }
		
		/// <summary>
		/// インラインスクリプトタグID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// 作成日時
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="make_date")]
		public System.Nullable<System.Int32> Make_date { get; set; }
		
		/// <summary>
		/// アプリID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oauth_application_id")]
		public System.Nullable<System.Int32> Oauth_application_id { get; set; }
		
		/// <summary>
		/// インラインスクリプト
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="script")]
		public string Script { get; set; }
		
		/// <summary>
		/// インラインスクリプトを実行するタイミング。
		///
		///- `object_builded`: JSオブジェクトの作成が完了した時
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trigger_event")]
		public InlineScriptTagTrigger_event Trigger_event { get; set; }
		
		/// <summary>
		/// 更新日時
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="update_date")]
		public System.Nullable<System.Int32> Update_date { get; set; }
	}
	
	public class CreateInlineScriptTagPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="inline_script_tag")]
		public CreateInlineScriptTagPostBodyInline_script_tag Inline_script_tag { get; set; }
	}
	
	public class CreateInlineScriptTagPostBodyInline_script_tag
	{
		
		/// <summary>
		/// インラインスクリプトを出力するページ。
		///
		///- `all`: カートの途中のページと注文完了ページの両方
		///- `thanks_page`: 注文完了ページ
		///- `cart`: カートの途中のページ
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="display_scope")]
		public InlineScriptTagDisplay_scope Display_scope { get; set; }
		
		/// <summary>
		/// インラインスクリプト
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="script")]
		public string Script { get; set; }
		
		/// <summary>
		/// インラインスクリプトを実行するタイミング。
		///
		///- `object_builded`: JSオブジェクトの作成が完了した時
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trigger_event")]
		public InlineScriptTagTrigger_event Trigger_event { get; set; }
	}
	
	public class GetInlineScriptTagReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="inline_script_tag")]
		public GetInlineScriptTagReturnInline_script_tag Inline_script_tag { get; set; }
	}
	
	public class GetInlineScriptTagReturnInline_script_tag
	{
		
		/// <summary>
		/// アカウントID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="account_id")]
		public string Account_id { get; set; }
		
		/// <summary>
		/// インラインスクリプトを出力するページ。
		///
		///- `all`: カートの途中のページと注文完了ページの両方
		///- `thanks_page`: 注文完了ページ
		///- `cart`: カートの途中のページ
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="display_scope")]
		public InlineScriptTagDisplay_scope Display_scope { get; set; }
		
		/// <summary>
		/// インラインスクリプトタグID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// 作成日時
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="make_date")]
		public System.Nullable<System.Int32> Make_date { get; set; }
		
		/// <summary>
		/// アプリID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oauth_application_id")]
		public System.Nullable<System.Int32> Oauth_application_id { get; set; }
		
		/// <summary>
		/// インラインスクリプト
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="script")]
		public string Script { get; set; }
		
		/// <summary>
		/// インラインスクリプトを実行するタイミング。
		///
		///- `object_builded`: JSオブジェクトの作成が完了した時
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trigger_event")]
		public InlineScriptTagTrigger_event Trigger_event { get; set; }
		
		/// <summary>
		/// 更新日時
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="update_date")]
		public System.Nullable<System.Int32> Update_date { get; set; }
	}
	
	public class UpdateInlineScriptTagPutBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="inline_script_tag")]
		public UpdateInlineScriptTagPutBodyInline_script_tag Inline_script_tag { get; set; }
	}
	
	public class UpdateInlineScriptTagPutBodyInline_script_tag
	{
		
		/// <summary>
		/// インラインスクリプトを出力するページ。
		///
		///- `all`: カートの途中のページと注文完了ページの両方
		///- `thanks_page`: 注文完了ページ
		///- `cart`: カートの途中のページ
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="display_scope")]
		public InlineScriptTagDisplay_scope Display_scope { get; set; }
		
		/// <summary>
		/// インラインスクリプト
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="script")]
		public string Script { get; set; }
		
		/// <summary>
		/// インラインスクリプトを実行するタイミング。
		///
		///- `object_builded`: JSオブジェクトの作成が完了した時
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trigger_event")]
		public InlineScriptTagTrigger_event Trigger_event { get; set; }
	}
	
	public class UpdateInlineScriptTagReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="inline_script_tag")]
		public UpdateInlineScriptTagReturnInline_script_tag Inline_script_tag { get; set; }
	}
	
	public class UpdateInlineScriptTagReturnInline_script_tag
	{
		
		/// <summary>
		/// アカウントID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="account_id")]
		public string Account_id { get; set; }
		
		/// <summary>
		/// インラインスクリプトを出力するページ。
		///
		///- `all`: カートの途中のページと注文完了ページの両方
		///- `thanks_page`: 注文完了ページ
		///- `cart`: カートの途中のページ
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="display_scope")]
		public InlineScriptTagDisplay_scope Display_scope { get; set; }
		
		/// <summary>
		/// インラインスクリプトタグID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// 作成日時
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="make_date")]
		public System.Nullable<System.Int32> Make_date { get; set; }
		
		/// <summary>
		/// アプリID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oauth_application_id")]
		public System.Nullable<System.Int32> Oauth_application_id { get; set; }
		
		/// <summary>
		/// インラインスクリプト
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="script")]
		public string Script { get; set; }
		
		/// <summary>
		/// インラインスクリプトを実行するタイミング。
		///
		///- `object_builded`: JSオブジェクトの作成が完了した時
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trigger_event")]
		public InlineScriptTagTrigger_event Trigger_event { get; set; }
		
		/// <summary>
		/// 更新日時
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="update_date")]
		public System.Nullable<System.Int32> Update_date { get; set; }
	}
	
	public class GetScriptTagsReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="script_tags")]
		public GetScriptTagsReturnScript_tags[] GetScriptTagsReturnScript_tags { get; set; }
	}
	
	public class GetScriptTagsReturnScript_tags
	{
		
		/// <summary>
		/// スクリプトを出力するページ。
		///
		///- `all`: ショップページと注文完了ページの両方
		///- `shop`: ショップページ
		///- `thanks_page`: 注文完了ページ
		///- `cart`: カートの途中のページ
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="display_scope")]
		public ScriptTagDisplay_scope Display_scope { get; set; }
		
		/// <summary>
		/// スクリプトタグID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// 作成日時
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="make_date")]
		public System.Nullable<System.Int32> Make_date { get; set; }
		
		/// <summary>
		/// スクリプトURL
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="src")]
		public string Src { get; set; }
		
		/// <summary>
		/// 更新日時
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="update_date")]
		public System.Nullable<System.Int32> Update_date { get; set; }
	}
	
	public class CreateScriptTagReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="script_tag")]
		public CreateScriptTagReturnScript_tag Script_tag { get; set; }
	}
	
	public class CreateScriptTagReturnScript_tag
	{
		
		/// <summary>
		/// スクリプトを出力するページ。
		///
		///- `all`: ショップページと注文完了ページの両方
		///- `shop`: ショップページ
		///- `thanks_page`: 注文完了ページ
		///- `cart`: カートの途中のページ
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="display_scope")]
		public ScriptTagDisplay_scope Display_scope { get; set; }
		
		/// <summary>
		/// スクリプトタグID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// 作成日時
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="make_date")]
		public System.Nullable<System.Int32> Make_date { get; set; }
		
		/// <summary>
		/// スクリプトURL
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="src")]
		public string Src { get; set; }
		
		/// <summary>
		/// 更新日時
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="update_date")]
		public System.Nullable<System.Int32> Update_date { get; set; }
	}
	
	public class GetScriptTagReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="script_tag")]
		public GetScriptTagReturnScript_tag Script_tag { get; set; }
	}
	
	public class GetScriptTagReturnScript_tag
	{
		
		/// <summary>
		/// スクリプトを出力するページ。
		///
		///- `all`: ショップページと注文完了ページの両方
		///- `shop`: ショップページ
		///- `thanks_page`: 注文完了ページ
		///- `cart`: カートの途中のページ
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="display_scope")]
		public ScriptTagDisplay_scope Display_scope { get; set; }
		
		/// <summary>
		/// スクリプトタグID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// 作成日時
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="make_date")]
		public System.Nullable<System.Int32> Make_date { get; set; }
		
		/// <summary>
		/// スクリプトURL
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="src")]
		public string Src { get; set; }
		
		/// <summary>
		/// 更新日時
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="update_date")]
		public System.Nullable<System.Int32> Update_date { get; set; }
	}
	
	public class UpdateScriptTagReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="script_tag")]
		public UpdateScriptTagReturnScript_tag Script_tag { get; set; }
	}
	
	public class UpdateScriptTagReturnScript_tag
	{
		
		/// <summary>
		/// スクリプトを出力するページ。
		///
		///- `all`: ショップページと注文完了ページの両方
		///- `shop`: ショップページ
		///- `thanks_page`: 注文完了ページ
		///- `cart`: カートの途中のページ
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="display_scope")]
		public ScriptTagDisplay_scope Display_scope { get; set; }
		
		/// <summary>
		/// スクリプトタグID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// 作成日時
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="make_date")]
		public System.Nullable<System.Int32> Make_date { get; set; }
		
		/// <summary>
		/// スクリプトURL
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="src")]
		public string Src { get; set; }
		
		/// <summary>
		/// 更新日時
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="update_date")]
		public System.Nullable<System.Int32> Update_date { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
