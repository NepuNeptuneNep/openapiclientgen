//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Application resources represent applications installed on the domain that support transferring ownership of user data.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Application
	{
		
		/// <summary>
		/// Etag of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// The application's ID. Retrievable by using the [`applications.list()`](/admin-sdk/data-transfer/reference/rest/v1/applications/list) method.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Identifies the resource as a DataTransfer Application Resource.
		/// </summary>
		[System.ComponentModel.DefaultValue("admin#datatransfer#ApplicationResource")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "admin#datatransfer#ApplicationResource";
		
		/// <summary>
		/// The application's name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The list of all possible transfer parameters for this application. These parameters select which categories of the user's data to transfer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transferParams")]
		public ApplicationTransferParam[] TransferParams { get; set; }
	}
	
	/// <summary>
	/// Template for application transfer parameters.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApplicationTransferParam
	{
		
		/// <summary>
		/// The type of the transfer parameter, such as `PRIVACY_LEVEL`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		/// <summary>
		/// The value of the transfer parameter, such as `PRIVATE` or `SHARED`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string[] Value { get; set; }
	}
	
	/// <summary>
	/// Template to map fields of ApplicationDataTransfer resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApplicationDataTransfer
	{
		
		/// <summary>
		/// The application's ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="applicationId")]
		public string ApplicationId { get; set; }
		
		/// <summary>
		/// The transfer parameters for the application. These parameters are used to select the data which will get transferred in context of this application. For more information about the specific values available for each application, see the [Transfer parameters](/admin-sdk/data-transfer/v1/parameters) reference.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="applicationTransferParams")]
		public ApplicationTransferParam[] ApplicationTransferParams { get; set; }
		
		/// <summary>
		/// Read-only. Current status of transfer for this application.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="applicationTransferStatus")]
		public string ApplicationTransferStatus { get; set; }
	}
	
	/// <summary>
	/// Template for a collection of Applications.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApplicationsListResponse
	{
		
		/// <summary>
		/// The list of applications that support data transfer and are also installed for the customer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="applications")]
		public Application[] Applications { get; set; }
		
		/// <summary>
		/// ETag of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// Identifies the resource as a collection of Applications.
		/// </summary>
		[System.ComponentModel.DefaultValue("admin#datatransfer#applicationsList")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "admin#datatransfer#applicationsList";
		
		/// <summary>
		/// Token to specify the next page in the list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// A Transfer resource represents the transfer of the ownership of user data between users.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DataTransfer
	{
		
		/// <summary>
		/// The list of per-application data transfer resources. It contains details of the applications associated with this transfer resource, and also specifies the applications for which data transfer has to be done at the time of the transfer resource creation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="applicationDataTransfers")]
		public ApplicationDataTransfer[] ApplicationDataTransfers { get; set; }
		
		/// <summary>
		/// ETag of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// Read-only. The transfer's ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Identifies the resource as a DataTransfer request.
		/// </summary>
		[System.ComponentModel.DefaultValue("admin#datatransfer#DataTransfer")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "admin#datatransfer#DataTransfer";
		
		/// <summary>
		/// ID of the user to whom the data is being transferred.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="newOwnerUserId")]
		public string NewOwnerUserId { get; set; }
		
		/// <summary>
		/// ID of the user whose data is being transferred.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oldOwnerUserId")]
		public string OldOwnerUserId { get; set; }
		
		/// <summary>
		/// Read-only. Overall transfer status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="overallTransferStatusCode")]
		public string OverallTransferStatusCode { get; set; }
		
		/// <summary>
		/// Read-only. The time at which the data transfer was requested.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestTime")]
		public System.Nullable<System.DateTimeOffset> RequestTime { get; set; }
	}
	
	/// <summary>
	/// Template for a collection of DataTransfer resources.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DataTransfersListResponse
	{
		
		/// <summary>
		/// List of data transfer requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataTransfers")]
		public DataTransfer[] DataTransfers { get; set; }
		
		/// <summary>
		/// ETag of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// Identifies the resource as a collection of data transfer requests.
		/// </summary>
		[System.ComponentModel.DefaultValue("admin#datatransfer#dataTransfersList")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "admin#datatransfer#dataTransfersList";
		
		/// <summary>
		/// Token to specify the next page in the list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Lists the applications available for data transfer for a customer.
		/// Datatransfer_applications_list admin/datatransfer/v1/applications
		/// </summary>
		/// <param name="customerId">Immutable ID of the Google Workspace account.</param>
		/// <param name="maxResults">Maximum number of results to return. Default is 100.
		/// Minimum: 1
		/// Maximum: 500
		// </param>
		/// <param name="pageToken">Token to specify next page in the list.</param>
		/// <returns>Successful response</returns>
		public async Task<ApplicationsListResponse> Datatransfer_applications_listAsync(string customerId, int maxResults, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/datatransfer/v1/applications?customerId=" + (customerId==null? "" : System.Uri.EscapeDataString(customerId))+"&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ApplicationsListResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves information about an application for the given application ID.
		/// Datatransfer_applications_get admin/datatransfer/v1/applications/{applicationId}
		/// </summary>
		/// <param name="applicationId">ID of the application resource to be retrieved.</param>
		/// <returns>Successful response</returns>
		public async Task<Application> Datatransfer_applications_getAsync(string applicationId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/datatransfer/v1/applications/"+ (applicationId==null? "" : System.Uri.EscapeDataString(applicationId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Application>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the transfers for a customer by source user, destination user, or status.
		/// Datatransfer_transfers_list admin/datatransfer/v1/transfers
		/// </summary>
		/// <param name="customerId">Immutable ID of the Google Workspace account.</param>
		/// <param name="maxResults">Maximum number of results to return. Default is 100.
		/// Minimum: 1
		/// Maximum: 500
		// </param>
		/// <param name="newOwnerUserId">Destination user's profile ID.</param>
		/// <param name="oldOwnerUserId">Source user's profile ID.</param>
		/// <param name="pageToken">Token to specify the next page in the list.</param>
		/// <param name="status">Status of the transfer.</param>
		/// <returns>Successful response</returns>
		public async Task<DataTransfersListResponse> Datatransfer_transfers_listAsync(string customerId, int maxResults, string newOwnerUserId, string oldOwnerUserId, string pageToken, string status, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/datatransfer/v1/transfers?customerId=" + (customerId==null? "" : System.Uri.EscapeDataString(customerId))+"&maxResults="+maxResults+"&newOwnerUserId=" + (newOwnerUserId==null? "" : System.Uri.EscapeDataString(newOwnerUserId))+"&oldOwnerUserId=" + (oldOwnerUserId==null? "" : System.Uri.EscapeDataString(oldOwnerUserId))+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&status=" + (status==null? "" : System.Uri.EscapeDataString(status));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DataTransfersListResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Inserts a data transfer request. See the [Transfer parameters](/admin-sdk/data-transfer/v1/parameters) reference for specific application requirements.
		/// Datatransfer_transfers_insert admin/datatransfer/v1/transfers
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<DataTransfer> Datatransfer_transfers_insertAsync(DataTransfer requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/datatransfer/v1/transfers";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DataTransfer>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves a data transfer request by its resource ID.
		/// Datatransfer_transfers_get admin/datatransfer/v1/transfers/{dataTransferId}
		/// </summary>
		/// <param name="dataTransferId">ID of the resource to be retrieved. This is returned in the response from the insert method.</param>
		/// <returns>Successful response</returns>
		public async Task<DataTransfer> Datatransfer_transfers_getAsync(string dataTransferId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/datatransfer/v1/transfers/"+ (dataTransferId==null? "" : System.Uri.EscapeDataString(dataTransferId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DataTransfer>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
