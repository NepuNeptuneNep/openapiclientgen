//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceContentionFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServiceLinkedRoleFailure
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AttachLoadBalancerTargetGroupsResultType
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AttachLoadBalancersResultType
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AttachTrafficSourcesResultType
	{
	}
	
	/// <summary>
	/// Identifying information for a traffic source.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TrafficSourceIdentifier
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Identifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchDeleteScheduledActionAnswer
	{
		
		[System.Runtime.Serialization.DataMember()]
		public FailedScheduledUpdateGroupActionRequest[] FailedScheduledActions { get; set; }
	}
	
	/// <summary>
	/// Describes a scheduled action that could not be created, updated, or deleted.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FailedScheduledUpdateGroupActionRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ScheduledActionName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ErrorCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ErrorMessage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchPutScheduledUpdateGroupActionAnswer
	{
		
		[System.Runtime.Serialization.DataMember()]
		public FailedScheduledUpdateGroupActionRequest[] FailedScheduledUpdateGroupActions { get; set; }
	}
	
	/// <summary>
	/// Describes information used for one or more scheduled scaling action updates in a <a>BatchPutScheduledUpdateGroupAction</a> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScheduledUpdateGroupActionRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ScheduledActionName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Recurrence { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MinSize { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxSize { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DesiredCapacity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TimeZone { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AlreadyExistsFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LimitExceededFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CancelInstanceRefreshAnswer
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string InstanceRefreshId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ActiveInstanceRefreshNotFoundFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CompleteLifecycleActionAnswer
	{
	}
	
	/// <summary>
	/// Use this structure to specify the launch templates and instance types (overrides) for a mixed instances policy.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LaunchTemplate
	{
		
		[System.Runtime.Serialization.DataMember()]
		public LaunchTemplateSpecification LaunchTemplateSpecification { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LaunchTemplateOverrides[] Overrides { get; set; }
	}
	
	/// <summary>
	/// Describes the launch template and the version of the launch template that Amazon EC2 Auto Scaling uses to launch Amazon EC2 instances. For more information about launch templates, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/LaunchTemplates.html">Launch templates</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LaunchTemplateSpecification
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string LaunchTemplateId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LaunchTemplateName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Version { get; set; }
	}
	
	/// <summary>
	/// <p>Use this structure to let Amazon EC2 Auto Scaling do the following when the Auto Scaling group has a mixed instances policy:</p> <ul> <li> <p>Override the instance type that is specified in the launch template.</p> </li> <li> <p>Use multiple instance types.</p> </li> </ul> <p>Specify the instance types that you want, or define your instance requirements instead and let Amazon EC2 Auto Scaling provision the available instance types that meet your requirements. This can provide Amazon EC2 Auto Scaling with a larger selection of instance types to choose from when fulfilling Spot and On-Demand capacities. You can view which instance types are matched before you apply the instance requirements to your Auto Scaling group.</p> <p>After you define your instance requirements, you don't have to keep updating these settings to get new EC2 instance types automatically. Amazon EC2 Auto Scaling uses the instance requirements of the Auto Scaling group to determine whether a new EC2 instance type can be used.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LaunchTemplateOverrides
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string InstanceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string WeightedCapacity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LaunchTemplateSpecification LaunchTemplateSpecification { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InstanceRequirements InstanceRequirements { get; set; }
	}
	
	/// <summary>
	/// <p>The attributes for the instance types for a mixed instances policy. Amazon EC2 Auto Scaling uses your specified requirements to identify instance types. Then, it uses your On-Demand and Spot allocation strategies to launch instances from these instance types.</p> <p>When you specify multiple attributes, you get instance types that satisfy all of the specified attributes. If you specify multiple values for an attribute, you get instance types that satisfy any of the specified values.</p> <p>To limit the list of instance types from which Amazon EC2 Auto Scaling can identify matching instance types, you can use one of the following parameters, but not both in the same request:</p> <ul> <li> <p> <code>AllowedInstanceTypes</code> - The instance types to include in the list. All other instance types are ignored, even if they match your specified attributes.</p> </li> <li> <p> <code>ExcludedInstanceTypes</code> - The instance types to exclude from the list, even if they match your specified attributes.</p> </li> </ul> <note> <p>You must specify <code>VCpuCount</code> and <code>MemoryMiB</code>. All other attributes are optional. Any unspecified optional attribute is set to its default.</p> </note> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-asg-instance-type-requirements.html">Creating an Auto Scaling group using attribute-based instance type selection</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>. For help determining which instance types match your attributes before you apply them to your Auto Scaling group, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-fleet-attribute-based-instance-type-selection.html#ec2fleet-get-instance-types-from-instance-requirements">Preview instance types with specified attributes</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InstanceRequirements
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public VCpuCountRequest VCpuCount { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MemoryMiBRequest MemoryMiB { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CpuManufacturer[] CpuManufacturers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MemoryGiBPerVCpuRequest MemoryGiBPerVCpu { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ExcludedInstanceTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InstanceGeneration[] InstanceGenerations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SpotMaxPricePercentageOverLowestPrice { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> OnDemandMaxPricePercentageOverLowestPrice { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BareMetal BareMetal { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BareMetal BurstablePerformance { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> RequireHibernateSupport { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NetworkInterfaceCountRequest NetworkInterfaceCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BareMetal LocalStorage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LocalStorageType[] LocalStorageTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TotalLocalStorageGBRequest TotalLocalStorageGB { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BaselineEbsBandwidthMbpsRequest BaselineEbsBandwidthMbps { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AcceleratorType[] AcceleratorTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AcceleratorCountRequest AcceleratorCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AcceleratorManufacturer[] AcceleratorManufacturers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AcceleratorName[] AcceleratorNames { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AcceleratorTotalMemoryMiBRequest AcceleratorTotalMemoryMiB { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NetworkBandwidthGbpsRequest NetworkBandwidthGbps { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] AllowedInstanceTypes { get; set; }
	}
	
	/// <summary>
	/// Specifies the minimum and maximum for the <code>VCpuCount</code> object when you specify <a>InstanceRequirements</a> for an Auto Scaling group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VCpuCountRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Min { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Max { get; set; }
	}
	
	/// <summary>
	/// Specifies the minimum and maximum for the <code>MemoryMiB</code> object when you specify <a>InstanceRequirements</a> for an Auto Scaling group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MemoryMiBRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Min { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Max { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum CpuManufacturer
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		intel = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		amd = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="amazon-web-services")]
		amazonMinuswebMinusservices = 2,
	}
	
	/// <summary>
	/// Specifies the minimum and maximum for the <code>MemoryGiBPerVCpu</code> object when you specify <a>InstanceRequirements</a> for an Auto Scaling group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MemoryGiBPerVCpuRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Min { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Max { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum InstanceGeneration
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		current = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		previous = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum BareMetal
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		included = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		excluded = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		required = 2,
	}
	
	/// <summary>
	/// Specifies the minimum and maximum for the <code>NetworkInterfaceCount</code> object when you specify <a>InstanceRequirements</a> for an Auto Scaling group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NetworkInterfaceCountRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Min { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Max { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum LocalStorageType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		hdd = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ssd = 1,
	}
	
	/// <summary>
	/// Specifies the minimum and maximum for the <code>TotalLocalStorageGB</code> object when you specify <a>InstanceRequirements</a> for an Auto Scaling group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TotalLocalStorageGBRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Min { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Max { get; set; }
	}
	
	/// <summary>
	/// Specifies the minimum and maximum for the <code>BaselineEbsBandwidthMbps</code> object when you specify <a>InstanceRequirements</a> for an Auto Scaling group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BaselineEbsBandwidthMbpsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Min { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Max { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum AcceleratorType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		gpu = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fpga = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		inference = 2,
	}
	
	/// <summary>
	/// Specifies the minimum and maximum for the <code>AcceleratorCount</code> object when you specify <a>InstanceRequirements</a> for an Auto Scaling group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AcceleratorCountRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Min { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Max { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum AcceleratorManufacturer
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		nvidia = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		amd = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="amazon-web-services")]
		amazonMinuswebMinusservices = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		xilinx = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum AcceleratorName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		a100 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		v100 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		k80 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		t4 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		m60 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="radeon-pro-v520")]
		radeonMinusproMinusv520 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		vu9p = 6,
	}
	
	/// <summary>
	/// Specifies the minimum and maximum for the <code>AcceleratorTotalMemoryMiB</code> object when you specify <a>InstanceRequirements</a> for an Auto Scaling group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AcceleratorTotalMemoryMiBRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Min { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Max { get; set; }
	}
	
	/// <summary>
	/// <p>Specifies the minimum and maximum for the <code>NetworkBandwidthGbps</code> object when you specify <a>InstanceRequirements</a> for an Auto Scaling group.</p> <note> <p>Setting the minimum bandwidth does not guarantee that your instance will achieve the minimum bandwidth. Amazon EC2 will identify instance types that support the specified minimum bandwidth, but the actual bandwidth of your instance might go below the specified minimum at times. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-network-bandwidth.html#available-instance-bandwidth">Available instance bandwidth</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p> </note>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NetworkBandwidthGbpsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Min { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Max { get; set; }
	}
	
	/// <summary>
	/// Use this structure to specify the distribution of On-Demand Instances and Spot Instances and the allocation strategies used to fulfill On-Demand and Spot capacities for a mixed instances policy.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InstancesDistribution
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string OnDemandAllocationStrategy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> OnDemandBaseCapacity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> OnDemandPercentageAboveBaseCapacity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SpotAllocationStrategy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SpotInstancePools { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SpotMaxPrice { get; set; }
	}
	
	/// <summary>
	/// <p>Describes information used to specify a lifecycle hook for an Auto Scaling group.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html">Amazon EC2 Auto Scaling lifecycle hooks</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LifecycleHookSpecification
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LifecycleHookName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LifecycleTransition { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NotificationMetadata { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> HeartbeatTimeout { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DefaultResult { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NotificationTargetARN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RoleARN { get; set; }
	}
	
	/// <summary>
	/// Describes a tag for an Auto Scaling group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Tag
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> PropagateAtLaunch { get; set; }
	}
	
	/// <summary>
	/// Describes a block device mapping.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BlockDeviceMapping
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string VirtualName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DeviceName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Ebs Ebs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> NoDevice { get; set; }
	}
	
	/// <summary>
	/// Describes information used to set up an Amazon EBS volume specified in a block device mapping.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Ebs
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> VolumeSize { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VolumeType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DeleteOnTermination { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Iops { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Encrypted { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Throughput { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum InstanceMetadataHttpTokensState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		optional = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		required = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum InstanceMetadataEndpointState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		disabled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		enabled = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceInUseFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScalingActivityInProgressFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteLifecycleHookAnswer
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteWarmPoolAnswer
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeAccountLimitsAnswer
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxNumberOfAutoScalingGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxNumberOfLaunchConfigurations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NumberOfAutoScalingGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NumberOfLaunchConfigurations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeAdjustmentTypesAnswer
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AdjustmentType[] AdjustmentTypes { get; set; }
	}
	
	/// <summary>
	/// Describes a policy adjustment type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AdjustmentType
	{
		
		[System.Runtime.Serialization.DataMember(Name="AdjustmentType")]
		public string AdjustmentType1 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AutoScalingGroupsType
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AutoScalingGroup[] AutoScalingGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Describes an Auto Scaling group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AutoScalingGroup
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AutoScalingGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AutoScalingGroupARN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LaunchConfigurationName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LaunchTemplateSpecification LaunchTemplate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MixedInstancesPolicy MixedInstancesPolicy { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int MinSize { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int MaxSize { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int DesiredCapacity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PredictedCapacity { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int DefaultCooldown { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] AvailabilityZones { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] LoadBalancerNames { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] TargetGroupARNs { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string HealthCheckType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> HealthCheckGracePeriod { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Instance[] Instances { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SuspendedProcess[] SuspendedProcesses { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PlacementGroup { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VPCZoneIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EnabledMetric[] EnabledMetrics { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagDescription[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] TerminationPolicies { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> NewInstancesProtectedFromScaleIn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ServiceLinkedRoleARN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxInstanceLifetime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> CapacityRebalance { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public WarmPoolConfiguration WarmPoolConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> WarmPoolSize { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Context { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DesiredCapacityType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DefaultInstanceWarmup { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TrafficSourceIdentifier[] TrafficSources { get; set; }
	}
	
	/// <summary>
	/// <p>Use this structure to launch multiple instance types and On-Demand Instances and Spot Instances within a single Auto Scaling group.</p> <p>A mixed instances policy contains information that Amazon EC2 Auto Scaling can use to launch instances and help optimize your costs. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-mixed-instances-groups.html">Auto Scaling groups with multiple instance types and purchase options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MixedInstancesPolicy
	{
		
		[System.Runtime.Serialization.DataMember()]
		public LaunchTemplate LaunchTemplate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InstancesDistribution InstancesDistribution { get; set; }
	}
	
	/// <summary>
	/// Describes an EC2 instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Instance
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string InstanceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InstanceType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AvailabilityZone { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public LifecycleState LifecycleState { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string HealthStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LaunchConfigurationName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LaunchTemplateSpecification LaunchTemplate { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool ProtectedFromScaleIn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string WeightedCapacity { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum LifecycleState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Pending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Pending:Wait")]
		PendingWait = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Pending:Proceed")]
		PendingProceed = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Quarantined = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InService = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Terminating = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Terminating:Wait")]
		TerminatingWait = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Terminating:Proceed")]
		TerminatingProceed = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Terminated = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Detaching = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Detached = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EnteringStandby = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standby = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Warmed:Pending")]
		WarmedPending = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Warmed:Pending:Wait")]
		WarmedPendingWait = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Warmed:Pending:Proceed")]
		WarmedPendingProceed = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Warmed:Terminating")]
		WarmedTerminating = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Warmed:Terminating:Wait")]
		WarmedTerminatingWait = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Warmed:Terminating:Proceed")]
		WarmedTerminatingProceed = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Warmed:Terminated")]
		WarmedTerminated = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Warmed:Stopped")]
		WarmedStopped = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Warmed:Running")]
		WarmedRunning = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Warmed:Hibernated")]
		WarmedHibernated = 22,
	}
	
	/// <summary>
	/// <p>Describes an auto scaling process that has been suspended.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html#process-types">Scaling processes</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SuspendedProcess
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ProcessName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SuspensionReason { get; set; }
	}
	
	/// <summary>
	/// Describes an enabled Auto Scaling group metric.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EnabledMetric
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Metric { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Granularity { get; set; }
	}
	
	/// <summary>
	/// Describes a tag for an Auto Scaling group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TagDescription
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> PropagateAtLaunch { get; set; }
	}
	
	/// <summary>
	/// Describes a warm pool configuration. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WarmPoolConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxGroupPreparedCapacity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MinSize { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public WarmPoolState PoolState { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public WarmPoolStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InstanceReusePolicy InstanceReusePolicy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum WarmPoolState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Stopped = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Running = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Hibernated = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum WarmPoolStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PendingDelete = 0,
	}
	
	/// <summary>
	/// <p>Describes an instance reuse policy for a warm pool. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-warm-pools.html">Warm pools for Amazon EC2 Auto Scaling</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InstanceReusePolicy
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ReuseOnScaleIn { get; set; }
	}
	
	/// <summary>
	/// <p>Describes a filter that is used to return a more specific list of results from a describe operation.</p> <p>If you specify multiple filters, the filters are automatically logically joined with an <code>AND</code>, and the request returns only the results that match all of the specified filters. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-tagging.html">Tag Auto Scaling groups and instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Filter
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidNextToken
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AutoScalingInstancesType
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AutoScalingInstanceDetails[] AutoScalingInstances { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Describes an EC2 instance associated with an Auto Scaling group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AutoScalingInstanceDetails
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string InstanceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InstanceType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AutoScalingGroupName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AvailabilityZone { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LifecycleState { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string HealthStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LaunchConfigurationName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LaunchTemplateSpecification LaunchTemplate { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool ProtectedFromScaleIn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string WeightedCapacity { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeAutoScalingNotificationTypesAnswer
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] AutoScalingNotificationTypes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeInstanceRefreshesAnswer
	{
		
		[System.Runtime.Serialization.DataMember()]
		public InstanceRefresh[] InstanceRefreshes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Describes an instance refresh for an Auto Scaling group. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InstanceRefresh
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string InstanceRefreshId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AutoScalingGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InstanceRefreshStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StatusReason { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PercentageComplete { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> InstancesToUpdate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InstanceRefreshProgressDetails ProgressDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RefreshPreferences Preferences { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DesiredConfiguration DesiredConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RollbackDetails RollbackDetails { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum InstanceRefreshStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Pending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InProgress = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Successful = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Cancelling = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Cancelled = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RollbackInProgress = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RollbackFailed = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RollbackSuccessful = 8,
	}
	
	/// <summary>
	/// Reports progress on replacing instances in an Auto Scaling group that has a warm pool. This includes separate details for instances in the warm pool and instances in the Auto Scaling group (the live pool).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InstanceRefreshProgressDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public InstanceRefreshLivePoolProgress LivePoolProgress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InstanceRefreshWarmPoolProgress WarmPoolProgress { get; set; }
	}
	
	/// <summary>
	/// Reports progress on replacing instances that are in the Auto Scaling group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InstanceRefreshLivePoolProgress
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PercentageComplete { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> InstancesToUpdate { get; set; }
	}
	
	/// <summary>
	/// Reports progress on replacing instances that are in the warm pool.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InstanceRefreshWarmPoolProgress
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PercentageComplete { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> InstancesToUpdate { get; set; }
	}
	
	/// <summary>
	/// Describes the preferences for an instance refresh.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RefreshPreferences
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MinHealthyPercentage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> InstanceWarmup { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> CheckpointPercentages { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> CheckpointDelay { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> SkipMatching { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AutoRollback { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ScaleInProtectedInstances ScaleInProtectedInstances { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StandbyInstances StandbyInstances { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AlarmSpecification AlarmSpecification { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ScaleInProtectedInstances
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Refresh = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Ignore = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Wait = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum StandbyInstances
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Terminate = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Ignore = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Wait = 2,
	}
	
	/// <summary>
	/// Specifies the CloudWatch alarm specification to use in an instance refresh.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AlarmSpecification
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Alarms { get; set; }
	}
	
	/// <summary>
	/// <p>Describes the desired configuration for an instance refresh. </p> <p>If you specify a desired configuration, you must specify either a <code>LaunchTemplate</code> or a <code>MixedInstancesPolicy</code>. </p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DesiredConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public LaunchTemplateSpecification LaunchTemplate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MixedInstancesPolicy MixedInstancesPolicy { get; set; }
	}
	
	/// <summary>
	/// Details about an instance refresh rollback.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RollbackDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string RollbackReason { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset RollbackStartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PercentageCompleteOnRollback { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> InstancesToUpdateOnRollback { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InstanceRefreshProgressDetails ProgressDetailsOnRollback { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LaunchConfigurationsType
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public LaunchConfiguration[] LaunchConfigurations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Describes a launch configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LaunchConfiguration
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LaunchConfigurationName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LaunchConfigurationARN { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ImageId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KeyName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] SecurityGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClassicLinkVPCId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ClassicLinkVPCSecurityGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string UserData { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string InstanceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KernelId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RamdiskId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BlockDeviceMapping[] BlockDeviceMappings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InstanceMonitoring InstanceMonitoring { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SpotPrice { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IamInstanceProfile { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EbsOptimized { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AssociatePublicIpAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PlacementTenancy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InstanceMetadataOptions MetadataOptions { get; set; }
	}
	
	/// <summary>
	/// Describes whether detailed monitoring is enabled for the Auto Scaling instances.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InstanceMonitoring
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Enabled { get; set; }
	}
	
	/// <summary>
	/// The metadata options for the instances. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-config.html#launch-configurations-imds">Configuring the Instance Metadata Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InstanceMetadataOptions
	{
		
		[System.Runtime.Serialization.DataMember()]
		public InstanceMetadataHttpTokensState HttpTokens { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> HttpPutResponseHopLimit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InstanceMetadataEndpointState HttpEndpoint { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeLifecycleHookTypesAnswer
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] LifecycleHookTypes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeLifecycleHooksAnswer
	{
		
		[System.Runtime.Serialization.DataMember()]
		public LifecycleHook[] LifecycleHooks { get; set; }
	}
	
	/// <summary>
	/// Describes a lifecycle hook. A lifecycle hook lets you create solutions that are aware of events in the Auto Scaling instance lifecycle, and then perform a custom action on instances when the corresponding lifecycle event occurs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LifecycleHook
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string LifecycleHookName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AutoScalingGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LifecycleTransition { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NotificationTargetARN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RoleARN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NotificationMetadata { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> HeartbeatTimeout { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> GlobalTimeout { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DefaultResult { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeLoadBalancerTargetGroupsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public LoadBalancerTargetGroupState[] LoadBalancerTargetGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Describes the state of a target group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LoadBalancerTargetGroupState
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string LoadBalancerTargetGroupARN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeLoadBalancersResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public LoadBalancerState[] LoadBalancers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Describes the state of a Classic Load Balancer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LoadBalancerState
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string LoadBalancerName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeMetricCollectionTypesAnswer
	{
		
		[System.Runtime.Serialization.DataMember()]
		public MetricCollectionType[] Metrics { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MetricGranularityType[] Granularities { get; set; }
	}
	
	/// <summary>
	/// Describes a metric.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MetricCollectionType
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Metric { get; set; }
	}
	
	/// <summary>
	/// Describes a granularity of a metric.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MetricGranularityType
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Granularity { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeNotificationConfigurationsAnswer
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public NotificationConfiguration[] NotificationConfigurations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Describes a notification.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NotificationConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AutoScalingGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TopicARN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NotificationType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PoliciesType
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ScalingPolicy[] ScalingPolicies { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Describes a scaling policy.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScalingPolicy
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AutoScalingGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PolicyName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PolicyARN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PolicyType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AdjustmentType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MinAdjustmentStep { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MinAdjustmentMagnitude { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ScalingAdjustment { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Cooldown { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StepAdjustment[] StepAdjustments { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MetricAggregationType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> EstimatedInstanceWarmup { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Alarm[] Alarms { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TargetTrackingConfiguration TargetTrackingConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PredictiveScalingConfiguration PredictiveScalingConfiguration { get; set; }
	}
	
	/// <summary>
	/// <p>Describes information used to create a step adjustment for a step scaling policy.</p> <p>For the following examples, suppose that you have an alarm with a breach threshold of 50:</p> <ul> <li> <p>To trigger the adjustment when the metric is greater than or equal to 50 and less than 60, specify a lower bound of 0 and an upper bound of 10.</p> </li> <li> <p>To trigger the adjustment when the metric is greater than 40 and less than or equal to 50, specify a lower bound of -10 and an upper bound of 0.</p> </li> </ul> <p>There are a few rules for the step adjustments for your step policy:</p> <ul> <li> <p>The ranges of your step adjustments can't overlap or have a gap.</p> </li> <li> <p>At most, one step adjustment can have a null lower bound. If one step adjustment has a negative lower bound, then there must be a step adjustment with a null lower bound.</p> </li> <li> <p>At most, one step adjustment can have a null upper bound. If one step adjustment has a positive upper bound, then there must be a step adjustment with a null upper bound.</p> </li> <li> <p>The upper and lower bound can't be null in the same step adjustment.</p> </li> </ul> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scaling-simple-step.html#as-scaling-steps">Step adjustments</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StepAdjustment
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> MetricIntervalLowerBound { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> MetricIntervalUpperBound { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int ScalingAdjustment { get; set; }
	}
	
	/// <summary>
	/// Describes an alarm.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Alarm
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AlarmName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AlarmARN { get; set; }
	}
	
	/// <summary>
	/// Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TargetTrackingConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PredefinedMetricSpecification PredefinedMetricSpecification { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CustomizedMetricSpecification CustomizedMetricSpecification { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public double TargetValue { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DisableScaleIn { get; set; }
	}
	
	/// <summary>
	/// Represents a predefined metric for a target tracking scaling policy to use with Amazon EC2 Auto Scaling.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PredefinedMetricSpecification
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MetricType PredefinedMetricType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceLabel { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum MetricType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASGAverageCPUUtilization = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASGAverageNetworkIn = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASGAverageNetworkOut = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALBRequestCountPerTarget = 3,
	}
	
	/// <summary>
	/// <p>Represents a CloudWatch metric of your choosing for a target tracking scaling policy to use with Amazon EC2 Auto Scaling.</p> <p>To create your customized metric specification:</p> <ul> <li> <p>Add values for each required property from CloudWatch. You can use an existing metric, or a new metric that you create. To use your own metric, you must first publish the metric to CloudWatch. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/publishingMetrics.html">Publish custom metrics</a> in the <i>Amazon CloudWatch User Guide</i>.</p> </li> <li> <p>Choose a metric that changes proportionally with capacity. The value of the metric should increase or decrease in inverse proportion to the number of capacity units. That is, the value of the metric should decrease when capacity increases.</p> </li> </ul> <p>For more information about the CloudWatch terminology below, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch_concepts.html">Amazon CloudWatch concepts</a>.</p> <note> <p>Each individual service provides information about the metrics, namespace, and dimensions they use. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/aws-services-cloudwatch-metrics.html">Amazon Web Services services that publish CloudWatch metrics</a> in the <i>Amazon CloudWatch User Guide</i>.</p> </note>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomizedMetricSpecification
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string MetricName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Namespace { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MetricDimension[] Dimensions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MetricStatistic Statistic { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Unit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TargetTrackingMetricDataQuery[] Metrics { get; set; }
	}
	
	/// <summary>
	/// Describes the dimension of a metric.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MetricDimension
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum MetricStatistic
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Average = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Minimum = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Maximum = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SampleCount = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Sum = 4,
	}
	
	/// <summary>
	/// The metric data to return. Also defines whether this call is returning data for one metric only, or whether it is performing a math expression on the values of returned metric statistics to create a new time series. A time series is a series of data points, each of which is associated with a timestamp.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TargetTrackingMetricDataQuery
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Expression { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TargetTrackingMetricStat MetricStat { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Label { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ReturnData { get; set; }
	}
	
	/// <summary>
	/// <p>This structure defines the CloudWatch metric to return, along with the statistic and unit.</p> <p>For more information about the CloudWatch terminology below, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch_concepts.html">Amazon CloudWatch concepts</a> in the <i>Amazon CloudWatch User Guide</i>.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TargetTrackingMetricStat
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Metric Metric { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Stat { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Unit { get; set; }
	}
	
	/// <summary>
	/// Represents a specific metric. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Metric
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Namespace { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string MetricName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MetricDimension[] Dimensions { get; set; }
	}
	
	/// <summary>
	/// Represents a predictive scaling policy configuration to use with Amazon EC2 Auto Scaling.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PredictiveScalingConfiguration
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public PredictiveScalingMetricSpecification[] MetricSpecifications { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PredictiveScalingMode Mode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SchedulingBufferTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PredictiveScalingMaxCapacityBreachBehavior MaxCapacityBreachBehavior { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxCapacityBuffer { get; set; }
	}
	
	/// <summary>
	/// <p>This structure specifies the metrics and target utilization settings for a predictive scaling policy. </p> <p>You must specify either a metric pair, or a load metric and a scaling metric individually. Specifying a metric pair instead of individual metrics provides a simpler way to configure metrics for a scaling policy. You choose the metric pair, and the policy automatically knows the correct sum and average statistics to use for the load metric and the scaling metric.</p> <p>Example</p> <ul> <li> <p>You create a predictive scaling policy and specify <code>ALBRequestCount</code> as the value for the metric pair and <code>1000.0</code> as the target value. For this type of metric, you must provide the metric dimension for the corresponding target group, so you also provide a resource label for the Application Load Balancer target group that is attached to your Auto Scaling group.</p> </li> <li> <p>The number of requests the target group receives per minute provides the load metric, and the request count averaged between the members of the target group provides the scaling metric. In CloudWatch, this refers to the <code>RequestCount</code> and <code>RequestCountPerTarget</code> metrics, respectively.</p> </li> <li> <p>For optimal use of predictive scaling, you adhere to the best practice of using a dynamic scaling policy to automatically scale between the minimum capacity and maximum capacity in response to real-time changes in resource utilization.</p> </li> <li> <p>Amazon EC2 Auto Scaling consumes data points for the load metric over the last 14 days and creates an hourly load forecast for predictive scaling. (A minimum of 24 hours of data is required.)</p> </li> <li> <p>After creating the load forecast, Amazon EC2 Auto Scaling determines when to reduce or increase the capacity of your Auto Scaling group in each hour of the forecast period so that the average number of requests received by each instance is as close to 1000 requests per minute as possible at all times.</p> </li> </ul> <p>For information about using custom metrics with predictive scaling, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/predictive-scaling-customized-metric-specification.html">Advanced predictive scaling policy configurations using custom metrics</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PredictiveScalingMetricSpecification
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public double TargetValue { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PredictiveScalingPredefinedMetricPair PredefinedMetricPairSpecification { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PredictiveScalingPredefinedScalingMetric PredefinedScalingMetricSpecification { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PredictiveScalingPredefinedLoadMetric PredefinedLoadMetricSpecification { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PredictiveScalingCustomizedScalingMetric CustomizedScalingMetricSpecification { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PredictiveScalingCustomizedLoadMetric CustomizedLoadMetricSpecification { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PredictiveScalingCustomizedCapacityMetric CustomizedCapacityMetricSpecification { get; set; }
	}
	
	/// <summary>
	/// Represents a metric pair for a predictive scaling policy. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PredictiveScalingPredefinedMetricPair
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public PredefinedMetricPairType PredefinedMetricType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceLabel { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum PredefinedMetricPairType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASGCPUUtilization = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASGNetworkIn = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASGNetworkOut = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALBRequestCount = 3,
	}
	
	/// <summary>
	/// <p>Describes a scaling metric for a predictive scaling policy.</p> <p>When returned in the output of <code>DescribePolicies</code>, it indicates that a predictive scaling policy uses individually specified load and scaling metrics instead of a metric pair.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PredictiveScalingPredefinedScalingMetric
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MetricType PredefinedMetricType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceLabel { get; set; }
	}
	
	/// <summary>
	/// <p>Describes a load metric for a predictive scaling policy.</p> <p>When returned in the output of <code>DescribePolicies</code>, it indicates that a predictive scaling policy uses individually specified load and scaling metrics instead of a metric pair.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PredictiveScalingPredefinedLoadMetric
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public PredefinedLoadMetricType PredefinedMetricType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceLabel { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum PredefinedLoadMetricType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASGTotalCPUUtilization = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASGTotalNetworkIn = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASGTotalNetworkOut = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALBTargetGroupRequestCount = 3,
	}
	
	/// <summary>
	/// Describes a custom scaling metric for a predictive scaling policy.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PredictiveScalingCustomizedScalingMetric
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MetricDataQuery[] MetricDataQueries { get; set; }
	}
	
	/// <summary>
	/// <p>The metric data to return. Also defines whether this call is returning data for one metric only, or whether it is performing a math expression on the values of returned metric statistics to create a new time series. A time series is a series of data points, each of which is associated with a timestamp.</p> <p>For more information and examples, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/predictive-scaling-customized-metric-specification.html">Advanced predictive scaling policy configurations using custom metrics</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MetricDataQuery
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Expression { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MetricStat MetricStat { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Label { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ReturnData { get; set; }
	}
	
	/// <summary>
	/// <p>This structure defines the CloudWatch metric to return, along with the statistic, period, and unit.</p> <p>For more information about the CloudWatch terminology below, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch_concepts.html">Amazon CloudWatch concepts</a> in the <i>Amazon CloudWatch User Guide</i>.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MetricStat
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Metric Metric { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Stat { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Unit { get; set; }
	}
	
	/// <summary>
	/// Describes a custom load metric for a predictive scaling policy.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PredictiveScalingCustomizedLoadMetric
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MetricDataQuery[] MetricDataQueries { get; set; }
	}
	
	/// <summary>
	/// Describes a customized capacity metric for a predictive scaling policy.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PredictiveScalingCustomizedCapacityMetric
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MetricDataQuery[] MetricDataQueries { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum PredictiveScalingMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ForecastAndScale = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ForecastOnly = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum PredictiveScalingMaxCapacityBreachBehavior
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HonorMaxCapacity = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IncreaseMaxCapacity = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ActivitiesType
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Activity[] Activities { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Describes scaling activity, which is a long-running process that represents a change to your Auto Scaling group, such as changing its size or replacing an instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Activity
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ActivityId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AutoScalingGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Cause { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset EndTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ScalingActivityStatusCode StatusCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StatusMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Progress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Details { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AutoScalingGroupState { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AutoScalingGroupARN { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ScalingActivityStatusCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PendingSpotBidPlacement = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WaitingForSpotInstanceRequestId = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WaitingForSpotInstanceId = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WaitingForInstanceId = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PreInService = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InProgress = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WaitingForELBConnectionDraining = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MidLifecycleAction = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WaitingForInstanceWarmup = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Successful = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Cancelled = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WaitingForConnectionDraining = 12,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProcessesType
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ProcessType[] Processes { get; set; }
	}
	
	/// <summary>
	/// <p>Describes a process type.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html#process-types">Scaling processes</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProcessType
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ProcessName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScheduledActionsType
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ScheduledUpdateGroupAction[] ScheduledUpdateGroupActions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Describes a scheduled scaling action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScheduledUpdateGroupAction
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AutoScalingGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ScheduledActionName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ScheduledActionARN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset Time { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Recurrence { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MinSize { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxSize { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DesiredCapacity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TimeZone { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TagsType
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TagDescription[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeTerminationPolicyTypesAnswer
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] TerminationPolicyTypes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeTrafficSourcesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TrafficSourceState[] TrafficSources { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Describes the state of a traffic source.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TrafficSourceState
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string TrafficSource { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Identifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeWarmPoolAnswer
	{
		
		[System.Runtime.Serialization.DataMember()]
		public WarmPoolConfiguration WarmPoolConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Instance[] Instances { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DetachInstancesAnswer
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Activity[] Activities { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DetachLoadBalancerTargetGroupsResultType
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DetachLoadBalancersResultType
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DetachTrafficSourcesResultType
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EnterStandbyAnswer
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Activity[] Activities { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ExitStandbyAnswer
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Activity[] Activities { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetPredictiveScalingForecastAnswer
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public LoadForecast[] LoadForecast { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CapacityForecast CapacityForecast { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset UpdateTime { get; set; }
	}
	
	/// <summary>
	/// A <code>GetPredictiveScalingForecast</code> call returns the load forecast for a predictive scaling policy. This structure includes the data points for that load forecast, along with the timestamps of those data points and the metric specification. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LoadForecast
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] Timestamps { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public double[] Values { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public PredictiveScalingMetricSpecification MetricSpecification { get; set; }
	}
	
	/// <summary>
	/// A <code>GetPredictiveScalingForecast</code> call returns the capacity forecast for a predictive scaling policy. This structure includes the data points for that capacity forecast, along with the timestamps of those data points. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CapacityForecast
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] Timestamps { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public double[] Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutLifecycleHookAnswer
	{
	}
	
	/// <summary>
	/// Contains the output of PutScalingPolicy.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PolicyARNType
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string PolicyARN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Alarm[] Alarms { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutWarmPoolAnswer
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RecordLifecycleActionHeartbeatAnswer
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RollbackInstanceRefreshAnswer
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string InstanceRefreshId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class IrreversibleInstanceRefreshFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SetInstanceProtectionAnswer
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StartInstanceRefreshAnswer
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string InstanceRefreshId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InstanceRefreshInProgressFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ActivityType
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Activity Activity { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AttachInstancesQuery
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] InstanceIds { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AutoScalingGroupName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AttachLoadBalancerTargetGroupsType
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AutoScalingGroupName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] TargetGroupARNs { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AttachLoadBalancersType
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AutoScalingGroupName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] LoadBalancerNames { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AttachTrafficSourcesType
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AutoScalingGroupName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TrafficSourceIdentifier[] TrafficSources { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AutoScalingGroupNamesType
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] AutoScalingGroupNames { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchDeleteScheduledActionType
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AutoScalingGroupName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] ScheduledActionNames { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchPutScheduledUpdateGroupActionType
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AutoScalingGroupName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ScheduledUpdateGroupActionRequest[] ScheduledUpdateGroupActions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum BurstablePerformance
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		included = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		excluded = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		required = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CancelInstanceRefreshType
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AutoScalingGroupName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CompleteLifecycleActionType
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LifecycleHookName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AutoScalingGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LifecycleActionToken { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LifecycleActionResult { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InstanceId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateAutoScalingGroupType
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AutoScalingGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LaunchConfigurationName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LaunchTemplateSpecification LaunchTemplate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MixedInstancesPolicy MixedInstancesPolicy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InstanceId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int MinSize { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int MaxSize { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DesiredCapacity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DefaultCooldown { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] AvailabilityZones { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] LoadBalancerNames { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] TargetGroupARNs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string HealthCheckType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> HealthCheckGracePeriod { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PlacementGroup { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VPCZoneIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] TerminationPolicies { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> NewInstancesProtectedFromScaleIn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> CapacityRebalance { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LifecycleHookSpecification[] LifecycleHookSpecificationList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ServiceLinkedRoleARN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxInstanceLifetime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Context { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DesiredCapacityType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DefaultInstanceWarmup { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TrafficSourceIdentifier[] TrafficSources { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateLaunchConfigurationType
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LaunchConfigurationName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ImageId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KeyName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] SecurityGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClassicLinkVPCId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ClassicLinkVPCSecurityGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string UserData { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InstanceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InstanceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KernelId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RamdiskId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BlockDeviceMapping[] BlockDeviceMappings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InstanceMonitoring InstanceMonitoring { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SpotPrice { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IamInstanceProfile { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EbsOptimized { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AssociatePublicIpAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PlacementTenancy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InstanceMetadataOptions MetadataOptions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateOrUpdateTagsType
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteAutoScalingGroupType
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AutoScalingGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ForceDelete { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteLifecycleHookType
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LifecycleHookName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AutoScalingGroupName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteNotificationConfigurationType
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AutoScalingGroupName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TopicARN { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeletePolicyType
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AutoScalingGroupName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PolicyName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteScheduledActionType
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AutoScalingGroupName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ScheduledActionName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteTagsType
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteWarmPoolType
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AutoScalingGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ForceDelete { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeAutoScalingInstancesType
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] InstanceIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeInstanceRefreshesType
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AutoScalingGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] InstanceRefreshIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeLifecycleHooksType
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AutoScalingGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] LifecycleHookNames { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeLoadBalancerTargetGroupsRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AutoScalingGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeLoadBalancersRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AutoScalingGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeNotificationConfigurationsType
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] AutoScalingGroupNames { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribePoliciesType
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AutoScalingGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] PolicyNames { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] PolicyTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeScalingActivitiesType
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ActivityIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AutoScalingGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IncludeDeletedGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeScheduledActionsType
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AutoScalingGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ScheduledActionNames { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeTagsType
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeTrafficSourcesRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AutoScalingGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TrafficSourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeWarmPoolType
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AutoScalingGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DetachInstancesQuery
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] InstanceIds { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AutoScalingGroupName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool ShouldDecrementDesiredCapacity { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DetachLoadBalancerTargetGroupsType
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AutoScalingGroupName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] TargetGroupARNs { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DetachLoadBalancersType
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AutoScalingGroupName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] LoadBalancerNames { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DetachTrafficSourcesType
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AutoScalingGroupName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TrafficSourceIdentifier[] TrafficSources { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DisableMetricsCollectionQuery
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AutoScalingGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Metrics { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EnableMetricsCollectionQuery
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AutoScalingGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Metrics { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Granularity { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EnterStandbyQuery
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] InstanceIds { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AutoScalingGroupName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool ShouldDecrementDesiredCapacity { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ExecutePolicyType
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AutoScalingGroupName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PolicyName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> HonorCooldown { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> MetricValue { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> BreachThreshold { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ExitStandbyQuery
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] InstanceIds { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AutoScalingGroupName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetPredictiveScalingForecastType
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AutoScalingGroupName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PolicyName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset StartTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset EndTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum LocalStorage
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		included = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		excluded = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		required = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LaunchConfigurationNameType
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LaunchConfigurationName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LaunchConfigurationNamesType
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] LaunchConfigurationNames { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum PredefinedScalingMetricType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASGAverageCPUUtilization = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASGAverageNetworkIn = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASGAverageNetworkOut = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALBRequestCountPerTarget = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutLifecycleHookType
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LifecycleHookName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AutoScalingGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LifecycleTransition { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RoleARN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NotificationTargetARN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NotificationMetadata { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> HeartbeatTimeout { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DefaultResult { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutNotificationConfigurationType
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AutoScalingGroupName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TopicARN { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] NotificationTypes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutScalingPolicyType
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AutoScalingGroupName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PolicyName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PolicyType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AdjustmentType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MinAdjustmentStep { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MinAdjustmentMagnitude { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ScalingAdjustment { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Cooldown { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MetricAggregationType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StepAdjustment[] StepAdjustments { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> EstimatedInstanceWarmup { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TargetTrackingConfiguration TargetTrackingConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PredictiveScalingConfiguration PredictiveScalingConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutScheduledUpdateGroupActionType
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AutoScalingGroupName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ScheduledActionName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset Time { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Recurrence { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MinSize { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxSize { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DesiredCapacity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TimeZone { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutWarmPoolType
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AutoScalingGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxGroupPreparedCapacity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MinSize { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public WarmPoolState PoolState { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InstanceReusePolicy InstanceReusePolicy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RecordLifecycleActionHeartbeatType
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LifecycleHookName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AutoScalingGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LifecycleActionToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InstanceId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum RefreshStrategy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Rolling = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RollbackInstanceRefreshType
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AutoScalingGroupName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScalingProcessQuery
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AutoScalingGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ScalingProcesses { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SetDesiredCapacityType
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AutoScalingGroupName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int DesiredCapacity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> HonorCooldown { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SetInstanceHealthQuery
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string InstanceId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string HealthStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ShouldRespectGracePeriod { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SetInstanceProtectionQuery
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] InstanceIds { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AutoScalingGroupName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool ProtectedFromScaleIn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StartInstanceRefreshType
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AutoScalingGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RefreshStrategy Strategy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DesiredConfiguration DesiredConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RefreshPreferences Preferences { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TerminateInstanceInAutoScalingGroupType
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string InstanceId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool ShouldDecrementDesiredCapacity { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateAutoScalingGroupType
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AutoScalingGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LaunchConfigurationName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LaunchTemplateSpecification LaunchTemplate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MixedInstancesPolicy MixedInstancesPolicy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MinSize { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxSize { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DesiredCapacity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DefaultCooldown { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] AvailabilityZones { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string HealthCheckType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> HealthCheckGracePeriod { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PlacementGroup { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VPCZoneIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] TerminationPolicies { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> NewInstancesProtectedFromScaleIn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ServiceLinkedRoleARN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxInstanceLifetime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> CapacityRebalance { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Context { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DesiredCapacityType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DefaultInstanceWarmup { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// <p>Attaches one or more EC2 instances to the specified Auto Scaling group.</p> <p>When you attach instances, Amazon EC2 Auto Scaling increases the desired capacity of the group by the number of instances being attached. If the number of instances being attached plus the desired capacity of the group exceeds the maximum size of the group, the operation fails.</p> <p>If there is a Classic Load Balancer attached to your Auto Scaling group, the instances are also registered with the load balancer. If there are target groups attached to your Auto Scaling group, the instances are also registered with the target groups.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-instance-asg.html">Attach EC2 instances to your Auto Scaling group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
		/// GET_AttachInstances #Action=AttachInstances
		/// </summary>
		/// <param name="InstanceIds">The IDs of the instances. You can specify up to 20 instances.</param>
		/// <param name="AutoScalingGroupName">The name of the Auto Scaling group.</param>
		/// <returns>Success</returns>
		public async Task GET_AttachInstancesAsync(string[] InstanceIds, string AutoScalingGroupName, GET_AttachInstancesAction Action, GET_AttachInstancesVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=AttachInstances?"+string.Join("&", InstanceIds.Select(z => $"InstanceIds={System.Uri.EscapeDataString(z.ToString())}"))+"&AutoScalingGroupName=" + (AutoScalingGroupName==null? "" : System.Uri.EscapeDataString(AutoScalingGroupName))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <note> <p>This API operation is superseded by <a>AttachTrafficSources</a>, which can attach multiple traffic sources types. We recommend using <code>AttachTrafficSources</code> to simplify how you manage traffic sources. However, we continue to support <code>AttachLoadBalancerTargetGroups</code>. You can use both the original <code>AttachLoadBalancerTargetGroups</code> API operation and <code>AttachTrafficSources</code> on the same Auto Scaling group.</p> </note> <p>Attaches one or more target groups to the specified Auto Scaling group.</p> <p>This operation is used with the following load balancer types: </p> <ul> <li> <p>Application Load Balancer - Operates at the application layer (layer 7) and supports HTTP and HTTPS. </p> </li> <li> <p>Network Load Balancer - Operates at the transport layer (layer 4) and supports TCP, TLS, and UDP. </p> </li> <li> <p>Gateway Load Balancer - Operates at the network layer (layer 3).</p> </li> </ul> <p>To describe the target groups for an Auto Scaling group, call the <a>DescribeLoadBalancerTargetGroups</a> API. To detach the target group from the Auto Scaling group, call the <a>DetachLoadBalancerTargetGroups</a> API.</p> <p>This operation is additive and does not detach existing target groups or Classic Load Balancers from the Auto Scaling group.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-load-balancer.html">Use Elastic Load Balancing to distribute traffic across the instances in your Auto Scaling group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>. </p>
		/// GET_AttachLoadBalancerTargetGroups #Action=AttachLoadBalancerTargetGroups
		/// </summary>
		/// <param name="AutoScalingGroupName">The name of the Auto Scaling group.</param>
		/// <param name="TargetGroupARNs">The Amazon Resource Names (ARNs) of the target groups. You can specify up to 10 target groups. To get the ARN of a target group, use the Elastic Load Balancing <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/APIReference/API_DescribeTargetGroups.html">DescribeTargetGroups</a> API operation.</param>
		/// <returns>Success</returns>
		public async Task GET_AttachLoadBalancerTargetGroupsAsync(string AutoScalingGroupName, string[] TargetGroupARNs, GET_AttachLoadBalancerTargetGroupsAction Action, GET_AttachLoadBalancerTargetGroupsVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=AttachLoadBalancerTargetGroups?AutoScalingGroupName=" + (AutoScalingGroupName==null? "" : System.Uri.EscapeDataString(AutoScalingGroupName))+"&"+string.Join("&", TargetGroupARNs.Select(z => $"TargetGroupARNs={System.Uri.EscapeDataString(z.ToString())}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <note> <p>This API operation is superseded by <a>AttachTrafficSources</a>, which can attach multiple traffic sources types. We recommend using <code>AttachTrafficSources</code> to simplify how you manage traffic sources. However, we continue to support <code>AttachLoadBalancers</code>. You can use both the original <code>AttachLoadBalancers</code> API operation and <code>AttachTrafficSources</code> on the same Auto Scaling group.</p> </note> <p>Attaches one or more Classic Load Balancers to the specified Auto Scaling group. Amazon EC2 Auto Scaling registers the running instances with these Classic Load Balancers.</p> <p>To describe the load balancers for an Auto Scaling group, call the <a>DescribeLoadBalancers</a> API. To detach a load balancer from the Auto Scaling group, call the <a>DetachLoadBalancers</a> API.</p> <p>This operation is additive and does not detach existing Classic Load Balancers or target groups from the Auto Scaling group.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-load-balancer.html">Use Elastic Load Balancing to distribute traffic across the instances in your Auto Scaling group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
		/// GET_AttachLoadBalancers #Action=AttachLoadBalancers
		/// </summary>
		/// <param name="AutoScalingGroupName">The name of the Auto Scaling group.</param>
		/// <param name="LoadBalancerNames">The names of the load balancers. You can specify up to 10 load balancers.</param>
		/// <returns>Success</returns>
		public async Task GET_AttachLoadBalancersAsync(string AutoScalingGroupName, string[] LoadBalancerNames, GET_AttachLoadBalancersAction Action, GET_AttachLoadBalancersVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=AttachLoadBalancers?AutoScalingGroupName=" + (AutoScalingGroupName==null? "" : System.Uri.EscapeDataString(AutoScalingGroupName))+"&"+string.Join("&", LoadBalancerNames.Select(z => $"LoadBalancerNames={System.Uri.EscapeDataString(z.ToString())}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Attaches one or more traffic sources to the specified Auto Scaling group.</p> <p>You can use any of the following as traffic sources for an Auto Scaling group:</p> <ul> <li> <p>Application Load Balancer</p> </li> <li> <p>Classic Load Balancer</p> </li> <li> <p>Gateway Load Balancer</p> </li> <li> <p>Network Load Balancer</p> </li> <li> <p>VPC Lattice</p> </li> </ul> <p>This operation is additive and does not detach existing traffic sources from the Auto Scaling group. </p> <p>After the operation completes, use the <a>DescribeTrafficSources</a> API to return details about the state of the attachments between traffic sources and your Auto Scaling group. To detach a traffic source from the Auto Scaling group, call the <a>DetachTrafficSources</a> API.</p>
		/// GET_AttachTrafficSources #Action=AttachTrafficSources
		/// </summary>
		/// <param name="AutoScalingGroupName">The name of the Auto Scaling group.</param>
		/// <param name="TrafficSources">The unique identifiers of one or more traffic sources. You can specify up to 10 traffic sources.</param>
		/// <returns>Success</returns>
		public async Task GET_AttachTrafficSourcesAsync(string AutoScalingGroupName, TrafficSourceIdentifier[] TrafficSources, GET_AttachTrafficSourcesAction Action, GET_AttachTrafficSourcesVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=AttachTrafficSources?AutoScalingGroupName=" + (AutoScalingGroupName==null? "" : System.Uri.EscapeDataString(AutoScalingGroupName))+"&"+string.Join("&", TrafficSources.Select(z => $"TrafficSources={z}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes one or more scheduled actions for the specified Auto Scaling group.
		/// GET_BatchDeleteScheduledAction #Action=BatchDeleteScheduledAction
		/// </summary>
		/// <param name="AutoScalingGroupName">The name of the Auto Scaling group.</param>
		/// <param name="ScheduledActionNames">The names of the scheduled actions to delete. The maximum number allowed is 50. </param>
		/// <returns>Success</returns>
		public async Task GET_BatchDeleteScheduledActionAsync(string AutoScalingGroupName, string[] ScheduledActionNames, GET_BatchDeleteScheduledActionAction Action, GET_BatchDeleteScheduledActionVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=BatchDeleteScheduledAction?AutoScalingGroupName=" + (AutoScalingGroupName==null? "" : System.Uri.EscapeDataString(AutoScalingGroupName))+"&"+string.Join("&", ScheduledActionNames.Select(z => $"ScheduledActionNames={System.Uri.EscapeDataString(z.ToString())}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates or updates one or more scheduled scaling actions for an Auto Scaling group.
		/// GET_BatchPutScheduledUpdateGroupAction #Action=BatchPutScheduledUpdateGroupAction
		/// </summary>
		/// <param name="AutoScalingGroupName">The name of the Auto Scaling group.</param>
		/// <param name="ScheduledUpdateGroupActions">One or more scheduled actions. The maximum number allowed is 50.</param>
		/// <returns>Success</returns>
		public async Task GET_BatchPutScheduledUpdateGroupActionAsync(string AutoScalingGroupName, ScheduledUpdateGroupActionRequest[] ScheduledUpdateGroupActions, GET_BatchPutScheduledUpdateGroupActionAction Action, GET_BatchPutScheduledUpdateGroupActionVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=BatchPutScheduledUpdateGroupAction?AutoScalingGroupName=" + (AutoScalingGroupName==null? "" : System.Uri.EscapeDataString(AutoScalingGroupName))+"&"+string.Join("&", ScheduledUpdateGroupActions.Select(z => $"ScheduledUpdateGroupActions={z}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Cancels an instance refresh or rollback that is in progress. If an instance refresh or rollback is not in progress, an <code>ActiveInstanceRefreshNotFound</code> error occurs.</p> <p>This operation is part of the <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-instance-refresh.html">instance refresh feature</a> in Amazon EC2 Auto Scaling, which helps you update instances in your Auto Scaling group after you make configuration changes.</p> <p>When you cancel an instance refresh, this does not roll back any changes that it made. Use the <a>RollbackInstanceRefresh</a> API to roll back instead.</p>
		/// GET_CancelInstanceRefresh #Action=CancelInstanceRefresh
		/// </summary>
		/// <param name="AutoScalingGroupName">The name of the Auto Scaling group.</param>
		/// <returns>Success</returns>
		public async Task GET_CancelInstanceRefreshAsync(string AutoScalingGroupName, GET_CancelInstanceRefreshAction Action, GET_CancelInstanceRefreshVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CancelInstanceRefresh?AutoScalingGroupName=" + (AutoScalingGroupName==null? "" : System.Uri.EscapeDataString(AutoScalingGroupName))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Completes the lifecycle action for the specified token or instance with the specified result.</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a launch template or launch configuration with a user data script that runs while an instance is in a wait state due to a lifecycle hook.</p> </li> <li> <p>(Optional) Create a Lambda function and a rule that allows Amazon EventBridge to invoke your Lambda function when an instance is put into a wait state due to a lifecycle hook.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</p> </li> <li> <p>If you need more time, record the lifecycle action heartbeat to keep the instance in a wait state.</p> </li> <li> <p> <b>If you finish before the timeout period ends, send a callback by using the <a>CompleteLifecycleAction</a> API call.</b> </p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/completing-lifecycle-hooks.html">Complete a lifecycle action</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
		/// GET_CompleteLifecycleAction #Action=CompleteLifecycleAction
		/// </summary>
		/// <param name="LifecycleHookName">The name of the lifecycle hook.</param>
		/// <param name="AutoScalingGroupName">The name of the Auto Scaling group.</param>
		/// <param name="LifecycleActionToken">A universally unique identifier (UUID) that identifies a specific lifecycle action associated with an instance. Amazon EC2 Auto Scaling sends this token to the notification target you specified when you created the lifecycle hook.</param>
		/// <param name="LifecycleActionResult">The action for the group to take. You can specify either <code>CONTINUE</code> or <code>ABANDON</code>.</param>
		/// <param name="InstanceId">The ID of the instance.</param>
		/// <returns>Success</returns>
		public async Task GET_CompleteLifecycleActionAsync(string LifecycleHookName, string AutoScalingGroupName, string LifecycleActionToken, string LifecycleActionResult, string InstanceId, GET_CompleteLifecycleActionAction Action, GET_CompleteLifecycleActionVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CompleteLifecycleAction?LifecycleHookName=" + (LifecycleHookName==null? "" : System.Uri.EscapeDataString(LifecycleHookName))+"&AutoScalingGroupName=" + (AutoScalingGroupName==null? "" : System.Uri.EscapeDataString(AutoScalingGroupName))+"&LifecycleActionToken=" + (LifecycleActionToken==null? "" : System.Uri.EscapeDataString(LifecycleActionToken))+"&LifecycleActionResult=" + (LifecycleActionResult==null? "" : System.Uri.EscapeDataString(LifecycleActionResult))+"&InstanceId=" + (InstanceId==null? "" : System.Uri.EscapeDataString(InstanceId))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p> <b>We strongly recommend using a launch template when calling this operation to ensure full functionality for Amazon EC2 Auto Scaling and Amazon EC2.</b> </p> <p>Creates an Auto Scaling group with the specified name and attributes. </p> <p>If you exceed your maximum limit of Auto Scaling groups, the call fails. To query this limit, call the <a>DescribeAccountLimits</a> API. For information about updating this limit, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-quotas.html">Quotas for Amazon EC2 Auto Scaling</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>For introductory exercises for creating an Auto Scaling group, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/GettingStartedTutorial.html">Getting started with Amazon EC2 Auto Scaling</a> and <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-register-lbs-with-asg.html">Tutorial: Set up a scaled and load-balanced application</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/AutoScalingGroup.html">Auto Scaling groups</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>Every Auto Scaling group has three size properties (<code>DesiredCapacity</code>, <code>MaxSize</code>, and <code>MinSize</code>). Usually, you set these sizes based on a specific number of instances. However, if you configure a mixed instances policy that defines weights for the instance types, you must specify these sizes with the same units that you use for weighting instances.</p>
		/// GET_CreateAutoScalingGroup #Action=CreateAutoScalingGroup
		/// </summary>
		/// <param name="AutoScalingGroupName"><p>The name of the Auto Scaling group. This name must be unique per Region per account.</p> <p>The name can contain any ASCII character 33 to 126 including most punctuation characters, digits, and upper and lowercased letters.</p> <note> <p>You cannot use a colon (:) in the name.</p> </note></param>
		/// <param name="LaunchConfigurationName"><p>The name of the launch configuration to use to launch instances. </p> <p>Conditional: You must specify either a launch template (<code>LaunchTemplate</code> or <code>MixedInstancesPolicy</code>) or a launch configuration (<code>LaunchConfigurationName</code> or <code>InstanceId</code>).</p></param>
		/// <param name="LaunchTemplate"><p>Information used to specify the launch template and version to use to launch instances. </p> <p>Conditional: You must specify either a launch template (<code>LaunchTemplate</code> or <code>MixedInstancesPolicy</code>) or a launch configuration (<code>LaunchConfigurationName</code> or <code>InstanceId</code>).</p> <note> <p>The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a launch template for an Auto Scaling group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> </note></param>
		/// <param name="MixedInstancesPolicy">The mixed instances policy. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-mixed-instances-groups.html">Auto Scaling groups with multiple instance types and purchase options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</param>
		/// <param name="InstanceId">The ID of the instance used to base the launch configuration on. If specified, Amazon EC2 Auto Scaling uses the configuration values from the specified instance to create a new launch configuration. To get the instance ID, use the Amazon EC2 <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeInstances.html">DescribeInstances</a> API operation. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-asg-from-instance.html">Creating an Auto Scaling group using an EC2 instance</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</param>
		/// <param name="MinSize">The minimum size of the group.</param>
		/// <param name="MaxSize"><p>The maximum size of the group.</p> <note> <p>With a mixed instances policy that uses instance weighting, Amazon EC2 Auto Scaling may need to go above <code>MaxSize</code> to meet your capacity requirements. In this event, Amazon EC2 Auto Scaling will never go above <code>MaxSize</code> by more than your largest instance weight (weights that define how many units each instance contributes to the desired capacity of the group).</p> </note></param>
		/// <param name="DesiredCapacity">The desired capacity is the initial capacity of the Auto Scaling group at the time of its creation and the capacity it attempts to maintain. It can scale beyond this capacity if you configure auto scaling. This number must be greater than or equal to the minimum size of the group and less than or equal to the maximum size of the group. If you do not specify a desired capacity, the default is the minimum size of the group.</param>
		/// <param name="DefaultCooldown"><p> <i>Only needed if you use simple scaling policies.</i> </p> <p>The amount of time, in seconds, between one scaling activity ending and another one starting due to simple scaling policies. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling cooldowns for Amazon EC2 Auto Scaling</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>Default: <code>300</code> seconds</p></param>
		/// <param name="AvailabilityZones">A list of Availability Zones where instances in the Auto Scaling group can be created. Used for launching into the default VPC subnet in each Availability Zone when not using the <code>VPCZoneIdentifier</code> property, or for attaching a network interface when an existing network interface ID is specified in a launch template.</param>
		/// <param name="LoadBalancerNames">A list of Classic Load Balancers associated with this Auto Scaling group. For Application Load Balancers, Network Load Balancers, and Gateway Load Balancers, specify the <code>TargetGroupARNs</code> property instead.</param>
		/// <param name="TargetGroupARNs">The Amazon Resource Names (ARN) of the Elastic Load Balancing target groups to associate with the Auto Scaling group. Instances are registered as targets with the target groups. The target groups receive incoming traffic and route requests to one or more registered targets. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-load-balancer.html">Use Elastic Load Balancing to distribute traffic across the instances in your Auto Scaling group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</param>
		/// <param name="HealthCheckType"><p>A comma-separated value string of one or more health check types.</p> <p>The valid values are <code>EC2</code>, <code>ELB</code>, and <code>VPC_LATTICE</code>. <code>EC2</code> is the default health check and cannot be disabled. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html">Health checks for Auto Scaling instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>Only specify <code>EC2</code> if you must clear a value that was previously set.</p></param>
		/// <param name="HealthCheckGracePeriod"><p>The amount of time, in seconds, that Amazon EC2 Auto Scaling waits before checking the health status of an EC2 instance that has come into service and marking it unhealthy due to a failed health check. This is useful if your instances do not immediately pass their health checks after they enter the <code>InService</code> state. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/health-check-grace-period.html">Set the health check grace period for an Auto Scaling group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>Default: <code>0</code> seconds</p></param>
		/// <param name="PlacementGroup"><p>The name of the placement group into which to launch your instances. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html">Placement groups</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p> <note> <p>A <i>cluster</i> placement group is a logical grouping of instances within a single Availability Zone. You cannot specify multiple Availability Zones and a cluster placement group. </p> </note></param>
		/// <param name="VPCZoneIdentifier">A comma-separated list of subnet IDs for a virtual private cloud (VPC) where instances in the Auto Scaling group can be created. If you specify <code>VPCZoneIdentifier</code> with <code>AvailabilityZones</code>, the subnets that you specify must reside in those Availability Zones.</param>
		/// <param name="TerminationPolicies"><p>A policy or a list of policies that are used to select the instance to terminate. These policies are executed in the order that you list them. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-termination-policies.html">Work with Amazon EC2 Auto Scaling termination policies</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>Valid values: <code>Default</code> | <code>AllocationStrategy</code> | <code>ClosestToNextInstanceHour</code> | <code>NewestInstance</code> | <code>OldestInstance</code> | <code>OldestLaunchConfiguration</code> | <code>OldestLaunchTemplate</code> | <code>arn:aws:lambda:region:account-id:function:my-function:my-alias</code> </p></param>
		/// <param name="NewInstancesProtectedFromScaleIn">Indicates whether newly launched instances are protected from termination by Amazon EC2 Auto Scaling when scaling in. For more information about preventing instances from terminating on scale in, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-instance-protection.html">Using instance scale-in protection</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</param>
		/// <param name="CapacityRebalance">Indicates whether Capacity Rebalancing is enabled. Otherwise, Capacity Rebalancing is disabled. When you turn on Capacity Rebalancing, Amazon EC2 Auto Scaling attempts to launch a Spot Instance whenever Amazon EC2 notifies that a Spot Instance is at an elevated risk of interruption. After launching a new instance, it then terminates an old instance. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-capacity-rebalancing.html">Use Capacity Rebalancing to handle Amazon EC2 Spot Interruptions</a> in the in the <i>Amazon EC2 Auto Scaling User Guide</i>.</param>
		/// <param name="LifecycleHookSpecificationList">One or more lifecycle hooks to add to the Auto Scaling group before instances are launched.</param>
		/// <param name="Tags">One or more tags. You can tag your Auto Scaling group and propagate the tags to the Amazon EC2 instances it launches. Tags are not propagated to Amazon EBS volumes. To add tags to Amazon EBS volumes, specify the tags in a launch template but use caution. If the launch template specifies an instance tag with a key that is also specified for the Auto Scaling group, Amazon EC2 Auto Scaling overrides the value of that instance tag with the value specified by the Auto Scaling group. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-tagging.html">Tag Auto Scaling groups and instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</param>
		/// <param name="ServiceLinkedRoleARN">The Amazon Resource Name (ARN) of the service-linked role that the Auto Scaling group uses to call other Amazon Web Services service on your behalf. By default, Amazon EC2 Auto Scaling uses a service-linked role named <code>AWSServiceRoleForAutoScaling</code>, which it creates if it does not exist. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-service-linked-role.html">Service-linked roles</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</param>
		/// <param name="MaxInstanceLifetime">The maximum amount of time, in seconds, that an instance can be in service. The default is null. If specified, the value must be either 0 or a number equal to or greater than 86,400 seconds (1 day). For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-max-instance-lifetime.html">Replacing Auto Scaling instances based on maximum instance lifetime</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</param>
		/// <param name="Context">Reserved.</param>
		/// <param name="DesiredCapacityType"><p>The unit of measurement for the value specified for desired capacity. Amazon EC2 Auto Scaling supports <code>DesiredCapacityType</code> for attribute-based instance type selection only. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-asg-instance-type-requirements.html">Creating an Auto Scaling group using attribute-based instance type selection</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>By default, Amazon EC2 Auto Scaling specifies <code>units</code>, which translates into number of instances.</p> <p>Valid values: <code>units</code> | <code>vcpu</code> | <code>memory-mib</code> </p></param>
		/// <param name="DefaultInstanceWarmup"><p>The amount of time, in seconds, until a new instance is considered to have finished initializing and resource consumption to become stable after it enters the <code>InService</code> state. </p> <p>During an instance refresh, Amazon EC2 Auto Scaling waits for the warm-up period after it replaces an instance before it moves on to replacing the next instance. Amazon EC2 Auto Scaling also waits for the warm-up period before aggregating the metrics for new instances with existing instances in the Amazon CloudWatch metrics that are used for scaling, resulting in more reliable usage data. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-default-instance-warmup.html">Set the default instance warmup for an Auto Scaling group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <important> <p>To manage various warm-up settings at the group level, we recommend that you set the default instance warmup, <i>even if it is set to 0 seconds</i>. To remove a value that you previously set, include the property but specify <code>-1</code> for the value. However, we strongly recommend keeping the default instance warmup enabled by specifying a value of <code>0</code> or other nominal value.</p> </important> <p>Default: None </p></param>
		/// <param name="TrafficSources">The list of traffic sources to attach to this Auto Scaling group. You can use any of the following as traffic sources for an Auto Scaling group: Classic Load Balancer, Application Load Balancer, Gateway Load Balancer, Network Load Balancer, and VPC Lattice.</param>
		/// <returns>Success</returns>
		public async Task GET_CreateAutoScalingGroupAsync(
					string AutoScalingGroupName, 
					string LaunchConfigurationName, 
					GET_CreateAutoScalingGroupLaunchTemplate LaunchTemplate, 
					GET_CreateAutoScalingGroupMixedInstancesPolicy MixedInstancesPolicy, 
					string InstanceId, 
					int MinSize, 
					int MaxSize, 
					int DesiredCapacity, 
					int DefaultCooldown, 
					string[] AvailabilityZones, 
					string[] LoadBalancerNames, 
					string[] TargetGroupARNs, 
					string HealthCheckType, 
					int HealthCheckGracePeriod, 
					string PlacementGroup, 
					string VPCZoneIdentifier, 
					string[] TerminationPolicies, 
					bool NewInstancesProtectedFromScaleIn, 
					bool CapacityRebalance, 
					LifecycleHookSpecification[] LifecycleHookSpecificationList, 
					Tag[] Tags, 
					string ServiceLinkedRoleARN, 
					int MaxInstanceLifetime, 
					string Context, 
					string DesiredCapacityType, 
					int DefaultInstanceWarmup, 
					TrafficSourceIdentifier[] TrafficSources, 
					GET_CreateAutoScalingGroupAction Action, 
					GET_CreateAutoScalingGroupVersion Version, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateAutoScalingGroup?AutoScalingGroupName=" + (AutoScalingGroupName==null? "" : System.Uri.EscapeDataString(AutoScalingGroupName))+"&LaunchConfigurationName=" + (LaunchConfigurationName==null? "" : System.Uri.EscapeDataString(LaunchConfigurationName))+"&LaunchTemplate=" + LaunchTemplate+"&MixedInstancesPolicy=" + MixedInstancesPolicy+"&InstanceId=" + (InstanceId==null? "" : System.Uri.EscapeDataString(InstanceId))+"&MinSize="+MinSize+"&MaxSize="+MaxSize+"&DesiredCapacity="+DesiredCapacity+"&DefaultCooldown="+DefaultCooldown+"&"+string.Join("&", AvailabilityZones.Select(z => $"AvailabilityZones={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", LoadBalancerNames.Select(z => $"LoadBalancerNames={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", TargetGroupARNs.Select(z => $"TargetGroupARNs={System.Uri.EscapeDataString(z.ToString())}"))+"&HealthCheckType=" + (HealthCheckType==null? "" : System.Uri.EscapeDataString(HealthCheckType))+"&HealthCheckGracePeriod="+HealthCheckGracePeriod+"&PlacementGroup=" + (PlacementGroup==null? "" : System.Uri.EscapeDataString(PlacementGroup))+"&VPCZoneIdentifier=" + (VPCZoneIdentifier==null? "" : System.Uri.EscapeDataString(VPCZoneIdentifier))+"&"+string.Join("&", TerminationPolicies.Select(z => $"TerminationPolicies={System.Uri.EscapeDataString(z.ToString())}"))+"&NewInstancesProtectedFromScaleIn="+NewInstancesProtectedFromScaleIn+"&CapacityRebalance="+CapacityRebalance+"&"+string.Join("&", LifecycleHookSpecificationList.Select(z => $"LifecycleHookSpecificationList={z}"))+"&"+string.Join("&", Tags.Select(z => $"Tags={z}"))+"&ServiceLinkedRoleARN=" + (ServiceLinkedRoleARN==null? "" : System.Uri.EscapeDataString(ServiceLinkedRoleARN))+"&MaxInstanceLifetime="+MaxInstanceLifetime+"&Context=" + (Context==null? "" : System.Uri.EscapeDataString(Context))+"&DesiredCapacityType=" + (DesiredCapacityType==null? "" : System.Uri.EscapeDataString(DesiredCapacityType))+"&DefaultInstanceWarmup="+DefaultInstanceWarmup+"&"+string.Join("&", TrafficSources.Select(z => $"TrafficSources={z}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a launch configuration.</p> <p>If you exceed your maximum limit of launch configurations, the call fails. To query this limit, call the <a>DescribeAccountLimits</a> API. For information about updating this limit, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-quotas.html">Quotas for Amazon EC2 Auto Scaling</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/LaunchConfiguration.html">Launch configurations</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <note> <p>Amazon EC2 Auto Scaling configures instances launched as part of an Auto Scaling group using either a launch template or a launch configuration. We strongly recommend that you do not use launch configurations. They do not provide full functionality for Amazon EC2 Auto Scaling or Amazon EC2. For information about using launch templates, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/launch-templates.html">Launch templates</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> </note>
		/// GET_CreateLaunchConfiguration #Action=CreateLaunchConfiguration
		/// </summary>
		/// <param name="LaunchConfigurationName">The name of the launch configuration. This name must be unique per Region per account.</param>
		/// <param name="ImageId"><p>The ID of the Amazon Machine Image (AMI) that was assigned during registration. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/finding-an-ami.html">Finding a Linux AMI</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p> <p>If you specify <code>InstanceId</code>, an <code>ImageId</code> is not required.</p></param>
		/// <param name="KeyName">The name of the key pair. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html">Amazon EC2 key pairs and Linux instances</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</param>
		/// <param name="SecurityGroups">A list that contains the security group IDs to assign to the instances in the Auto Scaling group. For more information, see <a href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_SecurityGroups.html">Control traffic to resources using security groups</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</param>
		/// <param name="ClassicLinkVPCId">Available for backward compatibility.</param>
		/// <param name="ClassicLinkVPCSecurityGroups">Available for backward compatibility.</param>
		/// <param name="UserData">The user data to make available to the launched EC2 instances. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html">Instance metadata and user data</a> (Linux) and <a href="https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ec2-instance-metadata.html">Instance metadata and user data</a> (Windows). If you are using a command line tool, base64-encoding is performed for you, and you can load the text from a file. Otherwise, you must provide base64-encoded text. User data is limited to 16 KB.</param>
		/// <param name="InstanceId"><p>The ID of the instance to use to create the launch configuration. The new launch configuration derives attributes from the instance, except for the block device mapping.</p> <p>To create a launch configuration with a block device mapping or override any other instance attributes, specify them as part of the same request.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-lc-with-instanceID.html">Creating a launch configuration using an EC2 instance</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p></param>
		/// <param name="InstanceType"><p>Specifies the instance type of the EC2 instance. For information about available instance types, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#AvailableInstanceTypes">Available instance types</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p> <p>If you specify <code>InstanceId</code>, an <code>InstanceType</code> is not required.</p></param>
		/// <param name="KernelId"><p>The ID of the kernel associated with the AMI.</p> <note> <p>We recommend that you use PV-GRUB instead of kernels and RAM disks. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/UserProvidedKernels.html">User provided kernels</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p> </note></param>
		/// <param name="RamdiskId"><p>The ID of the RAM disk to select.</p> <note> <p>We recommend that you use PV-GRUB instead of kernels and RAM disks. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/UserProvidedKernels.html">User provided kernels</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p> </note></param>
		/// <param name="BlockDeviceMappings">The block device mapping entries that define the block devices to attach to the instances at launch. By default, the block devices specified in the block device mapping for the AMI are used. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/block-device-mapping-concepts.html">Block device mappings</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</param>
		/// <param name="InstanceMonitoring"><p>Controls whether instances in this group are launched with detailed (<code>true</code>) or basic (<code>false</code>) monitoring.</p> <p>The default value is <code>true</code> (enabled).</p> <important> <p>When detailed monitoring is enabled, Amazon CloudWatch generates metrics every minute and your account is charged a fee. When you disable detailed monitoring, CloudWatch generates metrics every 5 minutes. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/latest/userguide/enable-as-instance-metrics.html">Configure Monitoring for Auto Scaling Instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> </important></param>
		/// <param name="SpotPrice"><p>The maximum hourly price to be paid for any Spot Instance launched to fulfill the request. Spot Instances are launched when the price you specify exceeds the current Spot price. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/launch-template-spot-instances.html">Request Spot Instances for fault-tolerant and flexible applications</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>Valid Range: Minimum value of 0.001</p> <note> <p>When you change your maximum price by creating a new launch configuration, running instances will continue to run as long as the maximum price for those running instances is higher than the current Spot price.</p> </note></param>
		/// <param name="IamInstanceProfile">The name or the Amazon Resource Name (ARN) of the instance profile associated with the IAM role for the instance. The instance profile contains the IAM role. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/us-iam-role.html">IAM role for applications that run on Amazon EC2 instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</param>
		/// <param name="EbsOptimized"><p>Specifies whether the launch configuration is optimized for EBS I/O (<code>true</code>) or not (<code>false</code>). The optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal I/O performance. This optimization is not available with all instance types. Additional fees are incurred when you enable EBS optimization for an instance type that is not EBS-optimized by default. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSOptimized.html">Amazon EBS-optimized instances</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p> <p>The default value is <code>false</code>.</p></param>
		/// <param name="AssociatePublicIpAddress"><p>Specifies whether to assign a public IPv4 address to the group's instances. If the instance is launched into a default subnet, the default is to assign a public IPv4 address, unless you disabled the option to assign a public IPv4 address on the subnet. If the instance is launched into a nondefault subnet, the default is not to assign a public IPv4 address, unless you enabled the option to assign a public IPv4 address on the subnet.</p> <p>If you specify <code>true</code>, each instance in the Auto Scaling group receives a unique public IPv4 address. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html">Launching Auto Scaling instances in a VPC</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you specify this property, you must specify at least one subnet for <code>VPCZoneIdentifier</code> when you create your group.</p></param>
		/// <param name="PlacementTenancy"><p>The tenancy of the instance, either <code>default</code> or <code>dedicated</code>. An instance with <code>dedicated</code> tenancy runs on isolated, single-tenant hardware and can only be launched into a VPC. To launch dedicated instances into a shared tenancy VPC (a VPC with the instance placement tenancy attribute set to <code>default</code>), you must set the value of this property to <code>dedicated</code>. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/auto-scaling-dedicated-instances.html">Configuring instance tenancy with Amazon EC2 Auto Scaling</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you specify <code>PlacementTenancy</code>, you must specify at least one subnet for <code>VPCZoneIdentifier</code> when you create your group.</p> <p>Valid values: <code>default</code> | <code>dedicated</code> </p></param>
		/// <param name="MetadataOptions">The metadata options for the instances. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-config.html#launch-configurations-imds">Configuring the Instance Metadata Options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</param>
		/// <returns>Success</returns>
		public async Task GET_CreateLaunchConfigurationAsync(
					string LaunchConfigurationName, 
					string ImageId, 
					string KeyName, 
					string[] SecurityGroups, 
					string ClassicLinkVPCId, 
					string[] ClassicLinkVPCSecurityGroups, 
					string UserData, 
					string InstanceId, 
					string InstanceType, 
					string KernelId, 
					string RamdiskId, 
					BlockDeviceMapping[] BlockDeviceMappings, 
					GET_CreateLaunchConfigurationInstanceMonitoring InstanceMonitoring, 
					string SpotPrice, 
					string IamInstanceProfile, 
					bool EbsOptimized, 
					bool AssociatePublicIpAddress, 
					string PlacementTenancy, 
					GET_CreateLaunchConfigurationMetadataOptions MetadataOptions, 
					GET_CreateLaunchConfigurationAction Action, 
					GET_CreateLaunchConfigurationVersion Version, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateLaunchConfiguration?LaunchConfigurationName=" + (LaunchConfigurationName==null? "" : System.Uri.EscapeDataString(LaunchConfigurationName))+"&ImageId=" + (ImageId==null? "" : System.Uri.EscapeDataString(ImageId))+"&KeyName=" + (KeyName==null? "" : System.Uri.EscapeDataString(KeyName))+"&"+string.Join("&", SecurityGroups.Select(z => $"SecurityGroups={System.Uri.EscapeDataString(z.ToString())}"))+"&ClassicLinkVPCId=" + (ClassicLinkVPCId==null? "" : System.Uri.EscapeDataString(ClassicLinkVPCId))+"&"+string.Join("&", ClassicLinkVPCSecurityGroups.Select(z => $"ClassicLinkVPCSecurityGroups={System.Uri.EscapeDataString(z.ToString())}"))+"&UserData=" + (UserData==null? "" : System.Uri.EscapeDataString(UserData))+"&InstanceId=" + (InstanceId==null? "" : System.Uri.EscapeDataString(InstanceId))+"&InstanceType=" + (InstanceType==null? "" : System.Uri.EscapeDataString(InstanceType))+"&KernelId=" + (KernelId==null? "" : System.Uri.EscapeDataString(KernelId))+"&RamdiskId=" + (RamdiskId==null? "" : System.Uri.EscapeDataString(RamdiskId))+"&"+string.Join("&", BlockDeviceMappings.Select(z => $"BlockDeviceMappings={z}"))+"&InstanceMonitoring=" + InstanceMonitoring+"&SpotPrice=" + (SpotPrice==null? "" : System.Uri.EscapeDataString(SpotPrice))+"&IamInstanceProfile=" + (IamInstanceProfile==null? "" : System.Uri.EscapeDataString(IamInstanceProfile))+"&EbsOptimized="+EbsOptimized+"&AssociatePublicIpAddress="+AssociatePublicIpAddress+"&PlacementTenancy=" + (PlacementTenancy==null? "" : System.Uri.EscapeDataString(PlacementTenancy))+"&MetadataOptions=" + MetadataOptions+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates or updates tags for the specified Auto Scaling group.</p> <p>When you specify a tag with a key that already exists, the operation overwrites the previous tag definition, and you do not get an error message.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-tagging.html">Tag Auto Scaling groups and instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
		/// GET_CreateOrUpdateTags #Action=CreateOrUpdateTags
		/// </summary>
		/// <param name="Tags">One or more tags.</param>
		/// <returns>Success</returns>
		public async Task GET_CreateOrUpdateTagsAsync(Tag[] Tags, GET_CreateOrUpdateTagsAction Action, GET_CreateOrUpdateTagsVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateOrUpdateTags?"+string.Join("&", Tags.Select(z => $"Tags={z}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes the specified Auto Scaling group.</p> <p>If the group has instances or scaling activities in progress, you must specify the option to force the deletion in order for it to succeed. The force delete operation will also terminate the EC2 instances. If the group has a warm pool, the force delete option also deletes the warm pool.</p> <p>To remove instances from the Auto Scaling group before deleting it, call the <a>DetachInstances</a> API with the list of instances and the option to decrement the desired capacity. This ensures that Amazon EC2 Auto Scaling does not launch replacement instances.</p> <p>To terminate all instances before deleting the Auto Scaling group, call the <a>UpdateAutoScalingGroup</a> API and set the minimum size and desired capacity of the Auto Scaling group to zero.</p> <p>If the group has scaling policies, deleting the group deletes the policies, the underlying alarm actions, and any alarm that no longer has an associated action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-process-shutdown.html">Delete your Auto Scaling infrastructure</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
		/// GET_DeleteAutoScalingGroup #Action=DeleteAutoScalingGroup
		/// </summary>
		/// <param name="AutoScalingGroupName">The name of the Auto Scaling group.</param>
		/// <param name="ForceDelete">Specifies that the group is to be deleted along with all instances associated with the group, without waiting for all instances to be terminated. This action also deletes any outstanding lifecycle actions associated with the group.</param>
		/// <returns>Success</returns>
		public async Task GET_DeleteAutoScalingGroupAsync(string AutoScalingGroupName, bool ForceDelete, GET_DeleteAutoScalingGroupAction Action, GET_DeleteAutoScalingGroupVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteAutoScalingGroup?AutoScalingGroupName=" + (AutoScalingGroupName==null? "" : System.Uri.EscapeDataString(AutoScalingGroupName))+"&ForceDelete="+ForceDelete+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes the specified launch configuration.</p> <p>The launch configuration must not be attached to an Auto Scaling group. When this call completes, the launch configuration is no longer available for use.</p>
		/// GET_DeleteLaunchConfiguration #Action=DeleteLaunchConfiguration
		/// </summary>
		/// <param name="LaunchConfigurationName">The name of the launch configuration.</param>
		/// <returns>Success</returns>
		public async Task GET_DeleteLaunchConfigurationAsync(string LaunchConfigurationName, GET_DeleteLaunchConfigurationAction Action, GET_DeleteLaunchConfigurationVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteLaunchConfiguration?LaunchConfigurationName=" + (LaunchConfigurationName==null? "" : System.Uri.EscapeDataString(LaunchConfigurationName))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes the specified lifecycle hook.</p> <p>If there are any outstanding lifecycle actions, they are completed first (<code>ABANDON</code> for launching instances, <code>CONTINUE</code> for terminating instances).</p>
		/// GET_DeleteLifecycleHook #Action=DeleteLifecycleHook
		/// </summary>
		/// <param name="LifecycleHookName">The name of the lifecycle hook.</param>
		/// <param name="AutoScalingGroupName">The name of the Auto Scaling group.</param>
		/// <returns>Success</returns>
		public async Task GET_DeleteLifecycleHookAsync(string LifecycleHookName, string AutoScalingGroupName, GET_DeleteLifecycleHookAction Action, GET_DeleteLifecycleHookVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteLifecycleHook?LifecycleHookName=" + (LifecycleHookName==null? "" : System.Uri.EscapeDataString(LifecycleHookName))+"&AutoScalingGroupName=" + (AutoScalingGroupName==null? "" : System.Uri.EscapeDataString(AutoScalingGroupName))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified notification.
		/// GET_DeleteNotificationConfiguration #Action=DeleteNotificationConfiguration
		/// </summary>
		/// <param name="AutoScalingGroupName">The name of the Auto Scaling group.</param>
		/// <param name="TopicARN">The Amazon Resource Name (ARN) of the Amazon SNS topic.</param>
		/// <returns>Success</returns>
		public async Task GET_DeleteNotificationConfigurationAsync(string AutoScalingGroupName, string TopicARN, GET_DeleteNotificationConfigurationAction Action, GET_DeleteNotificationConfigurationVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteNotificationConfiguration?AutoScalingGroupName=" + (AutoScalingGroupName==null? "" : System.Uri.EscapeDataString(AutoScalingGroupName))+"&TopicARN=" + (TopicARN==null? "" : System.Uri.EscapeDataString(TopicARN))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes the specified scaling policy.</p> <p>Deleting either a step scaling policy or a simple scaling policy deletes the underlying alarm action, but does not delete the alarm, even if it no longer has an associated action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/deleting-scaling-policy.html">Deleting a scaling policy</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
		/// GET_DeletePolicy #Action=DeletePolicy
		/// </summary>
		/// <param name="AutoScalingGroupName">The name of the Auto Scaling group.</param>
		/// <param name="PolicyName">The name or Amazon Resource Name (ARN) of the policy.</param>
		/// <returns>Success</returns>
		public async Task GET_DeletePolicyAsync(string AutoScalingGroupName, string PolicyName, GET_DeletePolicyAction Action, GET_DeletePolicyVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeletePolicy?AutoScalingGroupName=" + (AutoScalingGroupName==null? "" : System.Uri.EscapeDataString(AutoScalingGroupName))+"&PolicyName=" + (PolicyName==null? "" : System.Uri.EscapeDataString(PolicyName))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified scheduled action.
		/// GET_DeleteScheduledAction #Action=DeleteScheduledAction
		/// </summary>
		/// <param name="AutoScalingGroupName">The name of the Auto Scaling group.</param>
		/// <param name="ScheduledActionName">The name of the action to delete.</param>
		/// <returns>Success</returns>
		public async Task GET_DeleteScheduledActionAsync(string AutoScalingGroupName, string ScheduledActionName, GET_DeleteScheduledActionAction Action, GET_DeleteScheduledActionVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteScheduledAction?AutoScalingGroupName=" + (AutoScalingGroupName==null? "" : System.Uri.EscapeDataString(AutoScalingGroupName))+"&ScheduledActionName=" + (ScheduledActionName==null? "" : System.Uri.EscapeDataString(ScheduledActionName))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified tags.
		/// GET_DeleteTags #Action=DeleteTags
		/// </summary>
		/// <param name="Tags">One or more tags.</param>
		/// <returns>Success</returns>
		public async Task GET_DeleteTagsAsync(Tag[] Tags, GET_DeleteTagsAction Action, GET_DeleteTagsVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteTags?"+string.Join("&", Tags.Select(z => $"Tags={z}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes the warm pool for the specified Auto Scaling group.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-warm-pools.html">Warm pools for Amazon EC2 Auto Scaling</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
		/// GET_DeleteWarmPool #Action=DeleteWarmPool
		/// </summary>
		/// <param name="AutoScalingGroupName">The name of the Auto Scaling group.</param>
		/// <param name="ForceDelete">Specifies that the warm pool is to be deleted along with all of its associated instances, without waiting for all instances to be terminated. This parameter also deletes any outstanding lifecycle actions associated with the warm pool instances.</param>
		/// <returns>Success</returns>
		public async Task GET_DeleteWarmPoolAsync(string AutoScalingGroupName, bool ForceDelete, GET_DeleteWarmPoolAction Action, GET_DeleteWarmPoolVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteWarmPool?AutoScalingGroupName=" + (AutoScalingGroupName==null? "" : System.Uri.EscapeDataString(AutoScalingGroupName))+"&ForceDelete="+ForceDelete+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Describes the current Amazon EC2 Auto Scaling resource quotas for your account.</p> <p>When you establish an Amazon Web Services account, the account has initial quotas on the maximum number of Auto Scaling groups and launch configurations that you can create in a given Region. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-quotas.html">Quotas for Amazon EC2 Auto Scaling</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
		/// GET_DescribeAccountLimits #Action=DescribeAccountLimits
		/// </summary>
		/// <returns>Success</returns>
		public async Task GET_DescribeAccountLimitsAsync(GET_DescribeAccountLimitsAction Action, GET_DescribeAccountLimitsVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeAccountLimits?Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Describes the current Amazon EC2 Auto Scaling resource quotas for your account.</p> <p>When you establish an Amazon Web Services account, the account has initial quotas on the maximum number of Auto Scaling groups and launch configurations that you can create in a given Region. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-quotas.html">Quotas for Amazon EC2 Auto Scaling</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
		/// POST_DescribeAccountLimits #Action=DescribeAccountLimits
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_DescribeAccountLimitsAsync(GET_DescribeAccountLimitsAction Action, POST_DescribeAccountLimitsVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeAccountLimits?Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Describes the available adjustment types for step scaling and simple scaling policies.</p> <p>The following adjustment types are supported:</p> <ul> <li> <p> <code>ChangeInCapacity</code> </p> </li> <li> <p> <code>ExactCapacity</code> </p> </li> <li> <p> <code>PercentChangeInCapacity</code> </p> </li> </ul>
		/// GET_DescribeAdjustmentTypes #Action=DescribeAdjustmentTypes
		/// </summary>
		/// <returns>Success</returns>
		public async Task GET_DescribeAdjustmentTypesAsync(GET_DescribeAdjustmentTypesAction Action, GET_DescribeAdjustmentTypesVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeAdjustmentTypes?Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Describes the available adjustment types for step scaling and simple scaling policies.</p> <p>The following adjustment types are supported:</p> <ul> <li> <p> <code>ChangeInCapacity</code> </p> </li> <li> <p> <code>ExactCapacity</code> </p> </li> <li> <p> <code>PercentChangeInCapacity</code> </p> </li> </ul>
		/// POST_DescribeAdjustmentTypes #Action=DescribeAdjustmentTypes
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_DescribeAdjustmentTypesAsync(GET_DescribeAdjustmentTypesAction Action, POST_DescribeAdjustmentTypesVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeAdjustmentTypes?Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Gets information about the Auto Scaling groups in the account and Region.</p> <p>If you specify Auto Scaling group names, the output includes information for only the specified Auto Scaling groups. If you specify filters, the output includes information for only those Auto Scaling groups that meet the filter criteria. If you do not specify group names or filters, the output includes information for all Auto Scaling groups. </p> <p>This operation also returns information about instances in Auto Scaling groups. To retrieve information about the instances in a warm pool, you must call the <a>DescribeWarmPool</a> API. </p>
		/// GET_DescribeAutoScalingGroups #Action=DescribeAutoScalingGroups
		/// </summary>
		/// <param name="AutoScalingGroupNames"><p>The names of the Auto Scaling groups. By default, you can only specify up to 50 names. You can optionally increase this limit using the <code>MaxRecords</code> property.</p> <p>If you omit this property, all Auto Scaling groups are described.</p></param>
		/// <param name="NextToken">The token for the next set of items to return. (You received this token from a previous call.)</param>
		/// <param name="MaxRecords">The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.</param>
		/// <param name="Filters">One or more filters to limit the results based on specific tags. </param>
		/// <returns>Success</returns>
		public async Task GET_DescribeAutoScalingGroupsAsync(string[] AutoScalingGroupNames, string NextToken, int MaxRecords, Filter[] Filters, GET_DescribeAutoScalingGroupsAction Action, GET_DescribeAutoScalingGroupsVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeAutoScalingGroups?"+string.Join("&", AutoScalingGroupNames.Select(z => $"AutoScalingGroupNames={System.Uri.EscapeDataString(z.ToString())}"))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken))+"&MaxRecords="+MaxRecords+"&"+string.Join("&", Filters.Select(z => $"Filters={z}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about the Auto Scaling instances in the account and Region.
		/// GET_DescribeAutoScalingInstances #Action=DescribeAutoScalingInstances
		/// </summary>
		/// <param name="InstanceIds"><p>The IDs of the instances. If you omit this property, all Auto Scaling instances are described. If you specify an ID that does not exist, it is ignored with no error.</p> <p>Array Members: Maximum number of 50 items.</p></param>
		/// <param name="MaxRecords">The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>50</code>.</param>
		/// <param name="NextToken">The token for the next set of items to return. (You received this token from a previous call.)</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeAutoScalingInstancesAsync(string[] InstanceIds, int MaxRecords, string NextToken, GET_DescribeAutoScalingInstancesAction Action, GET_DescribeAutoScalingInstancesVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeAutoScalingInstances?"+string.Join("&", InstanceIds.Select(z => $"InstanceIds={System.Uri.EscapeDataString(z.ToString())}"))+"&MaxRecords="+MaxRecords+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes the notification types that are supported by Amazon EC2 Auto Scaling.
		/// GET_DescribeAutoScalingNotificationTypes #Action=DescribeAutoScalingNotificationTypes
		/// </summary>
		/// <returns>Success</returns>
		public async Task GET_DescribeAutoScalingNotificationTypesAsync(GET_DescribeAutoScalingNotificationTypesAction Action, GET_DescribeAutoScalingNotificationTypesVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeAutoScalingNotificationTypes?Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes the notification types that are supported by Amazon EC2 Auto Scaling.
		/// POST_DescribeAutoScalingNotificationTypes #Action=DescribeAutoScalingNotificationTypes
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_DescribeAutoScalingNotificationTypesAsync(GET_DescribeAutoScalingNotificationTypesAction Action, POST_DescribeAutoScalingNotificationTypesVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeAutoScalingNotificationTypes?Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Gets information about the instance refreshes for the specified Auto Scaling group.</p> <p>This operation is part of the <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-instance-refresh.html">instance refresh feature</a> in Amazon EC2 Auto Scaling, which helps you update instances in your Auto Scaling group after you make configuration changes.</p> <p>To help you determine the status of an instance refresh, Amazon EC2 Auto Scaling returns information about the instance refreshes you previously initiated, including their status, start time, end time, the percentage of the instance refresh that is complete, and the number of instances remaining to update before the instance refresh is complete. If a rollback is initiated while an instance refresh is in progress, Amazon EC2 Auto Scaling also returns information about the rollback of the instance refresh.</p>
		/// GET_DescribeInstanceRefreshes #Action=DescribeInstanceRefreshes
		/// </summary>
		/// <param name="AutoScalingGroupName">The name of the Auto Scaling group.</param>
		/// <param name="InstanceRefreshIds">One or more instance refresh IDs.</param>
		/// <param name="NextToken">The token for the next set of items to return. (You received this token from a previous call.)</param>
		/// <param name="MaxRecords">The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeInstanceRefreshesAsync(string AutoScalingGroupName, string[] InstanceRefreshIds, string NextToken, int MaxRecords, GET_DescribeInstanceRefreshesAction Action, GET_DescribeInstanceRefreshesVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeInstanceRefreshes?AutoScalingGroupName=" + (AutoScalingGroupName==null? "" : System.Uri.EscapeDataString(AutoScalingGroupName))+"&"+string.Join("&", InstanceRefreshIds.Select(z => $"InstanceRefreshIds={System.Uri.EscapeDataString(z.ToString())}"))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken))+"&MaxRecords="+MaxRecords+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about the launch configurations in the account and Region.
		/// GET_DescribeLaunchConfigurations #Action=DescribeLaunchConfigurations
		/// </summary>
		/// <param name="LaunchConfigurationNames"><p>The launch configuration names. If you omit this property, all launch configurations are described.</p> <p>Array Members: Maximum number of 50 items.</p></param>
		/// <param name="NextToken">The token for the next set of items to return. (You received this token from a previous call.)</param>
		/// <param name="MaxRecords">The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeLaunchConfigurationsAsync(string[] LaunchConfigurationNames, string NextToken, int MaxRecords, GET_DescribeLaunchConfigurationsAction Action, GET_DescribeLaunchConfigurationsVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeLaunchConfigurations?"+string.Join("&", LaunchConfigurationNames.Select(z => $"LaunchConfigurationNames={System.Uri.EscapeDataString(z.ToString())}"))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken))+"&MaxRecords="+MaxRecords+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Describes the available types of lifecycle hooks.</p> <p>The following hook types are supported:</p> <ul> <li> <p> <code>autoscaling:EC2_INSTANCE_LAUNCHING</code> </p> </li> <li> <p> <code>autoscaling:EC2_INSTANCE_TERMINATING</code> </p> </li> </ul>
		/// GET_DescribeLifecycleHookTypes #Action=DescribeLifecycleHookTypes
		/// </summary>
		/// <returns>Success</returns>
		public async Task GET_DescribeLifecycleHookTypesAsync(GET_DescribeLifecycleHookTypesAction Action, GET_DescribeLifecycleHookTypesVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeLifecycleHookTypes?Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Describes the available types of lifecycle hooks.</p> <p>The following hook types are supported:</p> <ul> <li> <p> <code>autoscaling:EC2_INSTANCE_LAUNCHING</code> </p> </li> <li> <p> <code>autoscaling:EC2_INSTANCE_TERMINATING</code> </p> </li> </ul>
		/// POST_DescribeLifecycleHookTypes #Action=DescribeLifecycleHookTypes
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_DescribeLifecycleHookTypesAsync(GET_DescribeLifecycleHookTypesAction Action, POST_DescribeLifecycleHookTypesVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeLifecycleHookTypes?Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about the lifecycle hooks for the specified Auto Scaling group.
		/// GET_DescribeLifecycleHooks #Action=DescribeLifecycleHooks
		/// </summary>
		/// <param name="AutoScalingGroupName">The name of the Auto Scaling group.</param>
		/// <param name="LifecycleHookNames">The names of one or more lifecycle hooks. If you omit this property, all lifecycle hooks are described.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeLifecycleHooksAsync(string AutoScalingGroupName, string[] LifecycleHookNames, GET_DescribeLifecycleHooksAction Action, GET_DescribeLifecycleHooksVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeLifecycleHooks?AutoScalingGroupName=" + (AutoScalingGroupName==null? "" : System.Uri.EscapeDataString(AutoScalingGroupName))+"&"+string.Join("&", LifecycleHookNames.Select(z => $"LifecycleHookNames={System.Uri.EscapeDataString(z.ToString())}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <note> <p>This API operation is superseded by <a>DescribeTrafficSources</a>, which can describe multiple traffic sources types. We recommend using <code>DetachTrafficSources</code> to simplify how you manage traffic sources. However, we continue to support <code>DescribeLoadBalancerTargetGroups</code>. You can use both the original <code>DescribeLoadBalancerTargetGroups</code> API operation and <code>DescribeTrafficSources</code> on the same Auto Scaling group.</p> </note> <p>Gets information about the Elastic Load Balancing target groups for the specified Auto Scaling group.</p> <p>To determine the attachment status of the target group, use the <code>State</code> element in the response. When you attach a target group to an Auto Scaling group, the initial <code>State</code> value is <code>Adding</code>. The state transitions to <code>Added</code> after all Auto Scaling instances are registered with the target group. If Elastic Load Balancing health checks are enabled for the Auto Scaling group, the state transitions to <code>InService</code> after at least one Auto Scaling instance passes the health check. When the target group is in the <code>InService</code> state, Amazon EC2 Auto Scaling can terminate and replace any instances that are reported as unhealthy. If no registered instances pass the health checks, the target group doesn't enter the <code>InService</code> state. </p> <p>Target groups also have an <code>InService</code> state if you attach them in the <a>CreateAutoScalingGroup</a> API call. If your target group state is <code>InService</code>, but it is not working properly, check the scaling activities by calling <a>DescribeScalingActivities</a> and take any corrective actions necessary.</p> <p>For help with failed health checks, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/ts-as-healthchecks.html">Troubleshooting Amazon EC2 Auto Scaling: Health checks</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-load-balancer.html">Use Elastic Load Balancing to distribute traffic across the instances in your Auto Scaling group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>. </p> <note> <p>You can use this operation to describe target groups that were attached by using <a>AttachLoadBalancerTargetGroups</a>, but not for target groups that were attached by using <a>AttachTrafficSources</a>.</p> </note>
		/// GET_DescribeLoadBalancerTargetGroups #Action=DescribeLoadBalancerTargetGroups
		/// </summary>
		/// <param name="AutoScalingGroupName">The name of the Auto Scaling group.</param>
		/// <param name="NextToken">The token for the next set of items to return. (You received this token from a previous call.)</param>
		/// <param name="MaxRecords">The maximum number of items to return with this call. The default value is <code>100</code> and the maximum value is <code>100</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeLoadBalancerTargetGroupsAsync(string AutoScalingGroupName, string NextToken, int MaxRecords, GET_DescribeLoadBalancerTargetGroupsAction Action, GET_DescribeLoadBalancerTargetGroupsVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeLoadBalancerTargetGroups?AutoScalingGroupName=" + (AutoScalingGroupName==null? "" : System.Uri.EscapeDataString(AutoScalingGroupName))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken))+"&MaxRecords="+MaxRecords+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <note> <p>This API operation is superseded by <a>DescribeTrafficSources</a>, which can describe multiple traffic sources types. We recommend using <code>DescribeTrafficSources</code> to simplify how you manage traffic sources. However, we continue to support <code>DescribeLoadBalancers</code>. You can use both the original <code>DescribeLoadBalancers</code> API operation and <code>DescribeTrafficSources</code> on the same Auto Scaling group.</p> </note> <p>Gets information about the load balancers for the specified Auto Scaling group.</p> <p>This operation describes only Classic Load Balancers. If you have Application Load Balancers, Network Load Balancers, or Gateway Load Balancers, use the <a>DescribeLoadBalancerTargetGroups</a> API instead.</p> <p>To determine the attachment status of the load balancer, use the <code>State</code> element in the response. When you attach a load balancer to an Auto Scaling group, the initial <code>State</code> value is <code>Adding</code>. The state transitions to <code>Added</code> after all Auto Scaling instances are registered with the load balancer. If Elastic Load Balancing health checks are enabled for the Auto Scaling group, the state transitions to <code>InService</code> after at least one Auto Scaling instance passes the health check. When the load balancer is in the <code>InService</code> state, Amazon EC2 Auto Scaling can terminate and replace any instances that are reported as unhealthy. If no registered instances pass the health checks, the load balancer doesn't enter the <code>InService</code> state. </p> <p>Load balancers also have an <code>InService</code> state if you attach them in the <a>CreateAutoScalingGroup</a> API call. If your load balancer state is <code>InService</code>, but it is not working properly, check the scaling activities by calling <a>DescribeScalingActivities</a> and take any corrective actions necessary.</p> <p>For help with failed health checks, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/ts-as-healthchecks.html">Troubleshooting Amazon EC2 Auto Scaling: Health checks</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-load-balancer.html">Use Elastic Load Balancing to distribute traffic across the instances in your Auto Scaling group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>. </p>
		/// GET_DescribeLoadBalancers #Action=DescribeLoadBalancers
		/// </summary>
		/// <param name="AutoScalingGroupName">The name of the Auto Scaling group.</param>
		/// <param name="NextToken">The token for the next set of items to return. (You received this token from a previous call.)</param>
		/// <param name="MaxRecords">The maximum number of items to return with this call. The default value is <code>100</code> and the maximum value is <code>100</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeLoadBalancersAsync(string AutoScalingGroupName, string NextToken, int MaxRecords, GET_DescribeLoadBalancersAction Action, GET_DescribeLoadBalancersVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeLoadBalancers?AutoScalingGroupName=" + (AutoScalingGroupName==null? "" : System.Uri.EscapeDataString(AutoScalingGroupName))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken))+"&MaxRecords="+MaxRecords+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes the available CloudWatch metrics for Amazon EC2 Auto Scaling.
		/// GET_DescribeMetricCollectionTypes #Action=DescribeMetricCollectionTypes
		/// </summary>
		/// <returns>Success</returns>
		public async Task GET_DescribeMetricCollectionTypesAsync(GET_DescribeMetricCollectionTypesAction Action, GET_DescribeMetricCollectionTypesVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeMetricCollectionTypes?Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes the available CloudWatch metrics for Amazon EC2 Auto Scaling.
		/// POST_DescribeMetricCollectionTypes #Action=DescribeMetricCollectionTypes
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_DescribeMetricCollectionTypesAsync(GET_DescribeMetricCollectionTypesAction Action, POST_DescribeMetricCollectionTypesVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeMetricCollectionTypes?Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about the Amazon SNS notifications that are configured for one or more Auto Scaling groups.
		/// GET_DescribeNotificationConfigurations #Action=DescribeNotificationConfigurations
		/// </summary>
		/// <param name="AutoScalingGroupNames">The name of the Auto Scaling group.</param>
		/// <param name="NextToken">The token for the next set of items to return. (You received this token from a previous call.)</param>
		/// <param name="MaxRecords">The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeNotificationConfigurationsAsync(string[] AutoScalingGroupNames, string NextToken, int MaxRecords, GET_DescribeNotificationConfigurationsAction Action, GET_DescribeNotificationConfigurationsVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeNotificationConfigurations?"+string.Join("&", AutoScalingGroupNames.Select(z => $"AutoScalingGroupNames={System.Uri.EscapeDataString(z.ToString())}"))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken))+"&MaxRecords="+MaxRecords+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about the scaling policies in the account and Region.
		/// GET_DescribePolicies #Action=DescribePolicies
		/// </summary>
		/// <param name="AutoScalingGroupName">The name of the Auto Scaling group.</param>
		/// <param name="PolicyNames"><p>The names of one or more policies. If you omit this property, all policies are described. If a group name is provided, the results are limited to that group. If you specify an unknown policy name, it is ignored with no error.</p> <p>Array Members: Maximum number of 50 items.</p></param>
		/// <param name="PolicyTypes">One or more policy types. The valid values are <code>SimpleScaling</code>, <code>StepScaling</code>, <code>TargetTrackingScaling</code>, and <code>PredictiveScaling</code>.</param>
		/// <param name="NextToken">The token for the next set of items to return. (You received this token from a previous call.)</param>
		/// <param name="MaxRecords">The maximum number of items to be returned with each call. The default value is <code>50</code> and the maximum value is <code>100</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribePoliciesAsync(string AutoScalingGroupName, string[] PolicyNames, string[] PolicyTypes, string NextToken, int MaxRecords, GET_DescribePoliciesAction Action, GET_DescribePoliciesVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribePolicies?AutoScalingGroupName=" + (AutoScalingGroupName==null? "" : System.Uri.EscapeDataString(AutoScalingGroupName))+"&"+string.Join("&", PolicyNames.Select(z => $"PolicyNames={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", PolicyTypes.Select(z => $"PolicyTypes={System.Uri.EscapeDataString(z.ToString())}"))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken))+"&MaxRecords="+MaxRecords+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Gets information about the scaling activities in the account and Region.</p> <p>When scaling events occur, you see a record of the scaling activity in the scaling activities. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-verify-scaling-activity.html">Verifying a scaling activity for an Auto Scaling group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If the scaling event succeeds, the value of the <code>StatusCode</code> element in the response is <code>Successful</code>. If an attempt to launch instances failed, the <code>StatusCode</code> value is <code>Failed</code> or <code>Cancelled</code> and the <code>StatusMessage</code> element in the response indicates the cause of the failure. For help interpreting the <code>StatusMessage</code>, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/CHAP_Troubleshooting.html">Troubleshooting Amazon EC2 Auto Scaling</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>. </p>
		/// GET_DescribeScalingActivities #Action=DescribeScalingActivities
		/// </summary>
		/// <param name="ActivityIds"><p>The activity IDs of the desired scaling activities. If you omit this property, all activities for the past six weeks are described. If unknown activities are requested, they are ignored with no error. If you specify an Auto Scaling group, the results are limited to that group.</p> <p>Array Members: Maximum number of 50 IDs.</p></param>
		/// <param name="AutoScalingGroupName">The name of the Auto Scaling group.</param>
		/// <param name="IncludeDeletedGroups">Indicates whether to include scaling activity from deleted Auto Scaling groups.</param>
		/// <param name="MaxRecords">The maximum number of items to return with this call. The default value is <code>100</code> and the maximum value is <code>100</code>.</param>
		/// <param name="NextToken">The token for the next set of items to return. (You received this token from a previous call.)</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeScalingActivitiesAsync(string[] ActivityIds, string AutoScalingGroupName, bool IncludeDeletedGroups, int MaxRecords, string NextToken, GET_DescribeScalingActivitiesAction Action, GET_DescribeScalingActivitiesVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeScalingActivities?"+string.Join("&", ActivityIds.Select(z => $"ActivityIds={System.Uri.EscapeDataString(z.ToString())}"))+"&AutoScalingGroupName=" + (AutoScalingGroupName==null? "" : System.Uri.EscapeDataString(AutoScalingGroupName))+"&IncludeDeletedGroups="+IncludeDeletedGroups+"&MaxRecords="+MaxRecords+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes the scaling process types for use with the <a>ResumeProcesses</a> and <a>SuspendProcesses</a> APIs.
		/// GET_DescribeScalingProcessTypes #Action=DescribeScalingProcessTypes
		/// </summary>
		/// <returns>Success</returns>
		public async Task GET_DescribeScalingProcessTypesAsync(GET_DescribeScalingProcessTypesAction Action, GET_DescribeScalingProcessTypesVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeScalingProcessTypes?Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes the scaling process types for use with the <a>ResumeProcesses</a> and <a>SuspendProcesses</a> APIs.
		/// POST_DescribeScalingProcessTypes #Action=DescribeScalingProcessTypes
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_DescribeScalingProcessTypesAsync(GET_DescribeScalingProcessTypesAction Action, POST_DescribeScalingProcessTypesVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeScalingProcessTypes?Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Gets information about the scheduled actions that haven't run or that have not reached their end time.</p> <p>To describe the scaling activities for scheduled actions that have already run, call the <a>DescribeScalingActivities</a> API.</p>
		/// GET_DescribeScheduledActions #Action=DescribeScheduledActions
		/// </summary>
		/// <param name="AutoScalingGroupName">The name of the Auto Scaling group.</param>
		/// <param name="ScheduledActionNames"><p>The names of one or more scheduled actions. If you omit this property, all scheduled actions are described. If you specify an unknown scheduled action, it is ignored with no error.</p> <p>Array Members: Maximum number of 50 actions.</p></param>
		/// <param name="StartTime">The earliest scheduled start time to return. If scheduled action names are provided, this property is ignored.</param>
		/// <param name="EndTime">The latest scheduled start time to return. If scheduled action names are provided, this property is ignored.</param>
		/// <param name="NextToken">The token for the next set of items to return. (You received this token from a previous call.)</param>
		/// <param name="MaxRecords">The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeScheduledActionsAsync(string AutoScalingGroupName, string[] ScheduledActionNames, System.DateTimeOffset StartTime, System.DateTimeOffset EndTime, string NextToken, int MaxRecords, GET_DescribeScheduledActionsAction Action, GET_DescribeScheduledActionsVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeScheduledActions?AutoScalingGroupName=" + (AutoScalingGroupName==null? "" : System.Uri.EscapeDataString(AutoScalingGroupName))+"&"+string.Join("&", ScheduledActionNames.Select(z => $"ScheduledActionNames={System.Uri.EscapeDataString(z.ToString())}"))+"&StartTime=" + StartTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&EndTime=" + EndTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken))+"&MaxRecords="+MaxRecords+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Describes the specified tags.</p> <p>You can use filters to limit the results. For example, you can query for the tags for a specific Auto Scaling group. You can specify multiple values for a filter. A tag must match at least one of the specified values for it to be included in the results.</p> <p>You can also specify multiple filters. The result includes information for a particular tag only if it matches all the filters. If there's no match, no special message is returned.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-tagging.html">Tag Auto Scaling groups and instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
		/// GET_DescribeTags #Action=DescribeTags
		/// </summary>
		/// <param name="Filters">One or more filters to scope the tags to return. The maximum number of filters per filter type (for example, <code>auto-scaling-group</code>) is 1000.</param>
		/// <param name="NextToken">The token for the next set of items to return. (You received this token from a previous call.)</param>
		/// <param name="MaxRecords">The maximum number of items to return with this call. The default value is <code>50</code> and the maximum value is <code>100</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeTagsAsync(Filter[] Filters, string NextToken, int MaxRecords, GET_DescribeTagsAction Action, GET_DescribeTagsVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeTags?"+string.Join("&", Filters.Select(z => $"Filters={z}"))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken))+"&MaxRecords="+MaxRecords+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Describes the termination policies supported by Amazon EC2 Auto Scaling.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-termination-policies.html">Work with Amazon EC2 Auto Scaling termination policies</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
		/// GET_DescribeTerminationPolicyTypes #Action=DescribeTerminationPolicyTypes
		/// </summary>
		/// <returns>Success</returns>
		public async Task GET_DescribeTerminationPolicyTypesAsync(GET_DescribeTerminationPolicyTypesAction Action, GET_DescribeTerminationPolicyTypesVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeTerminationPolicyTypes?Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Describes the termination policies supported by Amazon EC2 Auto Scaling.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-termination-policies.html">Work with Amazon EC2 Auto Scaling termination policies</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
		/// POST_DescribeTerminationPolicyTypes #Action=DescribeTerminationPolicyTypes
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_DescribeTerminationPolicyTypesAsync(GET_DescribeTerminationPolicyTypesAction Action, POST_DescribeTerminationPolicyTypesVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeTerminationPolicyTypes?Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Gets information about the traffic sources for the specified Auto Scaling group.</p> <p>You can optionally provide a traffic source type. If you provide a traffic source type, then the results only include that traffic source type.</p> <p>If you do not provide a traffic source type, then the results include all the traffic sources for the specified Auto Scaling group. </p>
		/// GET_DescribeTrafficSources #Action=DescribeTrafficSources
		/// </summary>
		/// <param name="AutoScalingGroupName">The name of the Auto Scaling group.</param>
		/// <param name="TrafficSourceType"><p>The traffic source type that you want to describe.</p> <p>The following lists the valid values:</p> <ul> <li> <p> <code>elb</code> if the traffic source is a Classic Load Balancer.</p> </li> <li> <p> <code>elbv2</code> if the traffic source is a Application Load Balancer, Gateway Load Balancer, or Network Load Balancer.</p> </li> <li> <p> <code>vpc-lattice</code> if the traffic source is VPC Lattice.</p> </li> </ul></param>
		/// <param name="NextToken">The token for the next set of items to return. (You received this token from a previous call.)</param>
		/// <param name="MaxRecords">The maximum number of items to return with this call. The maximum value is <code>50</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeTrafficSourcesAsync(string AutoScalingGroupName, string TrafficSourceType, string NextToken, int MaxRecords, GET_DescribeTrafficSourcesAction Action, GET_DescribeTrafficSourcesVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeTrafficSources?AutoScalingGroupName=" + (AutoScalingGroupName==null? "" : System.Uri.EscapeDataString(AutoScalingGroupName))+"&TrafficSourceType=" + (TrafficSourceType==null? "" : System.Uri.EscapeDataString(TrafficSourceType))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken))+"&MaxRecords="+MaxRecords+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Gets information about a warm pool and its instances.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-warm-pools.html">Warm pools for Amazon EC2 Auto Scaling</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
		/// GET_DescribeWarmPool #Action=DescribeWarmPool
		/// </summary>
		/// <param name="AutoScalingGroupName">The name of the Auto Scaling group.</param>
		/// <param name="MaxRecords">The maximum number of instances to return with this call. The maximum value is <code>50</code>.</param>
		/// <param name="NextToken">The token for the next set of instances to return. (You received this token from a previous call.)</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeWarmPoolAsync(string AutoScalingGroupName, int MaxRecords, string NextToken, GET_DescribeWarmPoolAction Action, GET_DescribeWarmPoolVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeWarmPool?AutoScalingGroupName=" + (AutoScalingGroupName==null? "" : System.Uri.EscapeDataString(AutoScalingGroupName))+"&MaxRecords="+MaxRecords+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Removes one or more instances from the specified Auto Scaling group.</p> <p>After the instances are detached, you can manage them independent of the Auto Scaling group.</p> <p>If you do not specify the option to decrement the desired capacity, Amazon EC2 Auto Scaling launches instances to replace the ones that are detached.</p> <p>If there is a Classic Load Balancer attached to the Auto Scaling group, the instances are deregistered from the load balancer. If there are target groups attached to the Auto Scaling group, the instances are deregistered from the target groups.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/detach-instance-asg.html">Detach EC2 instances from your Auto Scaling group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
		/// GET_DetachInstances #Action=DetachInstances
		/// </summary>
		/// <param name="InstanceIds">The IDs of the instances. You can specify up to 20 instances.</param>
		/// <param name="AutoScalingGroupName">The name of the Auto Scaling group.</param>
		/// <param name="ShouldDecrementDesiredCapacity">Indicates whether the Auto Scaling group decrements the desired capacity value by the number of instances detached.</param>
		/// <returns>Success</returns>
		public async Task GET_DetachInstancesAsync(string[] InstanceIds, string AutoScalingGroupName, bool ShouldDecrementDesiredCapacity, GET_DetachInstancesAction Action, GET_DetachInstancesVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DetachInstances?"+string.Join("&", InstanceIds.Select(z => $"InstanceIds={System.Uri.EscapeDataString(z.ToString())}"))+"&AutoScalingGroupName=" + (AutoScalingGroupName==null? "" : System.Uri.EscapeDataString(AutoScalingGroupName))+"&ShouldDecrementDesiredCapacity="+ShouldDecrementDesiredCapacity+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <note> <p>This API operation is superseded by <a>DetachTrafficSources</a>, which can detach multiple traffic sources types. We recommend using <code>DetachTrafficSources</code> to simplify how you manage traffic sources. However, we continue to support <code>DetachLoadBalancerTargetGroups</code>. You can use both the original <code>DetachLoadBalancerTargetGroups</code> API operation and <code>DetachTrafficSources</code> on the same Auto Scaling group.</p> </note> <p>Detaches one or more target groups from the specified Auto Scaling group.</p> <p>When you detach a target group, it enters the <code>Removing</code> state while deregistering the instances in the group. When all instances are deregistered, then you can no longer describe the target group using the <a>DescribeLoadBalancerTargetGroups</a> API call. The instances remain running.</p> <note> <p>You can use this operation to detach target groups that were attached by using <a>AttachLoadBalancerTargetGroups</a>, but not for target groups that were attached by using <a>AttachTrafficSources</a>.</p> </note>
		/// GET_DetachLoadBalancerTargetGroups #Action=DetachLoadBalancerTargetGroups
		/// </summary>
		/// <param name="AutoScalingGroupName">The name of the Auto Scaling group.</param>
		/// <param name="TargetGroupARNs">The Amazon Resource Names (ARN) of the target groups. You can specify up to 10 target groups.</param>
		/// <returns>Success</returns>
		public async Task GET_DetachLoadBalancerTargetGroupsAsync(string AutoScalingGroupName, string[] TargetGroupARNs, GET_DetachLoadBalancerTargetGroupsAction Action, GET_DetachLoadBalancerTargetGroupsVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DetachLoadBalancerTargetGroups?AutoScalingGroupName=" + (AutoScalingGroupName==null? "" : System.Uri.EscapeDataString(AutoScalingGroupName))+"&"+string.Join("&", TargetGroupARNs.Select(z => $"TargetGroupARNs={System.Uri.EscapeDataString(z.ToString())}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <note> <p>This API operation is superseded by <a>DetachTrafficSources</a>, which can detach multiple traffic sources types. We recommend using <code>DetachTrafficSources</code> to simplify how you manage traffic sources. However, we continue to support <code>DetachLoadBalancers</code>. You can use both the original <code>DetachLoadBalancers</code> API operation and <code>DetachTrafficSources</code> on the same Auto Scaling group.</p> </note> <p>Detaches one or more Classic Load Balancers from the specified Auto Scaling group.</p> <p>This operation detaches only Classic Load Balancers. If you have Application Load Balancers, Network Load Balancers, or Gateway Load Balancers, use the <a>DetachLoadBalancerTargetGroups</a> API instead.</p> <p>When you detach a load balancer, it enters the <code>Removing</code> state while deregistering the instances in the group. When all instances are deregistered, then you can no longer describe the load balancer using the <a>DescribeLoadBalancers</a> API call. The instances remain running.</p>
		/// GET_DetachLoadBalancers #Action=DetachLoadBalancers
		/// </summary>
		/// <param name="AutoScalingGroupName">The name of the Auto Scaling group.</param>
		/// <param name="LoadBalancerNames">The names of the load balancers. You can specify up to 10 load balancers.</param>
		/// <returns>Success</returns>
		public async Task GET_DetachLoadBalancersAsync(string AutoScalingGroupName, string[] LoadBalancerNames, GET_DetachLoadBalancersAction Action, GET_DetachLoadBalancersVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DetachLoadBalancers?AutoScalingGroupName=" + (AutoScalingGroupName==null? "" : System.Uri.EscapeDataString(AutoScalingGroupName))+"&"+string.Join("&", LoadBalancerNames.Select(z => $"LoadBalancerNames={System.Uri.EscapeDataString(z.ToString())}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Detaches one or more traffic sources from the specified Auto Scaling group.</p> <p>When you detach a traffic source, it enters the <code>Removing</code> state while deregistering the instances in the group. When all instances are deregistered, then you can no longer describe the traffic source using the <a>DescribeTrafficSources</a> API call. The instances continue to run.</p>
		/// GET_DetachTrafficSources #Action=DetachTrafficSources
		/// </summary>
		/// <param name="AutoScalingGroupName">The name of the Auto Scaling group.</param>
		/// <param name="TrafficSources">The unique identifiers of one or more traffic sources. You can specify up to 10 traffic sources.</param>
		/// <returns>Success</returns>
		public async Task GET_DetachTrafficSourcesAsync(string AutoScalingGroupName, TrafficSourceIdentifier[] TrafficSources, GET_DetachTrafficSourcesAction Action, GET_DetachTrafficSourcesVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DetachTrafficSources?AutoScalingGroupName=" + (AutoScalingGroupName==null? "" : System.Uri.EscapeDataString(AutoScalingGroupName))+"&"+string.Join("&", TrafficSources.Select(z => $"TrafficSources={z}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Disables group metrics collection for the specified Auto Scaling group.
		/// GET_DisableMetricsCollection #Action=DisableMetricsCollection
		/// </summary>
		/// <param name="AutoScalingGroupName">The name of the Auto Scaling group.</param>
		/// <param name="Metrics"><p>Identifies the metrics to disable.</p> <p>You can specify one or more of the following metrics:</p> <ul> <li> <p> <code>GroupMinSize</code> </p> </li> <li> <p> <code>GroupMaxSize</code> </p> </li> <li> <p> <code>GroupDesiredCapacity</code> </p> </li> <li> <p> <code>GroupInServiceInstances</code> </p> </li> <li> <p> <code>GroupPendingInstances</code> </p> </li> <li> <p> <code>GroupStandbyInstances</code> </p> </li> <li> <p> <code>GroupTerminatingInstances</code> </p> </li> <li> <p> <code>GroupTotalInstances</code> </p> </li> <li> <p> <code>GroupInServiceCapacity</code> </p> </li> <li> <p> <code>GroupPendingCapacity</code> </p> </li> <li> <p> <code>GroupStandbyCapacity</code> </p> </li> <li> <p> <code>GroupTerminatingCapacity</code> </p> </li> <li> <p> <code>GroupTotalCapacity</code> </p> </li> <li> <p> <code>WarmPoolDesiredCapacity</code> </p> </li> <li> <p> <code>WarmPoolWarmedCapacity</code> </p> </li> <li> <p> <code>WarmPoolPendingCapacity</code> </p> </li> <li> <p> <code>WarmPoolTerminatingCapacity</code> </p> </li> <li> <p> <code>WarmPoolTotalCapacity</code> </p> </li> <li> <p> <code>GroupAndWarmPoolDesiredCapacity</code> </p> </li> <li> <p> <code>GroupAndWarmPoolTotalCapacity</code> </p> </li> </ul> <p>If you omit this property, all metrics are disabled.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-cloudwatch-monitoring.html#as-group-metrics">Auto Scaling group metrics</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p></param>
		/// <returns>Success</returns>
		public async Task GET_DisableMetricsCollectionAsync(string AutoScalingGroupName, string[] Metrics, GET_DisableMetricsCollectionAction Action, GET_DisableMetricsCollectionVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DisableMetricsCollection?AutoScalingGroupName=" + (AutoScalingGroupName==null? "" : System.Uri.EscapeDataString(AutoScalingGroupName))+"&"+string.Join("&", Metrics.Select(z => $"Metrics={System.Uri.EscapeDataString(z.ToString())}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Enables group metrics collection for the specified Auto Scaling group.</p> <p>You can use these metrics to track changes in an Auto Scaling group and to set alarms on threshold values. You can view group metrics using the Amazon EC2 Auto Scaling console or the CloudWatch console. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-cloudwatch-monitoring.html">Monitor CloudWatch metrics for your Auto Scaling groups and instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
		/// GET_EnableMetricsCollection #Action=EnableMetricsCollection
		/// </summary>
		/// <param name="AutoScalingGroupName">The name of the Auto Scaling group.</param>
		/// <param name="Metrics"><p>Identifies the metrics to enable.</p> <p>You can specify one or more of the following metrics:</p> <ul> <li> <p> <code>GroupMinSize</code> </p> </li> <li> <p> <code>GroupMaxSize</code> </p> </li> <li> <p> <code>GroupDesiredCapacity</code> </p> </li> <li> <p> <code>GroupInServiceInstances</code> </p> </li> <li> <p> <code>GroupPendingInstances</code> </p> </li> <li> <p> <code>GroupStandbyInstances</code> </p> </li> <li> <p> <code>GroupTerminatingInstances</code> </p> </li> <li> <p> <code>GroupTotalInstances</code> </p> </li> <li> <p> <code>GroupInServiceCapacity</code> </p> </li> <li> <p> <code>GroupPendingCapacity</code> </p> </li> <li> <p> <code>GroupStandbyCapacity</code> </p> </li> <li> <p> <code>GroupTerminatingCapacity</code> </p> </li> <li> <p> <code>GroupTotalCapacity</code> </p> </li> <li> <p> <code>WarmPoolDesiredCapacity</code> </p> </li> <li> <p> <code>WarmPoolWarmedCapacity</code> </p> </li> <li> <p> <code>WarmPoolPendingCapacity</code> </p> </li> <li> <p> <code>WarmPoolTerminatingCapacity</code> </p> </li> <li> <p> <code>WarmPoolTotalCapacity</code> </p> </li> <li> <p> <code>GroupAndWarmPoolDesiredCapacity</code> </p> </li> <li> <p> <code>GroupAndWarmPoolTotalCapacity</code> </p> </li> </ul> <p>If you specify <code>Granularity</code> and don't specify any metrics, all metrics are enabled.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-cloudwatch-monitoring.html#as-group-metrics">Auto Scaling group metrics</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p></param>
		/// <param name="Granularity">The frequency at which Amazon EC2 Auto Scaling sends aggregated data to CloudWatch. The only valid value is <code>1Minute</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_EnableMetricsCollectionAsync(string AutoScalingGroupName, string[] Metrics, string Granularity, GET_EnableMetricsCollectionAction Action, GET_EnableMetricsCollectionVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=EnableMetricsCollection?AutoScalingGroupName=" + (AutoScalingGroupName==null? "" : System.Uri.EscapeDataString(AutoScalingGroupName))+"&"+string.Join("&", Metrics.Select(z => $"Metrics={System.Uri.EscapeDataString(z.ToString())}"))+"&Granularity=" + (Granularity==null? "" : System.Uri.EscapeDataString(Granularity))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Moves the specified instances into the standby state.</p> <p>If you choose to decrement the desired capacity of the Auto Scaling group, the instances can enter standby as long as the desired capacity of the Auto Scaling group after the instances are placed into standby is equal to or greater than the minimum capacity of the group.</p> <p>If you choose not to decrement the desired capacity of the Auto Scaling group, the Auto Scaling group launches new instances to replace the instances on standby.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enter-exit-standby.html">Temporarily removing instances from your Auto Scaling group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
		/// GET_EnterStandby #Action=EnterStandby
		/// </summary>
		/// <param name="InstanceIds">The IDs of the instances. You can specify up to 20 instances.</param>
		/// <param name="AutoScalingGroupName">The name of the Auto Scaling group.</param>
		/// <param name="ShouldDecrementDesiredCapacity">Indicates whether to decrement the desired capacity of the Auto Scaling group by the number of instances moved to <code>Standby</code> mode.</param>
		/// <returns>Success</returns>
		public async Task GET_EnterStandbyAsync(string[] InstanceIds, string AutoScalingGroupName, bool ShouldDecrementDesiredCapacity, GET_EnterStandbyAction Action, GET_EnterStandbyVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=EnterStandby?"+string.Join("&", InstanceIds.Select(z => $"InstanceIds={System.Uri.EscapeDataString(z.ToString())}"))+"&AutoScalingGroupName=" + (AutoScalingGroupName==null? "" : System.Uri.EscapeDataString(AutoScalingGroupName))+"&ShouldDecrementDesiredCapacity="+ShouldDecrementDesiredCapacity+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Executes the specified policy. This can be useful for testing the design of your scaling policy.
		/// GET_ExecutePolicy #Action=ExecutePolicy
		/// </summary>
		/// <param name="AutoScalingGroupName">The name of the Auto Scaling group.</param>
		/// <param name="PolicyName">The name or ARN of the policy.</param>
		/// <param name="HonorCooldown"><p>Indicates whether Amazon EC2 Auto Scaling waits for the cooldown period to complete before executing the policy.</p> <p>Valid only if the policy type is <code>SimpleScaling</code>. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling cooldowns for Amazon EC2 Auto Scaling</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p></param>
		/// <param name="MetricValue"><p>The metric value to compare to <code>BreachThreshold</code>. This enables you to execute a policy of type <code>StepScaling</code> and determine which step adjustment to use. For example, if the breach threshold is 50 and you want to use a step adjustment with a lower bound of 0 and an upper bound of 10, you can set the metric value to 59.</p> <p>If you specify a metric value that doesn't correspond to a step adjustment for the policy, the call returns an error.</p> <p>Required if the policy type is <code>StepScaling</code> and not supported otherwise.</p></param>
		/// <param name="BreachThreshold"><p>The breach threshold for the alarm.</p> <p>Required if the policy type is <code>StepScaling</code> and not supported otherwise.</p></param>
		/// <returns>Success</returns>
		public async Task GET_ExecutePolicyAsync(string AutoScalingGroupName, string PolicyName, bool HonorCooldown, double MetricValue, double BreachThreshold, GET_ExecutePolicyAction Action, GET_ExecutePolicyVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ExecutePolicy?AutoScalingGroupName=" + (AutoScalingGroupName==null? "" : System.Uri.EscapeDataString(AutoScalingGroupName))+"&PolicyName=" + (PolicyName==null? "" : System.Uri.EscapeDataString(PolicyName))+"&HonorCooldown="+HonorCooldown+"&MetricValue="+MetricValue+"&BreachThreshold="+BreachThreshold+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Moves the specified instances out of the standby state.</p> <p>After you put the instances back in service, the desired capacity is incremented.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enter-exit-standby.html">Temporarily removing instances from your Auto Scaling group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
		/// GET_ExitStandby #Action=ExitStandby
		/// </summary>
		/// <param name="InstanceIds">The IDs of the instances. You can specify up to 20 instances.</param>
		/// <param name="AutoScalingGroupName">The name of the Auto Scaling group.</param>
		/// <returns>Success</returns>
		public async Task GET_ExitStandbyAsync(string[] InstanceIds, string AutoScalingGroupName, GET_ExitStandbyAction Action, GET_ExitStandbyVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ExitStandby?"+string.Join("&", InstanceIds.Select(z => $"InstanceIds={System.Uri.EscapeDataString(z.ToString())}"))+"&AutoScalingGroupName=" + (AutoScalingGroupName==null? "" : System.Uri.EscapeDataString(AutoScalingGroupName))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Retrieves the forecast data for a predictive scaling policy.</p> <p>Load forecasts are predictions of the hourly load values using historical load data from CloudWatch and an analysis of historical trends. Capacity forecasts are represented as predicted values for the minimum capacity that is needed on an hourly basis, based on the hourly load forecast.</p> <p>A minimum of 24 hours of data is required to create the initial forecasts. However, having a full 14 days of historical data results in more accurate forecasts.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-predictive-scaling.html">Predictive scaling for Amazon EC2 Auto Scaling</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
		/// GET_GetPredictiveScalingForecast #Action=GetPredictiveScalingForecast
		/// </summary>
		/// <param name="AutoScalingGroupName">The name of the Auto Scaling group.</param>
		/// <param name="PolicyName">The name of the policy.</param>
		/// <param name="StartTime">The inclusive start time of the time range for the forecast data to get. At most, the date and time can be one year before the current date and time.</param>
		/// <param name="EndTime"><p>The exclusive end time of the time range for the forecast data to get. The maximum time duration between the start and end time is 30 days. </p> <p>Although this parameter can accept a date and time that is more than two days in the future, the availability of forecast data has limits. Amazon EC2 Auto Scaling only issues forecasts for periods of two days in advance.</p></param>
		/// <returns>Success</returns>
		public async Task GET_GetPredictiveScalingForecastAsync(string AutoScalingGroupName, string PolicyName, System.DateTimeOffset StartTime, System.DateTimeOffset EndTime, GET_GetPredictiveScalingForecastAction Action, GET_GetPredictiveScalingForecastVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=GetPredictiveScalingForecast?AutoScalingGroupName=" + (AutoScalingGroupName==null? "" : System.Uri.EscapeDataString(AutoScalingGroupName))+"&PolicyName=" + (PolicyName==null? "" : System.Uri.EscapeDataString(PolicyName))+"&StartTime=" + StartTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&EndTime=" + EndTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates or updates a lifecycle hook for the specified Auto Scaling group.</p> <p>Lifecycle hooks let you create solutions that are aware of events in the Auto Scaling instance lifecycle, and then perform a custom action on instances when the corresponding lifecycle event occurs.</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a launch template or launch configuration with a user data script that runs while an instance is in a wait state due to a lifecycle hook.</p> </li> <li> <p>(Optional) Create a Lambda function and a rule that allows Amazon EventBridge to invoke your Lambda function when an instance is put into a wait state due to a lifecycle hook.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p> <b>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</b> </p> </li> <li> <p>If you need more time, record the lifecycle action heartbeat to keep the instance in a wait state using the <a>RecordLifecycleActionHeartbeat</a> API call.</p> </li> <li> <p>If you finish before the timeout period ends, send a callback by using the <a>CompleteLifecycleAction</a> API call.</p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html">Amazon EC2 Auto Scaling lifecycle hooks</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you exceed your maximum limit of lifecycle hooks, which by default is 50 per Auto Scaling group, the call fails.</p> <p>You can view the lifecycle hooks for an Auto Scaling group using the <a>DescribeLifecycleHooks</a> API call. If you are no longer using a lifecycle hook, you can delete it by calling the <a>DeleteLifecycleHook</a> API.</p>
		/// GET_PutLifecycleHook #Action=PutLifecycleHook
		/// </summary>
		/// <param name="LifecycleHookName">The name of the lifecycle hook.</param>
		/// <param name="AutoScalingGroupName">The name of the Auto Scaling group.</param>
		/// <param name="LifecycleTransition"><p>The lifecycle transition. For Auto Scaling groups, there are two major lifecycle transitions.</p> <ul> <li> <p>To create a lifecycle hook for scale-out events, specify <code>autoscaling:EC2_INSTANCE_LAUNCHING</code>.</p> </li> <li> <p>To create a lifecycle hook for scale-in events, specify <code>autoscaling:EC2_INSTANCE_TERMINATING</code>.</p> </li> </ul> <p>Required for new lifecycle hooks, but optional when updating existing hooks.</p></param>
		/// <param name="RoleARN"><p>The ARN of the IAM role that allows the Auto Scaling group to publish to the specified notification target.</p> <p>Valid only if the notification target is an Amazon SNS topic or an Amazon SQS queue. Required for new lifecycle hooks, but optional when updating existing hooks.</p></param>
		/// <param name="NotificationTargetARN"><p>The Amazon Resource Name (ARN) of the notification target that Amazon EC2 Auto Scaling uses to notify you when an instance is in a wait state for the lifecycle hook. You can specify either an Amazon SNS topic or an Amazon SQS queue.</p> <p>If you specify an empty string, this overrides the current ARN.</p> <p>This operation uses the JSON format when sending notifications to an Amazon SQS queue, and an email key-value pair format when sending notifications to an Amazon SNS topic.</p> <p>When you specify a notification target, Amazon EC2 Auto Scaling sends it a test message. Test messages contain the following additional key-value pair: <code>"Event": "autoscaling:TEST_NOTIFICATION"</code>.</p></param>
		/// <param name="NotificationMetadata">Additional information that you want to include any time Amazon EC2 Auto Scaling sends a message to the notification target.</param>
		/// <param name="HeartbeatTimeout">The maximum time, in seconds, that can elapse before the lifecycle hook times out. The range is from <code>30</code> to <code>7200</code> seconds. The default value is <code>3600</code> seconds (1 hour).</param>
		/// <param name="DefaultResult"><p>The action the Auto Scaling group takes when the lifecycle hook timeout elapses or if an unexpected failure occurs. The default value is <code>ABANDON</code>.</p> <p>Valid values: <code>CONTINUE</code> | <code>ABANDON</code> </p></param>
		/// <returns>Success</returns>
		public async Task GET_PutLifecycleHookAsync(string LifecycleHookName, string AutoScalingGroupName, string LifecycleTransition, string RoleARN, string NotificationTargetARN, string NotificationMetadata, int HeartbeatTimeout, string DefaultResult, GET_PutLifecycleHookAction Action, GET_PutLifecycleHookVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=PutLifecycleHook?LifecycleHookName=" + (LifecycleHookName==null? "" : System.Uri.EscapeDataString(LifecycleHookName))+"&AutoScalingGroupName=" + (AutoScalingGroupName==null? "" : System.Uri.EscapeDataString(AutoScalingGroupName))+"&LifecycleTransition=" + (LifecycleTransition==null? "" : System.Uri.EscapeDataString(LifecycleTransition))+"&RoleARN=" + (RoleARN==null? "" : System.Uri.EscapeDataString(RoleARN))+"&NotificationTargetARN=" + (NotificationTargetARN==null? "" : System.Uri.EscapeDataString(NotificationTargetARN))+"&NotificationMetadata=" + (NotificationMetadata==null? "" : System.Uri.EscapeDataString(NotificationMetadata))+"&HeartbeatTimeout="+HeartbeatTimeout+"&DefaultResult=" + (DefaultResult==null? "" : System.Uri.EscapeDataString(DefaultResult))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Configures an Auto Scaling group to send notifications when specified events take place. Subscribers to the specified topic can have messages delivered to an endpoint such as a web server or an email address.</p> <p>This configuration overwrites any existing configuration.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/ASGettingNotifications.html">Getting Amazon SNS notifications when your Auto Scaling group scales</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you exceed your maximum limit of SNS topics, which is 10 per Auto Scaling group, the call fails.</p>
		/// GET_PutNotificationConfiguration #Action=PutNotificationConfiguration
		/// </summary>
		/// <param name="AutoScalingGroupName">The name of the Auto Scaling group.</param>
		/// <param name="TopicARN">The Amazon Resource Name (ARN) of the Amazon SNS topic.</param>
		/// <param name="NotificationTypes">The type of event that causes the notification to be sent. To query the notification types supported by Amazon EC2 Auto Scaling, call the <a>DescribeAutoScalingNotificationTypes</a> API.</param>
		/// <returns>Success</returns>
		public async Task GET_PutNotificationConfigurationAsync(string AutoScalingGroupName, string TopicARN, string[] NotificationTypes, GET_PutNotificationConfigurationAction Action, GET_PutNotificationConfigurationVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=PutNotificationConfiguration?AutoScalingGroupName=" + (AutoScalingGroupName==null? "" : System.Uri.EscapeDataString(AutoScalingGroupName))+"&TopicARN=" + (TopicARN==null? "" : System.Uri.EscapeDataString(TopicARN))+"&"+string.Join("&", NotificationTypes.Select(z => $"NotificationTypes={System.Uri.EscapeDataString(z.ToString())}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates or updates a scaling policy for an Auto Scaling group. Scaling policies are used to scale an Auto Scaling group based on configurable metrics. If no policies are defined, the dynamic scaling and predictive scaling features are not used. </p> <p>For more information about using dynamic scaling, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scaling-target-tracking.html">Target tracking scaling policies</a> and <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scaling-simple-step.html">Step and simple scaling policies</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>For more information about using predictive scaling, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-predictive-scaling.html">Predictive scaling for Amazon EC2 Auto Scaling</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can view the scaling policies for an Auto Scaling group using the <a>DescribePolicies</a> API call. If you are no longer using a scaling policy, you can delete it by calling the <a>DeletePolicy</a> API.</p>
		/// GET_PutScalingPolicy #Action=PutScalingPolicy
		/// </summary>
		/// <param name="AutoScalingGroupName">The name of the Auto Scaling group.</param>
		/// <param name="PolicyName">The name of the policy.</param>
		/// <param name="PolicyType"><p>One of the following policy types: </p> <ul> <li> <p> <code>TargetTrackingScaling</code> </p> </li> <li> <p> <code>StepScaling</code> </p> </li> <li> <p> <code>SimpleScaling</code> (default)</p> </li> <li> <p> <code>PredictiveScaling</code> </p> </li> </ul></param>
		/// <param name="AdjustmentType"><p>Specifies how the scaling adjustment is interpreted (for example, an absolute number or a percentage). The valid values are <code>ChangeInCapacity</code>, <code>ExactCapacity</code>, and <code>PercentChangeInCapacity</code>.</p> <p>Required if the policy type is <code>StepScaling</code> or <code>SimpleScaling</code>. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scaling-simple-step.html#as-scaling-adjustment">Scaling adjustment types</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p></param>
		/// <param name="MinAdjustmentStep">Available for backward compatibility. Use <code>MinAdjustmentMagnitude</code> instead.</param>
		/// <param name="MinAdjustmentMagnitude"><p>The minimum value to scale by when the adjustment type is <code>PercentChangeInCapacity</code>. For example, suppose that you create a step scaling policy to scale out an Auto Scaling group by 25 percent and you specify a <code>MinAdjustmentMagnitude</code> of 2. If the group has 4 instances and the scaling policy is performed, 25 percent of 4 is 1. However, because you specified a <code>MinAdjustmentMagnitude</code> of 2, Amazon EC2 Auto Scaling scales out the group by 2 instances.</p> <p>Valid only if the policy type is <code>StepScaling</code> or <code>SimpleScaling</code>. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scaling-simple-step.html#as-scaling-adjustment">Scaling adjustment types</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <note> <p>Some Auto Scaling groups use instance weights. In this case, set the <code>MinAdjustmentMagnitude</code> to a value that is at least as large as your largest instance weight.</p> </note></param>
		/// <param name="ScalingAdjustment"><p>The amount by which to scale, based on the specified adjustment type. A positive value adds to the current capacity while a negative number removes from the current capacity. For exact capacity, you must specify a non-negative value.</p> <p>Required if the policy type is <code>SimpleScaling</code>. (Not used with any other policy type.) </p></param>
		/// <param name="Cooldown"><p>A cooldown period, in seconds, that applies to a specific simple scaling policy. When a cooldown period is specified here, it overrides the default cooldown.</p> <p>Valid only if the policy type is <code>SimpleScaling</code>. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling cooldowns for Amazon EC2 Auto Scaling</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>Default: None</p></param>
		/// <param name="MetricAggregationType"><p>The aggregation type for the CloudWatch metrics. The valid values are <code>Minimum</code>, <code>Maximum</code>, and <code>Average</code>. If the aggregation type is null, the value is treated as <code>Average</code>.</p> <p>Valid only if the policy type is <code>StepScaling</code>.</p></param>
		/// <param name="StepAdjustments"><p>A set of adjustments that enable you to scale based on the size of the alarm breach.</p> <p>Required if the policy type is <code>StepScaling</code>. (Not used with any other policy type.) </p></param>
		/// <param name="EstimatedInstanceWarmup"><p> <i>Not needed if the default instance warmup is defined for the group.</i> </p> <p>The estimated time, in seconds, until a newly launched instance can contribute to the CloudWatch metrics. This warm-up period applies to instances launched due to a specific target tracking or step scaling policy. When a warm-up period is specified here, it overrides the default instance warmup.</p> <p>Valid only if the policy type is <code>TargetTrackingScaling</code> or <code>StepScaling</code>.</p> <note> <p>The default is to use the value for the default instance warmup defined for the group. If default instance warmup is null, then <code>EstimatedInstanceWarmup</code> falls back to the value of default cooldown.</p> </note></param>
		/// <param name="TargetTrackingConfiguration"><p>A target tracking scaling policy. Provides support for predefined or custom metrics.</p> <p>The following predefined metrics are available:</p> <ul> <li> <p> <code>ASGAverageCPUUtilization</code> </p> </li> <li> <p> <code>ASGAverageNetworkIn</code> </p> </li> <li> <p> <code>ASGAverageNetworkOut</code> </p> </li> <li> <p> <code>ALBRequestCountPerTarget</code> </p> </li> </ul> <p>If you specify <code>ALBRequestCountPerTarget</code> for the metric, you must specify the <code>ResourceLabel</code> property with the <code>PredefinedMetricSpecification</code>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/APIReference/API_TargetTrackingConfiguration.html">TargetTrackingConfiguration</a> in the <i>Amazon EC2 Auto Scaling API Reference</i>.</p> <p>Required if the policy type is <code>TargetTrackingScaling</code>.</p></param>
		/// <param name="Enabled">Indicates whether the scaling policy is enabled or disabled. The default is enabled. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enable-disable-scaling-policy.html">Disabling a scaling policy for an Auto Scaling group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</param>
		/// <param name="PredictiveScalingConfiguration"><p>A predictive scaling policy. Provides support for predefined and custom metrics.</p> <p>Predefined metrics include CPU utilization, network in/out, and the Application Load Balancer request count.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/APIReference/API_PredictiveScalingConfiguration.html">PredictiveScalingConfiguration</a> in the <i>Amazon EC2 Auto Scaling API Reference</i>.</p> <p>Required if the policy type is <code>PredictiveScaling</code>.</p></param>
		/// <returns>Success</returns>
		public async Task GET_PutScalingPolicyAsync(
					string AutoScalingGroupName, 
					string PolicyName, 
					string PolicyType, 
					string AdjustmentType, 
					int MinAdjustmentStep, 
					int MinAdjustmentMagnitude, 
					int ScalingAdjustment, 
					int Cooldown, 
					string MetricAggregationType, 
					StepAdjustment[] StepAdjustments, 
					int EstimatedInstanceWarmup, 
					GET_PutScalingPolicyTargetTrackingConfiguration TargetTrackingConfiguration, 
					bool Enabled, 
					GET_PutScalingPolicyPredictiveScalingConfiguration PredictiveScalingConfiguration, 
					GET_PutScalingPolicyAction Action, 
					GET_PutScalingPolicyVersion Version, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=PutScalingPolicy?AutoScalingGroupName=" + (AutoScalingGroupName==null? "" : System.Uri.EscapeDataString(AutoScalingGroupName))+"&PolicyName=" + (PolicyName==null? "" : System.Uri.EscapeDataString(PolicyName))+"&PolicyType=" + (PolicyType==null? "" : System.Uri.EscapeDataString(PolicyType))+"&AdjustmentType=" + (AdjustmentType==null? "" : System.Uri.EscapeDataString(AdjustmentType))+"&MinAdjustmentStep="+MinAdjustmentStep+"&MinAdjustmentMagnitude="+MinAdjustmentMagnitude+"&ScalingAdjustment="+ScalingAdjustment+"&Cooldown="+Cooldown+"&MetricAggregationType=" + (MetricAggregationType==null? "" : System.Uri.EscapeDataString(MetricAggregationType))+"&"+string.Join("&", StepAdjustments.Select(z => $"StepAdjustments={z}"))+"&EstimatedInstanceWarmup="+EstimatedInstanceWarmup+"&TargetTrackingConfiguration=" + TargetTrackingConfiguration+"&Enabled="+Enabled+"&PredictiveScalingConfiguration=" + PredictiveScalingConfiguration+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates or updates a scheduled scaling action for an Auto Scaling group.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/schedule_time.html">Scheduled scaling</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>You can view the scheduled actions for an Auto Scaling group using the <a>DescribeScheduledActions</a> API call. If you are no longer using a scheduled action, you can delete it by calling the <a>DeleteScheduledAction</a> API.</p> <p>If you try to schedule your action in the past, Amazon EC2 Auto Scaling returns an error message.</p>
		/// GET_PutScheduledUpdateGroupAction #Action=PutScheduledUpdateGroupAction
		/// </summary>
		/// <param name="AutoScalingGroupName">The name of the Auto Scaling group.</param>
		/// <param name="ScheduledActionName">The name of this scaling action.</param>
		/// <param name="Time">This property is no longer used.</param>
		/// <param name="StartTime"><p>The date and time for this action to start, in YYYY-MM-DDThh:mm:ssZ format in UTC/GMT only and in quotes (for example, <code>"2021-06-01T00:00:00Z"</code>).</p> <p>If you specify <code>Recurrence</code> and <code>StartTime</code>, Amazon EC2 Auto Scaling performs the action at this time, and then performs the action based on the specified recurrence.</p></param>
		/// <param name="EndTime">The date and time for the recurring schedule to end, in UTC. For example, <code>"2021-06-01T00:00:00Z"</code>.</param>
		/// <param name="Recurrence"><p>The recurring schedule for this action. This format consists of five fields separated by white spaces: [Minute] [Hour] [Day_of_Month] [Month_of_Year] [Day_of_Week]. The value must be in quotes (for example, <code>"30 0 1 1,6,12 *"</code>). For more information about this format, see <a href="http://crontab.org">Crontab</a>.</p> <p>When <code>StartTime</code> and <code>EndTime</code> are specified with <code>Recurrence</code>, they form the boundaries of when the recurring action starts and stops.</p> <p>Cron expressions use Universal Coordinated Time (UTC) by default.</p></param>
		/// <param name="MinSize">The minimum size of the Auto Scaling group.</param>
		/// <param name="MaxSize">The maximum size of the Auto Scaling group.</param>
		/// <param name="DesiredCapacity"><p>The desired capacity is the initial capacity of the Auto Scaling group after the scheduled action runs and the capacity it attempts to maintain. It can scale beyond this capacity if you add more scaling conditions. </p> <note> <p>You must specify at least one of the following properties: <code>MaxSize</code>, <code>MinSize</code>, or <code>DesiredCapacity</code>. </p> </note></param>
		/// <param name="TimeZone"><p>Specifies the time zone for a cron expression. If a time zone is not provided, UTC is used by default. </p> <p>Valid values are the canonical names of the IANA time zones, derived from the IANA Time Zone Database (such as <code>Etc/GMT+9</code> or <code>Pacific/Tahiti</code>). For more information, see <a href="https://en.wikipedia.org/wiki/List_of_tz_database_time_zones">https://en.wikipedia.org/wiki/List_of_tz_database_time_zones</a>.</p></param>
		/// <returns>Success</returns>
		public async Task GET_PutScheduledUpdateGroupActionAsync(string AutoScalingGroupName, string ScheduledActionName, System.DateTimeOffset Time, System.DateTimeOffset StartTime, System.DateTimeOffset EndTime, string Recurrence, int MinSize, int MaxSize, int DesiredCapacity, string TimeZone, GET_PutScheduledUpdateGroupActionAction Action, GET_PutScheduledUpdateGroupActionVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=PutScheduledUpdateGroupAction?AutoScalingGroupName=" + (AutoScalingGroupName==null? "" : System.Uri.EscapeDataString(AutoScalingGroupName))+"&ScheduledActionName=" + (ScheduledActionName==null? "" : System.Uri.EscapeDataString(ScheduledActionName))+"&Time=" + Time.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&StartTime=" + StartTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&EndTime=" + EndTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&Recurrence=" + (Recurrence==null? "" : System.Uri.EscapeDataString(Recurrence))+"&MinSize="+MinSize+"&MaxSize="+MaxSize+"&DesiredCapacity="+DesiredCapacity+"&TimeZone=" + (TimeZone==null? "" : System.Uri.EscapeDataString(TimeZone))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates or updates a warm pool for the specified Auto Scaling group. A warm pool is a pool of pre-initialized EC2 instances that sits alongside the Auto Scaling group. Whenever your application needs to scale out, the Auto Scaling group can draw on the warm pool to meet its new desired capacity. For more information and example configurations, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-warm-pools.html">Warm pools for Amazon EC2 Auto Scaling</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>This operation must be called from the Region in which the Auto Scaling group was created. This operation cannot be called on an Auto Scaling group that has a mixed instances policy or a launch template or launch configuration that requests Spot Instances.</p> <p>You can view the instances in the warm pool using the <a>DescribeWarmPool</a> API call. If you are no longer using a warm pool, you can delete it by calling the <a>DeleteWarmPool</a> API.</p>
		/// GET_PutWarmPool #Action=PutWarmPool
		/// </summary>
		/// <param name="AutoScalingGroupName">The name of the Auto Scaling group.</param>
		/// <param name="MaxGroupPreparedCapacity"><p>Specifies the maximum number of instances that are allowed to be in the warm pool or in any state except <code>Terminated</code> for the Auto Scaling group. This is an optional property. Specify it only if you do not want the warm pool size to be determined by the difference between the group's maximum capacity and its desired capacity. </p> <important> <p>If a value for <code>MaxGroupPreparedCapacity</code> is not specified, Amazon EC2 Auto Scaling launches and maintains the difference between the group's maximum capacity and its desired capacity. If you specify a value for <code>MaxGroupPreparedCapacity</code>, Amazon EC2 Auto Scaling uses the difference between the <code>MaxGroupPreparedCapacity</code> and the desired capacity instead. </p> <p>The size of the warm pool is dynamic. Only when <code>MaxGroupPreparedCapacity</code> and <code>MinSize</code> are set to the same value does the warm pool have an absolute size.</p> </important> <p>If the desired capacity of the Auto Scaling group is higher than the <code>MaxGroupPreparedCapacity</code>, the capacity of the warm pool is 0, unless you specify a value for <code>MinSize</code>. To remove a value that you previously set, include the property but specify -1 for the value. </p></param>
		/// <param name="MinSize">Specifies the minimum number of instances to maintain in the warm pool. This helps you to ensure that there is always a certain number of warmed instances available to handle traffic spikes. Defaults to 0 if not specified.</param>
		/// <param name="PoolState">Sets the instance state to transition to after the lifecycle actions are complete. Default is <code>Stopped</code>.</param>
		/// <param name="InstanceReusePolicy">Indicates whether instances in the Auto Scaling group can be returned to the warm pool on scale in. The default is to terminate instances in the Auto Scaling group when the group scales in.</param>
		/// <returns>Success</returns>
		public async Task GET_PutWarmPoolAsync(string AutoScalingGroupName, int MaxGroupPreparedCapacity, int MinSize, WarmPoolState PoolState, GET_PutWarmPoolInstanceReusePolicy InstanceReusePolicy, GET_PutWarmPoolAction Action, GET_PutWarmPoolVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=PutWarmPool?AutoScalingGroupName=" + (AutoScalingGroupName==null? "" : System.Uri.EscapeDataString(AutoScalingGroupName))+"&MaxGroupPreparedCapacity="+MaxGroupPreparedCapacity+"&MinSize="+MinSize+"&PoolState=" + PoolState+"&InstanceReusePolicy=" + InstanceReusePolicy+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Records a heartbeat for the lifecycle action associated with the specified token or instance. This extends the timeout by the length of time defined using the <a>PutLifecycleHook</a> API call.</p> <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional) Create a launch template or launch configuration with a user data script that runs while an instance is in a wait state due to a lifecycle hook.</p> </li> <li> <p>(Optional) Create a Lambda function and a rule that allows Amazon EventBridge to invoke your Lambda function when an instance is put into a wait state due to a lifecycle hook.</p> </li> <li> <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p> </li> <li> <p>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</p> </li> <li> <p> <b>If you need more time, record the lifecycle action heartbeat to keep the instance in a wait state.</b> </p> </li> <li> <p>If you finish before the timeout period ends, send a callback by using the <a>CompleteLifecycleAction</a> API call.</p> </li> </ol> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html">Amazon EC2 Auto Scaling lifecycle hooks</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
		/// GET_RecordLifecycleActionHeartbeat #Action=RecordLifecycleActionHeartbeat
		/// </summary>
		/// <param name="LifecycleHookName">The name of the lifecycle hook.</param>
		/// <param name="AutoScalingGroupName">The name of the Auto Scaling group.</param>
		/// <param name="LifecycleActionToken">A token that uniquely identifies a specific lifecycle action associated with an instance. Amazon EC2 Auto Scaling sends this token to the notification target that you specified when you created the lifecycle hook.</param>
		/// <param name="InstanceId">The ID of the instance.</param>
		/// <returns>Success</returns>
		public async Task GET_RecordLifecycleActionHeartbeatAsync(string LifecycleHookName, string AutoScalingGroupName, string LifecycleActionToken, string InstanceId, GET_RecordLifecycleActionHeartbeatAction Action, GET_RecordLifecycleActionHeartbeatVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=RecordLifecycleActionHeartbeat?LifecycleHookName=" + (LifecycleHookName==null? "" : System.Uri.EscapeDataString(LifecycleHookName))+"&AutoScalingGroupName=" + (AutoScalingGroupName==null? "" : System.Uri.EscapeDataString(AutoScalingGroupName))+"&LifecycleActionToken=" + (LifecycleActionToken==null? "" : System.Uri.EscapeDataString(LifecycleActionToken))+"&InstanceId=" + (InstanceId==null? "" : System.Uri.EscapeDataString(InstanceId))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Resumes the specified suspended auto scaling processes, or all suspended process, for the specified Auto Scaling group.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html">Suspending and resuming scaling processes</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
		/// GET_ResumeProcesses #Action=ResumeProcesses
		/// </summary>
		/// <param name="AutoScalingGroupName">The name of the Auto Scaling group.</param>
		/// <param name="ScalingProcesses"><p>One or more of the following processes:</p> <ul> <li> <p> <code>Launch</code> </p> </li> <li> <p> <code>Terminate</code> </p> </li> <li> <p> <code>AddToLoadBalancer</code> </p> </li> <li> <p> <code>AlarmNotification</code> </p> </li> <li> <p> <code>AZRebalance</code> </p> </li> <li> <p> <code>HealthCheck</code> </p> </li> <li> <p> <code>InstanceRefresh</code> </p> </li> <li> <p> <code>ReplaceUnhealthy</code> </p> </li> <li> <p> <code>ScheduledActions</code> </p> </li> </ul> <p>If you omit this property, all processes are specified.</p></param>
		/// <returns>Success</returns>
		public async Task GET_ResumeProcessesAsync(string AutoScalingGroupName, string[] ScalingProcesses, GET_ResumeProcessesAction Action, GET_ResumeProcessesVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ResumeProcesses?AutoScalingGroupName=" + (AutoScalingGroupName==null? "" : System.Uri.EscapeDataString(AutoScalingGroupName))+"&"+string.Join("&", ScalingProcesses.Select(z => $"ScalingProcesses={System.Uri.EscapeDataString(z.ToString())}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Cancels an instance refresh that is in progress and rolls back any changes that it made. Amazon EC2 Auto Scaling replaces any instances that were replaced during the instance refresh. This restores your Auto Scaling group to the configuration that it was using before the start of the instance refresh. </p> <p>This operation is part of the <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-instance-refresh.html">instance refresh feature</a> in Amazon EC2 Auto Scaling, which helps you update instances in your Auto Scaling group after you make configuration changes.</p> <p>A rollback is not supported in the following situations: </p> <ul> <li> <p>There is no desired configuration specified for the instance refresh.</p> </li> <li> <p>The Auto Scaling group has a launch template that uses an Amazon Web Services Systems Manager parameter instead of an AMI ID for the <code>ImageId</code> property.</p> </li> <li> <p>The Auto Scaling group uses the launch template's <code>$Latest</code> or <code>$Default</code> version.</p> </li> </ul> <p>When you receive a successful response from this operation, Amazon EC2 Auto Scaling immediately begins replacing instances. You can check the status of this operation through the <a>DescribeInstanceRefreshes</a> API operation. </p>
		/// GET_RollbackInstanceRefresh #Action=RollbackInstanceRefresh
		/// </summary>
		/// <param name="AutoScalingGroupName">The name of the Auto Scaling group.</param>
		/// <returns>Success</returns>
		public async Task GET_RollbackInstanceRefreshAsync(string AutoScalingGroupName, GET_RollbackInstanceRefreshAction Action, GET_RollbackInstanceRefreshVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=RollbackInstanceRefresh?AutoScalingGroupName=" + (AutoScalingGroupName==null? "" : System.Uri.EscapeDataString(AutoScalingGroupName))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Sets the size of the specified Auto Scaling group.</p> <p>If a scale-in activity occurs as a result of a new <code>DesiredCapacity</code> value that is lower than the current size of the group, the Auto Scaling group uses its termination policy to determine which instances to terminate. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-manual-scaling.html">Manual scaling</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
		/// GET_SetDesiredCapacity #Action=SetDesiredCapacity
		/// </summary>
		/// <param name="AutoScalingGroupName">The name of the Auto Scaling group.</param>
		/// <param name="DesiredCapacity">The desired capacity is the initial capacity of the Auto Scaling group after this operation completes and the capacity it attempts to maintain.</param>
		/// <param name="HonorCooldown">Indicates whether Amazon EC2 Auto Scaling waits for the cooldown period to complete before initiating a scaling activity to set your Auto Scaling group to its new capacity. By default, Amazon EC2 Auto Scaling does not honor the cooldown period during manual scaling activities.</param>
		/// <returns>Success</returns>
		public async Task GET_SetDesiredCapacityAsync(string AutoScalingGroupName, int DesiredCapacity, bool HonorCooldown, GET_SetDesiredCapacityAction Action, GET_SetDesiredCapacityVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=SetDesiredCapacity?AutoScalingGroupName=" + (AutoScalingGroupName==null? "" : System.Uri.EscapeDataString(AutoScalingGroupName))+"&DesiredCapacity="+DesiredCapacity+"&HonorCooldown="+HonorCooldown+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Sets the health status of the specified instance.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html">Health checks for Auto Scaling instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
		/// GET_SetInstanceHealth #Action=SetInstanceHealth
		/// </summary>
		/// <param name="InstanceId">The ID of the instance.</param>
		/// <param name="HealthStatus">The health status of the instance. Set to <code>Healthy</code> to have the instance remain in service. Set to <code>Unhealthy</code> to have the instance be out of service. Amazon EC2 Auto Scaling terminates and replaces the unhealthy instance.</param>
		/// <param name="ShouldRespectGracePeriod"><p>If the Auto Scaling group of the specified instance has a <code>HealthCheckGracePeriod</code> specified for the group, by default, this call respects the grace period. Set this to <code>False</code>, to have the call not respect the grace period associated with the group.</p> <p>For more information about the health check grace period, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/APIReference/API_CreateAutoScalingGroup.html">CreateAutoScalingGroup</a> in the <i>Amazon EC2 Auto Scaling API Reference</i>.</p></param>
		/// <returns>Success</returns>
		public async Task GET_SetInstanceHealthAsync(string InstanceId, string HealthStatus, bool ShouldRespectGracePeriod, GET_SetInstanceHealthAction Action, GET_SetInstanceHealthVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=SetInstanceHealth?InstanceId=" + (InstanceId==null? "" : System.Uri.EscapeDataString(InstanceId))+"&HealthStatus=" + (HealthStatus==null? "" : System.Uri.EscapeDataString(HealthStatus))+"&ShouldRespectGracePeriod="+ShouldRespectGracePeriod+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Updates the instance protection settings of the specified instances. This operation cannot be called on instances in a warm pool.</p> <p>For more information about preventing instances that are part of an Auto Scaling group from terminating on scale in, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-instance-protection.html">Using instance scale-in protection</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>If you exceed your maximum limit of instance IDs, which is 50 per Auto Scaling group, the call fails.</p>
		/// GET_SetInstanceProtection #Action=SetInstanceProtection
		/// </summary>
		/// <param name="InstanceIds">One or more instance IDs. You can specify up to 50 instances.</param>
		/// <param name="AutoScalingGroupName">The name of the Auto Scaling group.</param>
		/// <param name="ProtectedFromScaleIn">Indicates whether the instance is protected from termination by Amazon EC2 Auto Scaling when scaling in.</param>
		/// <returns>Success</returns>
		public async Task GET_SetInstanceProtectionAsync(string[] InstanceIds, string AutoScalingGroupName, bool ProtectedFromScaleIn, GET_SetInstanceProtectionAction Action, GET_SetInstanceProtectionVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=SetInstanceProtection?"+string.Join("&", InstanceIds.Select(z => $"InstanceIds={System.Uri.EscapeDataString(z.ToString())}"))+"&AutoScalingGroupName=" + (AutoScalingGroupName==null? "" : System.Uri.EscapeDataString(AutoScalingGroupName))+"&ProtectedFromScaleIn="+ProtectedFromScaleIn+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Starts an instance refresh. During an instance refresh, Amazon EC2 Auto Scaling performs a rolling update of instances in an Auto Scaling group. Instances are terminated first and then replaced, which temporarily reduces the capacity available within your Auto Scaling group.</p> <p>This operation is part of the <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-instance-refresh.html">instance refresh feature</a> in Amazon EC2 Auto Scaling, which helps you update instances in your Auto Scaling group. This feature is helpful, for example, when you have a new AMI or a new user data script. You just need to create a new launch template that specifies the new AMI or user data script. Then start an instance refresh to immediately begin the process of updating instances in the group. </p> <p>If successful, the request's response contains a unique ID that you can use to track the progress of the instance refresh. To query its status, call the <a>DescribeInstanceRefreshes</a> API. To describe the instance refreshes that have already run, call the <a>DescribeInstanceRefreshes</a> API. To cancel an instance refresh that is in progress, use the <a>CancelInstanceRefresh</a> API. </p> <p>An instance refresh might fail for several reasons, such as EC2 launch failures, misconfigured health checks, or not ignoring or allowing the termination of instances that are in <code>Standby</code> state or protected from scale in. You can monitor for failed EC2 launches using the scaling activities. To find the scaling activities, call the <a>DescribeScalingActivities</a> API.</p> <p>If you enable auto rollback, your Auto Scaling group will be rolled back automatically when the instance refresh fails. You can enable this feature before starting an instance refresh by specifying the <code>AutoRollback</code> property in the instance refresh preferences. Otherwise, to roll back an instance refresh before it finishes, use the <a>RollbackInstanceRefresh</a> API. </p>
		/// GET_StartInstanceRefresh #Action=StartInstanceRefresh
		/// </summary>
		/// <param name="AutoScalingGroupName">The name of the Auto Scaling group.</param>
		/// <param name="Strategy">The strategy to use for the instance refresh. The only valid value is <code>Rolling</code>.</param>
		/// <param name="DesiredConfiguration"><p>The desired configuration. For example, the desired configuration can specify a new launch template or a new version of the current launch template.</p> <p>Once the instance refresh succeeds, Amazon EC2 Auto Scaling updates the settings of the Auto Scaling group to reflect the new desired configuration. </p> <note> <p>When you specify a new launch template or a new version of the current launch template for your desired configuration, consider enabling the <code>SkipMatching</code> property in preferences. If it's enabled, Amazon EC2 Auto Scaling skips replacing instances that already use the specified launch template and instance types. This can help you reduce the number of replacements that are required to apply updates. </p> </note></param>
		/// <param name="Preferences"><p>Sets your preferences for the instance refresh so that it performs as expected when you start it. Includes the instance warmup time, the minimum healthy percentage, and the behaviors that you want Amazon EC2 Auto Scaling to use if instances that are in <code>Standby</code> state or protected from scale in are found. You can also choose to enable additional features, such as the following:</p> <ul> <li> <p>Auto rollback</p> </li> <li> <p>Checkpoints</p> </li> <li> <p>CloudWatch alarms</p> </li> <li> <p>Skip matching</p> </li> </ul></param>
		/// <returns>Success</returns>
		public async Task GET_StartInstanceRefreshAsync(string AutoScalingGroupName, RefreshStrategy Strategy, GET_StartInstanceRefreshDesiredConfiguration DesiredConfiguration, GET_StartInstanceRefreshPreferences Preferences, GET_StartInstanceRefreshAction Action, GET_StartInstanceRefreshVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=StartInstanceRefresh?AutoScalingGroupName=" + (AutoScalingGroupName==null? "" : System.Uri.EscapeDataString(AutoScalingGroupName))+"&Strategy=" + Strategy+"&DesiredConfiguration=" + DesiredConfiguration+"&Preferences=" + Preferences+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Suspends the specified auto scaling processes, or all processes, for the specified Auto Scaling group.</p> <p>If you suspend either the <code>Launch</code> or <code>Terminate</code> process types, it can prevent other process types from functioning properly. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html">Suspending and resuming scaling processes</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>To resume processes that have been suspended, call the <a>ResumeProcesses</a> API.</p>
		/// GET_SuspendProcesses #Action=SuspendProcesses
		/// </summary>
		/// <param name="AutoScalingGroupName">The name of the Auto Scaling group.</param>
		/// <param name="ScalingProcesses"><p>One or more of the following processes:</p> <ul> <li> <p> <code>Launch</code> </p> </li> <li> <p> <code>Terminate</code> </p> </li> <li> <p> <code>AddToLoadBalancer</code> </p> </li> <li> <p> <code>AlarmNotification</code> </p> </li> <li> <p> <code>AZRebalance</code> </p> </li> <li> <p> <code>HealthCheck</code> </p> </li> <li> <p> <code>InstanceRefresh</code> </p> </li> <li> <p> <code>ReplaceUnhealthy</code> </p> </li> <li> <p> <code>ScheduledActions</code> </p> </li> </ul> <p>If you omit this property, all processes are specified.</p></param>
		/// <returns>Success</returns>
		public async Task GET_SuspendProcessesAsync(string AutoScalingGroupName, string[] ScalingProcesses, GET_SuspendProcessesAction Action, GET_SuspendProcessesVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=SuspendProcesses?AutoScalingGroupName=" + (AutoScalingGroupName==null? "" : System.Uri.EscapeDataString(AutoScalingGroupName))+"&"+string.Join("&", ScalingProcesses.Select(z => $"ScalingProcesses={System.Uri.EscapeDataString(z.ToString())}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Terminates the specified instance and optionally adjusts the desired group size. This operation cannot be called on instances in a warm pool.</p> <p>This call simply makes a termination request. The instance is not terminated immediately. When an instance is terminated, the instance status changes to <code>terminated</code>. You can't connect to or start an instance after you've terminated it.</p> <p>If you do not specify the option to decrement the desired capacity, Amazon EC2 Auto Scaling launches instances to replace the ones that are terminated. </p> <p>By default, Amazon EC2 Auto Scaling balances instances across all Availability Zones. If you decrement the desired capacity, your Auto Scaling group can become unbalanced between Availability Zones. Amazon EC2 Auto Scaling tries to rebalance the group, and rebalancing might terminate instances in other zones. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/auto-scaling-benefits.html#AutoScalingBehavior.InstanceUsage">Rebalancing activities</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
		/// GET_TerminateInstanceInAutoScalingGroup #Action=TerminateInstanceInAutoScalingGroup
		/// </summary>
		/// <param name="InstanceId">The ID of the instance.</param>
		/// <param name="ShouldDecrementDesiredCapacity">Indicates whether terminating the instance also decrements the size of the Auto Scaling group.</param>
		/// <returns>Success</returns>
		public async Task GET_TerminateInstanceInAutoScalingGroupAsync(string InstanceId, bool ShouldDecrementDesiredCapacity, GET_TerminateInstanceInAutoScalingGroupAction Action, GET_TerminateInstanceInAutoScalingGroupVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=TerminateInstanceInAutoScalingGroup?InstanceId=" + (InstanceId==null? "" : System.Uri.EscapeDataString(InstanceId))+"&ShouldDecrementDesiredCapacity="+ShouldDecrementDesiredCapacity+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p> <b>We strongly recommend that all Auto Scaling groups use launch templates to ensure full functionality for Amazon EC2 Auto Scaling and Amazon EC2.</b> </p> <p>Updates the configuration for the specified Auto Scaling group.</p> <p>To update an Auto Scaling group, specify the name of the group and the property that you want to change. Any properties that you don't specify are not changed by this update request. The new settings take effect on any scaling activities after this call returns. </p> <p>If you associate a new launch configuration or template with an Auto Scaling group, all new instances will get the updated configuration. Existing instances continue to run with the configuration that they were originally launched with. When you update a group to specify a mixed instances policy instead of a launch configuration or template, existing instances may be replaced to match the new purchasing options that you specified in the policy. For example, if the group currently has 100% On-Demand capacity and the policy specifies 50% Spot capacity, this means that half of your instances will be gradually terminated and relaunched as Spot Instances. When replacing instances, Amazon EC2 Auto Scaling launches new instances before terminating the old ones, so that updating your group does not compromise the performance or availability of your application.</p> <p>Note the following about changing <code>DesiredCapacity</code>, <code>MaxSize</code>, or <code>MinSize</code>:</p> <ul> <li> <p>If a scale-in activity occurs as a result of a new <code>DesiredCapacity</code> value that is lower than the current size of the group, the Auto Scaling group uses its termination policy to determine which instances to terminate.</p> </li> <li> <p>If you specify a new value for <code>MinSize</code> without specifying a value for <code>DesiredCapacity</code>, and the new <code>MinSize</code> is larger than the current size of the group, this sets the group's <code>DesiredCapacity</code> to the new <code>MinSize</code> value.</p> </li> <li> <p>If you specify a new value for <code>MaxSize</code> without specifying a value for <code>DesiredCapacity</code>, and the new <code>MaxSize</code> is smaller than the current size of the group, this sets the group's <code>DesiredCapacity</code> to the new <code>MaxSize</code> value.</p> </li> </ul> <p>To see which properties have been set, call the <a>DescribeAutoScalingGroups</a> API. To view the scaling policies for an Auto Scaling group, call the <a>DescribePolicies</a> API. If the group has scaling policies, you can update them by calling the <a>PutScalingPolicy</a> API.</p>
		/// GET_UpdateAutoScalingGroup #Action=UpdateAutoScalingGroup
		/// </summary>
		/// <param name="AutoScalingGroupName">The name of the Auto Scaling group.</param>
		/// <param name="LaunchConfigurationName">The name of the launch configuration. If you specify <code>LaunchConfigurationName</code> in your update request, you can't specify <code>LaunchTemplate</code> or <code>MixedInstancesPolicy</code>.</param>
		/// <param name="LaunchTemplate">The launch template and version to use to specify the updates. If you specify <code>LaunchTemplate</code> in your update request, you can't specify <code>LaunchConfigurationName</code> or <code>MixedInstancesPolicy</code>.</param>
		/// <param name="MixedInstancesPolicy">The mixed instances policy. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-mixed-instances-groups.html">Auto Scaling groups with multiple instance types and purchase options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</param>
		/// <param name="MinSize">The minimum size of the Auto Scaling group.</param>
		/// <param name="MaxSize"><p>The maximum size of the Auto Scaling group.</p> <note> <p>With a mixed instances policy that uses instance weighting, Amazon EC2 Auto Scaling may need to go above <code>MaxSize</code> to meet your capacity requirements. In this event, Amazon EC2 Auto Scaling will never go above <code>MaxSize</code> by more than your largest instance weight (weights that define how many units each instance contributes to the desired capacity of the group).</p> </note></param>
		/// <param name="DesiredCapacity">The desired capacity is the initial capacity of the Auto Scaling group after this operation completes and the capacity it attempts to maintain. This number must be greater than or equal to the minimum size of the group and less than or equal to the maximum size of the group.</param>
		/// <param name="DefaultCooldown"><p> <i>Only needed if you use simple scaling policies.</i> </p> <p>The amount of time, in seconds, between one scaling activity ending and another one starting due to simple scaling policies. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling cooldowns for Amazon EC2 Auto Scaling</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p></param>
		/// <param name="AvailabilityZones">One or more Availability Zones for the group.</param>
		/// <param name="HealthCheckType"><p>A comma-separated value string of one or more health check types.</p> <p>The valid values are <code>EC2</code>, <code>ELB</code>, and <code>VPC_LATTICE</code>. <code>EC2</code> is the default health check and cannot be disabled. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html">Health checks for Auto Scaling instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>Only specify <code>EC2</code> if you must clear a value that was previously set.</p></param>
		/// <param name="HealthCheckGracePeriod">The amount of time, in seconds, that Amazon EC2 Auto Scaling waits before checking the health status of an EC2 instance that has come into service and marking it unhealthy due to a failed health check. This is useful if your instances do not immediately pass their health checks after they enter the <code>InService</code> state. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/health-check-grace-period.html">Set the health check grace period for an Auto Scaling group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</param>
		/// <param name="PlacementGroup"><p>The name of an existing placement group into which to launch your instances. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html">Placement groups</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p> <note> <p>A <i>cluster</i> placement group is a logical grouping of instances within a single Availability Zone. You cannot specify multiple Availability Zones and a cluster placement group. </p> </note></param>
		/// <param name="VPCZoneIdentifier">A comma-separated list of subnet IDs for a virtual private cloud (VPC). If you specify <code>VPCZoneIdentifier</code> with <code>AvailabilityZones</code>, the subnets that you specify must reside in those Availability Zones.</param>
		/// <param name="TerminationPolicies"><p>A policy or a list of policies that are used to select the instances to terminate. The policies are executed in the order that you list them. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-termination-policies.html">Work with Amazon EC2 Auto Scaling termination policies</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>Valid values: <code>Default</code> | <code>AllocationStrategy</code> | <code>ClosestToNextInstanceHour</code> | <code>NewestInstance</code> | <code>OldestInstance</code> | <code>OldestLaunchConfiguration</code> | <code>OldestLaunchTemplate</code> | <code>arn:aws:lambda:region:account-id:function:my-function:my-alias</code> </p></param>
		/// <param name="NewInstancesProtectedFromScaleIn">Indicates whether newly launched instances are protected from termination by Amazon EC2 Auto Scaling when scaling in. For more information about preventing instances from terminating on scale in, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-instance-protection.html">Using instance scale-in protection</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</param>
		/// <param name="ServiceLinkedRoleARN">The Amazon Resource Name (ARN) of the service-linked role that the Auto Scaling group uses to call other Amazon Web Services on your behalf. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-service-linked-role.html">Service-linked roles</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</param>
		/// <param name="MaxInstanceLifetime">The maximum amount of time, in seconds, that an instance can be in service. The default is null. If specified, the value must be either 0 or a number equal to or greater than 86,400 seconds (1 day). To clear a previously set value, specify a new value of 0. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-max-instance-lifetime.html">Replacing Auto Scaling instances based on maximum instance lifetime</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</param>
		/// <param name="CapacityRebalance">Enables or disables Capacity Rebalancing. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-capacity-rebalancing.html">Use Capacity Rebalancing to handle Amazon EC2 Spot Interruptions</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</param>
		/// <param name="Context">Reserved.</param>
		/// <param name="DesiredCapacityType"><p>The unit of measurement for the value specified for desired capacity. Amazon EC2 Auto Scaling supports <code>DesiredCapacityType</code> for attribute-based instance type selection only. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-asg-instance-type-requirements.html">Creating an Auto Scaling group using attribute-based instance type selection</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>By default, Amazon EC2 Auto Scaling specifies <code>units</code>, which translates into number of instances.</p> <p>Valid values: <code>units</code> | <code>vcpu</code> | <code>memory-mib</code> </p></param>
		/// <param name="DefaultInstanceWarmup"><p>The amount of time, in seconds, until a new instance is considered to have finished initializing and resource consumption to become stable after it enters the <code>InService</code> state. </p> <p>During an instance refresh, Amazon EC2 Auto Scaling waits for the warm-up period after it replaces an instance before it moves on to replacing the next instance. Amazon EC2 Auto Scaling also waits for the warm-up period before aggregating the metrics for new instances with existing instances in the Amazon CloudWatch metrics that are used for scaling, resulting in more reliable usage data. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-default-instance-warmup.html">Set the default instance warmup for an Auto Scaling group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <important> <p>To manage various warm-up settings at the group level, we recommend that you set the default instance warmup, <i>even if it is set to 0 seconds</i>. To remove a value that you previously set, include the property but specify <code>-1</code> for the value. However, we strongly recommend keeping the default instance warmup enabled by specifying a value of <code>0</code> or other nominal value.</p> </important></param>
		/// <returns>Success</returns>
		public async Task GET_UpdateAutoScalingGroupAsync(
					string AutoScalingGroupName, 
					string LaunchConfigurationName, 
					GET_UpdateAutoScalingGroupLaunchTemplate LaunchTemplate, 
					GET_UpdateAutoScalingGroupMixedInstancesPolicy MixedInstancesPolicy, 
					int MinSize, 
					int MaxSize, 
					int DesiredCapacity, 
					int DefaultCooldown, 
					string[] AvailabilityZones, 
					string HealthCheckType, 
					int HealthCheckGracePeriod, 
					string PlacementGroup, 
					string VPCZoneIdentifier, 
					string[] TerminationPolicies, 
					bool NewInstancesProtectedFromScaleIn, 
					string ServiceLinkedRoleARN, 
					int MaxInstanceLifetime, 
					bool CapacityRebalance, 
					string Context, 
					string DesiredCapacityType, 
					int DefaultInstanceWarmup, 
					GET_UpdateAutoScalingGroupAction Action, 
					GET_UpdateAutoScalingGroupVersion Version, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=UpdateAutoScalingGroup?AutoScalingGroupName=" + (AutoScalingGroupName==null? "" : System.Uri.EscapeDataString(AutoScalingGroupName))+"&LaunchConfigurationName=" + (LaunchConfigurationName==null? "" : System.Uri.EscapeDataString(LaunchConfigurationName))+"&LaunchTemplate=" + LaunchTemplate+"&MixedInstancesPolicy=" + MixedInstancesPolicy+"&MinSize="+MinSize+"&MaxSize="+MaxSize+"&DesiredCapacity="+DesiredCapacity+"&DefaultCooldown="+DefaultCooldown+"&"+string.Join("&", AvailabilityZones.Select(z => $"AvailabilityZones={System.Uri.EscapeDataString(z.ToString())}"))+"&HealthCheckType=" + (HealthCheckType==null? "" : System.Uri.EscapeDataString(HealthCheckType))+"&HealthCheckGracePeriod="+HealthCheckGracePeriod+"&PlacementGroup=" + (PlacementGroup==null? "" : System.Uri.EscapeDataString(PlacementGroup))+"&VPCZoneIdentifier=" + (VPCZoneIdentifier==null? "" : System.Uri.EscapeDataString(VPCZoneIdentifier))+"&"+string.Join("&", TerminationPolicies.Select(z => $"TerminationPolicies={System.Uri.EscapeDataString(z.ToString())}"))+"&NewInstancesProtectedFromScaleIn="+NewInstancesProtectedFromScaleIn+"&ServiceLinkedRoleARN=" + (ServiceLinkedRoleARN==null? "" : System.Uri.EscapeDataString(ServiceLinkedRoleARN))+"&MaxInstanceLifetime="+MaxInstanceLifetime+"&CapacityRebalance="+CapacityRebalance+"&Context=" + (Context==null? "" : System.Uri.EscapeDataString(Context))+"&DesiredCapacityType=" + (DesiredCapacityType==null? "" : System.Uri.EscapeDataString(DesiredCapacityType))+"&DefaultInstanceWarmup="+DefaultInstanceWarmup+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum GET_AttachInstancesAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AttachInstances = 0,
	}
	
	public enum GET_AttachInstancesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public enum POST_AttachInstancesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public enum GET_AttachLoadBalancerTargetGroupsAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AttachLoadBalancerTargetGroups = 0,
	}
	
	public enum GET_AttachLoadBalancerTargetGroupsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public enum POST_AttachLoadBalancerTargetGroupsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public enum GET_AttachLoadBalancersAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AttachLoadBalancers = 0,
	}
	
	public enum GET_AttachLoadBalancersVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public enum POST_AttachLoadBalancersVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public enum GET_AttachTrafficSourcesAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AttachTrafficSources = 0,
	}
	
	public enum GET_AttachTrafficSourcesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public enum POST_AttachTrafficSourcesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public enum GET_BatchDeleteScheduledActionAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BatchDeleteScheduledAction = 0,
	}
	
	public enum GET_BatchDeleteScheduledActionVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public enum POST_BatchDeleteScheduledActionVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public enum GET_BatchPutScheduledUpdateGroupActionAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BatchPutScheduledUpdateGroupAction = 0,
	}
	
	public enum GET_BatchPutScheduledUpdateGroupActionVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public enum POST_BatchPutScheduledUpdateGroupActionVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public enum GET_CancelInstanceRefreshAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CancelInstanceRefresh = 0,
	}
	
	public enum GET_CancelInstanceRefreshVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public enum POST_CancelInstanceRefreshVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public enum GET_CompleteLifecycleActionAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CompleteLifecycleAction = 0,
	}
	
	public enum GET_CompleteLifecycleActionVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public enum POST_CompleteLifecycleActionVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public class GET_CreateAutoScalingGroupLaunchTemplate
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string LaunchTemplateId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LaunchTemplateName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Version { get; set; }
	}
	
	public class GET_CreateAutoScalingGroupMixedInstancesPolicy
	{
		
		[System.Runtime.Serialization.DataMember()]
		public LaunchTemplate LaunchTemplate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InstancesDistribution InstancesDistribution { get; set; }
	}
	
	public enum GET_CreateAutoScalingGroupAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreateAutoScalingGroup = 0,
	}
	
	public enum GET_CreateAutoScalingGroupVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public enum POST_CreateAutoScalingGroupVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public class GET_CreateLaunchConfigurationInstanceMonitoring
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Enabled { get; set; }
	}
	
	public class GET_CreateLaunchConfigurationMetadataOptions
	{
		
		[System.Runtime.Serialization.DataMember()]
		public InstanceMetadataHttpTokensState HttpTokens { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> HttpPutResponseHopLimit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InstanceMetadataEndpointState HttpEndpoint { get; set; }
	}
	
	public enum GET_CreateLaunchConfigurationAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreateLaunchConfiguration = 0,
	}
	
	public enum GET_CreateLaunchConfigurationVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public enum POST_CreateLaunchConfigurationVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public enum GET_CreateOrUpdateTagsAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreateOrUpdateTags = 0,
	}
	
	public enum GET_CreateOrUpdateTagsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public enum POST_CreateOrUpdateTagsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public enum GET_DeleteAutoScalingGroupAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DeleteAutoScalingGroup = 0,
	}
	
	public enum GET_DeleteAutoScalingGroupVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public enum POST_DeleteAutoScalingGroupVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public enum GET_DeleteLaunchConfigurationAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DeleteLaunchConfiguration = 0,
	}
	
	public enum GET_DeleteLaunchConfigurationVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public enum POST_DeleteLaunchConfigurationVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public enum GET_DeleteLifecycleHookAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DeleteLifecycleHook = 0,
	}
	
	public enum GET_DeleteLifecycleHookVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public enum POST_DeleteLifecycleHookVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public enum GET_DeleteNotificationConfigurationAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DeleteNotificationConfiguration = 0,
	}
	
	public enum GET_DeleteNotificationConfigurationVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public enum POST_DeleteNotificationConfigurationVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public enum GET_DeletePolicyAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DeletePolicy = 0,
	}
	
	public enum GET_DeletePolicyVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public enum POST_DeletePolicyVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public enum GET_DeleteScheduledActionAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DeleteScheduledAction = 0,
	}
	
	public enum GET_DeleteScheduledActionVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public enum POST_DeleteScheduledActionVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public enum GET_DeleteTagsAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DeleteTags = 0,
	}
	
	public enum GET_DeleteTagsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public enum POST_DeleteTagsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public enum GET_DeleteWarmPoolAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DeleteWarmPool = 0,
	}
	
	public enum GET_DeleteWarmPoolVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public enum POST_DeleteWarmPoolVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public enum GET_DescribeAccountLimitsAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DescribeAccountLimits = 0,
	}
	
	public enum GET_DescribeAccountLimitsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public enum POST_DescribeAccountLimitsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public enum GET_DescribeAdjustmentTypesAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DescribeAdjustmentTypes = 0,
	}
	
	public enum GET_DescribeAdjustmentTypesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public enum POST_DescribeAdjustmentTypesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public enum GET_DescribeAutoScalingGroupsAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DescribeAutoScalingGroups = 0,
	}
	
	public enum GET_DescribeAutoScalingGroupsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public enum POST_DescribeAutoScalingGroupsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public enum GET_DescribeAutoScalingInstancesAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DescribeAutoScalingInstances = 0,
	}
	
	public enum GET_DescribeAutoScalingInstancesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public enum POST_DescribeAutoScalingInstancesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public enum GET_DescribeAutoScalingNotificationTypesAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DescribeAutoScalingNotificationTypes = 0,
	}
	
	public enum GET_DescribeAutoScalingNotificationTypesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public enum POST_DescribeAutoScalingNotificationTypesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public enum GET_DescribeInstanceRefreshesAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DescribeInstanceRefreshes = 0,
	}
	
	public enum GET_DescribeInstanceRefreshesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public enum POST_DescribeInstanceRefreshesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public enum GET_DescribeLaunchConfigurationsAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DescribeLaunchConfigurations = 0,
	}
	
	public enum GET_DescribeLaunchConfigurationsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public enum POST_DescribeLaunchConfigurationsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public enum GET_DescribeLifecycleHookTypesAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DescribeLifecycleHookTypes = 0,
	}
	
	public enum GET_DescribeLifecycleHookTypesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public enum POST_DescribeLifecycleHookTypesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public enum GET_DescribeLifecycleHooksAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DescribeLifecycleHooks = 0,
	}
	
	public enum GET_DescribeLifecycleHooksVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public enum POST_DescribeLifecycleHooksVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public enum GET_DescribeLoadBalancerTargetGroupsAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DescribeLoadBalancerTargetGroups = 0,
	}
	
	public enum GET_DescribeLoadBalancerTargetGroupsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public enum POST_DescribeLoadBalancerTargetGroupsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public enum GET_DescribeLoadBalancersAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DescribeLoadBalancers = 0,
	}
	
	public enum GET_DescribeLoadBalancersVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public enum POST_DescribeLoadBalancersVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public enum GET_DescribeMetricCollectionTypesAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DescribeMetricCollectionTypes = 0,
	}
	
	public enum GET_DescribeMetricCollectionTypesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public enum POST_DescribeMetricCollectionTypesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public enum GET_DescribeNotificationConfigurationsAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DescribeNotificationConfigurations = 0,
	}
	
	public enum GET_DescribeNotificationConfigurationsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public enum POST_DescribeNotificationConfigurationsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public enum GET_DescribePoliciesAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DescribePolicies = 0,
	}
	
	public enum GET_DescribePoliciesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public enum POST_DescribePoliciesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public enum GET_DescribeScalingActivitiesAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DescribeScalingActivities = 0,
	}
	
	public enum GET_DescribeScalingActivitiesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public enum POST_DescribeScalingActivitiesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public enum GET_DescribeScalingProcessTypesAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DescribeScalingProcessTypes = 0,
	}
	
	public enum GET_DescribeScalingProcessTypesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public enum POST_DescribeScalingProcessTypesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public enum GET_DescribeScheduledActionsAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DescribeScheduledActions = 0,
	}
	
	public enum GET_DescribeScheduledActionsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public enum POST_DescribeScheduledActionsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public enum GET_DescribeTagsAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DescribeTags = 0,
	}
	
	public enum GET_DescribeTagsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public enum POST_DescribeTagsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public enum GET_DescribeTerminationPolicyTypesAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DescribeTerminationPolicyTypes = 0,
	}
	
	public enum GET_DescribeTerminationPolicyTypesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public enum POST_DescribeTerminationPolicyTypesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public enum GET_DescribeTrafficSourcesAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DescribeTrafficSources = 0,
	}
	
	public enum GET_DescribeTrafficSourcesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public enum POST_DescribeTrafficSourcesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public enum GET_DescribeWarmPoolAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DescribeWarmPool = 0,
	}
	
	public enum GET_DescribeWarmPoolVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public enum POST_DescribeWarmPoolVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public enum GET_DetachInstancesAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DetachInstances = 0,
	}
	
	public enum GET_DetachInstancesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public enum POST_DetachInstancesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public enum GET_DetachLoadBalancerTargetGroupsAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DetachLoadBalancerTargetGroups = 0,
	}
	
	public enum GET_DetachLoadBalancerTargetGroupsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public enum POST_DetachLoadBalancerTargetGroupsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public enum GET_DetachLoadBalancersAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DetachLoadBalancers = 0,
	}
	
	public enum GET_DetachLoadBalancersVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public enum POST_DetachLoadBalancersVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public enum GET_DetachTrafficSourcesAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DetachTrafficSources = 0,
	}
	
	public enum GET_DetachTrafficSourcesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public enum POST_DetachTrafficSourcesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public enum GET_DisableMetricsCollectionAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DisableMetricsCollection = 0,
	}
	
	public enum GET_DisableMetricsCollectionVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public enum POST_DisableMetricsCollectionVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public enum GET_EnableMetricsCollectionAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EnableMetricsCollection = 0,
	}
	
	public enum GET_EnableMetricsCollectionVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public enum POST_EnableMetricsCollectionVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public enum GET_EnterStandbyAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EnterStandby = 0,
	}
	
	public enum GET_EnterStandbyVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public enum POST_EnterStandbyVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public enum GET_ExecutePolicyAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ExecutePolicy = 0,
	}
	
	public enum GET_ExecutePolicyVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public enum POST_ExecutePolicyVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public enum GET_ExitStandbyAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ExitStandby = 0,
	}
	
	public enum GET_ExitStandbyVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public enum POST_ExitStandbyVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public enum GET_GetPredictiveScalingForecastAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GetPredictiveScalingForecast = 0,
	}
	
	public enum GET_GetPredictiveScalingForecastVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public enum POST_GetPredictiveScalingForecastVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public enum GET_PutLifecycleHookAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PutLifecycleHook = 0,
	}
	
	public enum GET_PutLifecycleHookVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public enum POST_PutLifecycleHookVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public enum GET_PutNotificationConfigurationAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PutNotificationConfiguration = 0,
	}
	
	public enum GET_PutNotificationConfigurationVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public enum POST_PutNotificationConfigurationVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public class GET_PutScalingPolicyTargetTrackingConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PredefinedMetricSpecification PredefinedMetricSpecification { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CustomizedMetricSpecification CustomizedMetricSpecification { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public double TargetValue { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DisableScaleIn { get; set; }
	}
	
	public class GET_PutScalingPolicyPredictiveScalingConfiguration
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public PredictiveScalingMetricSpecification[] MetricSpecifications { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PredictiveScalingMode Mode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SchedulingBufferTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PredictiveScalingMaxCapacityBreachBehavior MaxCapacityBreachBehavior { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxCapacityBuffer { get; set; }
	}
	
	public enum GET_PutScalingPolicyAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PutScalingPolicy = 0,
	}
	
	public enum GET_PutScalingPolicyVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public enum POST_PutScalingPolicyVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public enum GET_PutScheduledUpdateGroupActionAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PutScheduledUpdateGroupAction = 0,
	}
	
	public enum GET_PutScheduledUpdateGroupActionVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public enum POST_PutScheduledUpdateGroupActionVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public class GET_PutWarmPoolInstanceReusePolicy
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ReuseOnScaleIn { get; set; }
	}
	
	public enum GET_PutWarmPoolAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PutWarmPool = 0,
	}
	
	public enum GET_PutWarmPoolVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public enum POST_PutWarmPoolVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public enum GET_RecordLifecycleActionHeartbeatAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RecordLifecycleActionHeartbeat = 0,
	}
	
	public enum GET_RecordLifecycleActionHeartbeatVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public enum POST_RecordLifecycleActionHeartbeatVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public enum GET_ResumeProcessesAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ResumeProcesses = 0,
	}
	
	public enum GET_ResumeProcessesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public enum POST_ResumeProcessesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public enum GET_RollbackInstanceRefreshAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RollbackInstanceRefresh = 0,
	}
	
	public enum GET_RollbackInstanceRefreshVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public enum POST_RollbackInstanceRefreshVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public enum GET_SetDesiredCapacityAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SetDesiredCapacity = 0,
	}
	
	public enum GET_SetDesiredCapacityVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public enum POST_SetDesiredCapacityVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public enum GET_SetInstanceHealthAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SetInstanceHealth = 0,
	}
	
	public enum GET_SetInstanceHealthVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public enum POST_SetInstanceHealthVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public enum GET_SetInstanceProtectionAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SetInstanceProtection = 0,
	}
	
	public enum GET_SetInstanceProtectionVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public enum POST_SetInstanceProtectionVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public class GET_StartInstanceRefreshDesiredConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public LaunchTemplateSpecification LaunchTemplate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MixedInstancesPolicy MixedInstancesPolicy { get; set; }
	}
	
	public class GET_StartInstanceRefreshPreferences
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MinHealthyPercentage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> InstanceWarmup { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> CheckpointPercentages { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> CheckpointDelay { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> SkipMatching { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AutoRollback { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ScaleInProtectedInstances ScaleInProtectedInstances { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StandbyInstances StandbyInstances { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AlarmSpecification AlarmSpecification { get; set; }
	}
	
	public enum GET_StartInstanceRefreshAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StartInstanceRefresh = 0,
	}
	
	public enum GET_StartInstanceRefreshVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public enum POST_StartInstanceRefreshVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public enum GET_SuspendProcessesAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SuspendProcesses = 0,
	}
	
	public enum GET_SuspendProcessesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public enum POST_SuspendProcessesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public enum GET_TerminateInstanceInAutoScalingGroupAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TerminateInstanceInAutoScalingGroup = 0,
	}
	
	public enum GET_TerminateInstanceInAutoScalingGroupVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public enum POST_TerminateInstanceInAutoScalingGroupVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public class GET_UpdateAutoScalingGroupLaunchTemplate
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string LaunchTemplateId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LaunchTemplateName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Version { get; set; }
	}
	
	public class GET_UpdateAutoScalingGroupMixedInstancesPolicy
	{
		
		[System.Runtime.Serialization.DataMember()]
		public LaunchTemplate LaunchTemplate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InstancesDistribution InstancesDistribution { get; set; }
	}
	
	public enum GET_UpdateAutoScalingGroupAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UpdateAutoScalingGroup = 0,
	}
	
	public enum GET_UpdateAutoScalingGroupVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
	
	public enum POST_UpdateAutoScalingGroupVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-01-01")]
		_2011Minus01Minus01 = 0,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
