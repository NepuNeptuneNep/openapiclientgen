//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchDataElement
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Data Data { get; set; }
		
		/// <summary>
		/// Template id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="template")]
		public System.Nullable<System.Int32> Template { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Data
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Template component definition
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Component
	{
		
		/// <summary>
		/// Defines component class/type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cls")]
		public System.Nullable<ComponentCls> Cls { get; set; }
		
		/// <summary>
		/// Defines data field for Table and Container components which are used to iterate over list of items
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataIndex")]
		public string DataIndex { get; set; }
		
		/// <summary>
		/// Height in units
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="height")]
		public System.Nullable<System.Double> Height { get; set; }
		
		/// <summary>
		/// Component id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Position from the page left in units
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="left")]
		public System.Nullable<System.Double> Left { get; set; }
		
		/// <summary>
		/// Position from the page top in units
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="top")]
		public System.Nullable<System.Double> Top { get; set; }
		
		/// <summary>
		/// Component value
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
		
		/// <summary>
		/// Width in units
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="width")]
		public System.Nullable<System.Double> Width { get; set; }
		
		/// <summary>
		/// Defines the rendering order on page. Components with smaller zindex are rendered before
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="zindex")]
		public System.Nullable<System.Int32> Zindex { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ComponentCls
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		labelComponent = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		numberComponent = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		textComponent = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		imageComponent = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		dateComponent = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		hlineComponent = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		vlineComponent = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		tableComponent = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		compositeComponent = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		barcodeComponent = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		qrcodeComponent = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		chartComponent = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		rectangleComponent = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		headerComponent = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		footerComponent = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		checkboxComponent = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		radioComponent = 16,
	}
	
	/// <summary>
	/// Template object
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Template
	{
		
		/// <summary>
		/// Unique identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Timestamp when the template was modified
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modified")]
		public string Modified { get; set; }
		
		/// <summary>
		/// Template name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Indicates if the workspace is the owner of the template
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="owner")]
		public System.Nullable<System.Boolean> Owner { get; set; }
		
		/// <summary>
		/// A list of tags assigned to a template
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public string[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TemplateDefinition
	{
		
		/// <summary>
		/// Defines filter and sort option for root data set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSettings")]
		public TemplateDefinitionDataSettings DataSettings { get; set; }
		
		/// <summary>
		/// Configuration preferences for the editor
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="editor")]
		public TemplateDefinitionEditor Editor { get; set; }
		
		/// <summary>
		/// Unique identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Indicates if the template is a draft or published.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isDraft")]
		public System.Nullable<System.Boolean> IsDraft { get; set; }
		
		/// <summary>
		/// Defines template layout (e.g page format, margins).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="layout")]
		public TemplateDefinitionLayout Layout { get; set; }
		
		/// <summary>
		/// Template name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Defines page or label size, margins and components on page or label
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pages")]
		public TemplateDefinitionPages[] TemplateDefinitionPages { get; set; }
		
		/// <summary>
		/// A list of tags assigned to a template
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public string[] Tags { get; set; }
	}
	
	public class TemplateDefinitionDataSettings
	{
		
		[System.Runtime.Serialization.DataMember(Name="filterBy")]
		public string[] FilterBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sortBy")]
		public string[] SortBy { get; set; }
	}
	
	public class TemplateDefinitionEditor
	{
		
		[System.Runtime.Serialization.DataMember(Name="heightMultiplier")]
		public System.Nullable<System.Double> HeightMultiplier { get; set; }
	}
	
	public class TemplateDefinitionLayout
	{
		
		/// <summary>
		/// Defines how many pages or labels should be empty
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="emptyLabels")]
		public System.Nullable<System.Int32> EmptyLabels { get; set; }
		
		/// <summary>
		/// Defines template page size
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="format")]
		public System.Nullable<TemplateDefinitionLayoutFormat> Format { get; set; }
		
		/// <summary>
		/// Page height in units
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="height")]
		public System.Nullable<System.Double> Height { get; set; }
		
		/// <summary>
		/// Page margins in units
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="margins")]
		public TemplateDefinitionLayoutMargins Margins { get; set; }
		
		/// <summary>
		/// Page orientation
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orientation")]
		public System.Nullable<TemplateDefinitionLayoutOrientation> Orientation { get; set; }
		
		/// <summary>
		/// Defines page size if layout is repeated on the page e.g sheet labels
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="repeatLayout")]
		public TemplateDefinitionLayoutRepeatLayout RepeatLayout { get; set; }
		
		/// <summary>
		/// Page rotation in degrees
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rotation")]
		public System.Nullable<TemplateDefinitionLayoutRotation> Rotation { get; set; }
		
		/// <summary>
		/// Measure unit
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public System.Nullable<TemplateDefinitionLayoutUnit> Unit { get; set; }
		
		/// <summary>
		/// Page width in units
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="width")]
		public System.Nullable<System.Double> Width { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum TemplateDefinitionLayoutFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		A4 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		letter = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		custom = 2,
	}
	
	public class TemplateDefinitionLayoutMargins
	{
		
		[System.Runtime.Serialization.DataMember(Name="bottom")]
		public System.Nullable<System.Double> Bottom { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="left")]
		public System.Nullable<System.Double> Left { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="right")]
		public System.Nullable<System.Double> Right { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="top")]
		public System.Nullable<System.Double> Top { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum TemplateDefinitionLayoutOrientation
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		portrait = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		landscape = 1,
	}
	
	public class TemplateDefinitionLayoutRepeatLayout
	{
		
		/// <summary>
		/// Defines template page size
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="format")]
		public TemplateDefinitionLayoutFormat Format { get; set; }
		
		/// <summary>
		/// Page height in units
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="height")]
		public System.Nullable<System.Double> Height { get; set; }
		
		/// <summary>
		/// Page width in units
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="width")]
		public System.Nullable<System.Double> Width { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum TemplateDefinitionLayoutRotation
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_90 = 90,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_180 = 180,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_270 = 270,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum TemplateDefinitionLayoutUnit
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		cm = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="in")]
		_in = 1,
	}
	
	public class TemplateDefinitionPages
	{
		
		[System.Runtime.Serialization.DataMember(Name="components")]
		public Component[] Components { get; set; }
		
		/// <summary>
		/// Page height in units
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="height")]
		public System.Nullable<System.Double> Height { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="margins")]
		public TemplateDefinitionPagesMargins Margins { get; set; }
		
		/// <summary>
		/// Page width in units
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="width")]
		public System.Nullable<System.Double> Width { get; set; }
	}
	
	public class TemplateDefinitionPagesMargins
	{
		
		/// <summary>
		/// Page or label margin from bottom
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bottom")]
		public System.Nullable<System.Double> Bottom { get; set; }
		
		/// <summary>
		/// Page or label margin from right
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="right")]
		public System.Nullable<System.Double> Right { get; set; }
	}
	
	/// <summary>
	/// Template configuration
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TemplateDefinitionNew
	{
		
		/// <summary>
		/// Indicates if the template is a draft or published.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isDraft")]
		public System.Nullable<System.Boolean> IsDraft { get; set; }
		
		/// <summary>
		/// Defines template layout (e.g page format, margins).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="layout")]
		public TemplateDefinitionNewLayout Layout { get; set; }
		
		/// <summary>
		/// Template name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Defines page or label size, margins and components on page or label
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pages")]
		public TemplateDefinitionNewPages[] TemplateDefinitionNewPages { get; set; }
		
		/// <summary>
		/// A list of tags assigned to a template
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public string[] Tags { get; set; }
	}
	
	public class TemplateDefinitionNewLayout
	{
		
		/// <summary>
		/// Defines how many pages or labels should be empty
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="emptyLabels")]
		public System.Nullable<System.Int32> EmptyLabels { get; set; }
		
		/// <summary>
		/// Defines template page size
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="format")]
		public TemplateDefinitionLayoutFormat Format { get; set; }
		
		/// <summary>
		/// Page height in units
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="height")]
		public System.Nullable<System.Double> Height { get; set; }
		
		/// <summary>
		/// Page margins in units
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="margins")]
		public TemplateDefinitionNewLayoutMargins Margins { get; set; }
		
		/// <summary>
		/// Page orientation
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orientation")]
		public TemplateDefinitionLayoutOrientation Orientation { get; set; }
		
		/// <summary>
		/// Defines page size if layout is repeated on the page e.g sheet labels
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="repeatLayout")]
		public TemplateDefinitionNewLayoutRepeatLayout RepeatLayout { get; set; }
		
		/// <summary>
		/// Page rotation in degrees
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rotaion")]
		public System.Nullable<TemplateDefinitionNewLayoutRotaion> Rotaion { get; set; }
		
		/// <summary>
		/// Measure unit
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public System.Nullable<TemplateDefinitionNewLayoutUnit> Unit { get; set; }
		
		/// <summary>
		/// Page width in units
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="width")]
		public System.Nullable<System.Double> Width { get; set; }
	}
	
	public class TemplateDefinitionNewLayoutMargins
	{
		
		[System.Runtime.Serialization.DataMember(Name="bottom")]
		public System.Nullable<System.Double> Bottom { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="left")]
		public System.Nullable<System.Double> Left { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="right")]
		public System.Nullable<System.Double> Right { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="top")]
		public System.Nullable<System.Double> Top { get; set; }
	}
	
	public class TemplateDefinitionNewLayoutRepeatLayout
	{
		
		/// <summary>
		/// Defines template page size
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="format")]
		public TemplateDefinitionLayoutFormat Format { get; set; }
		
		/// <summary>
		/// Page height in units
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="height")]
		public System.Nullable<System.Double> Height { get; set; }
		
		/// <summary>
		/// Page width in units
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="width")]
		public System.Nullable<System.Double> Width { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum TemplateDefinitionNewLayoutRotaion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_90 = 90,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_180 = 180,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_270 = 270,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum TemplateDefinitionNewLayoutUnit
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		cm = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="in")]
		_in = 1,
	}
	
	public class TemplateDefinitionNewPages
	{
		
		[System.Runtime.Serialization.DataMember(Name="components")]
		public Component[] Components { get; set; }
		
		/// <summary>
		/// Page height in units
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="height")]
		public System.Nullable<System.Double> Height { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="margins")]
		public TemplateDefinitionNewPagesMargins Margins { get; set; }
		
		/// <summary>
		/// Page width in units
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="width")]
		public System.Nullable<System.Double> Width { get; set; }
	}
	
	public class TemplateDefinitionNewPagesMargins
	{
		
		/// <summary>
		/// Page or label margin from bottom
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bottom")]
		public System.Nullable<System.Double> Bottom { get; set; }
		
		/// <summary>
		/// Page or label margin from right
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="right")]
		public System.Nullable<System.Double> Right { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Workspace
	{
		
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public string Created_at { get; set; }
		
		/// <summary>
		/// Internal workspace id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// The unique workspace idenfitifer specified by your application
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="identifier")]
		public string Identifier { get; set; }
		
		/// <summary>
		/// True if a master workspace
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="is_master_workspace")]
		public System.Nullable<System.Boolean> Is_master_workspace { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Get templates
		/// Returns a list of templates available for the authenticated workspace
		/// GetTemplates templates
		/// </summary>
		/// <returns>An array of template objects</returns>
		public async Task<GetTemplatesReturn> GetTemplatesAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "templates";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetTemplatesReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create template
		/// Creates a new template. If template configuration is not specified in the request body then an empty template is created. Template is placed to the workspace specified in authentication params. Template configuration must be sent in the request body.
		/// CreateTemplate templates
		/// </summary>
		/// <param name="requestBody">Template configuration as JSON string</param>
		/// <returns>Template configuration as JSON object</returns>
		public async Task<CreateTemplateReturn> CreateTemplateAsync(TemplateDefinitionNew requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "templates";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CreateTemplateReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Generate document (multiple templates)
		/// Allows to merge multiples template with data and returns base64 encoded document or public URL to a document. NB! When the public URL option is used, the document is stored for 30 days and automatically deleted.
		/// MergeTemplates templates/output
		/// </summary>
		/// <param name="name">Document name, returned in the meta data.</param>
		/// <param name="format">Document format. The zip option will return a ZIP file with PDF files.</param>
		/// <param name="output">Response format. With the url option, the document is stored for 30 days and automatically deleted.</param>
		/// <param name="requestBody">Data used to specify templates and data objects which are used to merge the template</param>
		/// <returns>Document data</returns>
		public async Task<MergeTemplatesReturn> MergeTemplatesAsync(string name, MergeTemplatesFormat format, MergeTemplatesOutput output, MergeTemplatesPostBody[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "templates/output?name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&format=" + format+"&output=" + output;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<MergeTemplatesReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete template
		/// Deletes the template from workspace
		/// DeleteTemplate templates/templateId
		/// </summary>
		/// <param name="templateId">Template unique identifier</param>
		/// <returns>The request was successfully executed.</returns>
		public async Task<DeleteTemplateReturn> DeleteTemplateAsync(int templateId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "templates/templateId?templateId="+templateId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DeleteTemplateReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get template
		/// Returns template configuration
		/// GetTemplate templates/templateId
		/// </summary>
		/// <param name="templateId">Template unique identifier</param>
		/// <returns>Template configuration as JSON object</returns>
		public async Task<GetTemplateReturn> GetTemplateAsync(int templateId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "templates/templateId?templateId="+templateId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetTemplateReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update template
		/// Updates template configuration. The template configuration for pages and layout must be complete as the entire configuration is replaced and not merged.
		/// UpdateTemplate templates/templateId
		/// </summary>
		/// <param name="templateId">Template unique identifier</param>
		/// <param name="requestBody">Template configuration as JSON string</param>
		/// <returns>Template configuration as JSON object</returns>
		public async Task<UpdateTemplateReturn> UpdateTemplateAsync(int templateId, TemplateDefinitionNew requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "templates/templateId?templateId="+templateId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<UpdateTemplateReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Copy template
		/// Creates a copy of a template to the workspace specified in authentication parameters.
		/// CopyTemplate templates/templateId/copy
		/// </summary>
		/// <param name="templateId">Template unique identifier</param>
		/// <param name="name">Name for the copied template. If name is not specified then the original name is used.</param>
		/// <returns>Template configuration as JSON object</returns>
		public async Task<CopyTemplateReturn> CopyTemplateAsync(int templateId, string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "templates/templateId/copy?templateId="+templateId+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CopyTemplateReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Open editor
		/// Returns an unique URL which you can use to redirect your user to the editor from your application or use the generated URL as iframe source to show the editor within your application.
		/// 
		/// GetEditorUrl templates/templateId/editor
		/// </summary>
		/// <param name="templateId">Template unique identifier</param>
		/// <param name="language">Specify the editor UI language. Defaults to organization editor language.</param>
		/// <param name="requestBody">Data used to generate the PDF. This can be JSON encoded string or a public URL to your JSON file.</param>
		/// <returns>Returns an URL which you can use to redirect your user to the editor or use as iframe source</returns>
		public async Task<GetEditorUrlReturn> GetEditorUrlAsync(int templateId, GetEditorUrlLanguage language, string requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "templates/templateId/editor?templateId="+templateId+"&language=" + language;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetEditorUrlReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Generate document
		/// Merges template with data and returns base64 encoded document or a public URL to a document. You can send json encoded data in request body or a public URL to your json file as the data parameter. NB! When the public URL option is used, the document is stored for 30 days and automatically deleted.
		/// MergeTemplate templates/templateId/output
		/// </summary>
		/// <param name="templateId">Template unique identifier</param>
		/// <param name="name">Document name, returned in the meta data.</param>
		/// <param name="format">Document format. The zip option will return a ZIP file with PDF files.</param>
		/// <param name="output">Response format. With the url option, the document is stored for 30 days and automatically deleted.</param>
		/// <param name="requestBody">Data used to generate the PDF. This can be JSON encoded string or a public URL to your JSON file.</param>
		/// <returns>Document data</returns>
		public async Task<MergeTemplateReturn> MergeTemplateAsync(int templateId, string name, MergeTemplatesFormat format, MergeTemplatesOutput output, Data requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "templates/templateId/output?templateId="+templateId+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&format=" + format+"&output=" + output;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<MergeTemplateReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete workspace
		/// Deletes the workspace
		/// DeleteWorkspace workspaces/workspaceId
		/// </summary>
		/// <param name="workspaceId">Workspace identifier</param>
		/// <returns>The request was successfully executed.</returns>
		public async Task<DeleteWorkspaceReturn> DeleteWorkspaceAsync(string workspaceId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "workspaces/workspaceId?workspaceId=" + (workspaceId==null? "" : System.Uri.EscapeDataString(workspaceId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DeleteWorkspaceReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get workspace
		/// Returns workspace information
		/// GetWorkspace workspaces/workspaceId
		/// </summary>
		/// <param name="workspaceId">Workspace identifier</param>
		/// <returns>Workspace information</returns>
		public async Task<GetWorkspaceReturn> GetWorkspaceAsync(string workspaceId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "workspaces/workspaceId?workspaceId=" + (workspaceId==null? "" : System.Uri.EscapeDataString(workspaceId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetWorkspaceReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public class GetTemplatesReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="response")]
		public Template[] Response { get; set; }
	}
	
	public class CreateTemplateReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="response")]
		public TemplateDefinition Response { get; set; }
	}
	
	public enum MergeTemplatesFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pdf = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		html = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		zip = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		xlsx = 3,
	}
	
	public enum MergeTemplatesOutput
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		base64 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		url = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		I = 2,
	}
	
	public class MergeTemplatesPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Data Data { get; set; }
		
		/// <summary>
		/// Template id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="template")]
		public System.Nullable<System.Int32> Template { get; set; }
	}
	
	public class MergeTemplatesReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public MergeTemplatesReturnMeta Meta { get; set; }
		
		/// <summary>
		/// Base64 encoded document if the output=base64 is used or URL to the document when the output=url is used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="response")]
		public string Response { get; set; }
	}
	
	public class MergeTemplatesReturnMeta
	{
		
		/// <summary>
		/// Document content type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="content-type")]
		public string Content_type { get; set; }
		
		/// <summary>
		/// Document name without the file extension.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="display_name")]
		public string Display_name { get; set; }
		
		/// <summary>
		/// Document encoding
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="encoding")]
		public string Encoding { get; set; }
		
		/// <summary>
		/// Document name. This value is automatically generated if name attribute is not defined in request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	public class DeleteTemplateReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="response")]
		public DeleteTemplateReturnResponse Response { get; set; }
	}
	
	public class DeleteTemplateReturnResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="success")]
		public System.Nullable<System.Boolean> Success { get; set; }
	}
	
	public class GetTemplateReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="response")]
		public TemplateDefinition Response { get; set; }
	}
	
	public class UpdateTemplateReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="response")]
		public TemplateDefinition Response { get; set; }
	}
	
	public class CopyTemplateReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="response")]
		public TemplateDefinition Response { get; set; }
	}
	
	public enum GetEditorUrlLanguage
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		et = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		cs = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		sk = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ru = 4,
	}
	
	public class GetEditorUrlReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="response")]
		public string Response { get; set; }
	}
	
	public class MergeTemplateReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public MergeTemplateReturnMeta Meta { get; set; }
		
		/// <summary>
		/// Base64 encoded document if the output=base64 is used or URL to the document when the output=url is used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="response")]
		public string Response { get; set; }
	}
	
	public class MergeTemplateReturnMeta
	{
		
		/// <summary>
		/// Document content type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="content-type")]
		public string Content_type { get; set; }
		
		/// <summary>
		/// Document name without the file extension.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="display_name")]
		public string Display_name { get; set; }
		
		/// <summary>
		/// Document encoding
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="encoding")]
		public string Encoding { get; set; }
		
		/// <summary>
		/// Document name. This value is automatically generated if name attribute is not defined in request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	public class DeleteWorkspaceReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="response")]
		public DeleteWorkspaceReturnResponse Response { get; set; }
	}
	
	public class DeleteWorkspaceReturnResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="success")]
		public System.Nullable<System.Boolean> Success { get; set; }
	}
	
	public class GetWorkspaceReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="response")]
		public Workspace Response { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
