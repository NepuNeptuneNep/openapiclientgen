//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Account
	{
		
		/// <summary>
		/// Unique identifier of the account
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Name of the account
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Organization of the account
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="org")]
		public string Org { get; set; }
		
		/// <summary>
		/// Status of the account
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<AccountStatus> Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ucis")]
		public AccountUcis[] AccountUcis { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AccountStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ARCHIVED = 3,
	}
	
	public class AccountUcis
	{
		
		[System.Runtime.Serialization.DataMember(Name="health")]
		public AccountUcisHealth Health { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		[System.ComponentModel.DefaultValue("ACCOUNT_UCI")]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; } = "ACCOUNT_UCI";
		
		[System.Runtime.Serialization.DataMember(Name="ucpAccountId")]
		public string UcpAccountId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ucpLabel")]
		public string UcpLabel { get; set; }
	}
	
	public class AccountUcisHealth
	{
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Call
	{
		
		/// <summary>
		/// Unique identifier of the account
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public long AccountId { get; set; }
		
		/// <summary>
		/// Time to answer the call
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="answerTime")]
		public System.Nullable<System.DateOnly> AnswerTime { get; set; }
		
		/// <summary>
		/// Remote caller ID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="callerId")]
		public string CallerId { get; set; }
		
		/// <summary>
		/// Direction of the call
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="direction")]
		public CallDirection Direction { get; set; }
		
		/// <summary>
		/// Duration of the call in milliseconds
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="duration")]
		public long Duration { get; set; }
		
		/// <summary>
		/// End time of the call
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.Nullable<System.DateOnly> EndTime { get; set; }
		
		/// <summary>
		/// External identifier of the call
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="externalId")]
		public string ExternalId { get; set; }
		
		/// <summary>
		/// Unique identifier of the call
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public long Id { get; set; }
		
		/// <summary>
		/// Unique identifier of the account
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="phoneNumber")]
		public string PhoneNumber { get; set; }
		
		/// <summary>
		/// Start time of the call
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.DateOnly StartTime { get; set; }
		
		/// <summary>
		/// Status of the call
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="state")]
		public CallState State { get; set; }
		
		/// <summary>
		/// Record type
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public CallType Type { get; set; }
		
		/// <summary>
		/// Unique identifier of communications provider
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uciId")]
		public long UciId { get; set; }
		
		/// <summary>
		/// Unique identifier of the user
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public long UserId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CallDirection
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INBOUND = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OUTBOUND = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CallState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INITIALIZING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RINGING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HELD = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REMOTE_HELD = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DETACHED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REJECTED = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELLED = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ANSWERED = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MISSED = 9,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CallType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CALL = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CallCreate
	{
		
		/// <summary>
		/// Phone number to call
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="phoneNumber")]
		public string PhoneNumber { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CallTransfer
	{
		
		/// <summary>
		/// Phone number to transfer to
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="phoneNumber")]
		public string PhoneNumber { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Error
	{
		
		[System.Runtime.Serialization.DataMember(Name="field")]
		public string Field { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ErrorResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="errorCode")]
		public string ErrorCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errorMessage")]
		public string ErrorMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Event
	{
		
		/// <summary>
		/// Unique identifier of the account
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public long AccountId { get; set; }
		
		/// <summary>
		/// Time to answer the event
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="answerTime")]
		public System.Nullable<System.DateOnly> AnswerTime { get; set; }
		
		/// <summary>
		/// Remote caller ID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="callerId")]
		public string CallerId { get; set; }
		
		/// <summary>
		/// Direction of the event
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="direction")]
		public CallDirection Direction { get; set; }
		
		/// <summary>
		/// Duration of the call in milliseconds
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="duration")]
		public System.Nullable<System.Int64> Duration { get; set; }
		
		/// <summary>
		/// End time of the event
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.Nullable<System.DateOnly> EndTime { get; set; }
		
		/// <summary>
		/// External identifier of the event
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="externalId")]
		public string ExternalId { get; set; }
		
		/// <summary>
		/// Unique identifier of the event
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public long Id { get; set; }
		
		/// <summary>
		/// Unique identifier of the account
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="phoneNumber")]
		public string PhoneNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="smsData")]
		public string SmsData { get; set; }
		
		/// <summary>
		/// Start time of the event
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.DateOnly StartTime { get; set; }
		
		/// <summary>
		/// Status of the event
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="state")]
		public CallState State { get; set; }
		
		/// <summary>
		/// Record type
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public CallType Type { get; set; }
		
		/// <summary>
		/// Unique identifier of communications provider
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uciId")]
		public long UciId { get; set; }
		
		/// <summary>
		/// Unique identifier of the user
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public long UserId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EventsCount
	{
		
		/// <summary>
		/// Number of events found
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int64> Count { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class User
	{
		
		/// <summary>
		/// Unique identifier of the user's account
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public System.Nullable<System.Int32> AccountId { get; set; }
		
		/// <summary>
		/// The name of the user's account
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="acountLabel")]
		public string AcountLabel { get; set; }
		
		/// <summary>
		/// Contact number of the user
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contactNumber")]
		public string ContactNumber { get; set; }
		
		/// <summary>
		/// Email address of the user
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="emailAddress")]
		public string EmailAddress { get; set; }
		
		/// <summary>
		/// First name of the user
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firstName")]
		public string FirstName { get; set; }
		
		/// <summary>
		/// Unique identifier of the user
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Last name of the user
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastName")]
		public string LastName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="roles")]
		public UserRoles[] UserRoles { get; set; }
		
		/// <summary>
		/// Status of the user
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public AccountStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ucis")]
		public UserUcis[] UserUcis { get; set; }
	}
	
	public class UserRoles
	{
		
		/// <summary>
		/// Code for the role
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// Name for the role
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	public class UserUcis
	{
		
		[System.Runtime.Serialization.DataMember(Name="health")]
		public UserUcisHealth Health { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		[System.ComponentModel.DefaultValue("USER_UCI")]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; } = "USER_UCI";
		
		[System.Runtime.Serialization.DataMember(Name="ucpLabel")]
		public string UcpLabel { get; set; }
	}
	
	public class UserUcisHealth
	{
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Webhook
	{
		
		/// <summary>
		/// Unique identifier of the account
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
		
		/// <summary>
		/// Created time for the webhook
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public string CreatedAt { get; set; }
		
		/// <summary>
		/// Subscribed events for the webhook
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="events")]
		public CallType[] Events { get; set; }
		
		/// <summary>
		/// Expiration time for the webhook
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expireAt")]
		public string ExpireAt { get; set; }
		
		/// <summary>
		/// Unique identifier for the webhook
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Metadata policy for the webhook
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadataPolicy")]
		public System.Nullable<WebhookMetadataPolicy> MetadataPolicy { get; set; }
		
		/// <summary>
		/// Scheduled purge time for the webhook
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="purgeAt")]
		public string PurgeAt { get; set; }
		
		/// <summary>
		/// Last renewed time for the webhook
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="renewedAt")]
		public string RenewedAt { get; set; }
		
		/// <summary>
		/// Signing algorithm for the webhook
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="signingAlgo")]
		public System.Nullable<WebhookSigningAlgo> SigningAlgo { get; set; }
		
		/// <summary>
		/// Signing key for the webhook
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="signingKey")]
		public string SigningKey { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statistics")]
		public WebhookStatistics Statistics { get; set; }
		
		/// <summary>
		/// Status for the webhook
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<WebhookStatus> Status { get; set; }
		
		/// <summary>
		/// Destination URL for events
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		/// <summary>
		/// Unique identifier of the user
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public string UserId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum WebhookMetadataPolicy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HEADER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BODY = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum WebhookSigningAlgo
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HMAC_SHA256 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 1,
	}
	
	public class WebhookStatistics
	{
		
		/// <summary>
		/// Current delivery status
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="failed")]
		public System.Nullable<System.Boolean> Failed { get; set; }
		
		/// <summary>
		/// Total delivery attempts
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalAttempts")]
		public System.Nullable<System.Int32> TotalAttempts { get; set; }
		
		/// <summary>
		/// Total failed deliveries
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalFailures")]
		public System.Nullable<System.Int32> TotalFailures { get; set; }
		
		/// <summary>
		/// Total successful deliveries
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalSuccesses")]
		public System.Nullable<System.Int32> TotalSuccesses { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum WebhookStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PAUSED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WebhookCreate
	{
		
		/// <summary>
		/// Events to subscribe to the webhook
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="events")]
		public CallType[] Events { get; set; }
		
		/// <summary>
		/// Metadata policy for the webhook
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadataPolicy")]
		public WebhookMetadataPolicy MetadataPolicy { get; set; }
		
		/// <summary>
		/// Signing algorithm for the webhook
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="signingAlgo")]
		public System.Nullable<WebhookCreateSigningAlgo> SigningAlgo { get; set; }
		
		/// <summary>
		/// Signing key for the webhook
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="signingKey")]
		public string SigningKey { get; set; }
		
		/// <summary>
		/// Destination URL for events
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum WebhookCreateSigningAlgo
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HMAC_SHA256 = 0,
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// User info
		/// GetUser self
		/// </summary>
		/// <returns>Success</returns>
		public async Task<User> GetUserAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "self";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<User>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Account info
		/// GetAccount self/account
		/// </summary>
		/// <returns>Successful</returns>
		public async Task<Account> GetAccountAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "self/account";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Account>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List active calls
		/// Lists currently active calls
		/// ListCalls self/calls
		/// </summary>
		/// <param name="fromDate">Return calls that occurred after this point in time</param>
		/// <param name="toDate">Return calls that occurred before this point in time</param>
		/// <param name="direction">Filter by call direction. For multiple criteria, seperate values by a comma.</param>
		/// <param name="states">Filter calls by state. For multiple criteria, seperate values by a comma.</param>
		/// <param name="offset">Page number of calls to return</param>
		/// <param name="size">Return this amount of calls in the response</param>
		/// <param name="order">Sort in either ascending or descending order</param>
		/// <param name="sort">Sort calls by property</param>
		/// <returns>Successful</returns>
		public async Task<Call[]> ListCallsAsync(int fromDate, int toDate, CallDirection direction, ListCallsStates states, long offset, int size, ListCallsOrder order, string sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "self/calls?fromDate="+fromDate+"&toDate="+toDate+"&direction=" + direction+"&states=" + states+"&offset="+offset+"&size="+size+"&order=" + order+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Call[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Place a call
		/// CreateCall self/calls
		/// </summary>
		/// <param name="requestBody">Place call parameters</param>
		public async Task CreateCallAsync(CallCreate requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "self/calls";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get calls count
		/// GetCallsCount self/calls/count
		/// </summary>
		/// <param name="fromDate">Return calls that occurred after this point in time</param>
		/// <param name="toDate">Return calls that occurred before this point in time</param>
		/// <param name="direction">Filter by call direction. For multiple criteria, seperate values by a comma.</param>
		/// <param name="states">Filter calls by state. For multiple criteria, seperate values by a comma.</param>
		/// <returns>Successful</returns>
		public async Task<EventsCount> GetCallsCountAsync(int fromDate, int toDate, CallDirection direction, ListCallsStates states, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "self/calls/count?fromDate="+fromDate+"&toDate="+toDate+"&direction=" + direction+"&states=" + states;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<EventsCount>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// End a call
		/// DestroyCall self/calls/{id}
		/// </summary>
		/// <param name="id">Unique identifier of the call</param>
		/// <returns>Successful</returns>
		public async Task<Call[]> DestroyCallAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "self/calls/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Call[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a call
		/// GetRoles self/calls/{id}
		/// </summary>
		/// <param name="id">Unique identifier of the call</param>
		/// <returns>Successful</returns>
		public async Task<Call[]> GetRolesAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "self/calls/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Call[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Answer call (On supported devices)
		/// CallAnswer self/calls/{id}/answer
		/// </summary>
		/// <param name="id">Unique identifier of the call</param>
		/// <returns>Successful</returns>
		public async Task<Call> CallAnswerAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "self/calls/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/answer";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Call>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Unhold
		/// CallUnold self/calls/{id}/hold
		/// </summary>
		/// <param name="id">Unique identifier of the call</param>
		/// <returns>Successful</returns>
		public async Task<Call> CallUnoldAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "self/calls/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/hold";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Call>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Put call on hold
		/// CallHold self/calls/{id}/hold
		/// </summary>
		/// <param name="id">Unique identifier of the call</param>
		/// <returns>Successful</returns>
		public async Task<Call> CallHoldAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "self/calls/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/hold";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Call>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Transfer call
		/// CallTransfer self/calls/{id}/transfer
		/// </summary>
		/// <param name="id">Unique identifier of the call</param>
		/// <param name="requestBody">Call transfer parameters</param>
		/// <returns>Successful</returns>
		public async Task<Call> CallTransferAsync(string id, CallTransfer requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "self/calls/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/transfer";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Call>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Send call to voicemail
		/// CallVMTransfer self/calls/{id}/vmtransfer
		/// </summary>
		/// <param name="id">Unique identifier of the call</param>
		/// <returns>Successful</returns>
		public async Task<Call> CallVMTransferAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "self/calls/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/vmtransfer";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Call>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List events
		/// ListEvents self/events
		/// </summary>
		/// <param name="types">Record type</param>
		/// <param name="fromDate">Return events that occurred after this point in time</param>
		/// <param name="toDate">Return events that occurred before this point in time</param>
		/// <param name="direction">Filter by event direction</param>
		/// <param name="states">Filter events by state</param>
		/// <param name="offset">Page number of events to return</param>
		/// <param name="size">Return this amount of events in the response</param>
		/// <param name="order">Sort in either ascending or descending order'</param>
		/// <param name="sort">Sort events by property</param>
		/// <returns>Successful</returns>
		public async Task<Event[]> ListEventsAsync(CallType types, int fromDate, int toDate, CallDirection direction, CallState states, long offset, int size, ListCallsOrder order, string sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "self/events?types=" + types+"&fromDate="+fromDate+"&toDate="+toDate+"&direction=" + direction+"&states=" + states+"&offset="+offset+"&size="+size+"&order=" + order+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Event[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get events count
		/// GetEventsCount self/events/count
		/// </summary>
		/// <param name="fromDate">Return events that occurred after this point in time</param>
		/// <param name="toDate">Return events that occurred before this point in time</param>
		/// <param name="direction">Filter by event direction</param>
		/// <param name="states">Filter events by state</param>
		/// <returns>Successful</returns>
		public async Task<EventsCount> GetEventsCountAsync(int fromDate, int toDate, CallDirection direction, ListCallsStates states, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "self/events/count?fromDate="+fromDate+"&toDate="+toDate+"&direction=" + direction+"&states=" + states;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<EventsCount>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get event
		/// GetEvent self/events/{id}
		/// </summary>
		/// <param name="id">Unique identifier of the event</param>
		/// <returns>Successful</returns>
		public async Task<Event[]> GetEventAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "self/events/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Event[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List web hooks
		/// ListWebhooks self/webhooks
		/// </summary>
		/// <returns>Successful</returns>
		public async Task<Webhook[]> ListWebhooksAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "self/webhooks";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Webhook[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new webhook subscription
		/// CreateWebhook self/webhooks
		/// </summary>
		/// <param name="requestBody">Webhook create parameters</param>
		public async Task CreateWebhookAsync(WebhookCreate requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "self/webhooks";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove a web hook
		/// DestroyWebhook self/webhooks/{id}
		/// </summary>
		/// <param name="id">Unique identifier of the webhook</param>
		public async Task DestroyWebhookAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "self/webhooks/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get web hook details
		/// ViewWebhook self/webhooks/{id}
		/// </summary>
		/// <param name="id">Unique identifier of the webhook</param>
		/// <returns>Successful</returns>
		public async Task<Webhook> ViewWebhookAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "self/webhooks/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Webhook>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Renews a web hook
		/// RenewWebhook self/webhooks/{id}/renew
		/// </summary>
		/// <param name="id">Webhook ID</param>
		/// <returns>Successful</returns>
		public async Task<Webhook> RenewWebhookAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "self/webhooks/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/renew";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Webhook>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum ListCallsStates
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INITIALIZING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RINGING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HELD = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REMOTE_HELD = 4,
	}
	
	public enum ListCallsOrder
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DESC = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASC = 1,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
