//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// JSON template for a collection of activities.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Activities
	{
		
		/// <summary>
		/// ETag of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// Each activity record in the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Activity[] Items { get; set; }
		
		/// <summary>
		/// The type of API resource. For an activity report, the value is `reports#activities`.
		/// </summary>
		[System.ComponentModel.DefaultValue("admin#reports#activities")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "admin#reports#activities";
		
		/// <summary>
		/// Token for retrieving the follow-on next page of the report. The `nextPageToken` value is used in the request's `pageToken` query string.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// JSON template for the activity resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Activity
	{
		
		/// <summary>
		/// User doing the action.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="actor")]
		public ActivityActor Actor { get; set; }
		
		/// <summary>
		/// ETag of the entry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// Activity events in the report.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="events")]
		public ActivityEvents[] ActivityEvents { get; set; }
		
		/// <summary>
		/// Unique identifier for each activity record.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public ActivityId Id { get; set; }
		
		/// <summary>
		/// IP address of the user doing the action. This is the Internet Protocol (IP) address of the user when logging into Google Workspace, which may or may not reflect the user's physical location. For example, the IP address can be the user's proxy server's address or a virtual private network (VPN) address. The API supports IPv4 and IPv6.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ipAddress")]
		public string IpAddress { get; set; }
		
		/// <summary>
		/// The type of API resource. For an activity report, the value is `audit#activity`.
		/// </summary>
		[System.ComponentModel.DefaultValue("admin#reports#activity")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "admin#reports#activity";
		
		/// <summary>
		/// This is the domain that is affected by the report's event. For example domain of Admin console or the Drive application's document owner.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ownerDomain")]
		public string OwnerDomain { get; set; }
	}
	
	public class ActivityActor
	{
		
		/// <summary>
		/// The type of actor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="callerType")]
		public string CallerType { get; set; }
		
		/// <summary>
		/// The primary email address of the actor. May be absent if there is no email address associated with the actor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// Only present when `callerType` is `KEY`. Can be the `consumer_key` of the requestor for OAuth 2LO API requests or an identifier for robot accounts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		/// <summary>
		/// The unique Google Workspace profile ID of the actor. This value might be absent if the actor is not a Google Workspace user, or may be the number 105250506097979753968 which acts as a placeholder ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="profileId")]
		public string ProfileId { get; set; }
	}
	
	public class ActivityEvents
	{
		
		/// <summary>
		/// Name of the event. This is the specific name of the activity reported by the API. And each `eventName` is related to a specific Google Workspace service or feature which the API organizes into types of events. For `eventName` request parameters in general: - If no `eventName` is given, the report returns all possible instances of an `eventName`. - When you request an `eventName`, the API's response returns all activities which contain that `eventName`. It is possible that the returned activities will have other `eventName` properties in addition to the one requested. For more information about `eventName` properties, see the list of event names for various applications above in `applicationName`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Parameter value pairs for various applications. For more information about `eventName` parameters, see the list of event names for various applications above in `applicationName`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public ActivityEventsParameters[] ActivityEventsParameters { get; set; }
		
		/// <summary>
		/// Type of event. The Google Workspace service or feature that an administrator changes is identified in the `type` property which identifies an event using the `eventName` property. For a full list of the API's `type` categories, see the list of event names for various applications above in `applicationName`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class ActivityEventsParameters
	{
		
		/// <summary>
		/// Boolean value of the parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="boolValue")]
		public System.Nullable<System.Boolean> BoolValue { get; set; }
		
		/// <summary>
		/// Integer value of the parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="intValue")]
		public string IntValue { get; set; }
		
		/// <summary>
		/// Nested parameter value pairs associated with this parameter. Complex value type for a parameter are returned as a list of parameter values. For example, the address parameter may have a value as `[{parameter: [{name: city, value: abc}]}]`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="messageValue")]
		public ActivityEventsParametersMessageValue MessageValue { get; set; }
		
		/// <summary>
		/// Integer values of the parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="multiIntValue")]
		public string[] MultiIntValue { get; set; }
		
		/// <summary>
		/// List of `messageValue` objects.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="multiMessageValue")]
		public ActivityEventsParametersMultiMessageValue[] ActivityEventsParametersMultiMessageValue { get; set; }
		
		/// <summary>
		/// String values of the parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="multiValue")]
		public string[] MultiValue { get; set; }
		
		/// <summary>
		/// The name of the parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// String value of the parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	public class ActivityEventsParametersMessageValue
	{
		
		/// <summary>
		/// Parameter values
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parameter")]
		public NestedParameter[] Parameter { get; set; }
	}
	
	/// <summary>
	/// JSON template for a parameter used in various reports.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NestedParameter
	{
		
		/// <summary>
		/// Boolean value of the parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="boolValue")]
		public System.Nullable<System.Boolean> BoolValue { get; set; }
		
		/// <summary>
		/// Integer value of the parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="intValue")]
		public string IntValue { get; set; }
		
		/// <summary>
		/// Multiple boolean values of the parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="multiBoolValue")]
		public bool[] MultiBoolValue { get; set; }
		
		/// <summary>
		/// Multiple integer values of the parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="multiIntValue")]
		public string[] MultiIntValue { get; set; }
		
		/// <summary>
		/// Multiple string values of the parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="multiValue")]
		public string[] MultiValue { get; set; }
		
		/// <summary>
		/// The name of the parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// String value of the parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	public class ActivityEventsParametersMultiMessageValue
	{
		
		/// <summary>
		/// Parameter values
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parameter")]
		public NestedParameter[] Parameter { get; set; }
	}
	
	public class ActivityId
	{
		
		/// <summary>
		/// Application name to which the event belongs. For possible values see the list of applications above in `applicationName`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="applicationName")]
		public string ApplicationName { get; set; }
		
		/// <summary>
		/// The unique identifier for a Google Workspace account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customerId")]
		public string CustomerId { get; set; }
		
		/// <summary>
		/// Time of occurrence of the activity. This is in UNIX epoch time in seconds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="time")]
		public System.Nullable<System.DateTimeOffset> Time { get; set; }
		
		/// <summary>
		/// Unique qualifier if multiple events have the same time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uniqueQualifier")]
		public string UniqueQualifier { get; set; }
	}
	
	/// <summary>
	/// A notification channel used to watch for resource changes.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Channel
	{
		
		/// <summary>
		/// The address where notifications are delivered for this channel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address")]
		public string Address { get; set; }
		
		/// <summary>
		/// Date and time of notification channel expiration, expressed as a Unix timestamp, in milliseconds. Optional.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expiration")]
		public string Expiration { get; set; }
		
		/// <summary>
		/// A UUID or similar unique string that identifies this channel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Identifies this as a notification channel used to watch for changes to a resource, which is "`api#channel`".
		/// </summary>
		[System.ComponentModel.DefaultValue("api#channel")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "api#channel";
		
		/// <summary>
		/// Additional parameters controlling delivery channel behavior. Optional.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="params")]
		public System.Collections.Generic.Dictionary<string, string> Params { get; set; }
		
		/// <summary>
		/// A Boolean value to indicate whether payload is wanted. A payload is data that is sent in the body of an HTTP POST, PUT, or PATCH message and contains important information about the request. Optional.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payload")]
		public System.Nullable<System.Boolean> Payload { get; set; }
		
		/// <summary>
		/// An opaque ID that identifies the resource being watched on this channel. Stable across different API versions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceId")]
		public string ResourceId { get; set; }
		
		/// <summary>
		/// A version-specific identifier for the watched resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceUri")]
		public string ResourceUri { get; set; }
		
		/// <summary>
		/// An arbitrary string delivered to the target address with each notification delivered over this channel. Optional.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="token")]
		public string Token { get; set; }
		
		/// <summary>
		/// The type of delivery mechanism used for this channel. The value should be set to `"web_hook"`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// JSON template for a usage report.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UsageReport
	{
		
		/// <summary>
		/// Output only. The date of the report request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date")]
		public string Date { get; set; }
		
		/// <summary>
		/// Output only. Information about the type of the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entity")]
		public UsageReportEntity Entity { get; set; }
		
		/// <summary>
		/// ETag of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// The type of API resource. For a usage report, the value is `admin#reports#usageReport`.
		/// </summary>
		[System.ComponentModel.DefaultValue("admin#reports#usageReport")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "admin#reports#usageReport";
		
		/// <summary>
		/// Output only. Parameter value pairs for various applications. For the Entity Usage Report parameters and values, see [the Entity Usage parameters reference](/admin-sdk/reports/v1/reference/usage-ref-appendix-a/entities).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public UsageReportParameters[] UsageReportParameters { get; set; }
	}
	
	public class UsageReportEntity
	{
		
		/// <summary>
		/// Output only. The unique identifier of the customer's account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customerId")]
		public string CustomerId { get; set; }
		
		/// <summary>
		/// Output only. Object key. Only relevant if entity.type = "OBJECT" Note: external-facing name of report is "Entities" rather than "Objects".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entityId")]
		public string EntityId { get; set; }
		
		/// <summary>
		/// Output only. The user's immutable Google Workspace profile identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="profileId")]
		public string ProfileId { get; set; }
		
		/// <summary>
		/// Output only. The type of item. The value is `user`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// Output only. The user's email address. Only relevant if entity.type = "USER"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userEmail")]
		public string UserEmail { get; set; }
	}
	
	public class UsageReportParameters
	{
		
		/// <summary>
		/// Output only. Boolean value of the parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="boolValue")]
		public System.Nullable<System.Boolean> BoolValue { get; set; }
		
		/// <summary>
		/// The RFC 3339 formatted value of the parameter, for example 2010-10-28T10:26:35.000Z.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="datetimeValue")]
		public System.Nullable<System.DateTimeOffset> DatetimeValue { get; set; }
		
		/// <summary>
		/// Output only. Integer value of the parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="intValue")]
		public string IntValue { get; set; }
		
		/// <summary>
		/// Output only. Nested message value of the parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="msgValue")]
		public string[] MsgValue { get; set; }
		
		/// <summary>
		/// The name of the parameter. For the User Usage Report parameter names, see the User Usage parameters reference.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Output only. String value of the parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stringValue")]
		public string StringValue { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UsageReports
	{
		
		/// <summary>
		/// ETag of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// The type of API resource. For a usage report, the value is `admin#reports#usageReports`.
		/// </summary>
		[System.ComponentModel.DefaultValue("admin#reports#usageReports")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "admin#reports#usageReports";
		
		/// <summary>
		/// Token to specify next page. A report with multiple pages has a `nextPageToken` property in the response. For your follow-on requests getting all of the report's pages, enter the `nextPageToken` value in the `pageToken` query string.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// Various application parameter records.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="usageReports")]
		public UsageReport[] UsageReports1 { get; set; }
		
		/// <summary>
		/// Warnings, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="warnings")]
		public UsageReportsWarnings[] UsageReportsWarnings { get; set; }
	}
	
	public class UsageReportsWarnings
	{
		
		/// <summary>
		/// Machine readable code or warning type. The warning code value is `200`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// Key-value pairs to give detailed information on the warning.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public UsageReportsWarningsData[] UsageReportsWarningsData { get; set; }
		
		/// <summary>
		/// The human readable messages for a warning are: - Data is not available warning - Sorry, data for date yyyy-mm-dd for application "`application name`" is not available. - Partial data is available warning - Data for date yyyy-mm-dd for application "`application name`" is not available right now, please try again after a few hours. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	public class UsageReportsWarningsData
	{
		
		/// <summary>
		/// Key associated with a key-value pair to give detailed information on the warning.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		/// <summary>
		/// Value associated with a key-value pair to give detailed information on the warning.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Retrieves a list of activities for a specific customer's account and application such as the Admin console application or the Google Drive application. For more information, see the guides for administrator and Google Drive activity reports. For more information about the activity report's parameters, see the activity parameters reference guides.
		/// Reports_activities_list admin/reports/v1/activity/users/{userKey}/applications/{applicationName}
		/// </summary>
		/// <param name="userKey">Represents the profile ID or the user email for which the data should be filtered. Can be `all` for all information, or `userKey` for a user's unique Google Workspace profile ID or their primary email address. Must not be a deleted user. For a deleted user, call `users.list` in Directory API with `showDeleted=true`, then use the returned `ID` as the `userKey`.</param>
		/// <param name="applicationName">Application name for which the events are to be retrieved.</param>
		/// <param name="actorIpAddress">The Internet Protocol (IP) Address of host where the event was performed. This is an additional way to filter a report's summary using the IP address of the user whose activity is being reported. This IP address may or may not reflect the user's physical location. For example, the IP address can be the user's proxy server's address or a virtual private network (VPN) address. This parameter supports both IPv4 and IPv6 address versions.</param>
		/// <param name="customerId">The unique ID of the customer to retrieve data for.</param>
		/// <param name="endTime">Sets the end of the range of time shown in the report. The date is in the RFC 3339 format, for example 2010-10-28T10:26:35.000Z. The default value is the approximate time of the API request. An API report has three basic time concepts: - *Date of the API's request for a report*: When the API created and retrieved the report. - *Report's start time*: The beginning of the timespan shown in the report. The `startTime` must be before the `endTime` (if specified) and the current time when the request is made, or the API returns an error. - *Report's end time*: The end of the timespan shown in the report. For example, the timespan of events summarized in a report can start in April and end in May. The report itself can be requested in August. If the `endTime` is not specified, the report returns all activities from the `startTime` until the current time or the most recent 180 days if the `startTime` is more than 180 days in the past.</param>
		/// <param name="eventName">The name of the event being queried by the API. Each `eventName` is related to a specific Google Workspace service or feature which the API organizes into types of events. An example is the Google Calendar events in the Admin console application's reports. The Calendar Settings `type` structure has all of the Calendar `eventName` activities reported by the API. When an administrator changes a Calendar setting, the API reports this activity in the Calendar Settings `type` and `eventName` parameters. For more information about `eventName` query strings and parameters, see the list of event names for various applications above in `applicationName`.</param>
		/// <param name="filters">The `filters` query string is a comma-separated list composed of event parameters manipulated by relational operators. Event parameters are in the form `{parameter1 name}{relational operator}{parameter1 value},{parameter2 name}{relational operator}{parameter2 value},...` These event parameters are associated with a specific `eventName`. An empty report is returned if the request's parameter doesn't belong to the `eventName`. For more information about the available `eventName` fields for each application and their associated parameters, go to the [ApplicationName](#applicationname) table, then click through to the Activity Events page in the Appendix for the application you want. In the following Drive activity examples, the returned list consists of all `edit` events where the `doc_id` parameter value matches the conditions defined by the relational operator. In the first example, the request returns all edited documents with a `doc_id` value equal to `12345`. In the second example, the report returns any edited documents where the `doc_id` value is not equal to `98765`. The `<>` operator is URL-encoded in the request's query string (`%3C%3E`): ``` GET...&eventName=edit&filters=doc_id==12345 GET...&eventName=edit&filters=doc_id%3C%3E98765 ``` A `filters` query supports these relational operators: * `==`—'equal to'. * `<>`—'not equal to'. Must be URL-encoded (%3C%3E). * `<`—'less than'. Must be URL-encoded (%3C). * `<=`—'less than or equal to'. Must be URL-encoded (%3C=). * `>`—'greater than'. Must be URL-encoded (%3E). * `>=`—'greater than or equal to'. Must be URL-encoded (%3E=). **Note:** The API doesn't accept multiple values of the same parameter. If a parameter is supplied more than once in the API request, the API only accepts the last value of that parameter. In addition, if an invalid parameter is supplied in the API request, the API ignores that parameter and returns the response corresponding to the remaining valid parameters. If no parameters are requested, all parameters are returned.</param>
		/// <param name="groupIdFilter">Comma separated group ids (obfuscated) on which user activities are filtered, i.e. the response will contain activities for only those users that are a part of at least one of the group ids mentioned here. Format: "id:abc123,id:xyz456"</param>
		/// <param name="maxResults">Determines how many activity records are shown on each response page. For example, if the request sets `maxResults=1` and the report has two activities, the report has two pages. The response's `nextPageToken` property has the token to the second page. The `maxResults` query string is optional in the request. The default value is 1000.
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="orgUnitID">ID of the organizational unit to report on. Activity records will be shown only for users who belong to the specified organizational unit. Data before Dec 17, 2018 doesn't appear in the filtered results.</param>
		/// <param name="pageToken">The token to specify next page. A report with multiple pages has a `nextPageToken` property in the response. In your follow-on request getting the next page of the report, enter the `nextPageToken` value in the `pageToken` query string.</param>
		/// <param name="startTime">Sets the beginning of the range of time shown in the report. The date is in the RFC 3339 format, for example 2010-10-28T10:26:35.000Z. The report returns all activities from `startTime` until `endTime`. The `startTime` must be before the `endTime` (if specified) and the current time when the request is made, or the API returns an error.</param>
		/// <returns>Successful response</returns>
		public async Task<Activities> Reports_activities_listAsync(string userKey, Reports_activities_listApplicationName applicationName, string actorIpAddress, string customerId, string endTime, string eventName, string filters, string groupIdFilter, int maxResults, string orgUnitID, string pageToken, string startTime, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/reports/v1/activity/users/"+ (userKey==null? "" : System.Uri.EscapeDataString(userKey))+"/applications/"+applicationName+"&actorIpAddress=" + (actorIpAddress==null? "" : System.Uri.EscapeDataString(actorIpAddress))+"&customerId=" + (customerId==null? "" : System.Uri.EscapeDataString(customerId))+"&endTime=" + (endTime==null? "" : System.Uri.EscapeDataString(endTime))+"&eventName=" + (eventName==null? "" : System.Uri.EscapeDataString(eventName))+"&filters=" + (filters==null? "" : System.Uri.EscapeDataString(filters))+"&groupIdFilter=" + (groupIdFilter==null? "" : System.Uri.EscapeDataString(groupIdFilter))+"&maxResults="+maxResults+"&orgUnitID=" + (orgUnitID==null? "" : System.Uri.EscapeDataString(orgUnitID))+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&startTime=" + (startTime==null? "" : System.Uri.EscapeDataString(startTime));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Activities>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Start receiving notifications for account activities. For more information, see Receiving Push Notifications.
		/// Reports_activities_watch admin/reports/v1/activity/users/{userKey}/applications/{applicationName}/watch
		/// </summary>
		/// <param name="userKey">Represents the profile ID or the user email for which the data should be filtered. Can be `all` for all information, or `userKey` for a user's unique Google Workspace profile ID or their primary email address. Must not be a deleted user. For a deleted user, call `users.list` in Directory API with `showDeleted=true`, then use the returned `ID` as the `userKey`.</param>
		/// <param name="applicationName">Application name for which the events are to be retrieved.</param>
		/// <param name="actorIpAddress">The Internet Protocol (IP) Address of host where the event was performed. This is an additional way to filter a report's summary using the IP address of the user whose activity is being reported. This IP address may or may not reflect the user's physical location. For example, the IP address can be the user's proxy server's address or a virtual private network (VPN) address. This parameter supports both IPv4 and IPv6 address versions.</param>
		/// <param name="customerId">The unique ID of the customer to retrieve data for.</param>
		/// <param name="endTime">Sets the end of the range of time shown in the report. The date is in the RFC 3339 format, for example 2010-10-28T10:26:35.000Z. The default value is the approximate time of the API request. An API report has three basic time concepts: - *Date of the API's request for a report*: When the API created and retrieved the report. - *Report's start time*: The beginning of the timespan shown in the report. The `startTime` must be before the `endTime` (if specified) and the current time when the request is made, or the API returns an error. - *Report's end time*: The end of the timespan shown in the report. For example, the timespan of events summarized in a report can start in April and end in May. The report itself can be requested in August. If the `endTime` is not specified, the report returns all activities from the `startTime` until the current time or the most recent 180 days if the `startTime` is more than 180 days in the past.</param>
		/// <param name="eventName">The name of the event being queried by the API. Each `eventName` is related to a specific Google Workspace service or feature which the API organizes into types of events. An example is the Google Calendar events in the Admin console application's reports. The Calendar Settings `type` structure has all of the Calendar `eventName` activities reported by the API. When an administrator changes a Calendar setting, the API reports this activity in the Calendar Settings `type` and `eventName` parameters. For more information about `eventName` query strings and parameters, see the list of event names for various applications above in `applicationName`.</param>
		/// <param name="filters">The `filters` query string is a comma-separated list composed of event parameters manipulated by relational operators. Event parameters are in the form `{parameter1 name}{relational operator}{parameter1 value},{parameter2 name}{relational operator}{parameter2 value},...` These event parameters are associated with a specific `eventName`. An empty report is returned if the request's parameter doesn't belong to the `eventName`. For more information about the available `eventName` fields for each application and their associated parameters, go to the [ApplicationName](#applicationname) table, then click through to the Activity Events page in the Appendix for the application you want. In the following Drive activity examples, the returned list consists of all `edit` events where the `doc_id` parameter value matches the conditions defined by the relational operator. In the first example, the request returns all edited documents with a `doc_id` value equal to `12345`. In the second example, the report returns any edited documents where the `doc_id` value is not equal to `98765`. The `<>` operator is URL-encoded in the request's query string (`%3C%3E`): ``` GET...&eventName=edit&filters=doc_id==12345 GET...&eventName=edit&filters=doc_id%3C%3E98765 ``` A `filters` query supports these relational operators: * `==`—'equal to'. * `<>`—'not equal to'. Must be URL-encoded (%3C%3E). * `<`—'less than'. Must be URL-encoded (%3C). * `<=`—'less than or equal to'. Must be URL-encoded (%3C=). * `>`—'greater than'. Must be URL-encoded (%3E). * `>=`—'greater than or equal to'. Must be URL-encoded (%3E=). **Note:** The API doesn't accept multiple values of the same parameter. If a parameter is supplied more than once in the API request, the API only accepts the last value of that parameter. In addition, if an invalid parameter is supplied in the API request, the API ignores that parameter and returns the response corresponding to the remaining valid parameters. If no parameters are requested, all parameters are returned.</param>
		/// <param name="groupIdFilter">Comma separated group ids (obfuscated) on which user activities are filtered, i.e. the response will contain activities for only those users that are a part of at least one of the group ids mentioned here. Format: "id:abc123,id:xyz456"</param>
		/// <param name="maxResults">Determines how many activity records are shown on each response page. For example, if the request sets `maxResults=1` and the report has two activities, the report has two pages. The response's `nextPageToken` property has the token to the second page. The `maxResults` query string is optional in the request. The default value is 1000.
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="orgUnitID">ID of the organizational unit to report on. Activity records will be shown only for users who belong to the specified organizational unit. Data before Dec 17, 2018 doesn't appear in the filtered results.</param>
		/// <param name="pageToken">The token to specify next page. A report with multiple pages has a `nextPageToken` property in the response. In your follow-on request getting the next page of the report, enter the `nextPageToken` value in the `pageToken` query string.</param>
		/// <param name="startTime">Sets the beginning of the range of time shown in the report. The date is in the RFC 3339 format, for example 2010-10-28T10:26:35.000Z. The report returns all activities from `startTime` until `endTime`. The `startTime` must be before the `endTime` (if specified) and the current time when the request is made, or the API returns an error.</param>
		/// <returns>Successful response</returns>
		public async Task<Channel> Reports_activities_watchAsync(string userKey, Reports_activities_listApplicationName applicationName, string actorIpAddress, string customerId, string endTime, string eventName, string filters, string groupIdFilter, int maxResults, string orgUnitID, string pageToken, string startTime, Channel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/reports/v1/activity/users/"+ (userKey==null? "" : System.Uri.EscapeDataString(userKey))+"/applications/"+applicationName+"/watch&actorIpAddress=" + (actorIpAddress==null? "" : System.Uri.EscapeDataString(actorIpAddress))+"&customerId=" + (customerId==null? "" : System.Uri.EscapeDataString(customerId))+"&endTime=" + (endTime==null? "" : System.Uri.EscapeDataString(endTime))+"&eventName=" + (eventName==null? "" : System.Uri.EscapeDataString(eventName))+"&filters=" + (filters==null? "" : System.Uri.EscapeDataString(filters))+"&groupIdFilter=" + (groupIdFilter==null? "" : System.Uri.EscapeDataString(groupIdFilter))+"&maxResults="+maxResults+"&orgUnitID=" + (orgUnitID==null? "" : System.Uri.EscapeDataString(orgUnitID))+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&startTime=" + (startTime==null? "" : System.Uri.EscapeDataString(startTime));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Channel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves a report which is a collection of properties and statistics for a specific customer's account. For more information, see the Customers Usage Report guide. For more information about the customer report's parameters, see the Customers Usage parameters reference guides.
		/// Reports_customerUsageReports_get admin/reports/v1/usage/dates/{date}
		/// </summary>
		/// <param name="date">Represents the date the usage occurred, based on UTC-8:00 (Pacific Standard Time). The timestamp is in the [ISO 8601 format](https://en.wikipedia.org/wiki/ISO_8601), `yyyy-mm-dd`.</param>
		/// <param name="customerId">The unique ID of the customer to retrieve data for.</param>
		/// <param name="pageToken">Token to specify next page. A report with multiple pages has a `nextPageToken` property in the response. For your follow-on requests getting all of the report's pages, enter the `nextPageToken` value in the `pageToken` query string.</param>
		/// <param name="parameters">The `parameters` query string is a comma-separated list of event parameters that refine a report's results. The parameter is associated with a specific application. The application values for the Customers usage report include `accounts`, `app_maker`, `apps_scripts`, `calendar`, `classroom`, `cros`, `docs`, `gmail`, `gplus`, `device_management`, `meet`, and `sites`. A `parameters` query string is in the CSV form of `app_name1:param_name1, app_name2:param_name2`. *Note:* The API doesn't accept multiple values of a parameter. If a particular parameter is supplied more than once in the API request, the API only accepts the last value of that request parameter. In addition, if an invalid request parameter is supplied in the API request, the API ignores that request parameter and returns the response corresponding to the remaining valid request parameters. An example of an invalid request parameter is one that does not belong to the application. If no parameters are requested, all parameters are returned. </param>
		/// <returns>Successful response</returns>
		public async Task<UsageReports> Reports_customerUsageReports_getAsync(string date, string customerId, string pageToken, string parameters, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/reports/v1/usage/dates/"+ (date==null? "" : System.Uri.EscapeDataString(date))+"&customerId=" + (customerId==null? "" : System.Uri.EscapeDataString(customerId))+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&parameters=" + (parameters==null? "" : System.Uri.EscapeDataString(parameters));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UsageReports>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a report which is a collection of properties and statistics for a set of users with the account. For more information, see the User Usage Report guide. For more information about the user report's parameters, see the Users Usage parameters reference guides.
		/// Reports_userUsageReport_get admin/reports/v1/usage/users/{userKey}/dates/{date}
		/// </summary>
		/// <param name="userKey">Represents the profile ID or the user email for which the data should be filtered. Can be `all` for all information, or `userKey` for a user's unique Google Workspace profile ID or their primary email address. Must not be a deleted user. For a deleted user, call `users.list` in Directory API with `showDeleted=true`, then use the returned `ID` as the `userKey`.</param>
		/// <param name="date">Represents the date the usage occurred, based on UTC-8:00 (Pacific Standard Time). The timestamp is in the [ISO 8601 format](https://en.wikipedia.org/wiki/ISO_8601), `yyyy-mm-dd`.</param>
		/// <param name="customerId">The unique ID of the customer to retrieve data for.</param>
		/// <param name="filters">The `filters` query string is a comma-separated list of an application's event parameters where the parameter's value is manipulated by a relational operator. The `filters` query string includes the name of the application whose usage is returned in the report. The application values for the Users Usage Report include `accounts`, `docs`, and `gmail`. Filters are in the form `[application name]:parameter name[parameter value],...`. In this example, the `<>` 'not equal to' operator is URL-encoded in the request's query string (%3C%3E): GET https://www.googleapis.com/admin/reports/v1/usage/users/all/dates/2013-03-03 ?parameters=accounts:last_login_time &filters=accounts:last_login_time%3C%3E2010-10-28T10:26:35.000Z The relational operators include: - `==` - 'equal to'. - `<>` - 'not equal to'. It is URL-encoded (%3C%3E). - `<` - 'less than'. It is URL-encoded (%3C). - `<=` - 'less than or equal to'. It is URL-encoded (%3C=). - `>` - 'greater than'. It is URL-encoded (%3E). - `>=` - 'greater than or equal to'. It is URL-encoded (%3E=). </param>
		/// <param name="groupIdFilter">Comma separated group ids (obfuscated) on which user activities are filtered, i.e. the response will contain activities for only those users that are a part of at least one of the group ids mentioned here. Format: "id:abc123,id:xyz456"</param>
		/// <param name="maxResults">Determines how many activity records are shown on each response page. For example, if the request sets `maxResults=1` and the report has two activities, the report has two pages. The response's `nextPageToken` property has the token to the second page. The `maxResults` query string is optional.
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="orgUnitID">ID of the organizational unit to report on. User activity will be shown only for users who belong to the specified organizational unit. Data before Dec 17, 2018 doesn't appear in the filtered results.</param>
		/// <param name="pageToken">Token to specify next page. A report with multiple pages has a `nextPageToken` property in the response. In your follow-on request getting the next page of the report, enter the `nextPageToken` value in the `pageToken` query string.</param>
		/// <param name="parameters">The `parameters` query string is a comma-separated list of event parameters that refine a report's results. The parameter is associated with a specific application. The application values for the Customers Usage report include `accounts`, `app_maker`, `apps_scripts`, `calendar`, `classroom`, `cros`, `docs`, `gmail`, `gplus`, `device_management`, `meet`, and `sites`. A `parameters` query string is in the CSV form of `app_name1:param_name1, app_name2:param_name2`. *Note:* The API doesn't accept multiple values of a parameter. If a particular parameter is supplied more than once in the API request, the API only accepts the last value of that request parameter. In addition, if an invalid request parameter is supplied in the API request, the API ignores that request parameter and returns the response corresponding to the remaining valid request parameters. An example of an invalid request parameter is one that does not belong to the application. If no parameters are requested, all parameters are returned. </param>
		/// <returns>Successful response</returns>
		public async Task<UsageReports> Reports_userUsageReport_getAsync(string userKey, string date, string customerId, string filters, string groupIdFilter, int maxResults, string orgUnitID, string pageToken, string parameters, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/reports/v1/usage/users/"+ (userKey==null? "" : System.Uri.EscapeDataString(userKey))+"/dates/"+ (date==null? "" : System.Uri.EscapeDataString(date))+"&customerId=" + (customerId==null? "" : System.Uri.EscapeDataString(customerId))+"&filters=" + (filters==null? "" : System.Uri.EscapeDataString(filters))+"&groupIdFilter=" + (groupIdFilter==null? "" : System.Uri.EscapeDataString(groupIdFilter))+"&maxResults="+maxResults+"&orgUnitID=" + (orgUnitID==null? "" : System.Uri.EscapeDataString(orgUnitID))+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&parameters=" + (parameters==null? "" : System.Uri.EscapeDataString(parameters));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UsageReports>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a report which is a collection of properties and statistics for entities used by users within the account. For more information, see the Entities Usage Report guide. For more information about the entities report's parameters, see the Entities Usage parameters reference guides.
		/// Reports_entityUsageReports_get admin/reports/v1/usage/{entityType}/{entityKey}/dates/{date}
		/// </summary>
		/// <param name="entityType">Represents the type of entity for the report.</param>
		/// <param name="entityKey">Represents the key of the object to filter the data with. It is a string which can take the value `all` to get activity events for all users, or any other value for an app-specific entity. For details on how to obtain the `entityKey` for a particular `entityType`, see the Entities Usage parameters reference guides.</param>
		/// <param name="date">Represents the date the usage occurred, based on UTC-8:00 (Pacific Standard Time). The timestamp is in the [ISO 8601 format](https://en.wikipedia.org/wiki/ISO_8601), `yyyy-mm-dd`.</param>
		/// <param name="customerId">The unique ID of the customer to retrieve data for.</param>
		/// <param name="filters">The `filters` query string is a comma-separated list of an application's event parameters where the parameter's value is manipulated by a relational operator. The `filters` query string includes the name of the application whose usage is returned in the report. The application values for the Entities usage report include `accounts`, `docs`, and `gmail`. Filters are in the form `[application name]:parameter name[parameter value],...`. In this example, the `<>` 'not equal to' operator is URL-encoded in the request's query string (%3C%3E): GET https://www.googleapis.com/admin/reports/v1/usage/gplus_communities/all/dates/2017-12-01 ?parameters=gplus:community_name,gplus:num_total_members &filters=gplus:num_total_members%3C%3E0 The relational operators include: - `==` - 'equal to'. - `<>` - 'not equal to'. It is URL-encoded (%3C%3E). - `<` - 'less than'. It is URL-encoded (%3C). - `<=` - 'less than or equal to'. It is URL-encoded (%3C=). - `>` - 'greater than'. It is URL-encoded (%3E). - `>=` - 'greater than or equal to'. It is URL-encoded (%3E=). Filters can only be applied to numeric parameters.</param>
		/// <param name="maxResults">Determines how many activity records are shown on each response page. For example, if the request sets `maxResults=1` and the report has two activities, the report has two pages. The response's `nextPageToken` property has the token to the second page.
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="pageToken">Token to specify next page. A report with multiple pages has a `nextPageToken` property in the response. In your follow-on request getting the next page of the report, enter the `nextPageToken` value in the `pageToken` query string.</param>
		/// <param name="parameters">The `parameters` query string is a comma-separated list of event parameters that refine a report's results. The parameter is associated with a specific application. The application values for the Entities usage report are only `gplus`. A `parameter` query string is in the CSV form of `[app_name1:param_name1], [app_name2:param_name2]...`. *Note:* The API doesn't accept multiple values of a parameter. If a particular parameter is supplied more than once in the API request, the API only accepts the last value of that request parameter. In addition, if an invalid request parameter is supplied in the API request, the API ignores that request parameter and returns the response corresponding to the remaining valid request parameters. An example of an invalid request parameter is one that does not belong to the application. If no parameters are requested, all parameters are returned. </param>
		/// <returns>Successful response</returns>
		public async Task<UsageReports> Reports_entityUsageReports_getAsync(Reports_entityUsageReports_getEntityType entityType, string entityKey, string date, string customerId, string filters, int maxResults, string pageToken, string parameters, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/reports/v1/usage/"+entityType+"/"+ (entityKey==null? "" : System.Uri.EscapeDataString(entityKey))+"/dates/"+ (date==null? "" : System.Uri.EscapeDataString(date))+"&customerId=" + (customerId==null? "" : System.Uri.EscapeDataString(customerId))+"&filters=" + (filters==null? "" : System.Uri.EscapeDataString(filters))+"&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&parameters=" + (parameters==null? "" : System.Uri.EscapeDataString(parameters));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UsageReports>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Stop watching resources through this channel.
		/// Admin_channels_stop admin/reports_v1/channels/stop
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task Admin_channels_stopAsync(Channel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/reports_v1/channels/stop";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
	
	public enum Reports_activities_listApplicationName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		access_transparency = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		admin = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		calendar = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		chat = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		drive = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		gcp = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		gplus = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		groups = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		groups_enterprise = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		jamboard = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		login = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		meet = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		mobile = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		rules = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		saml = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		token = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		user_accounts = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		context_aware_access = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		chrome = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		data_studio = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		keep = 20,
	}
	
	public enum Reports_entityUsageReports_getEntityType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		gplus_communities = 0,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
