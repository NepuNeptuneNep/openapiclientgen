//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Information for connecting over HTTP(s).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Addressable
	{
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	/// <summary>
	/// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AuditConfig
	{
		
		/// <summary>
		/// The configuration for logging of each type of permission.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="auditLogConfigs")]
		public AuditLogConfig[] AuditLogConfigs { get; set; }
		
		/// <summary>
		/// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="service")]
		public string Service { get; set; }
	}
	
	/// <summary>
	/// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AuditLogConfig
	{
		
		/// <summary>
		/// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exemptedMembers")]
		public string[] ExemptedMembers { get; set; }
		
		/// <summary>
		/// The log type that this config enables.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logType")]
		public System.Nullable<AuditLogConfigLogType> LogType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AuditLogConfigLogType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOG_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADMIN_READ = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATA_WRITE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATA_READ = 3,
	}
	
	/// <summary>
	/// A domain that a user has been authorized to administer. To authorize use of a domain, verify ownership via [Search Console](https://search.google.com/search-console/welcome).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AuthorizedDomain
	{
		
		/// <summary>
		/// Relative name of the domain authorized for use. Example: `example.com`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Deprecated Read only. Full path to the `AuthorizedDomain` resource in the API. Example: `projects/myproject/authorizedDomains/example.com`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Associates `members`, or principals, with a `role`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Binding
	{
		
		/// <summary>
		/// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="condition")]
		public Expr Condition { get; set; }
		
		/// <summary>
		/// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `principal://iam.googleapis.com/locations/global/workforcePools/{pool_id}/subject/{subject_attribute_value}`: A single identity in a workforce identity pool. * `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/group/{group_id}`: All workforce identities in a group. * `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/attribute.{attribute_name}/{attribute_value}`: All workforce identities with a specific attribute value. * `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/*`: All identities in a workforce identity pool. * `principal://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/subject/{subject_attribute_value}`: A single identity in a workload identity pool. * `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/group/{group_id}`: A workload identity pool group. * `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/attribute.{attribute_name}/{attribute_value}`: All identities in a workload identity pool with a certain attribute. * `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/*`: All identities in a workload identity pool. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `deleted:principal://iam.googleapis.com/locations/global/workforcePools/{pool_id}/subject/{subject_attribute_value}`: Deleted single identity in a workforce identity pool. For example, `deleted:principal://iam.googleapis.com/locations/global/workforcePools/my-pool-id/subject/my-subject-attribute-value`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="members")]
		public string[] Members { get; set; }
		
		/// <summary>
		/// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="role")]
		public string Role { get; set; }
	}
	
	/// <summary>
	/// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Expr
	{
		
		/// <summary>
		/// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Textual representation of an expression in Common Expression Language syntax.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expression")]
		public string Expression { get; set; }
		
		/// <summary>
		/// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	/// <summary>
	/// Storage volume source using the Container Storage Interface.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CSIVolumeSource
	{
		
		/// <summary>
		/// name of the CSI driver for the requested storage system. Cloud Run supports the following drivers: * gcsfuse.run.googleapis.com : Mount a Cloud Storage Bucket as a volume.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="driver")]
		public string Driver { get; set; }
		
		/// <summary>
		/// If true, mount the volume as read only. Defaults to false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="readOnly")]
		public System.Nullable<System.Boolean> ReadOnly { get; set; }
		
		/// <summary>
		/// stores driver specific attributes. For Google Cloud Storage volumes, the following attributes are supported: * bucketName: the name of the Cloud Storage bucket to mount. The Cloud Run Service identity must have access to this bucket.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="volumeAttributes")]
		public System.Collections.Generic.Dictionary<string, string> VolumeAttributes { get; set; }
	}
	
	/// <summary>
	/// Request message for cancelling an execution.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CancelExecutionRequest
	{
	}
	
	/// <summary>
	/// Not supported by Cloud Run. ConfigMapEnvSource selects a ConfigMap to populate the environment variables with. The contents of the target ConfigMap's Data field will represent the key-value pairs as environment variables.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConfigMapEnvSource
	{
		
		/// <summary>
		/// Not supported by Cloud Run. LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="localObjectReference")]
		public LocalObjectReference LocalObjectReference { get; set; }
		
		/// <summary>
		/// The ConfigMap to select from.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Specify whether the ConfigMap must be defined.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="optional")]
		public System.Nullable<System.Boolean> Optional { get; set; }
	}
	
	/// <summary>
	/// Not supported by Cloud Run. LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LocalObjectReference
	{
		
		/// <summary>
		/// Name of the referent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Not supported by Cloud Run.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConfigMapKeySelector
	{
		
		/// <summary>
		/// Required. Not supported by Cloud Run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		/// <summary>
		/// Not supported by Cloud Run. LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="localObjectReference")]
		public LocalObjectReference LocalObjectReference { get; set; }
		
		/// <summary>
		/// Required. Not supported by Cloud Run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Not supported by Cloud Run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="optional")]
		public System.Nullable<System.Boolean> Optional { get; set; }
	}
	
	/// <summary>
	/// Not supported by Cloud Run. Adapts a ConfigMap into a volume. The contents of the target ConfigMap's Data field will be presented in a volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConfigMapVolumeSource
	{
		
		/// <summary>
		/// (Optional) Integer representation of mode bits to use on created files by default. Must be a value between 01 and 0777 (octal). If 0 or not set, it will default to 0644. Directories within the path are not affected by this setting. Notes * Internally, a umask of 0222 will be applied to any non-zero value. * This is an integer representation of the mode bits. So, the octal integer value should look exactly as the chmod numeric notation with a leading zero. Some examples: for chmod 777 (a=rwx), set to 0777 (octal) or 511 (base-10). For chmod 640 (u=rw,g=r), set to 0640 (octal) or 416 (base-10). For chmod 755 (u=rwx,g=rx,o=rx), set to 0755 (octal) or 493 (base-10). * This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultMode")]
		public System.Nullable<System.Int32> DefaultMode { get; set; }
		
		/// <summary>
		/// (Optional) If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified that is not present in the Secret, the volume setup will error unless it is marked optional.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public KeyToPath[] Items { get; set; }
		
		/// <summary>
		/// Name of the config.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// (Optional) Specify whether the Secret or its keys must be defined.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="optional")]
		public System.Nullable<System.Boolean> Optional { get; set; }
	}
	
	/// <summary>
	/// Maps a string key to a path within a volume.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class KeyToPath
	{
		
		/// <summary>
		/// The Cloud Secret Manager secret version. Can be 'latest' for the latest value, or an integer or a secret alias for a specific version. The key to project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		/// <summary>
		/// (Optional) Mode bits to use on this file, must be a value between 01 and 0777 (octal). If 0 or not set, the Volume's default mode will be used. Notes * Internally, a umask of 0222 will be applied to any non-zero value. * This is an integer representation of the mode bits. So, the octal integer value should look exactly as the chmod numeric notation with a leading zero. Some examples: for chmod 777 (a=rwx), set to 0777 (octal) or 511 (base-10). For chmod 640 (u=rw,g=r), set to 0640 (octal) or 416 (base-10). For chmod 755 (u=rwx,g=rx,o=rx), set to 0755 (octal) or 493 (base-10). * This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mode")]
		public System.Nullable<System.Int32> Mode { get; set; }
		
		/// <summary>
		/// The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="path")]
		public string Path { get; set; }
	}
	
	/// <summary>
	/// Configuration represents the "floating HEAD" of a linear history of Revisions, and optionally how the containers those revisions reference are built. Users create new Revisions by updating the Configuration's spec. The "latest created" revision's name is available under status, as is the "latest ready" revision's name.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Configuration
	{
		
		/// <summary>
		/// The API version for this call such as "serving.knative.dev/v1".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apiVersion")]
		public string ApiVersion { get; set; }
		
		/// <summary>
		/// The kind of resource, in this case always "Configuration".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// google.cloud.run.meta.v1.ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public ObjectMeta Metadata { get; set; }
		
		/// <summary>
		/// ConfigurationSpec holds the desired state of the Configuration (from the client).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="spec")]
		public ConfigurationSpec Spec { get; set; }
		
		/// <summary>
		/// ConfigurationStatus communicates the observed state of the Configuration (from the controller).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ConfigurationStatus Status { get; set; }
	}
	
	/// <summary>
	/// google.cloud.run.meta.v1.ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ObjectMeta
	{
		
		/// <summary>
		/// Unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. In Cloud Run, annotations with 'run.googleapis.com/' and 'autoscaling.knative.dev' are restricted, and the accepted annotations will be different depending on the resource type. * `autoscaling.knative.dev/maxScale`: Revision. * `autoscaling.knative.dev/minScale`: Revision. * `run.googleapis.com/binary-authorization-breakglass`: Service, Job, * `run.googleapis.com/binary-authorization`: Service, Job, Execution. * `run.googleapis.com/client-name`: All resources. * `run.googleapis.com/cloudsql-instances`: Revision, Execution. * `run.googleapis.com/container-dependencies`: Revision. * `run.googleapis.com/cpu-throttling`: Revision. * `run.googleapis.com/custom-audiences`: Service. * `run.googleapis.com/description`: Service. * `run.googleapis.com/encryption-key-shutdown-hours`: Revision * `run.googleapis.com/encryption-key`: Revision, Execution. * `run.googleapis.com/execution-environment`: Revision, Execution. * `run.googleapis.com/gc-traffic-tags`: Service. * `run.googleapis.com/ingress`: Service. * `run.googleapis.com/launch-stage`: Service, Job. * `run.googleapis.com/minScale`: Service (ALPHA) * `run.googleapis.com/network-interfaces`: Revision, Execution. * `run.googleapis.com/post-key-revocation-action-type`: Revision. * `run.googleapis.com/secrets`: Revision, Execution. * `run.googleapis.com/secure-session-agent`: Revision. * `run.googleapis.com/sessionAffinity`: Revision. * `run.googleapis.com/startup-cpu-boost`: Revision. * `run.googleapis.com/vpc-access-connector`: Revision, Execution. * `run.googleapis.com/vpc-access-egress`: Revision, Execution.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="annotations")]
		public System.Collections.Generic.Dictionary<string, string> Annotations { get; set; }
		
		/// <summary>
		/// Not supported by Cloud Run
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clusterName")]
		public string ClusterName { get; set; }
		
		/// <summary>
		/// UTC timestamp representing the server time when this object was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creationTimestamp")]
		public string CreationTimestamp { get; set; }
		
		/// <summary>
		/// Not supported by Cloud Run
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deletionGracePeriodSeconds")]
		public System.Nullable<System.Int32> DeletionGracePeriodSeconds { get; set; }
		
		/// <summary>
		/// The read-only soft deletion timestamp for this resource. In Cloud Run, users are not able to set this field. Instead, they must call the corresponding Delete API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deletionTimestamp")]
		public string DeletionTimestamp { get; set; }
		
		/// <summary>
		/// Not supported by Cloud Run
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="finalizers")]
		public string[] Finalizers { get; set; }
		
		/// <summary>
		/// Not supported by Cloud Run
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="generateName")]
		public string GenerateName { get; set; }
		
		/// <summary>
		/// A system-provided sequence number representing a specific generation of the desired state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="generation")]
		public System.Nullable<System.Int32> Generation { get; set; }
		
		/// <summary>
		/// Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and routes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// Required. The name of the resource. Name is required when creating top-level resources (Service, Job), must be unique within a Cloud Run project/region, and cannot be changed once created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required. Defines the space within each name must be unique within a Cloud Run region. In Cloud Run, it must be project ID or number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="namespace")]
		public string Namespace { get; set; }
		
		/// <summary>
		/// Not supported by Cloud Run
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ownerReferences")]
		public OwnerReference[] OwnerReferences { get; set; }
		
		/// <summary>
		/// Opaque, system-generated value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server or omit the value to disable conflict-detection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceVersion")]
		public string ResourceVersion { get; set; }
		
		/// <summary>
		/// URL representing this object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selfLink")]
		public string SelfLink { get; set; }
		
		/// <summary>
		/// Unique, system-generated identifier for this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uid")]
		public string Uid { get; set; }
	}
	
	/// <summary>
	/// This is not supported or used by Cloud Run.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OwnerReference
	{
		
		/// <summary>
		/// This is not supported or used by Cloud Run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apiVersion")]
		public string ApiVersion { get; set; }
		
		/// <summary>
		/// This is not supported or used by Cloud Run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="blockOwnerDeletion")]
		public System.Nullable<System.Boolean> BlockOwnerDeletion { get; set; }
		
		/// <summary>
		/// This is not supported or used by Cloud Run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="controller")]
		public System.Nullable<System.Boolean> Controller { get; set; }
		
		/// <summary>
		/// This is not supported or used by Cloud Run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// This is not supported or used by Cloud Run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// This is not supported or used by Cloud Run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uid")]
		public string Uid { get; set; }
	}
	
	/// <summary>
	/// ConfigurationSpec holds the desired state of the Configuration (from the client).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConfigurationSpec
	{
		
		/// <summary>
		/// RevisionTemplateSpec describes the data a revision should have when created from a template.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="template")]
		public RevisionTemplate Template { get; set; }
	}
	
	/// <summary>
	/// RevisionTemplateSpec describes the data a revision should have when created from a template.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RevisionTemplate
	{
		
		/// <summary>
		/// google.cloud.run.meta.v1.ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public ObjectMeta Metadata { get; set; }
		
		/// <summary>
		/// RevisionSpec holds the desired state of the Revision (from the client).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="spec")]
		public RevisionSpec Spec { get; set; }
	}
	
	/// <summary>
	/// RevisionSpec holds the desired state of the Revision (from the client).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RevisionSpec
	{
		
		/// <summary>
		/// ContainerConcurrency specifies the maximum allowed in-flight (concurrent) requests per container instance of the Revision. If not specified, defaults to 80.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="containerConcurrency")]
		public System.Nullable<System.Int32> ContainerConcurrency { get; set; }
		
		/// <summary>
		/// Containers holds the single container that defines the unit of execution for this Revision. In the context of a Revision, we disallow a number of fields on this Container, including: name and lifecycle. In Cloud Run, only a single container may be provided.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="containers")]
		public Container[] Containers { get; set; }
		
		/// <summary>
		/// Not supported by Cloud Run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableServiceLinks")]
		public System.Nullable<System.Boolean> EnableServiceLinks { get; set; }
		
		/// <summary>
		/// Not supported by Cloud Run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imagePullSecrets")]
		public LocalObjectReference[] ImagePullSecrets { get; set; }
		
		/// <summary>
		/// Email address of the IAM service account associated with the revision of the service. The service account represents the identity of the running revision, and determines what permissions the revision has. If not provided, the revision will use the project's default service account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceAccountName")]
		public string ServiceAccountName { get; set; }
		
		/// <summary>
		/// TimeoutSeconds holds the max duration the instance is allowed for responding to a request. Cloud Run: defaults to 300 seconds (5 minutes). Maximum allowed value is 3600 seconds (1 hour).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeoutSeconds")]
		public System.Nullable<System.Int32> TimeoutSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="volumes")]
		public Volume[] Volumes { get; set; }
	}
	
	/// <summary>
	/// A single application container. This specifies both the container to run, the command to run in the container and the arguments to supply to it. Note that additional arguments may be supplied by the system to the container at runtime.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Container
	{
		
		/// <summary>
		/// Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references are not supported in Cloud Run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="args")]
		public string[] Args { get; set; }
		
		/// <summary>
		/// Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references are not supported in Cloud Run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="command")]
		public string[] Command { get; set; }
		
		/// <summary>
		/// List of environment variables to set in the container. EnvVar with duplicate names are generally allowed; if referencing a secret, the name must be unique for the container. For non-secret EnvVar names, the Container will only get the last-declared one.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="env")]
		public EnvVar[] Env { get; set; }
		
		/// <summary>
		/// Not supported by Cloud Run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="envFrom")]
		public EnvFromSource[] EnvFrom { get; set; }
		
		/// <summary>
		/// Required. Name of the container image in Dockerhub, Google Artifact Registry, or Google Container Registry. If the host is not provided, Dockerhub is assumed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="image")]
		public string Image { get; set; }
		
		/// <summary>
		/// Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imagePullPolicy")]
		public string ImagePullPolicy { get; set; }
		
		/// <summary>
		/// Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="livenessProbe")]
		public Probe LivenessProbe { get; set; }
		
		/// <summary>
		/// Name of the container specified as a DNS_LABEL (RFC 1123).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// List of ports to expose from the container. Only a single port can be specified. The specified ports must be listening on all interfaces (0.0.0.0) within the container to be accessible. If omitted, a port number will be chosen and passed to the container through the PORT environment variable for the container to listen on.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ports")]
		public ContainerPort[] Ports { get; set; }
		
		/// <summary>
		/// Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="readinessProbe")]
		public Probe ReadinessProbe { get; set; }
		
		/// <summary>
		/// ResourceRequirements describes the compute resource requirements.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resources")]
		public ResourceRequirements Resources { get; set; }
		
		/// <summary>
		/// Not supported by Cloud Run. SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext. When both are set, the values in SecurityContext take precedence.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="securityContext")]
		public SecurityContext SecurityContext { get; set; }
		
		/// <summary>
		/// Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startupProbe")]
		public Probe StartupProbe { get; set; }
		
		/// <summary>
		/// Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="terminationMessagePath")]
		public string TerminationMessagePath { get; set; }
		
		/// <summary>
		/// Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="terminationMessagePolicy")]
		public string TerminationMessagePolicy { get; set; }
		
		/// <summary>
		/// Volume to mount into the container's filesystem. Only supports SecretVolumeSources. Pod volumes to mount into the container's filesystem.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="volumeMounts")]
		public VolumeMount[] VolumeMounts { get; set; }
		
		/// <summary>
		/// Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workingDir")]
		public string WorkingDir { get; set; }
	}
	
	/// <summary>
	/// EnvVar represents an environment variable present in a Container.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EnvVar
	{
		
		/// <summary>
		/// Required. Name of the environment variable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Value of the environment variable. Defaults to "". Variable references are not supported in Cloud Run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
		
		/// <summary>
		/// EnvVarSource represents a source for the value of an EnvVar.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="valueFrom")]
		public EnvVarSource ValueFrom { get; set; }
	}
	
	/// <summary>
	/// EnvVarSource represents a source for the value of an EnvVar.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EnvVarSource
	{
		
		/// <summary>
		/// Not supported by Cloud Run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="configMapKeyRef")]
		public ConfigMapKeySelector ConfigMapKeyRef { get; set; }
		
		/// <summary>
		/// SecretKeySelector selects a key of a Secret.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secretKeyRef")]
		public SecretKeySelector SecretKeyRef { get; set; }
	}
	
	/// <summary>
	/// SecretKeySelector selects a key of a Secret.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SecretKeySelector
	{
		
		/// <summary>
		/// Required. A Cloud Secret Manager secret version. Must be 'latest' for the latest version, an integer for a specific version, or a version alias. The key of the secret to select from. Must be a valid secret key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		/// <summary>
		/// Not supported by Cloud Run. LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="localObjectReference")]
		public LocalObjectReference LocalObjectReference { get; set; }
		
		/// <summary>
		/// The name of the secret in Cloud Secret Manager. By default, the secret is assumed to be in the same project. If the secret is in another project, you must define an alias. An alias definition has the form: :projects//secrets/. If multiple alias definitions are needed, they must be separated by commas. The alias definitions must be set on the run.googleapis.com/secrets annotation. The name of the secret in the pod's namespace to select from.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Specify whether the Secret or its key must be defined.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="optional")]
		public System.Nullable<System.Boolean> Optional { get; set; }
	}
	
	/// <summary>
	/// Not supported by Cloud Run. EnvFromSource represents the source of a set of ConfigMaps
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EnvFromSource
	{
		
		/// <summary>
		/// Not supported by Cloud Run. ConfigMapEnvSource selects a ConfigMap to populate the environment variables with. The contents of the target ConfigMap's Data field will represent the key-value pairs as environment variables.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="configMapRef")]
		public ConfigMapEnvSource ConfigMapRef { get; set; }
		
		/// <summary>
		/// An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="prefix")]
		public string Prefix { get; set; }
		
		/// <summary>
		/// Not supported by Cloud Run. SecretEnvSource selects a Secret to populate the environment variables with. The contents of the target Secret's Data field will represent the key-value pairs as environment variables.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secretRef")]
		public SecretEnvSource SecretRef { get; set; }
	}
	
	/// <summary>
	/// Not supported by Cloud Run. SecretEnvSource selects a Secret to populate the environment variables with. The contents of the target Secret's Data field will represent the key-value pairs as environment variables.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SecretEnvSource
	{
		
		/// <summary>
		/// Not supported by Cloud Run. LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="localObjectReference")]
		public LocalObjectReference LocalObjectReference { get; set; }
		
		/// <summary>
		/// The Secret to select from.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Specify whether the Secret must be defined
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="optional")]
		public System.Nullable<System.Boolean> Optional { get; set; }
	}
	
	/// <summary>
	/// Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Probe
	{
		
		/// <summary>
		/// Not supported by Cloud Run. ExecAction describes a "run in container" action.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exec")]
		public ExecAction Exec { get; set; }
		
		/// <summary>
		/// Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="failureThreshold")]
		public System.Nullable<System.Int32> FailureThreshold { get; set; }
		
		/// <summary>
		/// GRPCAction describes an action involving a GRPC port.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="grpc")]
		public GRPCAction Grpc { get; set; }
		
		/// <summary>
		/// HTTPGetAction describes an action based on HTTP Get requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="httpGet")]
		public HTTPGetAction HttpGet { get; set; }
		
		/// <summary>
		/// Number of seconds after the container has started before the probe is initiated. Defaults to 0 seconds. Minimum value is 0. Maximum value for liveness probe is 3600. Maximum value for startup probe is 240.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="initialDelaySeconds")]
		public System.Nullable<System.Int32> InitialDelaySeconds { get; set; }
		
		/// <summary>
		/// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1. Maximum value for liveness probe is 3600. Maximum value for startup probe is 240. Must be greater or equal than timeout_seconds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="periodSeconds")]
		public System.Nullable<System.Int32> PeriodSeconds { get; set; }
		
		/// <summary>
		/// Minimum consecutive successes for the probe to be considered successful after having failed. Must be 1 if set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="successThreshold")]
		public System.Nullable<System.Int32> SuccessThreshold { get; set; }
		
		/// <summary>
		/// TCPSocketAction describes an action based on opening a socket
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tcpSocket")]
		public TCPSocketAction TcpSocket { get; set; }
		
		/// <summary>
		/// Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. Maximum value is 3600. Must be smaller than period_seconds; if period_seconds is not set, must be less or equal than 10.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeoutSeconds")]
		public System.Nullable<System.Int32> TimeoutSeconds { get; set; }
	}
	
	/// <summary>
	/// Not supported by Cloud Run. ExecAction describes a "run in container" action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ExecAction
	{
		
		/// <summary>
		/// Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="command")]
		public string[] Command { get; set; }
	}
	
	/// <summary>
	/// GRPCAction describes an action involving a GRPC port.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GRPCAction
	{
		
		/// <summary>
		/// Port number of the gRPC service. Number must be in the range 1 to 65535.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="port")]
		public System.Nullable<System.Int32> Port { get; set; }
		
		/// <summary>
		/// Service is the name of the service to place in the gRPC HealthCheckRequest. If this is not specified, the default behavior is defined by gRPC.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="service")]
		public string Service { get; set; }
	}
	
	/// <summary>
	/// HTTPGetAction describes an action based on HTTP Get requests.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class HTTPGetAction
	{
		
		/// <summary>
		/// Not supported by Cloud Run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="host")]
		public string Host { get; set; }
		
		/// <summary>
		/// Custom headers to set in the request. HTTP allows repeated headers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="httpHeaders")]
		public HTTPHeader[] HttpHeaders { get; set; }
		
		/// <summary>
		/// Path to access on the HTTP server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="path")]
		public string Path { get; set; }
		
		/// <summary>
		/// Port number to access on the container. Number must be in the range 1 to 65535.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="port")]
		public System.Nullable<System.Int32> Port { get; set; }
		
		/// <summary>
		/// Not supported by Cloud Run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scheme")]
		public string Scheme { get; set; }
	}
	
	/// <summary>
	/// HTTPHeader describes a custom header to be used in HTTP probes
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class HTTPHeader
	{
		
		/// <summary>
		/// Required. The header field name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The header field value
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// TCPSocketAction describes an action based on opening a socket
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TCPSocketAction
	{
		
		/// <summary>
		/// Not supported by Cloud Run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="host")]
		public string Host { get; set; }
		
		/// <summary>
		/// Port number to access on the container. Number must be in the range 1 to 65535.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="port")]
		public System.Nullable<System.Int32> Port { get; set; }
	}
	
	/// <summary>
	/// ContainerPort represents a network port in a single container.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ContainerPort
	{
		
		/// <summary>
		/// Port number the container listens on. If present, this must be a valid port number, 0 < x < 65536. If not present, it will default to port 8080. For more information, see https://cloud.google.com/run/docs/container-contract#port
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="containerPort")]
		public System.Nullable<System.Int32> ContainerPort1 { get; set; }
		
		/// <summary>
		/// If specified, used to specify which protocol to use. Allowed values are "http1" and "h2c".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Protocol for port. Must be "TCP". Defaults to "TCP".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="protocol")]
		public string Protocol { get; set; }
	}
	
	/// <summary>
	/// ResourceRequirements describes the compute resource requirements.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResourceRequirements
	{
		
		/// <summary>
		/// Limits describes the maximum amount of compute resources allowed. Only 'cpu' and 'memory' keys are supported. * For supported 'cpu' values, go to https://cloud.google.com/run/docs/configuring/cpu. * For supported 'memory' values and syntax, go to https://cloud.google.com/run/docs/configuring/memory-limits
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limits")]
		public System.Collections.Generic.Dictionary<string, string> Limits { get; set; }
		
		/// <summary>
		/// Requests describes the minimum amount of compute resources required. Only `cpu` and `memory` are supported. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. * For supported 'cpu' values, go to https://cloud.google.com/run/docs/configuring/cpu. * For supported 'memory' values and syntax, go to https://cloud.google.com/run/docs/configuring/memory-limits
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requests")]
		public System.Collections.Generic.Dictionary<string, string> Requests { get; set; }
	}
	
	/// <summary>
	/// Not supported by Cloud Run. SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext. When both are set, the values in SecurityContext take precedence.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SecurityContext
	{
		
		/// <summary>
		/// The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="runAsUser")]
		public System.Nullable<System.Int32> RunAsUser { get; set; }
	}
	
	/// <summary>
	/// VolumeMount describes a mounting of a Volume within a container.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VolumeMount
	{
		
		/// <summary>
		/// Required. Path within the container at which the volume should be mounted. Must not contain ':'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mountPath")]
		public string MountPath { get; set; }
		
		/// <summary>
		/// Required. The name of the volume. There must be a corresponding Volume with the same name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Sets the mount to be read-only or read-write. Not used by Cloud Run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="readOnly")]
		public System.Nullable<System.Boolean> ReadOnly { get; set; }
		
		/// <summary>
		/// Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subPath")]
		public string SubPath { get; set; }
	}
	
	/// <summary>
	/// Volume represents a named volume in a container.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Volume
	{
		
		/// <summary>
		/// Not supported by Cloud Run. Adapts a ConfigMap into a volume. The contents of the target ConfigMap's Data field will be presented in a volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="configMap")]
		public ConfigMapVolumeSource ConfigMap { get; set; }
		
		/// <summary>
		/// Storage volume source using the Container Storage Interface.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="csi")]
		public CSIVolumeSource Csi { get; set; }
		
		/// <summary>
		/// In memory (tmpfs) ephemeral storage. It is ephemeral in the sense that when the sandbox is taken down, the data is destroyed with it (it does not persist across sandbox runs).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="emptyDir")]
		public EmptyDirVolumeSource EmptyDir { get; set; }
		
		/// <summary>
		/// Volume's name. In Cloud Run Fully Managed, the name 'cloudsql' is reserved.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Represents a persistent volume that will be mounted using NFS. This volume will be shared between all instances of the Service and data will not be deleted when the instance is shut down.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nfs")]
		public NFSVolumeSource Nfs { get; set; }
		
		/// <summary>
		/// A volume representing a secret stored in Google Secret Manager. The secret's value will be presented as the content of a file whose name is defined in the item path. If no items are defined, the name of the file is the secret_name. The contents of the target Secret's Data field will be presented in a volume as files using the keys in the Data field as the file names.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secret")]
		public SecretVolumeSource Secret { get; set; }
	}
	
	/// <summary>
	/// In memory (tmpfs) ephemeral storage. It is ephemeral in the sense that when the sandbox is taken down, the data is destroyed with it (it does not persist across sandbox runs).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EmptyDirVolumeSource
	{
		
		/// <summary>
		/// The medium on which the data is stored. The default is "" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="medium")]
		public string Medium { get; set; }
		
		/// <summary>
		/// Limit on the storage usable by this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers. The default is nil which means that the limit is undefined. More info: https://cloud.google.com/run/docs/configuring/in-memory-volumes#configure-volume. Info in Kubernetes: https://kubernetes.io/docs/concepts/storage/volumes/#emptydir
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sizeLimit")]
		public string SizeLimit { get; set; }
	}
	
	/// <summary>
	/// Represents a persistent volume that will be mounted using NFS. This volume will be shared between all instances of the Service and data will not be deleted when the instance is shut down.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NFSVolumeSource
	{
		
		/// <summary>
		/// Path that is exported by the NFS server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="path")]
		public string Path { get; set; }
		
		/// <summary>
		/// If true, mount the NFS volume as read only. Defaults to false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="readOnly")]
		public System.Nullable<System.Boolean> ReadOnly { get; set; }
		
		/// <summary>
		/// Hostname or IP address of the NFS server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="server")]
		public string Server { get; set; }
	}
	
	/// <summary>
	/// A volume representing a secret stored in Google Secret Manager. The secret's value will be presented as the content of a file whose name is defined in the item path. If no items are defined, the name of the file is the secret_name. The contents of the target Secret's Data field will be presented in a volume as files using the keys in the Data field as the file names.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SecretVolumeSource
	{
		
		/// <summary>
		/// Integer representation of mode bits to use on created files by default. Must be a value between 01 and 0777 (octal). If 0 or not set, it will default to 0444. Directories within the path are not affected by this setting. Notes * Internally, a umask of 0222 will be applied to any non-zero value. * This is an integer representation of the mode bits. So, the octal integer value should look exactly as the chmod numeric notation with a leading zero. Some examples: for chmod 777 (a=rwx), set to 0777 (octal) or 511 (base-10). For chmod 640 (u=rw,g=r), set to 0640 (octal) or 416 (base-10). For chmod 755 (u=rwx,g=rx,o=rx), set to 0755 (octal) or 493 (base-10). * This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultMode")]
		public System.Nullable<System.Int32> DefaultMode { get; set; }
		
		/// <summary>
		/// A list of secret versions to mount in the volume. If no items are specified, the volume will expose a file with the same name as the secret name. The contents of the file will be the data in the latest version of the secret. If items are specified, the key will be used as the version to fetch from Cloud Secret Manager and the path will be the name of the file exposed in the volume. When items are defined, they must specify both a key and a path.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public KeyToPath[] Items { get; set; }
		
		/// <summary>
		/// Not supported by Cloud Run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="optional")]
		public System.Nullable<System.Boolean> Optional { get; set; }
		
		/// <summary>
		/// The name of the secret in Cloud Secret Manager. By default, the secret is assumed to be in the same project. If the secret is in another project, you must define an alias. An alias definition has the form: :projects//secrets/. If multiple alias definitions are needed, they must be separated by commas. The alias definitions must be set on the run.googleapis.com/secrets annotation. Name of the secret in the container's namespace to use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secretName")]
		public string SecretName { get; set; }
	}
	
	/// <summary>
	/// ConfigurationStatus communicates the observed state of the Configuration (from the controller).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConfigurationStatus
	{
		
		/// <summary>
		/// Conditions communicate information about ongoing/complete reconciliation processes that bring the "spec" inline with the observed state of the world.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="conditions")]
		public GoogleCloudRunV1Condition[] Conditions { get; set; }
		
		/// <summary>
		/// LatestCreatedRevisionName is the last revision that was created from this Configuration. It might not be ready yet, so for the latest ready revision, use LatestReadyRevisionName.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="latestCreatedRevisionName")]
		public string LatestCreatedRevisionName { get; set; }
		
		/// <summary>
		/// LatestReadyRevisionName holds the name of the latest Revision stamped out from this Configuration that has had its "Ready" condition become "True".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="latestReadyRevisionName")]
		public string LatestReadyRevisionName { get; set; }
		
		/// <summary>
		/// ObservedGeneration is the 'Generation' of the Configuration that was last processed by the controller. The observed generation is updated even if the controller failed to process the spec and create the Revision. Clients polling for completed reconciliation should poll until observedGeneration = metadata.generation, and the Ready condition's status is True or False.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="observedGeneration")]
		public System.Nullable<System.Int32> ObservedGeneration { get; set; }
	}
	
	/// <summary>
	/// Conditions show the status of reconciliation progress on a given resource. Most resource use a top-level condition type "Ready" or "Completed" to show overall status with other conditions to checkpoint each stage of reconciliation. Note that if metadata.Generation does not equal status.ObservedGeneration, the conditions shown may not be relevant for the current spec.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleCloudRunV1Condition
	{
		
		/// <summary>
		/// Optional. Last time the condition transitioned from one status to another.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastTransitionTime")]
		public string LastTransitionTime { get; set; }
		
		/// <summary>
		/// Optional. Human readable message indicating details about the current status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// Optional. One-word CamelCase reason for the condition's last transition. These are intended to be stable, unique values which the client may use to trigger error handling logic, whereas messages which may be changed later by the server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		/// <summary>
		/// Optional. How to interpret this condition. One of Error, Warning, or Info. Conditions of severity Info do not contribute to resource readiness.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="severity")]
		public string Severity { get; set; }
		
		/// <summary>
		/// Status of the condition, one of True, False, Unknown.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// type is used to communicate the status of the reconciliation process. Types common to all resources include: * "Ready" or "Completed": True when the Resource is ready.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Per container override specification.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ContainerOverride
	{
		
		/// <summary>
		/// Arguments to the entrypoint. The specified arguments replace and override any existing entrypoint arguments. Must be empty if `clear_args` is set to true.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="args")]
		public string[] Args { get; set; }
		
		/// <summary>
		/// Optional. Set to True to clear all existing arguments.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clearArgs")]
		public System.Nullable<System.Boolean> ClearArgs { get; set; }
		
		/// <summary>
		/// List of environment variables to set in the container. All specified environment variables are merged with existing environment variables. When the specified environment variables exist, these values override any existing values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="env")]
		public EnvVar[] Env { get; set; }
		
		/// <summary>
		/// The name of the container specified as a DNS_LABEL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Resource to hold the state and status of a user's domain mapping. NOTE: This resource is currently in Beta.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DomainMapping
	{
		
		/// <summary>
		/// The API version for this call such as "domains.cloudrun.com/v1".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apiVersion")]
		public string ApiVersion { get; set; }
		
		/// <summary>
		/// The kind of resource, in this case "DomainMapping".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// google.cloud.run.meta.v1.ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public ObjectMeta Metadata { get; set; }
		
		/// <summary>
		/// The desired state of the Domain Mapping.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="spec")]
		public DomainMappingSpec Spec { get; set; }
		
		/// <summary>
		/// The current state of the Domain Mapping.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public DomainMappingStatus Status { get; set; }
	}
	
	/// <summary>
	/// The desired state of the Domain Mapping.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DomainMappingSpec
	{
		
		/// <summary>
		/// The mode of the certificate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="certificateMode")]
		public System.Nullable<DomainMappingSpecCertificateMode> CertificateMode { get; set; }
		
		/// <summary>
		/// If set, the mapping will override any mapping set before this spec was set. It is recommended that the user leaves this empty to receive an error warning about a potential conflict and only set it once the respective UI has given such a warning.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="forceOverride")]
		public System.Nullable<System.Boolean> ForceOverride { get; set; }
		
		/// <summary>
		/// The name of the Knative Route that this DomainMapping applies to. The route must exist.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="routeName")]
		public string RouteName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DomainMappingSpecCertificateMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CERTIFICATE_MODE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTOMATIC = 2,
	}
	
	/// <summary>
	/// The current state of the Domain Mapping.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DomainMappingStatus
	{
		
		/// <summary>
		/// Array of observed DomainMappingConditions, indicating the current state of the DomainMapping.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="conditions")]
		public GoogleCloudRunV1Condition[] Conditions { get; set; }
		
		/// <summary>
		/// The name of the route that the mapping currently points to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mappedRouteName")]
		public string MappedRouteName { get; set; }
		
		/// <summary>
		/// ObservedGeneration is the 'Generation' of the DomainMapping that was last processed by the controller. Clients polling for completed reconciliation should poll until observedGeneration = metadata.generation and the Ready condition's status is True or False.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="observedGeneration")]
		public System.Nullable<System.Int32> ObservedGeneration { get; set; }
		
		/// <summary>
		/// The resource records required to configure this domain mapping. These records must be added to the domain's DNS configuration in order to serve the application via this domain mapping.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceRecords")]
		public ResourceRecord[] ResourceRecords { get; set; }
		
		/// <summary>
		/// Optional. Not supported by Cloud Run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	/// <summary>
	/// A DNS resource record.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResourceRecord
	{
		
		/// <summary>
		/// Relative name of the object affected by this record. Only applicable for `CNAME` records. Example: 'www'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Data for this record. Values vary by record type, as defined in RFC 1035 (section 5) and RFC 1034 (section 3.6.1).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rrdata")]
		public string Rrdata { get; set; }
		
		/// <summary>
		/// Resource record type. Example: `AAAA`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<ResourceRecordType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ResourceRecordType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RECORD_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		A = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AAAA = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CNAME = 3,
	}
	
	/// <summary>
	/// A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Empty
	{
	}
	
	/// <summary>
	/// Execution represents the configuration of a single execution. An execution is an immutable resource that references a container image which is run to completion.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Execution
	{
		
		/// <summary>
		/// Optional. APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apiVersion")]
		public string ApiVersion { get; set; }
		
		/// <summary>
		/// Optional. Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// google.cloud.run.meta.v1.ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public ObjectMeta Metadata { get; set; }
		
		/// <summary>
		/// ExecutionSpec describes how the execution will look.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="spec")]
		public ExecutionSpec Spec { get; set; }
		
		/// <summary>
		/// ExecutionStatus represents the current state of an Execution.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ExecutionStatus Status { get; set; }
	}
	
	/// <summary>
	/// ExecutionSpec describes how the execution will look.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ExecutionSpec
	{
		
		/// <summary>
		/// Optional. Specifies the maximum desired number of tasks the execution should run at given time. Must be <= task_count. When the job is run, if this field is 0 or unset, the maximum possible value will be used for that execution. The actual number of tasks running in steady state will be less than this number when there are fewer tasks waiting to be completed, i.e. when the work left to do is less than max parallelism.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parallelism")]
		public System.Nullable<System.Int32> Parallelism { get; set; }
		
		/// <summary>
		/// Optional. Specifies the desired number of tasks the execution should run. Setting to 1 means that parallelism is limited to 1 and the success of that task signals the success of the execution. Defaults to 1.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taskCount")]
		public System.Nullable<System.Int32> TaskCount { get; set; }
		
		/// <summary>
		/// TaskTemplateSpec describes the data a task should have when created from a template.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="template")]
		public TaskTemplateSpec Template { get; set; }
	}
	
	/// <summary>
	/// TaskTemplateSpec describes the data a task should have when created from a template.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TaskTemplateSpec
	{
		
		/// <summary>
		/// TaskSpec is a description of a task.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="spec")]
		public TaskSpec Spec { get; set; }
	}
	
	/// <summary>
	/// TaskSpec is a description of a task.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TaskSpec
	{
		
		/// <summary>
		/// Optional. List of containers belonging to the task. We disallow a number of fields on this Container.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="containers")]
		public Container[] Containers { get; set; }
		
		/// <summary>
		/// Optional. Number of retries allowed per task, before marking this job failed. Defaults to 3.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxRetries")]
		public System.Nullable<System.Int32> MaxRetries { get; set; }
		
		/// <summary>
		/// Optional. Email address of the IAM service account associated with the task of a job execution. The service account represents the identity of the running task, and determines what permissions the task has. If not provided, the task will use the project's default service account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceAccountName")]
		public string ServiceAccountName { get; set; }
		
		/// <summary>
		/// Optional. Duration in seconds the task may be active before the system will actively try to mark it failed and kill associated containers. This applies per attempt of a task, meaning each retry can run for the full timeout. Defaults to 600 seconds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeoutSeconds")]
		public string TimeoutSeconds { get; set; }
		
		/// <summary>
		/// Optional. List of volumes that can be mounted by containers belonging to the task.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="volumes")]
		public Volume[] Volumes { get; set; }
	}
	
	/// <summary>
	/// ExecutionStatus represents the current state of an Execution.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ExecutionStatus
	{
		
		/// <summary>
		/// Optional. The number of tasks which reached phase Cancelled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cancelledCount")]
		public System.Nullable<System.Int32> CancelledCount { get; set; }
		
		/// <summary>
		/// Optional. Represents the time that the execution was completed. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC. +optional
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="completionTime")]
		public string CompletionTime { get; set; }
		
		/// <summary>
		/// Optional. Conditions communicate information about ongoing/complete reconciliation processes that bring the "spec" inline with the observed state of the world. Execution-specific conditions include: * `ResourcesAvailable`: `True` when underlying resources have been provisioned. * `Started`: `True` when the execution has started to execute. * `Completed`: `True` when the execution has succeeded. `False` when the execution has failed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="conditions")]
		public GoogleCloudRunV1Condition[] Conditions { get; set; }
		
		/// <summary>
		/// Optional. The number of tasks which reached phase Failed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="failedCount")]
		public System.Nullable<System.Int32> FailedCount { get; set; }
		
		/// <summary>
		/// Optional. URI where logs for this execution can be found in Cloud Console.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logUri")]
		public string LogUri { get; set; }
		
		/// <summary>
		/// Optional. The 'generation' of the execution that was last processed by the controller.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="observedGeneration")]
		public System.Nullable<System.Int32> ObservedGeneration { get; set; }
		
		/// <summary>
		/// Optional. The number of tasks which have retried at least once.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="retriedCount")]
		public System.Nullable<System.Int32> RetriedCount { get; set; }
		
		/// <summary>
		/// Optional. The number of actively running tasks.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="runningCount")]
		public System.Nullable<System.Int32> RunningCount { get; set; }
		
		/// <summary>
		/// Optional. Represents the time that the execution started to run. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public string StartTime { get; set; }
		
		/// <summary>
		/// Optional. The number of tasks which reached phase Succeeded.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="succeededCount")]
		public System.Nullable<System.Int32> SucceededCount { get; set; }
	}
	
	/// <summary>
	/// Reference to an Execution. Use /Executions.GetExecution with the given name to get full execution including the latest status.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ExecutionReference
	{
		
		/// <summary>
		/// Optional. Completion timestamp of the execution.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="completionTimestamp")]
		public string CompletionTimestamp { get; set; }
		
		/// <summary>
		/// Optional. Creation timestamp of the execution.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creationTimestamp")]
		public string CreationTimestamp { get; set; }
		
		/// <summary>
		/// Optional. Name of the execution.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// ExecutionTemplateSpec describes the metadata and spec an Execution should have when created from a job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ExecutionTemplateSpec
	{
		
		/// <summary>
		/// google.cloud.run.meta.v1.ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public ObjectMeta Metadata { get; set; }
		
		/// <summary>
		/// ExecutionSpec describes how the execution will look.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="spec")]
		public ExecutionSpec Spec { get; set; }
	}
	
	/// <summary>
	/// The response message for Operations.ListOperations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleLongrunningListOperationsResponse
	{
		
		/// <summary>
		/// The standard List next-page token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// A list of operations that matches the specified filter in the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operations")]
		public GoogleLongrunningOperation[] Operations { get; set; }
	}
	
	/// <summary>
	/// This resource represents a long-running operation that is the result of a network API call.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleLongrunningOperation
	{
		
		/// <summary>
		/// If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="done")]
		public System.Nullable<System.Boolean> Done { get; set; }
		
		/// <summary>
		/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public GoogleRpcStatus Error { get; set; }
		
		/// <summary>
		/// Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public System.Collections.Generic.Dictionary<string, object> Metadata { get; set; }
		
		/// <summary>
		/// The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="response")]
		public System.Collections.Generic.Dictionary<string, object> Response { get; set; }
	}
	
	/// <summary>
	/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleRpcStatus
	{
		
		/// <summary>
		/// The status code, which should be an enum value of google.rpc.Code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		/// <summary>
		/// A list of messages that carry the error details. There is a common set of message types for APIs to use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string[] Details { get; set; }
		
		/// <summary>
		/// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// The request message for Operations.WaitOperation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleLongrunningWaitOperationRequest
	{
		
		/// <summary>
		/// The maximum duration to wait before timing out. If left blank, the wait will be at most the time permitted by the underlying HTTP/RPC protocol. If RPC context deadline is also specified, the shorter one will be used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeout")]
		public string Timeout { get; set; }
	}
	
	/// <summary>
	/// Job represents the configuration of a single job, which references a container image which is run to completion.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Job
	{
		
		/// <summary>
		/// Optional. APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apiVersion")]
		public string ApiVersion { get; set; }
		
		/// <summary>
		/// Optional. Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// google.cloud.run.meta.v1.ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public ObjectMeta Metadata { get; set; }
		
		/// <summary>
		/// JobSpec describes how the job will look.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="spec")]
		public JobSpec Spec { get; set; }
		
		/// <summary>
		/// JobStatus represents the current state of a Job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public JobStatus Status { get; set; }
	}
	
	/// <summary>
	/// JobSpec describes how the job will look.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class JobSpec
	{
		
		/// <summary>
		/// ExecutionTemplateSpec describes the metadata and spec an Execution should have when created from a job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="template")]
		public ExecutionTemplateSpec Template { get; set; }
	}
	
	/// <summary>
	/// JobStatus represents the current state of a Job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class JobStatus
	{
		
		/// <summary>
		/// Conditions communicate information about ongoing/complete reconciliation processes that bring the "spec" inline with the observed state of the world. Job-specific conditions include: * `Ready`: `True` when the job is ready to be executed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="conditions")]
		public GoogleCloudRunV1Condition[] Conditions { get; set; }
		
		/// <summary>
		/// Number of executions created for this job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="executionCount")]
		public System.Nullable<System.Int32> ExecutionCount { get; set; }
		
		/// <summary>
		/// Reference to an Execution. Use /Executions.GetExecution with the given name to get full execution including the latest status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="latestCreatedExecution")]
		public ExecutionReference LatestCreatedExecution { get; set; }
		
		/// <summary>
		/// The 'generation' of the job that was last processed by the controller.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="observedGeneration")]
		public System.Nullable<System.Int32> ObservedGeneration { get; set; }
	}
	
	/// <summary>
	/// A list of Authorized Domains.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListAuthorizedDomainsResponse
	{
		
		/// <summary>
		/// The authorized domains belonging to the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="domains")]
		public AuthorizedDomain[] Domains { get; set; }
		
		/// <summary>
		/// Continuation token for fetching the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// ListConfigurationsResponse is a list of Configuration resources.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListConfigurationsResponse
	{
		
		/// <summary>
		/// The API version for this call such as "serving.knative.dev/v1".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apiVersion")]
		public string ApiVersion { get; set; }
		
		/// <summary>
		/// List of Configurations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Configuration[] Items { get; set; }
		
		/// <summary>
		/// The kind of this resource, in this case "ConfigurationList".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Metadata for synthetic resources like List. In Cloud Run, all List Resources Responses will have a ListMeta instead of ObjectMeta.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public ListMeta Metadata { get; set; }
		
		/// <summary>
		/// Locations that could not be reached.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unreachable")]
		public string[] Unreachable { get; set; }
	}
	
	/// <summary>
	/// Metadata for synthetic resources like List. In Cloud Run, all List Resources Responses will have a ListMeta instead of ObjectMeta.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListMeta
	{
		
		/// <summary>
		/// Continuation token is a value emitted when the count of items is larger than the user/system limit. To retrieve the next page of items, pass the value of `continue` as the next request's `page_token`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="continue")]
		public string Continue { get; set; }
		
		/// <summary>
		/// Opaque string that identifies the server's internal version of this object. It can be used by clients to determine when objects have changed. If the message is passed back to the server, it must be left unmodified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceVersion")]
		public string ResourceVersion { get; set; }
		
		/// <summary>
		/// URL representing this object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selfLink")]
		public string SelfLink { get; set; }
	}
	
	/// <summary>
	/// ListDomainMappingsResponse is a list of DomainMapping resources.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListDomainMappingsResponse
	{
		
		/// <summary>
		/// The API version for this call such as "domains.cloudrun.com/v1".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apiVersion")]
		public string ApiVersion { get; set; }
		
		/// <summary>
		/// List of DomainMappings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public DomainMapping[] Items { get; set; }
		
		/// <summary>
		/// The kind of this resource, in this case "DomainMappingList".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Metadata for synthetic resources like List. In Cloud Run, all List Resources Responses will have a ListMeta instead of ObjectMeta.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public ListMeta Metadata { get; set; }
		
		/// <summary>
		/// Locations that could not be reached.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unreachable")]
		public string[] Unreachable { get; set; }
	}
	
	/// <summary>
	/// ListExecutionsResponse is a list of Executions resources.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListExecutionsResponse
	{
		
		/// <summary>
		/// The API version for this call such as "run.googleapis.com/v1".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apiVersion")]
		public string ApiVersion { get; set; }
		
		/// <summary>
		/// List of Executions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Execution[] Items { get; set; }
		
		/// <summary>
		/// The kind of this resource, in this case "ExecutionsList".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Metadata for synthetic resources like List. In Cloud Run, all List Resources Responses will have a ListMeta instead of ObjectMeta.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public ListMeta Metadata { get; set; }
		
		/// <summary>
		/// Locations that could not be reached.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unreachable")]
		public string[] Unreachable { get; set; }
	}
	
	/// <summary>
	/// ListJobsResponse is a list of Jobs resources.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListJobsResponse
	{
		
		/// <summary>
		/// The API version for this call such as "run.googleapis.com/v1".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apiVersion")]
		public string ApiVersion { get; set; }
		
		/// <summary>
		/// List of Jobs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Job[] Items { get; set; }
		
		/// <summary>
		/// The kind of this resource, in this case "JobsList".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Metadata for synthetic resources like List. In Cloud Run, all List Resources Responses will have a ListMeta instead of ObjectMeta.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public ListMeta Metadata { get; set; }
		
		/// <summary>
		/// Locations that could not be reached.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unreachable")]
		public string[] Unreachable { get; set; }
	}
	
	/// <summary>
	/// The response message for Locations.ListLocations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListLocationsResponse
	{
		
		/// <summary>
		/// A list of locations that matches the specified filter in the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locations")]
		public Location[] Locations { get; set; }
		
		/// <summary>
		/// The standard List next-page token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// A resource that represents a Google Cloud location.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Location
	{
		
		/// <summary>
		/// The friendly name for this location, typically a nearby city name. For example, "Tokyo".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Cross-service attributes for the location. For example {"cloud.googleapis.com/region": "us-east1"}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// The canonical id for this location. For example: `"us-east1"`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locationId")]
		public string LocationId { get; set; }
		
		/// <summary>
		/// Service-specific metadata. For example the available capacity at the given location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public System.Collections.Generic.Dictionary<string, object> Metadata { get; set; }
		
		/// <summary>
		/// Resource name for the location, which may vary between implementations. For example: `"projects/example-project/locations/us-east1"`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// ListRevisionsResponse is a list of Revision resources.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListRevisionsResponse
	{
		
		/// <summary>
		/// The API version for this call such as "serving.knative.dev/v1".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apiVersion")]
		public string ApiVersion { get; set; }
		
		/// <summary>
		/// List of Revisions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Revision[] Items { get; set; }
		
		/// <summary>
		/// The kind of this resource, in this case "RevisionList".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Metadata for synthetic resources like List. In Cloud Run, all List Resources Responses will have a ListMeta instead of ObjectMeta.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public ListMeta Metadata { get; set; }
		
		/// <summary>
		/// Locations that could not be reached.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unreachable")]
		public string[] Unreachable { get; set; }
	}
	
	/// <summary>
	/// Revision is an immutable snapshot of code and configuration. A revision references a container image. Revisions are created by updates to a Configuration. See also: https://github.com/knative/specs/blob/main/specs/serving/overview.md#revision
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Revision
	{
		
		/// <summary>
		/// The API version for this call such as "serving.knative.dev/v1".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apiVersion")]
		public string ApiVersion { get; set; }
		
		/// <summary>
		/// The kind of this resource, in this case "Revision".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// google.cloud.run.meta.v1.ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public ObjectMeta Metadata { get; set; }
		
		/// <summary>
		/// RevisionSpec holds the desired state of the Revision (from the client).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="spec")]
		public RevisionSpec Spec { get; set; }
		
		/// <summary>
		/// RevisionStatus communicates the observed state of the Revision (from the controller).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public RevisionStatus Status { get; set; }
	}
	
	/// <summary>
	/// RevisionStatus communicates the observed state of the Revision (from the controller).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RevisionStatus
	{
		
		/// <summary>
		/// Conditions communicate information about ongoing/complete reconciliation processes that bring the "spec" inline with the observed state of the world. As a Revision is being prepared, it will incrementally update conditions. Revision-specific conditions include: * `ResourcesAvailable`: `True` when underlying resources have been provisioned. * `ContainerHealthy`: `True` when the Revision readiness check completes. * `Active`: `True` when the Revision may receive traffic.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="conditions")]
		public GoogleCloudRunV1Condition[] Conditions { get; set; }
		
		/// <summary>
		/// Output only. The configured number of instances running this revision. For Cloud Run, this only includes instances provisioned using the minScale annotation. It does not include instances created by autoscaling.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="desiredReplicas")]
		public System.Nullable<System.Int32> DesiredReplicas { get; set; }
		
		/// <summary>
		/// ImageDigest holds the resolved digest for the image specified within .Spec.Container.Image. The digest is resolved during the creation of Revision. This field holds the digest value regardless of whether a tag or digest was originally specified in the Container object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageDigest")]
		public string ImageDigest { get; set; }
		
		/// <summary>
		/// Optional. Specifies the generated logging url for this particular revision based on the revision url template specified in the controller's config.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logUrl")]
		public string LogUrl { get; set; }
		
		/// <summary>
		/// ObservedGeneration is the 'Generation' of the Revision that was last processed by the controller. Clients polling for completed reconciliation should poll until observedGeneration = metadata.generation, and the Ready condition's status is True or False.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="observedGeneration")]
		public System.Nullable<System.Int32> ObservedGeneration { get; set; }
		
		/// <summary>
		/// Not currently used by Cloud Run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceName")]
		public string ServiceName { get; set; }
	}
	
	/// <summary>
	/// ListRoutesResponse is a list of Route resources.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListRoutesResponse
	{
		
		/// <summary>
		/// The API version for this call such as "serving.knative.dev/v1".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apiVersion")]
		public string ApiVersion { get; set; }
		
		/// <summary>
		/// List of Routes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Route[] Items { get; set; }
		
		/// <summary>
		/// The kind of this resource, in this case always "RouteList".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Metadata for synthetic resources like List. In Cloud Run, all List Resources Responses will have a ListMeta instead of ObjectMeta.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public ListMeta Metadata { get; set; }
		
		/// <summary>
		/// Locations that could not be reached.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unreachable")]
		public string[] Unreachable { get; set; }
	}
	
	/// <summary>
	/// Route is responsible for configuring ingress over a collection of Revisions. Some of the Revisions a Route distributes traffic over may be specified by referencing the Configuration responsible for creating them; in these cases the Route is additionally responsible for monitoring the Configuration for "latest ready" revision changes, and smoothly rolling out latest revisions. Cloud Run currently supports referencing a single Configuration to automatically deploy the "latest ready" Revision from that Configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Route
	{
		
		/// <summary>
		/// The API version for this call such as "serving.knative.dev/v1".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apiVersion")]
		public string ApiVersion { get; set; }
		
		/// <summary>
		/// The kind of this resource, in this case always "Route".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// google.cloud.run.meta.v1.ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public ObjectMeta Metadata { get; set; }
		
		/// <summary>
		/// RouteSpec holds the desired state of the Route (from the client).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="spec")]
		public RouteSpec Spec { get; set; }
		
		/// <summary>
		/// RouteStatus communicates the observed state of the Route (from the controller).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public RouteStatus Status { get; set; }
	}
	
	/// <summary>
	/// RouteSpec holds the desired state of the Route (from the client).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RouteSpec
	{
		
		/// <summary>
		/// Traffic specifies how to distribute traffic over a collection of Knative Revisions and Configurations. Cloud Run currently supports a single configurationName.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="traffic")]
		public TrafficTarget[] Traffic { get; set; }
	}
	
	/// <summary>
	/// TrafficTarget holds a single entry of the routing table for a Route.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TrafficTarget
	{
		
		/// <summary>
		/// [Deprecated] Not supported in Cloud Run. It must be empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="configurationName")]
		public string ConfigurationName { get; set; }
		
		/// <summary>
		/// Uses the "status.latestReadyRevisionName" of the Service to determine the traffic target. When it changes, traffic will automatically migrate from the prior "latest ready" revision to the new one. This field must be false if RevisionName is set. This field defaults to true otherwise. If the field is set to true on Status, this means that the Revision was resolved from the Service's latest ready revision.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="latestRevision")]
		public System.Nullable<System.Boolean> LatestRevision { get; set; }
		
		/// <summary>
		/// Percent specifies percent of the traffic to this Revision or Configuration. This defaults to zero if unspecified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="percent")]
		public System.Nullable<System.Int32> Percent { get; set; }
		
		/// <summary>
		/// Points this traffic target to a specific Revision. This field is mutually exclusive with latest_revision.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="revisionName")]
		public string RevisionName { get; set; }
		
		/// <summary>
		/// Tag is used to expose a dedicated url for referencing this target exclusively.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tag")]
		public string Tag { get; set; }
		
		/// <summary>
		/// Output only. URL displays the URL for accessing tagged traffic targets. URL is displayed in status, and is disallowed on spec. URL must contain a scheme (e.g. https://) and a hostname, but may not contain anything else (e.g. basic auth, url path, etc.)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	/// <summary>
	/// RouteStatus communicates the observed state of the Route (from the controller).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RouteStatus
	{
		
		/// <summary>
		/// Information for connecting over HTTP(s).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address")]
		public Addressable Address { get; set; }
		
		/// <summary>
		/// Conditions communicates information about ongoing/complete reconciliation processes that bring the "spec" inline with the observed state of the world.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="conditions")]
		public GoogleCloudRunV1Condition[] Conditions { get; set; }
		
		/// <summary>
		/// ObservedGeneration is the 'Generation' of the Route that was last processed by the controller. Clients polling for completed reconciliation should poll until observedGeneration = metadata.generation and the Ready condition's status is True or False. Note that providing a TrafficTarget that has latest_revision=True will result in a Route that does not increment either its metadata.generation or its observedGeneration, as new "latest ready" revisions from the Configuration are processed without an update to the Route's spec.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="observedGeneration")]
		public System.Nullable<System.Int32> ObservedGeneration { get; set; }
		
		/// <summary>
		/// Traffic holds the configured traffic distribution. These entries will always contain RevisionName references. When ConfigurationName appears in the spec, this will hold the LatestReadyRevisionName that was last observed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="traffic")]
		public TrafficTarget[] Traffic { get; set; }
		
		/// <summary>
		/// URL holds the url that will distribute traffic over the provided traffic targets. It generally has the form: `https://{route-hash}-{project-hash}-{cluster-level-suffix}.a.run.app`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	/// <summary>
	/// A list of Service resources.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListServicesResponse
	{
		
		/// <summary>
		/// The API version for this call; returns "serving.knative.dev/v1".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apiVersion")]
		public string ApiVersion { get; set; }
		
		/// <summary>
		/// List of Services.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Service[] Items { get; set; }
		
		/// <summary>
		/// The kind of this resource; returns "ServiceList".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Metadata for synthetic resources like List. In Cloud Run, all List Resources Responses will have a ListMeta instead of ObjectMeta.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public ListMeta Metadata { get; set; }
		
		/// <summary>
		/// For calls against the global endpoint, returns the list of Cloud locations that could not be reached. For regional calls, this field is not used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unreachable")]
		public string[] Unreachable { get; set; }
	}
	
	/// <summary>
	/// Service acts as a top-level container that manages a set of Routes and Configurations which implement a network service. Service exists to provide a singular abstraction which can be access controlled, reasoned about, and which encapsulates software lifecycle decisions such as rollout policy and team resource ownership. Service acts only as an orchestrator of the underlying Routes and Configurations (much as a kubernetes Deployment orchestrates ReplicaSets). The Service's controller will track the statuses of its owned Configuration and Route, reflecting their statuses and conditions as its own.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Service
	{
		
		/// <summary>
		/// The API version for this call. It must be "serving.knative.dev/v1".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apiVersion")]
		public string ApiVersion { get; set; }
		
		/// <summary>
		/// The kind of resource. It must be "Service".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// google.cloud.run.meta.v1.ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public ObjectMeta Metadata { get; set; }
		
		/// <summary>
		/// ServiceSpec holds the desired state of the Route (from the client), which is used to manipulate the underlying Route and Configuration(s).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="spec")]
		public ServiceSpec Spec { get; set; }
		
		/// <summary>
		/// The current state of the Service. Output only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ServiceStatus Status { get; set; }
	}
	
	/// <summary>
	/// ServiceSpec holds the desired state of the Route (from the client), which is used to manipulate the underlying Route and Configuration(s).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ServiceSpec
	{
		
		/// <summary>
		/// RevisionTemplateSpec describes the data a revision should have when created from a template.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="template")]
		public RevisionTemplate Template { get; set; }
		
		/// <summary>
		/// Specifies how to distribute traffic over a collection of Knative Revisions and Configurations to the Service's main URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="traffic")]
		public TrafficTarget[] Traffic { get; set; }
	}
	
	/// <summary>
	/// The current state of the Service. Output only.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ServiceStatus
	{
		
		/// <summary>
		/// Information for connecting over HTTP(s).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address")]
		public Addressable Address { get; set; }
		
		/// <summary>
		/// Conditions communicate information about ongoing/complete reconciliation processes that bring the `spec` inline with the observed state of the world. Service-specific conditions include: * `ConfigurationsReady`: `True` when the underlying Configuration is ready. * `RoutesReady`: `True` when the underlying Route is ready. * `Ready`: `True` when all underlying resources are ready.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="conditions")]
		public GoogleCloudRunV1Condition[] Conditions { get; set; }
		
		/// <summary>
		/// Name of the last revision that was created from this Service's Configuration. It might not be ready yet, for that use LatestReadyRevisionName.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="latestCreatedRevisionName")]
		public string LatestCreatedRevisionName { get; set; }
		
		/// <summary>
		/// Name of the latest Revision from this Service's Configuration that has had its `Ready` condition become `True`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="latestReadyRevisionName")]
		public string LatestReadyRevisionName { get; set; }
		
		/// <summary>
		/// Returns the generation last seen by the system. Clients polling for completed reconciliation should poll until observedGeneration = metadata.generation and the Ready condition's status is True or False.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="observedGeneration")]
		public System.Nullable<System.Int32> ObservedGeneration { get; set; }
		
		/// <summary>
		/// Holds the configured traffic distribution. These entries will always contain RevisionName references. When ConfigurationName appears in the spec, this will hold the LatestReadyRevisionName that we last observed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="traffic")]
		public TrafficTarget[] Traffic { get; set; }
		
		/// <summary>
		/// URL that will distribute traffic over the provided traffic targets. It generally has the form `https://{route-hash}-{project-hash}-{cluster-level-suffix}.a.run.app`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	/// <summary>
	/// ListTasksResponse is a list of Tasks resources.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTasksResponse
	{
		
		/// <summary>
		/// The API version for this call such as "run.googleapis.com/v1".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apiVersion")]
		public string ApiVersion { get; set; }
		
		/// <summary>
		/// List of Tasks.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Task_[] Items { get; set; }
		
		/// <summary>
		/// The kind of this resource, in this case "TasksList".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Metadata for synthetic resources like List. In Cloud Run, all List Resources Responses will have a ListMeta instead of ObjectMeta.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public ListMeta Metadata { get; set; }
		
		/// <summary>
		/// Locations that could not be reached.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unreachable")]
		public string[] Unreachable { get; set; }
	}
	
	/// <summary>
	/// Task represents a single run of a container to completion.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Task_
	{
		
		/// <summary>
		/// Optional. APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apiVersion")]
		public string ApiVersion { get; set; }
		
		/// <summary>
		/// Optional. Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// google.cloud.run.meta.v1.ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public ObjectMeta Metadata { get; set; }
		
		/// <summary>
		/// TaskSpec is a description of a task.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="spec")]
		public TaskSpec Spec { get; set; }
		
		/// <summary>
		/// TaskStatus represents the status of a task.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public TaskStatus Status { get; set; }
	}
	
	/// <summary>
	/// TaskStatus represents the status of a task.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TaskStatus
	{
		
		/// <summary>
		/// Optional. Represents time when the task was completed. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="completionTime")]
		public string CompletionTime { get; set; }
		
		/// <summary>
		/// Optional. Conditions communicate information about ongoing/complete reconciliation processes that bring the "spec" inline with the observed state of the world. Task-specific conditions include: * `Started`: `True` when the task has started to execute. * `Completed`: `True` when the task has succeeded. `False` when the task has failed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="conditions")]
		public GoogleCloudRunV1Condition[] Conditions { get; set; }
		
		/// <summary>
		/// Required. Index of the task, unique per execution, and beginning at 0.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="index")]
		public System.Nullable<System.Int32> Index { get; set; }
		
		/// <summary>
		/// Result of a task attempt.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastAttemptResult")]
		public TaskAttemptResult LastAttemptResult { get; set; }
		
		/// <summary>
		/// Optional. URI where logs for this task can be found in Cloud Console.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logUri")]
		public string LogUri { get; set; }
		
		/// <summary>
		/// Optional. The 'generation' of the task that was last processed by the controller.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="observedGeneration")]
		public System.Nullable<System.Int32> ObservedGeneration { get; set; }
		
		/// <summary>
		/// Optional. The number of times this task was retried. Instances are retried when they fail up to the maxRetries limit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="retried")]
		public System.Nullable<System.Int32> Retried { get; set; }
		
		/// <summary>
		/// Optional. Represents time when the task started to run. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public string StartTime { get; set; }
	}
	
	/// <summary>
	/// Result of a task attempt.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TaskAttemptResult
	{
		
		/// <summary>
		/// Optional. The exit code of this attempt. This may be unset if the container was unable to exit cleanly with a code due to some other failure. See status field for possible failure details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exitCode")]
		public System.Nullable<System.Int32> ExitCode { get; set; }
		
		/// <summary>
		/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public GoogleRpcStatus Status { get; set; }
	}
	
	/// <summary>
	/// RunJob Overrides that contains Execution fields to be overridden on the go.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Overrides
	{
		
		/// <summary>
		/// Per container override specification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="containerOverrides")]
		public ContainerOverride[] ContainerOverrides { get; set; }
		
		/// <summary>
		/// The desired number of tasks the execution should run. Will replace existing task_count value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taskCount")]
		public System.Nullable<System.Int32> TaskCount { get; set; }
		
		/// <summary>
		/// Duration in seconds the task may be active before the system will actively try to mark it failed and kill associated containers. Will replace existing timeout_seconds value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeoutSeconds")]
		public System.Nullable<System.Int32> TimeoutSeconds { get; set; }
	}
	
	/// <summary>
	/// An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members`, or principals, to a single `role`. Principals can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** ``` { "bindings": [ { "role": "roles/resourcemanager.organizationAdmin", "members": [ "user:mike@example.com", "group:admins@example.com", "domain:google.com", "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, { "role": "roles/resourcemanager.organizationViewer", "members": [ "user:eve@example.com" ], "condition": { "title": "expirable access", "description": "Does not grant access after Sep 2020", "expression": "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag": "BwWWja0YfJA=", "version": 3 } ``` **YAML example:** ``` bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') etag: BwWWja0YfJA= version: 3 ``` For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Policy
	{
		
		/// <summary>
		/// Specifies cloud audit logging configuration for this policy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="auditConfigs")]
		public AuditConfig[] AuditConfigs { get; set; }
		
		/// <summary>
		/// Associates a list of `members`, or principals, with a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one principal. The `bindings` in a `Policy` can refer to up to 1,500 principals; up to 250 of these principals can be Google groups. Each occurrence of a principal counts towards these limits. For example, if the `bindings` grant 50 different roles to `user:alice@example.com`, and not to any other principal, then you can add another 1,450 principals to the `bindings` in the `Policy`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bindings")]
		public Binding[] Bindings { get; set; }
		
		/// <summary>
		/// `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<System.Int32> Version { get; set; }
	}
	
	/// <summary>
	/// Request message for creating a new execution of a job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RunJobRequest
	{
		
		/// <summary>
		/// RunJob Overrides that contains Execution fields to be overridden on the go.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="overrides")]
		public Overrides Overrides { get; set; }
	}
	
	/// <summary>
	/// Request message for `SetIamPolicy` method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SetIamPolicyRequest
	{
		
		/// <summary>
		/// An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members`, or principals, to a single `role`. Principals can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** ``` { "bindings": [ { "role": "roles/resourcemanager.organizationAdmin", "members": [ "user:mike@example.com", "group:admins@example.com", "domain:google.com", "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, { "role": "roles/resourcemanager.organizationViewer", "members": [ "user:eve@example.com" ], "condition": { "title": "expirable access", "description": "Does not grant access after Sep 2020", "expression": "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag": "BwWWja0YfJA=", "version": 3 } ``` **YAML example:** ``` bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') etag: BwWWja0YfJA= version: 3 ``` For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="policy")]
		public Policy Policy { get; set; }
		
		/// <summary>
		/// OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only the fields in the mask will be modified. If no mask is provided, the following default mask is used: `paths: "bindings, etag"`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateMask")]
		public string UpdateMask { get; set; }
	}
	
	/// <summary>
	/// Status is a return value for calls that don't return other objects.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Status
	{
		
		/// <summary>
		/// Suggested HTTP return code for this status, 0 if not set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		/// <summary>
		/// StatusDetails is a set of additional properties that MAY be set by the server to provide additional information about a response. The Reason field of a Status object defines what attributes will be set. Clients must ignore fields that do not match the defined type of each attribute, and should assume that any attribute may be empty, invalid, or under defined.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public StatusDetails Details { get; set; }
		
		/// <summary>
		/// A human-readable description of the status of this operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// Metadata for synthetic resources like List. In Cloud Run, all List Resources Responses will have a ListMeta instead of ObjectMeta.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public ListMeta Metadata { get; set; }
		
		/// <summary>
		/// A machine-readable description of why this operation is in the "Failure" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		/// <summary>
		/// Status of the operation. One of: "Success" or "Failure".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status1 { get; set; }
	}
	
	/// <summary>
	/// StatusDetails is a set of additional properties that MAY be set by the server to provide additional information about a response. The Reason field of a Status object defines what attributes will be set. Clients must ignore fields that do not match the defined type of each attribute, and should assume that any attribute may be empty, invalid, or under defined.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StatusDetails
	{
		
		/// <summary>
		/// The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="causes")]
		public StatusCause[] Causes { get; set; }
		
		/// <summary>
		/// The group attribute of the resource associated with the status StatusReason.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="group")]
		public string Group { get; set; }
		
		/// <summary>
		/// The kind attribute of the resource associated with the status StatusReason. On some operations may differ from the requested resource Kind.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// If specified, the time in seconds before the operation should be retried. Some errors may indicate the client must take an alternate action - for those errors this field may indicate how long to wait before taking the alternate action.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="retryAfterSeconds")]
		public System.Nullable<System.Int32> RetryAfterSeconds { get; set; }
		
		/// <summary>
		/// UID of the resource. (when there is a single resource which can be described).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uid")]
		public string Uid { get; set; }
	}
	
	/// <summary>
	/// StatusCause provides more information about an api.Status failure, including cases when multiple errors are encountered.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StatusCause
	{
		
		/// <summary>
		/// The field of the resource that has caused this error, as named by its JSON serialization. May include dot and postfix notation for nested attributes. Arrays are zero-indexed. Fields may appear more than once in an array of causes due to fields having multiple errors. Examples: "name" - the field "name" on the current resource "items[0].name" - the field "name" on the first array entry in "items"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="field")]
		public string Field { get; set; }
		
		/// <summary>
		/// A human-readable description of the cause of the error. This field may be presented as-is to a reader.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// A machine-readable description of the cause of the error. If this value is empty there is no information available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
	}
	
	/// <summary>
	/// Request message for `TestIamPermissions` method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TestIamPermissionsRequest
	{
		
		/// <summary>
		/// The set of permissions to check for the `resource`. Permissions with wildcards (such as `*` or `storage.*`) are not allowed. For more information see [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="permissions")]
		public string[] Permissions { get; set; }
	}
	
	/// <summary>
	/// Response message for `TestIamPermissions` method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TestIamPermissionsResponse
	{
		
		/// <summary>
		/// A subset of `TestPermissionsRequest.permissions` that the caller is allowed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="permissions")]
		public string[] Permissions { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Delete a domain mapping.
		/// Run_namespaces_domainmappings_delete apis/domains.cloudrun.com/v1/{name}
		/// </summary>
		/// <param name="name">Required. The name of the domain mapping to delete. For Cloud Run (fully managed), replace {namespace} with the project ID or number. It takes the form namespaces/{namespace}. For example: namespaces/PROJECT_ID</param>
		/// <param name="apiVersion">Cloud Run currently ignores this parameter.</param>
		/// <param name="dryRun">Indicates that the server should validate the request and populate default values without persisting the request. Supported values: `all`</param>
		/// <param name="kind">Cloud Run currently ignores this parameter.</param>
		/// <param name="propagationPolicy">Specifies the propagation policy of delete. Cloud Run currently ignores this setting, and deletes in the background. Please see kubernetes.io/docs/concepts/architecture/garbage-collection/ for more information.</param>
		/// <returns>Successful response</returns>
		public async Task<Status> Run_namespaces_domainmappings_deleteAsync(string name, string apiVersion, string dryRun, string kind, string propagationPolicy, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apis/domains.cloudrun.com/v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&apiVersion=" + (apiVersion==null? "" : System.Uri.EscapeDataString(apiVersion))+"&dryRun=" + (dryRun==null? "" : System.Uri.EscapeDataString(dryRun))+"&kind=" + (kind==null? "" : System.Uri.EscapeDataString(kind))+"&propagationPolicy=" + (propagationPolicy==null? "" : System.Uri.EscapeDataString(propagationPolicy));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Status>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get information about a domain mapping.
		/// Run_namespaces_domainmappings_get apis/domains.cloudrun.com/v1/{name}
		/// </summary>
		/// <param name="name">Required. The name of the domain mapping to retrieve. For Cloud Run (fully managed), replace {namespace} with the project ID or number. It takes the form namespaces/{namespace}. For example: namespaces/PROJECT_ID</param>
		/// <returns>Successful response</returns>
		public async Task<DomainMapping> Run_namespaces_domainmappings_getAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apis/domains.cloudrun.com/v1/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DomainMapping>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List authorized domains.
		/// Run_namespaces_authorizeddomains_list apis/domains.cloudrun.com/v1/{parent}/authorizeddomains
		/// </summary>
		/// <param name="parent">Name of the parent Project resource. Example: `projects/myproject`.</param>
		/// <param name="pageSize">Maximum results to return per page.</param>
		/// <param name="pageToken">Continuation token for fetching the next page of results.</param>
		/// <returns>Successful response</returns>
		public async Task<ListAuthorizedDomainsResponse> Run_namespaces_authorizeddomains_listAsync(string parent, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apis/domains.cloudrun.com/v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/authorizeddomains&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListAuthorizedDomainsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all domain mappings.
		/// Run_namespaces_domainmappings_list apis/domains.cloudrun.com/v1/{parent}/domainmappings
		/// </summary>
		/// <param name="parent">Required. The namespace from which the domain mappings should be listed. For Cloud Run (fully managed), replace {namespace} with the project ID or number. It takes the form namespaces/{namespace}. For example: namespaces/PROJECT_ID</param>
		/// <param name="_continue">Optional. Encoded string to continue paging.</param>
		/// <param name="fieldSelector">Allows to filter resources based on a specific value for a field name. Send this in a query string format. i.e. 'metadata.name%3Dlorem'. Not currently used by Cloud Run.</param>
		/// <param name="includeUninitialized">Not currently used by Cloud Run.</param>
		/// <param name="labelSelector">Allows to filter resources based on a label. Supported operations are =, !=, exists, in, and notIn.</param>
		/// <param name="limit">Optional. The maximum number of records that should be returned.</param>
		/// <param name="resourceVersion">The baseline resource version from which the list or watch operation should start. Not currently used by Cloud Run.</param>
		/// <param name="watch">Flag that indicates that the client expects to watch this resource as well. Not currently used by Cloud Run.</param>
		/// <returns>Successful response</returns>
		public async Task<ListDomainMappingsResponse> Run_namespaces_domainmappings_listAsync(string parent, string _continue, string fieldSelector, bool includeUninitialized, string labelSelector, int limit, string resourceVersion, bool watch, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apis/domains.cloudrun.com/v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/domainmappings&continue=" + (_continue==null? "" : System.Uri.EscapeDataString(_continue))+"&fieldSelector=" + (fieldSelector==null? "" : System.Uri.EscapeDataString(fieldSelector))+"&includeUninitialized="+includeUninitialized+"&labelSelector=" + (labelSelector==null? "" : System.Uri.EscapeDataString(labelSelector))+"&limit="+limit+"&resourceVersion=" + (resourceVersion==null? "" : System.Uri.EscapeDataString(resourceVersion))+"&watch="+watch;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListDomainMappingsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new domain mapping.
		/// Run_namespaces_domainmappings_create apis/domains.cloudrun.com/v1/{parent}/domainmappings
		/// </summary>
		/// <param name="parent">Required. The namespace in which the domain mapping should be created. For Cloud Run (fully managed), replace {namespace} with the project ID or number. It takes the form namespaces/{namespace}. For example: namespaces/PROJECT_ID</param>
		/// <param name="dryRun">Indicates that the server should validate the request and populate default values without persisting the request. Supported values: `all`</param>
		/// <returns>Successful response</returns>
		public async Task<DomainMapping> Run_namespaces_domainmappings_createAsync(string parent, string dryRun, DomainMapping requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apis/domains.cloudrun.com/v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/domainmappings&dryRun=" + (dryRun==null? "" : System.Uri.EscapeDataString(dryRun));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DomainMapping>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a job.
		/// Run_namespaces_jobs_delete apis/run.googleapis.com/v1/{name}
		/// </summary>
		/// <param name="name">Required. The name of the job to delete. Replace {namespace} with the project ID or number. It takes the form namespaces/{namespace}. For example: namespaces/PROJECT_ID</param>
		/// <param name="apiVersion">Optional. Cloud Run currently ignores this parameter.</param>
		/// <param name="kind">Optional. Cloud Run currently ignores this parameter.</param>
		/// <param name="propagationPolicy">Optional. Specifies the propagation policy of delete. Cloud Run currently ignores this setting, and deletes in the background. Please see kubernetes.io/docs/concepts/workloads/controllers/garbage-collection/ for more information.</param>
		/// <returns>Successful response</returns>
		public async Task<Status> Run_namespaces_jobs_deleteAsync(string name, string apiVersion, string kind, string propagationPolicy, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apis/run.googleapis.com/v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&apiVersion=" + (apiVersion==null? "" : System.Uri.EscapeDataString(apiVersion))+"&kind=" + (kind==null? "" : System.Uri.EscapeDataString(kind))+"&propagationPolicy=" + (propagationPolicy==null? "" : System.Uri.EscapeDataString(propagationPolicy));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Status>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get information about a task.
		/// Run_namespaces_tasks_get apis/run.googleapis.com/v1/{name}
		/// </summary>
		/// <param name="name">Required. The name of the task to retrieve. Replace {namespace} with the project ID or number. It takes the form namespaces/{namespace}. For example: namespaces/PROJECT_ID</param>
		/// <returns>Successful response</returns>
		public async Task<Task_> Run_namespaces_tasks_getAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apis/run.googleapis.com/v1/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Task_>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Replace a job. Only the spec and metadata labels and annotations are modifiable. After the Replace request, Cloud Run will work to make the 'status' match the requested 'spec'. May provide metadata.resourceVersion to enforce update from last read for optimistic concurrency control.
		/// Run_namespaces_jobs_replaceJob apis/run.googleapis.com/v1/{name}
		/// </summary>
		/// <param name="name">Required. The name of the job being replaced. Replace {namespace} with the project ID or number. It takes the form namespaces/{namespace}. For example: namespaces/PROJECT_ID</param>
		/// <returns>Successful response</returns>
		public async Task<Job> Run_namespaces_jobs_replaceJobAsync(string name, Job requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apis/run.googleapis.com/v1/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Job>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Cancel an execution.
		/// Run_namespaces_executions_cancel apis/run.googleapis.com/v1/{name}:cancel
		/// </summary>
		/// <param name="name">Required. The name of the execution to cancel. Replace {namespace} with the project ID or number. It takes the form namespaces/{namespace}. For example: namespaces/PROJECT_ID</param>
		/// <returns>Successful response</returns>
		public async Task<Execution> Run_namespaces_executions_cancelAsync(string name, CancelExecutionRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apis/run.googleapis.com/v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":cancel";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Execution>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Trigger creation of a new execution of this job.
		/// Run_namespaces_jobs_run apis/run.googleapis.com/v1/{name}:run
		/// </summary>
		/// <param name="name">Required. The name of the job to run. Replace {namespace} with the project ID or number. It takes the form namespaces/{namespace}. For example: namespaces/PROJECT_ID</param>
		/// <returns>Successful response</returns>
		public async Task<Execution> Run_namespaces_jobs_runAsync(string name, RunJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apis/run.googleapis.com/v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":run";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Execution>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List executions.
		/// Run_namespaces_executions_list apis/run.googleapis.com/v1/{parent}/executions
		/// </summary>
		/// <param name="parent">Required. The namespace from which the executions should be listed. Replace {namespace} with the project ID or number. It takes the form namespaces/{namespace}. For example: namespaces/PROJECT_ID</param>
		/// <param name="_continue">Optional. Optional encoded string to continue paging.</param>
		/// <param name="fieldSelector">Optional. Not supported by Cloud Run.</param>
		/// <param name="includeUninitialized">Optional. Not supported by Cloud Run.</param>
		/// <param name="labelSelector">Optional. Allows to filter resources based on a label. Supported operations are =, !=, exists, in, and notIn.</param>
		/// <param name="limit">Optional. The maximum number of the records that should be returned.</param>
		/// <param name="resourceVersion">Optional. Not supported by Cloud Run.</param>
		/// <param name="watch">Optional. Not supported by Cloud Run.</param>
		/// <returns>Successful response</returns>
		public async Task<ListExecutionsResponse> Run_namespaces_executions_listAsync(string parent, string _continue, string fieldSelector, bool includeUninitialized, string labelSelector, int limit, string resourceVersion, bool watch, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apis/run.googleapis.com/v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/executions&continue=" + (_continue==null? "" : System.Uri.EscapeDataString(_continue))+"&fieldSelector=" + (fieldSelector==null? "" : System.Uri.EscapeDataString(fieldSelector))+"&includeUninitialized="+includeUninitialized+"&labelSelector=" + (labelSelector==null? "" : System.Uri.EscapeDataString(labelSelector))+"&limit="+limit+"&resourceVersion=" + (resourceVersion==null? "" : System.Uri.EscapeDataString(resourceVersion))+"&watch="+watch;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListExecutionsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List jobs.
		/// Run_namespaces_jobs_list apis/run.googleapis.com/v1/{parent}/jobs
		/// </summary>
		/// <param name="parent">Required. The namespace from which the jobs should be listed. Replace {namespace} with the project ID or number. It takes the form namespaces/{namespace}. For example: namespaces/PROJECT_ID</param>
		/// <param name="_continue">Optional. Optional encoded string to continue paging.</param>
		/// <param name="fieldSelector">Optional. Not supported by Cloud Run.</param>
		/// <param name="includeUninitialized">Optional. Not supported by Cloud Run.</param>
		/// <param name="labelSelector">Optional. Allows to filter resources based on a label. Supported operations are =, !=, exists, in, and notIn.</param>
		/// <param name="limit">Optional. The maximum number of records that should be returned.</param>
		/// <param name="resourceVersion">Optional. Not supported by Cloud Run.</param>
		/// <param name="watch">Optional. Not supported by Cloud Run.</param>
		/// <returns>Successful response</returns>
		public async Task<ListJobsResponse> Run_namespaces_jobs_listAsync(string parent, string _continue, string fieldSelector, bool includeUninitialized, string labelSelector, int limit, string resourceVersion, bool watch, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apis/run.googleapis.com/v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/jobs&continue=" + (_continue==null? "" : System.Uri.EscapeDataString(_continue))+"&fieldSelector=" + (fieldSelector==null? "" : System.Uri.EscapeDataString(fieldSelector))+"&includeUninitialized="+includeUninitialized+"&labelSelector=" + (labelSelector==null? "" : System.Uri.EscapeDataString(labelSelector))+"&limit="+limit+"&resourceVersion=" + (resourceVersion==null? "" : System.Uri.EscapeDataString(resourceVersion))+"&watch="+watch;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListJobsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a job.
		/// Run_namespaces_jobs_create apis/run.googleapis.com/v1/{parent}/jobs
		/// </summary>
		/// <param name="parent">Required. The namespace in which the job should be created. Replace {namespace} with the project ID or number. It takes the form namespaces/{namespace}. For example: namespaces/PROJECT_ID</param>
		/// <returns>Successful response</returns>
		public async Task<Job> Run_namespaces_jobs_createAsync(string parent, Job requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apis/run.googleapis.com/v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/jobs";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Job>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List tasks.
		/// Run_namespaces_tasks_list apis/run.googleapis.com/v1/{parent}/tasks
		/// </summary>
		/// <param name="parent">Required. The namespace from which the tasks should be listed. Replace {namespace} with the project ID or number. It takes the form namespaces/{namespace}. For example: namespaces/PROJECT_ID</param>
		/// <param name="_continue">Optional. Optional encoded string to continue paging.</param>
		/// <param name="fieldSelector">Optional. Not supported by Cloud Run.</param>
		/// <param name="includeUninitialized">Optional. Not supported by Cloud Run.</param>
		/// <param name="labelSelector">Optional. Allows to filter resources based on a label. Supported operations are =, !=, exists, in, and notIn. For example, to list all tasks of execution "foo" in succeeded state: `run.googleapis.com/execution=foo,run.googleapis.com/runningState=Succeeded`. Supported states are: * `Pending`: Initial state of all tasks. The task has not yet started but eventually will. * `Running`: Container instances for this task are running or will be running shortly. * `Succeeded`: No more container instances to run for the task, and the last attempt succeeded. * `Failed`: No more container instances to run for the task, and the last attempt failed. This task has run out of retry attempts. * `Cancelled`: Task was running but got stopped because its parent execution has been aborted. * `Abandoned`: The task has not yet started and never will because its parent execution has been aborted.</param>
		/// <param name="limit">Optional. The maximum number of records that should be returned.</param>
		/// <param name="resourceVersion">Optional. Not supported by Cloud Run.</param>
		/// <param name="watch">Optional. Not supported by Cloud Run.</param>
		/// <returns>Successful response</returns>
		public async Task<ListTasksResponse> Run_namespaces_tasks_listAsync(string parent, string _continue, string fieldSelector, bool includeUninitialized, string labelSelector, int limit, string resourceVersion, bool watch, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apis/run.googleapis.com/v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/tasks&continue=" + (_continue==null? "" : System.Uri.EscapeDataString(_continue))+"&fieldSelector=" + (fieldSelector==null? "" : System.Uri.EscapeDataString(fieldSelector))+"&includeUninitialized="+includeUninitialized+"&labelSelector=" + (labelSelector==null? "" : System.Uri.EscapeDataString(labelSelector))+"&limit="+limit+"&resourceVersion=" + (resourceVersion==null? "" : System.Uri.EscapeDataString(resourceVersion))+"&watch="+watch;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListTasksResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the provided service. This will cause the Service to stop serving traffic and will delete all associated Revisions.
		/// Run_namespaces_services_delete apis/serving.knative.dev/v1/{name}
		/// </summary>
		/// <param name="name">Required. The fully qualified name of the service to delete. It can be any of the following forms: * `namespaces/{project_id_or_number}/services/{service_name}` (only when the `endpoint` is regional) * `projects/{project_id_or_number}/locations/{region}/services/{service_name}` * `projects/{project_id_or_number}/regions/{region}/services/{service_name}`</param>
		/// <param name="apiVersion">Not supported, and ignored by Cloud Run.</param>
		/// <param name="dryRun">Indicates that the server should validate the request and populate default values without persisting the request. Supported values: `all`</param>
		/// <param name="kind">Not supported, and ignored by Cloud Run.</param>
		/// <param name="propagationPolicy">Not supported, and ignored by Cloud Run.</param>
		/// <returns>Successful response</returns>
		public async Task<Status> Run_namespaces_services_deleteAsync(string name, string apiVersion, string dryRun, string kind, string propagationPolicy, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apis/serving.knative.dev/v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&apiVersion=" + (apiVersion==null? "" : System.Uri.EscapeDataString(apiVersion))+"&dryRun=" + (dryRun==null? "" : System.Uri.EscapeDataString(dryRun))+"&kind=" + (kind==null? "" : System.Uri.EscapeDataString(kind))+"&propagationPolicy=" + (propagationPolicy==null? "" : System.Uri.EscapeDataString(propagationPolicy));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Status>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about a service.
		/// Run_namespaces_services_get apis/serving.knative.dev/v1/{name}
		/// </summary>
		/// <param name="name">Required. The fully qualified name of the service to retrieve. It can be any of the following forms: * `namespaces/{project_id_or_number}/services/{service_name}` (only when the `endpoint` is regional) * `projects/{project_id_or_number}/locations/{region}/services/{service_name}` * `projects/{project_id_or_number}/regions/{region}/services/{service_name}`</param>
		/// <returns>Successful response</returns>
		public async Task<Service> Run_namespaces_services_getAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apis/serving.knative.dev/v1/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Service>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Replaces a service. Only the spec and metadata labels and annotations are modifiable. After the Update request, Cloud Run will work to make the 'status' match the requested 'spec'. May provide metadata.resourceVersion to enforce update from last read for optimistic concurrency control.
		/// Run_namespaces_services_replaceService apis/serving.knative.dev/v1/{name}
		/// </summary>
		/// <param name="name">Required. The fully qualified name of the service to replace. It can be any of the following forms: * `namespaces/{project_id_or_number}/services/{service_name}` (only when the `endpoint` is regional) * `projects/{project_id_or_number}/locations/{region}/services/{service_name}` * `projects/{project_id_or_number}/regions/{region}/services/{service_name}`</param>
		/// <param name="dryRun">Indicates that the server should validate the request and populate default values without persisting the request. Supported values: `all`</param>
		/// <returns>Successful response</returns>
		public async Task<Service> Run_namespaces_services_replaceServiceAsync(string name, string dryRun, Service requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apis/serving.knative.dev/v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&dryRun=" + (dryRun==null? "" : System.Uri.EscapeDataString(dryRun));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Service>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List configurations.
		/// Run_namespaces_configurations_list apis/serving.knative.dev/v1/{parent}/configurations
		/// </summary>
		/// <param name="parent">The namespace from which the configurations should be listed. For Cloud Run, replace {namespace_id} with the project ID or number.</param>
		/// <param name="_continue">Optional. Encoded string to continue paging.</param>
		/// <param name="fieldSelector">Not supported by Cloud Run.</param>
		/// <param name="includeUninitialized">Not supported by Cloud Run.</param>
		/// <param name="labelSelector">Allows to filter resources based on a label. Supported operations are =, !=, exists, in, and notIn.</param>
		/// <param name="limit">Optional. The maximum number of the records that should be returned.</param>
		/// <param name="resourceVersion">Not supported by Cloud Run.</param>
		/// <param name="watch">Not supported by Cloud Run.</param>
		/// <returns>Successful response</returns>
		public async Task<ListConfigurationsResponse> Run_namespaces_configurations_listAsync(string parent, string _continue, string fieldSelector, bool includeUninitialized, string labelSelector, int limit, string resourceVersion, bool watch, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apis/serving.knative.dev/v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/configurations&continue=" + (_continue==null? "" : System.Uri.EscapeDataString(_continue))+"&fieldSelector=" + (fieldSelector==null? "" : System.Uri.EscapeDataString(fieldSelector))+"&includeUninitialized="+includeUninitialized+"&labelSelector=" + (labelSelector==null? "" : System.Uri.EscapeDataString(labelSelector))+"&limit="+limit+"&resourceVersion=" + (resourceVersion==null? "" : System.Uri.EscapeDataString(resourceVersion))+"&watch="+watch;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListConfigurationsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List revisions.
		/// Run_namespaces_revisions_list apis/serving.knative.dev/v1/{parent}/revisions
		/// </summary>
		/// <param name="parent">The namespace from which the revisions should be listed. For Cloud Run (fully managed), replace {namespace} with the project ID or number. It takes the form namespaces/{namespace}. For example: namespaces/PROJECT_ID</param>
		/// <param name="_continue">Optional. Encoded string to continue paging.</param>
		/// <param name="fieldSelector">Allows to filter resources based on a specific value for a field name. Send this in a query string format. i.e. 'metadata.name%3Dlorem'. Not currently used by Cloud Run.</param>
		/// <param name="includeUninitialized">Not currently used by Cloud Run.</param>
		/// <param name="labelSelector">Allows to filter resources based on a label. Supported operations are =, !=, exists, in, and notIn.</param>
		/// <param name="limit">Optional. The maximum number of records that should be returned.</param>
		/// <param name="resourceVersion">The baseline resource version from which the list or watch operation should start. Not currently used by Cloud Run.</param>
		/// <param name="watch">Flag that indicates that the client expects to watch this resource as well. Not currently used by Cloud Run.</param>
		/// <returns>Successful response</returns>
		public async Task<ListRevisionsResponse> Run_namespaces_revisions_listAsync(string parent, string _continue, string fieldSelector, bool includeUninitialized, string labelSelector, int limit, string resourceVersion, bool watch, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apis/serving.knative.dev/v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/revisions&continue=" + (_continue==null? "" : System.Uri.EscapeDataString(_continue))+"&fieldSelector=" + (fieldSelector==null? "" : System.Uri.EscapeDataString(fieldSelector))+"&includeUninitialized="+includeUninitialized+"&labelSelector=" + (labelSelector==null? "" : System.Uri.EscapeDataString(labelSelector))+"&limit="+limit+"&resourceVersion=" + (resourceVersion==null? "" : System.Uri.EscapeDataString(resourceVersion))+"&watch="+watch;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListRevisionsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List routes.
		/// Run_namespaces_routes_list apis/serving.knative.dev/v1/{parent}/routes
		/// </summary>
		/// <param name="parent">The namespace from which the routes should be listed. For Cloud Run (fully managed), replace {namespace} with the project ID or number. It takes the form namespaces/{namespace}. For example: namespaces/PROJECT_ID</param>
		/// <param name="_continue">Optional. Encoded string to continue paging.</param>
		/// <param name="fieldSelector">Allows to filter resources based on a specific value for a field name. Send this in a query string format. i.e. 'metadata.name%3Dlorem'. Not currently used by Cloud Run.</param>
		/// <param name="includeUninitialized">Not currently used by Cloud Run.</param>
		/// <param name="labelSelector">Allows to filter resources based on a label. Supported operations are =, !=, exists, in, and notIn.</param>
		/// <param name="limit">Optional. The maximum number of records that should be returned.</param>
		/// <param name="resourceVersion">The baseline resource version from which the list or watch operation should start. Not currently used by Cloud Run.</param>
		/// <param name="watch">Flag that indicates that the client expects to watch this resource as well. Not currently used by Cloud Run.</param>
		/// <returns>Successful response</returns>
		public async Task<ListRoutesResponse> Run_namespaces_routes_listAsync(string parent, string _continue, string fieldSelector, bool includeUninitialized, string labelSelector, int limit, string resourceVersion, bool watch, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apis/serving.knative.dev/v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/routes&continue=" + (_continue==null? "" : System.Uri.EscapeDataString(_continue))+"&fieldSelector=" + (fieldSelector==null? "" : System.Uri.EscapeDataString(fieldSelector))+"&includeUninitialized="+includeUninitialized+"&labelSelector=" + (labelSelector==null? "" : System.Uri.EscapeDataString(labelSelector))+"&limit="+limit+"&resourceVersion=" + (resourceVersion==null? "" : System.Uri.EscapeDataString(resourceVersion))+"&watch="+watch;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListRoutesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists services for the given project and region.
		/// Run_namespaces_services_list apis/serving.knative.dev/v1/{parent}/services
		/// </summary>
		/// <param name="parent">Required. The parent from where the resources should be listed. In Cloud Run, it may be one of the following: * `{project_id_or_number}` * `namespaces/{project_id_or_number}` * `namespaces/{project_id_or_number}/services` * `projects/{project_id_or_number}/locations/{region}` * `projects/{project_id_or_number}/regions/{region}`</param>
		/// <param name="_continue">Encoded string to continue paging.</param>
		/// <param name="fieldSelector">Not supported, and ignored by Cloud Run.</param>
		/// <param name="includeUninitialized">Not supported, and ignored by Cloud Run.</param>
		/// <param name="labelSelector">Allows to filter resources based on a label. Supported operations are =, !=, exists, in, and notIn.</param>
		/// <param name="limit">The maximum number of records that should be returned.</param>
		/// <param name="resourceVersion">Not supported, and ignored by Cloud Run.</param>
		/// <param name="watch">Not supported, and ignored by Cloud Run.</param>
		/// <returns>Successful response</returns>
		public async Task<ListServicesResponse> Run_namespaces_services_listAsync(string parent, string _continue, string fieldSelector, bool includeUninitialized, string labelSelector, int limit, string resourceVersion, bool watch, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apis/serving.knative.dev/v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/services&continue=" + (_continue==null? "" : System.Uri.EscapeDataString(_continue))+"&fieldSelector=" + (fieldSelector==null? "" : System.Uri.EscapeDataString(fieldSelector))+"&includeUninitialized="+includeUninitialized+"&labelSelector=" + (labelSelector==null? "" : System.Uri.EscapeDataString(labelSelector))+"&limit="+limit+"&resourceVersion=" + (resourceVersion==null? "" : System.Uri.EscapeDataString(resourceVersion))+"&watch="+watch;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListServicesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new Service. Service creation will trigger a new deployment. Use GetService, and check service.status to determine if the Service is ready.
		/// Run_namespaces_services_create apis/serving.knative.dev/v1/{parent}/services
		/// </summary>
		/// <param name="parent">Required. The resource's parent. In Cloud Run, it may be one of the following: * `{project_id_or_number}` * `namespaces/{project_id_or_number}` * `namespaces/{project_id_or_number}/services` * `projects/{project_id_or_number}/locations/{region}` * `projects/{project_id_or_number}/regions/{region}`</param>
		/// <param name="dryRun">Indicates that the server should validate the request and populate default values without persisting the request. Supported values: `all`</param>
		/// <returns>Successful response</returns>
		public async Task<Service> Run_namespaces_services_createAsync(string parent, string dryRun, Service requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apis/serving.knative.dev/v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/services&dryRun=" + (dryRun==null? "" : System.Uri.EscapeDataString(dryRun));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Service>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the provided service. This will cause the Service to stop serving traffic and will delete all associated Revisions.
		/// Run_projects_locations_services_delete v1/{name}
		/// </summary>
		/// <param name="name">Required. The fully qualified name of the service to delete. It can be any of the following forms: * `namespaces/{project_id_or_number}/services/{service_name}` (only when the `endpoint` is regional) * `projects/{project_id_or_number}/locations/{region}/services/{service_name}` * `projects/{project_id_or_number}/regions/{region}/services/{service_name}`</param>
		/// <param name="apiVersion">Not supported, and ignored by Cloud Run.</param>
		/// <param name="dryRun">Indicates that the server should validate the request and populate default values without persisting the request. Supported values: `all`</param>
		/// <param name="kind">Not supported, and ignored by Cloud Run.</param>
		/// <param name="propagationPolicy">Not supported, and ignored by Cloud Run.</param>
		/// <returns>Successful response</returns>
		public async Task<Status> Run_projects_locations_services_deleteAsync(string name, string apiVersion, string dryRun, string kind, string propagationPolicy, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&apiVersion=" + (apiVersion==null? "" : System.Uri.EscapeDataString(apiVersion))+"&dryRun=" + (dryRun==null? "" : System.Uri.EscapeDataString(dryRun))+"&kind=" + (kind==null? "" : System.Uri.EscapeDataString(kind))+"&propagationPolicy=" + (propagationPolicy==null? "" : System.Uri.EscapeDataString(propagationPolicy));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Status>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about a service.
		/// Run_projects_locations_services_get v1/{name}
		/// </summary>
		/// <param name="name">Required. The fully qualified name of the service to retrieve. It can be any of the following forms: * `namespaces/{project_id_or_number}/services/{service_name}` (only when the `endpoint` is regional) * `projects/{project_id_or_number}/locations/{region}/services/{service_name}` * `projects/{project_id_or_number}/regions/{region}/services/{service_name}`</param>
		/// <returns>Successful response</returns>
		public async Task<Service> Run_projects_locations_services_getAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Service>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Replaces a service. Only the spec and metadata labels and annotations are modifiable. After the Update request, Cloud Run will work to make the 'status' match the requested 'spec'. May provide metadata.resourceVersion to enforce update from last read for optimistic concurrency control.
		/// Run_projects_locations_services_replaceService v1/{name}
		/// </summary>
		/// <param name="name">Required. The fully qualified name of the service to replace. It can be any of the following forms: * `namespaces/{project_id_or_number}/services/{service_name}` (only when the `endpoint` is regional) * `projects/{project_id_or_number}/locations/{region}/services/{service_name}` * `projects/{project_id_or_number}/regions/{region}/services/{service_name}`</param>
		/// <param name="dryRun">Indicates that the server should validate the request and populate default values without persisting the request. Supported values: `all`</param>
		/// <returns>Successful response</returns>
		public async Task<Service> Run_projects_locations_services_replaceServiceAsync(string name, string dryRun, Service requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&dryRun=" + (dryRun==null? "" : System.Uri.EscapeDataString(dryRun));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Service>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists information about the supported locations for this service.
		/// Run_projects_locations_list v1/{name}/locations
		/// </summary>
		/// <param name="name">The resource that owns the locations collection, if applicable.</param>
		/// <param name="filter">A filter to narrow down results to a preferred subset. The filtering language accepts strings like `"displayName=tokyo"`, and is documented in more detail in [AIP-160](https://google.aip.dev/160).</param>
		/// <param name="pageSize">The maximum number of results to return. If not set, the service selects a default.</param>
		/// <param name="pageToken">A page token received from the `next_page_token` field in the response. Send that page token to receive the subsequent page.</param>
		/// <returns>Successful response</returns>
		public async Task<ListLocationsResponse> Run_projects_locations_listAsync(string name, string filter, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/locations&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListLocationsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
		/// Run_projects_locations_operations_list v1/{name}/operations
		/// </summary>
		/// <param name="name">Required. To query for all of the operations for a project.</param>
		/// <param name="filter">Optional. A filter for matching the completed or in-progress operations. The supported formats of *filter* are: To query for only completed operations: done:true To query for only ongoing operations: done:false Must be empty to query for all of the latest operations for the given parent project.</param>
		/// <param name="pageSize">The maximum number of records that should be returned. Requested page size cannot exceed 100. If not set or set to less than or equal to 0, the default page size is 100. .</param>
		/// <param name="pageToken">Token identifying which result to start with, which is returned by a previous list call.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleLongrunningListOperationsResponse> Run_projects_locations_operations_listAsync(string name, string filter, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/operations&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GoogleLongrunningListOperationsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Waits until the specified long-running operation is done or reaches at most a specified timeout, returning the latest state. If the operation is already done, the latest state is immediately returned. If the timeout specified is greater than the default HTTP/RPC timeout, the HTTP/RPC timeout is used. If the server does not support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Note that this method is on a best-effort basis. It may return the latest state before the specified timeout (including immediately), meaning even an immediate response is no guarantee that the operation is done.
		/// Run_projects_locations_operations_wait v1/{name}:wait
		/// </summary>
		/// <param name="name">The name of the operation resource to wait on.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleLongrunningOperation> Run_projects_locations_operations_waitAsync(string name, GoogleLongrunningWaitOperationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":wait";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GoogleLongrunningOperation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List authorized domains.
		/// Run_projects_locations_authorizeddomains_list v1/{parent}/authorizeddomains
		/// </summary>
		/// <param name="parent">Name of the parent Project resource. Example: `projects/myproject`.</param>
		/// <param name="pageSize">Maximum results to return per page.</param>
		/// <param name="pageToken">Continuation token for fetching the next page of results.</param>
		/// <returns>Successful response</returns>
		public async Task<ListAuthorizedDomainsResponse> Run_projects_locations_authorizeddomains_listAsync(string parent, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/authorizeddomains&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListAuthorizedDomainsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List configurations.
		/// Run_projects_locations_configurations_list v1/{parent}/configurations
		/// </summary>
		/// <param name="parent">The namespace from which the configurations should be listed. For Cloud Run, replace {namespace_id} with the project ID or number.</param>
		/// <param name="_continue">Optional. Encoded string to continue paging.</param>
		/// <param name="fieldSelector">Not supported by Cloud Run.</param>
		/// <param name="includeUninitialized">Not supported by Cloud Run.</param>
		/// <param name="labelSelector">Allows to filter resources based on a label. Supported operations are =, !=, exists, in, and notIn.</param>
		/// <param name="limit">Optional. The maximum number of the records that should be returned.</param>
		/// <param name="resourceVersion">Not supported by Cloud Run.</param>
		/// <param name="watch">Not supported by Cloud Run.</param>
		/// <returns>Successful response</returns>
		public async Task<ListConfigurationsResponse> Run_projects_locations_configurations_listAsync(string parent, string _continue, string fieldSelector, bool includeUninitialized, string labelSelector, int limit, string resourceVersion, bool watch, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/configurations&continue=" + (_continue==null? "" : System.Uri.EscapeDataString(_continue))+"&fieldSelector=" + (fieldSelector==null? "" : System.Uri.EscapeDataString(fieldSelector))+"&includeUninitialized="+includeUninitialized+"&labelSelector=" + (labelSelector==null? "" : System.Uri.EscapeDataString(labelSelector))+"&limit="+limit+"&resourceVersion=" + (resourceVersion==null? "" : System.Uri.EscapeDataString(resourceVersion))+"&watch="+watch;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListConfigurationsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all domain mappings.
		/// Run_projects_locations_domainmappings_list v1/{parent}/domainmappings
		/// </summary>
		/// <param name="parent">Required. The namespace from which the domain mappings should be listed. For Cloud Run (fully managed), replace {namespace} with the project ID or number. It takes the form namespaces/{namespace}. For example: namespaces/PROJECT_ID</param>
		/// <param name="_continue">Optional. Encoded string to continue paging.</param>
		/// <param name="fieldSelector">Allows to filter resources based on a specific value for a field name. Send this in a query string format. i.e. 'metadata.name%3Dlorem'. Not currently used by Cloud Run.</param>
		/// <param name="includeUninitialized">Not currently used by Cloud Run.</param>
		/// <param name="labelSelector">Allows to filter resources based on a label. Supported operations are =, !=, exists, in, and notIn.</param>
		/// <param name="limit">Optional. The maximum number of records that should be returned.</param>
		/// <param name="resourceVersion">The baseline resource version from which the list or watch operation should start. Not currently used by Cloud Run.</param>
		/// <param name="watch">Flag that indicates that the client expects to watch this resource as well. Not currently used by Cloud Run.</param>
		/// <returns>Successful response</returns>
		public async Task<ListDomainMappingsResponse> Run_projects_locations_domainmappings_listAsync(string parent, string _continue, string fieldSelector, bool includeUninitialized, string labelSelector, int limit, string resourceVersion, bool watch, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/domainmappings&continue=" + (_continue==null? "" : System.Uri.EscapeDataString(_continue))+"&fieldSelector=" + (fieldSelector==null? "" : System.Uri.EscapeDataString(fieldSelector))+"&includeUninitialized="+includeUninitialized+"&labelSelector=" + (labelSelector==null? "" : System.Uri.EscapeDataString(labelSelector))+"&limit="+limit+"&resourceVersion=" + (resourceVersion==null? "" : System.Uri.EscapeDataString(resourceVersion))+"&watch="+watch;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListDomainMappingsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new domain mapping.
		/// Run_projects_locations_domainmappings_create v1/{parent}/domainmappings
		/// </summary>
		/// <param name="parent">Required. The namespace in which the domain mapping should be created. For Cloud Run (fully managed), replace {namespace} with the project ID or number. It takes the form namespaces/{namespace}. For example: namespaces/PROJECT_ID</param>
		/// <param name="dryRun">Indicates that the server should validate the request and populate default values without persisting the request. Supported values: `all`</param>
		/// <returns>Successful response</returns>
		public async Task<DomainMapping> Run_projects_locations_domainmappings_createAsync(string parent, string dryRun, DomainMapping requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/domainmappings&dryRun=" + (dryRun==null? "" : System.Uri.EscapeDataString(dryRun));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DomainMapping>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List revisions.
		/// Run_projects_locations_revisions_list v1/{parent}/revisions
		/// </summary>
		/// <param name="parent">The namespace from which the revisions should be listed. For Cloud Run (fully managed), replace {namespace} with the project ID or number. It takes the form namespaces/{namespace}. For example: namespaces/PROJECT_ID</param>
		/// <param name="_continue">Optional. Encoded string to continue paging.</param>
		/// <param name="fieldSelector">Allows to filter resources based on a specific value for a field name. Send this in a query string format. i.e. 'metadata.name%3Dlorem'. Not currently used by Cloud Run.</param>
		/// <param name="includeUninitialized">Not currently used by Cloud Run.</param>
		/// <param name="labelSelector">Allows to filter resources based on a label. Supported operations are =, !=, exists, in, and notIn.</param>
		/// <param name="limit">Optional. The maximum number of records that should be returned.</param>
		/// <param name="resourceVersion">The baseline resource version from which the list or watch operation should start. Not currently used by Cloud Run.</param>
		/// <param name="watch">Flag that indicates that the client expects to watch this resource as well. Not currently used by Cloud Run.</param>
		/// <returns>Successful response</returns>
		public async Task<ListRevisionsResponse> Run_projects_locations_revisions_listAsync(string parent, string _continue, string fieldSelector, bool includeUninitialized, string labelSelector, int limit, string resourceVersion, bool watch, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/revisions&continue=" + (_continue==null? "" : System.Uri.EscapeDataString(_continue))+"&fieldSelector=" + (fieldSelector==null? "" : System.Uri.EscapeDataString(fieldSelector))+"&includeUninitialized="+includeUninitialized+"&labelSelector=" + (labelSelector==null? "" : System.Uri.EscapeDataString(labelSelector))+"&limit="+limit+"&resourceVersion=" + (resourceVersion==null? "" : System.Uri.EscapeDataString(resourceVersion))+"&watch="+watch;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListRevisionsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List routes.
		/// Run_projects_locations_routes_list v1/{parent}/routes
		/// </summary>
		/// <param name="parent">The namespace from which the routes should be listed. For Cloud Run (fully managed), replace {namespace} with the project ID or number. It takes the form namespaces/{namespace}. For example: namespaces/PROJECT_ID</param>
		/// <param name="_continue">Optional. Encoded string to continue paging.</param>
		/// <param name="fieldSelector">Allows to filter resources based on a specific value for a field name. Send this in a query string format. i.e. 'metadata.name%3Dlorem'. Not currently used by Cloud Run.</param>
		/// <param name="includeUninitialized">Not currently used by Cloud Run.</param>
		/// <param name="labelSelector">Allows to filter resources based on a label. Supported operations are =, !=, exists, in, and notIn.</param>
		/// <param name="limit">Optional. The maximum number of records that should be returned.</param>
		/// <param name="resourceVersion">The baseline resource version from which the list or watch operation should start. Not currently used by Cloud Run.</param>
		/// <param name="watch">Flag that indicates that the client expects to watch this resource as well. Not currently used by Cloud Run.</param>
		/// <returns>Successful response</returns>
		public async Task<ListRoutesResponse> Run_projects_locations_routes_listAsync(string parent, string _continue, string fieldSelector, bool includeUninitialized, string labelSelector, int limit, string resourceVersion, bool watch, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/routes&continue=" + (_continue==null? "" : System.Uri.EscapeDataString(_continue))+"&fieldSelector=" + (fieldSelector==null? "" : System.Uri.EscapeDataString(fieldSelector))+"&includeUninitialized="+includeUninitialized+"&labelSelector=" + (labelSelector==null? "" : System.Uri.EscapeDataString(labelSelector))+"&limit="+limit+"&resourceVersion=" + (resourceVersion==null? "" : System.Uri.EscapeDataString(resourceVersion))+"&watch="+watch;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListRoutesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists services for the given project and region.
		/// Run_projects_locations_services_list v1/{parent}/services
		/// </summary>
		/// <param name="parent">Required. The parent from where the resources should be listed. In Cloud Run, it may be one of the following: * `{project_id_or_number}` * `namespaces/{project_id_or_number}` * `namespaces/{project_id_or_number}/services` * `projects/{project_id_or_number}/locations/{region}` * `projects/{project_id_or_number}/regions/{region}`</param>
		/// <param name="_continue">Encoded string to continue paging.</param>
		/// <param name="fieldSelector">Not supported, and ignored by Cloud Run.</param>
		/// <param name="includeUninitialized">Not supported, and ignored by Cloud Run.</param>
		/// <param name="labelSelector">Allows to filter resources based on a label. Supported operations are =, !=, exists, in, and notIn.</param>
		/// <param name="limit">The maximum number of records that should be returned.</param>
		/// <param name="resourceVersion">Not supported, and ignored by Cloud Run.</param>
		/// <param name="watch">Not supported, and ignored by Cloud Run.</param>
		/// <returns>Successful response</returns>
		public async Task<ListServicesResponse> Run_projects_locations_services_listAsync(string parent, string _continue, string fieldSelector, bool includeUninitialized, string labelSelector, int limit, string resourceVersion, bool watch, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/services&continue=" + (_continue==null? "" : System.Uri.EscapeDataString(_continue))+"&fieldSelector=" + (fieldSelector==null? "" : System.Uri.EscapeDataString(fieldSelector))+"&includeUninitialized="+includeUninitialized+"&labelSelector=" + (labelSelector==null? "" : System.Uri.EscapeDataString(labelSelector))+"&limit="+limit+"&resourceVersion=" + (resourceVersion==null? "" : System.Uri.EscapeDataString(resourceVersion))+"&watch="+watch;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListServicesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new Service. Service creation will trigger a new deployment. Use GetService, and check service.status to determine if the Service is ready.
		/// Run_projects_locations_services_create v1/{parent}/services
		/// </summary>
		/// <param name="parent">Required. The resource's parent. In Cloud Run, it may be one of the following: * `{project_id_or_number}` * `namespaces/{project_id_or_number}` * `namespaces/{project_id_or_number}/services` * `projects/{project_id_or_number}/locations/{region}` * `projects/{project_id_or_number}/regions/{region}`</param>
		/// <param name="dryRun">Indicates that the server should validate the request and populate default values without persisting the request. Supported values: `all`</param>
		/// <returns>Successful response</returns>
		public async Task<Service> Run_projects_locations_services_createAsync(string parent, string dryRun, Service requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/services&dryRun=" + (dryRun==null? "" : System.Uri.EscapeDataString(dryRun));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Service>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the IAM Access Control policy currently in effect for the given Cloud Run service. This result does not include any inherited policies.
		/// Run_projects_locations_services_getIamPolicy v1/{resource}:getIamPolicy
		/// </summary>
		/// <param name="resource">REQUIRED: The resource for which the policy is being requested. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field.</param>
		/// <param name="options_requestedPolicyVersion">Optional. The maximum policy version that will be used to format the policy. Valid values are 0, 1, and 3. Requests specifying an invalid value will be rejected. Requests for policies with any conditional role bindings must specify version 3. Policies with no conditional role bindings may specify any valid value or leave the field unset. The policy in the response might use the policy version that you specified, or it might use a lower policy version. For example, if you specify version 3, but the policy has no conditional role bindings, the response uses version 1. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).</param>
		/// <returns>Successful response</returns>
		public async Task<Policy> Run_projects_locations_services_getIamPolicyAsync(string resource, int options_requestedPolicyVersion, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (resource==null? "" : System.Uri.EscapeDataString(resource))+":getIamPolicy&options.requestedPolicyVersion="+options_requestedPolicyVersion;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Policy>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Sets the IAM Access control policy for the specified Service. Overwrites any existing policy.
		/// Run_projects_locations_services_setIamPolicy v1/{resource}:setIamPolicy
		/// </summary>
		/// <param name="resource">REQUIRED: The resource for which the policy is being specified. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field.</param>
		/// <returns>Successful response</returns>
		public async Task<Policy> Run_projects_locations_services_setIamPolicyAsync(string resource, SetIamPolicyRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (resource==null? "" : System.Uri.EscapeDataString(resource))+":setIamPolicy";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Policy>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns permissions that a caller has on the specified Project. There are no permissions required for making this API call.
		/// Run_projects_locations_services_testIamPermissions v1/{resource}:testIamPermissions
		/// </summary>
		/// <param name="resource">REQUIRED: The resource for which the policy detail is being requested. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field.</param>
		/// <returns>Successful response</returns>
		public async Task<TestIamPermissionsResponse> Run_projects_locations_services_testIamPermissionsAsync(string resource, TestIamPermissionsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (resource==null? "" : System.Uri.EscapeDataString(resource))+":testIamPermissions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TestIamPermissionsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
