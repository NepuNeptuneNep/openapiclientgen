//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Contains metadata about the user who performed an action, such as creating a release or finalizing a version.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ActingUser
	{
		
		/// <summary>
		/// The email address of the user when the user performed the action.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// A profile image URL for the user. May not be present if the user has changed their email address or deleted their account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageUrl")]
		public string ImageUrl { get; set; }
	}
	
	/// <summary>
	/// Represents a DNS certificate challenge.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CertDnsChallenge
	{
		
		/// <summary>
		/// The domain name upon which the DNS challenge must be satisfied.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="domainName")]
		public string DomainName { get; set; }
		
		/// <summary>
		/// The value that must be present as a TXT record on the domain name to satisfy the challenge.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="token")]
		public string Token { get; set; }
	}
	
	/// <summary>
	/// Represents an HTTP certificate challenge.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CertHttpChallenge
	{
		
		/// <summary>
		/// The URL path on which to serve the specified token to satisfy the certificate challenge.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="path")]
		public string Path { get; set; }
		
		/// <summary>
		/// The token to serve at the specified URL path to satisfy the certificate challenge.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="token")]
		public string Token { get; set; }
	}
	
	/// <summary>
	/// A set of ACME challenges you can use to allow Hosting to create an SSL certificate for your domain name before directing traffic to Hosting servers. Use either the DNS or HTTP challenge; it's not necessary to provide both.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CertVerification
	{
		
		/// <summary>
		/// A set of DNS record updates that you should make to allow Hosting to serve secure content in response to requests against your domain name. These updates present the current state of your domain name's DNS records when Hosting last queried them, and the desired set of records that Hosting needs to see before your custom domain can be fully active.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dns")]
		public DnsUpdates Dns { get; set; }
		
		/// <summary>
		/// A file you can add to your existing, non-Hosting hosting service that confirms your intent to allow Hosting's Certificate Authorities to create an SSL certificate for your domain.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="http")]
		public HttpUpdate Http { get; set; }
	}
	
	/// <summary>
	/// A set of DNS record updates that you should make to allow Hosting to serve secure content in response to requests against your domain name. These updates present the current state of your domain name's DNS records when Hosting last queried them, and the desired set of records that Hosting needs to see before your custom domain can be fully active.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DnsUpdates
	{
		
		/// <summary>
		/// The last time Hosting checked your custom domain's DNS records.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="checkTime")]
		public string CheckTime { get; set; }
		
		/// <summary>
		/// The set of DNS records Hosting needs to serve secure content on the domain.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="desired")]
		public DnsRecordSet[] Desired { get; set; }
		
		/// <summary>
		/// The set of DNS records Hosting discovered when inspecting a domain.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="discovered")]
		public DnsRecordSet[] Discovered { get; set; }
	}
	
	/// <summary>
	/// A set of DNS records relevant to the setup and maintenance of a custom domain in Firebase Hosting.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DnsRecordSet
	{
		
		/// <summary>
		/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="checkError")]
		public Status CheckError { get; set; }
		
		/// <summary>
		/// Output only. The domain name the record set pertains to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="domainName")]
		public string DomainName { get; set; }
		
		/// <summary>
		/// Output only. Records on the domain.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="records")]
		public DnsRecord[] Records { get; set; }
	}
	
	/// <summary>
	/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Status
	{
		
		/// <summary>
		/// The status code, which should be an enum value of google.rpc.Code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		/// <summary>
		/// A list of messages that carry the error details. There is a common set of message types for APIs to use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string[] Details { get; set; }
		
		/// <summary>
		/// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// DNS records are resource records that define how systems and services should behave when handling requests for a domain name. For example, when you add `A` records to your domain name's DNS records, you're informing other systems (such as your users' web browsers) to contact those IPv4 addresses to retrieve resources relevant to your domain name (such as your Hosting site files).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DnsRecord
	{
		
		/// <summary>
		/// Output only. The domain name the record pertains to, e.g. `foo.bar.com.`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="domainName")]
		public string DomainName { get; set; }
		
		/// <summary>
		/// Output only. The data of the record. The meaning of the value depends on record type: - A and AAAA: IP addresses for the domain name. - CNAME: Another domain to check for records. - TXT: Arbitrary text strings associated with the domain name. Hosting uses TXT records to determine which Firebase projects have permission to act on the domain name's behalf. - CAA: The record's flags, tag, and value, e.g. `0 issue "pki.goog"`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rdata")]
		public string Rdata { get; set; }
		
		/// <summary>
		/// Output only. An enum that indicates the a required action for this record.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requiredAction")]
		public System.Nullable<DnsRecordRequiredAction> RequiredAction { get; set; }
		
		/// <summary>
		/// Output only. The record's type, which determines what data the record contains.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<DnsRecordType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DnsRecordRequiredAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADD = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REMOVE = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DnsRecordType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		A = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CNAME = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TXT = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AAAA = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CAA = 5,
	}
	
	/// <summary>
	/// A file you can add to your existing, non-Hosting hosting service that confirms your intent to allow Hosting's Certificate Authorities to create an SSL certificate for your domain.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class HttpUpdate
	{
		
		/// <summary>
		/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="checkError")]
		public Status CheckError { get; set; }
		
		/// <summary>
		/// Output only. A text string to serve at the path.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="desired")]
		public string Desired { get; set; }
		
		/// <summary>
		/// Output only. Whether Hosting was able to find the required file contents on the specified path during its last check.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="discovered")]
		public string Discovered { get; set; }
		
		/// <summary>
		/// Output only. The last time Hosting systems checked for the file contents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastCheckTime")]
		public string LastCheckTime { get; set; }
		
		/// <summary>
		/// Output only. The path to the file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="path")]
		public string Path { get; set; }
	}
	
	/// <summary>
	/// An SSL certificate used to provide end-to-end encryption for requests against your domain name. A `Certificate` can be an actual SSL certificate or, for newly-created custom domains, Hosting's intent to create one.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Certificate
	{
		
		/// <summary>
		/// Output only. The certificate's creation time. For `TEMPORARY` certs this is the time Hosting first generated challenges for your domain name. For all other cert types, it's the time the actual cert was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// Output only. The certificate's expiration time. After this time, the cert can no longer be used to provide secure communication between Hosting and your site's visitors.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expireTime")]
		public string ExpireTime { get; set; }
		
		/// <summary>
		/// Output only. A set of errors Hosting encountered when attempting to create a cert for your domain name. Resolve these issues to ensure Hosting is able to provide secure communication with your site's visitors.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="issues")]
		public Status[] Issues { get; set; }
		
		/// <summary>
		/// Output only. The state of the certificate. Only the `CERT_ACTIVE` and `CERT_EXPIRING_SOON` states provide SSL coverage for a domain name. If the state is `PROPAGATING` and Hosting had an active cert for the domain name before, that formerly-active cert provides SSL coverage for the domain name until the current cert propagates.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<CertificateState> State { get; set; }
		
		/// <summary>
		/// Output only. The certificate's type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<CertificateType> Type { get; set; }
		
		/// <summary>
		/// A set of ACME challenges you can use to allow Hosting to create an SSL certificate for your domain name before directing traffic to Hosting servers. Use either the DNS or HTTP challenge; it's not necessary to provide both.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verification")]
		public CertVerification Verification { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CertificateState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CERT_STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CERT_PREPARING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CERT_VALIDATING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CERT_PROPAGATING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CERT_ACTIVE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CERT_EXPIRING_SOON = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CERT_EXPIRED = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CertificateType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEMPORARY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GROUPED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROJECT_GROUPED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEDICATED = 4,
	}
	
	/// <summary>
	/// A `Channel` represents a stream of releases for a site. All sites have a default `live` channel that serves content to the Firebase-provided subdomains and any connected custom domains.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Channel
	{
		
		/// <summary>
		/// Output only. The time at which the channel was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// The time at which the channel will be automatically deleted. If null, the channel will not be automatically deleted. This field is present in the output whether it's set directly or via the `ttl` field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expireTime")]
		public string ExpireTime { get; set; }
		
		/// <summary>
		/// Text labels used for extra metadata and/or filtering.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// The fully-qualified resource name for the channel, in the format: sites/ SITE_ID/channels/CHANNEL_ID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		///  A `Release` is a particular [collection of configurations and files](sites.versions) that is set to be public at a particular time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="release")]
		public Release Release { get; set; }
		
		/// <summary>
		/// The number of previous releases to retain on the channel for rollback or other purposes. Must be a number between 1-100. Defaults to 10 for new channels.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="retainedReleaseCount")]
		public System.Nullable<System.Int32> RetainedReleaseCount { get; set; }
		
		/// <summary>
		/// Input only. A time-to-live for this channel. Sets `expire_time` to the provided duration past the time of the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ttl")]
		public string Ttl { get; set; }
		
		/// <summary>
		/// Output only. The time at which the channel was last updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
		
		/// <summary>
		/// Output only. The URL at which the content of this channel's current release can be viewed. This URL is a Firebase-provided subdomain of `web.app`. The content of this channel's current release can also be viewed at the Firebase-provided subdomain of `firebaseapp.com`. If this channel is the `live` channel for the Hosting site, then the content of this channel's current release can also be viewed at any connected custom domains.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	/// <summary>
	///  A `Release` is a particular [collection of configurations and files](sites.versions) that is set to be public at a particular time.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Release
	{
		
		/// <summary>
		/// The deploy description when the release was created. The value can be up to 512 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// Output only. The unique identifier for the release, in either of the following formats: - sites/SITE_ID/releases/RELEASE_ID - sites/SITE_ID/channels/CHANNEL_ID/releases/RELEASE_ID This name is provided in the response body when you call [`releases.create`](sites.releases/create) or [`channels.releases.create`](sites.channels.releases/create).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Output only. The time at which the version is set to be public.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="releaseTime")]
		public string ReleaseTime { get; set; }
		
		/// <summary>
		/// Contains metadata about the user who performed an action, such as creating a release or finalizing a version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="releaseUser")]
		public ActingUser ReleaseUser { get; set; }
		
		/// <summary>
		/// Explains the reason for the release. Specify a value for this field only when creating a `SITE_DISABLE` type release.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<ReleaseType> Type { get; set; }
		
		/// <summary>
		/// A `Version` is a configuration and a collection of static files which determine how a site is displayed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public Version Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ReleaseType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEPLOY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ROLLBACK = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SITE_DISABLE = 3,
	}
	
	/// <summary>
	/// A `Version` is a configuration and a collection of static files which determine how a site is displayed.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Version
	{
		
		/// <summary>
		/// The configuration for how incoming requests to a site should be routed and processed before serving content. The URL request paths are matched against the specified URL patterns in the configuration, then Hosting applies the applicable configuration according to a specific [priority order](https://firebase.google.com/docs/hosting/full-config#hosting_priority_order).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="config")]
		public ServingConfig Config { get; set; }
		
		/// <summary>
		/// Output only. The time at which the version was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// Contains metadata about the user who performed an action, such as creating a release or finalizing a version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createUser")]
		public ActingUser CreateUser { get; set; }
		
		/// <summary>
		/// Output only. The time at which the version was `DELETED`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deleteTime")]
		public string DeleteTime { get; set; }
		
		/// <summary>
		/// Contains metadata about the user who performed an action, such as creating a release or finalizing a version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deleteUser")]
		public ActingUser DeleteUser { get; set; }
		
		/// <summary>
		/// Output only. The total number of files associated with the version. This value is calculated after a version is `FINALIZED`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fileCount")]
		public string FileCount { get; set; }
		
		/// <summary>
		/// Output only. The time at which the version was `FINALIZED`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="finalizeTime")]
		public string FinalizeTime { get; set; }
		
		/// <summary>
		/// Contains metadata about the user who performed an action, such as creating a release or finalizing a version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="finalizeUser")]
		public ActingUser FinalizeUser { get; set; }
		
		/// <summary>
		/// The labels used for extra metadata and/or filtering.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// The fully-qualified resource name for the version, in the format: sites/ SITE_ID/versions/VERSION_ID This name is provided in the response body when you call [`CreateVersion`](sites.versions/create).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The deploy status of the version. For a successful deploy, call [`CreateVersion`](sites.versions/create) to make a new version (`CREATED` status), [upload all desired files](sites.versions/populateFiles) to the version, then [update](sites.versions/patch) the version to the `FINALIZED` status. Note that if you leave the version in the `CREATED` state for more than 12 hours, the system will automatically mark the version as `ABANDONED`. You can also change the status of a version to `DELETED` by calling [`DeleteVersion`](sites.versions/delete).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<VersionStatus> Status { get; set; }
		
		/// <summary>
		/// Output only. The total stored bytesize of the version. This value is calculated after a version is `FINALIZED`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="versionBytes")]
		public string VersionBytes { get; set; }
	}
	
	/// <summary>
	/// The configuration for how incoming requests to a site should be routed and processed before serving content. The URL request paths are matched against the specified URL patterns in the configuration, then Hosting applies the applicable configuration according to a specific [priority order](https://firebase.google.com/docs/hosting/full-config#hosting_priority_order).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ServingConfig
	{
		
		/// <summary>
		/// How to handle well known App Association files.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appAssociation")]
		public System.Nullable<ServingConfigAppAssociation> AppAssociation { get; set; }
		
		/// <summary>
		/// Defines whether to drop the file extension from uploaded files.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cleanUrls")]
		public System.Nullable<System.Boolean> CleanUrls { get; set; }
		
		/// <summary>
		/// An array of objects, where each object specifies a URL pattern that, if matched to the request URL path, triggers Hosting to apply the specified custom response headers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="headers")]
		public Header[] Headers { get; set; }
		
		/// <summary>
		/// If provided, i18n rewrites are enabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="i18n")]
		public I18nConfig I18n { get; set; }
		
		/// <summary>
		/// An array of objects (called redirect rules), where each rule specifies a URL pattern that, if matched to the request URL path, triggers Hosting to respond with a redirect to the specified destination path.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="redirects")]
		public Redirect[] Redirects { get; set; }
		
		/// <summary>
		/// An array of objects (called rewrite rules), where each rule specifies a URL pattern that, if matched to the request URL path, triggers Hosting to respond as if the service were given the specified destination URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rewrites")]
		public Rewrite[] Rewrites { get; set; }
		
		/// <summary>
		/// Defines how to handle a trailing slash in the URL path.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trailingSlashBehavior")]
		public System.Nullable<ServingConfigTrailingSlashBehavior> TrailingSlashBehavior { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ServingConfigAppAssociation
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTO = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 1,
	}
	
	/// <summary>
	/// A [`Header`](https://firebase.google.com/docs/hosting/full-config#headers) specifies a URL pattern that, if matched to the request URL path, triggers Hosting to apply the specified custom response headers.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Header
	{
		
		/// <summary>
		/// The user-supplied [glob](https://firebase.google.com/docs/hosting/full-config#glob_pattern_matching) to match against the request URL path.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="glob")]
		public string Glob { get; set; }
		
		/// <summary>
		/// Required. The additional headers to add to the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="headers")]
		public System.Collections.Generic.Dictionary<string, string> Headers { get; set; }
		
		/// <summary>
		/// The user-supplied RE2 regular expression to match against the request URL path.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="regex")]
		public string Regex { get; set; }
	}
	
	/// <summary>
	/// If provided, i18n rewrites are enabled.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class I18nConfig
	{
		
		/// <summary>
		/// Required. The user-supplied path where country and language specific content will be looked for within the public directory.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="root")]
		public string Root { get; set; }
	}
	
	/// <summary>
	/// A [`Redirect`](https://firebase.google.com/docs/hosting/full-config#redirects) specifies a URL pattern that, if matched to the request URL path, triggers Hosting to respond with a redirect to the specified destination path.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Redirect
	{
		
		/// <summary>
		/// The user-supplied [glob](https://firebase.google.com/docs/hosting/full-config#glob_pattern_matching) to match against the request URL path.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="glob")]
		public string Glob { get; set; }
		
		/// <summary>
		/// Required. The value to put in the HTTP location header of the response. The location can contain capture group values from the pattern using a `:` prefix to identify the segment and an optional `*` to capture the rest of the URL. For example: "glob": "/:capture*", "statusCode": 301, "location": "https://example.com/foo/:capture"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// The user-supplied RE2 regular expression to match against the request URL path.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="regex")]
		public string Regex { get; set; }
		
		/// <summary>
		/// Required. The status HTTP code to return in the response. It must be a valid 3xx status code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statusCode")]
		public System.Nullable<System.Int32> StatusCode { get; set; }
	}
	
	/// <summary>
	/// A [`Rewrite`](https://firebase.google.com/docs/hosting/full-config#rewrites) specifies a URL pattern that, if matched to the request URL path, triggers Hosting to respond as if the service were given the specified destination URL.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Rewrite
	{
		
		/// <summary>
		/// The request will be forwarded to Firebase Dynamic Links.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dynamicLinks")]
		public System.Nullable<System.Boolean> DynamicLinks { get; set; }
		
		/// <summary>
		/// The function to proxy requests to. Must match the exported function name exactly.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="function")]
		public string Function { get; set; }
		
		/// <summary>
		/// Optional. Specify a Cloud region for rewritten Functions invocations. If not provided, defaults to us-central1.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="functionRegion")]
		public string FunctionRegion { get; set; }
		
		/// <summary>
		/// The user-supplied [glob](https://firebase.google.com/docs/hosting/full-config#glob_pattern_matching) to match against the request URL path.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="glob")]
		public string Glob { get; set; }
		
		/// <summary>
		/// The URL path to rewrite the request to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="path")]
		public string Path { get; set; }
		
		/// <summary>
		/// The user-supplied RE2 regular expression to match against the request URL path.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="regex")]
		public string Regex { get; set; }
		
		/// <summary>
		/// A configured rewrite that directs requests to a Cloud Run service. If the Cloud Run service does not exist when setting or updating your Firebase Hosting configuration, then the request fails. Any errors from the Cloud Run service are passed to the end user (for example, if you delete a service, any requests directed to that service receive a `404` error).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="run")]
		public CloudRunRewrite Run { get; set; }
	}
	
	/// <summary>
	/// A configured rewrite that directs requests to a Cloud Run service. If the Cloud Run service does not exist when setting or updating your Firebase Hosting configuration, then the request fails. Any errors from the Cloud Run service are passed to the end user (for example, if you delete a service, any requests directed to that service receive a `404` error).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CloudRunRewrite
	{
		
		/// <summary>
		/// Optional. User-provided region where the Cloud Run service is hosted. Defaults to `us-central1` if not supplied.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="region")]
		public string Region { get; set; }
		
		/// <summary>
		/// Required. User-defined ID of the Cloud Run service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceId")]
		public string ServiceId { get; set; }
		
		/// <summary>
		/// Optional. User-provided TrafficConfig tag to send traffic to. When omitted, traffic is sent to the service-wide URI
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tag")]
		public string Tag { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ServingConfigTrailingSlashBehavior
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TRAILING_SLASH_BEHAVIOR_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADD = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REMOVE = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum VersionStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VERSION_STATUS_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FINALIZED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ABANDONED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPIRED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLONING = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CloneVersionRequest
	{
		
		/// <summary>
		/// A representation of filter path.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exclude")]
		public PathFilter Exclude { get; set; }
		
		/// <summary>
		/// If true, the call to `CloneVersion` immediately finalizes the version after cloning is complete. If false, the cloned version will have a status of `CREATED`. Use [`UpdateVersion`](patch) to set the status of the version to `FINALIZED`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="finalize")]
		public System.Nullable<System.Boolean> Finalize { get; set; }
		
		/// <summary>
		/// A representation of filter path.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="include")]
		public PathFilter Include { get; set; }
		
		/// <summary>
		/// Required. The unique identifier for the version to be cloned, in the format: sites/SITE_ID/versions/VERSION_ID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceVersion")]
		public string SourceVersion { get; set; }
	}
	
	/// <summary>
	/// A representation of filter path.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PathFilter
	{
		
		/// <summary>
		/// An array of RegEx values by which to filter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="regexes")]
		public string[] Regexes { get; set; }
	}
	
	/// <summary>
	/// A `CustomDomain` is an entity that links a domain name to a Firebase Hosting site. Add a `CustomDomain` to your site to allow Hosting to serve the site's content in response to requests against your domain name.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CustomDomain
	{
		
		/// <summary>
		/// Annotations you can add to leave both human- and machine-readable metadata about your `CustomDomain`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="annotations")]
		public System.Collections.Generic.Dictionary<string, string> Annotations { get; set; }
		
		/// <summary>
		/// An SSL certificate used to provide end-to-end encryption for requests against your domain name. A `Certificate` can be an actual SSL certificate or, for newly-created custom domains, Hosting's intent to create one.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cert")]
		public Certificate Cert { get; set; }
		
		/// <summary>
		/// A field that lets you specify which SSL certificate type Hosting creates for your domain name. Spark plan custom domains only have access to the `GROUPED` cert type, while Blaze plan domains can select any option.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="certPreference")]
		public CertificateType CertPreference { get; set; }
		
		/// <summary>
		/// Output only. The custom domain's create time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// Output only. The time the `CustomDomain` was deleted; null for custom domains that haven't been deleted. Deleted custom domains persist for approximately 30 days, after which time Hosting removes them completely. To restore a deleted custom domain, make an `UndeleteCustomDomain` request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deleteTime")]
		public string DeleteTime { get; set; }
		
		/// <summary>
		/// Output only. A string that represents the current state of the `CustomDomain` and allows you to confirm its initial state in requests that would modify it. Use the tag to ensure consistency when making `UpdateCustomDomain`, `DeleteCustomDomain`, and `UndeleteCustomDomain` requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// Output only. The minimum time before a soft-deleted `CustomDomain` is completely removed from Hosting; null for custom domains that haven't been deleted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expireTime")]
		public string ExpireTime { get; set; }
		
		/// <summary>
		/// Output only. The `HostState` of the domain name this `CustomDomain` refers to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hostState")]
		public System.Nullable<CustomDomainHostState> HostState { get; set; }
		
		/// <summary>
		/// Output only. A set of errors Hosting systems encountered when trying to establish Hosting's ability to serve secure content for your domain name. Resolve these issues to ensure your `CustomDomain` behaves properly.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="issues")]
		public Status[] Issues { get; set; }
		
		/// <summary>
		/// Labels used for extra metadata and/or filtering.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// Output only. The fully-qualified name of the `CustomDomain`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Output only. The `OwnershipState` of the domain name this `CustomDomain` refers to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ownershipState")]
		public System.Nullable<CustomDomainOwnershipState> OwnershipState { get; set; }
		
		/// <summary>
		/// Output only. A field that, if true, indicates that Hosting's systems are attmepting to make the custom domain's state match your preferred state. This is most frequently `true` when initially provisioning a `CustomDomain` after a `CreateCustomDomain` request or when creating a new SSL certificate to match an updated `cert_preference` after an `UpdateCustomDomain` request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reconciling")]
		public System.Nullable<System.Boolean> Reconciling { get; set; }
		
		/// <summary>
		/// A domain name that this `CustomDomain` should direct traffic towards. If specified, Hosting will respond to requests against this custom domain with an HTTP 301 code, and route traffic to the specified `redirect_target` instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="redirectTarget")]
		public string RedirectTarget { get; set; }
		
		/// <summary>
		/// A set of DNS record updates that you should make to allow Hosting to serve secure content in response to requests against your domain name. These updates present the current state of your domain name's DNS records when Hosting last queried them, and the desired set of records that Hosting needs to see before your custom domain can be fully active.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requiredDnsUpdates")]
		public DnsUpdates RequiredDnsUpdates { get; set; }
		
		/// <summary>
		/// Output only. The last time the `CustomDomain` was updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CustomDomainHostState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HOST_STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HOST_UNHOSTED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HOST_UNREACHABLE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HOST_MISMATCH = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HOST_CONFLICT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HOST_ACTIVE = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CustomDomainOwnershipState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OWNERSHIP_STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OWNERSHIP_MISSING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OWNERSHIP_UNREACHABLE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OWNERSHIP_MISMATCH = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OWNERSHIP_CONFLICT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OWNERSHIP_PENDING = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OWNERSHIP_ACTIVE = 6,
	}
	
	/// <summary>
	/// Metadata associated with a`CustomDomain` operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CustomDomainMetadata
	{
		
		/// <summary>
		/// The `CertState` of the domain name's SSL certificate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="certState")]
		public CertificateState CertState { get; set; }
		
		/// <summary>
		/// The `HostState` of the domain name this `CustomDomain` refers to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hostState")]
		public CustomDomainHostState HostState { get; set; }
		
		/// <summary>
		/// A list of issues that are currently preventing Hosting from completing the operation. These are generally DNS-related issues that Hosting encounters when querying a domain name's records or attempting to mint an SSL certificate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="issues")]
		public Status[] Issues { get; set; }
		
		/// <summary>
		/// A set of DNS record updates and ACME challenges that allow you to transition domain names to Firebase Hosting with zero downtime. These updates allow Hosting to create an SSL certificate and establish ownership for your custom domain before Hosting begins serving traffic on it. If your domain name is already in active use with another provider, add one of the challenges and make the recommended DNS updates. After adding challenges and adjusting DNS records as necessary, wait for the `ownershipState` to be `OWNERSHIP_ACTIVE` and the `certState` to be `CERT_ACTIVE` before sending traffic to Hosting.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="liveMigrationSteps")]
		public LiveMigrationStep[] LiveMigrationSteps { get; set; }
		
		/// <summary>
		/// The `OwnershipState` of the domain name this `CustomDomain` refers to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ownershipState")]
		public CustomDomainOwnershipState OwnershipState { get; set; }
		
		/// <summary>
		/// A set of DNS record updates that you should make to allow Hosting to serve secure content in response to requests against your domain name. These updates present the current state of your domain name's DNS records when Hosting last queried them, and the desired set of records that Hosting needs to see before your custom domain can be fully active.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quickSetupUpdates")]
		public DnsUpdates QuickSetupUpdates { get; set; }
	}
	
	/// <summary>
	/// A set of updates including ACME challenges and DNS records that allow Hosting to create an SSL certificate and establish project ownership for your domain name before you direct traffic to Hosting servers. Use these updates to facilitate zero downtime migrations to Hosting from other services. After you've made the recommended updates, check your custom domain's `ownershipState` and `certState`. To avoid downtime, they should be `OWNERSHIP_ACTIVE` and `CERT_ACTIVE`, respectively, before you update your `A` and `AAAA` records.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LiveMigrationStep
	{
		
		/// <summary>
		/// A set of ACME challenges you can use to allow Hosting to create an SSL certificate for your domain name before directing traffic to Hosting servers. Use either the DNS or HTTP challenge; it's not necessary to provide both.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="certVerification")]
		public CertVerification CertVerification { get; set; }
		
		/// <summary>
		/// A set of DNS record updates that you should make to allow Hosting to serve secure content in response to requests against your domain name. These updates present the current state of your domain name's DNS records when Hosting last queried them, and the desired set of records that Hosting needs to see before your custom domain can be fully active.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dnsUpdates")]
		public DnsUpdates DnsUpdates { get; set; }
		
		/// <summary>
		/// Output only. Issues that prevent the current step from completing.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="issues")]
		public Status[] Issues { get; set; }
		
		/// <summary>
		/// Output only. The state of the live migration step, indicates whether you should work to complete the step now, in the future, or have already completed it.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<LiveMigrationStepState> State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum LiveMigrationStepState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PREPARING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INCOMPLETE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROCESSING = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETE = 5,
	}
	
	/// <summary>
	/// The intended behavior and status information of a domain.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Domain
	{
		
		/// <summary>
		/// Required. The domain name of the association.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="domainName")]
		public string DomainName { get; set; }
		
		/// <summary>
		/// Defines the behavior of a domain-level redirect. Domain redirects preserve the path of the redirect but replace the requested domain with the one specified in the redirect configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="domainRedirect")]
		public DomainRedirect DomainRedirect { get; set; }
		
		/// <summary>
		/// The current certificate provisioning status information for a domain.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioning")]
		public DomainProvisioning Provisioning { get; set; }
		
		/// <summary>
		/// Required. The site name of the association.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="site")]
		public string Site { get; set; }
		
		/// <summary>
		/// Output only. Additional status of the domain association.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<DomainStatus> Status { get; set; }
		
		/// <summary>
		/// Output only. The time at which the domain was last updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
	}
	
	/// <summary>
	/// Defines the behavior of a domain-level redirect. Domain redirects preserve the path of the redirect but replace the requested domain with the one specified in the redirect configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DomainRedirect
	{
		
		/// <summary>
		/// Required. The domain name to redirect to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="domainName")]
		public string DomainName { get; set; }
		
		/// <summary>
		/// Required. The redirect status code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<DomainRedirectType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DomainRedirectType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REDIRECT_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MOVED_PERMANENTLY = 1,
	}
	
	/// <summary>
	/// The current certificate provisioning status information for a domain.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DomainProvisioning
	{
		
		/// <summary>
		/// The TXT records (for the certificate challenge) that were found at the last DNS fetch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="certChallengeDiscoveredTxt")]
		public string[] CertChallengeDiscoveredTxt { get; set; }
		
		/// <summary>
		/// Represents a DNS certificate challenge.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="certChallengeDns")]
		public CertDnsChallenge CertChallengeDns { get; set; }
		
		/// <summary>
		/// Represents an HTTP certificate challenge.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="certChallengeHttp")]
		public CertHttpChallenge CertChallengeHttp { get; set; }
		
		/// <summary>
		/// The certificate provisioning status; updated when Firebase Hosting provisions an SSL certificate for the domain.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="certStatus")]
		public System.Nullable<DomainProvisioningCertStatus> CertStatus { get; set; }
		
		/// <summary>
		/// The IPs found at the last DNS fetch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="discoveredIps")]
		public string[] DiscoveredIps { get; set; }
		
		/// <summary>
		/// The time at which the last DNS fetch occurred.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dnsFetchTime")]
		public string DnsFetchTime { get; set; }
		
		/// <summary>
		/// The DNS record match status as of the last DNS fetch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dnsStatus")]
		public System.Nullable<DomainProvisioningDnsStatus> DnsStatus { get; set; }
		
		/// <summary>
		/// The list of IPs to which the domain is expected to resolve.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expectedIps")]
		public string[] ExpectedIps { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DomainProvisioningCertStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CERT_STATUS_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CERT_PENDING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CERT_MISSING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CERT_PROCESSING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CERT_PROPAGATING = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CERT_ACTIVE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CERT_ERROR = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DomainProvisioningDnsStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DNS_STATUS_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DNS_PENDING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DNS_MISSING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DNS_PARTIAL_MATCH = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DNS_MATCH = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DNS_EXTRANEOUS_MATCH = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DomainStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DOMAIN_STATUS_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DOMAIN_CHANGE_PENDING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DOMAIN_ACTIVE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DOMAIN_VERIFICATION_REQUIRED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DOMAIN_VERIFICATION_LOST = 4,
	}
	
	/// <summary>
	/// A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Empty
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListChannelsResponse
	{
		
		/// <summary>
		/// The list of channels.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channels")]
		public Channel[] Channels { get; set; }
		
		/// <summary>
		/// The pagination token, if more results exist beyond the ones in this response. Include this token in your next call to `ListChannels`. Page tokens are short-lived and should not be stored.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// The response from `ListCustomDomains`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListCustomDomainsResponse
	{
		
		/// <summary>
		/// A list of `CustomDomain` entities associated with the specified Firebase `Site`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customDomains")]
		public CustomDomain[] CustomDomains { get; set; }
		
		/// <summary>
		/// The pagination token, if more results exist beyond the ones in this response. Include this token in your next call to `ListCustomDomains`. Page tokens are short-lived and should not be stored.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// The response to listing Domains.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListDomainsResponse
	{
		
		/// <summary>
		/// The list of domains, if any exist.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="domains")]
		public Domain[] Domains { get; set; }
		
		/// <summary>
		/// The pagination token, if more results exist.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// The response message for Operations.ListOperations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListOperationsResponse
	{
		
		/// <summary>
		/// The standard List next-page token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// A list of operations that matches the specified filter in the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operations")]
		public Operation[] Operations { get; set; }
	}
	
	/// <summary>
	/// This resource represents a long-running operation that is the result of a network API call.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Operation
	{
		
		/// <summary>
		/// If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="done")]
		public System.Nullable<System.Boolean> Done { get; set; }
		
		/// <summary>
		/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public Status Error { get; set; }
		
		/// <summary>
		/// Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public System.Collections.Generic.Dictionary<string, object> Metadata { get; set; }
		
		/// <summary>
		/// The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="response")]
		public System.Collections.Generic.Dictionary<string, object> Response { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListReleasesResponse
	{
		
		/// <summary>
		/// The pagination token, if more results exist beyond the ones in this response. Include this token in your next call to `ListReleases`. Page tokens are short-lived and should not be stored.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// The list of hashes of files that still need to be uploaded, if any exist.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="releases")]
		public Release[] Releases { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListSitesResponse
	{
		
		/// <summary>
		/// The pagination token, if more results exist beyond the ones in this response. Include this token in your next call to `ListSites`. Page tokens are short-lived and should not be stored.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// A list of Site objects associated with the specified Firebase project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sites")]
		public Site[] Sites { get; set; }
	}
	
	/// <summary>
	/// A `Site` represents a Firebase Hosting site.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Site
	{
		
		/// <summary>
		/// Optional. The [ID of a Web App](https://firebase.google.com/docs/reference/firebase-management/rest/v1beta1/projects.webApps#WebApp.FIELDS.app_id) associated with the Hosting site.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appId")]
		public string AppId { get; set; }
		
		/// <summary>
		/// Output only. The default URL for the Hosting site.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultUrl")]
		public string DefaultUrl { get; set; }
		
		/// <summary>
		/// Optional. User-specified labels for the Hosting site.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// Output only. The fully-qualified resource name of the Hosting site, in the format: projects/PROJECT_IDENTIFIER/sites/SITE_ID PROJECT_IDENTIFIER: the Firebase project's [`ProjectNumber`](https://firebase.google.com/docs/reference/firebase-management/rest/v1beta1/projects#FirebaseProject.FIELDS.project_number) ***(recommended)*** or its [`ProjectId`](https://firebase.google.com/docs/reference/firebase-management/rest/v1beta1/projects#FirebaseProject.FIELDS.project_id). Learn more about using project identifiers in Google's [AIP 2510 standard](https://google.aip.dev/cloud/2510).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Output only. The type of Hosting site. Every Firebase project has a `DEFAULT_SITE`, which is created when Hosting is provisioned for the project. All additional sites are `USER_SITE`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<SiteType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SiteType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEFAULT_SITE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USER_SITE = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListVersionFilesResponse
	{
		
		/// <summary>
		///  The list of paths to the hashes of the files in the specified version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="files")]
		public VersionFile[] Files { get; set; }
		
		/// <summary>
		/// The pagination token, if more results exist beyond the ones in this response. Include this token in your next call to `ListVersionFiles`. Page tokens are short-lived and should not be stored.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// A static content file that is part of a version.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VersionFile
	{
		
		/// <summary>
		/// The SHA256 content hash of the file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hash")]
		public string Hash { get; set; }
		
		/// <summary>
		/// The URI at which the file's content should display.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="path")]
		public string Path { get; set; }
		
		/// <summary>
		/// Output only. The current status of a particular file in the specified version. The value will be either `pending upload` or `uploaded`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<VersionFileStatus> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum VersionFileStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATUS_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPECTED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListVersionsResponse
	{
		
		/// <summary>
		/// The pagination token, if more results exist beyond the ones in this response. Include this token in your next call to `ListVersions`. Page tokens are short-lived and should not be stored.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// The list of versions, if any exist.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="versions")]
		public Version[] Versions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PopulateVersionFilesRequest
	{
		
		/// <summary>
		/// A set of file paths to the hashes corresponding to assets that should be added to the version. A file path to an empty hash will remove the path from the version. Calculate a hash by Gzipping the file then taking the SHA256 hash of the newly compressed file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="files")]
		public System.Collections.Generic.Dictionary<string, string> Files { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PopulateVersionFilesResponse
	{
		
		/// <summary>
		/// The content hashes of the specified files that need to be uploaded to the specified URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uploadRequiredHashes")]
		public string[] UploadRequiredHashes { get; set; }
		
		/// <summary>
		/// The URL to which the files should be uploaded, in the format: "https://upload-firebasehosting.googleapis.com/upload/sites/SITE_ID /versions/VERSION_ID/files" Perform a multipart `POST` of the Gzipped file contents to the URL using a forward slash and the hash of the file appended to the end.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uploadUrl")]
		public string UploadUrl { get; set; }
	}
	
	/// <summary>
	/// A `SiteConfig` contains metadata associated with a specific site that controls Firebase Hosting serving behavior
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SiteConfig
	{
		
		/// <summary>
		/// Whether or not web requests made by site visitors are logged via Cloud Logging.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cloudLoggingEnabled")]
		public System.Nullable<System.Boolean> CloudLoggingEnabled { get; set; }
		
		/// <summary>
		/// The number of FINALIZED versions that will be held for a site before automatic deletion. When a new version is deployed, content for versions in storage in excess of this number will be deleted, and will no longer be billed for storage usage. Oldest versions will be deleted first; sites are created with an unlimited number of max_versions by default.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxVersions")]
		public string MaxVersions { get; set; }
	}
	
	/// <summary>
	/// The request sent to `UndeleteCustomDomain`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UndeleteCustomDomainRequest
	{
		
		/// <summary>
		/// A tag that represents the state of the `CustomDomain` as you know it. If present, the supplied tag must match the current value on your `CustomDomain`, or the request fails.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// If true, Hosting validates that it's possible to complete your request but doesn't actually delete the `CustomDomain`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="validateOnly")]
		public System.Nullable<System.Boolean> ValidateOnly { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Deletes the specified version.
		/// Firebasehosting_sites_versions_delete v1beta1/{name}
		/// </summary>
		/// <param name="name">Required. The fully-qualified resource name for the version, in the format: sites/SITE_ID/versions/VERSION_ID</param>
		/// <param name="allowMissing">If true, the request succeeds even if the `CustomDomain` doesn't exist.</param>
		/// <param name="etag">A tag that represents the state of the `CustomDomain` as you know it. If present, the supplied tag must match the current value on your `CustomDomain`, or the request fails.</param>
		/// <param name="validateOnly">If true, Hosting validates that it's possible to complete your request but doesn't actually delete the `CustomDomain`.</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Firebasehosting_sites_versions_deleteAsync(string name, bool allowMissing, string etag, bool validateOnly, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&allowMissing="+allowMissing+"&etag=" + (etag==null? "" : System.Uri.EscapeDataString(etag))+"&validateOnly="+validateOnly;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Empty>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the specified version that has been created for the specified site. This can include versions that were created for the default `live` channel or for any active preview channels for the specified site.
		/// Firebasehosting_sites_versions_get v1beta1/{name}
		/// </summary>
		/// <param name="name">Required. The fully-qualified resource name for the version, in the format: sites/SITE_ID/versions/VERSION_ID</param>
		/// <returns>Successful response</returns>
		public async Task<Version> Firebasehosting_sites_versions_getAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta1/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Version>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the specified metadata for the specified version. This method will fail with `FAILED_PRECONDITION` in the event of an invalid state transition. The supported [state](../sites.versions#versionstatus) transitions for a version are from `CREATED` to `FINALIZED`. Use [`DeleteVersion`](delete) to set the status of a version to `DELETED`.
		/// Firebasehosting_sites_versions_patch v1beta1/{name}
		/// </summary>
		/// <param name="name">The fully-qualified resource name for the version, in the format: sites/ SITE_ID/versions/VERSION_ID This name is provided in the response body when you call [`CreateVersion`](sites.versions/create).</param>
		/// <param name="updateMask">A set of field names from your [version](../sites.versions) that you want to update. A field will be overwritten if, and only if, it's in the mask. If a mask is not provided then a default mask of only [`status`](../sites.versions#Version.FIELDS.status) will be used.</param>
		/// <param name="validateOnly">If true, Hosting validates that it's possible to complete your request but doesn't actually create or update the `CustomDomain`.</param>
		/// <returns>Successful response</returns>
		public async Task<Version> Firebasehosting_sites_versions_patchAsync(string name, string updateMask, bool validateOnly, Version requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&updateMask=" + (updateMask==null? "" : System.Uri.EscapeDataString(updateMask))+"&validateOnly="+validateOnly;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Version>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the specified domain mapping, creating the mapping as if it does not exist.
		/// Firebasehosting_sites_domains_update v1beta1/{name}
		/// </summary>
		/// <param name="name">Required. The name of the domain association to update or create, if an association doesn't already exist.</param>
		/// <returns>Successful response</returns>
		public async Task<Domain> Firebasehosting_sites_domains_updateAsync(string name, Domain requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta1/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Domain>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists operations that match the specified filter in the request.
		/// Firebasehosting_projects_sites_customDomains_operations_list v1beta1/{name}/operations
		/// </summary>
		/// <param name="name">The name of the operation's parent resource.</param>
		/// <param name="filter">The standard list filter.</param>
		/// <param name="pageSize">The standard list page size.</param>
		/// <param name="pageToken">The standard list page token.</param>
		/// <returns>Successful response</returns>
		public async Task<ListOperationsResponse> Firebasehosting_projects_sites_customDomains_operations_listAsync(string name, string filter, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/operations&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListOperationsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Undeletes the specified `CustomDomain` if it has been soft-deleted. Hosting retains soft-deleted custom domains for around 30 days before permanently deleting them.
		/// Firebasehosting_projects_sites_customDomains_undelete v1beta1/{name}:undelete
		/// </summary>
		/// <param name="name">Required. The name of the `CustomDomain` to delete.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Firebasehosting_projects_sites_customDomains_undeleteAsync(string name, UndeleteCustomDomainRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":undelete";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the channels for the specified site. All sites have a default `live` channel.
		/// Firebasehosting_sites_channels_list v1beta1/{parent}/channels
		/// </summary>
		/// <param name="parent">Required. The site for which to list channels, in the format: sites/SITE_ID</param>
		/// <param name="pageSize">The maximum number of channels to return. The service may return a lower number if fewer channels exist than this maximum number. If unspecified, defaults to 10. The maximum value is 100; values above 100 will be coerced to 100.</param>
		/// <param name="pageToken">A token from a previous call to `ListChannels` that tells the server where to resume listing.</param>
		/// <returns>Successful response</returns>
		public async Task<ListChannelsResponse> Firebasehosting_sites_channels_listAsync(string parent, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/channels&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListChannelsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new channel in the specified site.
		/// Firebasehosting_sites_channels_create v1beta1/{parent}/channels
		/// </summary>
		/// <param name="parent">Required. The site in which to create this channel, in the format: sites/ SITE_ID</param>
		/// <param name="channelId">Required. Immutable. A unique ID within the site that identifies the channel.</param>
		/// <returns>Successful response</returns>
		public async Task<Channel> Firebasehosting_sites_channels_createAsync(string parent, string channelId, Channel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/channels&channelId=" + (channelId==null? "" : System.Uri.EscapeDataString(channelId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Channel>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists each `CustomDomain` associated with the specified parent Hosting site. Returns `CustomDomain`s in a consistent, but undefined, order to facilitate pagination.
		/// Firebasehosting_projects_sites_customDomains_list v1beta1/{parent}/customDomains
		/// </summary>
		/// <param name="parent">Required. The Firebase Hosting `Site` with `CustomDomain` entities you'd like to list.</param>
		/// <param name="pageSize">The max number of `CustomDomain` entities to return in a request. Defaults to 10.</param>
		/// <param name="pageToken">A token from a previous call to `ListCustomDomains` that tells the server where to resume listing.</param>
		/// <param name="showDeleted">If true, the request returns soft-deleted `CustomDomain`s that haven't been fully-deleted yet. To restore deleted `CustomDomain`s, make an `UndeleteCustomDomain` request.</param>
		/// <returns>Successful response</returns>
		public async Task<ListCustomDomainsResponse> Firebasehosting_projects_sites_customDomains_listAsync(string parent, int pageSize, string pageToken, bool showDeleted, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/customDomains&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&showDeleted="+showDeleted;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListCustomDomainsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a `CustomDomain`.
		/// Firebasehosting_projects_sites_customDomains_create v1beta1/{parent}/customDomains
		/// </summary>
		/// <param name="parent">Required. The custom domain's parent, specifically a Firebase Hosting `Site`.</param>
		/// <param name="customDomainId">Required. The ID of the `CustomDomain`, which is the domain name you'd like to use with Firebase Hosting.</param>
		/// <param name="validateOnly">If true, Hosting validates that it's possible to complete your request but doesn't actually create a new `CustomDomain`.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Firebasehosting_projects_sites_customDomains_createAsync(string parent, string customDomainId, bool validateOnly, CustomDomain requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/customDomains&customDomainId=" + (customDomainId==null? "" : System.Uri.EscapeDataString(customDomainId))+"&validateOnly="+validateOnly;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the domains for the specified site.
		/// Firebasehosting_sites_domains_list v1beta1/{parent}/domains
		/// </summary>
		/// <param name="parent">Required. The parent for which to list domains, in the format: sites/ site-name</param>
		/// <param name="pageSize">The page size to return. Defaults to 50.</param>
		/// <param name="pageToken">The next_page_token from a previous request, if provided.</param>
		/// <returns>Successful response</returns>
		public async Task<ListDomainsResponse> Firebasehosting_sites_domains_listAsync(string parent, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/domains&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListDomainsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a domain mapping on the specified site.
		/// Firebasehosting_sites_domains_create v1beta1/{parent}/domains
		/// </summary>
		/// <param name="parent">Required. The parent to create the domain association for, in the format: sites/site-name</param>
		/// <returns>Successful response</returns>
		public async Task<Domain> Firebasehosting_sites_domains_createAsync(string parent, Domain requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/domains";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Domain>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the remaining files to be uploaded for the specified version.
		/// Firebasehosting_sites_versions_files_list v1beta1/{parent}/files
		/// </summary>
		/// <param name="parent">Required. The version for which to list files, in the format: sites/SITE_ID /versions/VERSION_ID</param>
		/// <param name="pageSize">The maximum number of version files to return. The service may return a lower number if fewer version files exist than this maximum number. If unspecified, defaults to 1000.</param>
		/// <param name="pageToken">A token from a previous call to `ListVersionFiles` that tells the server where to resume listing.</param>
		/// <param name="status"> The type of files that should be listed for the specified version.</param>
		/// <returns>Successful response</returns>
		public async Task<ListVersionFilesResponse> Firebasehosting_sites_versions_files_listAsync(string parent, int pageSize, string pageToken, VersionFileStatus status, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/files&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&status=" + status;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListVersionFilesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the releases that have been created for the specified site or channel. When used to list releases for a site, this list includes releases for both the default `live` channel and any active preview channels for the specified site.
		/// Firebasehosting_sites_releases_list v1beta1/{parent}/releases
		/// </summary>
		/// <param name="parent">Required. The site or channel for which to list releases, in either of the following formats: - sites/SITE_ID - sites/SITE_ID/channels/CHANNEL_ID </param>
		/// <param name="pageSize">The maximum number of releases to return. The service may return a lower number if fewer releases exist than this maximum number. If unspecified, defaults to 100.</param>
		/// <param name="pageToken">A token from a previous call to `releases.list` or `channels.releases.list` that tells the server where to resume listing.</param>
		/// <returns>Successful response</returns>
		public async Task<ListReleasesResponse> Firebasehosting_sites_releases_listAsync(string parent, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/releases&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListReleasesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new release, which makes the content of the specified version actively display on the appropriate URL(s).
		/// Firebasehosting_sites_releases_create v1beta1/{parent}/releases
		/// </summary>
		/// <param name="parent">Required. The site or channel to which the release belongs, in either of the following formats: - sites/SITE_ID - sites/SITE_ID/channels/CHANNEL_ID</param>
		/// <param name="versionName"> The unique identifier for a version, in the format: sites/SITE_ID/versions/ VERSION_ID The SITE_ID in this version identifier must match the SITE_ID in the `parent` parameter. This query parameter must be empty if the `type` field in the request body is `SITE_DISABLE`.</param>
		/// <returns>Successful response</returns>
		public async Task<Release> Firebasehosting_sites_releases_createAsync(string parent, string versionName, Release requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/releases&versionName=" + (versionName==null? "" : System.Uri.EscapeDataString(versionName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Release>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists each Hosting Site associated with the specified parent Firebase project.
		/// Firebasehosting_projects_sites_list v1beta1/{parent}/sites
		/// </summary>
		/// <param name="parent">Required. The Firebase project for which to list sites, in the format: projects/PROJECT_IDENTIFIER Refer to the `Site` [`name`](../projects#Site.FIELDS.name) field for details about PROJECT_IDENTIFIER values.</param>
		/// <param name="pageSize">Optional. The maximum number of sites to return. The service may return a lower number if fewer sites exist than this maximum number. If unspecified, defaults to 40.</param>
		/// <param name="pageToken">Optional. A token from a previous call to `ListSites` that tells the server where to resume listing.</param>
		/// <returns>Successful response</returns>
		public async Task<ListSitesResponse> Firebasehosting_projects_sites_listAsync(string parent, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/sites&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListSitesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new Hosting Site in the specified parent Firebase project. Note that Hosting sites can take several minutes to propagate through Firebase systems.
		/// Firebasehosting_projects_sites_create v1beta1/{parent}/sites
		/// </summary>
		/// <param name="parent">Required. The Firebase project in which to create a Hosting site, in the format: projects/PROJECT_IDENTIFIER Refer to the `Site` [`name`](../projects#Site.FIELDS.name) field for details about PROJECT_IDENTIFIER values.</param>
		/// <param name="siteId">Required. Immutable. A globally unique identifier for the Hosting site. This identifier is used to construct the Firebase-provisioned subdomains for the site, so it must also be a valid domain name label.</param>
		/// <param name="validateOnly">Optional. If set, validates that the site_id is available and that the request would succeed, returning the expected resulting site or error.</param>
		/// <returns>Successful response</returns>
		public async Task<Site> Firebasehosting_projects_sites_createAsync(string parent, string siteId, bool validateOnly, Site requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/sites&siteId=" + (siteId==null? "" : System.Uri.EscapeDataString(siteId))+"&validateOnly="+validateOnly;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Site>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the versions that have been created for the specified site. This list includes versions for both the default `live` channel and any active preview channels for the specified site.
		/// Firebasehosting_sites_versions_list v1beta1/{parent}/versions
		/// </summary>
		/// <param name="parent">Required. The site or channel for which to list versions, in either of the following formats: - sites/SITE_ID - sites/SITE_ID/channels/CHANNEL_ID </param>
		/// <param name="filter">A filter string used to return a subset of versions in the response. The currently supported fields for filtering are: `name`, `status`, and `create_time`. Learn more about filtering in Google's [AIP 160 standard](https://google.aip.dev/160).</param>
		/// <param name="pageSize">The maximum number of versions to return. The service may return a lower number if fewer versions exist than this maximum number. If unspecified, defaults to 25. The maximum value is 100; values above 100 will be coerced to 100.</param>
		/// <param name="pageToken">A token from a previous call to `ListVersions` that tells the server where to resume listing.</param>
		/// <returns>Successful response</returns>
		public async Task<ListVersionsResponse> Firebasehosting_sites_versions_listAsync(string parent, string filter, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/versions&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListVersionsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new version for the specified site.
		/// Firebasehosting_sites_versions_create v1beta1/{parent}/versions
		/// </summary>
		/// <param name="parent">Required. The site in which to create the version, in the format: sites/ SITE_ID</param>
		/// <param name="sizeBytes">The self-reported size of the version. This value is used for a pre-emptive quota check for legacy version uploads.</param>
		/// <param name="versionId">A unique id for the new version. This is was only specified for legacy version creations, and should be blank.</param>
		/// <returns>Successful response</returns>
		public async Task<Version> Firebasehosting_sites_versions_createAsync(string parent, string sizeBytes, string versionId, Version requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/versions&sizeBytes=" + (sizeBytes==null? "" : System.Uri.EscapeDataString(sizeBytes))+"&versionId=" + (versionId==null? "" : System.Uri.EscapeDataString(versionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Version>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new version on the specified target site using the content of the specified version.
		/// Firebasehosting_sites_versions_clone v1beta1/{parent}/versions:clone
		/// </summary>
		/// <param name="parent">Required. The target site for the cloned version, in the format: sites/ SITE_ID</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Firebasehosting_sites_versions_cloneAsync(string parent, CloneVersionRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/versions:clone";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Adds content files to the specified version. Each file must be under 2 GB.
		/// Firebasehosting_sites_versions_populateFiles v1beta1/{parent}:populateFiles
		/// </summary>
		/// <param name="parent">Required. The version to which to add files, in the format: sites/SITE_ID /versions/VERSION_ID</param>
		/// <returns>Successful response</returns>
		public async Task<PopulateVersionFilesResponse> Firebasehosting_sites_versions_populateFilesAsync(string parent, PopulateVersionFilesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+":populateFiles";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PopulateVersionFilesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
