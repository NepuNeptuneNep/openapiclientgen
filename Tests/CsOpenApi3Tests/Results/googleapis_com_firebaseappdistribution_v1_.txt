//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Information to read/write to blobstore2.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GdataBlobstore2Info
	{
		
		/// <summary>
		/// The blob generation id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="blobGeneration")]
		public string BlobGeneration { get; set; }
		
		/// <summary>
		/// The blob id, e.g., /blobstore/prod/playground/scotty
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="blobId")]
		public string BlobId { get; set; }
		
		/// <summary>
		/// Read handle passed from Bigstore -> Scotty for a GCS download. This is a signed, serialized blobstore2.ReadHandle proto which must never be set outside of Bigstore, and is not applicable to non-GCS media downloads.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="downloadReadHandle")]
		public string DownloadReadHandle { get; set; }
		
		/// <summary>
		/// The blob read token. Needed to read blobs that have not been replicated. Might not be available until the final call.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="readToken")]
		public string ReadToken { get; set; }
		
		/// <summary>
		/// Metadata passed from Blobstore -> Scotty for a new GCS upload. This is a signed, serialized blobstore2.BlobMetadataContainer proto which must never be consumed outside of Bigstore, and is not applicable to non-GCS media uploads.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uploadMetadataContainer")]
		public string UploadMetadataContainer { get; set; }
	}
	
	/// <summary>
	/// A sequence of media data references representing composite data. Introduced to support Bigstore composite objects. For details, visit http://go/bigstore-composites.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GdataCompositeMedia
	{
		
		/// <summary>
		/// Blobstore v1 reference, set if reference_type is BLOBSTORE_REF This should be the byte representation of a blobstore.BlobRef. Since Blobstore is deprecating v1, use blobstore2_info instead. For now, any v2 blob will also be represented in this field as v1 BlobRef.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="blobRef")]
		public string BlobRef { get; set; }
		
		/// <summary>
		/// Information to read/write to blobstore2.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="blobstore2Info")]
		public GdataBlobstore2Info Blobstore2Info { get; set; }
		
		/// <summary>
		/// A binary data reference for a media download. Serves as a technology-agnostic binary reference in some Google infrastructure. This value is a serialized storage_cosmo.BinaryReference proto. Storing it as bytes is a hack to get around the fact that the cosmo proto (as well as others it includes) doesn't support JavaScript. This prevents us from including the actual type of this field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cosmoBinaryReference")]
		public string CosmoBinaryReference { get; set; }
		
		/// <summary>
		/// crc32.c hash for the payload.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="crc32cHash")]
		public System.Nullable<System.UInt32> Crc32cHash { get; set; }
		
		/// <summary>
		/// Media data, set if reference_type is INLINE
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inline")]
		public string Inline { get; set; }
		
		/// <summary>
		/// Size of the data, in bytes
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="length")]
		public string Length { get; set; }
		
		/// <summary>
		/// MD5 hash for the payload.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="md5Hash")]
		public string Md5Hash { get; set; }
		
		/// <summary>
		/// This is a copy of the tech.blob.ObjectId proto, which could not be used directly here due to transitive closure issues with JavaScript support; see http://b/8801763.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectId")]
		public GdataObjectId ObjectId { get; set; }
		
		/// <summary>
		/// Path to the data, set if reference_type is PATH
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="path")]
		public string Path { get; set; }
		
		/// <summary>
		/// Describes what the field reference contains.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="referenceType")]
		public System.Nullable<GdataCompositeMediaReferenceType> ReferenceType { get; set; }
		
		/// <summary>
		/// SHA-1 hash for the payload.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sha1Hash")]
		public string Sha1Hash { get; set; }
	}
	
	/// <summary>
	/// This is a copy of the tech.blob.ObjectId proto, which could not be used directly here due to transitive closure issues with JavaScript support; see http://b/8801763.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GdataObjectId
	{
		
		/// <summary>
		/// The name of the bucket to which this object belongs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bucketName")]
		public string BucketName { get; set; }
		
		/// <summary>
		/// Generation of the object. Generations are monotonically increasing across writes, allowing them to be be compared to determine which generation is newer. If this is omitted in a request, then you are requesting the live object. See http://go/bigstore-versions
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="generation")]
		public string Generation { get; set; }
		
		/// <summary>
		/// The name of the object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectName")]
		public string ObjectName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GdataCompositeMediaReferenceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PATH = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BLOB_REF = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INLINE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BIGSTORE_REF = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COSMO_BINARY_REFERENCE = 4,
	}
	
	/// <summary>
	/// Detailed Content-Type information from Scotty. The Content-Type of the media will typically be filled in by the header or Scotty's best_guess, but this extended information provides the backend with more information so that it can make a better decision if needed. This is only used on media upload requests from Scotty.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GdataContentTypeInfo
	{
		
		/// <summary>
		/// Scotty's best guess of what the content type of the file is.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bestGuess")]
		public string BestGuess { get; set; }
		
		/// <summary>
		/// The content type of the file derived by looking at specific bytes (i.e. "magic bytes") of the actual file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fromBytes")]
		public string FromBytes { get; set; }
		
		/// <summary>
		/// The content type of the file derived from the file extension of the original file name used by the client.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fromFileName")]
		public string FromFileName { get; set; }
		
		/// <summary>
		/// The content type of the file as specified in the request headers, multipart headers, or RUPIO start request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fromHeader")]
		public string FromHeader { get; set; }
		
		/// <summary>
		/// The content type of the file derived from the file extension of the URL path. The URL path is assumed to represent a file name (which is typically only true for agents that are providing a REST API).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fromUrlPath")]
		public string FromUrlPath { get; set; }
	}
	
	/// <summary>
	/// Backend response for a Diff get checksums response. For details on the Scotty Diff protocol, visit http://go/scotty-diff-protocol.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GdataDiffChecksumsResponse
	{
		
		/// <summary>
		/// A sequence of media data references representing composite data. Introduced to support Bigstore composite objects. For details, visit http://go/bigstore-composites.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="checksumsLocation")]
		public GdataCompositeMedia ChecksumsLocation { get; set; }
		
		/// <summary>
		/// The chunk size of checksums. Must be a multiple of 256KB.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="chunkSizeBytes")]
		public string ChunkSizeBytes { get; set; }
		
		/// <summary>
		/// A sequence of media data references representing composite data. Introduced to support Bigstore composite objects. For details, visit http://go/bigstore-composites.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectLocation")]
		public GdataCompositeMedia ObjectLocation { get; set; }
		
		/// <summary>
		/// The total size of the server object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectSizeBytes")]
		public string ObjectSizeBytes { get; set; }
		
		/// <summary>
		/// The object version of the object the checksums are being returned for.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectVersion")]
		public string ObjectVersion { get; set; }
	}
	
	/// <summary>
	/// Backend response for a Diff download response. For details on the Scotty Diff protocol, visit http://go/scotty-diff-protocol.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GdataDiffDownloadResponse
	{
		
		/// <summary>
		/// A sequence of media data references representing composite data. Introduced to support Bigstore composite objects. For details, visit http://go/bigstore-composites.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectLocation")]
		public GdataCompositeMedia ObjectLocation { get; set; }
	}
	
	/// <summary>
	/// A Diff upload request. For details on the Scotty Diff protocol, visit http://go/scotty-diff-protocol.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GdataDiffUploadRequest
	{
		
		/// <summary>
		/// A sequence of media data references representing composite data. Introduced to support Bigstore composite objects. For details, visit http://go/bigstore-composites.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="checksumsInfo")]
		public GdataCompositeMedia ChecksumsInfo { get; set; }
		
		/// <summary>
		/// A sequence of media data references representing composite data. Introduced to support Bigstore composite objects. For details, visit http://go/bigstore-composites.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectInfo")]
		public GdataCompositeMedia ObjectInfo { get; set; }
		
		/// <summary>
		/// The object version of the object that is the base version the incoming diff script will be applied to. This field will always be filled in.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectVersion")]
		public string ObjectVersion { get; set; }
	}
	
	/// <summary>
	/// Backend response for a Diff upload request. For details on the Scotty Diff protocol, visit http://go/scotty-diff-protocol.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GdataDiffUploadResponse
	{
		
		/// <summary>
		/// The object version of the object at the server. Must be included in the end notification response. The version in the end notification response must correspond to the new version of the object that is now stored at the server, after the upload.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectVersion")]
		public string ObjectVersion { get; set; }
		
		/// <summary>
		/// A sequence of media data references representing composite data. Introduced to support Bigstore composite objects. For details, visit http://go/bigstore-composites.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originalObject")]
		public GdataCompositeMedia OriginalObject { get; set; }
	}
	
	/// <summary>
	/// Backend response for a Diff get version response. For details on the Scotty Diff protocol, visit http://go/scotty-diff-protocol.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GdataDiffVersionResponse
	{
		
		/// <summary>
		/// The total size of the server object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectSizeBytes")]
		public string ObjectSizeBytes { get; set; }
		
		/// <summary>
		/// The version of the object stored at the server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectVersion")]
		public string ObjectVersion { get; set; }
	}
	
	/// <summary>
	/// Parameters specific to media downloads.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GdataDownloadParameters
	{
		
		/// <summary>
		/// A boolean to be returned in the response to Scotty. Allows/disallows gzip encoding of the payload content when the server thinks it's advantageous (hence, does not guarantee compression) which allows Scotty to GZip the response to the client.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowGzipCompression")]
		public System.Nullable<System.Boolean> AllowGzipCompression { get; set; }
		
		/// <summary>
		/// Determining whether or not Apiary should skip the inclusion of any Content-Range header on its response to Scotty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ignoreRange")]
		public System.Nullable<System.Boolean> IgnoreRange { get; set; }
	}
	
	/// <summary>
	/// A reference to data stored on the filesystem, on GFS or in blobstore.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GdataMedia
	{
		
		/// <summary>
		/// Deprecated, use one of explicit hash type fields instead. Algorithm used for calculating the hash. As of 2011/01/21, "MD5" is the only possible value for this field. New values may be added at any time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="algorithm")]
		public string Algorithm { get; set; }
		
		/// <summary>
		/// Use object_id instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bigstoreObjectRef")]
		public string BigstoreObjectRef { get; set; }
		
		/// <summary>
		/// Blobstore v1 reference, set if reference_type is BLOBSTORE_REF This should be the byte representation of a blobstore.BlobRef. Since Blobstore is deprecating v1, use blobstore2_info instead. For now, any v2 blob will also be represented in this field as v1 BlobRef.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="blobRef")]
		public string BlobRef { get; set; }
		
		/// <summary>
		/// Information to read/write to blobstore2.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="blobstore2Info")]
		public GdataBlobstore2Info Blobstore2Info { get; set; }
		
		/// <summary>
		/// A composite media composed of one or more media objects, set if reference_type is COMPOSITE_MEDIA. The media length field must be set to the sum of the lengths of all composite media objects. Note: All composite media must have length specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="compositeMedia")]
		public GdataCompositeMedia[] CompositeMedia { get; set; }
		
		/// <summary>
		/// MIME type of the data
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentType")]
		public string ContentType { get; set; }
		
		/// <summary>
		/// Detailed Content-Type information from Scotty. The Content-Type of the media will typically be filled in by the header or Scotty's best_guess, but this extended information provides the backend with more information so that it can make a better decision if needed. This is only used on media upload requests from Scotty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentTypeInfo")]
		public GdataContentTypeInfo ContentTypeInfo { get; set; }
		
		/// <summary>
		/// A binary data reference for a media download. Serves as a technology-agnostic binary reference in some Google infrastructure. This value is a serialized storage_cosmo.BinaryReference proto. Storing it as bytes is a hack to get around the fact that the cosmo proto (as well as others it includes) doesn't support JavaScript. This prevents us from including the actual type of this field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cosmoBinaryReference")]
		public string CosmoBinaryReference { get; set; }
		
		/// <summary>
		/// For Scotty Uploads: Scotty-provided hashes for uploads For Scotty Downloads: (WARNING: DO NOT USE WITHOUT PERMISSION FROM THE SCOTTY TEAM.) A Hash provided by the agent to be used to verify the data being downloaded. Currently only supported for inline payloads. Further, only crc32c_hash is currently supported.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="crc32cHash")]
		public System.Nullable<System.UInt32> Crc32cHash { get; set; }
		
		/// <summary>
		/// Backend response for a Diff get checksums response. For details on the Scotty Diff protocol, visit http://go/scotty-diff-protocol.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="diffChecksumsResponse")]
		public GdataDiffChecksumsResponse DiffChecksumsResponse { get; set; }
		
		/// <summary>
		/// Backend response for a Diff download response. For details on the Scotty Diff protocol, visit http://go/scotty-diff-protocol.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="diffDownloadResponse")]
		public GdataDiffDownloadResponse DiffDownloadResponse { get; set; }
		
		/// <summary>
		/// A Diff upload request. For details on the Scotty Diff protocol, visit http://go/scotty-diff-protocol.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="diffUploadRequest")]
		public GdataDiffUploadRequest DiffUploadRequest { get; set; }
		
		/// <summary>
		/// Backend response for a Diff upload request. For details on the Scotty Diff protocol, visit http://go/scotty-diff-protocol.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="diffUploadResponse")]
		public GdataDiffUploadResponse DiffUploadResponse { get; set; }
		
		/// <summary>
		/// Backend response for a Diff get version response. For details on the Scotty Diff protocol, visit http://go/scotty-diff-protocol.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="diffVersionResponse")]
		public GdataDiffVersionResponse DiffVersionResponse { get; set; }
		
		/// <summary>
		/// Parameters specific to media downloads.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="downloadParameters")]
		public GdataDownloadParameters DownloadParameters { get; set; }
		
		/// <summary>
		/// Original file name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filename")]
		public string Filename { get; set; }
		
		/// <summary>
		/// Deprecated, use one of explicit hash type fields instead. These two hash related fields will only be populated on Scotty based media uploads and will contain the content of the hash group in the NotificationRequest: http://cs/#google3/uploader/service/proto/upload_listener.proto&q=class:Hash Hex encoded hash value of the uploaded media.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hash")]
		public string Hash { get; set; }
		
		/// <summary>
		/// For Scotty uploads only. If a user sends a hash code and the backend has requested that Scotty verify the upload against the client hash, Scotty will perform the check on behalf of the backend and will reject it if the hashes don't match. This is set to true if Scotty performed this verification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hashVerified")]
		public System.Nullable<System.Boolean> HashVerified { get; set; }
		
		/// <summary>
		/// Media data, set if reference_type is INLINE
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inline")]
		public string Inline { get; set; }
		
		/// <summary>
		/// |is_potential_retry| is set false only when Scotty is certain that it has not sent the request before. When a client resumes an upload, this field must be set true in agent calls, because Scotty cannot be certain that it has never sent the request before due to potential failure in the session state persistence.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isPotentialRetry")]
		public System.Nullable<System.Boolean> IsPotentialRetry { get; set; }
		
		/// <summary>
		/// Size of the data, in bytes
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="length")]
		public string Length { get; set; }
		
		/// <summary>
		/// Scotty-provided MD5 hash for an upload.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="md5Hash")]
		public string Md5Hash { get; set; }
		
		/// <summary>
		/// Media id to forward to the operation GetMedia. Can be set if reference_type is GET_MEDIA.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mediaId")]
		public string MediaId { get; set; }
		
		/// <summary>
		/// This is a copy of the tech.blob.ObjectId proto, which could not be used directly here due to transitive closure issues with JavaScript support; see http://b/8801763.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectId")]
		public GdataObjectId ObjectId { get; set; }
		
		/// <summary>
		/// Path to the data, set if reference_type is PATH
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="path")]
		public string Path { get; set; }
		
		/// <summary>
		/// Describes what the field reference contains.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="referenceType")]
		public System.Nullable<GdataMediaReferenceType> ReferenceType { get; set; }
		
		/// <summary>
		/// Scotty-provided SHA1 hash for an upload.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sha1Hash")]
		public string Sha1Hash { get; set; }
		
		/// <summary>
		/// Scotty-provided SHA256 hash for an upload.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sha256Hash")]
		public string Sha256Hash { get; set; }
		
		/// <summary>
		/// Time at which the media data was last updated, in milliseconds since UNIX epoch
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public string Timestamp { get; set; }
		
		/// <summary>
		/// A unique fingerprint/version id for the media data
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="token")]
		public string Token { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GdataMediaReferenceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PATH = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BLOB_REF = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INLINE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GET_MEDIA = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPOSITE_MEDIA = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BIGSTORE_REF = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DIFF_VERSION_RESPONSE = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DIFF_CHECKSUMS_RESPONSE = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DIFF_DOWNLOAD_RESPONSE = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DIFF_UPLOAD_REQUEST = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DIFF_UPLOAD_RESPONSE = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COSMO_BINARY_REFERENCE = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ARBITRARY_BYTES = 12,
	}
	
	/// <summary>
	/// Android App Bundle (AAB) information for a Firebase app.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirebaseAppdistroV1AabInfo
	{
		
		/// <summary>
		/// App bundle integration state. Only valid for android apps.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="integrationState")]
		public System.Nullable<GoogleFirebaseAppdistroV1AabInfoIntegrationState> IntegrationState { get; set; }
		
		/// <summary>
		/// The name of the `AabInfo` resource. Format: `projects/{project_number}/apps/{app}/aabInfo`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// App bundle test certificate
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="testCertificate")]
		public GoogleFirebaseAppdistroV1TestCertificate TestCertificate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GoogleFirebaseAppdistroV1AabInfoIntegrationState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AAB_INTEGRATION_STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTEGRATED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PLAY_ACCOUNT_NOT_LINKED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_APP_WITH_GIVEN_BUNDLE_ID_IN_PLAY_ACCOUNT = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APP_NOT_PUBLISHED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AAB_STATE_UNAVAILABLE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PLAY_IAS_TERMS_NOT_ACCEPTED = 6,
	}
	
	/// <summary>
	/// App bundle test certificate
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirebaseAppdistroV1TestCertificate
	{
		
		/// <summary>
		/// Hex string of MD5 hash of the test certificate used to resign the AAB
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hashMd5")]
		public string HashMd5 { get; set; }
		
		/// <summary>
		/// Hex string of SHA1 hash of the test certificate used to resign the AAB
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hashSha1")]
		public string HashSha1 { get; set; }
		
		/// <summary>
		/// Hex string of SHA256 hash of the test certificate used to resign the AAB
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hashSha256")]
		public string HashSha256 { get; set; }
	}
	
	/// <summary>
	/// The Request message for batch adding testers
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirebaseAppdistroV1BatchAddTestersRequest
	{
		
		/// <summary>
		/// Required. The email addresses of the tester resources to create. A maximum of 999 and a minimum of 1 tester can be created in a batch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="emails")]
		public string[] Emails { get; set; }
	}
	
	/// <summary>
	/// The Response message for `BatchAddTesters`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirebaseAppdistroV1BatchAddTestersResponse
	{
		
		/// <summary>
		/// The testers which are created and/or already exist
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="testers")]
		public GoogleFirebaseAppdistroV1Tester[] Testers { get; set; }
	}
	
	/// <summary>
	/// A person that can be invited to test apps in a Firebase project.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirebaseAppdistroV1Tester
	{
		
		/// <summary>
		/// The name of the tester associated with the Google account used to accept the tester invitation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// The resource names of the groups this tester belongs to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="groups")]
		public string[] Groups { get; set; }
		
		/// <summary>
		/// Output only. The time the tester was last active. This is the most recent time the tester installed one of the apps. If they've never installed one or if the release no longer exists, this is the time the tester was added to the project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastActivityTime")]
		public string LastActivityTime { get; set; }
		
		/// <summary>
		/// The name of the tester resource. Format: `projects/{project_number}/testers/{email_address}`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// The request message for `BatchDeleteReleases`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirebaseAppdistroV1BatchDeleteReleasesRequest
	{
		
		/// <summary>
		/// Required. The names of the release resources to delete. Format: `projects/{project_number}/apps/{app_id}/releases/{release_id}` A maximum of 100 releases can be deleted per request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="names")]
		public string[] Names { get; set; }
	}
	
	/// <summary>
	/// The request message for `BatchJoinGroup`
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirebaseAppdistroV1BatchJoinGroupRequest
	{
		
		/// <summary>
		/// Indicates whether to create tester resources based on `emails` if they don't exist yet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createMissingTesters")]
		public System.Nullable<System.Boolean> CreateMissingTesters { get; set; }
		
		/// <summary>
		/// Required. The emails of the testers to be added to the group. A maximum of 999 and a minimum of 1 tester can be created in a batch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="emails")]
		public string[] Emails { get; set; }
	}
	
	/// <summary>
	/// Request message for `BatchLeaveGroup`
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirebaseAppdistroV1BatchLeaveGroupRequest
	{
		
		/// <summary>
		/// Required. The email addresses of the testers to be removed from the group. A maximum of 999 and a minimum of 1 testers can be removed in a batch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="emails")]
		public string[] Emails { get; set; }
	}
	
	/// <summary>
	/// The request message for `BatchRemoveTesters`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirebaseAppdistroV1BatchRemoveTestersRequest
	{
		
		/// <summary>
		/// Required. The email addresses of the tester resources to removed. A maximum of 999 and a minimum of 1 testers can be deleted in a batch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="emails")]
		public string[] Emails { get; set; }
	}
	
	/// <summary>
	/// The response message for `BatchRemoveTesters`
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirebaseAppdistroV1BatchRemoveTestersResponse
	{
		
		/// <summary>
		/// List of deleted tester emails
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="emails")]
		public string[] Emails { get; set; }
	}
	
	/// <summary>
	/// The request message for `DistributeRelease`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirebaseAppdistroV1DistributeReleaseRequest
	{
		
		/// <summary>
		/// A list of group aliases (IDs) to be given access to this release. A combined maximum of 999 `testerEmails` and `groupAliases` can be specified in a single request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="groupAliases")]
		public string[] GroupAliases { get; set; }
		
		/// <summary>
		/// A list of tester email addresses to be given access to this release. A combined maximum of 999 `testerEmails` and `groupAliases` can be specified in a single request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="testerEmails")]
		public string[] TesterEmails { get; set; }
	}
	
	/// <summary>
	/// The response message for `DistributeRelease`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirebaseAppdistroV1DistributeReleaseResponse
	{
	}
	
	/// <summary>
	/// A feedback report submitted by a tester for a release.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirebaseAppdistroV1FeedbackReport
	{
		
		/// <summary>
		/// Output only. The time when the feedback report was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// Output only. A link to the Firebase console displaying the feedback report.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firebaseConsoleUri")]
		public string FirebaseConsoleUri { get; set; }
		
		/// <summary>
		/// The name of the feedback report resource. Format: `projects/{project_number}/apps/{app}/releases/{release}/feedbackReports/{feedback_report}`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Output only. A signed link (which expires in one hour) that lets you directly download the screenshot.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="screenshotUri")]
		public string ScreenshotUri { get; set; }
		
		/// <summary>
		/// Output only. The resource name of the tester who submitted the feedback report.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tester")]
		public string Tester { get; set; }
		
		/// <summary>
		/// Output only. The text of the feedback report.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
	}
	
	/// <summary>
	/// A group which can contain testers. A group can be invited to test apps in a Firebase project.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirebaseAppdistroV1Group
	{
		
		/// <summary>
		/// Required. The display name of the group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Output only. The number of invite links for this group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inviteLinkCount")]
		public System.Nullable<System.Int32> InviteLinkCount { get; set; }
		
		/// <summary>
		/// The name of the group resource. Format: `projects/{project_number}/groups/{group_alias}`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Output only. The number of releases this group is permitted to access.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="releaseCount")]
		public System.Nullable<System.Int32> ReleaseCount { get; set; }
		
		/// <summary>
		/// Output only. The number of testers who are members of this group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="testerCount")]
		public System.Nullable<System.Int32> TesterCount { get; set; }
	}
	
	/// <summary>
	/// The response message for `ListFeedbackReports`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirebaseAppdistroV1ListFeedbackReportsResponse
	{
		
		/// <summary>
		/// The feedback reports
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="feedbackReports")]
		public GoogleFirebaseAppdistroV1FeedbackReport[] FeedbackReports { get; set; }
		
		/// <summary>
		/// A short-lived token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted, there are no subsequent pages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// The response message for `ListGroups`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirebaseAppdistroV1ListGroupsResponse
	{
		
		/// <summary>
		/// The groups listed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="groups")]
		public GoogleFirebaseAppdistroV1Group[] Groups { get; set; }
		
		/// <summary>
		/// A short-lived token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted, there are no subsequent pages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// The response message for `ListReleases`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirebaseAppdistroV1ListReleasesResponse
	{
		
		/// <summary>
		/// A short-lived token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted, there are no subsequent pages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// The releases
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="releases")]
		public GoogleFirebaseAppdistroV1Release[] Releases { get; set; }
	}
	
	/// <summary>
	/// A release of a Firebase app.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirebaseAppdistroV1Release
	{
		
		/// <summary>
		/// Output only. A signed link (which expires in one hour) to directly download the app binary (IPA/APK/AAB) file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="binaryDownloadUri")]
		public string BinaryDownloadUri { get; set; }
		
		/// <summary>
		/// Output only. Build version of the release. For an Android release, the build version is the `versionCode`. For an iOS release, the build version is the `CFBundleVersion`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buildVersion")]
		public string BuildVersion { get; set; }
		
		/// <summary>
		/// Output only. The time the release was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// Output only. Display version of the release. For an Android release, the display version is the `versionName`. For an iOS release, the display version is the `CFBundleShortVersionString`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayVersion")]
		public string DisplayVersion { get; set; }
		
		/// <summary>
		/// Output only. A link to the Firebase console displaying a single release.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firebaseConsoleUri")]
		public string FirebaseConsoleUri { get; set; }
		
		/// <summary>
		/// The name of the release resource. Format: `projects/{project_number}/apps/{app_id}/releases/{release_id}`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Notes that belong to a release.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="releaseNotes")]
		public GoogleFirebaseAppdistroV1ReleaseNotes ReleaseNotes { get; set; }
		
		/// <summary>
		/// Output only. A link to the release in the tester web clip or Android app that lets testers (which were granted access to the app) view release notes and install the app onto their devices.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="testingUri")]
		public string TestingUri { get; set; }
	}
	
	/// <summary>
	/// Notes that belong to a release.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirebaseAppdistroV1ReleaseNotes
	{
		
		/// <summary>
		/// The text of the release notes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
	}
	
	/// <summary>
	/// The response message for `ListTesters`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirebaseAppdistroV1ListTestersResponse
	{
		
		/// <summary>
		/// A short-lived token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted, there are no subsequent pages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// The testers listed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="testers")]
		public GoogleFirebaseAppdistroV1Tester[] Testers { get; set; }
	}
	
	/// <summary>
	/// Operation metadata for `UploadRelease`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirebaseAppdistroV1UploadReleaseMetadata
	{
	}
	
	/// <summary>
	/// Request message for `UploadRelease`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirebaseAppdistroV1UploadReleaseRequest
	{
		
		/// <summary>
		/// A reference to data stored on the filesystem, on GFS or in blobstore.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="blob")]
		public GdataMedia Blob { get; set; }
	}
	
	/// <summary>
	/// Response message for `UploadRelease`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirebaseAppdistroV1UploadReleaseResponse
	{
		
		/// <summary>
		/// A release of a Firebase app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="release")]
		public GoogleFirebaseAppdistroV1Release Release { get; set; }
		
		/// <summary>
		/// Result of upload release.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="result")]
		public System.Nullable<GoogleFirebaseAppdistroV1UploadReleaseResponseResult> Result { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GoogleFirebaseAppdistroV1UploadReleaseResponseResult
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPLOAD_RELEASE_RESULT_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RELEASE_CREATED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RELEASE_UPDATED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RELEASE_UNMODIFIED = 3,
	}
	
	/// <summary>
	/// The request message for Operations.CancelOperation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleLongrunningCancelOperationRequest
	{
	}
	
	/// <summary>
	/// The response message for Operations.ListOperations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleLongrunningListOperationsResponse
	{
		
		/// <summary>
		/// The standard List next-page token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// A list of operations that matches the specified filter in the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operations")]
		public GoogleLongrunningOperation[] Operations { get; set; }
	}
	
	/// <summary>
	/// This resource represents a long-running operation that is the result of a network API call.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleLongrunningOperation
	{
		
		/// <summary>
		/// If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="done")]
		public System.Nullable<System.Boolean> Done { get; set; }
		
		/// <summary>
		/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public GoogleRpcStatus Error { get; set; }
		
		/// <summary>
		/// Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public System.Collections.Generic.Dictionary<string, object> Metadata { get; set; }
		
		/// <summary>
		/// The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="response")]
		public System.Collections.Generic.Dictionary<string, object> Response { get; set; }
	}
	
	/// <summary>
	/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleRpcStatus
	{
		
		/// <summary>
		/// The status code, which should be an enum value of google.rpc.Code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		/// <summary>
		/// A list of messages that carry the error details. There is a common set of message types for APIs to use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string[] Details { get; set; }
		
		/// <summary>
		/// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// The request message for Operations.WaitOperation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleLongrunningWaitOperationRequest
	{
		
		/// <summary>
		/// The maximum duration to wait before timing out. If left blank, the wait will be at most the time permitted by the underlying HTTP/RPC protocol. If RPC context deadline is also specified, the shorter one will be used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeout")]
		public string Timeout { get; set; }
	}
	
	/// <summary>
	/// A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleProtobufEmpty
	{
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Batch adds members to a group. The testers will gain access to all releases that the groups have access to.
		/// Firebaseappdistribution_projects_groups_batchJoin v1/{group}:batchJoin
		/// </summary>
		/// <param name="group">Required. The name of the group resource to which testers are added. Format: `projects/{project_number}/groups/{group_alias}`</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleProtobufEmpty> Firebaseappdistribution_projects_groups_batchJoinAsync(string group, GoogleFirebaseAppdistroV1BatchJoinGroupRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (group==null? "" : System.Uri.EscapeDataString(group))+":batchJoin";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GoogleProtobufEmpty>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Batch removed members from a group. The testers will lose access to all releases that the groups have access to.
		/// Firebaseappdistribution_projects_groups_batchLeave v1/{group}:batchLeave
		/// </summary>
		/// <param name="group">Required. The name of the group resource from which testers are removed. Format: `projects/{project_number}/groups/{group_alias}`</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleProtobufEmpty> Firebaseappdistribution_projects_groups_batchLeaveAsync(string group, GoogleFirebaseAppdistroV1BatchLeaveGroupRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (group==null? "" : System.Uri.EscapeDataString(group))+":batchLeave";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GoogleProtobufEmpty>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a group.
		/// Firebaseappdistribution_projects_groups_delete v1/{name}
		/// </summary>
		/// <param name="name">Required. The name of the group resource. Format: `projects/{project_number}/groups/{group_alias}`</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleProtobufEmpty> Firebaseappdistribution_projects_groups_deleteAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GoogleProtobufEmpty>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a group.
		/// Firebaseappdistribution_projects_groups_get v1/{name}
		/// </summary>
		/// <param name="name">Required. The name of the group resource to retrieve. Format: `projects/{project_number}/groups/{group_alias}`</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleFirebaseAppdistroV1Group> Firebaseappdistribution_projects_groups_getAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GoogleFirebaseAppdistroV1Group>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a tester. If the testers joins a group they gain access to all releases that the group has access to.
		/// Firebaseappdistribution_projects_testers_patch v1/{name}
		/// </summary>
		/// <param name="name">The name of the tester resource. Format: `projects/{project_number}/testers/{email_address}`</param>
		/// <param name="updateMask">The list of fields to update.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleFirebaseAppdistroV1Tester> Firebaseappdistribution_projects_testers_patchAsync(string name, string updateMask, GoogleFirebaseAppdistroV1Tester requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&updateMask=" + (updateMask==null? "" : System.Uri.EscapeDataString(updateMask));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GoogleFirebaseAppdistroV1Tester>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
		/// Firebaseappdistribution_projects_apps_releases_operations_list v1/{name}/operations
		/// </summary>
		/// <param name="name">The name of the operation's parent resource.</param>
		/// <param name="filter">The standard list filter.</param>
		/// <param name="pageSize">The standard list page size.</param>
		/// <param name="pageToken">The standard list page token.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleLongrunningListOperationsResponse> Firebaseappdistribution_projects_apps_releases_operations_listAsync(string name, string filter, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/operations&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GoogleLongrunningListOperationsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
		/// Firebaseappdistribution_projects_apps_releases_operations_cancel v1/{name}:cancel
		/// </summary>
		/// <param name="name">The name of the operation resource to be cancelled.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleProtobufEmpty> Firebaseappdistribution_projects_apps_releases_operations_cancelAsync(string name, GoogleLongrunningCancelOperationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":cancel";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GoogleProtobufEmpty>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Distributes a release to testers. This call does the following: 1. Creates testers for the specified emails, if none exist. 2. Adds the testers and groups to the release. 3. Sends new testers an invitation email. 4. Sends existing testers a new release email. The request will fail with a `INVALID_ARGUMENT` if it contains a group that doesn't exist.
		/// Firebaseappdistribution_projects_apps_releases_distribute v1/{name}:distribute
		/// </summary>
		/// <param name="name">Required. The name of the release resource to distribute. Format: `projects/{project_number}/apps/{app_id}/releases/{release_id}`</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleFirebaseAppdistroV1DistributeReleaseResponse> Firebaseappdistribution_projects_apps_releases_distributeAsync(string name, GoogleFirebaseAppdistroV1DistributeReleaseRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":distribute";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GoogleFirebaseAppdistroV1DistributeReleaseResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Waits until the specified long-running operation is done or reaches at most a specified timeout, returning the latest state. If the operation is already done, the latest state is immediately returned. If the timeout specified is greater than the default HTTP/RPC timeout, the HTTP/RPC timeout is used. If the server does not support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Note that this method is on a best-effort basis. It may return the latest state before the specified timeout (including immediately), meaning even an immediate response is no guarantee that the operation is done.
		/// Firebaseappdistribution_projects_apps_releases_operations_wait v1/{name}:wait
		/// </summary>
		/// <param name="name">The name of the operation resource to wait on.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleLongrunningOperation> Firebaseappdistribution_projects_apps_releases_operations_waitAsync(string name, GoogleLongrunningWaitOperationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":wait";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GoogleLongrunningOperation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists feedback reports. By default, sorts by `createTime` in descending order.
		/// Firebaseappdistribution_projects_apps_releases_feedbackReports_list v1/{parent}/feedbackReports
		/// </summary>
		/// <param name="parent">Required. The name of the release resource, which is the parent of the feedback report resources. Format: `projects/{project_number}/apps/{app}/releases/{release}`</param>
		/// <param name="pageSize">The maximum number of feedback reports to return. The service may return fewer than this value. The valid range is [1-100]; If unspecified (0), at most 25 feedback reports are returned. Values above 100 are coerced to 100.</param>
		/// <param name="pageToken">A page token, received from a previous `ListFeedbackReports` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListFeedbackReports` must match the call that provided the page token.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleFirebaseAppdistroV1ListFeedbackReportsResponse> Firebaseappdistribution_projects_apps_releases_feedbackReports_listAsync(string parent, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/feedbackReports&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GoogleFirebaseAppdistroV1ListFeedbackReportsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List groups.
		/// Firebaseappdistribution_projects_groups_list v1/{parent}/groups
		/// </summary>
		/// <param name="parent">Required. The name of the project resource, which is the parent of the group resources. Format: `projects/{project_number}`</param>
		/// <param name="pageSize">Optional. The maximum number of groups to return. The service may return fewer than this value. The valid range is [1-1000]; If unspecified (0), at most 25 groups are returned. Values above 1000 are coerced to 1000.</param>
		/// <param name="pageToken">Optional. A page token, received from a previous `ListGroups` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListGroups` must match the call that provided the page token.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleFirebaseAppdistroV1ListGroupsResponse> Firebaseappdistribution_projects_groups_listAsync(string parent, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/groups&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GoogleFirebaseAppdistroV1ListGroupsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a group.
		/// Firebaseappdistribution_projects_groups_create v1/{parent}/groups
		/// </summary>
		/// <param name="parent">Required. The name of the project resource, which is the parent of the group resource. Format: `projects/{project_number}`</param>
		/// <param name="groupId">Optional. The "alias" to use for the group, which will become the final component of the group's resource name. This value must be unique per project. The field is named `groupId` to comply with AIP guidance for user-specified IDs. This value should be 4-63 characters, and valid characters are `/a-z-/`. If not set, it will be generated based on the display name.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleFirebaseAppdistroV1Group> Firebaseappdistribution_projects_groups_createAsync(string parent, string groupId, GoogleFirebaseAppdistroV1Group requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/groups&groupId=" + (groupId==null? "" : System.Uri.EscapeDataString(groupId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GoogleFirebaseAppdistroV1Group>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists releases. By default, sorts by `createTime` in descending order.
		/// Firebaseappdistribution_projects_apps_releases_list v1/{parent}/releases
		/// </summary>
		/// <param name="parent">Required. The name of the app resource, which is the parent of the release resources. Format: `projects/{project_number}/apps/{app_id}`</param>
		/// <param name="filter">The expression to filter releases listed in the response. To learn more about filtering, refer to [Google's AIP-160 standard](http://aip.dev/160). Supported fields: - `releaseNotes.text` supports `=` (can contain a wildcard character (`*`) at the beginning or end of the string) - `createTime` supports `<`, `<=`, `>` and `>=`, and expects an RFC-3339 formatted string Examples: - `createTime <= "2021-09-08T00:00:00+04:00"` - `releaseNotes.text="fixes" AND createTime >= "2021-09-08T00:00:00.0Z"` - `releaseNotes.text="*v1.0.0-rc*"`</param>
		/// <param name="orderBy">The fields used to order releases. Supported fields: - `createTime` To specify descending order for a field, append a "desc" suffix, for example, `createTime desc`. If this parameter is not set, releases are ordered by `createTime` in descending order.</param>
		/// <param name="pageSize">The maximum number of releases to return. The service may return fewer than this value. The valid range is [1-100]; If unspecified (0), at most 25 releases are returned. Values above 100 are coerced to 100.</param>
		/// <param name="pageToken">A page token, received from a previous `ListReleases` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListReleases` must match the call that provided the page token.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleFirebaseAppdistroV1ListReleasesResponse> Firebaseappdistribution_projects_apps_releases_listAsync(string parent, string filter, string orderBy, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/releases&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&orderBy=" + (orderBy==null? "" : System.Uri.EscapeDataString(orderBy))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GoogleFirebaseAppdistroV1ListReleasesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes releases. A maximum of 100 releases can be deleted per request.
		/// Firebaseappdistribution_projects_apps_releases_batchDelete v1/{parent}/releases:batchDelete
		/// </summary>
		/// <param name="parent">Required. The name of the app resource, which is the parent of the release resources. Format: `projects/{project_number}/apps/{app_id}`</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleProtobufEmpty> Firebaseappdistribution_projects_apps_releases_batchDeleteAsync(string parent, GoogleFirebaseAppdistroV1BatchDeleteReleasesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/releases:batchDelete";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GoogleProtobufEmpty>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists testers and their resource ids.
		/// Firebaseappdistribution_projects_testers_list v1/{parent}/testers
		/// </summary>
		/// <param name="parent">Required. The name of the project resource, which is the parent of the tester resources. Format: `projects/{project_number}`</param>
		/// <param name="filter">Optional. The expression to filter testers listed in the response. To learn more about filtering, refer to [Google's AIP-160 standard](http://aip.dev/160). Supported fields: - `name` - `displayName` - `groups` Example: - `name = "projects/-/testers/*@example.com"` - `displayName = "Joe Sixpack"` - `groups = "projects/*/groups/qa-team"`</param>
		/// <param name="pageSize">Optional. The maximum number of testers to return. The service may return fewer than this value. The valid range is [1-1000]; If unspecified (0), at most 10 testers are returned. Values above 1000 are coerced to 1000.</param>
		/// <param name="pageToken">Optional. A page token, received from a previous `ListTesters` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListTesters` must match the call that provided the page token.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleFirebaseAppdistroV1ListTestersResponse> Firebaseappdistribution_projects_testers_listAsync(string parent, string filter, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/testers&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GoogleFirebaseAppdistroV1ListTestersResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Batch adds testers. This call adds testers for the specified emails if they don't already exist. Returns all testers specified in the request, including newly created and previously existing testers. This action is idempotent.
		/// Firebaseappdistribution_projects_testers_batchAdd v1/{project}/testers:batchAdd
		/// </summary>
		/// <param name="project">Required. The name of the project resource. Format: `projects/{project_number}`</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleFirebaseAppdistroV1BatchAddTestersResponse> Firebaseappdistribution_projects_testers_batchAddAsync(string project, GoogleFirebaseAppdistroV1BatchAddTestersRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/testers:batchAdd";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GoogleFirebaseAppdistroV1BatchAddTestersResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Batch removes testers. If found, this call deletes testers for the specified emails. Returns all deleted testers.
		/// Firebaseappdistribution_projects_testers_batchRemove v1/{project}/testers:batchRemove
		/// </summary>
		/// <param name="project">Required. The name of the project resource. Format: `projects/{project_number}`</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleFirebaseAppdistroV1BatchRemoveTestersResponse> Firebaseappdistribution_projects_testers_batchRemoveAsync(string project, GoogleFirebaseAppdistroV1BatchRemoveTestersRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/testers:batchRemove";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GoogleFirebaseAppdistroV1BatchRemoveTestersResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
