//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BoxScore
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Game Game { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Inning[] Innings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PlayerGame[] PlayerGames { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TeamGame[] TeamGames { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Inning
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> AwayTeamRuns { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> GameID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> HomeTeamRuns { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> InningID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> InningNumber { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PlayerGame
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> AtBats { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> BallsInPlay { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> BattingAverage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> BattingAverageOnBallsInPlay { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> BattingOrder { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> BattingOrderConfirmed { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> CaughtStealing { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Day { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> DoublePlays { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Doubles { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DraftKingsPosition { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DraftKingsSalary { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> EarnedRunAverage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Errors { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FanDuelPosition { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> FanDuelSalary { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> FantasyDataSalary { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FantasyDraftPosition { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> FantasyDraftSalary { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> FantasyPoints { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> FantasyPointsBatting { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> FantasyPointsDraftKings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> FantasyPointsFanDuel { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> FantasyPointsFantasyDraft { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> FantasyPointsPitching { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> FantasyPointsYahoo { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> FieldingIndependentPitching { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> FlyOuts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> GameID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Games { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> GlobalGameID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> GlobalOpponentID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> GlobalTeamID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> GrandSlams { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> GroundIntoDoublePlay { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> GroundOuts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> HitByPitch { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Hits { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string HomeOrAway { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> HomeRuns { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InjuryBodyPart { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InjuryNotes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InjuryStartDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InjuryStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> InningsPitchedDecimal { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> InningsPitchedFull { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> InningsPitchedOuts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> IntentionalWalks { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsGameOver { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> IsolatedPower { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> LeftOnBase { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> LineOuts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Losses { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> OnBasePercentage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> OnBasePlusSlugging { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Opponent { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> OpponentID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> OpponentPositionRank { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> OpponentRank { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Outs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchesSeen { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchesThrown { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchesThrownStrikes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingBallsInPlay { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingBattingAverageAgainst { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingBattingAverageOnBallsInPlay { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingBlownSaves { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingCatchersInterference { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingCompleteGames { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingDoublePlays { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingDoubles { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingEarnedRuns { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingFlyOuts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingGrandSlams { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingGroundIntoDoublePlay { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingGroundOuts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingHitByPitch { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingHits { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingHolds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingHomeRuns { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PitchingInningStarted { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingIntentionalWalks { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingLineOuts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingNoHitters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingOnBasePercentage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingOnBasePlusSlugging { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingPerfectGames { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingPlateAppearances { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingPopOuts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingQualityStarts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingReachedOnError { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingRuns { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingSacrificeFlies { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingSacrifices { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingShutOuts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingSingles { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingSluggingPercentage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingStrikeouts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingStrikeoutsPerNineInnings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingTotalBases { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingTriples { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingWalks { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingWalksPerNineInnings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingWeightedOnBasePercentage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PlateAppearances { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PlayerID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PopOuts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Position { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PositionCategory { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> ReachedOnError { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Runs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> RunsBattedIn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> SacrificeFlies { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Sacrifices { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Saves { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Season { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SeasonType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Singles { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> SluggingPercentage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Started { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> StatID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> StolenBases { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Strikeouts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SubstituteBattingOrder { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SubstituteBattingOrderSequence { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Team { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TeamID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> TotalBases { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> TotalOutsPitched { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Triples { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Updated { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Walks { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> WalksHitsPerInningsPitched { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> WeightedOnBasePercentage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Wins { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string YahooPosition { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> YahooSalary { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TeamGame
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> AtBats { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> BallsInPlay { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> BattingAverage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> BattingAverageOnBallsInPlay { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> BattingOrderConfirmed { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> CaughtStealing { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Day { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> DoublePlays { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Doubles { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> EarnedRunAverage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Errors { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> FantasyPoints { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> FantasyPointsBatting { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> FantasyPointsDraftKings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> FantasyPointsFanDuel { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> FantasyPointsFantasyDraft { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> FantasyPointsPitching { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> FantasyPointsYahoo { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> FieldingIndependentPitching { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> FlyOuts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> GameID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Games { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> GlobalGameID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> GlobalOpponentID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> GlobalTeamID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> GrandSlams { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> GroundIntoDoublePlay { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> GroundOuts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> HitByPitch { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Hits { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string HomeOrAway { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> HomeRuns { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> InningsPitchedDecimal { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> InningsPitchedFull { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> InningsPitchedOuts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> IntentionalWalks { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsGameOver { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> IsolatedPower { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> LeftOnBase { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> LineOuts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Losses { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> OnBasePercentage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> OnBasePlusSlugging { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Opponent { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> OpponentID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Outs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchesSeen { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchesThrown { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchesThrownStrikes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingBallsInPlay { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingBattingAverageAgainst { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingBattingAverageOnBallsInPlay { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingBlownSaves { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingCatchersInterference { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingCompleteGames { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingDoublePlays { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingDoubles { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingEarnedRuns { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingFlyOuts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingGrandSlams { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingGroundIntoDoublePlay { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingGroundOuts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingHitByPitch { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingHits { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingHolds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingHomeRuns { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PitchingInningStarted { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingIntentionalWalks { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingLineOuts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingNoHitters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingOnBasePercentage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingOnBasePlusSlugging { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingPerfectGames { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingPlateAppearances { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingPopOuts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingQualityStarts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingReachedOnError { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingRuns { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingSacrificeFlies { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingSacrifices { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingShutOuts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingSingles { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingSluggingPercentage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingStrikeouts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingStrikeoutsPerNineInnings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingTotalBases { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingTriples { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingWalks { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingWalksPerNineInnings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingWeightedOnBasePercentage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PlateAppearances { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PopOuts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> ReachedOnError { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Runs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> RunsBattedIn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> SacrificeFlies { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Sacrifices { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Saves { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Season { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SeasonType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Singles { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> SluggingPercentage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> StatID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> StolenBases { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Strikeouts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SubstituteBattingOrder { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SubstituteBattingOrderSequence { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Team { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TeamID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> TotalBases { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> TotalOutsPitched { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Triples { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Updated { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Walks { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> WalksHitsPerInningsPitched { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> WeightedOnBasePercentage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Wins { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DfsSlate
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DfsSlateGame[] DfsSlateGames { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DfsSlatePlayer[] DfsSlatePlayers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsMultiDaySlate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NumberOfGames { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Operator { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OperatorDay { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OperatorGameType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OperatorName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> OperatorSlateID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OperatorStartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> RemovedByOperator { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SalaryCap { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SlateID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] SlateRosterSlots { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DfsSlateGame
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Game Game { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> GameID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> OperatorGameID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> RemovedByOperator { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SlateGameID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SlateID { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DfsSlatePlayer
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string OperatorPlayerID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OperatorPlayerName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OperatorPosition { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] OperatorRosterSlots { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> OperatorSalary { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OperatorSlatePlayerID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PlayerGameProjectionStatID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PlayerID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> RemovedByOperator { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SlateGameID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SlateID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SlatePlayerID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Team { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TeamID { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Game
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Attendance { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> AwayRotationNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AwayTeam { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> AwayTeamErrors { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> AwayTeamHits { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> AwayTeamID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> AwayTeamMoneyLine { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> AwayTeamProbablePitcherID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> AwayTeamRuns { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AwayTeamStartingPitcher { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> AwayTeamStartingPitcherID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Balls { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Channel { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CurrentHitter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> CurrentHitterID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> CurrentHittingTeamID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CurrentPitcher { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> CurrentPitcherID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> CurrentPitchingTeamID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DateTimeUTC { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Day { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DueUpHitterID1 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DueUpHitterID2 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DueUpHitterID3 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ForecastDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ForecastTempHigh { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ForecastTempLow { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ForecastWindChill { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ForecastWindDirection { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ForecastWindSpeed { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GameEndDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> GameID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> GlobalAwayTeamID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> GlobalGameID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> GlobalHomeTeamID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> HomeRotationNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string HomeTeam { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> HomeTeamErrors { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> HomeTeamHits { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> HomeTeamID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> HomeTeamMoneyLine { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> HomeTeamProbablePitcherID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> HomeTeamRuns { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string HomeTeamStartingPitcher { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> HomeTeamStartingPitcherID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Inning { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InningDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InningHalf { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Inning[] Innings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsClosed { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LastPlay { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LosingPitcher { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> LosingPitcherID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> NeutralVenue { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Outs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> OverPayout { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> OverUnder { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PointSpread { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PointSpreadAwayTeamMoneyLine { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PointSpreadHomeTeamMoneyLine { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> RescheduledFromGameID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> RescheduledGameID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> RunnerOnFirst { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> RunnerOnSecond { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> RunnerOnThird { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SavingPitcher { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SavingPitcherID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Season { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SeasonType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Series SeriesInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> StadiumID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Strikes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> UnderPayout { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Updated { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string WinningPitcher { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> WinningPitcherID { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class News
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Author { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Categories { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Content { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NewsID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OriginalSource { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OriginalSourceUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PlayerID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PlayerID2 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Source { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Team { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Team2 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TeamID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TeamID2 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TermsOfUse { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TimeAgo { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Title { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Updated { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Player
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string BatHand { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BirthCity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BirthCountry { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BirthDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BirthState { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string College { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DraftKingsName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DraftKingsPlayerID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Experience { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FanDuelName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> FanDuelPlayerID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> FantasyAlarmPlayerID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FantasyDraftName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> FantasyDraftPlayerID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FirstName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> GlobalTeamID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Height { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string HighSchool { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InjuryBodyPart { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InjuryNotes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InjuryStartDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InjuryStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Jersey { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LastName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MLBAMID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PhotoUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PlayerID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Position { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PositionCategory { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProDebut { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> RotoWirePlayerID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> RotoworldPlayerID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Salary { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SportRadarPlayerID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SportsDataID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SportsDirectPlayerID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> StatsPlayerID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Team { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TeamID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ThrowHand { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> UpcomingGameID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string UsaTodayHeadshotNoBackgroundUpdated { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string UsaTodayHeadshotNoBackgroundUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string UsaTodayHeadshotUpdated { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string UsaTodayHeadshotUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> UsaTodayPlayerID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Weight { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> XmlTeamPlayerID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string YahooName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> YahooPlayerID { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PlayerSeason
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> AtBats { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> AuctionValue { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> AverageDraftPosition { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> BallsInPlay { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> BattingAverage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> BattingAverageOnBallsInPlay { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> BattingOrder { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> BattingOrderConfirmed { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> CaughtStealing { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> DoublePlays { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Doubles { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> EarnedRunAverage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Errors { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> FantasyPoints { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> FantasyPointsBatting { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> FantasyPointsDraftKings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> FantasyPointsFanDuel { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> FantasyPointsFantasyDraft { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> FantasyPointsPitching { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> FantasyPointsYahoo { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> FieldingIndependentPitching { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> FlyOuts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Games { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> GlobalTeamID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> GrandSlams { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> GroundIntoDoublePlay { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> GroundOuts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> HitByPitch { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Hits { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> HomeRuns { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> InningsPitchedDecimal { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> InningsPitchedFull { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> InningsPitchedOuts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> IntentionalWalks { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> IsolatedPower { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> LeftOnBase { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> LineOuts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Losses { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> OnBasePercentage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> OnBasePlusSlugging { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Outs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchesSeen { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchesThrown { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchesThrownStrikes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingBallsInPlay { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingBattingAverageAgainst { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingBattingAverageOnBallsInPlay { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingBlownSaves { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingCatchersInterference { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingCompleteGames { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingDoublePlays { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingDoubles { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingEarnedRuns { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingFlyOuts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingGrandSlams { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingGroundIntoDoublePlay { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingGroundOuts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingHitByPitch { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingHits { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingHolds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingHomeRuns { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PitchingInningStarted { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingIntentionalWalks { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingLineOuts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingNoHitters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingOnBasePercentage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingOnBasePlusSlugging { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingPerfectGames { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingPlateAppearances { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingPopOuts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingQualityStarts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingReachedOnError { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingRuns { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingSacrificeFlies { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingSacrifices { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingShutOuts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingSingles { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingSluggingPercentage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingStrikeouts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingStrikeoutsPerNineInnings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingTotalBases { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingTriples { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingWalks { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingWalksPerNineInnings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingWeightedOnBasePercentage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PlateAppearances { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PlayerID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PopOuts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Position { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PositionCategory { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> ReachedOnError { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Runs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> RunsBattedIn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> SacrificeFlies { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Sacrifices { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Saves { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Season { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SeasonType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Singles { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> SluggingPercentage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Started { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> StatID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> StolenBases { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Strikeouts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SubstituteBattingOrder { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SubstituteBattingOrderSequence { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Team { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TeamID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> TotalBases { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> TotalOutsPitched { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Triples { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Updated { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Walks { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> WalksHitsPerInningsPitched { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> WeightedOnBasePercentage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Wins { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Season
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ApiSeason { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PostSeasonStartDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RegularSeasonStartDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="Season")]
		public System.Nullable<System.Int32> Season1 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SeasonType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Series
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> AwayTeamWins { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> GameNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> HomeTeamWins { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxLength { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Stadium
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Active { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Altitude { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Capacity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> CenterField { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string City { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Country { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> GeoLat { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> GeoLong { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> HomePlateDirection { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> LeftCenterField { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> LeftField { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MidLeftCenterField { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MidLeftField { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MidRightCenterField { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MidRightField { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> RightCenterField { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> RightField { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> StadiumID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Surface { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Standing
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> AwayLosses { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> AwayWins { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string City { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DayLosses { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DayWins { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Division { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DivisionLosses { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DivisionRank { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DivisionWins { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> GamesBehind { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> GlobalTeamID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> HomeLosses { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> HomeWins { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> LastTenGamesLosses { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> LastTenGamesWins { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string League { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> LeagueRank { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Losses { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NightLosses { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NightWins { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Percentage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> RunsAgainst { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> RunsScored { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Season { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SeasonType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Streak { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TeamID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> WildCardGamesBehind { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> WildCardRank { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Wins { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Team
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Active { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string City { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Division { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> GlobalTeamID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string League { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PrimaryColor { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string QuaternaryColor { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SecondaryColor { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> StadiumID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TeamID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TertiaryColor { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string WikipediaLogoUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string WikipediaWordMarkUrl { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TeamSeason
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> AtBats { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> BallsInPlay { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> BattingAverage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> BattingAverageOnBallsInPlay { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> BattingOrderConfirmed { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> CaughtStealing { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> DoublePlays { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Doubles { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> EarnedRunAverage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Errors { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> FantasyPoints { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> FantasyPointsBatting { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> FantasyPointsDraftKings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> FantasyPointsFanDuel { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> FantasyPointsFantasyDraft { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> FantasyPointsPitching { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> FantasyPointsYahoo { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> FieldingIndependentPitching { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> FlyOuts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Games { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> GlobalTeamID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> GrandSlams { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> GroundIntoDoublePlay { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> GroundOuts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> HitByPitch { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Hits { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> HomeRuns { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> InningsPitchedDecimal { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> InningsPitchedFull { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> InningsPitchedOuts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> IntentionalWalks { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> IsolatedPower { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> LeftOnBase { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> LineOuts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Losses { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> OnBasePercentage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> OnBasePlusSlugging { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Outs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchesSeen { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchesThrown { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchesThrownStrikes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingBallsInPlay { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingBattingAverageAgainst { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingBattingAverageOnBallsInPlay { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingBlownSaves { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingCatchersInterference { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingCompleteGames { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingDoublePlays { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingDoubles { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingEarnedRuns { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingFlyOuts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingGrandSlams { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingGroundIntoDoublePlay { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingGroundOuts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingHitByPitch { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingHits { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingHolds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingHomeRuns { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PitchingInningStarted { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingIntentionalWalks { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingLineOuts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingNoHitters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingOnBasePercentage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingOnBasePlusSlugging { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingPerfectGames { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingPlateAppearances { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingPopOuts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingQualityStarts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingReachedOnError { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingRuns { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingSacrificeFlies { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingSacrifices { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingShutOuts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingSingles { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingSluggingPercentage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingStrikeouts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingStrikeoutsPerNineInnings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingTotalBases { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingTriples { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingWalks { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingWalksPerNineInnings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PitchingWeightedOnBasePercentage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PlateAppearances { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PopOuts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> ReachedOnError { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Runs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> RunsBattedIn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> SacrificeFlies { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Sacrifices { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Saves { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Season { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SeasonType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Singles { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> SluggingPercentage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> StatID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> StolenBases { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Strikeouts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SubstituteBattingOrder { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SubstituteBattingOrderSequence { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Team { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TeamID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> TotalBases { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> TotalOutsPitched { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Triples { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Updated { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Walks { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> WalksHitsPerInningsPitched { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> WeightedOnBasePercentage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Wins { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Teams (All)
		/// TeamsAll {format}/AllTeams
		/// </summary>
		/// <param name="format">Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.</param>
		public async Task<Team[]> TeamsAllAsync(TeamsAllFormat format, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+format+"/AllTeams";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Team[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Are Games In Progress
		/// Returns <code>true</code> if there is at least one game being played at the time of the request or <code>false</code> if there are none.
		/// AreGamesInProgress {format}/AreAnyGamesInProgress
		/// </summary>
		/// <param name="format">Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.</param>
		public async Task<bool> AreGamesInProgressAsync(TeamsAllFormat format, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+format+"/AreAnyGamesInProgress";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<bool>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Box Score
		/// BoxScore {format}/BoxScore/{gameid}
		/// </summary>
		/// <param name="format">Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.</param>
		/// <param name="gameid">The GameID of an MLB game.  GameIDs can be found in the Games API.  Valid entries are <code>14620</code> or <code>16905</code></param>
		public async Task<BoxScore> BoxScoreAsync(TeamsAllFormat format, string gameid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+format+"/BoxScore/"+ (gameid==null? "" : System.Uri.EscapeDataString(gameid));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<BoxScore>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Box Scores by Date
		/// BoxScoresByDate {format}/BoxScores/{date}
		/// </summary>
		/// <param name="format">Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.</param>
		/// <param name="date">The date of the game(s).
		///<br>Examples: <code>2017-JUL-31</code>, <code>2017-SEP-01</code>.</param>
		public async Task<BoxScore[]> BoxScoresByDateAsync(TeamsAllFormat format, string date, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+format+"/BoxScores/"+ (date==null? "" : System.Uri.EscapeDataString(date));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<BoxScore[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Box Scores by Date Delta
		/// BoxScoresByDateDelta {format}/BoxScoresDelta/{date}/{minutes}
		/// </summary>
		/// <param name="format">Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.</param>
		/// <param name="date">The date of the game(s).
		///<br>Examples: <code>2017-JUL-31</code>, <code>2017-SEP-01</code>.</param>
		/// <param name="minutes">Only returns player statistics that have changed in the last X minutes.  You specify how many minutes in time to go back. Valid entries are:
		///<code>1</code>, <code>2</code> ... <code>all</code>.</param>
		public async Task<BoxScore[]> BoxScoresByDateDeltaAsync(TeamsAllFormat format, string date, string minutes, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+format+"/BoxScoresDelta/"+ (date==null? "" : System.Uri.EscapeDataString(date))+"/"+ (minutes==null? "" : System.Uri.EscapeDataString(minutes));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<BoxScore[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Current Season
		/// CurrentSeason {format}/CurrentSeason
		/// </summary>
		/// <param name="format">Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.</param>
		public async Task<Season> CurrentSeasonAsync(TeamsAllFormat format, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+format+"/CurrentSeason";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Season>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// DFS Slates by Date
		/// DfsSlatesByDate {format}/DfsSlatesByDate/{date}
		/// </summary>
		/// <param name="format">Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.</param>
		/// <param name="date">The date of the slates.
		///<br>Examples: <code>2017-JUL-31</code>, <code>2017-SEP-01</code>.</param>
		public async Task<DfsSlate[]> DfsSlatesByDateAsync(TeamsAllFormat format, string date, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+format+"/DfsSlatesByDate/"+ (date==null? "" : System.Uri.EscapeDataString(date));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DfsSlate[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Player Details by Free Agents
		/// PlayerDetailsByFreeAgents {format}/FreeAgents
		/// </summary>
		/// <param name="format">Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.</param>
		public async Task<Player[]> PlayerDetailsByFreeAgentsAsync(TeamsAllFormat format, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+format+"/FreeAgents";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Player[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Schedules
		/// Schedules {format}/Games/{season}
		/// </summary>
		/// <param name="format">Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.</param>
		/// <param name="season">Year of the season (with optional season type).<br>Examples: <code>2018</code>, <code>2018PRE</code>, <code>2018POST</code>, <code>2018STAR</code>, <code>2019</code>, etc.</param>
		public async Task<Game[]> SchedulesAsync(TeamsAllFormat format, string season, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+format+"/Games/"+ (season==null? "" : System.Uri.EscapeDataString(season));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Game[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Games by Date
		/// GamesByDate {format}/GamesByDate/{date}
		/// </summary>
		/// <param name="format">Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.</param>
		/// <param name="date">The date of the game(s).
		///<br>Examples: <code>2017-JUL-31</code>, <code>2017-SEP-01</code>.</param>
		public async Task<Game[]> GamesByDateAsync(TeamsAllFormat format, string date, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+format+"/GamesByDate/"+ (date==null? "" : System.Uri.EscapeDataString(date));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Game[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Batter vs. Pitcher Stats
		/// BatterVsPitcherStats {format}/HitterVsPitcher/{hitterid}/{pitcherid}
		/// </summary>
		/// <param name="format">Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.</param>
		/// <param name="hitterid">Unique FantasyData Player ID.
		///Example:<code>10000031</code>.</param>
		/// <param name="pitcherid">Unique FantasyData Player ID.
		///Example:<code>10000618</code>.</param>
		public async Task<PlayerSeason[]> BatterVsPitcherStatsAsync(TeamsAllFormat format, string hitterid, string pitcherid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+format+"/HitterVsPitcher/"+ (hitterid==null? "" : System.Uri.EscapeDataString(hitterid))+"/"+ (pitcherid==null? "" : System.Uri.EscapeDataString(pitcherid));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<PlayerSeason[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// News
		/// News {format}/News
		/// </summary>
		/// <param name="format">Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.</param>
		public async Task<News[]> NewsAsync(TeamsAllFormat format, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+format+"/News";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<News[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// News by Date
		/// NewsByDate {format}/NewsByDate/{date}
		/// </summary>
		/// <param name="format">Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.</param>
		/// <param name="date">The date of the news.
		///<br>Examples: <code>2017-JUL-31</code>, <code>2017-SEP-01</code>.</param>
		public async Task<News[]> NewsByDateAsync(TeamsAllFormat format, string date, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+format+"/NewsByDate/"+ (date==null? "" : System.Uri.EscapeDataString(date));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<News[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// News by Player
		/// NewsByPlayer {format}/NewsByPlayerID/{playerid}
		/// </summary>
		/// <param name="format">Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.</param>
		/// <param name="playerid">Unique FantasyData Player ID.
		///Example:<code>10000507</code>.</param>
		public async Task<News[]> NewsByPlayerAsync(TeamsAllFormat format, string playerid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+format+"/NewsByPlayerID/"+ (playerid==null? "" : System.Uri.EscapeDataString(playerid));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<News[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Player Details by Player
		/// PlayerDetailsByPlayer {format}/Player/{playerid}
		/// </summary>
		/// <param name="format">Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.</param>
		/// <param name="playerid">Unique FantasyData Player ID.
		///Example:<code>10000507</code>.</param>
		public async Task<Player> PlayerDetailsByPlayerAsync(TeamsAllFormat format, string playerid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+format+"/Player/"+ (playerid==null? "" : System.Uri.EscapeDataString(playerid));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Player>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Player Game Stats by Date
		/// PlayerGameStatsByDate {format}/PlayerGameStatsByDate/{date}
		/// </summary>
		/// <param name="format">Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.</param>
		/// <param name="date">The date of the game(s).
		///<br>Examples: <code>2017-JUL-31</code>, <code>2017-SEP-01</code>.</param>
		public async Task<PlayerGame[]> PlayerGameStatsByDateAsync(TeamsAllFormat format, string date, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+format+"/PlayerGameStatsByDate/"+ (date==null? "" : System.Uri.EscapeDataString(date));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<PlayerGame[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Player Game Stats by Player
		/// PlayerGameStatsByPlayer {format}/PlayerGameStatsByPlayer/{date}/{playerid}
		/// </summary>
		/// <param name="format">Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.</param>
		/// <param name="date">The date of the game(s).
		///<br>Examples: <code>2017-JUL-31</code>, <code>2017-SEP-01</code>.</param>
		/// <param name="playerid">Unique FantasyData Player ID.
		///Example:<code>10000507</code>.</param>
		public async Task<PlayerGame> PlayerGameStatsByPlayerAsync(TeamsAllFormat format, string date, string playerid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+format+"/PlayerGameStatsByPlayer/"+ (date==null? "" : System.Uri.EscapeDataString(date))+"/"+ (playerid==null? "" : System.Uri.EscapeDataString(playerid));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<PlayerGame>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Player Game Logs By Season
		/// PlayerGameLogsBySeason {format}/PlayerGameStatsBySeason/{season}/{playerid}/{numberofgames}
		/// </summary>
		/// <param name="format">Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.</param>
		/// <param name="season">Season to get games from. Example <code>2019POST</code>, <code>2020</code></param>
		/// <param name="playerid">Unique FantasyData Player ID.
		///Example:<code>10001365</code>.</param>
		/// <param name="numberofgames">How many games to return. Example <code>all</code>, <code>10</code>, <code>25</code></param>
		public async Task<PlayerGame[]> PlayerGameLogsBySeasonAsync(PlayerGameLogsBySeasonFormat format, string season, string playerid, string numberofgames, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+format+"/PlayerGameStatsBySeason/"+ (season==null? "" : System.Uri.EscapeDataString(season))+"/"+ (playerid==null? "" : System.Uri.EscapeDataString(playerid))+"/"+ (numberofgames==null? "" : System.Uri.EscapeDataString(numberofgames));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<PlayerGame[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Player Season Away Stats
		/// PlayerSeasonAwayStats {format}/PlayerSeasonAwayStats/{season}
		/// </summary>
		/// <param name="format">Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.</param>
		/// <param name="season">Year of the season.
		///<br>Examples: <code>2017</code>, <code>2018</code>.</param>
		public async Task<PlayerSeason[]> PlayerSeasonAwayStatsAsync(TeamsAllFormat format, string season, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+format+"/PlayerSeasonAwayStats/"+ (season==null? "" : System.Uri.EscapeDataString(season));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<PlayerSeason[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Player Season Home Stats
		/// PlayerSeasonHomeStats {format}/PlayerSeasonHomeStats/{season}
		/// </summary>
		/// <param name="format">Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.</param>
		/// <param name="season">Year of the season.
		///<br>Examples: <code>2017</code>, <code>2018</code>.</param>
		public async Task<PlayerSeason[]> PlayerSeasonHomeStatsAsync(TeamsAllFormat format, string season, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+format+"/PlayerSeasonHomeStats/"+ (season==null? "" : System.Uri.EscapeDataString(season));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<PlayerSeason[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Player Season Split Stats
		/// PlayerSeasonSplitStats {format}/PlayerSeasonSplitStats/{season}/{split}
		/// </summary>
		/// <param name="format">Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.</param>
		/// <param name="season">Year of the season.
		///<br>Examples: <code>2017</code>, <code>2018</code>.</param>
		/// <param name="split">The desired split of stats. Currently, we support vs. Left/Right/Switch handed pitchers/hitters. Possible values are: <code>L</code>, <code>R</code> and <code>S</code></param>
		public async Task<PlayerSeason[]> PlayerSeasonSplitStatsAsync(TeamsAllFormat format, string season, PlayerSeasonSplitStatsSplit split, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+format+"/PlayerSeasonSplitStats/"+ (season==null? "" : System.Uri.EscapeDataString(season))+"/"+split;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<PlayerSeason[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Player Season Stats
		/// PlayerSeasonStats {format}/PlayerSeasonStats/{season}
		/// </summary>
		/// <param name="format">Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.</param>
		/// <param name="season">Year of the season.
		///<br>Examples: <code>2017</code>, <code>2018</code>.</param>
		public async Task<PlayerSeason[]> PlayerSeasonStatsAsync(TeamsAllFormat format, string season, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+format+"/PlayerSeasonStats/"+ (season==null? "" : System.Uri.EscapeDataString(season));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<PlayerSeason[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Player Season Stats By Player
		/// PlayerSeasonStatsByPlayer {format}/PlayerSeasonStatsByPlayer/{season}/{playerid}
		/// </summary>
		/// <param name="format">Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.</param>
		/// <param name="season">Year of the season.
		///<br>Examples: <code>2017</code>, <code>2018</code>.</param>
		/// <param name="playerid">Unique FantasyData Player ID.
		///Example:<code>10000507</code>.</param>
		public async Task<PlayerSeason> PlayerSeasonStatsByPlayerAsync(TeamsAllFormat format, string season, string playerid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+format+"/PlayerSeasonStatsByPlayer/"+ (season==null? "" : System.Uri.EscapeDataString(season))+"/"+ (playerid==null? "" : System.Uri.EscapeDataString(playerid));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<PlayerSeason>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Player Season Stats by Team
		/// PlayerSeasonStatsByTeam {format}/PlayerSeasonStatsByTeam/{season}/{team}
		/// </summary>
		/// <param name="format">Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.</param>
		/// <param name="season">Year of the season.
		///<br>Examples: <code>2017</code>, <code>2018</code>.
		///</param>
		/// <param name="team">The abbreviation of the requested team.
		///<br>Examples: <code>SF</code>, <code>NYY</code>.</param>
		public async Task<PlayerSeason[]> PlayerSeasonStatsByTeamAsync(TeamsAllFormat format, string season, string team, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+format+"/PlayerSeasonStatsByTeam/"+ (season==null? "" : System.Uri.EscapeDataString(season))+"/"+ (team==null? "" : System.Uri.EscapeDataString(team));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<PlayerSeason[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Player Season Stats Split By Team
		/// PlayerSeasonStatsSplitByTeam {format}/PlayerSeasonStatsSplitByTeam/{season}
		/// </summary>
		/// <param name="format">Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.</param>
		/// <param name="season">Year of the season.
		///<br>Examples: <code>2017</code>, <code>2018</code>.</param>
		public async Task<PlayerSeason[]> PlayerSeasonStatsSplitByTeamAsync(TeamsAllFormat format, string season, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+format+"/PlayerSeasonStatsSplitByTeam/"+ (season==null? "" : System.Uri.EscapeDataString(season));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<PlayerSeason[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Player Details by Active
		/// PlayerDetailsByActive {format}/Players
		/// </summary>
		/// <param name="format">Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.</param>
		public async Task<Player[]> PlayerDetailsByActiveAsync(TeamsAllFormat format, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+format+"/Players";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Player[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Players by Team
		/// PlayersByTeam {format}/Players/{team}
		/// </summary>
		/// <param name="format">Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.</param>
		/// <param name="team">The abbreviation of the requested team.
		///<br>Examples: <code>SF</code>, <code>NYY</code>.</param>
		public async Task<Player[]> PlayersByTeamAsync(TeamsAllFormat format, string team, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+format+"/Players/"+ (team==null? "" : System.Uri.EscapeDataString(team));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Player[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Stadiums
		/// Stadiums {format}/Stadiums
		/// </summary>
		/// <param name="format">Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.</param>
		public async Task<Stadium[]> StadiumsAsync(StadiumsFormat format, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+format+"/Stadiums";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Stadium[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Standings
		/// Standings {format}/Standings/{season}
		/// </summary>
		/// <param name="format">Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.</param>
		/// <param name="season">Year of the season.
		///<br>Examples: <code>2017</code>, <code>2018</code>.</param>
		public async Task<Standing[]> StandingsAsync(TeamsAllFormat format, string season, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+format+"/Standings/"+ (season==null? "" : System.Uri.EscapeDataString(season));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Standing[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Team Game Stats by Date
		/// TeamGameStatsByDate {format}/TeamGameStatsByDate/{date}
		/// </summary>
		/// <param name="format">Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.</param>
		/// <param name="date">The date of the game(s).
		///<br>Examples: <code>2017-JUL-31</code>, <code>2017-SEP-01</code>.</param>
		public async Task<TeamGame[]> TeamGameStatsByDateAsync(TeamsAllFormat format, string date, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+format+"/TeamGameStatsByDate/"+ (date==null? "" : System.Uri.EscapeDataString(date));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TeamGame[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Team Game Logs By Season
		/// Game by game log of total team statistics.
		/// TeamGameLogsBySeason {format}/TeamGameStatsBySeason/{season}/{teamid}/{numberofgames}
		/// </summary>
		/// <param name="format">Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.</param>
		/// <param name="season">Season to get games from. Example <code>2019POST</code>, <code>2020</code></param>
		/// <param name="teamid">Unique ID of team.  Example <code> 12 </code></param>
		/// <param name="numberofgames">How many games to return. Example <code>all</code>, <code>10</code>, <code>25</code></param>
		public async Task<TeamGame[]> TeamGameLogsBySeasonAsync(PlayerGameLogsBySeasonFormat format, string season, string teamid, string numberofgames, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+format+"/TeamGameStatsBySeason/"+ (season==null? "" : System.Uri.EscapeDataString(season))+"/"+ (teamid==null? "" : System.Uri.EscapeDataString(teamid))+"/"+ (numberofgames==null? "" : System.Uri.EscapeDataString(numberofgames));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TeamGame[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Team Hitting vs. Starting Pitcher
		/// TeamHittingVsStartingPitcher {format}/TeamHittersVsPitcher/{gameid}/{team}
		/// </summary>
		/// <param name="format">Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.</param>
		/// <param name="gameid">The GameID of an MLB game.  GameIDs can be found in the Games API.  Valid entries are <code>14620</code> or <code>16905</code></param>
		/// <param name="team">The abbreviation of the requested team.
		///<br>Examples: <code>SF</code>, <code>NYY</code>.</param>
		public async Task<PlayerSeason[]> TeamHittingVsStartingPitcherAsync(TeamsAllFormat format, string gameid, string team, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+format+"/TeamHittersVsPitcher/"+ (gameid==null? "" : System.Uri.EscapeDataString(gameid))+"/"+ (team==null? "" : System.Uri.EscapeDataString(team));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<PlayerSeason[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Team Season Stats
		/// TeamSeasonStats {format}/TeamSeasonStats/{season}
		/// </summary>
		/// <param name="format">Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.</param>
		/// <param name="season">Year of the season.
		///<br>Examples: <code>2017</code>, <code>2018</code>.</param>
		public async Task<TeamSeason[]> TeamSeasonStatsAsync(TeamsAllFormat format, string season, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+format+"/TeamSeasonStats/"+ (season==null? "" : System.Uri.EscapeDataString(season));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TeamSeason[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Teams (Active)
		/// TeamsActive {format}/teams
		/// </summary>
		/// <param name="format">Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.</param>
		public async Task<Team[]> TeamsActiveAsync(TeamsAllFormat format, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+format+"/teams";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Team[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
	
	public enum TeamsAllFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		XML = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JSON = 1,
	}
	
	public enum PlayerGameLogsBySeasonFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JSON = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		XML = 1,
	}
	
	public enum PlayerSeasonSplitStatsSplit
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		L = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		R = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		S = 2,
	}
	
	public enum StadiumsFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		xml = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		json = 1,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
