//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Compute atmospheric density and temperatures
		/// 
		/// under given conditions.
		/// 
		/// App_api_endpoints_JB2008_sample_atmosphere jb2008
		/// </summary>
		/// <param name="year">Year in YYYY format</param>
		/// <param name="month">Month in MM format</param>
		/// <param name="day">Day in DD format</param>
		/// <param name="altitude">Altitude in (km)</param>
		/// <param name="geodetic_latitude">GeodeticLatitude (deg) -90 to 90 deg</param>
		/// <param name="geodetic_longitude">GeodeticLongitude (deg) 0 to 360 deg</param>
		/// <param name="utc">Coordinated Universal Time (hrs)</param>
		/// <returns>Successful atmospheric density calculation</returns>
		public async Task<App_api_endpoints_JB2008_sample_atmosphereReturn> App_api_endpoints_JB2008_sample_atmosphereAsync(int year, int month, int day, double altitude, double geodetic_latitude, double geodetic_longitude, double utc, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "jb2008?year="+year+"&month="+month+"&day="+day+"&altitude="+altitude+"&geodetic_latitude="+geodetic_latitude+"&geodetic_longitude="+geodetic_longitude+"&utc="+utc;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<App_api_endpoints_JB2008_sample_atmosphereReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Compute atmospheric composition, density, and temperatures
		/// 
		/// at specified conditions.
		/// 
		/// App_api_endpoints_NRLMSISE00_sample_atmosphere nrlmsise00
		/// </summary>
		/// <param name="year">Year in YYYY format</param>
		/// <param name="month">Month in MM format</param>
		/// <param name="day">Day in DD format</param>
		/// <param name="altitude">Altitude in (km)</param>
		/// <param name="geodetic_latitude">GeodeticLatitude (deg) -90 to 90 deg</param>
		/// <param name="geodetic_longitude">GeodeticLongitude (deg) 0 to 360 deg</param>
		/// <param name="utc">Coordinated Universal Time (hrs)</param>
		/// <param name="f107a">(Optional) 81 day average of F10.7 flux (SFU) centered on the specified day. F107 and F107A values correspond to the 10.7 cm radio flux at the actual distance of Earth from Sun rather than radio flux at 1 AU. F107, F107A, AP effects can be neglected below 80 km. If unspecified, values provided by the US National Oceanic and  Atmospheric Administration are retrieved automatically.
		///</param>
		/// <param name="f107">(Optional) Daily F10.7 cm radio flux for previous day (SFU). F107 and F107A values correspond to the 10.7 cm radio flux at the actual distance of Earth from Sun rather than radio flux at 1 AU. F107, F107A, AP effects can be neglected below 80 km. If unspecified, values provided by the US National Oceanic and  Atmospheric Administration are retrieved automatically.
		///</param>
		/// <param name="ap">(Optional) The Ap-index provides a daily average level for geomagnetic activity F107, F107A, AP effects can be neglected below 80 km. If unspecified, the average of values in the 24 hours preceding the date-time  are automatically calculated from data provided by GFZ German Research Centre  for Geosciences.
		///</param>
		/// <returns>Successful atmospheric density calculation</returns>
		public async Task<App_api_endpoints_NRLMSISE00_sample_atmosphereReturn> App_api_endpoints_NRLMSISE00_sample_atmosphereAsync(int year, int month, int day, double altitude, double geodetic_latitude, double geodetic_longitude, double utc, double f107a, double f107, double ap, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "nrlmsise00?year="+year+"&month="+month+"&day="+day+"&altitude="+altitude+"&geodetic_latitude="+geodetic_latitude+"&geodetic_longitude="+geodetic_longitude+"&utc="+utc+"&f107a="+f107a+"&f107="+f107+"&ap="+ap;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<App_api_endpoints_NRLMSISE00_sample_atmosphereReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Forecast winds, ion and molecular densities, and temperatures in the atmosphere
		/// 
		/// at a given position and time on 42-48 hour forecast horizon (10 minute resolution). NOTE: latitudes outside the interval (-90,90) are clipped to the endpoints; longitudes outside (0,360) are wrapped.
		/// 
		/// App_api_wfs_endpoints_WFS_get_values wam-ipe
		/// </summary>
		/// <param name="latitude">Latitude (deg) -90 to 90 deg</param>
		/// <param name="longitude">Longitude (deg) 0 to 360 deg or -180 to 180 deg</param>
		/// <param name="altitude">Altitude in (km)</param>
		/// <param name="year">Year in YYYY format</param>
		/// <param name="month">Month in MM format</param>
		/// <param name="day">Day in DD format</param>
		/// <param name="hour">UTC Hour of the day in 24 hour format</param>
		/// <param name="minute">Minute of the given hour</param>
		/// <returns>Successful wam-ipe calculation</returns>
		public async Task<App_api_wfs_endpoints_WFS_get_valuesReturn> App_api_wfs_endpoints_WFS_get_valuesAsync(double latitude, double longitude, double altitude, int year, int month, int day, int hour, int minute, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "wam-ipe?latitude="+latitude+"&longitude="+longitude+"&altitude="+altitude+"&year="+year+"&month="+month+"&day="+day+"&hour="+hour+"&minute="+minute;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<App_api_wfs_endpoints_WFS_get_valuesReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public class App_api_endpoints_JB2008_sample_atmosphereReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="at_alt_temp")]
		public App_api_endpoints_JB2008_sample_atmosphereReturnAt_alt_temp At_alt_temp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="exospheric_temp")]
		public App_api_endpoints_JB2008_sample_atmosphereReturnExospheric_temp Exospheric_temp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_mass_density")]
		public App_api_endpoints_JB2008_sample_atmosphereReturnTotal_mass_density Total_mass_density { get; set; }
	}
	
	public class App_api_endpoints_JB2008_sample_atmosphereReturnAt_alt_temp
	{
		
		[System.Runtime.Serialization.DataMember(Name="units")]
		public string Units { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Double> Value { get; set; }
	}
	
	public class App_api_endpoints_JB2008_sample_atmosphereReturnExospheric_temp
	{
		
		[System.Runtime.Serialization.DataMember(Name="units")]
		public string Units { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Double> Value { get; set; }
	}
	
	public class App_api_endpoints_JB2008_sample_atmosphereReturnTotal_mass_density
	{
		
		[System.Runtime.Serialization.DataMember(Name="units")]
		public string Units { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Double> Value { get; set; }
	}
	
	public class App_api_endpoints_NRLMSISE00_sample_atmosphereReturn
	{
		
		[System.Runtime.Serialization.DataMember()]
		public App_api_endpoints_NRLMSISE00_sample_atmosphereReturnAr_density Ar_density { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public App_api_endpoints_NRLMSISE00_sample_atmosphereReturnH_density H_density { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public App_api_endpoints_NRLMSISE00_sample_atmosphereReturnHe_density He_density { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public App_api_endpoints_NRLMSISE00_sample_atmosphereReturnN2_density N2_density { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public App_api_endpoints_NRLMSISE00_sample_atmosphereReturnN_density N_density { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public App_api_endpoints_NRLMSISE00_sample_atmosphereReturnO2_density O2_density { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public App_api_endpoints_NRLMSISE00_sample_atmosphereReturnO_density O_density { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="anomalous_O_density")]
		public App_api_endpoints_NRLMSISE00_sample_atmosphereReturnAnomalous_O_density Anomalous_O_density { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ap")]
		public App_api_endpoints_NRLMSISE00_sample_atmosphereReturnAp Ap { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="at_alt_temp")]
		public App_api_endpoints_NRLMSISE00_sample_atmosphereReturnAt_alt_temp At_alt_temp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="exospheric_temp")]
		public App_api_endpoints_NRLMSISE00_sample_atmosphereReturnExospheric_temp Exospheric_temp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="f107")]
		public App_api_endpoints_NRLMSISE00_sample_atmosphereReturnF107 F107 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="f107a")]
		public App_api_endpoints_NRLMSISE00_sample_atmosphereReturnF107a F107a { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_mass_density")]
		public App_api_endpoints_NRLMSISE00_sample_atmosphereReturnTotal_mass_density Total_mass_density { get; set; }
	}
	
	public class App_api_endpoints_NRLMSISE00_sample_atmosphereReturnAr_density
	{
		
		[System.Runtime.Serialization.DataMember(Name="units")]
		public string Units { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Double> Value { get; set; }
	}
	
	public class App_api_endpoints_NRLMSISE00_sample_atmosphereReturnH_density
	{
		
		[System.Runtime.Serialization.DataMember(Name="units")]
		public string Units { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Double> Value { get; set; }
	}
	
	public class App_api_endpoints_NRLMSISE00_sample_atmosphereReturnHe_density
	{
		
		[System.Runtime.Serialization.DataMember(Name="units")]
		public string Units { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Double> Value { get; set; }
	}
	
	public class App_api_endpoints_NRLMSISE00_sample_atmosphereReturnN2_density
	{
		
		[System.Runtime.Serialization.DataMember(Name="units")]
		public string Units { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Double> Value { get; set; }
	}
	
	public class App_api_endpoints_NRLMSISE00_sample_atmosphereReturnN_density
	{
		
		[System.Runtime.Serialization.DataMember(Name="units")]
		public string Units { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Double> Value { get; set; }
	}
	
	public class App_api_endpoints_NRLMSISE00_sample_atmosphereReturnO2_density
	{
		
		[System.Runtime.Serialization.DataMember(Name="units")]
		public string Units { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Double> Value { get; set; }
	}
	
	public class App_api_endpoints_NRLMSISE00_sample_atmosphereReturnO_density
	{
		
		[System.Runtime.Serialization.DataMember(Name="units")]
		public string Units { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Double> Value { get; set; }
	}
	
	public class App_api_endpoints_NRLMSISE00_sample_atmosphereReturnAnomalous_O_density
	{
		
		[System.Runtime.Serialization.DataMember(Name="units")]
		public string Units { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Double> Value { get; set; }
	}
	
	public class App_api_endpoints_NRLMSISE00_sample_atmosphereReturnAp
	{
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Double> Value { get; set; }
	}
	
	public class App_api_endpoints_NRLMSISE00_sample_atmosphereReturnAt_alt_temp
	{
		
		[System.Runtime.Serialization.DataMember(Name="units")]
		public string Units { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Double> Value { get; set; }
	}
	
	public class App_api_endpoints_NRLMSISE00_sample_atmosphereReturnExospheric_temp
	{
		
		[System.Runtime.Serialization.DataMember(Name="units")]
		public string Units { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Double> Value { get; set; }
	}
	
	public class App_api_endpoints_NRLMSISE00_sample_atmosphereReturnF107
	{
		
		[System.Runtime.Serialization.DataMember(Name="units")]
		public string Units { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Double> Value { get; set; }
	}
	
	public class App_api_endpoints_NRLMSISE00_sample_atmosphereReturnF107a
	{
		
		[System.Runtime.Serialization.DataMember(Name="units")]
		public string Units { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Double> Value { get; set; }
	}
	
	public class App_api_endpoints_NRLMSISE00_sample_atmosphereReturnTotal_mass_density
	{
		
		[System.Runtime.Serialization.DataMember(Name="units")]
		public string Units { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Double> Value { get; set; }
	}
	
	public class App_api_wfs_endpoints_WFS_get_valuesReturn
	{
		
		/// <summary>
		/// Molecular nitrogen density in (/m3).
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public App_api_wfs_endpoints_WFS_get_valuesReturnN2_density N2_density { get; set; }
		
		/// <summary>
		/// Moleculary oxygen density in (/m3).
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public App_api_wfs_endpoints_WFS_get_valuesReturnO2_density O2_density { get; set; }
		
		/// <summary>
		/// Oxygen atomic density in (/m3).
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public App_api_wfs_endpoints_WFS_get_valuesReturnO_density O_density { get; set; }
		
		/// <summary>
		/// Easterly component of neutral wind velocity in (m/s).
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eastward_wind_neutral")]
		public App_api_wfs_endpoints_WFS_get_valuesReturnEastward_wind_neutral Eastward_wind_neutral { get; set; }
		
		/// <summary>
		/// Northerly component of neutral wind velocity in (m/s).
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="northward_wind_neutral")]
		public App_api_wfs_endpoints_WFS_get_valuesReturnNorthward_wind_neutral Northward_wind_neutral { get; set; }
		
		/// <summary>
		/// The given point in the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="point")]
		public App_api_wfs_endpoints_WFS_get_valuesReturnPoint Point { get; set; }
		
		/// <summary>
		/// Temperature of the atmosphere in (K).
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="temp_neutral")]
		public App_api_wfs_endpoints_WFS_get_valuesReturnTemp_neutral Temp_neutral { get; set; }
		
		/// <summary>
		/// Total mass density (kg/m3).
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_mass_density")]
		public App_api_wfs_endpoints_WFS_get_valuesReturnTotal_mass_density Total_mass_density { get; set; }
		
		/// <summary>
		/// Upward component of neutral wind velocity in (m/s).
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="upward_wind_neutral")]
		public App_api_wfs_endpoints_WFS_get_valuesReturnUpward_wind_neutral Upward_wind_neutral { get; set; }
	}
	
	public class App_api_wfs_endpoints_WFS_get_valuesReturnN2_density
	{
		
		[System.Runtime.Serialization.DataMember(Name="units")]
		public string Units { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Double> Value { get; set; }
	}
	
	public class App_api_wfs_endpoints_WFS_get_valuesReturnO2_density
	{
		
		[System.Runtime.Serialization.DataMember(Name="units")]
		public string Units { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Double> Value { get; set; }
	}
	
	public class App_api_wfs_endpoints_WFS_get_valuesReturnO_density
	{
		
		[System.Runtime.Serialization.DataMember(Name="units")]
		public string Units { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Double> Value { get; set; }
	}
	
	public class App_api_wfs_endpoints_WFS_get_valuesReturnEastward_wind_neutral
	{
		
		[System.Runtime.Serialization.DataMember(Name="units")]
		public string Units { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Double> Value { get; set; }
	}
	
	public class App_api_wfs_endpoints_WFS_get_valuesReturnNorthward_wind_neutral
	{
		
		[System.Runtime.Serialization.DataMember(Name="units")]
		public string Units { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Double> Value { get; set; }
	}
	
	public class App_api_wfs_endpoints_WFS_get_valuesReturnPoint
	{
		
		[System.Runtime.Serialization.DataMember(Name="altitude")]
		public System.Nullable<System.Double> Altitude { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="latitude")]
		public System.Nullable<System.Double> Latitude { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="longitude")]
		public System.Nullable<System.Double> Longitude { get; set; }
	}
	
	public class App_api_wfs_endpoints_WFS_get_valuesReturnTemp_neutral
	{
		
		[System.Runtime.Serialization.DataMember(Name="units")]
		public string Units { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Double> Value { get; set; }
	}
	
	public class App_api_wfs_endpoints_WFS_get_valuesReturnTotal_mass_density
	{
		
		[System.Runtime.Serialization.DataMember(Name="units")]
		public string Units { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Double> Value { get; set; }
	}
	
	public class App_api_wfs_endpoints_WFS_get_valuesReturnUpward_wind_neutral
	{
		
		[System.Runtime.Serialization.DataMember(Name="units")]
		public string Units { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Double> Value { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
