//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConfigureLogsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EgressAccessLogs EgressAccessLogs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HlsIngest HlsIngest { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public IngressAccessLogs IngressAccessLogs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tags Tags { get; set; }
	}
	
	/// <summary>
	/// Configure egress access logging.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EgressAccessLogs
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string LogGroupName { get; set; }
	}
	
	/// <summary>
	/// An HTTP Live Streaming (HLS) ingest resource configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HlsIngest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public IngestEndpoint[] IngestEndpoints { get; set; }
	}
	
	/// <summary>
	/// An endpoint for ingesting source content for a Channel.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class IngestEndpoint
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Password { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Url { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Username { get; set; }
	}
	
	/// <summary>
	/// Configure ingress access logging.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class IngressAccessLogs
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string LogGroupName { get; set; }
	}
	
	/// <summary>
	/// A collection of tags associated with a resource
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Tags
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UnprocessableEntityException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InternalServerErrorException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ForbiddenException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NotFoundException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServiceUnavailableException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TooManyRequestsException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateChannelResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EgressAccessLogs EgressAccessLogs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HlsIngest HlsIngest { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public IngressAccessLogs IngressAccessLogs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tags Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateHarvestJobResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ChannelId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OriginEndpointId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public S3Destination S3Destination { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Status Status { get; set; }
	}
	
	/// <summary>
	/// Configuration parameters for where in an S3 bucket to place the harvested content
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class S3Destination
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string BucketName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ManifestKey { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Status
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IN_PROGRESS")]
		IN_PROGRESS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SUCCEEDED")]
		SUCCEEDED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FAILED")]
		FAILED = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateOriginEndpointResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Authorization Authorization { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ChannelId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CmafPackage CmafPackage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DashPackage DashPackage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HlsPackage HlsPackage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ManifestName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MssPackage MssPackage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Origination Origination { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> StartoverWindowSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tags Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TimeDelaySeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Url { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Whitelist { get; set; }
	}
	
	/// <summary>
	/// CDN Authorization credentials
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Authorization
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string CdnIdentifierSecret { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SecretsRoleArn { get; set; }
	}
	
	/// <summary>
	/// A Common Media Application Format (CMAF) packaging configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CmafPackage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public CmafEncryption Encryption { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HlsManifest[] HlsManifests { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SegmentDurationSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SegmentPrefix { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StreamSelection StreamSelection { get; set; }
	}
	
	/// <summary>
	/// A Common Media Application Format (CMAF) encryption configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CmafEncryption
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ConstantInitializationVector { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CmafEncryptionMethod EncryptionMethod { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> KeyRotationIntervalSeconds { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public SpekeKeyProvider SpekeKeyProvider { get; set; }
	}
	
	/// <summary>
	/// The encryption method to use.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CmafEncryptionMethod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SAMPLE_AES")]
		SAMPLE_AES = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AES_CTR")]
		AES_CTR = 1,
	}
	
	/// <summary>
	/// A configuration for accessing an external Secure Packager and Encoder Key Exchange (SPEKE) service that will provide encryption keys.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SpekeKeyProvider
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CertificateArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EncryptionContractConfiguration EncryptionContractConfiguration { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] SystemIds { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Url { get; set; }
	}
	
	/// <summary>
	/// Use encryptionContractConfiguration to configure one or more content encryption keys for your endpoints that use SPEKE 2.0. 
	///The encryption contract defines which content keys are used to encrypt the audio and video tracks in your stream. 
	///To configure the encryption contract, specify which audio and video encryption presets to use.
	///Note the following considerations when using encryptionContractConfiguration:
	///encryptionContractConfiguration can be used for DASH or CMAF endpoints that use SPEKE 2.0. SPEKE 2.0 relies on the CPIX 2.3 specification.
	///You must disable key rotation for this endpoint by setting keyRotationIntervalSeconds to 0.
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EncryptionContractConfiguration
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public PresetSpeke20Audio PresetSpeke20Audio { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public PresetSpeke20Video PresetSpeke20Video { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PresetSpeke20Audio
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PRESET-AUDIO-1")]
		PRESETMinusAUDIOMinus1 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PRESET-AUDIO-2")]
		PRESETMinusAUDIOMinus2 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PRESET-AUDIO-3")]
		PRESETMinusAUDIOMinus3 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SHARED")]
		SHARED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNENCRYPTED")]
		UNENCRYPTED = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PresetSpeke20Video
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PRESET-VIDEO-1")]
		PRESETMinusVIDEOMinus1 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PRESET-VIDEO-2")]
		PRESETMinusVIDEOMinus2 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PRESET-VIDEO-3")]
		PRESETMinusVIDEOMinus3 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PRESET-VIDEO-4")]
		PRESETMinusVIDEOMinus4 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PRESET-VIDEO-5")]
		PRESETMinusVIDEOMinus5 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PRESET-VIDEO-6")]
		PRESETMinusVIDEOMinus6 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PRESET-VIDEO-7")]
		PRESETMinusVIDEOMinus7 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PRESET-VIDEO-8")]
		PRESETMinusVIDEOMinus8 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SHARED")]
		SHARED = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNENCRYPTED")]
		UNENCRYPTED = 9,
	}
	
	/// <summary>
	/// A HTTP Live Streaming (HLS) manifest configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HlsManifest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AdMarkers AdMarkers { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IncludeIframeOnlyStream { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ManifestName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PlaylistType PlaylistType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PlaylistWindowSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ProgramDateTimeIntervalSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Url { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public @__AdTriggersElement[] AdTriggers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AdsOnDeliveryRestrictions AdsOnDeliveryRestrictions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AdMarkers
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NONE")]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SCTE35_ENHANCED")]
		SCTE35_ENHANCED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PASSTHROUGH")]
		PASSTHROUGH = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DATERANGE")]
		DATERANGE = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PlaylistType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NONE")]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EVENT")]
		EVENT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VOD")]
		VOD = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum @__AdTriggersElement
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SPLICE_INSERT")]
		SPLICE_INSERT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BREAK")]
		BREAK = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PROVIDER_ADVERTISEMENT")]
		PROVIDER_ADVERTISEMENT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DISTRIBUTOR_ADVERTISEMENT")]
		DISTRIBUTOR_ADVERTISEMENT = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PROVIDER_PLACEMENT_OPPORTUNITY")]
		PROVIDER_PLACEMENT_OPPORTUNITY = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DISTRIBUTOR_PLACEMENT_OPPORTUNITY")]
		DISTRIBUTOR_PLACEMENT_OPPORTUNITY = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PROVIDER_OVERLAY_PLACEMENT_OPPORTUNITY")]
		PROVIDER_OVERLAY_PLACEMENT_OPPORTUNITY = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DISTRIBUTOR_OVERLAY_PLACEMENT_OPPORTUNITY")]
		DISTRIBUTOR_OVERLAY_PLACEMENT_OPPORTUNITY = 7,
	}
	
	/// <summary>
	/// This setting allows the delivery restriction flags on SCTE-35 segmentation descriptors to
	///determine whether a message signals an ad.  Choosing "NONE" means no SCTE-35 messages become
	///ads.  Choosing "RESTRICTED" means SCTE-35 messages of the types specified in AdTriggers that
	///contain delivery restrictions will be treated as ads.  Choosing "UNRESTRICTED" means SCTE-35
	///messages of the types specified in AdTriggers that do not contain delivery restrictions will
	///be treated as ads.  Choosing "BOTH" means all SCTE-35 messages of the types specified in
	///AdTriggers will be treated as ads.  Note that Splice Insert messages do not have these flags
	///and are always treated as ads if specified in AdTriggers.
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AdsOnDeliveryRestrictions
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NONE")]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RESTRICTED")]
		RESTRICTED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNRESTRICTED")]
		UNRESTRICTED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BOTH")]
		BOTH = 3,
	}
	
	/// <summary>
	/// A StreamSelection configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StreamSelection
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxVideoBitsPerSecond { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MinVideoBitsPerSecond { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StreamOrder StreamOrder { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum StreamOrder
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ORIGINAL")]
		ORIGINAL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VIDEO_BITRATE_ASCENDING")]
		VIDEO_BITRATE_ASCENDING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VIDEO_BITRATE_DESCENDING")]
		VIDEO_BITRATE_DESCENDING = 2,
	}
	
	/// <summary>
	/// A Dynamic Adaptive Streaming over HTTP (DASH) packaging configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DashPackage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public @__AdTriggersElement[] AdTriggers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AdsOnDeliveryRestrictions AdsOnDeliveryRestrictions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DashEncryption Encryption { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IncludeIframeOnlyStream { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ManifestLayout ManifestLayout { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ManifestWindowSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MinBufferTimeSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MinUpdatePeriodSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public @__PeriodTriggersElement[] PeriodTriggers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Profile Profile { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SegmentDurationSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SegmentTemplateFormat SegmentTemplateFormat { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StreamSelection StreamSelection { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SuggestedPresentationDelaySeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UtcTiming UtcTiming { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string UtcTimingUri { get; set; }
	}
	
	/// <summary>
	/// A Dynamic Adaptive Streaming over HTTP (DASH) encryption configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DashEncryption
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> KeyRotationIntervalSeconds { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public SpekeKeyProvider SpekeKeyProvider { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ManifestLayout
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FULL")]
		FULL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="COMPACT")]
		COMPACT = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum @__PeriodTriggersElement
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ADS")]
		ADS = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Profile
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NONE")]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HBBTV_1_5")]
		HBBTV_1_5 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HYBRIDCAST")]
		HYBRIDCAST = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DVB_DASH_2014")]
		DVB_DASH_2014 = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum SegmentTemplateFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NUMBER_WITH_TIMELINE")]
		NUMBER_WITH_TIMELINE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TIME_WITH_TIMELINE")]
		TIME_WITH_TIMELINE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NUMBER_WITH_DURATION")]
		NUMBER_WITH_DURATION = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum UtcTiming
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NONE")]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HTTP-HEAD")]
		HTTPMinusHEAD = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HTTP-ISO")]
		HTTPMinusISO = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HTTP-XSDATE")]
		HTTPMinusXSDATE = 3,
	}
	
	/// <summary>
	/// An HTTP Live Streaming (HLS) packaging configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HlsPackage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AdMarkers AdMarkers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public @__AdTriggersElement[] AdTriggers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AdsOnDeliveryRestrictions AdsOnDeliveryRestrictions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HlsEncryption Encryption { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IncludeDvbSubtitles { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IncludeIframeOnlyStream { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PlaylistType PlaylistType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PlaylistWindowSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ProgramDateTimeIntervalSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SegmentDurationSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StreamSelection StreamSelection { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> UseAudioRenditionGroup { get; set; }
	}
	
	/// <summary>
	/// An HTTP Live Streaming (HLS) encryption configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HlsEncryption
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ConstantInitializationVector { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EncryptionMethod EncryptionMethod { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> KeyRotationIntervalSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> RepeatExtXKey { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public SpekeKeyProvider SpekeKeyProvider { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum EncryptionMethod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AES_128")]
		AES_128 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SAMPLE_AES")]
		SAMPLE_AES = 1,
	}
	
	/// <summary>
	/// A Microsoft Smooth Streaming (MSS) packaging configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MssPackage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public MssEncryption Encryption { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ManifestWindowSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SegmentDurationSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StreamSelection StreamSelection { get; set; }
	}
	
	/// <summary>
	/// A Microsoft Smooth Streaming (MSS) encryption configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MssEncryption
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public SpekeKeyProvider SpekeKeyProvider { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Origination
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ALLOW")]
		ALLOW = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DENY")]
		DENY = 1,
	}
	
	/// <summary>
	/// A HTTP Live Streaming (HLS) manifest configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HlsManifestCreateOrUpdateParameters
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AdMarkers AdMarkers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public @__AdTriggersElement[] AdTriggers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AdsOnDeliveryRestrictions AdsOnDeliveryRestrictions { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IncludeIframeOnlyStream { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ManifestName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PlaylistType PlaylistType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PlaylistWindowSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ProgramDateTimeIntervalSeconds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteChannelResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteOriginEndpointResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeChannelResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EgressAccessLogs EgressAccessLogs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HlsIngest HlsIngest { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public IngressAccessLogs IngressAccessLogs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tags Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeHarvestJobResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ChannelId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OriginEndpointId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public S3Destination S3Destination { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Status Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeOriginEndpointResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Authorization Authorization { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ChannelId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CmafPackage CmafPackage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DashPackage DashPackage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HlsPackage HlsPackage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ManifestName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MssPackage MssPackage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Origination Origination { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> StartoverWindowSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tags Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TimeDelaySeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Url { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Whitelist { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListChannelsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Channel[] Channels { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// A Channel resource configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Channel
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EgressAccessLogs EgressAccessLogs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HlsIngest HlsIngest { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public IngressAccessLogs IngressAccessLogs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tags Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListHarvestJobsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public HarvestJob[] HarvestJobs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// A HarvestJob resource configuration
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HarvestJob
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ChannelId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OriginEndpointId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public S3Destination S3Destination { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Status Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListOriginEndpointsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OriginEndpoint[] OriginEndpoints { get; set; }
	}
	
	/// <summary>
	/// An OriginEndpoint resource configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OriginEndpoint
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Authorization Authorization { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ChannelId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CmafPackage CmafPackage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DashPackage DashPackage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HlsPackage HlsPackage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ManifestName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MssPackage MssPackage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Origination Origination { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> StartoverWindowSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tags Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TimeDelaySeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Url { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Whitelist { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListTagsForResourceResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public @__mapOf__string Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class @__mapOf__string
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RotateChannelCredentialsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EgressAccessLogs EgressAccessLogs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HlsIngest HlsIngest { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public IngressAccessLogs IngressAccessLogs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tags Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RotateIngestEndpointCredentialsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EgressAccessLogs EgressAccessLogs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HlsIngest HlsIngest { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public IngressAccessLogs IngressAccessLogs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tags Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateChannelResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EgressAccessLogs EgressAccessLogs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HlsIngest HlsIngest { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public IngressAccessLogs IngressAccessLogs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tags Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateOriginEndpointResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Authorization Authorization { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ChannelId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CmafPackage CmafPackage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DashPackage DashPackage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HlsPackage HlsPackage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ManifestName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MssPackage MssPackage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Origination Origination { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> StartoverWindowSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tags Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TimeDelaySeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Url { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Whitelist { get; set; }
	}
	
	/// <summary>
	/// A Common Media Application Format (CMAF) packaging configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CmafPackageCreateOrUpdateParameters
	{
		
		[System.Runtime.Serialization.DataMember()]
		public CmafEncryption Encryption { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HlsManifestCreateOrUpdateParameters[] HlsManifests { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SegmentDurationSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SegmentPrefix { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StreamSelection StreamSelection { get; set; }
	}
	
	/// <summary>
	/// the option to configure log subscription.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConfigureLogsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public EgressAccessLogs EgressAccessLogs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public IngressAccessLogs IngressAccessLogs { get; set; }
	}
	
	/// <summary>
	/// A new Channel configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateChannelRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tags Tags { get; set; }
	}
	
	/// <summary>
	/// Configuration parameters used to create a new HarvestJob.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateHarvestJobRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EndTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string OriginEndpointId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public S3Destination S3Destination { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string StartTime { get; set; }
	}
	
	/// <summary>
	/// Configuration parameters used to create a new OriginEndpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateOriginEndpointRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Authorization Authorization { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ChannelId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CmafPackageCreateOrUpdateParameters CmafPackage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DashPackage DashPackage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HlsPackage HlsPackage { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ManifestName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MssPackage MssPackage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Origination Origination { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> StartoverWindowSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tags Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TimeDelaySeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Whitelist { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteChannelRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteOriginEndpointRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeChannelRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeHarvestJobRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeOriginEndpointRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListChannelsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListHarvestJobsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListOriginEndpointsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListTagsForResourceRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RotateChannelCredentialsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RotateIngestEndpointCredentialsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TagResourceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public @__mapOf__string Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UntagResourceRequest
	{
	}
	
	/// <summary>
	/// Configuration parameters used to update the Channel.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateChannelRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
	}
	
	/// <summary>
	/// Configuration parameters used to update an existing OriginEndpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateOriginEndpointRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Authorization Authorization { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CmafPackageCreateOrUpdateParameters CmafPackage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DashPackage DashPackage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HlsPackage HlsPackage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ManifestName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MssPackage MssPackage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Origination Origination { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> StartoverWindowSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TimeDelaySeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Whitelist { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Changes the Channel's properities to configure log subscription
		/// ConfigureLogs channels/{id}/configure_logs
		/// </summary>
		/// <param name="id">The ID of the channel to log subscription.</param>
		/// <returns>Success</returns>
		public async Task<ConfigureLogsResponse> ConfigureLogsAsync(string id, ConfigureLogsPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "channels/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/configure_logs";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ConfigureLogsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a new Channel.
		/// CreateChannel channels
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateChannelResponse> CreateChannelAsync(CreateChannelPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "channels";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateChannelResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a collection of Channels.
		/// ListChannels channels
		/// </summary>
		/// <param name="maxResults">Upper bound on number of records to return.
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="nextToken">A token used to resume pagination from the end of a previous request.</param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListChannelsResponse> ListChannelsAsync(int maxResults, string nextToken, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "channels?maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListChannelsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new HarvestJob record.
		/// CreateHarvestJob harvest_jobs
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateHarvestJobResponse> CreateHarvestJobAsync(CreateHarvestJobPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "harvest_jobs";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateHarvestJobResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a collection of HarvestJob records.
		/// ListHarvestJobs harvest_jobs
		/// </summary>
		/// <param name="includeChannelId">When specified, the request will return only HarvestJobs associated with the given Channel ID.</param>
		/// <param name="includeStatus">When specified, the request will return only HarvestJobs in the given status.</param>
		/// <param name="maxResults">The upper bound on the number of records to return.
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="nextToken">A token used to resume pagination from the end of a previous request.</param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListHarvestJobsResponse> ListHarvestJobsAsync(string includeChannelId, string includeStatus, int maxResults, string nextToken, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "harvest_jobs?includeChannelId=" + (includeChannelId==null? "" : System.Uri.EscapeDataString(includeChannelId))+"&includeStatus=" + (includeStatus==null? "" : System.Uri.EscapeDataString(includeStatus))+"&maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListHarvestJobsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new OriginEndpoint record.
		/// CreateOriginEndpoint origin_endpoints
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateOriginEndpointResponse> CreateOriginEndpointAsync(CreateOriginEndpointPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "origin_endpoints";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateOriginEndpointResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a collection of OriginEndpoint records.
		/// ListOriginEndpoints origin_endpoints
		/// </summary>
		/// <param name="channelId">When specified, the request will return only OriginEndpoints associated with the given Channel ID.</param>
		/// <param name="maxResults">The upper bound on the number of records to return.
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="nextToken">A token used to resume pagination from the end of a previous request.</param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListOriginEndpointsResponse> ListOriginEndpointsAsync(string channelId, int maxResults, string nextToken, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "origin_endpoints?channelId=" + (channelId==null? "" : System.Uri.EscapeDataString(channelId))+"&maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListOriginEndpointsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes an existing Channel.
		/// DeleteChannel channels/{id}
		/// </summary>
		/// <param name="id">The ID of the Channel to delete.</param>
		public async Task DeleteChannelAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "channels/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets details about a Channel.
		/// DescribeChannel channels/{id}
		/// </summary>
		/// <param name="id">The ID of a Channel.</param>
		/// <returns>Success</returns>
		public async Task<DescribeChannelResponse> DescribeChannelAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "channels/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeChannelResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing Channel.
		/// UpdateChannel channels/{id}
		/// </summary>
		/// <param name="id">The ID of the Channel to update.</param>
		/// <returns>Success</returns>
		public async Task<UpdateChannelResponse> UpdateChannelAsync(string id, UpdateChannelPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "channels/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateChannelResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes an existing OriginEndpoint.
		/// DeleteOriginEndpoint origin_endpoints/{id}
		/// </summary>
		/// <param name="id">The ID of the OriginEndpoint to delete.</param>
		public async Task DeleteOriginEndpointAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "origin_endpoints/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets details about an existing OriginEndpoint.
		/// DescribeOriginEndpoint origin_endpoints/{id}
		/// </summary>
		/// <param name="id">The ID of the OriginEndpoint.</param>
		/// <returns>Success</returns>
		public async Task<DescribeOriginEndpointResponse> DescribeOriginEndpointAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "origin_endpoints/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeOriginEndpointResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing OriginEndpoint.
		/// UpdateOriginEndpoint origin_endpoints/{id}
		/// </summary>
		/// <param name="id">The ID of the OriginEndpoint to update.</param>
		/// <returns>Success</returns>
		public async Task<UpdateOriginEndpointResponse> UpdateOriginEndpointAsync(string id, UpdateOriginEndpointPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "origin_endpoints/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateOriginEndpointResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets details about an existing HarvestJob.
		/// DescribeHarvestJob harvest_jobs/{id}
		/// </summary>
		/// <param name="id">The ID of the HarvestJob.</param>
		/// <returns>Success</returns>
		public async Task<DescribeHarvestJobResponse> DescribeHarvestJobAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "harvest_jobs/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeHarvestJobResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ListTagsForResource tags/{resource_arn}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ListTagsForResourceResponse> ListTagsForResourceAsync(string resource_arn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/{resource_arn}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListTagsForResourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// TagResource tags/{resource_arn}
		/// </summary>
		public async Task TagResourceAsync(string resource_arn, TagResourcePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/{resource_arn}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Changes the Channel's first IngestEndpoint's username and password. WARNING - This API is deprecated. Please use RotateIngestEndpointCredentials instead
		/// RotateChannelCredentials channels/{id}/credentials
		/// </summary>
		/// <param name="id">The ID of the channel to update.</param>
		/// <returns>Success</returns>
		public async Task<RotateChannelCredentialsResponse> RotateChannelCredentialsAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "channels/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/credentials";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RotateChannelCredentialsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Rotate the IngestEndpoint's username and password, as specified by the IngestEndpoint's id.
		/// RotateIngestEndpointCredentials channels/{id}/ingest_endpoints/{ingest_endpoint_id}/credentials
		/// </summary>
		/// <param name="id">The ID of the channel the IngestEndpoint is on.</param>
		/// <param name="ingest_endpoint_id">The id of the IngestEndpoint whose credentials should be rotated</param>
		/// <returns>Success</returns>
		public async Task<RotateIngestEndpointCredentialsResponse> RotateIngestEndpointCredentialsAsync(string id, string ingest_endpoint_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "channels/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/ingest_endpoints/"+ (ingest_endpoint_id==null? "" : System.Uri.EscapeDataString(ingest_endpoint_id))+"/credentials";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RotateIngestEndpointCredentialsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// UntagResource tags/{resource_arn}#tagKeys
		/// </summary>
		/// <param name="tagKeys">The key(s) of tag to be deleted</param>
		public async Task UntagResourceAsync(string resource_arn, string[] tagKeys, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/{resource_arn}#tagKeys?"+string.Join("&", tagKeys.Select(z => $"tagKeys={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public class ConfigureLogsPutBody
	{
		
		/// <summary>
		/// Configure egress access logging.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="egressAccessLogs")]
		public ConfigureLogsPutBodyEgressAccessLogs EgressAccessLogs { get; set; }
		
		/// <summary>
		/// Configure ingress access logging.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ingressAccessLogs")]
		public ConfigureLogsPutBodyIngressAccessLogs IngressAccessLogs { get; set; }
	}
	
	public class ConfigureLogsPutBodyEgressAccessLogs
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string LogGroupName { get; set; }
	}
	
	public class ConfigureLogsPutBodyIngressAccessLogs
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string LogGroupName { get; set; }
	}
	
	public class CreateChannelPostBody
	{
		
		/// <summary>
		/// A short text description of the Channel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The ID of the Channel. The ID must be unique within the region and it
		///cannot be changed after a Channel is created.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// A collection of tags associated with a resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public class CreateHarvestJobPostBody
	{
		
		/// <summary>
		/// The end of the time-window which will be harvested
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public string EndTime { get; set; }
		
		/// <summary>
		/// The ID of the HarvestJob. The ID must be unique within the region
		///and it cannot be changed after the HarvestJob is submitted
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The ID of the OriginEndpoint that the HarvestJob will harvest from.
		///This cannot be changed after the HarvestJob is submitted.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originEndpointId")]
		public string OriginEndpointId { get; set; }
		
		/// <summary>
		/// Configuration parameters for where in an S3 bucket to place the harvested content
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="s3Destination")]
		public CreateHarvestJobPostBodyS3Destination S3Destination { get; set; }
		
		/// <summary>
		/// The start of the time-window which will be harvested
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public string StartTime { get; set; }
	}
	
	public class CreateHarvestJobPostBodyS3Destination
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string BucketName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ManifestKey { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
	}
	
	public class CreateOriginEndpointPostBody
	{
		
		/// <summary>
		/// CDN Authorization credentials
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authorization")]
		public CreateOriginEndpointPostBodyAuthorization Authorization { get; set; }
		
		/// <summary>
		/// The ID of the Channel that the OriginEndpoint will be associated with.
		///This cannot be changed after the OriginEndpoint is created.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="channelId")]
		public string ChannelId { get; set; }
		
		/// <summary>
		/// A Common Media Application Format (CMAF) packaging configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cmafPackage")]
		public CreateOriginEndpointPostBodyCmafPackage CmafPackage { get; set; }
		
		/// <summary>
		/// A Dynamic Adaptive Streaming over HTTP (DASH) packaging configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dashPackage")]
		public CreateOriginEndpointPostBodyDashPackage DashPackage { get; set; }
		
		/// <summary>
		/// A short text description of the OriginEndpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// An HTTP Live Streaming (HLS) packaging configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hlsPackage")]
		public CreateOriginEndpointPostBodyHlsPackage HlsPackage { get; set; }
		
		/// <summary>
		/// The ID of the OriginEndpoint.  The ID must be unique within the region
		///and it cannot be changed after the OriginEndpoint is created.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// A short string that will be used as the filename of the OriginEndpoint URL (defaults to "index").
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="manifestName")]
		public string ManifestName { get; set; }
		
		/// <summary>
		/// A Microsoft Smooth Streaming (MSS) packaging configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mssPackage")]
		public CreateOriginEndpointPostBodyMssPackage MssPackage { get; set; }
		
		/// <summary>
		/// Control whether origination of video is allowed for this OriginEndpoint. If set to ALLOW, the OriginEndpoint
		///may by requested, pursuant to any other form of access control. If set to DENY, the OriginEndpoint may not be
		///requested. This can be helpful for Live to VOD harvesting, or for temporarily disabling origination
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="origination")]
		public Origination Origination { get; set; }
		
		/// <summary>
		/// Maximum duration (seconds) of content to retain for startover playback.
		///If not specified, startover playback will be disabled for the OriginEndpoint.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startoverWindowSeconds")]
		public System.Nullable<System.Int32> StartoverWindowSeconds { get; set; }
		
		/// <summary>
		/// A collection of tags associated with a resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
		
		/// <summary>
		/// Amount of delay (seconds) to enforce on the playback of live content.
		///If not specified, there will be no time delay in effect for the OriginEndpoint.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeDelaySeconds")]
		public System.Nullable<System.Int32> TimeDelaySeconds { get; set; }
		
		/// <summary>
		/// A list of source IP CIDR blocks that will be allowed to access the OriginEndpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="whitelist")]
		public string[] Whitelist { get; set; }
	}
	
	public class CreateOriginEndpointPostBodyAuthorization
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CdnIdentifierSecret { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SecretsRoleArn { get; set; }
	}
	
	public class CreateOriginEndpointPostBodyCmafPackage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public CmafEncryption Encryption { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HlsManifestCreateOrUpdateParameters[] HlsManifests { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SegmentDurationSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SegmentPrefix { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StreamSelection StreamSelection { get; set; }
	}
	
	public class CreateOriginEndpointPostBodyDashPackage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public @__AdTriggersElement[] AdTriggers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AdsOnDeliveryRestrictions AdsOnDeliveryRestrictions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DashEncryption Encryption { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IncludeIframeOnlyStream { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ManifestLayout ManifestLayout { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ManifestWindowSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MinBufferTimeSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MinUpdatePeriodSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public @__PeriodTriggersElement[] PeriodTriggers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Profile Profile { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SegmentDurationSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SegmentTemplateFormat SegmentTemplateFormat { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StreamSelection StreamSelection { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SuggestedPresentationDelaySeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UtcTiming UtcTiming { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string UtcTimingUri { get; set; }
	}
	
	public class CreateOriginEndpointPostBodyHlsPackage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AdMarkers AdMarkers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public @__AdTriggersElement[] AdTriggers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AdsOnDeliveryRestrictions AdsOnDeliveryRestrictions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HlsEncryption Encryption { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IncludeDvbSubtitles { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IncludeIframeOnlyStream { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PlaylistType PlaylistType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PlaylistWindowSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ProgramDateTimeIntervalSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SegmentDurationSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StreamSelection StreamSelection { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> UseAudioRenditionGroup { get; set; }
	}
	
	public class CreateOriginEndpointPostBodyMssPackage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public MssEncryption Encryption { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ManifestWindowSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SegmentDurationSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StreamSelection StreamSelection { get; set; }
	}
	
	public class UpdateChannelPutBody
	{
		
		/// <summary>
		/// A short text description of the Channel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
	}
	
	public class UpdateOriginEndpointPutBody
	{
		
		/// <summary>
		/// CDN Authorization credentials
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authorization")]
		public UpdateOriginEndpointPutBodyAuthorization Authorization { get; set; }
		
		/// <summary>
		/// A Common Media Application Format (CMAF) packaging configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cmafPackage")]
		public UpdateOriginEndpointPutBodyCmafPackage CmafPackage { get; set; }
		
		/// <summary>
		/// A Dynamic Adaptive Streaming over HTTP (DASH) packaging configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dashPackage")]
		public UpdateOriginEndpointPutBodyDashPackage DashPackage { get; set; }
		
		/// <summary>
		/// A short text description of the OriginEndpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// An HTTP Live Streaming (HLS) packaging configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hlsPackage")]
		public UpdateOriginEndpointPutBodyHlsPackage HlsPackage { get; set; }
		
		/// <summary>
		/// A short string that will be appended to the end of the Endpoint URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="manifestName")]
		public string ManifestName { get; set; }
		
		/// <summary>
		/// A Microsoft Smooth Streaming (MSS) packaging configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mssPackage")]
		public UpdateOriginEndpointPutBodyMssPackage MssPackage { get; set; }
		
		/// <summary>
		/// Control whether origination of video is allowed for this OriginEndpoint. If set to ALLOW, the OriginEndpoint
		///may by requested, pursuant to any other form of access control. If set to DENY, the OriginEndpoint may not be
		///requested. This can be helpful for Live to VOD harvesting, or for temporarily disabling origination
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="origination")]
		public Origination Origination { get; set; }
		
		/// <summary>
		/// Maximum duration (in seconds) of content to retain for startover playback.
		///If not specified, startover playback will be disabled for the OriginEndpoint.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startoverWindowSeconds")]
		public System.Nullable<System.Int32> StartoverWindowSeconds { get; set; }
		
		/// <summary>
		/// Amount of delay (in seconds) to enforce on the playback of live content.
		///If not specified, there will be no time delay in effect for the OriginEndpoint.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeDelaySeconds")]
		public System.Nullable<System.Int32> TimeDelaySeconds { get; set; }
		
		/// <summary>
		/// A list of source IP CIDR blocks that will be allowed to access the OriginEndpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="whitelist")]
		public string[] Whitelist { get; set; }
	}
	
	public class UpdateOriginEndpointPutBodyAuthorization
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CdnIdentifierSecret { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SecretsRoleArn { get; set; }
	}
	
	public class UpdateOriginEndpointPutBodyCmafPackage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public CmafEncryption Encryption { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HlsManifestCreateOrUpdateParameters[] HlsManifests { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SegmentDurationSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SegmentPrefix { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StreamSelection StreamSelection { get; set; }
	}
	
	public class UpdateOriginEndpointPutBodyDashPackage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public @__AdTriggersElement[] AdTriggers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AdsOnDeliveryRestrictions AdsOnDeliveryRestrictions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DashEncryption Encryption { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IncludeIframeOnlyStream { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ManifestLayout ManifestLayout { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ManifestWindowSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MinBufferTimeSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MinUpdatePeriodSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public @__PeriodTriggersElement[] PeriodTriggers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Profile Profile { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SegmentDurationSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SegmentTemplateFormat SegmentTemplateFormat { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StreamSelection StreamSelection { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SuggestedPresentationDelaySeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UtcTiming UtcTiming { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string UtcTimingUri { get; set; }
	}
	
	public class UpdateOriginEndpointPutBodyHlsPackage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AdMarkers AdMarkers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public @__AdTriggersElement[] AdTriggers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AdsOnDeliveryRestrictions AdsOnDeliveryRestrictions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HlsEncryption Encryption { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IncludeDvbSubtitles { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IncludeIframeOnlyStream { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PlaylistType PlaylistType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PlaylistWindowSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ProgramDateTimeIntervalSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SegmentDurationSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StreamSelection StreamSelection { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> UseAudioRenditionGroup { get; set; }
	}
	
	public class UpdateOriginEndpointPutBodyMssPackage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public MssEncryption Encryption { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ManifestWindowSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SegmentDurationSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StreamSelection StreamSelection { get; set; }
	}
	
	public class TagResourcePostBody
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
