//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AiPlanningLevelRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public PlanningLevelDataDto[] Data { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="method")]
		public AiPlanningLevelRequestMethod Method { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="params")]
		public PlanningLevelInfoRequest Params { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="planningLevelId")]
		public string PlanningLevelId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startDate")]
		public string StartDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PlanningLevelDataDto
	{
		
		[System.Runtime.Serialization.DataMember(Name="historyValues")]
		public double[] HistoryValues { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timeSeriesId")]
		public string TimeSeriesId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum AiPlanningLevelRequestMethod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		icueMLP = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		icueMLO = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		icueMLN = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PlanningLevelInfoRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="discardData")]
		public bool DiscardData { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="errorType")]
		public PlanningLevelInfoRequestErrorType ErrorType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="holdOutPeriod")]
		public int HoldOutPeriod { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="noFcst")]
		public int NoFcst { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="outlierDetection")]
		public bool OutlierDetection { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="periodicity")]
		public int Periodicity { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum PlanningLevelInfoRequestErrorType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MeanAbsolutePercentageError = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MeanSquaredError = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MeanAbsoluteError = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MedianAbsoluteDeviation = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EntityResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="address")]
		public string Address { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dbConnection")]
		public string DbConnection { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public System.Nullable<System.Boolean> IsActive { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="token")]
		public string Token { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ForecastBottomUpResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="forecastData")]
		public PlanningLevelForecastResultData[] ForecastData { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hyperparameters")]
		public ForecastHyperparameterResponse Hyperparameters { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PlanningLevelForecastResultData
	{
		
		[System.Runtime.Serialization.DataMember(Name="date")]
		public string Date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Double> Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ForecastHyperparameterResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="discardData")]
		public System.Nullable<System.Boolean> DiscardData { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errorType")]
		public PlanningLevelInfoRequestErrorType ErrorType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="holdOutPeriod")]
		public System.Nullable<System.Int32> HoldOutPeriod { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="noFcst")]
		public System.Nullable<System.Int32> NoFcst { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="periodicity")]
		public System.Nullable<System.Int32> Periodicity { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ForecastOptimalParametersResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="alpha")]
		public System.Nullable<System.Double> Alpha { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="beta")]
		public System.Nullable<System.Double> Beta { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="gamma")]
		public System.Nullable<System.Double> Gamma { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ForecastPerformanceDataRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="forecastValues")]
		public double[] ForecastValues { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="historyValues")]
		public double[] HistoryValues { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timeSeriesId")]
		public string TimeSeriesId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ForecastPerformanceRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="costOfError")]
		public System.Nullable<System.Double> CostOfError { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ForecastPerformanceDataRequest[] Data { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="method")]
		public string Method { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="params")]
		public PlanningLevelInfoRequest Params { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="planningLevelId")]
		public string PlanningLevelId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="rewindTimeFrame")]
		public int RewindTimeFrame { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startDate")]
		public string StartDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ForecastResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="hyperparameters")]
		public ForecastHyperparameterResponse Hyperparameters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timeSeries")]
		public TimeSeriesForecastResponse[] TimeSeries { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TimeSeriesForecastResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="error")]
		public System.Nullable<System.Double> Error { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="forecastData")]
		public PlanningLevelForecastResultData[] ForecastData { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="method")]
		public string Method { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timeSeriesId")]
		public string TimeSeriesId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FullDetailsForecastResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="hyperparameters")]
		public ForecastHyperparameterResponse Hyperparameters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timeSeries")]
		public TimeSeriesFullDetailsResponse[] TimeSeries { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TimeSeriesFullDetailsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="error")]
		public System.Nullable<System.Double> Error { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="forecastData")]
		public PlanningLevelForecastResultData[] ForecastData { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="historyData")]
		public PlanningLevelForecastResultData[] HistoryData { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="method")]
		public string Method { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="optimalParameters")]
		public ForecastOptimalParametersResponse OptimalParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="outliers")]
		public OutlierResponse[] Outliers { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timeSeriesId")]
		public string TimeSeriesId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OutlierResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="index")]
		public System.Nullable<System.Int32> Index { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<OutlierResponseType> Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Double> Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum OutlierResponseType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Additive = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LevelShift = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TemporaryChange = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Seasonal = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HistoryAndForecastResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="hyperparameters")]
		public ForecastHyperparameterResponse Hyperparameters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timeSeries")]
		public TimeSeriesHistoryAndForecastResponse[] TimeSeries { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TimeSeriesHistoryAndForecastResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="error")]
		public System.Nullable<System.Double> Error { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="forecastData")]
		public PlanningLevelForecastResultData[] ForecastData { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="historyData")]
		public PlanningLevelForecastResultData[] HistoryData { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="method")]
		public string Method { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timeSeriesId")]
		public string TimeSeriesId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HyperparameterModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="abcClassificationThresholdA")]
		public System.Nullable<System.Double> AbcClassificationThresholdA { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="abcClassificationThresholdB")]
		public System.Nullable<System.Double> AbcClassificationThresholdB { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="abcClassificationThresholdC")]
		public System.Nullable<System.Double> AbcClassificationThresholdC { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="discardData")]
		public System.Nullable<System.Boolean> DiscardData { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errorType")]
		public PlanningLevelInfoRequestErrorType ErrorType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="holdOutPeriod")]
		public System.Nullable<System.Int32> HoldOutPeriod { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="noFcst")]
		public System.Nullable<System.Int32> NoFcst { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="outlierDetection")]
		public System.Nullable<System.Boolean> OutlierDetection { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="periodicity")]
		public System.Nullable<System.Int32> Periodicity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="xyzClassificationThresholdX")]
		public System.Nullable<System.Double> XyzClassificationThresholdX { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="xyzClassificationThresholdY")]
		public System.Nullable<System.Double> XyzClassificationThresholdY { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="xyzClassificationThresholdZ")]
		public System.Nullable<System.Double> XyzClassificationThresholdZ { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class JobResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="jobId")]
		public System.Nullable<System.Int32> JobId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class JsonForecastResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public PlanningLevelDataDto[] Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="planningLevelId")]
		public string PlanningLevelId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startDate")]
		public string StartDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LifecycleManyToOneRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public PlanningLevelDataDto[] Data { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="planningLevelId")]
		public string PlanningLevelId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ratios")]
		public double[] Ratios { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LifecycleOneToOneRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public PlanningLevelDataDto Data { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="planningLevelId")]
		public string PlanningLevelId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ratio")]
		public System.Nullable<System.Double> Ratio { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MethodDto
	{
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="queue")]
		public string Queue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="replyQueue")]
		public string ReplyQueue { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NewEntityRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="address")]
		public string Address { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NewModelRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NewTokenRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="entityToken")]
		public string EntityToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="expirationDate")]
		public System.Nullable<System.DateTimeOffset> ExpirationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userToken")]
		public string UserToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NewUserRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="entityToken")]
		public string EntityToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="firstname")]
		public string Firstname { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public System.Nullable<System.Boolean> IsActive { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastname")]
		public string Lastname { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="phone")]
		public string Phone { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OptimalParameterResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="hyperparameters")]
		public ForecastHyperparameterResponse Hyperparameters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timeSeries")]
		public TimeSeriesOptimalParametersResponse[] TimeSeries { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TimeSeriesOptimalParametersResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="method")]
		public string Method { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="optimalParameters")]
		public ForecastOptimalParametersResponse OptimalParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timeSeriesId")]
		public string TimeSeriesId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OutliersRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public PlanningLevelDataDto[] Data { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="planningLevelId")]
		public string PlanningLevelId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startDate")]
		public string StartDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PlanningLevelReRunRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="method")]
		public string Method { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="params")]
		public PlanningLevelInfoRequest Params { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="planningLevelId")]
		public int PlanningLevelId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PlanningLevelRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public PlanningLevelDataDto[] Data { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="method")]
		public string Method { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="override")]
		public System.Nullable<System.Boolean> Override { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="params")]
		public PlanningLevelInfoRequest Params { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="planningLevelId")]
		public string PlanningLevelId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startDate")]
		public string StartDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PortfolioAbcModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="abc12")]
		public string Abc12 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="abc12Value")]
		public System.Nullable<System.Double> Abc12Value { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="abc6")]
		public string Abc6 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="abc6Value")]
		public System.Nullable<System.Double> Abc6Value { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="abc9")]
		public string Abc9 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="abc9Value")]
		public System.Nullable<System.Double> Abc9Value { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="thresholdA")]
		public System.Nullable<System.Double> ThresholdA { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="thresholdB")]
		public System.Nullable<System.Double> ThresholdB { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="thresholdC")]
		public System.Nullable<System.Double> ThresholdC { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PortfolioModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="abc12")]
		public string Abc12 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="abc12Value")]
		public System.Nullable<System.Double> Abc12Value { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="abc6")]
		public string Abc6 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="abc6Value")]
		public System.Nullable<System.Double> Abc6Value { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="abc9")]
		public string Abc9 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="abc9Value")]
		public System.Nullable<System.Double> Abc9Value { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="thresholdA")]
		public System.Nullable<System.Double> ThresholdA { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="thresholdB")]
		public System.Nullable<System.Double> ThresholdB { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="thresholdC")]
		public System.Nullable<System.Double> ThresholdC { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="thresholdX")]
		public System.Nullable<System.Double> ThresholdX { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="thresholdY")]
		public System.Nullable<System.Double> ThresholdY { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="thresholdZ")]
		public System.Nullable<System.Double> ThresholdZ { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="xyz12")]
		public string Xyz12 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="xyz12Value")]
		public System.Nullable<System.Double> Xyz12Value { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="xyz6")]
		public string Xyz6 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="xyz6Value")]
		public System.Nullable<System.Double> Xyz6Value { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="xyz9")]
		public string Xyz9 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="xyz9Value")]
		public System.Nullable<System.Double> Xyz9Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PortfolioRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public PlanningLevelDataDto[] Data { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="planningLevelId")]
		public string PlanningLevelId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startDate")]
		public string StartDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PortfolioXyzModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="thresholdX")]
		public System.Nullable<System.Double> ThresholdX { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="thresholdY")]
		public System.Nullable<System.Double> ThresholdY { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="thresholdZ")]
		public System.Nullable<System.Double> ThresholdZ { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="xyz12")]
		public string Xyz12 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="xyz12Value")]
		public System.Nullable<System.Double> Xyz12Value { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="xyz6")]
		public string Xyz6 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="xyz6Value")]
		public System.Nullable<System.Double> Xyz6Value { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="xyz9")]
		public string Xyz9 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="xyz9Value")]
		public System.Nullable<System.Double> Xyz9Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RewindHyperparameterResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="costOfError")]
		public System.Nullable<System.Double> CostOfError { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="discardData")]
		public System.Nullable<System.Boolean> DiscardData { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errorType")]
		public PlanningLevelInfoRequestErrorType ErrorType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="holdOutPeriod")]
		public System.Nullable<System.Int32> HoldOutPeriod { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="noFcst")]
		public System.Nullable<System.Int32> NoFcst { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="periodicity")]
		public System.Nullable<System.Int32> Periodicity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rewindTimeFrame")]
		public System.Nullable<System.Int32> RewindTimeFrame { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RewindResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="hyperparameters")]
		public RewindHyperparameterResponse Hyperparameters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timeSeries")]
		public RewindTimeSeriesResponse[] TimeSeries { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalCost")]
		public System.Nullable<System.Double> TotalCost { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RewindTimeSeriesResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="customerError")]
		public System.Nullable<System.Double> CustomerError { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errorDiff")]
		public System.Nullable<System.Double> ErrorDiff { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="icueError")]
		public System.Nullable<System.Double> IcueError { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timeSeries")]
		public string TimeSeries { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalCost")]
		public System.Nullable<System.Double> TotalCost { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="useIcue")]
		public System.Nullable<System.Boolean> UseIcue { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TimeSeriesOutliersResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="outliers")]
		public OutlierResponse[] Outliers { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timeSeriesId")]
		public string TimeSeriesId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ToggleRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public System.Nullable<System.Boolean> IsActive { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ToggleUserRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="entityId")]
		public System.Nullable<System.Int32> EntityId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public System.Nullable<System.Boolean> IsActive { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Get all organizations
		/// This is an iCUE only endpoint or Enterprise feature.
		/// AdministrationEntityGet administration/entity
		/// </summary>
		/// <returns>Success</returns>
		public async Task<EntityResponse[]> AdministrationEntityGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "administration/entity";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<EntityResponse[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create organization
		/// This is an iCUE only endpoint or Enterprise feature.
		/// AdministrationEntityPost administration/entity
		/// </summary>
		/// <returns>Success</returns>
		public async Task<string> AdministrationEntityPostAsync(NewEntityRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "administration/entity";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Pause organization
		/// This is an iCUE only endpoint or Enterprise feature.
		/// AdministrationEntityPut administration/entity
		/// </summary>
		/// <returns>Success</returns>
		public async Task AdministrationEntityPutAsync(ToggleRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "administration/entity";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete organization
		/// This is an iCUE only endpoint or Enterprise feature.
		/// AdministrationEntity_idDelete administration/entity/{id}
		/// </summary>
		/// <returns>Success</returns>
		public async Task AdministrationEntity_idDeleteAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "administration/entity/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all common Models
		/// Returns models that are common for all Organizations
		/// AdministrationModelGet administration/model
		/// </summary>
		/// <returns>Success</returns>
		public async Task<MethodDto[]> AdministrationModelGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "administration/model";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<MethodDto[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Register new forecasting model
		/// Register new forecasting model for all organziations
		/// AdministrationModelPost administration/model
		/// </summary>
		/// <returns>Success</returns>
		public async Task<MethodDto> AdministrationModelPostAsync(NewModelRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "administration/model";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<MethodDto>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get Models for Organization
		/// Returns models registered for Organization
		/// AdministrationModel_entityIdGet administration/model/{entityId}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<MethodDto[]> AdministrationModel_entityIdGetAsync(int entityId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "administration/model/"+entityId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<MethodDto[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Register new forecasting model
		/// Register new forecasting model for single organziation
		/// AdministrationModel_entityIdPost administration/model/{entityId}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<MethodDto> AdministrationModel_entityIdPostAsync(int entityId, NewModelRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "administration/model/"+entityId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<MethodDto>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lock planning level
		/// Lock planning level against modification. This is an Enterprise feature.
		/// AdministrationPlanning_levelLockPost administration/planning-level/lock
		/// </summary>
		/// <returns>Success</returns>
		public async Task AdministrationPlanning_levelLockPostAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "administration/planning-level/lock";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete planning level
		/// Delete planning level. This is an Enterprise feature.
		/// AdministrationPlanning_level_entityId_idDelete administration/planning-level/{entityId}/{id}
		/// </summary>
		/// <returns>Success</returns>
		public async Task AdministrationPlanning_level_entityId_idDeleteAsync(int entityId, int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "administration/planning-level/"+entityId+"/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Issue a token
		/// This is an iCUE only endpoint.
		/// AdministrationTokenPost administration/token
		/// </summary>
		/// <returns>Success</returns>
		public async Task<string> AdministrationTokenPostAsync(NewTokenRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "administration/token";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Create user
		/// Create new user for entity/organization. This can be done by entity administrator.
		/// AdministrationUserPost administration/user
		/// </summary>
		/// <returns>Success</returns>
		public async Task<string> AdministrationUserPostAsync(NewUserRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "administration/user";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update user
		/// Update user
		/// AdministrationUserPut administration/user
		/// </summary>
		/// <returns>Success</returns>
		public async Task AdministrationUserPutAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "administration/user";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lock user
		/// After lock user won't be able to use iCUE API endpoints.
		/// AdministrationUserLockPut administration/user/lock
		/// </summary>
		/// <returns>Success</returns>
		public async Task AdministrationUserLockPutAsync(ToggleUserRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "administration/user/lock";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get all users
		/// Get all users
		/// AdministrationUser_entityIdGet administration/user/{entityId}
		/// </summary>
		/// <returns>Success</returns>
		public async Task AdministrationUser_entityIdGetAsync(int entityId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "administration/user/"+entityId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete user
		/// Delete user
		/// AdministrationUser_entityId_idDelete administration/user/{entityId}/{id}
		/// </summary>
		/// <returns>Success</returns>
		public async Task AdministrationUser_entityId_idDeleteAsync(int entityId, int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "administration/user/"+entityId+"/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Forecasts only, for faster results
		/// To support maximum operation and integration speed, this endpoint only returns the calculated forecast.
		/// ForecastPost forecast
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ForecastResponse> ForecastPostAsync(PlanningLevelRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "forecast";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ForecastResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Forecast utilizing advanced machine learning models
		/// Forecast AI is utilizing advanced machine learning models. Please be mindful of enhanced execution times (~1-2s per timeseries).
		/// ForecastAIPost forecast/AI
		/// </summary>
		/// <returns>Success</returns>
		public async Task<JobResponse> ForecastAIPostAsync(AiPlanningLevelRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "forecast/AI";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<JobResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// History and forecast utilizing advanced machine learning models
		/// History and forecast utilizing advanced machine learning models. Please be mindful of enhanced execution times (~1-2s per timeseries).
		/// ForecastAIHistory_and_forecastPost forecast/AI/history-and-forecast
		/// </summary>
		/// <returns>Success</returns>
		public async Task<JobResponse> ForecastAIHistory_and_forecastPostAsync(AiPlanningLevelRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "forecast/AI/history-and-forecast";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<JobResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Bottom up forecasting
		/// Calculate forecast by timeseries and sum results up to establish forecast for top level timeseries.
		/// ForecastForecast_bottom_upPost forecast/forecast-bottom-up
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ForecastBottomUpResponse> ForecastForecast_bottom_upPostAsync(PlanningLevelRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "forecast/forecast-bottom-up";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ForecastBottomUpResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Top down forecasting
		/// Calculate forecast based on sum of of lower level timeseries and distribute forecast down based on ratios. Great feature for planning levels with dynamic timeseries.
		/// ForecastForecast_top_downPost forecast/forecast-top-down
		/// </summary>
		/// <returns>Success</returns>
		public async Task ForecastForecast_top_downPostAsync(PlanningLevelRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "forecast/forecast-top-down";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Full forecast result details, including error, trend seasonality and outlier
		/// Response provides full forecast result details, including error, trend seasonality and outlier. Great for advanced analysis.
		/// ForecastFull_detailPost forecast/full-detail
		/// </summary>
		/// <returns>Success</returns>
		public async Task<FullDetailsForecastResponse> ForecastFull_detailPostAsync(PlanningLevelRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "forecast/full-detail";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<FullDetailsForecastResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// History and forecast for fast timeseries view
		/// Reponse provides history and forecast per timeseries. Great for visualizing results.
		/// ForecastHistory_and_forecastPost forecast/history-and-forecast
		/// </summary>
		/// <returns>Success</returns>
		public async Task<HistoryAndForecastResponse> ForecastHistory_and_forecastPostAsync(PlanningLevelRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "forecast/history-and-forecast";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<HistoryAndForecastResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get optimal parameter per method
		/// Use the optimal parameter sets created by iCUE to set the method parameters of your internal planning system.
		/// ForecastOptimal_parameterPost forecast/optimal-parameter
		/// </summary>
		/// <returns>Success</returns>
		public async Task<OptimalParameterResponse> ForecastOptimal_parameterPostAsync(PlanningLevelRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "forecast/optimal-parameter";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OptimalParameterResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Rerun previously uploaded planning level
		/// Rerun previously uploaded planning level.
		/// ForecastRerunPost forecast/rerun
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ForecastResponse> ForecastRerunPostAsync(PlanningLevelReRunRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "forecast/rerun";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ForecastResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Forecast result
		/// Get result for forecast job
		/// ForecastResult_jobIdGet forecast/result/{jobId}
		/// </summary>
		/// <returns>Success</returns>
		public async Task ForecastResult_jobIdGetAsync(int jobId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "forecast/result/"+jobId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Forecast status
		/// Get status for forecast job
		/// ForecastStatus_jobIdGet forecast/status/{jobId}
		/// </summary>
		/// <returns>Success</returns>
		public async Task ForecastStatus_jobIdGetAsync(int jobId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "forecast/status/"+jobId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get hyperparameters
		/// Get entity global hyperparameters.
		/// HyperparameterGet hyperparameter
		/// </summary>
		/// <returns>Success</returns>
		public async Task<HyperparameterModel> HyperparameterGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "hyperparameter";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<HyperparameterModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Set hyperparameters
		/// Set entity global hyperparameters. Hyperparameters can be overwritten by user and planning level (add to JSON body).
		/// HyperparameterPost hyperparameter
		/// </summary>
		/// <returns>Success</returns>
		public async Task HyperparameterPostAsync(HyperparameterModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "hyperparameter";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Calculate Amazon Inventory Performance Index (IPI)
		/// Calculate Amazon Inventory Performance Index (IPI)
		/// InventoryAmazon_ipiPost inventory/amazon-ipi
		/// </summary>
		/// <returns>Success</returns>
		public async Task InventoryAmazon_ipiPostAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "inventory/amazon-ipi";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Carrying Cost
		/// Carrying Cost
		/// InventoryCaryying_costPost inventory/caryying-cost
		/// </summary>
		/// <returns>Success</returns>
		public async Task InventoryCaryying_costPostAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "inventory/caryying-cost";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Calculate economic order quantity
		/// Calculate economic order quantity
		/// InventoryEoqPost inventory/eoq
		/// </summary>
		/// <returns>Success</returns>
		public async Task InventoryEoqPostAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "inventory/eoq";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Calculate fill rate
		/// Calculate fill rate
		/// InventoryFill_ratePost inventory/fill-rate
		/// </summary>
		/// <returns>Success</returns>
		public async Task InventoryFill_ratePostAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "inventory/fill-rate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Calculate financial impact of forecast accuracy
		/// Calculate financial impact of forecast accuracy
		/// InventoryFinancial_imapct_forecast_accuracyPost inventory/financial-imapct-forecast-accuracy
		/// </summary>
		/// <returns>Success</returns>
		public async Task InventoryFinancial_imapct_forecast_accuracyPostAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "inventory/financial-imapct-forecast-accuracy";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Inventroy Turn-over
		/// Inventroy Turn-over
		/// InventoryInventory_turnoverPost inventory/inventory-turnover
		/// </summary>
		/// <returns>Success</returns>
		public async Task InventoryInventory_turnoverPostAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "inventory/inventory-turnover";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Calculate lead time demand
		/// Calculate lead time demand
		/// InventoryLtdPost inventory/ltd
		/// </summary>
		/// <returns>Success</returns>
		public async Task InventoryLtdPostAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "inventory/ltd";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Calculate minimum order quantity
		/// Calculate minimum order quantity
		/// InventoryMoqPost inventory/moq
		/// </summary>
		/// <returns>Success</returns>
		public async Task InventoryMoqPostAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "inventory/moq";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Calculate optimal service level
		/// Calculate optimal service level
		/// InventoryOptimal_service_levelPost inventory/optimal-service-level
		/// </summary>
		/// <returns>Success</returns>
		public async Task InventoryOptimal_service_levelPostAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "inventory/optimal-service-level";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Re-order Point
		/// Re-order Point
		/// InventoryReorder_pointPost inventory/reorder-point
		/// </summary>
		/// <returns>Success</returns>
		public async Task InventoryReorder_pointPostAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "inventory/reorder-point";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Safety Stock
		/// Safety Stock
		/// InventorySafety_stockPost inventory/safety-stock
		/// </summary>
		/// <returns>Success</returns>
		public async Task InventorySafety_stockPostAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "inventory/safety-stock";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Calculate service level
		/// Calculate service level
		/// InventoryService_levelPost inventory/service-level
		/// </summary>
		/// <returns>Success</returns>
		public async Task InventoryService_levelPostAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "inventory/service-level";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Calculate inventory turns
		/// Calculate inventory turns
		/// InventoryTurnsPost inventory/turns
		/// </summary>
		/// <returns>Success</returns>
		public async Task InventoryTurnsPostAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "inventory/turns";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Map from old product to new product to create artifical history
		/// Supports the creation of artificial startup history for new products, based on a flexible mapping of old to new. This is an Enterprise feature.
		/// LifecycleMany_to_onePost lifecycle/many-to-one
		/// </summary>
		/// <returns>Success</returns>
		public async Task<PlanningLevelDataDto> LifecycleMany_to_onePostAsync(LifecycleManyToOneRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "lifecycle/many-to-one";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PlanningLevelDataDto>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Map from old product to new product to create artifical history
		/// Supports the creation of artificial startup history for new products, based on a flexible mapping of old to new. This is an Enterprise feature.
		/// LifecycleOne_to_onePost lifecycle/one-to-one
		/// </summary>
		/// <returns>Success</returns>
		public async Task<PlanningLevelDataDto> LifecycleOne_to_onePostAsync(LifecycleOneToOneRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "lifecycle/one-to-one";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PlanningLevelDataDto>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get outlier
		/// Identify outliers (single and repetitive spikes, seasonality, masked outliers, trend and level jumps, amongst other topics) and use for cleansing of the history stream prior to forecast claculation. Depending on math model used, this approach often improves results dramatically, as it removes disturbances.
		/// OutlierPost outlier
		/// </summary>
		/// <returns>Success</returns>
		public async Task<TimeSeriesOutliersResponse[]> OutlierPostAsync(OutliersRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "outlier";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TimeSeriesOutliersResponse[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// ABCxyz Analysis
		/// Calculate and retrieve results of ABC (pareto analysis) and xyz (Coefficient of variation) per timeseries and planning level. This analysis is a powerful means to estbalish a proper planning cadence, best accuracy messures and optimal hyperparameters for the organization. It provides a balanced and actionable overview of the entire product portfolio.
		/// PortfolioPost portfolio
		/// </summary>
		/// <returns>Success</returns>
		public async Task<PortfolioModel[]> PortfolioPostAsync(PortfolioRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "portfolio";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PortfolioModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// ABC Analysis
		/// Calculate and retrieve results of ABC (pareto analysis) per timeseries and planning level.
		/// PortfolioAbcPost portfolio/abc
		/// </summary>
		/// <returns>Success</returns>
		public async Task<PortfolioAbcModel[]> PortfolioAbcPostAsync(PortfolioRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "portfolio/abc";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PortfolioAbcModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Planning level rewind to calculate and measure performance potential (internal versus iCUE).
		/// Planning level rewind to calculate and measure performance potential (internal versus iCUE).
		/// PortfolioForecast_performance_rewindPost portfolio/forecast-performance-rewind
		/// </summary>
		/// <returns>Success</returns>
		public async Task<RewindResponse> PortfolioForecast_performance_rewindPostAsync(ForecastPerformanceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "portfolio/forecast-performance-rewind";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RewindResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// xyz Analysis
		/// Calculate and retrieve results of xyz (Coefficient of variation) per timeseries and planning level.
		/// PortfolioXyzPost portfolio/xyz
		/// </summary>
		/// <returns>Success</returns>
		public async Task<PortfolioXyzModel[]> PortfolioXyzPostAsync(PortfolioRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "portfolio/xyz";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PortfolioXyzModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Bundle pricing
		/// Bundle pricing
		/// PricingBundle_pricingPost pricing/bundle-pricing
		/// </summary>
		/// <returns>Success</returns>
		public async Task PricingBundle_pricingPostAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "pricing/bundle-pricing";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// PricingCompetitive_pricingPost pricing/competitive-pricing
		/// </summary>
		/// <returns>Success</returns>
		public async Task PricingCompetitive_pricingPostAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "pricing/competitive-pricing";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// PricingCost_plus_pricingPost pricing/cost-plus-pricing
		/// </summary>
		/// <returns>Success</returns>
		public async Task PricingCost_plus_pricingPostAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "pricing/cost-plus-pricing";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// PricingDecoy_pricingPost pricing/decoy-pricing
		/// </summary>
		/// <returns>Success</returns>
		public async Task PricingDecoy_pricingPostAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "pricing/decoy-pricing";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// PricingOdd_pricingPost pricing/odd-pricing
		/// </summary>
		/// <returns>Success</returns>
		public async Task PricingOdd_pricingPostAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "pricing/odd-pricing";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// PricingPenetration_pricingPost pricing/penetration-pricing
		/// </summary>
		/// <returns>Success</returns>
		public async Task PricingPenetration_pricingPostAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "pricing/penetration-pricing";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// PricingPrice_elasticity_of_demandPost pricing/price-elasticity-of-demand
		/// </summary>
		/// <returns>Success</returns>
		public async Task PricingPrice_elasticity_of_demandPostAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "pricing/price-elasticity-of-demand";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// SKU rationalization report
		/// SKU rationalization report
		/// ReportPerformanceSku_rationalization_planningLevelIdGet report/performance/sku-rationalization/{planningLevelId}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<PortfolioModel[]> ReportPerformanceSku_rationalization_planningLevelIdGetAsync(int planningLevelId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "report/performance/sku-rationalization/"+planningLevelId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PortfolioModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Month over month performance per planning level
		/// Month over month performance per planning level
		/// ReportPerformance_planningLevelIdGet report/performance/{planningLevelId}
		/// </summary>
		/// <returns>Success</returns>
		public async Task ReportPerformance_planningLevelIdGetAsync(string planningLevelId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "report/performance/"+ (planningLevelId==null? "" : System.Uri.EscapeDataString(planningLevelId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get list of plannign levels by organization
		/// Get list of plannign levels by organization
		/// ReportPlanning_levelOrganizationGet report/planning-level/organization
		/// </summary>
		/// <returns>Success</returns>
		public async Task ReportPlanning_levelOrganizationGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "report/planning-level/organization";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get list of plannign levels by user
		/// Get list of plannign levels by user
		/// ReportPlanning_levelUserGet report/planning-level/user
		/// </summary>
		/// <returns>Success</returns>
		public async Task ReportPlanning_levelUserGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "report/planning-level/user";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get usage statistics per user
		/// Get usage statistics per user
		/// ReportUserGet report/user
		/// </summary>
		/// <returns>Success</returns>
		public async Task ReportUserGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "report/user";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
