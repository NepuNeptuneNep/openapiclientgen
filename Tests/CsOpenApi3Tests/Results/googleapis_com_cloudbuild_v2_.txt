//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AuditConfig
	{
		
		/// <summary>
		/// The configuration for logging of each type of permission.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="auditLogConfigs")]
		public AuditLogConfig[] AuditLogConfigs { get; set; }
		
		/// <summary>
		/// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="service")]
		public string Service { get; set; }
	}
	
	/// <summary>
	/// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AuditLogConfig
	{
		
		/// <summary>
		/// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exemptedMembers")]
		public string[] ExemptedMembers { get; set; }
		
		/// <summary>
		/// The log type that this config enables.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logType")]
		public System.Nullable<AuditLogConfigLogType> LogType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AuditLogConfigLogType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOG_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADMIN_READ = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATA_WRITE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATA_READ = 3,
	}
	
	/// <summary>
	/// Message for creating repositoritories in batch.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchCreateRepositoriesRequest
	{
		
		/// <summary>
		/// Required. The request messages specifying the repositories to create.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requests")]
		public CreateRepositoryRequest[] Requests { get; set; }
	}
	
	/// <summary>
	/// Message for creating a Repository.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateRepositoryRequest
	{
		
		/// <summary>
		/// Required. The connection to contain the repository. If the request is part of a BatchCreateRepositoriesRequest, this field should be empty or match the parent specified there.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parent")]
		public string Parent { get; set; }
		
		/// <summary>
		/// A repository associated to a parent connection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="repository")]
		public Repository Repository { get; set; }
		
		/// <summary>
		/// Required. The ID to use for the repository, which will become the final component of the repository's resource name. This ID should be unique in the connection. Allows alphanumeric characters and any of -._~%!$&'()*+,;=@.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="repositoryId")]
		public string RepositoryId { get; set; }
	}
	
	/// <summary>
	/// A repository associated to a parent connection.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Repository
	{
		
		/// <summary>
		/// Allows clients to store small amounts of arbitrary data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="annotations")]
		public System.Collections.Generic.Dictionary<string, string> Annotations { get; set; }
		
		/// <summary>
		/// Output only. Server assigned timestamp for when the connection was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// Immutable. Resource name of the repository, in the format `projects/*/locations/*/connections/*/repositories/*`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required. Git Clone HTTPS URI.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="remoteUri")]
		public string RemoteUri { get; set; }
		
		/// <summary>
		/// Output only. Server assigned timestamp for when the connection was updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
		
		/// <summary>
		/// Output only. External ID of the webhook created for the repository.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="webhookId")]
		public string WebhookId { get; set; }
	}
	
	/// <summary>
	/// Message for response of creating repositories in batch.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchCreateRepositoriesResponse
	{
		
		/// <summary>
		/// Repository resources created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="repositories")]
		public Repository[] Repositories { get; set; }
	}
	
	/// <summary>
	/// Associates `members`, or principals, with a `role`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Binding
	{
		
		/// <summary>
		/// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="condition")]
		public Expr Condition { get; set; }
		
		/// <summary>
		/// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `principal://iam.googleapis.com/locations/global/workforcePools/{pool_id}/subject/{subject_attribute_value}`: A single identity in a workforce identity pool. * `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/group/{group_id}`: All workforce identities in a group. * `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/attribute.{attribute_name}/{attribute_value}`: All workforce identities with a specific attribute value. * `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/*`: All identities in a workforce identity pool. * `principal://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/subject/{subject_attribute_value}`: A single identity in a workload identity pool. * `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/group/{group_id}`: A workload identity pool group. * `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/attribute.{attribute_name}/{attribute_value}`: All identities in a workload identity pool with a certain attribute. * `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/*`: All identities in a workload identity pool. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `deleted:principal://iam.googleapis.com/locations/global/workforcePools/{pool_id}/subject/{subject_attribute_value}`: Deleted single identity in a workforce identity pool. For example, `deleted:principal://iam.googleapis.com/locations/global/workforcePools/my-pool-id/subject/my-subject-attribute-value`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="members")]
		public string[] Members { get; set; }
		
		/// <summary>
		/// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="role")]
		public string Role { get; set; }
	}
	
	/// <summary>
	/// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Expr
	{
		
		/// <summary>
		/// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Textual representation of an expression in Common Expression Language syntax.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expression")]
		public string Expression { get; set; }
		
		/// <summary>
		/// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	/// <summary>
	/// The request message for Operations.CancelOperation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CancelOperationRequest
	{
	}
	
	/// <summary>
	/// Capabilities adds and removes POSIX capabilities from running containers.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Capabilities
	{
		
		/// <summary>
		/// Optional. Added capabilities +optional
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="add")]
		public string[] Add { get; set; }
		
		/// <summary>
		/// Optional. Removed capabilities +optional
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="drop")]
		public string[] Drop { get; set; }
	}
	
	/// <summary>
	/// ChildStatusReference is used to point to the statuses of individual TaskRuns and Runs within this PipelineRun.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ChildStatusReference
	{
		
		/// <summary>
		/// Name is the name of the TaskRun or Run this is referencing.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// PipelineTaskName is the name of the PipelineTask this is referencing.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pipelineTaskName")]
		public string PipelineTaskName { get; set; }
		
		/// <summary>
		/// Output only. Type of the child reference.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<ChildStatusReferenceType> Type { get; set; }
		
		/// <summary>
		/// WhenExpressions is the list of checks guarding the execution of the PipelineTask
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="whenExpressions")]
		public WhenExpression[] WhenExpressions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ChildStatusReferenceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TASK_RUN = 1,
	}
	
	/// <summary>
	/// Conditions that need to be true for the task to run.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WhenExpression
	{
		
		/// <summary>
		/// Operator that represents an Input's relationship to the values
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expressionOperator")]
		public System.Nullable<WhenExpressionExpressionOperator> ExpressionOperator { get; set; }
		
		/// <summary>
		/// Input is the string for guard checking which can be a static input or an output from a parent Task.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="input")]
		public string Input { get; set; }
		
		/// <summary>
		/// Values is an array of strings, which is compared against the input, for guard checking.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="values")]
		public string[] Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum WhenExpressionExpressionOperator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPRESSION_OPERATOR_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_IN = 2,
	}
	
	/// <summary>
	/// A connection to a SCM like GitHub, GitHub Enterprise, Bitbucket Data Center or GitLab.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Connection
	{
		
		/// <summary>
		/// Allows clients to store small amounts of arbitrary data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="annotations")]
		public System.Collections.Generic.Dictionary<string, string> Annotations { get; set; }
		
		/// <summary>
		/// Output only. Server assigned timestamp for when the connection was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// If disabled is set to true, functionality is disabled for this connection. Repository based API methods and webhooks processing for repositories in this connection will be disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		/// <summary>
		/// This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// Configuration for connections to github.com.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="githubConfig")]
		public GitHubConfig GithubConfig { get; set; }
		
		/// <summary>
		/// Configuration for connections to an instance of GitHub Enterprise.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="githubEnterpriseConfig")]
		public GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfig GithubEnterpriseConfig { get; set; }
		
		/// <summary>
		/// Configuration for connections to gitlab.com or an instance of GitLab Enterprise.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gitlabConfig")]
		public GoogleDevtoolsCloudbuildV2GitLabConfig GitlabConfig { get; set; }
		
		/// <summary>
		/// Describes stage and necessary actions to be taken by the user to complete the installation. Used for GitHub and GitHub Enterprise based connections.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="installationState")]
		public InstallationState InstallationState { get; set; }
		
		/// <summary>
		/// Immutable. The resource name of the connection, in the format `projects/{project}/locations/{location}/connections/{connection_id}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Output only. Set to true when the connection is being set up or updated in the background.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reconciling")]
		public System.Nullable<System.Boolean> Reconciling { get; set; }
		
		/// <summary>
		/// Output only. Server assigned timestamp for when the connection was updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
	}
	
	/// <summary>
	/// Configuration for connections to github.com.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GitHubConfig
	{
		
		/// <summary>
		/// GitHub App installation id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appInstallationId")]
		public string AppInstallationId { get; set; }
		
		/// <summary>
		/// Represents an OAuth token of the account that authorized the Connection, and associated metadata.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authorizerCredential")]
		public OAuthCredential AuthorizerCredential { get; set; }
	}
	
	/// <summary>
	/// Represents an OAuth token of the account that authorized the Connection, and associated metadata.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OAuthCredential
	{
		
		/// <summary>
		/// A SecretManager resource containing the OAuth token that authorizes the Cloud Build connection. Format: `projects/*/secrets/*/versions/*`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oauthTokenSecretVersion")]
		public string OauthTokenSecretVersion { get; set; }
		
		/// <summary>
		/// Output only. The username associated to this token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
	}
	
	/// <summary>
	/// Configuration for connections to an instance of GitHub Enterprise.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfig
	{
		
		/// <summary>
		/// Required. API Key used for authentication of webhook events.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apiKey")]
		public string ApiKey { get; set; }
		
		/// <summary>
		/// Id of the GitHub App created from the manifest.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appId")]
		public string AppId { get; set; }
		
		/// <summary>
		/// ID of the installation of the GitHub App.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appInstallationId")]
		public string AppInstallationId { get; set; }
		
		/// <summary>
		/// The URL-friendly name of the GitHub App.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appSlug")]
		public string AppSlug { get; set; }
		
		/// <summary>
		/// Required. The URI of the GitHub Enterprise host this connection is for.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hostUri")]
		public string HostUri { get; set; }
		
		/// <summary>
		/// SecretManager resource containing the private key of the GitHub App, formatted as `projects/*/secrets/*/versions/*`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="privateKeySecretVersion")]
		public string PrivateKeySecretVersion { get; set; }
		
		/// <summary>
		/// Output only. GitHub Enterprise version installed at the host_uri.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serverVersion")]
		public string ServerVersion { get; set; }
		
		/// <summary>
		/// ServiceDirectoryConfig represents Service Directory configuration for a connection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceDirectoryConfig")]
		public GoogleDevtoolsCloudbuildV2ServiceDirectoryConfig ServiceDirectoryConfig { get; set; }
		
		/// <summary>
		/// SSL certificate to use for requests to GitHub Enterprise.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sslCa")]
		public string SslCa { get; set; }
		
		/// <summary>
		/// SecretManager resource containing the webhook secret of the GitHub App, formatted as `projects/*/secrets/*/versions/*`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="webhookSecretSecretVersion")]
		public string WebhookSecretSecretVersion { get; set; }
	}
	
	/// <summary>
	/// ServiceDirectoryConfig represents Service Directory configuration for a connection.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleDevtoolsCloudbuildV2ServiceDirectoryConfig
	{
		
		/// <summary>
		/// Required. The Service Directory service name. Format: projects/{project}/locations/{location}/namespaces/{namespace}/services/{service}.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="service")]
		public string Service { get; set; }
	}
	
	/// <summary>
	/// Configuration for connections to gitlab.com or an instance of GitLab Enterprise.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleDevtoolsCloudbuildV2GitLabConfig
	{
		
		/// <summary>
		/// Represents a personal access token that authorized the Connection, and associated metadata.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authorizerCredential")]
		public UserCredential AuthorizerCredential { get; set; }
		
		/// <summary>
		/// The URI of the GitLab Enterprise host this connection is for. If not specified, the default value is https://gitlab.com.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hostUri")]
		public string HostUri { get; set; }
		
		/// <summary>
		/// Represents a personal access token that authorized the Connection, and associated metadata.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="readAuthorizerCredential")]
		public UserCredential ReadAuthorizerCredential { get; set; }
		
		/// <summary>
		/// Output only. Version of the GitLab Enterprise server running on the `host_uri`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serverVersion")]
		public string ServerVersion { get; set; }
		
		/// <summary>
		/// ServiceDirectoryConfig represents Service Directory configuration for a connection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceDirectoryConfig")]
		public GoogleDevtoolsCloudbuildV2ServiceDirectoryConfig ServiceDirectoryConfig { get; set; }
		
		/// <summary>
		/// SSL certificate to use for requests to GitLab Enterprise.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sslCa")]
		public string SslCa { get; set; }
		
		/// <summary>
		/// Required. Immutable. SecretManager resource containing the webhook secret of a GitLab Enterprise project, formatted as `projects/*/secrets/*/versions/*`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="webhookSecretSecretVersion")]
		public string WebhookSecretSecretVersion { get; set; }
	}
	
	/// <summary>
	/// Represents a personal access token that authorized the Connection, and associated metadata.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UserCredential
	{
		
		/// <summary>
		/// Required. A SecretManager resource containing the user token that authorizes the Cloud Build connection. Format: `projects/*/secrets/*/versions/*`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userTokenSecretVersion")]
		public string UserTokenSecretVersion { get; set; }
		
		/// <summary>
		/// Output only. The username associated to this token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
	}
	
	/// <summary>
	/// Describes stage and necessary actions to be taken by the user to complete the installation. Used for GitHub and GitHub Enterprise based connections.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InstallationState
	{
		
		/// <summary>
		/// Output only. Link to follow for next action. Empty string if the installation is already complete.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="actionUri")]
		public string ActionUri { get; set; }
		
		/// <summary>
		/// Output only. Message of what the user should do next to continue the installation. Empty string if the installation is already complete.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// Output only. Current step of the installation process.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stage")]
		public System.Nullable<InstallationStateStage> Stage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum InstallationStateStage
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STAGE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING_CREATE_APP = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING_USER_OAUTH = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING_INSTALL_APP = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETE = 4,
	}
	
	/// <summary>
	/// EmbeddedTask defines a Task that is embedded in a Pipeline.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EmbeddedTask
	{
		
		/// <summary>
		/// User annotations. See https://google.aip.dev/128#annotations
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="annotations")]
		public System.Collections.Generic.Dictionary<string, string> Annotations { get; set; }
		
		/// <summary>
		/// TaskSpec contains the Spec to instantiate a TaskRun.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taskSpec")]
		public TaskSpec TaskSpec { get; set; }
	}
	
	/// <summary>
	/// TaskSpec contains the Spec to instantiate a TaskRun.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TaskSpec
	{
		
		/// <summary>
		/// Description of the task.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Sidecars that run alongside the Task’s step containers that should be added to this Task.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="managedSidecars")]
		public string[] ManagedSidecars { get; set; }
		
		/// <summary>
		/// List of parameters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="params")]
		public ParamSpec[] Params { get; set; }
		
		/// <summary>
		/// Values that this Task can output.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="results")]
		public TaskResult[] Results { get; set; }
		
		/// <summary>
		/// Sidecars that run alongside the Task's step containers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sidecars")]
		public Sidecar[] Sidecars { get; set; }
		
		/// <summary>
		/// StepTemplate can be used as the basis for all step containers within the Task, so that the steps inherit settings on the base container.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stepTemplate")]
		public StepTemplate StepTemplate { get; set; }
		
		/// <summary>
		/// Steps of the task.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="steps")]
		public Step[] Steps { get; set; }
		
		/// <summary>
		/// A collection of volumes that are available to mount into steps.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="volumes")]
		public VolumeSource[] Volumes { get; set; }
		
		/// <summary>
		/// The volumes that this Task requires.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workspaces")]
		public WorkspaceDeclaration[] Workspaces { get; set; }
	}
	
	/// <summary>
	/// ParamSpec defines parameters needed beyond typed inputs (such as resources). Parameter values are provided by users as inputs on a TaskRun or PipelineRun.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ParamSpec
	{
		
		/// <summary>
		/// Description of the ParamSpec
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Name of the ParamSpec
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Type of ParamSpec
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<ParamSpecType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ParamSpecType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STRING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ARRAY = 2,
	}
	
	/// <summary>
	/// TaskResult is used to describe the results of a task.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TaskResult
	{
		
		/// <summary>
		/// Description of the result.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Name of the result.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// When type is OBJECT, this map holds the names of fields inside that object along with the type of data each field holds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public System.Collections.Generic.Dictionary<string, PropertySpec> Properties { get; set; }
		
		/// <summary>
		/// The type of data that the result holds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<TaskResultType> Type { get; set; }
	}
	
	/// <summary>
	/// PropertySpec holds information about a property in an object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PropertySpec
	{
		
		/// <summary>
		/// A type for the object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<PropertySpecType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PropertySpecType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STRING = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum TaskResultType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STRING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ARRAY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OBJECT = 3,
	}
	
	/// <summary>
	/// Sidecars run alongside the Task's step containers.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Sidecar
	{
		
		/// <summary>
		/// Arguments to the entrypoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="args")]
		public string[] Args { get; set; }
		
		/// <summary>
		/// Entrypoint array.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="command")]
		public string[] Command { get; set; }
		
		/// <summary>
		/// List of environment variables to set in the container.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="env")]
		public EnvVar[] Env { get; set; }
		
		/// <summary>
		/// Docker image name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="image")]
		public string Image { get; set; }
		
		/// <summary>
		/// Name of the Sidecar.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="readinessProbe")]
		public Probe ReadinessProbe { get; set; }
		
		/// <summary>
		/// The contents of an executable file to execute.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="script")]
		public string Script { get; set; }
		
		/// <summary>
		/// Security options the container should be run with.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="securityContext")]
		public SecurityContext SecurityContext { get; set; }
		
		/// <summary>
		/// Pod volumes to mount into the container's filesystem.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="volumeMounts")]
		public VolumeMount[] VolumeMounts { get; set; }
		
		/// <summary>
		/// Container's working directory.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workingDir")]
		public string WorkingDir { get; set; }
	}
	
	/// <summary>
	/// Environment variable.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EnvVar
	{
		
		/// <summary>
		/// Name of the environment variable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Value of the environment variable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Probe
	{
		
		/// <summary>
		/// ExecAction describes a "run in container" action.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exec")]
		public ExecAction Exec { get; set; }
		
		/// <summary>
		/// Optional. How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1. +optional
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="periodSeconds")]
		public System.Nullable<System.Int32> PeriodSeconds { get; set; }
	}
	
	/// <summary>
	/// ExecAction describes a "run in container" action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ExecAction
	{
		
		/// <summary>
		/// Optional. Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy. +optional
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="command")]
		public string[] Command { get; set; }
	}
	
	/// <summary>
	/// Security options the container should be run with.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SecurityContext
	{
		
		/// <summary>
		/// Optional. AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows. +optional
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowPrivilegeEscalation")]
		public System.Nullable<System.Boolean> AllowPrivilegeEscalation { get; set; }
		
		/// <summary>
		/// Capabilities adds and removes POSIX capabilities from running containers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="capabilities")]
		public Capabilities Capabilities { get; set; }
		
		/// <summary>
		/// Run container in privileged mode.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="privileged")]
		public System.Nullable<System.Boolean> Privileged { get; set; }
		
		/// <summary>
		/// Optional. The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows. +optional
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="runAsGroup")]
		public string RunAsGroup { get; set; }
		
		/// <summary>
		/// Optional. Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. +optional
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="runAsNonRoot")]
		public System.Nullable<System.Boolean> RunAsNonRoot { get; set; }
		
		/// <summary>
		/// Optional. The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows. +optional
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="runAsUser")]
		public string RunAsUser { get; set; }
	}
	
	/// <summary>
	/// Pod volumes to mount into the container's filesystem.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VolumeMount
	{
		
		/// <summary>
		/// Path within the container at which the volume should be mounted. Must not contain ':'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mountPath")]
		public string MountPath { get; set; }
		
		/// <summary>
		/// Name of the volume.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Mounted read-only if true, read-write otherwise (false or unspecified).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="readOnly")]
		public System.Nullable<System.Boolean> ReadOnly { get; set; }
		
		/// <summary>
		/// Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subPath")]
		public string SubPath { get; set; }
		
		/// <summary>
		/// Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subPathExpr")]
		public string SubPathExpr { get; set; }
	}
	
	/// <summary>
	/// StepTemplate can be used as the basis for all step containers within the Task, so that the steps inherit settings on the base container.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StepTemplate
	{
		
		/// <summary>
		/// Optional. List of environment variables to set in the Step. Cannot be updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="env")]
		public EnvVar[] Env { get; set; }
		
		/// <summary>
		/// Optional. Pod volumes to mount into the container's filesystem.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="volumeMounts")]
		public VolumeMount[] VolumeMounts { get; set; }
	}
	
	/// <summary>
	/// Step embeds the Container type, which allows it to include fields not provided by Container.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Step
	{
		
		/// <summary>
		/// Arguments to the entrypoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="args")]
		public string[] Args { get; set; }
		
		/// <summary>
		/// Entrypoint array.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="command")]
		public string[] Command { get; set; }
		
		/// <summary>
		/// List of environment variables to set in the container.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="env")]
		public EnvVar[] Env { get; set; }
		
		/// <summary>
		/// Docker image name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="image")]
		public string Image { get; set; }
		
		/// <summary>
		/// Name of the container specified as a DNS_LABEL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The contents of an executable file to execute.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="script")]
		public string Script { get; set; }
		
		/// <summary>
		/// Security options the container should be run with.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="securityContext")]
		public SecurityContext SecurityContext { get; set; }
		
		/// <summary>
		/// Time after which the Step times out. Defaults to never.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeout")]
		public string Timeout { get; set; }
		
		/// <summary>
		/// Pod volumes to mount into the container's filesystem.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="volumeMounts")]
		public VolumeMount[] VolumeMounts { get; set; }
		
		/// <summary>
		/// Container's working directory.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workingDir")]
		public string WorkingDir { get; set; }
	}
	
	/// <summary>
	/// Volumes available to mount.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VolumeSource
	{
		
		/// <summary>
		/// Represents an empty Volume source.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="emptyDir")]
		public EmptyDirVolumeSource EmptyDir { get; set; }
		
		/// <summary>
		/// Name of the Volume. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Represents an empty Volume source.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EmptyDirVolumeSource
	{
	}
	
	/// <summary>
	/// WorkspaceDeclaration is a declaration of a volume that a Task requires.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WorkspaceDeclaration
	{
		
		/// <summary>
		/// Description is a human readable description of this volume.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// MountPath overrides the directory that the volume will be made available at.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mountPath")]
		public string MountPath { get; set; }
		
		/// <summary>
		/// Name is the name by which you can bind the volume at runtime.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Optional. Optional marks a Workspace as not being required in TaskRuns. By default this field is false and so declared workspaces are required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="optional")]
		public System.Nullable<System.Boolean> Optional { get; set; }
		
		/// <summary>
		/// ReadOnly dictates whether a mounted volume is writable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="readOnly")]
		public System.Nullable<System.Boolean> ReadOnly { get; set; }
	}
	
	/// <summary>
	/// A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Empty
	{
	}
	
	/// <summary>
	/// Response for fetching git refs
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FetchGitRefsResponse
	{
		
		/// <summary>
		/// A token identifying a page of results the server should return.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// Name of the refs fetched.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refNames")]
		public string[] RefNames { get; set; }
	}
	
	/// <summary>
	/// Response message for FetchLinkableRepositories.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FetchLinkableRepositoriesResponse
	{
		
		/// <summary>
		/// A token identifying a page of results the server should return.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// repositories ready to be created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="repositories")]
		public Repository[] Repositories { get; set; }
	}
	
	/// <summary>
	/// Message for fetching SCM read token.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FetchReadTokenRequest
	{
	}
	
	/// <summary>
	/// Message for responding to get read token.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FetchReadTokenResponse
	{
		
		/// <summary>
		/// Expiration timestamp. Can be empty if unknown or non-expiring.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expirationTime")]
		public string ExpirationTime { get; set; }
		
		/// <summary>
		/// The token content.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="token")]
		public string Token { get; set; }
	}
	
	/// <summary>
	/// Message for fetching SCM read/write token.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FetchReadWriteTokenRequest
	{
	}
	
	/// <summary>
	/// Message for responding to get read/write token.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FetchReadWriteTokenResponse
	{
		
		/// <summary>
		/// Expiration timestamp. Can be empty if unknown or non-expiring.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expirationTime")]
		public string ExpirationTime { get; set; }
		
		/// <summary>
		/// The token content.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="token")]
		public string Token { get; set; }
	}
	
	/// <summary>
	/// Conditions defines a readiness condition for a Knative resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleDevtoolsCloudbuildV2Condition
	{
		
		/// <summary>
		/// LastTransitionTime is the last time the condition transitioned from one status to another.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastTransitionTime")]
		public string LastTransitionTime { get; set; }
		
		/// <summary>
		/// A human readable message indicating details about the transition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// The reason for the condition's last transition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		/// <summary>
		/// Severity with which to treat failures of this type of condition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="severity")]
		public System.Nullable<GoogleDevtoolsCloudbuildV2ConditionSeverity> Severity { get; set; }
		
		/// <summary>
		/// Status of the condition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<GoogleDevtoolsCloudbuildV2ConditionStatus> Status { get; set; }
		
		/// <summary>
		/// Type of condition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GoogleDevtoolsCloudbuildV2ConditionSeverity
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SEVERITY_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WARNING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INFO = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GoogleDevtoolsCloudbuildV2ConditionStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TRUE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FALSE = 2,
	}
	
	/// <summary>
	/// Represents the metadata of the long-running operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleDevtoolsCloudbuildV2OperationMetadata
	{
		
		/// <summary>
		/// Output only. API version used to start the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apiVersion")]
		public string ApiVersion { get; set; }
		
		/// <summary>
		/// Output only. The time the operation was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// Output only. The time the operation finished running.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public string EndTime { get; set; }
		
		/// <summary>
		/// Output only. Identifies whether the user has requested cancellation of the operation. Operations that have successfully been cancelled have Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestedCancellation")]
		public System.Nullable<System.Boolean> RequestedCancellation { get; set; }
		
		/// <summary>
		/// Output only. Human-readable status of the operation, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statusMessage")]
		public string StatusMessage { get; set; }
		
		/// <summary>
		/// Output only. Server-defined resource path for the target of the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="target")]
		public string Target { get; set; }
		
		/// <summary>
		/// Output only. Name of the verb executed by the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verb")]
		public string Verb { get; set; }
	}
	
	/// <summary>
	/// Message that represents an arbitrary HTTP body. It should only be used for payload formats that can't be represented as JSON, such as raw binary or an HTML page. This message can be used both in streaming and non-streaming API methods in the request as well as the response. It can be used as a top-level request field, which is convenient if one wants to extract parameters from either the URL or HTTP template into the request fields and also want access to the raw HTTP body. Example: message GetResourceRequest { // A unique request id. string request_id = 1; // The raw HTTP body is bound to this field. google.api.HttpBody http_body = 2; } service ResourceService { rpc GetResource(GetResourceRequest) returns (google.api.HttpBody); rpc UpdateResource(google.api.HttpBody) returns (google.protobuf.Empty); } Example with streaming methods: service CaldavService { rpc GetCalendar(stream google.api.HttpBody) returns (stream google.api.HttpBody); rpc UpdateCalendar(stream google.api.HttpBody) returns (stream google.api.HttpBody); } Use of this type only changes how the request and response bodies are handled, all other features will continue to work unchanged.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class HttpBody
	{
		
		/// <summary>
		/// The HTTP Content-Type header value specifying the content type of the body.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentType")]
		public string ContentType { get; set; }
		
		/// <summary>
		/// The HTTP request/response body as raw binary.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string Data { get; set; }
		
		/// <summary>
		/// Application specific response metadata. Must be set in the first response for streaming APIs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="extensions")]
		public string[] Extensions { get; set; }
	}
	
	/// <summary>
	/// Message for response to listing Connections.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListConnectionsResponse
	{
		
		/// <summary>
		/// The list of Connections.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connections")]
		public Connection[] Connections { get; set; }
		
		/// <summary>
		/// A token identifying a page of results the server should return.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// The response message for Locations.ListLocations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListLocationsResponse
	{
		
		/// <summary>
		/// A list of locations that matches the specified filter in the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locations")]
		public Location[] Locations { get; set; }
		
		/// <summary>
		/// The standard List next-page token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// A resource that represents a Google Cloud location.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Location
	{
		
		/// <summary>
		/// The friendly name for this location, typically a nearby city name. For example, "Tokyo".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Cross-service attributes for the location. For example {"cloud.googleapis.com/region": "us-east1"}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// The canonical id for this location. For example: `"us-east1"`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locationId")]
		public string LocationId { get; set; }
		
		/// <summary>
		/// Service-specific metadata. For example the available capacity at the given location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public System.Collections.Generic.Dictionary<string, object> Metadata { get; set; }
		
		/// <summary>
		/// Resource name for the location, which may vary between implementations. For example: `"projects/example-project/locations/us-east1"`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Message for response to listing Repositories.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListRepositoriesResponse
	{
		
		/// <summary>
		/// A token identifying a page of results the server should return.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// The list of Repositories.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="repositories")]
		public Repository[] Repositories { get; set; }
	}
	
	/// <summary>
	/// This resource represents a long-running operation that is the result of a network API call.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Operation
	{
		
		/// <summary>
		/// If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="done")]
		public System.Nullable<System.Boolean> Done { get; set; }
		
		/// <summary>
		/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public Status Error { get; set; }
		
		/// <summary>
		/// Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public System.Collections.Generic.Dictionary<string, object> Metadata { get; set; }
		
		/// <summary>
		/// The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="response")]
		public System.Collections.Generic.Dictionary<string, object> Response { get; set; }
	}
	
	/// <summary>
	/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Status
	{
		
		/// <summary>
		/// The status code, which should be an enum value of google.rpc.Code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		/// <summary>
		/// A list of messages that carry the error details. There is a common set of message types for APIs to use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string[] Details { get; set; }
		
		/// <summary>
		/// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// Represents the metadata of the long-running operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OperationMetadata
	{
		
		/// <summary>
		/// Output only. API version used to start the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apiVersion")]
		public string ApiVersion { get; set; }
		
		/// <summary>
		/// Output only. Identifies whether the user has requested cancellation of the operation. Operations that have been cancelled successfully have Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cancelRequested")]
		public System.Nullable<System.Boolean> CancelRequested { get; set; }
		
		/// <summary>
		/// Output only. The time the operation was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// Output only. The time the operation finished running.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public string EndTime { get; set; }
		
		/// <summary>
		/// Output only. Human-readable status of the operation, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statusDetail")]
		public string StatusDetail { get; set; }
		
		/// <summary>
		/// Output only. Server-defined resource path for the target of the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="target")]
		public string Target { get; set; }
		
		/// <summary>
		/// Output only. Name of the verb executed by the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verb")]
		public string Verb { get; set; }
	}
	
	/// <summary>
	/// Param defined with name and value. PipelineRef can be used to refer to a specific instance of a Pipeline.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Param
	{
		
		/// <summary>
		/// Name of the parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Parameter value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public ParamValue Value { get; set; }
	}
	
	/// <summary>
	/// Parameter value.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ParamValue
	{
		
		/// <summary>
		/// Value of the parameter if type is array.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="arrayVal")]
		public string[] ArrayVal { get; set; }
		
		/// <summary>
		/// Value of the parameter if type is string.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stringVal")]
		public string StringVal { get; set; }
		
		/// <summary>
		/// Type of parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public ParamSpecType Type { get; set; }
	}
	
	/// <summary>
	/// PipelineRef can be used to refer to a specific instance of a Pipeline.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PipelineRef
	{
		
		/// <summary>
		/// Name of the Pipeline.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Params contains the parameters used to identify the referenced Tekton resource. Example entries might include "repo" or "path" but the set of params ultimately depends on the chosen resolver.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="params")]
		public Param[] Params { get; set; }
		
		/// <summary>
		/// Resolver is the name of the resolver that should perform resolution of the referenced Tekton resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resolver")]
		public System.Nullable<PipelineRefResolver> Resolver { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PipelineRefResolver
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESOLVER_NAME_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BUNDLES = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GCB_REPO = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GIT = 3,
	}
	
	/// <summary>
	/// Message describing PipelineRun object
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PipelineRun
	{
		
		/// <summary>
		/// User annotations. See https://google.aip.dev/128#annotations
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="annotations")]
		public System.Collections.Generic.Dictionary<string, string> Annotations { get; set; }
		
		/// <summary>
		/// Output only. List of TaskRun and Run names and PipelineTask names for children of this PipelineRun.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="childReferences")]
		public ChildStatusReference[] ChildReferences { get; set; }
		
		/// <summary>
		/// Output only. Time the pipeline completed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="completionTime")]
		public string CompletionTime { get; set; }
		
		/// <summary>
		/// Output only. Kubernetes Conditions convention for PipelineRun status and error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="conditions")]
		public GoogleDevtoolsCloudbuildV2Condition[] Conditions { get; set; }
		
		/// <summary>
		/// Output only. Time at which the request to create the `PipelineRun` was received.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// Needed for declarative-friendly resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// Output only. FinallyStartTime is when all non-finally tasks have been completed and only finally tasks are being executed. +optional
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="finallyStartTime")]
		public string FinallyStartTime { get; set; }
		
		/// <summary>
		/// Output only. The `PipelineRun` name with format `projects/{project}/locations/{location}/pipelineRuns/{pipeline_run}`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Params is a list of parameter names and values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="params")]
		public Param[] Params { get; set; }
		
		/// <summary>
		/// PipelineRef can be used to refer to a specific instance of a Pipeline.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pipelineRef")]
		public PipelineRef PipelineRef { get; set; }
		
		/// <summary>
		/// Pipelinerun status the user can provide. Used for cancellation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pipelineRunStatus")]
		public System.Nullable<PipelineRunPipelineRunStatus> PipelineRunStatus { get; set; }
		
		/// <summary>
		/// PipelineSpec defines the desired state of Pipeline.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pipelineSpec")]
		public PipelineSpec PipelineSpec { get; set; }
		
		/// <summary>
		/// PipelineSpec defines the desired state of Pipeline.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resolvedPipelineSpec")]
		public PipelineSpec ResolvedPipelineSpec { get; set; }
		
		/// <summary>
		/// Service account used in the Pipeline.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceAccount")]
		public string ServiceAccount { get; set; }
		
		/// <summary>
		/// Output only. List of tasks that were skipped due to when expressions evaluating to false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="skippedTasks")]
		public SkippedTask[] SkippedTasks { get; set; }
		
		/// <summary>
		/// Output only. Time the pipeline is actually started.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public string StartTime { get; set; }
		
		/// <summary>
		/// TimeoutFields allows granular specification of pipeline, task, and finally timeouts
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeouts")]
		public TimeoutFields Timeouts { get; set; }
		
		/// <summary>
		/// Output only. A unique identifier for the `PipelineRun`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uid")]
		public string Uid { get; set; }
		
		/// <summary>
		/// Output only. Time at which the request to update the `PipelineRun` was received.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
		
		/// <summary>
		/// Output only. The WorkerPool used to run this PipelineRun.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workerPool")]
		public string WorkerPool { get; set; }
		
		/// <summary>
		/// Output only. The Workflow used to create this PipelineRun.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workflow")]
		public string Workflow { get; set; }
		
		/// <summary>
		/// Workspaces is a list of WorkspaceBindings from volumes to workspaces.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workspaces")]
		public WorkspaceBinding[] Workspaces { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PipelineRunPipelineRunStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PIPELINE_RUN_STATUS_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PIPELINE_RUN_CANCELLED = 1,
	}
	
	/// <summary>
	/// PipelineSpec defines the desired state of Pipeline.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PipelineSpec
	{
		
		/// <summary>
		/// List of Tasks that execute just before leaving the Pipeline i.e. either after all Tasks are finished executing successfully or after a failure which would result in ending the Pipeline.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="finallyTasks")]
		public PipelineTask[] FinallyTasks { get; set; }
		
		/// <summary>
		/// Output only. auto-generated yaml that is output only for display purpose for workflows using pipeline_spec, used by UI/gcloud cli for Workflows.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="generatedYaml")]
		public string GeneratedYaml { get; set; }
		
		/// <summary>
		/// List of parameters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="params")]
		public ParamSpec[] Params { get; set; }
		
		/// <summary>
		/// List of Tasks that execute when this Pipeline is run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tasks")]
		public PipelineTask[] Tasks { get; set; }
		
		/// <summary>
		/// Workspaces declares a set of named workspaces that are expected to be provided by a PipelineRun.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workspaces")]
		public PipelineWorkspaceDeclaration[] Workspaces { get; set; }
	}
	
	/// <summary>
	/// PipelineTask defines a task in a Pipeline.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PipelineTask
	{
		
		/// <summary>
		/// Name of the task.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Params is a list of parameter names and values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="params")]
		public Param[] Params { get; set; }
		
		/// <summary>
		/// Retries represents how many times this task should be retried in case of task failure.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="retries")]
		public System.Nullable<System.Int32> Retries { get; set; }
		
		/// <summary>
		/// RunAfter is the list of PipelineTask names that should be executed before this Task executes. (Used to force a specific ordering in graph execution.)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="runAfter")]
		public string[] RunAfter { get; set; }
		
		/// <summary>
		/// TaskRef can be used to refer to a specific instance of a task. PipelineRef can be used to refer to a specific instance of a Pipeline.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taskRef")]
		public TaskRef TaskRef { get; set; }
		
		/// <summary>
		/// EmbeddedTask defines a Task that is embedded in a Pipeline.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taskSpec")]
		public EmbeddedTask TaskSpec { get; set; }
		
		/// <summary>
		/// Time after which the TaskRun times out. Defaults to 1 hour. Specified TaskRun timeout should be less than 24h.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeout")]
		public string Timeout { get; set; }
		
		/// <summary>
		/// Conditions that need to be true for the task to run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="whenExpressions")]
		public WhenExpression[] WhenExpressions { get; set; }
		
		/// <summary>
		/// Workspaces maps workspaces from the pipeline spec to the workspaces declared in the Task.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workspaces")]
		public WorkspacePipelineTaskBinding[] Workspaces { get; set; }
	}
	
	/// <summary>
	/// TaskRef can be used to refer to a specific instance of a task. PipelineRef can be used to refer to a specific instance of a Pipeline.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TaskRef
	{
		
		/// <summary>
		/// Name of the task.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Params contains the parameters used to identify the referenced Tekton resource. Example entries might include "repo" or "path" but the set of params ultimately depends on the chosen resolver.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="params")]
		public Param[] Params { get; set; }
		
		/// <summary>
		/// Resolver is the name of the resolver that should perform resolution of the referenced Tekton resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resolver")]
		public PipelineRefResolver Resolver { get; set; }
	}
	
	/// <summary>
	/// WorkspacePipelineTaskBinding maps workspaces from the PipelineSpec to the workspaces declared in the Task.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WorkspacePipelineTaskBinding
	{
		
		/// <summary>
		/// Name of the workspace as declared by the task.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Optional. SubPath is optionally a directory on the volume which should be used for this binding (i.e. the volume will be mounted at this sub directory). +optional
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subPath")]
		public string SubPath { get; set; }
		
		/// <summary>
		/// Name of the workspace declared by the pipeline.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workspace")]
		public string Workspace { get; set; }
	}
	
	/// <summary>
	/// Workspaces declares a set of named workspaces that are expected to be provided by a PipelineRun.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PipelineWorkspaceDeclaration
	{
		
		/// <summary>
		/// Description is a human readable string describing how the workspace will be used in the Pipeline.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Name is the name of a workspace to be provided by a PipelineRun.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Optional marks a Workspace as not being required in PipelineRuns. By default this field is false and so declared workspaces are required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="optional")]
		public System.Nullable<System.Boolean> Optional { get; set; }
	}
	
	/// <summary>
	/// SkippedTask is used to describe the Tasks that were skipped due to their When Expressions evaluating to False.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SkippedTask
	{
		
		/// <summary>
		/// Name is the Pipeline Task name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Output only. Reason is the cause of the PipelineTask being skipped.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		/// <summary>
		/// WhenExpressions is the list of checks guarding the execution of the PipelineTask
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="whenExpressions")]
		public WhenExpression[] WhenExpressions { get; set; }
	}
	
	/// <summary>
	/// TimeoutFields allows granular specification of pipeline, task, and finally timeouts
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TimeoutFields
	{
		
		/// <summary>
		/// Finally sets the maximum allowed duration of this pipeline's finally
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="finally")]
		public string Finally { get; set; }
		
		/// <summary>
		/// Pipeline sets the maximum allowed duration for execution of the entire pipeline. The sum of individual timeouts for tasks and finally must not exceed this value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pipeline")]
		public string Pipeline { get; set; }
		
		/// <summary>
		/// Tasks sets the maximum allowed duration of this pipeline's tasks
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tasks")]
		public string Tasks { get; set; }
	}
	
	/// <summary>
	/// WorkspaceBinding maps a workspace to a Volume. PipelineRef can be used to refer to a specific instance of a Pipeline.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WorkspaceBinding
	{
		
		/// <summary>
		/// Name of the workspace.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Secret Volume Source.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secret")]
		public SecretVolumeSource Secret { get; set; }
		
		/// <summary>
		/// Optional. SubPath is optionally a directory on the volume which should be used for this binding (i.e. the volume will be mounted at this sub directory). +optional
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subPath")]
		public string SubPath { get; set; }
		
		/// <summary>
		/// VolumeClaim is a user's request for a volume.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="volumeClaim")]
		public VolumeClaim VolumeClaim { get; set; }
	}
	
	/// <summary>
	/// Secret Volume Source.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SecretVolumeSource
	{
		
		/// <summary>
		/// Name of the secret referenced by the WorkspaceBinding.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secretName")]
		public string SecretName { get; set; }
		
		/// <summary>
		/// Output only. Resource name of the SecretVersion. In format: projects/*/secrets/*/versions/*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secretVersion")]
		public string SecretVersion { get; set; }
	}
	
	/// <summary>
	/// VolumeClaim is a user's request for a volume.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VolumeClaim
	{
		
		/// <summary>
		/// Volume size, e.g. 1gb.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storage")]
		public string Storage { get; set; }
	}
	
	/// <summary>
	/// An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members`, or principals, to a single `role`. Principals can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** ``` { "bindings": [ { "role": "roles/resourcemanager.organizationAdmin", "members": [ "user:mike@example.com", "group:admins@example.com", "domain:google.com", "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, { "role": "roles/resourcemanager.organizationViewer", "members": [ "user:eve@example.com" ], "condition": { "title": "expirable access", "description": "Does not grant access after Sep 2020", "expression": "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag": "BwWWja0YfJA=", "version": 3 } ``` **YAML example:** ``` bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') etag: BwWWja0YfJA= version: 3 ``` For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Policy
	{
		
		/// <summary>
		/// Specifies cloud audit logging configuration for this policy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="auditConfigs")]
		public AuditConfig[] AuditConfigs { get; set; }
		
		/// <summary>
		/// Associates a list of `members`, or principals, with a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one principal. The `bindings` in a `Policy` can refer to up to 1,500 principals; up to 250 of these principals can be Google groups. Each occurrence of a principal counts towards these limits. For example, if the `bindings` grant 50 different roles to `user:alice@example.com`, and not to any other principal, then you can add another 1,450 principals to the `bindings` in the `Policy`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bindings")]
		public Binding[] Bindings { get; set; }
		
		/// <summary>
		/// `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<System.Int32> Version { get; set; }
	}
	
	/// <summary>
	/// Represents the custom metadata of the RunWorkflow long-running operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RunWorkflowCustomOperationMetadata
	{
		
		/// <summary>
		/// Output only. API version used to start the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apiVersion")]
		public string ApiVersion { get; set; }
		
		/// <summary>
		/// Output only. The time the operation was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// Output only. The time the operation finished running.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public string EndTime { get; set; }
		
		/// <summary>
		/// Output only. ID of the pipeline run created by RunWorkflow.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pipelineRunId")]
		public string PipelineRunId { get; set; }
		
		/// <summary>
		/// Output only. Identifies whether the user has requested cancellation of the operation. Operations that have successfully been cancelled have Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestedCancellation")]
		public System.Nullable<System.Boolean> RequestedCancellation { get; set; }
		
		/// <summary>
		/// Output only. Server-defined resource path for the target of the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="target")]
		public string Target { get; set; }
		
		/// <summary>
		/// Output only. Name of the verb executed by the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verb")]
		public string Verb { get; set; }
	}
	
	/// <summary>
	/// Request message for `SetIamPolicy` method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SetIamPolicyRequest
	{
		
		/// <summary>
		/// An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members`, or principals, to a single `role`. Principals can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** ``` { "bindings": [ { "role": "roles/resourcemanager.organizationAdmin", "members": [ "user:mike@example.com", "group:admins@example.com", "domain:google.com", "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, { "role": "roles/resourcemanager.organizationViewer", "members": [ "user:eve@example.com" ], "condition": { "title": "expirable access", "description": "Does not grant access after Sep 2020", "expression": "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag": "BwWWja0YfJA=", "version": 3 } ``` **YAML example:** ``` bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') etag: BwWWja0YfJA= version: 3 ``` For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="policy")]
		public Policy Policy { get; set; }
		
		/// <summary>
		/// OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only the fields in the mask will be modified. If no mask is provided, the following default mask is used: `paths: "bindings, etag"`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateMask")]
		public string UpdateMask { get; set; }
	}
	
	/// <summary>
	/// Request message for `TestIamPermissions` method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TestIamPermissionsRequest
	{
		
		/// <summary>
		/// The set of permissions to check for the `resource`. Permissions with wildcards (such as `*` or `storage.*`) are not allowed. For more information see [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="permissions")]
		public string[] Permissions { get; set; }
	}
	
	/// <summary>
	/// Response message for `TestIamPermissions` method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TestIamPermissionsResponse
	{
		
		/// <summary>
		/// A subset of `TestPermissionsRequest.permissions` that the caller is allowed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="permissions")]
		public string[] Permissions { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// FetchLinkableRepositories get repositories from SCM that are accessible and could be added to the connection.
		/// Cloudbuild_projects_locations_connections_fetchLinkableRepositories v2/{connection}:fetchLinkableRepositories
		/// </summary>
		/// <param name="connection">Required. The name of the Connection. Format: `projects/*/locations/*/connections/*`.</param>
		/// <param name="pageSize">Number of results to return in the list. Default to 20.</param>
		/// <param name="pageToken">Page start.</param>
		/// <returns>Successful response</returns>
		public async Task<FetchLinkableRepositoriesResponse> Cloudbuild_projects_locations_connections_fetchLinkableRepositoriesAsync(string connection, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/"+ (connection==null? "" : System.Uri.EscapeDataString(connection))+":fetchLinkableRepositories&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<FetchLinkableRepositoriesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a single repository.
		/// Cloudbuild_projects_locations_connections_repositories_delete v2/{name}
		/// </summary>
		/// <param name="name">Required. The name of the Repository to delete. Format: `projects/*/locations/*/connections/*/repositories/*`.</param>
		/// <param name="etag">The current etag of the repository. If an etag is provided and does not match the current etag of the repository, deletion will be blocked and an ABORTED error will be returned.</param>
		/// <param name="validateOnly">If set, validate the request, but do not actually post it.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Cloudbuild_projects_locations_connections_repositories_deleteAsync(string name, string etag, bool validateOnly, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&etag=" + (etag==null? "" : System.Uri.EscapeDataString(etag))+"&validateOnly="+validateOnly;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
		/// Cloudbuild_projects_locations_operations_get v2/{name}
		/// </summary>
		/// <param name="name">The name of the operation resource.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Cloudbuild_projects_locations_operations_getAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a single connection.
		/// Cloudbuild_projects_locations_connections_patch v2/{name}
		/// </summary>
		/// <param name="name">Immutable. The resource name of the connection, in the format `projects/{project}/locations/{location}/connections/{connection_id}`.</param>
		/// <param name="allowMissing">If set to true, and the connection is not found a new connection will be created. In this situation `update_mask` is ignored. The creation will succeed only if the input connection has all the necessary information (e.g a github_config with both user_oauth_token and installation_id properties).</param>
		/// <param name="etag">The current etag of the connection. If an etag is provided and does not match the current etag of the connection, update will be blocked and an ABORTED error will be returned.</param>
		/// <param name="updateMask">The list of fields to be updated.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Cloudbuild_projects_locations_connections_patchAsync(string name, bool allowMissing, string etag, string updateMask, Connection requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&allowMissing="+allowMissing+"&etag=" + (etag==null? "" : System.Uri.EscapeDataString(etag))+"&updateMask=" + (updateMask==null? "" : System.Uri.EscapeDataString(updateMask));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists information about the supported locations for this service.
		/// Cloudbuild_projects_locations_list v2/{name}/locations
		/// </summary>
		/// <param name="name">The resource that owns the locations collection, if applicable.</param>
		/// <param name="filter">A filter to narrow down results to a preferred subset. The filtering language accepts strings like `"displayName=tokyo"`, and is documented in more detail in [AIP-160](https://google.aip.dev/160).</param>
		/// <param name="pageSize">The maximum number of results to return. If not set, the service selects a default.</param>
		/// <param name="pageToken">A page token received from the `next_page_token` field in the response. Send that page token to receive the subsequent page.</param>
		/// <returns>Successful response</returns>
		public async Task<ListLocationsResponse> Cloudbuild_projects_locations_listAsync(string name, string filter, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/locations&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListLocationsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
		/// Cloudbuild_projects_locations_operations_cancel v2/{name}:cancel
		/// </summary>
		/// <param name="name">The name of the operation resource to be cancelled.</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Cloudbuild_projects_locations_operations_cancelAsync(string name, CancelOperationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":cancel";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Empty>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists Connections in a given project and location.
		/// Cloudbuild_projects_locations_connections_list v2/{parent}/connections
		/// </summary>
		/// <param name="parent">Required. The parent, which owns this collection of Connections. Format: `projects/*/locations/*`.</param>
		/// <param name="pageSize">Number of results to return in the list.</param>
		/// <param name="pageToken">Page start.</param>
		/// <returns>Successful response</returns>
		public async Task<ListConnectionsResponse> Cloudbuild_projects_locations_connections_listAsync(string parent, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/connections&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListConnectionsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a Connection.
		/// Cloudbuild_projects_locations_connections_create v2/{parent}/connections
		/// </summary>
		/// <param name="parent">Required. Project and location where the connection will be created. Format: `projects/*/locations/*`.</param>
		/// <param name="connectionId">Required. The ID to use for the Connection, which will become the final component of the Connection's resource name. Names must be unique per-project per-location. Allows alphanumeric characters and any of -._~%!$&'()*+,;=@.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Cloudbuild_projects_locations_connections_createAsync(string parent, string connectionId, Connection requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/connections&connectionId=" + (connectionId==null? "" : System.Uri.EscapeDataString(connectionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ProcessWebhook is called by the external SCM for notifying of events.
		/// Cloudbuild_projects_locations_connections_processWebhook v2/{parent}/connections:processWebhook
		/// </summary>
		/// <param name="parent">Required. Project and location where the webhook will be received. Format: `projects/*/locations/*`.</param>
		/// <param name="webhookKey">Arbitrary additional key to find the maching repository for a webhook event if needed.</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Cloudbuild_projects_locations_connections_processWebhookAsync(string parent, string webhookKey, HttpBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/connections:processWebhook&webhookKey=" + (webhookKey==null? "" : System.Uri.EscapeDataString(webhookKey));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Empty>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists Repositories in a given connection.
		/// Cloudbuild_projects_locations_connections_repositories_list v2/{parent}/repositories
		/// </summary>
		/// <param name="parent">Required. The parent, which owns this collection of Repositories. Format: `projects/*/locations/*/connections/*`.</param>
		/// <param name="filter">A filter expression that filters resources listed in the response. Expressions must follow API improvement proposal [AIP-160](https://google.aip.dev/160). e.g. `remote_uri:"https://github.com*"`.</param>
		/// <param name="pageSize">Number of results to return in the list.</param>
		/// <param name="pageToken">Page start.</param>
		/// <returns>Successful response</returns>
		public async Task<ListRepositoriesResponse> Cloudbuild_projects_locations_connections_repositories_listAsync(string parent, string filter, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/repositories&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListRepositoriesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a Repository.
		/// Cloudbuild_projects_locations_connections_repositories_create v2/{parent}/repositories
		/// </summary>
		/// <param name="parent">Required. The connection to contain the repository. If the request is part of a BatchCreateRepositoriesRequest, this field should be empty or match the parent specified there.</param>
		/// <param name="repositoryId">Required. The ID to use for the repository, which will become the final component of the repository's resource name. This ID should be unique in the connection. Allows alphanumeric characters and any of -._~%!$&'()*+,;=@.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Cloudbuild_projects_locations_connections_repositories_createAsync(string parent, string repositoryId, Repository requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/repositories&repositoryId=" + (repositoryId==null? "" : System.Uri.EscapeDataString(repositoryId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates multiple repositories inside a connection.
		/// Cloudbuild_projects_locations_connections_repositories_batchCreate v2/{parent}/repositories:batchCreate
		/// </summary>
		/// <param name="parent">Required. The connection to contain all the repositories being created. Format: projects/*/locations/*/connections/* The parent field in the CreateRepositoryRequest messages must either be empty or match this field.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Cloudbuild_projects_locations_connections_repositories_batchCreateAsync(string parent, BatchCreateRepositoriesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/repositories:batchCreate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Fetches read token of a given repository.
		/// Cloudbuild_projects_locations_connections_repositories_accessReadToken v2/{repository}:accessReadToken
		/// </summary>
		/// <param name="repository">Required. The resource name of the repository in the format `projects/*/locations/*/connections/*/repositories/*`.</param>
		/// <returns>Successful response</returns>
		public async Task<FetchReadTokenResponse> Cloudbuild_projects_locations_connections_repositories_accessReadTokenAsync(string repository, FetchReadTokenRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/"+ (repository==null? "" : System.Uri.EscapeDataString(repository))+":accessReadToken";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<FetchReadTokenResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Fetches read/write token of a given repository.
		/// Cloudbuild_projects_locations_connections_repositories_accessReadWriteToken v2/{repository}:accessReadWriteToken
		/// </summary>
		/// <param name="repository">Required. The resource name of the repository in the format `projects/*/locations/*/connections/*/repositories/*`.</param>
		/// <returns>Successful response</returns>
		public async Task<FetchReadWriteTokenResponse> Cloudbuild_projects_locations_connections_repositories_accessReadWriteTokenAsync(string repository, FetchReadWriteTokenRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/"+ (repository==null? "" : System.Uri.EscapeDataString(repository))+":accessReadWriteToken";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<FetchReadWriteTokenResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Fetch the list of branches or tags for a given repository.
		/// Cloudbuild_projects_locations_connections_repositories_fetchGitRefs v2/{repository}:fetchGitRefs
		/// </summary>
		/// <param name="repository">Required. The resource name of the repository in the format `projects/*/locations/*/connections/*/repositories/*`.</param>
		/// <param name="pageSize">Optional. Number of results to return in the list. Default to 100.</param>
		/// <param name="pageToken">Optional. Page start.</param>
		/// <param name="refType">Type of refs to fetch</param>
		/// <returns>Successful response</returns>
		public async Task<FetchGitRefsResponse> Cloudbuild_projects_locations_connections_repositories_fetchGitRefsAsync(string repository, int pageSize, string pageToken, Cloudbuild_projects_locations_connections_repositories_fetchGitRefsRefType refType, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/"+ (repository==null? "" : System.Uri.EscapeDataString(repository))+":fetchGitRefs&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&refType=" + refType;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<FetchGitRefsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
		/// Cloudbuild_projects_locations_connections_getIamPolicy v2/{resource}:getIamPolicy
		/// </summary>
		/// <param name="resource">REQUIRED: The resource for which the policy is being requested. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field.</param>
		/// <param name="options_requestedPolicyVersion">Optional. The maximum policy version that will be used to format the policy. Valid values are 0, 1, and 3. Requests specifying an invalid value will be rejected. Requests for policies with any conditional role bindings must specify version 3. Policies with no conditional role bindings may specify any valid value or leave the field unset. The policy in the response might use the policy version that you specified, or it might use a lower policy version. For example, if you specify version 3, but the policy has no conditional role bindings, the response uses version 1. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).</param>
		/// <returns>Successful response</returns>
		public async Task<Policy> Cloudbuild_projects_locations_connections_getIamPolicyAsync(string resource, int options_requestedPolicyVersion, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/"+ (resource==null? "" : System.Uri.EscapeDataString(resource))+":getIamPolicy&options.requestedPolicyVersion="+options_requestedPolicyVersion;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Policy>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
		/// Cloudbuild_projects_locations_connections_setIamPolicy v2/{resource}:setIamPolicy
		/// </summary>
		/// <param name="resource">REQUIRED: The resource for which the policy is being specified. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field.</param>
		/// <returns>Successful response</returns>
		public async Task<Policy> Cloudbuild_projects_locations_connections_setIamPolicyAsync(string resource, SetIamPolicyRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/"+ (resource==null? "" : System.Uri.EscapeDataString(resource))+":setIamPolicy";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Policy>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
		/// Cloudbuild_projects_locations_connections_testIamPermissions v2/{resource}:testIamPermissions
		/// </summary>
		/// <param name="resource">REQUIRED: The resource for which the policy detail is being requested. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field.</param>
		/// <returns>Successful response</returns>
		public async Task<TestIamPermissionsResponse> Cloudbuild_projects_locations_connections_testIamPermissionsAsync(string resource, TestIamPermissionsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/"+ (resource==null? "" : System.Uri.EscapeDataString(resource))+":testIamPermissions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TestIamPermissionsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum Cloudbuild_projects_locations_connections_repositories_fetchGitRefsRefType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REF_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TAG = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BRANCH = 2,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
