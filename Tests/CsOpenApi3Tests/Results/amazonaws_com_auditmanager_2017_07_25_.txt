//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AssociateAssessmentReportEvidenceFolderResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ValidationException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AccessDeniedException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InternalServerException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceNotFoundException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchAssociateAssessmentReportEvidenceResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="evidenceIds")]
		public string[] EvidenceIds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public AssessmentReportEvidenceError[] Errors { get; set; }
	}
	
	/// <summary>
	///  An error entity for assessment report evidence errors. This is used to provide more meaningful errors than a simple string message. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AssessmentReportEvidenceError
	{
		
		[System.Runtime.Serialization.DataMember(Name="evidenceId")]
		public string EvidenceId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errorCode")]
		public string ErrorCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errorMessage")]
		public string ErrorMessage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchCreateDelegationByAssessmentResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="delegations")]
		public Delegation[] Delegations { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public BatchCreateDelegationByAssessmentError[] Errors { get; set; }
	}
	
	/// <summary>
	///  The assignment of a control set to a delegate for review. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Delegation
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="assessmentName")]
		public string AssessmentName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="assessmentId")]
		public string AssessmentId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public DelegationStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="roleType")]
		public RoleType RoleType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdated")]
		public System.DateTimeOffset LastUpdated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="controlSetId")]
		public string ControlSetId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="comment")]
		public string Comment { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public string CreatedBy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DelegationStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IN_PROGRESS")]
		IN_PROGRESS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNDER_REVIEW")]
		UNDER_REVIEW = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="COMPLETE")]
		COMPLETE = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum RoleType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PROCESS_OWNER")]
		PROCESS_OWNER = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RESOURCE_OWNER")]
		RESOURCE_OWNER = 1,
	}
	
	/// <summary>
	///  An error entity for the <code>BatchCreateDelegationByAssessment</code> API. This is used to provide more meaningful errors than a simple string message. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchCreateDelegationByAssessmentError
	{
		
		[System.Runtime.Serialization.DataMember(Name="createDelegationRequest")]
		public CreateDelegationRequest CreateDelegationRequest { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errorCode")]
		public string ErrorCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errorMessage")]
		public string ErrorMessage { get; set; }
	}
	
	/// <summary>
	///  A collection of attributes that's used to create a delegation for an assessment in Audit Manager. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateDelegationRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="comment")]
		public string Comment { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="controlSetId")]
		public string ControlSetId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="roleType")]
		public RoleType RoleType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchDeleteDelegationByAssessmentResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public BatchDeleteDelegationByAssessmentError[] Errors { get; set; }
	}
	
	/// <summary>
	///  An error entity for the <code>BatchDeleteDelegationByAssessment</code> API. This is used to provide more meaningful errors than a simple string message. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchDeleteDelegationByAssessmentError
	{
		
		[System.Runtime.Serialization.DataMember(Name="delegationId")]
		public string DelegationId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errorCode")]
		public string ErrorCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errorMessage")]
		public string ErrorMessage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchDisassociateAssessmentReportEvidenceResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="evidenceIds")]
		public string[] EvidenceIds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public AssessmentReportEvidenceError[] Errors { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchImportEvidenceToAssessmentControlResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public BatchImportEvidenceToAssessmentControlError[] Errors { get; set; }
	}
	
	/// <summary>
	///  An error entity for the <code>BatchImportEvidenceToAssessmentControl</code> API. This is used to provide more meaningful errors than a simple string message. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchImportEvidenceToAssessmentControlError
	{
		
		[System.Runtime.Serialization.DataMember(Name="manualEvidence")]
		public ManualEvidence ManualEvidence { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errorCode")]
		public string ErrorCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errorMessage")]
		public string ErrorMessage { get; set; }
	}
	
	/// <summary>
	///  Evidence that's manually added to a control in Audit Manager. <code>manualEvidence</code> can be one of the following: <code>evidenceFileName</code>, <code>s3ResourcePath</code>, or <code>textResponse</code>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ManualEvidence
	{
		
		[System.Runtime.Serialization.DataMember(Name="s3ResourcePath")]
		public string S3ResourcePath { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="textResponse")]
		public string TextResponse { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="evidenceFileName")]
		public string EvidenceFileName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ThrottlingException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateAssessmentResponse
	{
		
		/// <summary>
		///  An entity that defines the scope of audit evidence collected by Audit Manager. An Audit Manager assessment is an implementation of an Audit Manager framework. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="assessment")]
		public Assessment Assessment { get; set; }
	}
	
	/// <summary>
	///  An entity that defines the scope of audit evidence collected by Audit Manager. An Audit Manager assessment is an implementation of an Audit Manager framework. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Assessment
	{
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="awsAccount")]
		public AWSAccount AwsAccount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public AssessmentMetadata Metadata { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="framework")]
		public AssessmentFramework Framework { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
	}
	
	/// <summary>
	///  The wrapper of Amazon Web Services account details, such as account ID or email address. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AWSAccount
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="emailAddress")]
		public string EmailAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	///  The metadata that's associated with the specified assessment. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AssessmentMetadata
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="complianceType")]
		public string ComplianceType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public AssessmentStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="assessmentReportsDestination")]
		public AssessmentReportsDestination AssessmentReportsDestination { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scope")]
		public Scope Scope { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="roles")]
		public Role[] Roles { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="delegations")]
		public Delegation[] Delegations { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdated")]
		public System.DateTimeOffset LastUpdated { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AssessmentStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ACTIVE")]
		ACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INACTIVE")]
		INACTIVE = 1,
	}
	
	/// <summary>
	///  The location where Audit Manager saves assessment reports for the given assessment. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AssessmentReportsDestination
	{
		
		[System.Runtime.Serialization.DataMember(Name="destinationType")]
		public AssessmentReportDestinationType DestinationType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="destination")]
		public string Destination { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AssessmentReportDestinationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="S3")]
		S3 = 0,
	}
	
	/// <summary>
	///  The wrapper that contains the Amazon Web Services accounts and services that are in scope for the assessment. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Scope
	{
		
		[System.Runtime.Serialization.DataMember(Name="awsAccounts")]
		public AWSAccount[] AwsAccounts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="awsServices")]
		public AWSService[] AwsServices { get; set; }
	}
	
	/// <summary>
	/// <p> An Amazon Web Service such as Amazon S3 or CloudTrail. </p> <p>For an example of how to find an Amazon Web Service name and how to define it in your assessment scope, see the following:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_GetServicesInScope.html#API_GetServicesInScope_Example_2">Finding an Amazon Web Service name to use in your assessment scope</a> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_GetServicesInScope.html#API_GetServicesInScope_Example_3">Defining an Amazon Web Service name in your assessment scope</a> </p> </li> </ul>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AWSService
	{
		
		[System.Runtime.Serialization.DataMember(Name="serviceName")]
		public string ServiceName { get; set; }
	}
	
	/// <summary>
	///  The wrapper that contains the Audit Manager role information of the current user. This includes the role type and IAM Amazon Resource Name (ARN). 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Role
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="roleType")]
		public RoleType RoleType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		public string RoleArn { get; set; }
	}
	
	/// <summary>
	///  The file used to structure and automate Audit Manager assessments for a given compliance standard. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AssessmentFramework
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		/// <summary>
		///  The metadata of a framework, such as the name, ID, or description. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public FrameworkMetadata Metadata { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="controlSets")]
		public AssessmentControlSet[] ControlSets { get; set; }
	}
	
	/// <summary>
	///  The metadata of a framework, such as the name, ID, or description. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FrameworkMetadata
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="logo")]
		public string Logo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="complianceType")]
		public string ComplianceType { get; set; }
	}
	
	/// <summary>
	///  Represents a set of controls in an Audit Manager assessment. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AssessmentControlSet
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ControlSetStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="roles")]
		public Role[] Roles { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="controls")]
		public AssessmentControl[] Controls { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="delegations")]
		public Delegation[] Delegations { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="systemEvidenceCount")]
		public System.Nullable<System.Int32> SystemEvidenceCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="manualEvidenceCount")]
		public System.Nullable<System.Int32> ManualEvidenceCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ControlSetStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ACTIVE")]
		ACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNDER_REVIEW")]
		UNDER_REVIEW = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="REVIEWED")]
		REVIEWED = 2,
	}
	
	/// <summary>
	///  The control entity that represents a standard control or a custom control in an Audit Manager assessment. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AssessmentControl
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ControlStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="response")]
		public ControlResponse Response { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="comments")]
		public ControlComment[] Comments { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="evidenceSources")]
		public string[] EvidenceSources { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="evidenceCount")]
		public System.Nullable<System.Int32> EvidenceCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="assessmentReportEvidenceCount")]
		public System.Nullable<System.Int32> AssessmentReportEvidenceCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ControlStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNDER_REVIEW")]
		UNDER_REVIEW = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="REVIEWED")]
		REVIEWED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INACTIVE")]
		INACTIVE = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ControlResponse
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MANUAL")]
		MANUAL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AUTOMATE")]
		AUTOMATE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DEFER")]
		DEFER = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IGNORE")]
		IGNORE = 3,
	}
	
	/// <summary>
	///  A comment that's posted by a user on a control. This includes the author's name, the comment text, and a timestamp. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ControlComment
	{
		
		[System.Runtime.Serialization.DataMember(Name="authorName")]
		public string AuthorName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="commentBody")]
		public string CommentBody { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="postedDate")]
		public System.DateTimeOffset PostedDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TagMap
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServiceQuotaExceededException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateAssessmentFrameworkResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="framework")]
		public Framework Framework { get; set; }
	}
	
	/// <summary>
	///  The file that's used to structure and automate Audit Manager assessments for a given compliance standard. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Framework
	{
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public FrameworkType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="complianceType")]
		public string ComplianceType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="logo")]
		public string Logo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="controlSources")]
		public string ControlSources { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="controlSets")]
		public ControlSet[] ControlSets { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedAt")]
		public System.DateTimeOffset LastUpdatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public string CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedBy")]
		public string LastUpdatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum FrameworkType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Standard")]
		Standard = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Custom")]
		Custom = 1,
	}
	
	/// <summary>
	///  A set of controls in Audit Manager. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ControlSet
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="controls")]
		public Control[] Controls { get; set; }
	}
	
	/// <summary>
	///  A control in Audit Manager. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Control
	{
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public FrameworkType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="testingInformation")]
		public string TestingInformation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="actionPlanTitle")]
		public string ActionPlanTitle { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="actionPlanInstructions")]
		public string ActionPlanInstructions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="controlSources")]
		public string ControlSources { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="controlMappingSources")]
		public ControlMappingSource[] ControlMappingSources { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedAt")]
		public System.DateTimeOffset LastUpdatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public string CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedBy")]
		public string LastUpdatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
	}
	
	/// <summary>
	///  The data source that determines where Audit Manager collects evidence from for the control. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ControlMappingSource
	{
		
		[System.Runtime.Serialization.DataMember(Name="sourceId")]
		public string SourceId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceName")]
		public string SourceName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceDescription")]
		public string SourceDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceSetUpOption")]
		public SourceSetUpOption SourceSetUpOption { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceType")]
		public SourceType SourceType { get; set; }
		
		/// <summary>
		/// <p>A keyword that relates to the control data source.</p> <p>For manual evidence, this keyword indicates if the manual evidence is a file or text.</p> <p>For automated evidence, this keyword identifies a specific CloudTrail event, Config rule, Security Hub control, or Amazon Web Services API name. </p> <p> To learn more about the supported keywords that you can use when mapping a control data source, see the following pages in the <i>Audit Manager User Guide</i>:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/audit-manager/latest/userguide/control-data-sources-config.html">Config rules supported by Audit Manager</a> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/audit-manager/latest/userguide/control-data-sources-ash.html">Security Hub controls supported by Audit Manager</a> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/audit-manager/latest/userguide/control-data-sources-api.html">API calls supported by Audit Manager</a> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/audit-manager/latest/userguide/control-data-sources-cloudtrail.html">CloudTrail event names supported by Audit Manager</a> </p> </li> </ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceKeyword")]
		public SourceKeyword SourceKeyword { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceFrequency")]
		public SourceFrequency SourceFrequency { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="troubleshootingText")]
		public string TroubleshootingText { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum SourceSetUpOption
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="System_Controls_Mapping")]
		System_Controls_Mapping = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Procedural_Controls_Mapping")]
		Procedural_Controls_Mapping = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum SourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS_Cloudtrail")]
		AWS_Cloudtrail = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS_Config")]
		AWS_Config = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS_Security_Hub")]
		AWS_Security_Hub = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS_API_Call")]
		AWS_API_Call = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MANUAL")]
		MANUAL = 4,
	}
	
	/// <summary>
	/// <p>A keyword that relates to the control data source.</p> <p>For manual evidence, this keyword indicates if the manual evidence is a file or text.</p> <p>For automated evidence, this keyword identifies a specific CloudTrail event, Config rule, Security Hub control, or Amazon Web Services API name. </p> <p> To learn more about the supported keywords that you can use when mapping a control data source, see the following pages in the <i>Audit Manager User Guide</i>:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/audit-manager/latest/userguide/control-data-sources-config.html">Config rules supported by Audit Manager</a> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/audit-manager/latest/userguide/control-data-sources-ash.html">Security Hub controls supported by Audit Manager</a> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/audit-manager/latest/userguide/control-data-sources-api.html">API calls supported by Audit Manager</a> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/audit-manager/latest/userguide/control-data-sources-cloudtrail.html">CloudTrail event names supported by Audit Manager</a> </p> </li> </ul>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SourceKeyword
	{
		
		[System.Runtime.Serialization.DataMember(Name="keywordInputType")]
		public KeywordInputType KeywordInputType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="keywordValue")]
		public string KeywordValue { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum KeywordInputType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SELECT_FROM_LIST")]
		SELECT_FROM_LIST = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UPLOAD_FILE")]
		UPLOAD_FILE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INPUT_TEXT")]
		INPUT_TEXT = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum SourceFrequency
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DAILY")]
		DAILY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="WEEKLY")]
		WEEKLY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MONTHLY")]
		MONTHLY = 2,
	}
	
	/// <summary>
	///  A <code>controlSet</code> entity that represents a collection of controls in Audit Manager. This doesn't contain the control set ID. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateAssessmentFrameworkControlSet
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="controls")]
		public CreateAssessmentFrameworkControl[] Controls { get; set; }
	}
	
	/// <summary>
	///  The control entity attributes that uniquely identify an existing control to be added to a framework in Audit Manager. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateAssessmentFrameworkControl
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateAssessmentReportResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="assessmentReport")]
		public AssessmentReport AssessmentReport { get; set; }
	}
	
	/// <summary>
	///  A finalized document that's generated from an Audit Manager assessment. These reports summarize the relevant evidence that was collected for your audit, and link to the relevant evidence folders. These evidence folders are named and organized according to the controls that are specified in your assessment. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AssessmentReport
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="awsAccountId")]
		public string AwsAccountId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="assessmentId")]
		public string AssessmentId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="assessmentName")]
		public string AssessmentName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="author")]
		public string Author { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public AssessmentReportStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.DateTimeOffset CreationTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AssessmentReportStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="COMPLETE")]
		COMPLETE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IN_PROGRESS")]
		IN_PROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FAILED")]
		FAILED = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateControlResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="control")]
		public Control Control { get; set; }
	}
	
	/// <summary>
	///  The control mapping fields that represent the source for evidence collection, along with related parameters and metadata. This doesn't contain <code>mappingID</code>. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateControlMappingSource
	{
		
		[System.Runtime.Serialization.DataMember(Name="sourceName")]
		public string SourceName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceDescription")]
		public string SourceDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceSetUpOption")]
		public SourceSetUpOption SourceSetUpOption { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceType")]
		public SourceType SourceType { get; set; }
		
		/// <summary>
		/// <p>A keyword that relates to the control data source.</p> <p>For manual evidence, this keyword indicates if the manual evidence is a file or text.</p> <p>For automated evidence, this keyword identifies a specific CloudTrail event, Config rule, Security Hub control, or Amazon Web Services API name. </p> <p> To learn more about the supported keywords that you can use when mapping a control data source, see the following pages in the <i>Audit Manager User Guide</i>:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/audit-manager/latest/userguide/control-data-sources-config.html">Config rules supported by Audit Manager</a> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/audit-manager/latest/userguide/control-data-sources-ash.html">Security Hub controls supported by Audit Manager</a> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/audit-manager/latest/userguide/control-data-sources-api.html">API calls supported by Audit Manager</a> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/audit-manager/latest/userguide/control-data-sources-cloudtrail.html">CloudTrail event names supported by Audit Manager</a> </p> </li> </ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceKeyword")]
		public SourceKeyword SourceKeyword { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceFrequency")]
		public SourceFrequency SourceFrequency { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="troubleshootingText")]
		public string TroubleshootingText { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteAssessmentResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteAssessmentFrameworkResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteAssessmentFrameworkShareResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteAssessmentReportResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteControlResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeregisterAccountResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public AccountStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AccountStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ACTIVE")]
		ACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INACTIVE")]
		INACTIVE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PENDING_ACTIVATION")]
		PENDING_ACTIVATION = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeregisterOrganizationAdminAccountResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DisassociateAssessmentReportEvidenceFolderResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetAccountStatusResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public AccountStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetAssessmentResponse
	{
		
		/// <summary>
		///  An entity that defines the scope of audit evidence collected by Audit Manager. An Audit Manager assessment is an implementation of an Audit Manager framework. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="assessment")]
		public Assessment Assessment { get; set; }
		
		/// <summary>
		///  The wrapper that contains the Audit Manager role information of the current user. This includes the role type and IAM Amazon Resource Name (ARN). 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userRole")]
		public Role UserRole { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetAssessmentFrameworkResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="framework")]
		public Framework Framework { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetAssessmentReportUrlResponse
	{
		
		/// <summary>
		///  Short for uniform resource locator. A URL is used as a unique identifier to locate a resource on the internet. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="preSignedUrl")]
		public URL PreSignedUrl { get; set; }
	}
	
	/// <summary>
	///  Short for uniform resource locator. A URL is used as a unique identifier to locate a resource on the internet. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class URL
	{
		
		[System.Runtime.Serialization.DataMember(Name="hyperlinkName")]
		public string HyperlinkName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="link")]
		public string Link { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetChangeLogsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="changeLogs")]
		public ChangeLog[] ChangeLogs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	///  The record of a change within Audit Manager. For example, this could be the status change of an assessment or the delegation of a control set. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChangeLog
	{
		
		[System.Runtime.Serialization.DataMember(Name="objectType")]
		public ObjectTypeEnum ObjectType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="objectName")]
		public string ObjectName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="action")]
		public ActionEnum Action { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public string CreatedBy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ObjectTypeEnum
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ASSESSMENT")]
		ASSESSMENT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CONTROL_SET")]
		CONTROL_SET = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CONTROL")]
		CONTROL = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DELEGATION")]
		DELEGATION = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ASSESSMENT_REPORT")]
		ASSESSMENT_REPORT = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ActionEnum
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CREATE")]
		CREATE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UPDATE_METADATA")]
		UPDATE_METADATA = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ACTIVE")]
		ACTIVE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INACTIVE")]
		INACTIVE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DELETE")]
		DELETE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNDER_REVIEW")]
		UNDER_REVIEW = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="REVIEWED")]
		REVIEWED = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IMPORT_EVIDENCE")]
		IMPORT_EVIDENCE = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetControlResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="control")]
		public Control Control { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetDelegationsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="delegations")]
		public DelegationMetadata[] Delegations { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	///  The metadata that's associated with the delegation. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DelegationMetadata
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="assessmentName")]
		public string AssessmentName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="assessmentId")]
		public string AssessmentId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public DelegationStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="controlSetName")]
		public string ControlSetName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetEvidenceResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="evidence")]
		public Evidence Evidence { get; set; }
	}
	
	/// <summary>
	///  A record that contains the information needed to demonstrate compliance with the requirements specified by a control. Examples of evidence include change activity invoked by a user, or a system configuration snapshot. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Evidence
	{
		
		[System.Runtime.Serialization.DataMember(Name="dataSource")]
		public string DataSource { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="evidenceAwsAccountId")]
		public string EvidenceAwsAccountId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="time")]
		public System.DateTimeOffset Time { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="eventSource")]
		public string EventSource { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="eventName")]
		public string EventName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="evidenceByType")]
		public string EvidenceByType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourcesIncluded")]
		public Resource[] ResourcesIncluded { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public EvidenceAttributes Attributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="iamId")]
		public string IamId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="complianceCheck")]
		public string ComplianceCheck { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="awsOrganization")]
		public string AwsOrganization { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="awsAccountId")]
		public string AwsAccountId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="evidenceFolderId")]
		public string EvidenceFolderId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="assessmentReportSelection")]
		public string AssessmentReportSelection { get; set; }
	}
	
	/// <summary>
	///  A system asset that's evaluated in an Audit Manager assessment. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Resource
	{
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="complianceCheck")]
		public string ComplianceCheck { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EvidenceAttributes
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetEvidenceByEvidenceFolderResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="evidence")]
		public Evidence[] Evidence { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetEvidenceFileUploadUrlResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="evidenceFileName")]
		public string EvidenceFileName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="uploadUrl")]
		public string UploadUrl { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetEvidenceFolderResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="evidenceFolder")]
		public AssessmentEvidenceFolder EvidenceFolder { get; set; }
	}
	
	/// <summary>
	///  The folder where Audit Manager stores evidence for an assessment. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AssessmentEvidenceFolder
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="date")]
		public System.DateTimeOffset Date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="assessmentId")]
		public string AssessmentId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="controlSetId")]
		public string ControlSetId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="controlId")]
		public string ControlId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dataSource")]
		public string DataSource { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="author")]
		public string Author { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalEvidence")]
		public System.Nullable<System.Int32> TotalEvidence { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="assessmentReportSelectionCount")]
		public System.Nullable<System.Int32> AssessmentReportSelectionCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="controlName")]
		public string ControlName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="evidenceResourcesIncludedCount")]
		public System.Nullable<System.Int32> EvidenceResourcesIncludedCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="evidenceByTypeConfigurationDataCount")]
		public System.Nullable<System.Int32> EvidenceByTypeConfigurationDataCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="evidenceByTypeManualCount")]
		public System.Nullable<System.Int32> EvidenceByTypeManualCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="evidenceByTypeComplianceCheckCount")]
		public System.Nullable<System.Int32> EvidenceByTypeComplianceCheckCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="evidenceByTypeComplianceCheckIssuesCount")]
		public System.Nullable<System.Int32> EvidenceByTypeComplianceCheckIssuesCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="evidenceByTypeUserActivityCount")]
		public System.Nullable<System.Int32> EvidenceByTypeUserActivityCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="evidenceAwsServiceSourceCount")]
		public System.Nullable<System.Int32> EvidenceAwsServiceSourceCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetEvidenceFoldersByAssessmentResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="evidenceFolders")]
		public AssessmentEvidenceFolder[] EvidenceFolders { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetEvidenceFoldersByAssessmentControlResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="evidenceFolders")]
		public AssessmentEvidenceFolder[] EvidenceFolders { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetInsightsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="insights")]
		public Insights Insights { get; set; }
	}
	
	/// <summary>
	/// <p>A summary of the latest analytics data for all your active assessments. </p> <p>This summary is a snapshot of the data that your active assessments collected on the <code>lastUpdated</code> date. It’s important to understand that the following totals are daily counts based on this date — they aren’t a total sum to date. </p> <p>The <code>Insights</code> data is eventually consistent. This means that, when you read data from <code>Insights</code>, the response might not instantly reflect the results of a recently completed write or update operation. If you repeat your read request after a few hours, the response should return the latest data.</p> <note> <p>If you delete an assessment or change its status to inactive, <code>InsightsByAssessment</code> includes data for that assessment as follows.</p> <ul> <li> <p> <b>Inactive assessments</b> - If Audit Manager collected evidence for your assessment before you changed it inactive, that evidence is included in the <code>InsightsByAssessment</code> counts for that day.</p> </li> <li> <p> <b>Deleted assessments</b> - If Audit Manager collected evidence for your assessment before you deleted it, that evidence isn't included in the <code>InsightsByAssessment</code> counts for that day.</p> </li> </ul> </note>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Insights
	{
		
		[System.Runtime.Serialization.DataMember(Name="activeAssessmentsCount")]
		public System.Nullable<System.Int32> ActiveAssessmentsCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="noncompliantEvidenceCount")]
		public System.Nullable<System.Int32> NoncompliantEvidenceCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="compliantEvidenceCount")]
		public System.Nullable<System.Int32> CompliantEvidenceCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="inconclusiveEvidenceCount")]
		public System.Nullable<System.Int32> InconclusiveEvidenceCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="assessmentControlsCountByNoncompliantEvidence")]
		public System.Nullable<System.Int32> AssessmentControlsCountByNoncompliantEvidence { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalAssessmentControlsCount")]
		public System.Nullable<System.Int32> TotalAssessmentControlsCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdated")]
		public System.DateTimeOffset LastUpdated { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetInsightsByAssessmentResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="insights")]
		public InsightsByAssessment Insights { get; set; }
	}
	
	/// <summary>
	/// <p>A summary of the latest analytics data for a specific active assessment.</p> <p>This summary is a snapshot of the data that was collected on the <code>lastUpdated</code> date. It’s important to understand that the totals in <code>InsightsByAssessment</code> are daily counts based on this date — they aren’t a total sum to date. </p> <p>The <code>InsightsByAssessment</code> data is eventually consistent. This means that when you read data from <code>InsightsByAssessment</code>, the response might not instantly reflect the results of a recently completed write or update operation. If you repeat your read request after a few hours, the response returns the latest data.</p> <note> <p>If you delete an assessment or change its status to inactive, <code>InsightsByAssessment</code> includes data for that assessment as follows.</p> <ul> <li> <p> <b>Inactive assessments</b> - If Audit Manager collected evidence for your assessment before you changed it inactive, that evidence is included in the <code>InsightsByAssessment</code> counts for that day.</p> </li> <li> <p> <b>Deleted assessments</b> - If Audit Manager collected evidence for your assessment before you deleted it, that evidence isn't included in the <code>InsightsByAssessment</code> counts for that day.</p> </li> </ul> </note>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InsightsByAssessment
	{
		
		[System.Runtime.Serialization.DataMember(Name="noncompliantEvidenceCount")]
		public System.Nullable<System.Int32> NoncompliantEvidenceCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="compliantEvidenceCount")]
		public System.Nullable<System.Int32> CompliantEvidenceCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="inconclusiveEvidenceCount")]
		public System.Nullable<System.Int32> InconclusiveEvidenceCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="assessmentControlsCountByNoncompliantEvidence")]
		public System.Nullable<System.Int32> AssessmentControlsCountByNoncompliantEvidence { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalAssessmentControlsCount")]
		public System.Nullable<System.Int32> TotalAssessmentControlsCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdated")]
		public System.DateTimeOffset LastUpdated { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetOrganizationAdminAccountResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="adminAccountId")]
		public string AdminAccountId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="organizationId")]
		public string OrganizationId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetServicesInScopeResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="serviceMetadata")]
		public ServiceMetadata[] ServiceMetadata { get; set; }
	}
	
	/// <summary>
	///  The metadata that's associated with the Amazon Web Service. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServiceMetadata
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="category")]
		public string Category { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetSettingsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="settings")]
		public Settings Settings { get; set; }
	}
	
	/// <summary>
	///  The settings object that holds all supported Audit Manager settings. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Settings
	{
		
		[System.Runtime.Serialization.DataMember(Name="isAwsOrgEnabled")]
		public System.Nullable<System.Boolean> IsAwsOrgEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="snsTopic")]
		public string SnsTopic { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultAssessmentReportsDestination")]
		public AssessmentReportsDestination DefaultAssessmentReportsDestination { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultProcessOwners")]
		public Role[] DefaultProcessOwners { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="kmsKey")]
		public string KmsKey { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="evidenceFinderEnablement")]
		public EvidenceFinderEnablement EvidenceFinderEnablement { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deregistrationPolicy")]
		public DeregistrationPolicy DeregistrationPolicy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultExportDestination")]
		public DefaultExportDestination DefaultExportDestination { get; set; }
	}
	
	/// <summary>
	/// The settings object that specifies whether evidence finder is enabled. This object also describes the related event data store, and the backfill status for populating the event data store with evidence data.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EvidenceFinderEnablement
	{
		
		[System.Runtime.Serialization.DataMember(Name="eventDataStoreArn")]
		public string EventDataStoreArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enablementStatus")]
		public EvidenceFinderEnablementStatus EnablementStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="backfillStatus")]
		public EvidenceFinderBackfillStatus BackfillStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="error")]
		public string Error { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum EvidenceFinderEnablementStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ENABLED")]
		ENABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DISABLED")]
		DISABLED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ENABLE_IN_PROGRESS")]
		ENABLE_IN_PROGRESS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DISABLE_IN_PROGRESS")]
		DISABLE_IN_PROGRESS = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum EvidenceFinderBackfillStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NOT_STARTED")]
		NOT_STARTED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IN_PROGRESS")]
		IN_PROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="COMPLETED")]
		COMPLETED = 2,
	}
	
	/// <summary>
	/// <p>The deregistration policy for the data that's stored in Audit Manager. You can use this attribute to determine how your data is handled when you <a href="https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_DeregisterAccount.html">deregister Audit Manager</a>.</p> <p>By default, Audit Manager retains evidence data for two years from the time of its creation. Other Audit Manager resources (including assessments, custom controls, and custom frameworks) remain in Audit Manager indefinitely, and are available if you <a href="https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_RegisterAccount.html">re-register Audit Manager</a> in the future. For more information about data retention, see <a href="https://docs.aws.amazon.com/audit-manager/latest/userguide/data-protection.html">Data Protection</a> in the <i>Audit Manager User Guide</i>.</p> <important> <p>If you choose to delete all data, this action permanently deletes all evidence data in your account within seven days. It also deletes all of the Audit Manager resources that you created, including assessments, custom controls, and custom frameworks. Your data will not be available if you re-register Audit Manager in the future.</p> </important>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeregistrationPolicy
	{
		
		[System.Runtime.Serialization.DataMember(Name="deleteResources")]
		public DeleteResources DeleteResources { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DeleteResources
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ALL")]
		ALL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DEFAULT")]
		DEFAULT = 1,
	}
	
	/// <summary>
	/// The default s3 bucket where Audit Manager saves the files that you export from evidence finder.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DefaultExportDestination
	{
		
		[System.Runtime.Serialization.DataMember(Name="destinationType")]
		public AssessmentReportDestinationType DestinationType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="destination")]
		public string Destination { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListAssessmentControlInsightsByControlDomainResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="controlInsightsByAssessment")]
		public ControlInsightsMetadataByAssessmentItem[] ControlInsightsByAssessment { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// <p>A summary of the latest analytics data for a specific control in a specific active assessment.</p> <p>Control insights are grouped by control domain, and ranked by the highest total count of non-compliant evidence. </p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ControlInsightsMetadataByAssessmentItem
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="evidenceInsights")]
		public EvidenceInsights EvidenceInsights { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="controlSetName")]
		public string ControlSetName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdated")]
		public System.DateTimeOffset LastUpdated { get; set; }
	}
	
	/// <summary>
	/// A breakdown of the latest compliance check status for the evidence in your Audit Manager assessments. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EvidenceInsights
	{
		
		[System.Runtime.Serialization.DataMember(Name="noncompliantEvidenceCount")]
		public System.Nullable<System.Int32> NoncompliantEvidenceCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="compliantEvidenceCount")]
		public System.Nullable<System.Int32> CompliantEvidenceCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="inconclusiveEvidenceCount")]
		public System.Nullable<System.Int32> InconclusiveEvidenceCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListAssessmentFrameworkShareRequestsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="assessmentFrameworkShareRequests")]
		public AssessmentFrameworkShareRequest[] AssessmentFrameworkShareRequests { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	///  Represents a share request for a custom framework in Audit Manager. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AssessmentFrameworkShareRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="frameworkId")]
		public string FrameworkId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="frameworkName")]
		public string FrameworkName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="frameworkDescription")]
		public string FrameworkDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ShareRequestStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceAccount")]
		public string SourceAccount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="destinationAccount")]
		public string DestinationAccount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="destinationRegion")]
		public string DestinationRegion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="expirationTime")]
		public System.DateTimeOffset ExpirationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdated")]
		public System.DateTimeOffset LastUpdated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="comment")]
		public string Comment { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="standardControlsCount")]
		public System.Nullable<System.Int32> StandardControlsCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customControlsCount")]
		public System.Nullable<System.Int32> CustomControlsCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="complianceType")]
		public string ComplianceType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ShareRequestStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ACTIVE")]
		ACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="REPLICATING")]
		REPLICATING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SHARED")]
		SHARED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EXPIRING")]
		EXPIRING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FAILED")]
		FAILED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EXPIRED")]
		EXPIRED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DECLINED")]
		DECLINED = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="REVOKED")]
		REVOKED = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListAssessmentFrameworksResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="frameworkMetadataList")]
		public AssessmentFrameworkMetadata[] FrameworkMetadataList { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	///  The metadata that's associated with a standard framework or a custom framework. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AssessmentFrameworkMetadata
	{
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public FrameworkType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="logo")]
		public string Logo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="complianceType")]
		public string ComplianceType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="controlsCount")]
		public System.Nullable<System.Int32> ControlsCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="controlSetsCount")]
		public System.Nullable<System.Int32> ControlSetsCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedAt")]
		public System.DateTimeOffset LastUpdatedAt { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListAssessmentReportsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="assessmentReports")]
		public AssessmentReportMetadata[] AssessmentReports { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	///  The metadata objects that are associated with the specified assessment report. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AssessmentReportMetadata
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="assessmentId")]
		public string AssessmentId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="assessmentName")]
		public string AssessmentName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="author")]
		public string Author { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public AssessmentReportStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.DateTimeOffset CreationTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListAssessmentsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="assessmentMetadata")]
		public AssessmentMetadataItem[] AssessmentMetadata { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	///  A metadata object that's associated with an assessment in Audit Manager. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AssessmentMetadataItem
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="complianceType")]
		public string ComplianceType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public AssessmentStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="roles")]
		public Role[] Roles { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="delegations")]
		public Delegation[] Delegations { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdated")]
		public System.DateTimeOffset LastUpdated { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListControlDomainInsightsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="controlDomainInsights")]
		public ControlDomainInsights[] ControlDomainInsights { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// <p>A summary of the latest analytics data for a specific control domain.</p> <p>Control domain insights are grouped by control domain, and ranked by the highest total count of non-compliant evidence.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ControlDomainInsights
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="controlsCountByNoncompliantEvidence")]
		public System.Nullable<System.Int32> ControlsCountByNoncompliantEvidence { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalControlsCount")]
		public System.Nullable<System.Int32> TotalControlsCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="evidenceInsights")]
		public EvidenceInsights EvidenceInsights { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdated")]
		public System.DateTimeOffset LastUpdated { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListControlDomainInsightsByAssessmentResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="controlDomainInsights")]
		public ControlDomainInsights[] ControlDomainInsights { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListControlInsightsByControlDomainResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="controlInsightsMetadata")]
		public ControlInsightsMetadataItem[] ControlInsightsMetadata { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// <p>A summary of the latest analytics data for a specific control. </p> <p>This data reflects the total counts for the specified control across all active assessments. Control insights are grouped by control domain, and ranked by the highest total count of non-compliant evidence.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ControlInsightsMetadataItem
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="evidenceInsights")]
		public EvidenceInsights EvidenceInsights { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdated")]
		public System.DateTimeOffset LastUpdated { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListControlsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="controlMetadataList")]
		public ControlMetadata[] ControlMetadataList { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	///  The metadata that's associated with the standard control or custom control. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ControlMetadata
	{
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="controlSources")]
		public string ControlSources { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedAt")]
		public System.DateTimeOffset LastUpdatedAt { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListKeywordsForDataSourceResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="keywords")]
		public string[] Keywords { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListNotificationsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="notifications")]
		public Notification[] Notifications { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	///  The notification that informs a user of an update in Audit Manager. For example, this includes the notification that's sent when a control set is delegated for review. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Notification
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="assessmentId")]
		public string AssessmentId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="assessmentName")]
		public string AssessmentName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="controlSetId")]
		public string ControlSetId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="controlSetName")]
		public string ControlSetName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="eventTime")]
		public System.DateTimeOffset EventTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string Source { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListTagsForResourceResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RegisterAccountResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public AccountStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RegisterOrganizationAdminAccountResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="adminAccountId")]
		public string AdminAccountId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="organizationId")]
		public string OrganizationId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StartAssessmentFrameworkShareResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="assessmentFrameworkShareRequest")]
		public AssessmentFrameworkShareRequest AssessmentFrameworkShareRequest { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TagResourceResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UntagResourceResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateAssessmentResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="assessment")]
		public Assessment Assessment { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateAssessmentControlResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="control")]
		public AssessmentControl Control { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateAssessmentControlSetStatusResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="controlSet")]
		public AssessmentControlSet ControlSet { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateAssessmentFrameworkResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="framework")]
		public Framework Framework { get; set; }
	}
	
	/// <summary>
	///  A <code>controlSet</code> entity that represents a collection of controls in Audit Manager. This doesn't contain the control set ID. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateAssessmentFrameworkControlSet
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="controls")]
		public CreateAssessmentFrameworkControl[] Controls { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateAssessmentFrameworkShareResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="assessmentFrameworkShareRequest")]
		public AssessmentFrameworkShareRequest AssessmentFrameworkShareRequest { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateAssessmentStatusResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="assessment")]
		public Assessment Assessment { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateControlResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="control")]
		public Control Control { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateSettingsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="settings")]
		public Settings Settings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ExportDestinationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="S3")]
		S3 = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ValidateAssessmentReportIntegrityResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="signatureValid")]
		public System.Nullable<System.Boolean> SignatureValid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="signatureAlgorithm")]
		public string SignatureAlgorithm { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="signatureDateTime")]
		public string SignatureDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="signatureKeyId")]
		public string SignatureKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="validationErrors")]
		public string[] ValidationErrors { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AssociateAssessmentReportEvidenceFolderRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="evidenceFolderId")]
		public string EvidenceFolderId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchAssociateAssessmentReportEvidenceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="evidenceFolderId")]
		public string EvidenceFolderId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="evidenceIds")]
		public string[] EvidenceIds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchCreateDelegationByAssessmentRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="createDelegationRequests")]
		public CreateDelegationRequest[] CreateDelegationRequests { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchDeleteDelegationByAssessmentRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="delegationIds")]
		public string[] DelegationIds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchDisassociateAssessmentReportEvidenceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="evidenceFolderId")]
		public string EvidenceFolderId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="evidenceIds")]
		public string[] EvidenceIds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchImportEvidenceToAssessmentControlRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="manualEvidence")]
		public ManualEvidence[] ManualEvidence { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ControlType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Standard")]
		Standard = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Custom")]
		Custom = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateAssessmentFrameworkRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="complianceType")]
		public string ComplianceType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="controlSets")]
		public CreateAssessmentFrameworkControlSet[] ControlSets { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateAssessmentReportRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="queryStatement")]
		public string QueryStatement { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateAssessmentRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="assessmentReportsDestination")]
		public AssessmentReportsDestination AssessmentReportsDestination { get; set; }
		
		/// <summary>
		///  The wrapper that contains the Amazon Web Services accounts and services that are in scope for the assessment. 
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="scope")]
		public Scope Scope { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="roles")]
		public Role[] Roles { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="frameworkId")]
		public string FrameworkId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateControlRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="testingInformation")]
		public string TestingInformation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="actionPlanTitle")]
		public string ActionPlanTitle { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="actionPlanInstructions")]
		public string ActionPlanInstructions { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="controlMappingSources")]
		public CreateControlMappingSource[] ControlMappingSources { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteAssessmentFrameworkRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ShareRequestType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SENT")]
		SENT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RECEIVED")]
		RECEIVED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteAssessmentFrameworkShareRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteAssessmentReportRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteAssessmentRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteControlRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeregisterAccountRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeregisterOrganizationAdminAccountRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="adminAccountId")]
		public string AdminAccountId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DisassociateAssessmentReportEvidenceFolderRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="evidenceFolderId")]
		public string EvidenceFolderId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetAccountStatusRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetAssessmentFrameworkRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetAssessmentReportUrlRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetAssessmentRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetChangeLogsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetControlRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetDelegationsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetEvidenceByEvidenceFolderRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetEvidenceFileUploadUrlRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetEvidenceFolderRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetEvidenceFoldersByAssessmentControlRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetEvidenceFoldersByAssessmentRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetEvidenceRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetInsightsByAssessmentRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetInsightsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetOrganizationAdminAccountRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetServicesInScopeRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum SettingAttribute
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ALL")]
		ALL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IS_AWS_ORG_ENABLED")]
		IS_AWS_ORG_ENABLED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SNS_TOPIC")]
		SNS_TOPIC = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DEFAULT_ASSESSMENT_REPORTS_DESTINATION")]
		DEFAULT_ASSESSMENT_REPORTS_DESTINATION = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DEFAULT_PROCESS_OWNERS")]
		DEFAULT_PROCESS_OWNERS = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EVIDENCE_FINDER_ENABLEMENT")]
		EVIDENCE_FINDER_ENABLEMENT = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DEREGISTRATION_POLICY")]
		DEREGISTRATION_POLICY = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DEFAULT_EXPORT_DESTINATION")]
		DEFAULT_EXPORT_DESTINATION = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetSettingsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListAssessmentControlInsightsByControlDomainRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListAssessmentFrameworkShareRequestsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListAssessmentFrameworksRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListAssessmentReportsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListAssessmentsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListControlDomainInsightsByAssessmentRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListControlDomainInsightsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListControlInsightsByControlDomainRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListControlsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListKeywordsForDataSourceRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListNotificationsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListTagsForResourceRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RegisterAccountRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="kmsKey")]
		public string KmsKey { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="delegatedAdminAccount")]
		public string DelegatedAdminAccount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RegisterOrganizationAdminAccountRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="adminAccountId")]
		public string AdminAccountId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ShareRequestAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ACCEPT")]
		ACCEPT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DECLINE")]
		DECLINE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="REVOKE")]
		REVOKE = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StartAssessmentFrameworkShareRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="destinationAccount")]
		public string DestinationAccount { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="destinationRegion")]
		public string DestinationRegion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="comment")]
		public string Comment { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TagResourceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UntagResourceRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateAssessmentControlRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="controlStatus")]
		public ControlStatus ControlStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="commentBody")]
		public string CommentBody { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateAssessmentControlSetStatusRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ControlSetStatus Status { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="comment")]
		public string Comment { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateAssessmentFrameworkRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="complianceType")]
		public string ComplianceType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="controlSets")]
		public UpdateAssessmentFrameworkControlSet[] ControlSets { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateAssessmentFrameworkShareRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="requestType")]
		public ShareRequestType RequestType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="action")]
		public ShareRequestAction Action { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateAssessmentRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="assessmentName")]
		public string AssessmentName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="assessmentDescription")]
		public string AssessmentDescription { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="scope")]
		public Scope Scope { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="assessmentReportsDestination")]
		public AssessmentReportsDestination AssessmentReportsDestination { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="roles")]
		public Role[] Roles { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateAssessmentStatusRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public AssessmentStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateControlRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="testingInformation")]
		public string TestingInformation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="actionPlanTitle")]
		public string ActionPlanTitle { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="actionPlanInstructions")]
		public string ActionPlanInstructions { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="controlMappingSources")]
		public ControlMappingSource[] ControlMappingSources { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateSettingsRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="snsTopic")]
		public string SnsTopic { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultAssessmentReportsDestination")]
		public AssessmentReportsDestination DefaultAssessmentReportsDestination { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultProcessOwners")]
		public Role[] DefaultProcessOwners { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="kmsKey")]
		public string KmsKey { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="evidenceFinderEnabled")]
		public System.Nullable<System.Boolean> EvidenceFinderEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deregistrationPolicy")]
		public DeregistrationPolicy DeregistrationPolicy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultExportDestination")]
		public DefaultExportDestination DefaultExportDestination { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ValidateAssessmentReportIntegrityRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="s3RelativePath")]
		public string S3RelativePath { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Associates an evidence folder to an assessment report in an Audit Manager assessment.
		/// AssociateAssessmentReportEvidenceFolder assessments/{assessmentId}/associateToAssessmentReport
		/// </summary>
		/// <param name="assessmentId"> The identifier for the assessment. 
		/// Min length: 36
		/// Max length: 36
		// </param>
		/// <returns>Success</returns>
		public async Task<AssociateAssessmentReportEvidenceFolderResponse> AssociateAssessmentReportEvidenceFolderAsync(string assessmentId, AssociateAssessmentReportEvidenceFolderPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "assessments/"+ (assessmentId==null? "" : System.Uri.EscapeDataString(assessmentId))+"/associateToAssessmentReport";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AssociateAssessmentReportEvidenceFolderResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Associates a list of evidence to an assessment report in an Audit Manager assessment.
		/// BatchAssociateAssessmentReportEvidence assessments/{assessmentId}/batchAssociateToAssessmentReport
		/// </summary>
		/// <param name="assessmentId"> The identifier for the assessment. 
		/// Min length: 36
		/// Max length: 36
		// </param>
		/// <returns>Success</returns>
		public async Task<BatchAssociateAssessmentReportEvidenceResponse> BatchAssociateAssessmentReportEvidenceAsync(string assessmentId, BatchAssociateAssessmentReportEvidencePutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "assessments/"+ (assessmentId==null? "" : System.Uri.EscapeDataString(assessmentId))+"/batchAssociateToAssessmentReport";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchAssociateAssessmentReportEvidenceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a batch of delegations for an assessment in Audit Manager.
		/// BatchCreateDelegationByAssessment assessments/{assessmentId}/delegations
		/// </summary>
		/// <param name="assessmentId"> The identifier for the assessment. 
		/// Min length: 36
		/// Max length: 36
		// </param>
		/// <returns>Success</returns>
		public async Task<BatchCreateDelegationByAssessmentResponse> BatchCreateDelegationByAssessmentAsync(string assessmentId, BatchCreateDelegationByAssessmentPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "assessments/"+ (assessmentId==null? "" : System.Uri.EscapeDataString(assessmentId))+"/delegations";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchCreateDelegationByAssessmentResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a batch of delegations for an assessment in Audit Manager.
		/// BatchDeleteDelegationByAssessment assessments/{assessmentId}/delegations
		/// </summary>
		/// <param name="assessmentId"> The identifier for the assessment. 
		/// Min length: 36
		/// Max length: 36
		// </param>
		/// <returns>Success</returns>
		public async Task<BatchDeleteDelegationByAssessmentResponse> BatchDeleteDelegationByAssessmentAsync(string assessmentId, BatchDeleteDelegationByAssessmentPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "assessments/"+ (assessmentId==null? "" : System.Uri.EscapeDataString(assessmentId))+"/delegations";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchDeleteDelegationByAssessmentResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Disassociates a list of evidence from an assessment report in Audit Manager.
		/// BatchDisassociateAssessmentReportEvidence assessments/{assessmentId}/batchDisassociateFromAssessmentReport
		/// </summary>
		/// <param name="assessmentId"> The identifier for the assessment. 
		/// Min length: 36
		/// Max length: 36
		// </param>
		/// <returns>Success</returns>
		public async Task<BatchDisassociateAssessmentReportEvidenceResponse> BatchDisassociateAssessmentReportEvidenceAsync(string assessmentId, BatchDisassociateAssessmentReportEvidencePutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "assessments/"+ (assessmentId==null? "" : System.Uri.EscapeDataString(assessmentId))+"/batchDisassociateFromAssessmentReport";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchDisassociateAssessmentReportEvidenceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Adds one or more pieces of evidence to a control in an Audit Manager assessment. </p> <p>You can import manual evidence from any S3 bucket by specifying the S3 URI of the object. You can also upload a file from your browser, or enter plain text in response to a risk assessment question. </p> <p>The following restrictions apply to this action:</p> <ul> <li> <p> <code>manualEvidence</code> can be only one of the following: <code>evidenceFileName</code>, <code>s3ResourcePath</code>, or <code>textResponse</code> </p> </li> <li> <p>Maximum size of an individual evidence file: 100 MB</p> </li> <li> <p>Number of daily manual evidence uploads per control: 100</p> </li> <li> <p>Supported file formats: See <a href="https://docs.aws.amazon.com/audit-manager/latest/userguide/upload-evidence.html#supported-manual-evidence-files">Supported file types for manual evidence</a> in the <i>Audit Manager User Guide</i> </p> </li> </ul> <p>For more information about Audit Manager service restrictions, see <a href="https://docs.aws.amazon.com/audit-manager/latest/userguide/service-quotas.html">Quotas and restrictions for Audit Manager</a>.</p>
		/// BatchImportEvidenceToAssessmentControl assessments/{assessmentId}/controlSets/{controlSetId}/controls/{controlId}/evidence
		/// </summary>
		/// <param name="assessmentId"> The identifier for the assessment. 
		/// Min length: 36
		/// Max length: 36
		// </param>
		/// <param name="controlSetId"> The identifier for the control set. 
		/// Min length: 1
		/// Max length: 300
		// </param>
		/// <param name="controlId"> The identifier for the control. 
		/// Min length: 36
		/// Max length: 36
		// </param>
		/// <returns>Success</returns>
		public async Task<BatchImportEvidenceToAssessmentControlResponse> BatchImportEvidenceToAssessmentControlAsync(string assessmentId, string controlSetId, string controlId, BatchImportEvidenceToAssessmentControlPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "assessments/"+ (assessmentId==null? "" : System.Uri.EscapeDataString(assessmentId))+"/controlSets/"+ (controlSetId==null? "" : System.Uri.EscapeDataString(controlSetId))+"/controls/"+ (controlId==null? "" : System.Uri.EscapeDataString(controlId))+"/evidence";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchImportEvidenceToAssessmentControlResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates an assessment in Audit Manager.
		/// CreateAssessment assessments
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateAssessmentResponse> CreateAssessmentAsync(CreateAssessmentPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "assessments";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateAssessmentResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of current and past assessments from Audit Manager.
		/// ListAssessments assessments
		/// </summary>
		/// <param name="status"> The current status of the assessment.</param>
		/// <param name="nextToken"> The pagination token that's used to fetch the next set of results. 
		/// Min length: 1
		/// Max length: 1000
		// </param>
		/// <param name="maxResults"> Represents the maximum number of results on a page or for an API request call. 
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <returns>Success</returns>
		public async Task<ListAssessmentsResponse> ListAssessmentsAsync(AssessmentStatus status, string nextToken, int maxResults, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "assessments?status=" + status+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListAssessmentsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a custom framework in Audit Manager.
		/// CreateAssessmentFramework assessmentFrameworks
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateAssessmentFrameworkResponse> CreateAssessmentFrameworkAsync(CreateAssessmentFrameworkPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "assessmentFrameworks";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateAssessmentFrameworkResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates an assessment report for the specified assessment.
		/// CreateAssessmentReport assessments/{assessmentId}/reports
		/// </summary>
		/// <param name="assessmentId"> The identifier for the assessment. 
		/// Min length: 36
		/// Max length: 36
		// </param>
		/// <returns>Success</returns>
		public async Task<CreateAssessmentReportResponse> CreateAssessmentReportAsync(string assessmentId, CreateAssessmentReportPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "assessments/"+ (assessmentId==null? "" : System.Uri.EscapeDataString(assessmentId))+"/reports";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateAssessmentReportResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a new custom control in Audit Manager.
		/// CreateControl controls
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateControlResponse> CreateControlAsync(CreateControlPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "controls";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateControlResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes an assessment in Audit Manager.
		/// DeleteAssessment assessments/{assessmentId}
		/// </summary>
		/// <param name="assessmentId"> The identifier for the assessment. 
		/// Min length: 36
		/// Max length: 36
		// </param>
		/// <returns>Success</returns>
		public async Task<DeleteAssessmentResponse> DeleteAssessmentAsync(string assessmentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "assessments/"+ (assessmentId==null? "" : System.Uri.EscapeDataString(assessmentId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteAssessmentResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about a specified assessment.
		/// GetAssessment assessments/{assessmentId}
		/// </summary>
		/// <param name="assessmentId">The unique identifier for the assessment. 
		/// Min length: 36
		/// Max length: 36
		// </param>
		/// <returns>Success</returns>
		public async Task<GetAssessmentResponse> GetAssessmentAsync(string assessmentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "assessments/"+ (assessmentId==null? "" : System.Uri.EscapeDataString(assessmentId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetAssessmentResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Edits an Audit Manager assessment.
		/// UpdateAssessment assessments/{assessmentId}
		/// </summary>
		/// <param name="assessmentId"> The unique identifier for the assessment. 
		/// Min length: 36
		/// Max length: 36
		// </param>
		/// <returns>Success</returns>
		public async Task<UpdateAssessmentResponse> UpdateAssessmentAsync(string assessmentId, UpdateAssessmentPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "assessments/"+ (assessmentId==null? "" : System.Uri.EscapeDataString(assessmentId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateAssessmentResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a custom framework in Audit Manager.
		/// DeleteAssessmentFramework assessmentFrameworks/{frameworkId}
		/// </summary>
		/// <param name="frameworkId"> The identifier for the custom framework. 
		/// Min length: 36
		/// Max length: 36
		// </param>
		/// <returns>Success</returns>
		public async Task<DeleteAssessmentFrameworkResponse> DeleteAssessmentFrameworkAsync(string frameworkId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "assessmentFrameworks/"+ (frameworkId==null? "" : System.Uri.EscapeDataString(frameworkId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteAssessmentFrameworkResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about a specified framework.
		/// GetAssessmentFramework assessmentFrameworks/{frameworkId}
		/// </summary>
		/// <param name="frameworkId"> The identifier for the framework. 
		/// Min length: 36
		/// Max length: 36
		// </param>
		/// <returns>Success</returns>
		public async Task<GetAssessmentFrameworkResponse> GetAssessmentFrameworkAsync(string frameworkId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "assessmentFrameworks/"+ (frameworkId==null? "" : System.Uri.EscapeDataString(frameworkId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetAssessmentFrameworkResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a custom framework in Audit Manager.
		/// UpdateAssessmentFramework assessmentFrameworks/{frameworkId}
		/// </summary>
		/// <param name="frameworkId"> The unique identifier for the framework. 
		/// Min length: 36
		/// Max length: 36
		// </param>
		/// <returns>Success</returns>
		public async Task<UpdateAssessmentFrameworkResponse> UpdateAssessmentFrameworkAsync(string frameworkId, UpdateAssessmentFrameworkPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "assessmentFrameworks/"+ (frameworkId==null? "" : System.Uri.EscapeDataString(frameworkId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateAssessmentFrameworkResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a share request for a custom framework in Audit Manager.
		/// DeleteAssessmentFrameworkShare assessmentFrameworkShareRequests/{requestId}#requestType
		/// </summary>
		/// <param name="requestId">The unique identifier for the share request to be deleted.
		/// Min length: 36
		/// Max length: 36
		// </param>
		/// <param name="requestType">Specifies whether the share request is a sent request or a received request.</param>
		/// <returns>Success</returns>
		public async Task<DeleteAssessmentFrameworkShareResponse> DeleteAssessmentFrameworkShareAsync(string requestId, ShareRequestType requestType, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "assessmentFrameworkShareRequests/"+ (requestId==null? "" : System.Uri.EscapeDataString(requestId))+"#requestType&requestType=" + requestType;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteAssessmentFrameworkShareResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes an assessment report in Audit Manager. </p> <p>When you run the <code>DeleteAssessmentReport</code> operation, Audit Manager attempts to delete the following data:</p> <ol> <li> <p>The specified assessment report that’s stored in your S3 bucket</p> </li> <li> <p>The associated metadata that’s stored in Audit Manager</p> </li> </ol> <p>If Audit Manager can’t access the assessment report in your S3 bucket, the report isn’t deleted. In this event, the <code>DeleteAssessmentReport</code> operation doesn’t fail. Instead, it proceeds to delete the associated metadata only. You must then delete the assessment report from the S3 bucket yourself. </p> <p>This scenario happens when Audit Manager receives a <code>403 (Forbidden)</code> or <code>404 (Not Found)</code> error from Amazon S3. To avoid this, make sure that your S3 bucket is available, and that you configured the correct permissions for Audit Manager to delete resources in your S3 bucket. For an example permissions policy that you can use, see <a href="https://docs.aws.amazon.com/audit-manager/latest/userguide/security_iam_id-based-policy-examples.html#full-administrator-access-assessment-report-destination">Assessment report destination permissions</a> in the <i>Audit Manager User Guide</i>. For information about the issues that could cause a <code>403 (Forbidden)</code> or <code>404 (Not Found</code>) error from Amazon S3, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/ErrorResponses.html#ErrorCodeList">List of Error Codes</a> in the <i>Amazon Simple Storage Service API Reference</i>. </p>
		/// DeleteAssessmentReport assessments/{assessmentId}/reports/{assessmentReportId}
		/// </summary>
		/// <param name="assessmentId"> The unique identifier for the assessment. 
		/// Min length: 36
		/// Max length: 36
		// </param>
		/// <param name="assessmentReportId"> The unique identifier for the assessment report. 
		/// Min length: 36
		/// Max length: 36
		// </param>
		/// <returns>Success</returns>
		public async Task<DeleteAssessmentReportResponse> DeleteAssessmentReportAsync(string assessmentId, string assessmentReportId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "assessments/"+ (assessmentId==null? "" : System.Uri.EscapeDataString(assessmentId))+"/reports/"+ (assessmentReportId==null? "" : System.Uri.EscapeDataString(assessmentReportId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteAssessmentReportResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p> Deletes a custom control in Audit Manager. </p> <important> <p>When you invoke this operation, the custom control is deleted from any frameworks or assessments that it’s currently part of. As a result, Audit Manager will stop collecting evidence for that custom control in all of your assessments. This includes assessments that you previously created before you deleted the custom control.</p> </important>
		/// DeleteControl controls/{controlId}
		/// </summary>
		/// <param name="controlId"> The unique identifier for the control. 
		/// Min length: 36
		/// Max length: 36
		// </param>
		/// <returns>Success</returns>
		public async Task<DeleteControlResponse> DeleteControlAsync(string controlId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "controls/"+ (controlId==null? "" : System.Uri.EscapeDataString(controlId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteControlResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about a specified control.
		/// GetControl controls/{controlId}
		/// </summary>
		/// <param name="controlId"> The identifier for the control. 
		/// Min length: 36
		/// Max length: 36
		// </param>
		/// <returns>Success</returns>
		public async Task<GetControlResponse> GetControlAsync(string controlId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "controls/"+ (controlId==null? "" : System.Uri.EscapeDataString(controlId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetControlResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a custom control in Audit Manager.
		/// UpdateControl controls/{controlId}
		/// </summary>
		/// <param name="controlId"> The identifier for the control. 
		/// Min length: 36
		/// Max length: 36
		// </param>
		/// <returns>Success</returns>
		public async Task<UpdateControlResponse> UpdateControlAsync(string controlId, UpdateControlPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "controls/"+ (controlId==null? "" : System.Uri.EscapeDataString(controlId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateControlResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p> Deregisters an account in Audit Manager. </p> <note> <p>Before you deregister, you can use the <a href="https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_UpdateSettings.html">UpdateSettings</a> API operation to set your preferred data retention policy. By default, Audit Manager retains your data. If you want to delete your data, you can use the <code>DeregistrationPolicy</code> attribute to request the deletion of your data. </p> <p>For more information about data retention, see <a href="https://docs.aws.amazon.com/audit-manager/latest/userguide/data-protection.html">Data Protection</a> in the <i>Audit Manager User Guide</i>. </p> </note>
		/// DeregisterAccount account/deregisterAccount
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeregisterAccountResponse> DeregisterAccountAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/deregisterAccount";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeregisterAccountResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Removes the specified Amazon Web Services account as a delegated administrator for Audit Manager. </p> <p>When you remove a delegated administrator from your Audit Manager settings, you continue to have access to the evidence that you previously collected under that account. This is also the case when you deregister a delegated administrator from Organizations. However, Audit Manager stops collecting and attaching evidence to that delegated administrator account moving forward.</p> <important> <p>Keep in mind the following cleanup task if you use evidence finder:</p> <p>Before you use your management account to remove a delegated administrator, make sure that the current delegated administrator account signs in to Audit Manager and disables evidence finder first. Disabling evidence finder automatically deletes the event data store that was created in their account when they enabled evidence finder. If this task isn’t completed, the event data store remains in their account. In this case, we recommend that the original delegated administrator goes to CloudTrail Lake and manually <a href="https://docs.aws.amazon.com/awscloudtrail/latest/userguide/query-eds-disable-termination.html">deletes the event data store</a>.</p> <p>This cleanup task is necessary to ensure that you don't end up with multiple event data stores. Audit Manager ignores an unused event data store after you remove or change a delegated administrator account. However, the unused event data store continues to incur storage costs from CloudTrail Lake if you don't delete it.</p> </important> <p>When you deregister a delegated administrator account for Audit Manager, the data for that account isn’t deleted. If you want to delete resource data for a delegated administrator account, you must perform that task separately before you deregister the account. Either, you can do this in the Audit Manager console. Or, you can use one of the delete API operations that are provided by Audit Manager. </p> <p>To delete your Audit Manager resource data, see the following instructions: </p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_DeleteAssessment.html">DeleteAssessment</a> (see also: <a href="https://docs.aws.amazon.com/audit-manager/latest/userguide/delete-assessment.html">Deleting an assessment</a> in the <i>Audit Manager User Guide</i>)</p> </li> <li> <p> <a href="https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_DeleteAssessmentFramework.html">DeleteAssessmentFramework</a> (see also: <a href="https://docs.aws.amazon.com/audit-manager/latest/userguide/delete-custom-framework.html">Deleting a custom framework</a> in the <i>Audit Manager User Guide</i>)</p> </li> <li> <p> <a href="https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_DeleteAssessmentFrameworkShare.html">DeleteAssessmentFrameworkShare</a> (see also: <a href="https://docs.aws.amazon.com/audit-manager/latest/userguide/deleting-shared-framework-requests.html">Deleting a share request</a> in the <i>Audit Manager User Guide</i>)</p> </li> <li> <p> <a href="https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_DeleteAssessmentReport.html">DeleteAssessmentReport</a> (see also: <a href="https://docs.aws.amazon.com/audit-manager/latest/userguide/generate-assessment-report.html#delete-assessment-report-steps">Deleting an assessment report</a> in the <i>Audit Manager User Guide</i>)</p> </li> <li> <p> <a href="https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_DeleteControl.html">DeleteControl</a> (see also: <a href="https://docs.aws.amazon.com/audit-manager/latest/userguide/delete-controls.html">Deleting a custom control</a> in the <i>Audit Manager User Guide</i>)</p> </li> </ul> <p>At this time, Audit Manager doesn't provide an option to delete evidence for a specific delegated administrator. Instead, when your management account deregisters Audit Manager, we perform a cleanup for the current delegated administrator account at the time of deregistration.</p>
		/// DeregisterOrganizationAdminAccount account/deregisterOrganizationAdminAccount
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeregisterOrganizationAdminAccountResponse> DeregisterOrganizationAdminAccountAsync(DeregisterOrganizationAdminAccountPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/deregisterOrganizationAdminAccount";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeregisterOrganizationAdminAccountResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Disassociates an evidence folder from the specified assessment report in Audit Manager.
		/// DisassociateAssessmentReportEvidenceFolder assessments/{assessmentId}/disassociateFromAssessmentReport
		/// </summary>
		/// <param name="assessmentId"> The unique identifier for the assessment. 
		/// Min length: 36
		/// Max length: 36
		// </param>
		/// <returns>Success</returns>
		public async Task<DisassociateAssessmentReportEvidenceFolderResponse> DisassociateAssessmentReportEvidenceFolderAsync(string assessmentId, DisassociateAssessmentReportEvidenceFolderPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "assessments/"+ (assessmentId==null? "" : System.Uri.EscapeDataString(assessmentId))+"/disassociateFromAssessmentReport";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DisassociateAssessmentReportEvidenceFolderResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets the registration status of an account in Audit Manager.
		/// GetAccountStatus account/status
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetAccountStatusResponse> GetAccountStatusAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/status";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetAccountStatusResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the URL of an assessment report in Audit Manager.
		/// GetAssessmentReportUrl assessments/{assessmentId}/reports/{assessmentReportId}/url
		/// </summary>
		/// <param name="assessmentReportId"> The unique identifier for the assessment report. 
		/// Min length: 36
		/// Max length: 36
		// </param>
		/// <param name="assessmentId"> The unique identifier for the assessment. 
		/// Min length: 36
		/// Max length: 36
		// </param>
		/// <returns>Success</returns>
		public async Task<GetAssessmentReportUrlResponse> GetAssessmentReportUrlAsync(string assessmentReportId, string assessmentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "assessments/"+ (assessmentId==null? "" : System.Uri.EscapeDataString(assessmentId))+"/reports/"+ (assessmentReportId==null? "" : System.Uri.EscapeDataString(assessmentReportId))+"/url";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetAssessmentReportUrlResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of changelogs from Audit Manager.
		/// GetChangeLogs assessments/{assessmentId}/changelogs
		/// </summary>
		/// <param name="assessmentId">The unique identifier for the assessment. 
		/// Min length: 36
		/// Max length: 36
		// </param>
		/// <param name="controlSetId"> The unique identifier for the control set. 
		/// Min length: 1
		/// Max length: 300
		// </param>
		/// <param name="controlId"> The unique identifier for the control. 
		/// Min length: 36
		/// Max length: 36
		// </param>
		/// <param name="nextToken"> The pagination token that's used to fetch the next set of results. 
		/// Min length: 1
		/// Max length: 1000
		// </param>
		/// <param name="maxResults">Represents the maximum number of results on a page or for an API request call. 
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <returns>Success</returns>
		public async Task<GetChangeLogsResponse> GetChangeLogsAsync(string assessmentId, string controlSetId, string controlId, string nextToken, int maxResults, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "assessments/"+ (assessmentId==null? "" : System.Uri.EscapeDataString(assessmentId))+"/changelogs&controlSetId=" + (controlSetId==null? "" : System.Uri.EscapeDataString(controlSetId))+"&controlId=" + (controlId==null? "" : System.Uri.EscapeDataString(controlId))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetChangeLogsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of delegations from an audit owner to a delegate.
		/// GetDelegations delegations
		/// </summary>
		/// <param name="nextToken"> The pagination token that's used to fetch the next set of results. 
		/// Min length: 1
		/// Max length: 1000
		// </param>
		/// <param name="maxResults"> Represents the maximum number of results on a page or for an API request call. 
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <returns>Success</returns>
		public async Task<GetDelegationsResponse> GetDelegationsAsync(string nextToken, int maxResults, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "delegations?nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetDelegationsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about a specified evidence item.
		/// GetEvidence assessments/{assessmentId}/controlSets/{controlSetId}/evidenceFolders/{evidenceFolderId}/evidence/{evidenceId}
		/// </summary>
		/// <param name="assessmentId"> The unique identifier for the assessment. 
		/// Min length: 36
		/// Max length: 36
		// </param>
		/// <param name="controlSetId"> The unique identifier for the control set. 
		/// Min length: 1
		/// Max length: 300
		// </param>
		/// <param name="evidenceFolderId"> The unique identifier for the folder that the evidence is stored in. 
		/// Min length: 36
		/// Max length: 36
		// </param>
		/// <param name="evidenceId"> The unique identifier for the evidence. 
		/// Min length: 36
		/// Max length: 36
		// </param>
		/// <returns>Success</returns>
		public async Task<GetEvidenceResponse> GetEvidenceAsync(string assessmentId, string controlSetId, string evidenceFolderId, string evidenceId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "assessments/"+ (assessmentId==null? "" : System.Uri.EscapeDataString(assessmentId))+"/controlSets/"+ (controlSetId==null? "" : System.Uri.EscapeDataString(controlSetId))+"/evidenceFolders/"+ (evidenceFolderId==null? "" : System.Uri.EscapeDataString(evidenceFolderId))+"/evidence/"+ (evidenceId==null? "" : System.Uri.EscapeDataString(evidenceId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetEvidenceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets all evidence from a specified evidence folder in Audit Manager.
		/// GetEvidenceByEvidenceFolder assessments/{assessmentId}/controlSets/{controlSetId}/evidenceFolders/{evidenceFolderId}/evidence
		/// </summary>
		/// <param name="assessmentId"> The identifier for the assessment. 
		/// Min length: 36
		/// Max length: 36
		// </param>
		/// <param name="controlSetId"> The identifier for the control set. 
		/// Min length: 1
		/// Max length: 300
		// </param>
		/// <param name="evidenceFolderId"> The unique identifier for the folder that the evidence is stored in. 
		/// Min length: 36
		/// Max length: 36
		// </param>
		/// <param name="nextToken"> The pagination token that's used to fetch the next set of results. 
		/// Min length: 1
		/// Max length: 1000
		// </param>
		/// <param name="maxResults"> Represents the maximum number of results on a page or for an API request call. 
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <returns>Success</returns>
		public async Task<GetEvidenceByEvidenceFolderResponse> GetEvidenceByEvidenceFolderAsync(string assessmentId, string controlSetId, string evidenceFolderId, string nextToken, int maxResults, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "assessments/"+ (assessmentId==null? "" : System.Uri.EscapeDataString(assessmentId))+"/controlSets/"+ (controlSetId==null? "" : System.Uri.EscapeDataString(controlSetId))+"/evidenceFolders/"+ (evidenceFolderId==null? "" : System.Uri.EscapeDataString(evidenceFolderId))+"/evidence&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetEvidenceByEvidenceFolderResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a presigned Amazon S3 URL that can be used to upload a file as manual evidence. For instructions on how to use this operation, see <a href="https://docs.aws.amazon.com/audit-manager/latest/userguide/upload-evidence.html#how-to-upload-manual-evidence-files">Upload a file from your browser </a> in the <i>Audit Manager User Guide</i>.</p> <p>The following restrictions apply to this operation:</p> <ul> <li> <p>Maximum size of an individual evidence file: 100 MB</p> </li> <li> <p>Number of daily manual evidence uploads per control: 100</p> </li> <li> <p>Supported file formats: See <a href="https://docs.aws.amazon.com/audit-manager/latest/userguide/upload-evidence.html#supported-manual-evidence-files">Supported file types for manual evidence</a> in the <i>Audit Manager User Guide</i> </p> </li> </ul> <p>For more information about Audit Manager service restrictions, see <a href="https://docs.aws.amazon.com/audit-manager/latest/userguide/service-quotas.html">Quotas and restrictions for Audit Manager</a>.</p>
		/// GetEvidenceFileUploadUrl evidenceFileUploadUrl#fileName
		/// </summary>
		/// <param name="fileName">The file that you want to upload. For a list of supported file formats, see <a href="https://docs.aws.amazon.com/audit-manager/latest/userguide/upload-evidence.html#supported-manual-evidence-files">Supported file types for manual evidence</a> in the <i>Audit Manager User Guide</i>.
		/// Min length: 1
		/// Max length: 300
		// </param>
		/// <returns>Success</returns>
		public async Task<GetEvidenceFileUploadUrlResponse> GetEvidenceFileUploadUrlAsync(string fileName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "evidenceFileUploadUrl#fileName?fileName=" + (fileName==null? "" : System.Uri.EscapeDataString(fileName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetEvidenceFileUploadUrlResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets an evidence folder from a specified assessment in Audit Manager.
		/// GetEvidenceFolder assessments/{assessmentId}/controlSets/{controlSetId}/evidenceFolders/{evidenceFolderId}
		/// </summary>
		/// <param name="assessmentId"> The unique identifier for the assessment. 
		/// Min length: 36
		/// Max length: 36
		// </param>
		/// <param name="controlSetId"> The unique identifier for the control set. 
		/// Min length: 1
		/// Max length: 300
		// </param>
		/// <param name="evidenceFolderId"> The unique identifier for the folder that the evidence is stored in. 
		/// Min length: 36
		/// Max length: 36
		// </param>
		/// <returns>Success</returns>
		public async Task<GetEvidenceFolderResponse> GetEvidenceFolderAsync(string assessmentId, string controlSetId, string evidenceFolderId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "assessments/"+ (assessmentId==null? "" : System.Uri.EscapeDataString(assessmentId))+"/controlSets/"+ (controlSetId==null? "" : System.Uri.EscapeDataString(controlSetId))+"/evidenceFolders/"+ (evidenceFolderId==null? "" : System.Uri.EscapeDataString(evidenceFolderId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetEvidenceFolderResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the evidence folders from a specified assessment in Audit Manager.
		/// GetEvidenceFoldersByAssessment assessments/{assessmentId}/evidenceFolders
		/// </summary>
		/// <param name="assessmentId"> The unique identifier for the assessment. 
		/// Min length: 36
		/// Max length: 36
		// </param>
		/// <param name="nextToken"> The pagination token that's used to fetch the next set of results. 
		/// Min length: 1
		/// Max length: 1000
		// </param>
		/// <param name="maxResults"> Represents the maximum number of results on a page or for an API request call. 
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <returns>Success</returns>
		public async Task<GetEvidenceFoldersByAssessmentResponse> GetEvidenceFoldersByAssessmentAsync(string assessmentId, string nextToken, int maxResults, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "assessments/"+ (assessmentId==null? "" : System.Uri.EscapeDataString(assessmentId))+"/evidenceFolders&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetEvidenceFoldersByAssessmentResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of evidence folders that are associated with a specified control in an Audit Manager assessment.
		/// GetEvidenceFoldersByAssessmentControl assessments/{assessmentId}/evidenceFolders-by-assessment-control/{controlSetId}/{controlId}
		/// </summary>
		/// <param name="assessmentId"> The identifier for the assessment. 
		/// Min length: 36
		/// Max length: 36
		// </param>
		/// <param name="controlSetId"> The identifier for the control set. 
		/// Min length: 1
		/// Max length: 300
		// </param>
		/// <param name="controlId"> The identifier for the control. 
		/// Min length: 36
		/// Max length: 36
		// </param>
		/// <param name="nextToken"> The pagination token that's used to fetch the next set of results. 
		/// Min length: 1
		/// Max length: 1000
		// </param>
		/// <param name="maxResults"> Represents the maximum number of results on a page or for an API request call. 
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <returns>Success</returns>
		public async Task<GetEvidenceFoldersByAssessmentControlResponse> GetEvidenceFoldersByAssessmentControlAsync(string assessmentId, string controlSetId, string controlId, string nextToken, int maxResults, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "assessments/"+ (assessmentId==null? "" : System.Uri.EscapeDataString(assessmentId))+"/evidenceFolders-by-assessment-control/"+ (controlSetId==null? "" : System.Uri.EscapeDataString(controlSetId))+"/"+ (controlId==null? "" : System.Uri.EscapeDataString(controlId))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetEvidenceFoldersByAssessmentControlResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the latest analytics data for all your current active assessments.
		/// GetInsights insights
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetInsightsResponse> GetInsightsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "insights";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetInsightsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the latest analytics data for a specific active assessment.
		/// GetInsightsByAssessment insights/assessments/{assessmentId}
		/// </summary>
		/// <param name="assessmentId">The unique identifier for the assessment. 
		/// Min length: 36
		/// Max length: 36
		// </param>
		/// <returns>Success</returns>
		public async Task<GetInsightsByAssessmentResponse> GetInsightsByAssessmentAsync(string assessmentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "insights/assessments/"+ (assessmentId==null? "" : System.Uri.EscapeDataString(assessmentId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetInsightsByAssessmentResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the name of the delegated Amazon Web Services administrator account for a specified organization.
		/// GetOrganizationAdminAccount account/organizationAdminAccount
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetOrganizationAdminAccountResponse> GetOrganizationAdminAccountAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/organizationAdminAccount";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetOrganizationAdminAccountResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of all of the Amazon Web Services that you can choose to include in your assessment. When you <a href="https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_CreateAssessment.html">create an assessment</a>, specify which of these services you want to include to narrow the assessment's <a href="https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_Scope.html">scope</a>.
		/// GetServicesInScope services
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetServicesInScopeResponse> GetServicesInScopeAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "services";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetServicesInScopeResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the settings for a specified Amazon Web Services account.
		/// GetSettings settings/{attribute}
		/// </summary>
		/// <param name="attribute"> The list of setting attribute enum values. </param>
		/// <returns>Success</returns>
		public async Task<GetSettingsResponse> GetSettingsAsync(SettingAttribute attribute, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "settings/"+attribute;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetSettingsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Lists the latest analytics data for controls within a specific control domain and a specific active assessment.</p> <note> <p>Control insights are listed only if the control belongs to the control domain and assessment that was specified. Moreover, the control must have collected evidence on the <code>lastUpdated</code> date of <code>controlInsightsByAssessment</code>. If neither of these conditions are met, no data is listed for that control. </p> </note>
		/// ListAssessmentControlInsightsByControlDomain insights/controls-by-assessment#controlDomainId&assessmentId
		/// </summary>
		/// <param name="controlDomainId">The unique identifier for the control domain. 
		/// Min length: 36
		/// Max length: 36
		// </param>
		/// <param name="assessmentId">The unique identifier for the active assessment. 
		/// Min length: 36
		/// Max length: 36
		// </param>
		/// <param name="nextToken">The pagination token that's used to fetch the next set of results. 
		/// Min length: 1
		/// Max length: 1000
		// </param>
		/// <param name="maxResults">Represents the maximum number of results on a page or for an API request call. 
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <returns>Success</returns>
		public async Task<ListAssessmentControlInsightsByControlDomainResponse> ListAssessmentControlInsightsByControlDomainAsync(string controlDomainId, string assessmentId, string nextToken, int maxResults, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "insights/controls-by-assessment#controlDomainId&assessmentId?controlDomainId=" + (controlDomainId==null? "" : System.Uri.EscapeDataString(controlDomainId))+"&assessmentId=" + (assessmentId==null? "" : System.Uri.EscapeDataString(assessmentId))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListAssessmentControlInsightsByControlDomainResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of sent or received share requests for custom frameworks in Audit Manager.
		/// ListAssessmentFrameworkShareRequests assessmentFrameworkShareRequests#requestType
		/// </summary>
		/// <param name="requestType"> Specifies whether the share request is a sent request or a received request.</param>
		/// <param name="nextToken"> The pagination token that's used to fetch the next set of results. 
		/// Min length: 1
		/// Max length: 1000
		// </param>
		/// <param name="maxResults"> Represents the maximum number of results on a page or for an API request call. 
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <returns>Success</returns>
		public async Task<ListAssessmentFrameworkShareRequestsResponse> ListAssessmentFrameworkShareRequestsAsync(ShareRequestType requestType, string nextToken, int maxResults, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "assessmentFrameworkShareRequests#requestType?requestType=" + requestType+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListAssessmentFrameworkShareRequestsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of the frameworks that are available in the Audit Manager framework library.
		/// ListAssessmentFrameworks assessmentFrameworks#frameworkType
		/// </summary>
		/// <param name="frameworkType"> The type of framework, such as a standard framework or a custom framework. </param>
		/// <param name="nextToken"> The pagination token that's used to fetch the next set of results. 
		/// Min length: 1
		/// Max length: 1000
		// </param>
		/// <param name="maxResults"> Represents the maximum number of results on a page or for an API request call. 
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <returns>Success</returns>
		public async Task<ListAssessmentFrameworksResponse> ListAssessmentFrameworksAsync(FrameworkType frameworkType, string nextToken, int maxResults, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "assessmentFrameworks#frameworkType?frameworkType=" + frameworkType+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListAssessmentFrameworksResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of assessment reports created in Audit Manager.
		/// ListAssessmentReports assessmentReports
		/// </summary>
		/// <param name="nextToken"> The pagination token that's used to fetch the next set of results. 
		/// Min length: 1
		/// Max length: 1000
		// </param>
		/// <param name="maxResults"> Represents the maximum number of results on a page or for an API request call. 
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <returns>Success</returns>
		public async Task<ListAssessmentReportsResponse> ListAssessmentReportsAsync(string nextToken, int maxResults, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "assessmentReports?nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListAssessmentReportsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Lists the latest analytics data for control domains across all of your active assessments. </p> <note> <p>A control domain is listed only if at least one of the controls within that domain collected evidence on the <code>lastUpdated</code> date of <code>controlDomainInsights</code>. If this condition isn’t met, no data is listed for that control domain.</p> </note>
		/// ListControlDomainInsights insights/control-domains
		/// </summary>
		/// <param name="nextToken">The pagination token that's used to fetch the next set of results. 
		/// Min length: 1
		/// Max length: 1000
		// </param>
		/// <param name="maxResults">Represents the maximum number of results on a page or for an API request call. 
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <returns>Success</returns>
		public async Task<ListControlDomainInsightsResponse> ListControlDomainInsightsAsync(string nextToken, int maxResults, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "insights/control-domains?nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListControlDomainInsightsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Lists analytics data for control domains within a specified active assessment.</p> <note> <p>A control domain is listed only if at least one of the controls within that domain collected evidence on the <code>lastUpdated</code> date of <code>controlDomainInsights</code>. If this condition isn’t met, no data is listed for that domain.</p> </note>
		/// ListControlDomainInsightsByAssessment insights/control-domains-by-assessment#assessmentId
		/// </summary>
		/// <param name="assessmentId">The unique identifier for the active assessment. 
		/// Min length: 36
		/// Max length: 36
		// </param>
		/// <param name="nextToken">The pagination token that's used to fetch the next set of results. 
		/// Min length: 1
		/// Max length: 1000
		// </param>
		/// <param name="maxResults">Represents the maximum number of results on a page or for an API request call. 
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <returns>Success</returns>
		public async Task<ListControlDomainInsightsByAssessmentResponse> ListControlDomainInsightsByAssessmentAsync(string assessmentId, string nextToken, int maxResults, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "insights/control-domains-by-assessment#assessmentId?assessmentId=" + (assessmentId==null? "" : System.Uri.EscapeDataString(assessmentId))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListControlDomainInsightsByAssessmentResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Lists the latest analytics data for controls within a specific control domain across all active assessments.</p> <note> <p>Control insights are listed only if the control belongs to the control domain that was specified and the control collected evidence on the <code>lastUpdated</code> date of <code>controlInsightsMetadata</code>. If neither of these conditions are met, no data is listed for that control. </p> </note>
		/// ListControlInsightsByControlDomain insights/controls#controlDomainId
		/// </summary>
		/// <param name="controlDomainId">The unique identifier for the control domain. 
		/// Min length: 36
		/// Max length: 36
		// </param>
		/// <param name="nextToken">The pagination token that's used to fetch the next set of results. 
		/// Min length: 1
		/// Max length: 1000
		// </param>
		/// <param name="maxResults">Represents the maximum number of results on a page or for an API request call. 
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <returns>Success</returns>
		public async Task<ListControlInsightsByControlDomainResponse> ListControlInsightsByControlDomainAsync(string controlDomainId, string nextToken, int maxResults, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "insights/controls#controlDomainId?controlDomainId=" + (controlDomainId==null? "" : System.Uri.EscapeDataString(controlDomainId))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListControlInsightsByControlDomainResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of controls from Audit Manager.
		/// ListControls controls#controlType
		/// </summary>
		/// <param name="controlType"> The type of control, such as a standard control or a custom control. </param>
		/// <param name="nextToken"> The pagination token that's used to fetch the next set of results. 
		/// Min length: 1
		/// Max length: 1000
		// </param>
		/// <param name="maxResults"> Represents the maximum number of results on a page or for an API request call. 
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <returns>Success</returns>
		public async Task<ListControlsResponse> ListControlsAsync(FrameworkType controlType, string nextToken, int maxResults, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "controls#controlType?controlType=" + controlType+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListControlsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of keywords that are pre-mapped to the specified control data source.
		/// ListKeywordsForDataSource dataSourceKeywords#source
		/// </summary>
		/// <param name="source"> The control mapping data source that the keywords apply to. </param>
		/// <param name="nextToken"> The pagination token that's used to fetch the next set of results. 
		/// Min length: 1
		/// Max length: 1000
		// </param>
		/// <param name="maxResults"> Represents the maximum number of results on a page or for an API request call. 
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <returns>Success</returns>
		public async Task<ListKeywordsForDataSourceResponse> ListKeywordsForDataSourceAsync(SourceType source, string nextToken, int maxResults, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "dataSourceKeywords#source?source=" + source+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListKeywordsForDataSourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of all Audit Manager notifications.
		/// ListNotifications notifications
		/// </summary>
		/// <param name="nextToken"> The pagination token that's used to fetch the next set of results. 
		/// Min length: 1
		/// Max length: 1000
		// </param>
		/// <param name="maxResults"> Represents the maximum number of results on a page or for an API request call. 
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <returns>Success</returns>
		public async Task<ListNotificationsResponse> ListNotificationsAsync(string nextToken, int maxResults, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "notifications?nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListNotificationsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of tags for the specified resource in Audit Manager.
		/// ListTagsForResource tags/{resourceArn}
		/// </summary>
		/// <param name="resourceArn"> The Amazon Resource Name (ARN) of the resource. 
		/// Min length: 20
		/// Max length: 2048
		// </param>
		/// <returns>Success</returns>
		public async Task<ListTagsForResourceResponse> ListTagsForResourceAsync(string resourceArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+ (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListTagsForResourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Tags the specified resource in Audit Manager.
		/// TagResource tags/{resourceArn}
		/// </summary>
		/// <param name="resourceArn"> The Amazon Resource Name (ARN) of the resource. 
		/// Min length: 20
		/// Max length: 2048
		// </param>
		/// <returns>Success</returns>
		public async Task<TagResourceResponse> TagResourceAsync(string resourceArn, TagResourcePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+ (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TagResourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Enables Audit Manager for the specified Amazon Web Services account.
		/// RegisterAccount account/registerAccount
		/// </summary>
		/// <returns>Success</returns>
		public async Task<RegisterAccountResponse> RegisterAccountAsync(RegisterAccountPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/registerAccount";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RegisterAccountResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Enables an Amazon Web Services account within the organization as the delegated administrator for Audit Manager.
		/// RegisterOrganizationAdminAccount account/registerOrganizationAdminAccount
		/// </summary>
		/// <returns>Success</returns>
		public async Task<RegisterOrganizationAdminAccountResponse> RegisterOrganizationAdminAccountAsync(RegisterOrganizationAdminAccountPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/registerOrganizationAdminAccount";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RegisterOrganizationAdminAccountResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p> Creates a share request for a custom framework in Audit Manager. </p> <p>The share request specifies a recipient and notifies them that a custom framework is available. Recipients have 120 days to accept or decline the request. If no action is taken, the share request expires.</p> <p>When you create a share request, Audit Manager stores a snapshot of your custom framework in the US East (N. Virginia) Amazon Web Services Region. Audit Manager also stores a backup of the same snapshot in the US West (Oregon) Amazon Web Services Region.</p> <p>Audit Manager deletes the snapshot and the backup snapshot when one of the following events occurs:</p> <ul> <li> <p>The sender revokes the share request.</p> </li> <li> <p>The recipient declines the share request.</p> </li> <li> <p>The recipient encounters an error and doesn't successfully accept the share request.</p> </li> <li> <p>The share request expires before the recipient responds to the request.</p> </li> </ul> <p>When a sender <a href="https://docs.aws.amazon.com/audit-manager/latest/userguide/framework-sharing.html#framework-sharing-resend">resends a share request</a>, the snapshot is replaced with an updated version that corresponds with the latest version of the custom framework. </p> <p>When a recipient accepts a share request, the snapshot is replicated into their Amazon Web Services account under the Amazon Web Services Region that was specified in the share request. </p> <important> <p>When you invoke the <code>StartAssessmentFrameworkShare</code> API, you are about to share a custom framework with another Amazon Web Services account. You may not share a custom framework that is derived from a standard framework if the standard framework is designated as not eligible for sharing by Amazon Web Services, unless you have obtained permission to do so from the owner of the standard framework. To learn more about which standard frameworks are eligible for sharing, see <a href="https://docs.aws.amazon.com/audit-manager/latest/userguide/share-custom-framework-concepts-and-terminology.html#eligibility">Framework sharing eligibility</a> in the <i>Audit Manager User Guide</i>.</p> </important>
		/// StartAssessmentFrameworkShare assessmentFrameworks/{frameworkId}/shareRequests
		/// </summary>
		/// <param name="frameworkId"> The unique identifier for the custom framework to be shared. 
		/// Min length: 36
		/// Max length: 36
		// </param>
		/// <returns>Success</returns>
		public async Task<StartAssessmentFrameworkShareResponse> StartAssessmentFrameworkShareAsync(string frameworkId, StartAssessmentFrameworkSharePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "assessmentFrameworks/"+ (frameworkId==null? "" : System.Uri.EscapeDataString(frameworkId))+"/shareRequests";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StartAssessmentFrameworkShareResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Removes a tag from a resource in Audit Manager.
		/// UntagResource tags/{resourceArn}#tagKeys
		/// </summary>
		/// <param name="resourceArn"> The Amazon Resource Name (ARN) of the specified resource. 
		/// Min length: 20
		/// Max length: 2048
		// </param>
		/// <param name="tagKeys"> The name or key of the tag. 
		/// Minimum items: 1
		/// Maximum items: 50
		// </param>
		/// <returns>Success</returns>
		public async Task<UntagResourceResponse> UntagResourceAsync(string resourceArn, string[] tagKeys, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+ (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn))+"#tagKeys&"+string.Join("&", tagKeys.Select(z => $"tagKeys={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UntagResourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a control within an assessment in Audit Manager.
		/// UpdateAssessmentControl assessments/{assessmentId}/controlSets/{controlSetId}/controls/{controlId}
		/// </summary>
		/// <param name="assessmentId"> The unique identifier for the assessment. 
		/// Min length: 36
		/// Max length: 36
		// </param>
		/// <param name="controlSetId"> The unique identifier for the control set. 
		/// Min length: 1
		/// Max length: 300
		// </param>
		/// <param name="controlId"> The unique identifier for the control. 
		/// Min length: 36
		/// Max length: 36
		// </param>
		/// <returns>Success</returns>
		public async Task<UpdateAssessmentControlResponse> UpdateAssessmentControlAsync(string assessmentId, string controlSetId, string controlId, UpdateAssessmentControlPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "assessments/"+ (assessmentId==null? "" : System.Uri.EscapeDataString(assessmentId))+"/controlSets/"+ (controlSetId==null? "" : System.Uri.EscapeDataString(controlSetId))+"/controls/"+ (controlId==null? "" : System.Uri.EscapeDataString(controlId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateAssessmentControlResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates the status of a control set in an Audit Manager assessment.
		/// UpdateAssessmentControlSetStatus assessments/{assessmentId}/controlSets/{controlSetId}/status
		/// </summary>
		/// <param name="assessmentId"> The unique identifier for the assessment. 
		/// Min length: 36
		/// Max length: 36
		// </param>
		/// <param name="controlSetId"> The unique identifier for the control set. 
		/// Min length: 0
		/// Max length: 2048
		// </param>
		/// <returns>Success</returns>
		public async Task<UpdateAssessmentControlSetStatusResponse> UpdateAssessmentControlSetStatusAsync(string assessmentId, string controlSetId, UpdateAssessmentControlSetStatusPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "assessments/"+ (assessmentId==null? "" : System.Uri.EscapeDataString(assessmentId))+"/controlSets/"+ (controlSetId==null? "" : System.Uri.EscapeDataString(controlSetId))+"/status";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateAssessmentControlSetStatusResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates a share request for a custom framework in Audit Manager.
		/// UpdateAssessmentFrameworkShare assessmentFrameworkShareRequests/{requestId}
		/// </summary>
		/// <param name="requestId"> The unique identifier for the share request. 
		/// Min length: 36
		/// Max length: 36
		// </param>
		/// <returns>Success</returns>
		public async Task<UpdateAssessmentFrameworkShareResponse> UpdateAssessmentFrameworkShareAsync(string requestId, UpdateAssessmentFrameworkSharePutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "assessmentFrameworkShareRequests/"+ (requestId==null? "" : System.Uri.EscapeDataString(requestId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateAssessmentFrameworkShareResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates the status of an assessment in Audit Manager.
		/// UpdateAssessmentStatus assessments/{assessmentId}/status
		/// </summary>
		/// <param name="assessmentId"> The unique identifier for the assessment. 
		/// Min length: 36
		/// Max length: 36
		// </param>
		/// <returns>Success</returns>
		public async Task<UpdateAssessmentStatusResponse> UpdateAssessmentStatusAsync(string assessmentId, UpdateAssessmentStatusPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "assessments/"+ (assessmentId==null? "" : System.Uri.EscapeDataString(assessmentId))+"/status";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateAssessmentStatusResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates Audit Manager settings for the current account.
		/// UpdateSettings settings
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateSettingsResponse> UpdateSettingsAsync(UpdateSettingsPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "settings";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateSettingsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Validates the integrity of an assessment report in Audit Manager.
		/// ValidateAssessmentReportIntegrity assessmentReports/integrity
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ValidateAssessmentReportIntegrityResponse> ValidateAssessmentReportIntegrityAsync(ValidateAssessmentReportIntegrityPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "assessmentReports/integrity";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ValidateAssessmentReportIntegrityResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
	
	public class AssociateAssessmentReportEvidenceFolderPutBody
	{
		
		/// <summary>
		///  The identifier for the folder that the evidence is stored in. 
		/// Required
		/// Min length: 36
		/// Max length: 36
		/// Pattern: ^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="evidenceFolderId")]
		[System.ComponentModel.DataAnnotations.MinLength(36)]
		[System.ComponentModel.DataAnnotations.MaxLength(36)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$")]
		public string EvidenceFolderId { get; set; }
	}
	
	public class BatchAssociateAssessmentReportEvidencePutBody
	{
		
		/// <summary>
		///  The identifier for the folder that the evidence is stored in. 
		/// Required
		/// Min length: 36
		/// Max length: 36
		/// Pattern: ^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="evidenceFolderId")]
		[System.ComponentModel.DataAnnotations.MinLength(36)]
		[System.ComponentModel.DataAnnotations.MaxLength(36)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$")]
		public string EvidenceFolderId { get; set; }
		
		/// <summary>
		///  The list of evidence identifiers. 
		/// Required
		/// Minimum items: 0
		/// Maximum items: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="evidenceIds")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string[] EvidenceIds { get; set; }
	}
	
	public class BatchCreateDelegationByAssessmentPostBody
	{
		
		/// <summary>
		///  The API request to batch create delegations in Audit Manager. 
		/// Required
		/// Minimum items: 1
		/// Maximum items: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="createDelegationRequests")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public CreateDelegationRequest[] CreateDelegationRequests { get; set; }
	}
	
	public class BatchDeleteDelegationByAssessmentPutBody
	{
		
		/// <summary>
		///  The identifiers for the delegations. 
		/// Required
		/// Minimum items: 1
		/// Maximum items: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="delegationIds")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string[] DelegationIds { get; set; }
	}
	
	public class BatchDisassociateAssessmentReportEvidencePutBody
	{
		
		/// <summary>
		///  The identifier for the folder that the evidence is stored in. 
		/// Required
		/// Min length: 36
		/// Max length: 36
		/// Pattern: ^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="evidenceFolderId")]
		[System.ComponentModel.DataAnnotations.MinLength(36)]
		[System.ComponentModel.DataAnnotations.MaxLength(36)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$")]
		public string EvidenceFolderId { get; set; }
		
		/// <summary>
		///  The list of evidence identifiers. 
		/// Required
		/// Minimum items: 0
		/// Maximum items: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="evidenceIds")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string[] EvidenceIds { get; set; }
	}
	
	public class BatchImportEvidenceToAssessmentControlPostBody
	{
		
		/// <summary>
		///  The list of manual evidence objects. 
		/// Required
		/// Minimum items: 1
		/// Maximum items: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="manualEvidence")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public ManualEvidence[] ManualEvidence { get; set; }
	}
	
	public class CreateAssessmentPostBody
	{
		
		/// <summary>
		///  The name of the assessment to be created. 
		/// Required
		/// Min length: 1
		/// Max length: 300
		/// Pattern: ^[^\\]*$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(300)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[^\\]*$")]
		public string Name { get; set; }
		
		/// <summary>
		///  The optional description of the assessment to be created. 
		/// Max length: 1000
		/// Pattern: ^[\w\W\s\S]*$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[\w\W\s\S]*$")]
		public string Description { get; set; }
		
		/// <summary>
		///  The location where Audit Manager saves assessment reports for the given assessment. 
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="assessmentReportsDestination")]
		public CreateAssessmentPostBodyAssessmentReportsDestination AssessmentReportsDestination { get; set; }
		
		/// <summary>
		///  The wrapper that contains the Amazon Web Services accounts and services that are in scope for the assessment. 
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="scope")]
		public CreateAssessmentPostBodyScope Scope { get; set; }
		
		/// <summary>
		///  The list of roles for the assessment. 
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="roles")]
		public Role[] Roles { get; set; }
		
		/// <summary>
		///  The identifier for the framework that the assessment will be created from. 
		/// Required
		/// Min length: 36
		/// Max length: 36
		/// Pattern: ^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="frameworkId")]
		[System.ComponentModel.DataAnnotations.MinLength(36)]
		[System.ComponentModel.DataAnnotations.MaxLength(36)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$")]
		public string FrameworkId { get; set; }
		
		/// <summary>
		///  The tags that are associated with the assessment. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public class CreateAssessmentPostBodyAssessmentReportsDestination
	{
		
		[System.Runtime.Serialization.DataMember(Name="destinationType")]
		public AssessmentReportDestinationType DestinationType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="destination")]
		public string Destination { get; set; }
	}
	
	public class CreateAssessmentPostBodyScope
	{
		
		[System.Runtime.Serialization.DataMember(Name="awsAccounts")]
		public AWSAccount[] AwsAccounts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="awsServices")]
		public AWSService[] AwsServices { get; set; }
	}
	
	public class CreateAssessmentFrameworkPostBody
	{
		
		/// <summary>
		///  The name of the new custom framework. 
		/// Required
		/// Min length: 1
		/// Max length: 300
		/// Pattern: ^[^\\]*$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(300)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[^\\]*$")]
		public string Name { get; set; }
		
		/// <summary>
		///  An optional description for the new custom framework. 
		/// Min length: 1
		/// Max length: 1000
		/// Pattern: ^[\w\W\s\S]*$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[\w\W\s\S]*$")]
		public string Description { get; set; }
		
		/// <summary>
		///  The compliance type that the new custom framework supports, such as CIS or HIPAA. 
		/// Max length: 100
		/// Pattern: ^[\w\W\s\S]*$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="complianceType")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[\w\W\s\S]*$")]
		public string ComplianceType { get; set; }
		
		/// <summary>
		///  The control sets that are associated with the framework. 
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="controlSets")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public CreateAssessmentFrameworkControlSet[] ControlSets { get; set; }
		
		/// <summary>
		///  The tags that are associated with the framework. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public class CreateAssessmentReportPostBody
	{
		
		/// <summary>
		///  The name of the new assessment report. 
		/// Required
		/// Min length: 1
		/// Max length: 300
		/// Pattern: ^[a-zA-Z0-9-_\.]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(300)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9-_\.]+$")]
		public string Name { get; set; }
		
		/// <summary>
		///  The description of the assessment report. 
		/// Max length: 1000
		/// Pattern: ^[\w\W\s\S]*$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[\w\W\s\S]*$")]
		public string Description { get; set; }
		
		/// <summary>
		/// <p>A SQL statement that represents an evidence finder query.</p> <p>Provide this parameter when you want to generate an assessment report from the results of an evidence finder search query. When you use this parameter, Audit Manager generates a one-time report using only the evidence from the query output. This report does not include any assessment evidence that was manually <a href="https://docs.aws.amazon.com/audit-manager/latest/userguide/generate-assessment-report.html#generate-assessment-report-include-evidence">added to a report using the console</a>, or <a href="https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_BatchAssociateAssessmentReportEvidence.html">associated with a report using the API</a>. </p> <p>To use this parameter, the <a href="https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_EvidenceFinderEnablement.html#auditmanager-Type-EvidenceFinderEnablement-enablementStatus">enablementStatus</a> of evidence finder must be <code>ENABLED</code>. </p> <p> For examples and help resolving <code>queryStatement</code> validation exceptions, see <a href="https://docs.aws.amazon.com/audit-manager/latest/userguide/evidence-finder-issues.html#querystatement-exceptions">Troubleshooting evidence finder issues</a> in the <i>Audit Manager User Guide.</i> </p>
		/// Min length: 1
		/// Max length: 10000
		/// Pattern: \(\?s\).*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="queryStatement")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(10000)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"\(\?s\).*")]
		public string QueryStatement { get; set; }
	}
	
	public class CreateControlPostBody
	{
		
		/// <summary>
		///  The name of the control. 
		/// Required
		/// Min length: 1
		/// Max length: 300
		/// Pattern: ^[^\\]*$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(300)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[^\\]*$")]
		public string Name { get; set; }
		
		/// <summary>
		///  The description of the control. 
		/// Max length: 1000
		/// Pattern: ^[\w\W\s\S]*$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[\w\W\s\S]*$")]
		public string Description { get; set; }
		
		/// <summary>
		///  The steps to follow to determine if the control is satisfied. 
		/// Max length: 1000
		/// Pattern: ^[\w\W\s\S]*$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="testingInformation")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[\w\W\s\S]*$")]
		public string TestingInformation { get; set; }
		
		/// <summary>
		///  The title of the action plan for remediating the control. 
		/// Max length: 300
		/// Pattern: ^[\w\W\s\S]*$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="actionPlanTitle")]
		[System.ComponentModel.DataAnnotations.MaxLength(300)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[\w\W\s\S]*$")]
		public string ActionPlanTitle { get; set; }
		
		/// <summary>
		///  The recommended actions to carry out if the control isn't fulfilled. 
		/// Max length: 1000
		/// Pattern: ^[\w\W\s\S]*$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="actionPlanInstructions")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[\w\W\s\S]*$")]
		public string ActionPlanInstructions { get; set; }
		
		/// <summary>
		///  The data mapping sources for the control. 
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="controlMappingSources")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public CreateControlMappingSource[] ControlMappingSources { get; set; }
		
		/// <summary>
		///  The tags that are associated with the control. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public class UpdateAssessmentPutBody
	{
		
		/// <summary>
		///  The name of the assessment to be updated. 
		/// Min length: 1
		/// Max length: 300
		/// Pattern: ^[^\\]*$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="assessmentName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(300)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[^\\]*$")]
		public string AssessmentName { get; set; }
		
		/// <summary>
		///  The description of the assessment. 
		/// Max length: 1000
		/// Pattern: ^[\w\W\s\S]*$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="assessmentDescription")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[\w\W\s\S]*$")]
		public string AssessmentDescription { get; set; }
		
		/// <summary>
		///  The wrapper that contains the Amazon Web Services accounts and services that are in scope for the assessment. 
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="scope")]
		public UpdateAssessmentPutBodyScope Scope { get; set; }
		
		/// <summary>
		///  The location where Audit Manager saves assessment reports for the given assessment. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="assessmentReportsDestination")]
		public UpdateAssessmentPutBodyAssessmentReportsDestination AssessmentReportsDestination { get; set; }
		
		/// <summary>
		///  The list of roles for the assessment. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="roles")]
		public Role[] Roles { get; set; }
	}
	
	public class UpdateAssessmentPutBodyScope
	{
		
		[System.Runtime.Serialization.DataMember(Name="awsAccounts")]
		public AWSAccount[] AwsAccounts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="awsServices")]
		public AWSService[] AwsServices { get; set; }
	}
	
	public class UpdateAssessmentPutBodyAssessmentReportsDestination
	{
		
		[System.Runtime.Serialization.DataMember(Name="destinationType")]
		public AssessmentReportDestinationType DestinationType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="destination")]
		public string Destination { get; set; }
	}
	
	public class UpdateAssessmentFrameworkPutBody
	{
		
		/// <summary>
		///  The name of the framework to be updated. 
		/// Required
		/// Min length: 1
		/// Max length: 300
		/// Pattern: ^[^\\]*$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(300)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[^\\]*$")]
		public string Name { get; set; }
		
		/// <summary>
		///  The description of the updated framework. 
		/// Min length: 1
		/// Max length: 1000
		/// Pattern: ^[\w\W\s\S]*$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[\w\W\s\S]*$")]
		public string Description { get; set; }
		
		/// <summary>
		///  The compliance type that the new custom framework supports, such as CIS or HIPAA. 
		/// Max length: 100
		/// Pattern: ^[\w\W\s\S]*$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="complianceType")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[\w\W\s\S]*$")]
		public string ComplianceType { get; set; }
		
		/// <summary>
		///  The control sets that are associated with the framework. 
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="controlSets")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public UpdateAssessmentFrameworkControlSet[] ControlSets { get; set; }
	}
	
	public class UpdateControlPutBody
	{
		
		/// <summary>
		///  The name of the updated control. 
		/// Required
		/// Min length: 1
		/// Max length: 300
		/// Pattern: ^[^\\]*$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(300)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[^\\]*$")]
		public string Name { get; set; }
		
		/// <summary>
		///  The optional description of the control. 
		/// Max length: 1000
		/// Pattern: ^[\w\W\s\S]*$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[\w\W\s\S]*$")]
		public string Description { get; set; }
		
		/// <summary>
		///  The steps that you should follow to determine if the control is met. 
		/// Max length: 1000
		/// Pattern: ^[\w\W\s\S]*$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="testingInformation")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[\w\W\s\S]*$")]
		public string TestingInformation { get; set; }
		
		/// <summary>
		///  The title of the action plan for remediating the control. 
		/// Max length: 300
		/// Pattern: ^[\w\W\s\S]*$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="actionPlanTitle")]
		[System.ComponentModel.DataAnnotations.MaxLength(300)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[\w\W\s\S]*$")]
		public string ActionPlanTitle { get; set; }
		
		/// <summary>
		///  The recommended actions to carry out if the control isn't fulfilled. 
		/// Max length: 1000
		/// Pattern: ^[\w\W\s\S]*$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="actionPlanInstructions")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[\w\W\s\S]*$")]
		public string ActionPlanInstructions { get; set; }
		
		/// <summary>
		///  The data mapping sources for the control. 
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="controlMappingSources")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public ControlMappingSource[] ControlMappingSources { get; set; }
	}
	
	public class DeregisterOrganizationAdminAccountPostBody
	{
		
		/// <summary>
		///  The identifier for the administrator account. 
		/// Min length: 12
		/// Max length: 12
		/// Pattern: ^[0-9]{12}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adminAccountId")]
		[System.ComponentModel.DataAnnotations.MinLength(12)]
		[System.ComponentModel.DataAnnotations.MaxLength(12)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[0-9]{12}$")]
		public string AdminAccountId { get; set; }
	}
	
	public class DisassociateAssessmentReportEvidenceFolderPutBody
	{
		
		/// <summary>
		///  The unique identifier for the folder that the evidence is stored in. 
		/// Required
		/// Min length: 36
		/// Max length: 36
		/// Pattern: ^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="evidenceFolderId")]
		[System.ComponentModel.DataAnnotations.MinLength(36)]
		[System.ComponentModel.DataAnnotations.MaxLength(36)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$")]
		public string EvidenceFolderId { get; set; }
	}
	
	public class TagResourcePostBody
	{
		
		/// <summary>
		///  The tags that are associated with the resource. 
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public class RegisterAccountPostBody
	{
		
		/// <summary>
		///  The KMS key details. 
		/// Min length: 7
		/// Max length: 2048
		/// Pattern: ^arn:.*:kms:.*|DEFAULT
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kmsKey")]
		[System.ComponentModel.DataAnnotations.MinLength(7)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^arn:.*:kms:.*|DEFAULT")]
		public string KmsKey { get; set; }
		
		/// <summary>
		///  The delegated administrator account for Audit Manager. 
		/// Min length: 12
		/// Max length: 12
		/// Pattern: ^[0-9]{12}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="delegatedAdminAccount")]
		[System.ComponentModel.DataAnnotations.MinLength(12)]
		[System.ComponentModel.DataAnnotations.MaxLength(12)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[0-9]{12}$")]
		public string DelegatedAdminAccount { get; set; }
	}
	
	public class RegisterOrganizationAdminAccountPostBody
	{
		
		/// <summary>
		///  The identifier for the delegated administrator account. 
		/// Required
		/// Min length: 12
		/// Max length: 12
		/// Pattern: ^[0-9]{12}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="adminAccountId")]
		[System.ComponentModel.DataAnnotations.MinLength(12)]
		[System.ComponentModel.DataAnnotations.MaxLength(12)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[0-9]{12}$")]
		public string AdminAccountId { get; set; }
	}
	
	public class StartAssessmentFrameworkSharePostBody
	{
		
		/// <summary>
		///  The Amazon Web Services account of the recipient. 
		/// Required
		/// Min length: 12
		/// Max length: 12
		/// Pattern: ^[0-9]{12}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="destinationAccount")]
		[System.ComponentModel.DataAnnotations.MinLength(12)]
		[System.ComponentModel.DataAnnotations.MaxLength(12)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[0-9]{12}$")]
		public string DestinationAccount { get; set; }
		
		/// <summary>
		///  The Amazon Web Services Region of the recipient. 
		/// Required
		/// Pattern: ^[a-z]{2}-[a-z]+-[0-9]{1}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="destinationRegion")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-z]{2}-[a-z]+-[0-9]{1}$")]
		public string DestinationRegion { get; set; }
		
		/// <summary>
		///  An optional comment from the sender about the share request. 
		/// Max length: 500
		/// Pattern: ^[\w\W\s\S]*$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="comment")]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[\w\W\s\S]*$")]
		public string Comment { get; set; }
	}
	
	public class UpdateAssessmentControlPutBody
	{
		
		/// <summary>
		///  The status of the control. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="controlStatus")]
		public ControlStatus ControlStatus { get; set; }
		
		/// <summary>
		///  The comment body text for the control. 
		/// Max length: 500
		/// Pattern: ^[\w\W\s\S]*$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="commentBody")]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[\w\W\s\S]*$")]
		public string CommentBody { get; set; }
	}
	
	public class UpdateAssessmentControlSetStatusPutBody
	{
		
		/// <summary>
		///  The status of the control set that's being updated. 
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ControlSetStatus Status { get; set; }
		
		/// <summary>
		///  The comment that's related to the status update. 
		/// Required
		/// Max length: 350
		/// Pattern: ^[\w\W\s\S]*$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="comment")]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[\w\W\s\S]*$")]
		public string Comment { get; set; }
	}
	
	public class UpdateAssessmentFrameworkSharePutBody
	{
		
		/// <summary>
		/// Specifies whether the share request is a sent request or a received request.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="requestType")]
		public ShareRequestType RequestType { get; set; }
		
		/// <summary>
		/// Specifies the update action for the share request.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="action")]
		public ShareRequestAction Action { get; set; }
	}
	
	public class UpdateAssessmentStatusPutBody
	{
		
		/// <summary>
		///  The current status of the assessment. 
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public AssessmentStatus Status { get; set; }
	}
	
	public class UpdateSettingsPutBody
	{
		
		/// <summary>
		///  The Amazon Simple Notification Service (Amazon SNS) topic that Audit Manager sends notifications to. 
		/// Min length: 4
		/// Max length: 2048
		/// Pattern: ^arn:.*:sns:.*|NONE
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="snsTopic")]
		[System.ComponentModel.DataAnnotations.MinLength(4)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^arn:.*:sns:.*|NONE")]
		public string SnsTopic { get; set; }
		
		/// <summary>
		///  The location where Audit Manager saves assessment reports for the given assessment. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultAssessmentReportsDestination")]
		public UpdateSettingsPutBodyDefaultAssessmentReportsDestination DefaultAssessmentReportsDestination { get; set; }
		
		/// <summary>
		///  A list of the default audit owners. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultProcessOwners")]
		public Role[] DefaultProcessOwners { get; set; }
		
		/// <summary>
		///  The KMS key details. 
		/// Min length: 7
		/// Max length: 2048
		/// Pattern: ^arn:.*:kms:.*|DEFAULT
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kmsKey")]
		[System.ComponentModel.DataAnnotations.MinLength(7)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^arn:.*:kms:.*|DEFAULT")]
		public string KmsKey { get; set; }
		
		/// <summary>
		/// <p>Specifies whether the evidence finder feature is enabled. Change this attribute to enable or disable evidence finder.</p> <important> <p>When you use this attribute to disable evidence finder, Audit Manager deletes the event data store that’s used to query your evidence data. As a result, you can’t re-enable evidence finder and use the feature again. Your only alternative is to <a href="https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_DeregisterAccount.html">deregister</a> and then <a href="https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_RegisterAccount.html">re-register</a> Audit Manager. </p> </important>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="evidenceFinderEnabled")]
		public System.Nullable<System.Boolean> EvidenceFinderEnabled { get; set; }
		
		/// <summary>
		/// <p>The deregistration policy for the data that's stored in Audit Manager. You can use this attribute to determine how your data is handled when you <a href="https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_DeregisterAccount.html">deregister Audit Manager</a>.</p> <p>By default, Audit Manager retains evidence data for two years from the time of its creation. Other Audit Manager resources (including assessments, custom controls, and custom frameworks) remain in Audit Manager indefinitely, and are available if you <a href="https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_RegisterAccount.html">re-register Audit Manager</a> in the future. For more information about data retention, see <a href="https://docs.aws.amazon.com/audit-manager/latest/userguide/data-protection.html">Data Protection</a> in the <i>Audit Manager User Guide</i>.</p> <important> <p>If you choose to delete all data, this action permanently deletes all evidence data in your account within seven days. It also deletes all of the Audit Manager resources that you created, including assessments, custom controls, and custom frameworks. Your data will not be available if you re-register Audit Manager in the future.</p> </important>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deregistrationPolicy")]
		public UpdateSettingsPutBodyDeregistrationPolicy DeregistrationPolicy { get; set; }
		
		/// <summary>
		/// The default s3 bucket where Audit Manager saves the files that you export from evidence finder.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultExportDestination")]
		public UpdateSettingsPutBodyDefaultExportDestination DefaultExportDestination { get; set; }
	}
	
	public class UpdateSettingsPutBodyDefaultAssessmentReportsDestination
	{
		
		[System.Runtime.Serialization.DataMember(Name="destinationType")]
		public AssessmentReportDestinationType DestinationType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="destination")]
		public string Destination { get; set; }
	}
	
	public class UpdateSettingsPutBodyDeregistrationPolicy
	{
		
		[System.Runtime.Serialization.DataMember(Name="deleteResources")]
		public DeleteResources DeleteResources { get; set; }
	}
	
	public class UpdateSettingsPutBodyDefaultExportDestination
	{
		
		[System.Runtime.Serialization.DataMember(Name="destinationType")]
		public AssessmentReportDestinationType DestinationType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="destination")]
		public string Destination { get; set; }
	}
	
	public class ValidateAssessmentReportIntegrityPostBody
	{
		
		/// <summary>
		///  The relative path of the Amazon S3 bucket that the assessment report is stored in. 
		/// Required
		/// Min length: 1
		/// Max length: 1024
		/// Pattern: ^(S|s)3:\/\/[a-zA-Z0-9\-\.\(\)\'\*\_\!\/]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="s3RelativePath")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(S|s)3:\/\/[a-zA-Z0-9\-\.\(\)\'\*\_\!\/]+$")]
		public string S3RelativePath { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
