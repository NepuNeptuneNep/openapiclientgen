//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum Task_enum_status
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		reserved = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		assigned = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		canceled = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		completed = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		wrapping = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum Task_queue_enum_task_order
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FIFO = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LIFO = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum Task_reservation_enum_call_status
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		initiated = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ringing = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		answered = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		completed = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum Task_reservation_enum_conference_event
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		start = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		end = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		join = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		leave = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		mute = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		hold = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		speaker = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum Task_reservation_enum_status
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		accepted = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		rejected = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		timeout = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		canceled = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		rescinded = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		wrapping = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		completed = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum Task_reservation_enum_supervisor_mode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		monitor = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		whisper = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		barge = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Taskrouterv1workspace
	{
		
		/// <summary>
		/// The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Workspace resource.
		/// Min length: 34
		/// Max length: 34
		/// Pattern: ^AC[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="account_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^AC[0-9a-fA-F]{32}$")]
		public string Account_sid { get; set; }
		
		/// <summary>
		/// The date and time in GMT when the resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date_created")]
		public System.Nullable<System.DateTimeOffset> Date_created { get; set; }
		
		/// <summary>
		/// The date and time in GMT when the resource was last updated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date_updated")]
		public System.Nullable<System.DateTimeOffset> Date_updated { get; set; }
		
		/// <summary>
		/// The name of the default activity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="default_activity_name")]
		public string Default_activity_name { get; set; }
		
		/// <summary>
		/// The SID of the Activity that will be used when new Workers are created in the Workspace.
		/// Min length: 34
		/// Max length: 34
		/// Pattern: ^WA[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="default_activity_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^WA[0-9a-fA-F]{32}$")]
		public string Default_activity_sid { get; set; }
		
		/// <summary>
		/// The URL we call when an event occurs. If provided, the Workspace will publish events to this URL, for example, to collect data for reporting. See [Workspace Events](https://www.twilio.com/docs/taskrouter/api/event) for more information. This parameter supports Twilio's [Webhooks (HTTP callbacks) Connection Overrides](https://www.twilio.com/docs/usage/webhooks/webhooks-connection-overrides).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="event_callback_url")]
		public string Event_callback_url { get; set; }
		
		/// <summary>
		/// The list of Workspace events for which to call `event_callback_url`. For example, if `EventsFilter=task.created, task.canceled, worker.activity.update`, then TaskRouter will call event_callback_url only when a task is created, canceled, or a Worker activity is updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="events_filter")]
		public string Events_filter { get; set; }
		
		/// <summary>
		/// The string that you assigned to describe the Workspace resource. For example `Customer Support` or `2014 Election Campaign`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="friendly_name")]
		public string Friendly_name { get; set; }
		
		/// <summary>
		/// The URLs of related resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="links")]
		public string Links { get; set; }
		
		/// <summary>
		/// Whether multi-tasking is enabled. The default is `true`, which enables multi-tasking. Multi-tasking allows Workers to handle multiple Tasks simultaneously. When enabled (`true`), each Worker can receive parallel reservations up to the per-channel maximums defined in the Workers section. In single-tasking each Worker would only receive a new reservation when the previous task is completed. Learn more at [Multitasking](https://www.twilio.com/docs/taskrouter/multitasking).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="multi_task_enabled")]
		public System.Nullable<System.Boolean> Multi_task_enabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="prioritize_queue_order")]
		public Task_queue_enum_task_order Prioritize_queue_order { get; set; }
		
		/// <summary>
		/// The unique string that we created to identify the Workspace resource.
		/// Min length: 34
		/// Max length: 34
		/// Pattern: ^WS[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^WS[0-9a-fA-F]{32}$")]
		public string Sid { get; set; }
		
		/// <summary>
		/// The name of the timeout activity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeout_activity_name")]
		public string Timeout_activity_name { get; set; }
		
		/// <summary>
		/// The SID of the Activity that will be assigned to a Worker when a Task reservation times out without a response.
		/// Min length: 34
		/// Max length: 34
		/// Pattern: ^WA[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeout_activity_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^WA[0-9a-fA-F]{32}$")]
		public string Timeout_activity_sid { get; set; }
		
		/// <summary>
		/// The absolute URL of the Workspace resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Taskrouterv1workspaceactivity
	{
		
		/// <summary>
		/// The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Activity resource.
		/// Min length: 34
		/// Max length: 34
		/// Pattern: ^AC[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="account_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^AC[0-9a-fA-F]{32}$")]
		public string Account_sid { get; set; }
		
		/// <summary>
		/// Whether the Worker is eligible to receive a Task when it occupies the Activity. A value of `true`, `1`, or `yes` indicates the Activity is available. All other values indicate that it is not. The value cannot be changed after the Activity is created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="available")]
		public System.Nullable<System.Boolean> Available { get; set; }
		
		/// <summary>
		/// The date and time in GMT when the resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date_created")]
		public System.Nullable<System.DateTimeOffset> Date_created { get; set; }
		
		/// <summary>
		/// The date and time in GMT when the resource was last updated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date_updated")]
		public System.Nullable<System.DateTimeOffset> Date_updated { get; set; }
		
		/// <summary>
		/// The string that you assigned to describe the Activity resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="friendly_name")]
		public string Friendly_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public string Links { get; set; }
		
		/// <summary>
		/// The unique string that we created to identify the Activity resource.
		/// Min length: 34
		/// Max length: 34
		/// Pattern: ^WA[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^WA[0-9a-fA-F]{32}$")]
		public string Sid { get; set; }
		
		/// <summary>
		/// The absolute URL of the Activity resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		/// <summary>
		/// The SID of the Workspace that contains the Activity.
		/// Min length: 34
		/// Max length: 34
		/// Pattern: ^WS[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workspace_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^WS[0-9a-fA-F]{32}$")]
		public string Workspace_sid { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Taskrouterv1workspaceevent
	{
		
		/// <summary>
		/// The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Event resource.
		/// Min length: 34
		/// Max length: 34
		/// Pattern: ^AC[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="account_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^AC[0-9a-fA-F]{32}$")]
		public string Account_sid { get; set; }
		
		/// <summary>
		/// The SID of the resource that triggered the event.
		/// Min length: 34
		/// Max length: 34
		/// Pattern: ^[a-zA-Z]{2}[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="actor_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z]{2}[0-9a-fA-F]{32}$")]
		public string Actor_sid { get; set; }
		
		/// <summary>
		/// The type of resource that triggered the event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="actor_type")]
		public string Actor_type { get; set; }
		
		/// <summary>
		/// The absolute URL of the resource that triggered the event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="actor_url")]
		public string Actor_url { get; set; }
		
		/// <summary>
		/// A description of the event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Data about the event. For more information, see [Event types](https://www.twilio.com/docs/taskrouter/api/event#event-types).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="event_data")]
		public object Event_data { get; set; }
		
		/// <summary>
		/// The time the event was sent, specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="event_date")]
		public System.Nullable<System.DateTimeOffset> Event_date { get; set; }
		
		/// <summary>
		/// The time the event was sent in milliseconds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="event_date_ms")]
		public System.Nullable<System.Int64> Event_date_ms { get; set; }
		
		/// <summary>
		/// The identifier for the event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="event_type")]
		public string Event_type { get; set; }
		
		/// <summary>
		/// The SID of the object the event is most relevant to, such as a TaskSid, ReservationSid, or a  WorkerSid.
		/// Min length: 34
		/// Max length: 34
		/// Pattern: ^[a-zA-Z]{2}[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resource_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z]{2}[0-9a-fA-F]{32}$")]
		public string Resource_sid { get; set; }
		
		/// <summary>
		/// The type of object the event is most relevant to, such as a Task, Reservation, or a Worker).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resource_type")]
		public string Resource_type { get; set; }
		
		/// <summary>
		/// The URL of the resource the event is most relevant to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resource_url")]
		public string Resource_url { get; set; }
		
		/// <summary>
		/// The unique string that we created to identify the Event resource.
		/// Min length: 34
		/// Max length: 34
		/// Pattern: ^EV[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^EV[0-9a-fA-F]{32}$")]
		public string Sid { get; set; }
		
		/// <summary>
		/// Where the Event originated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string Source { get; set; }
		
		/// <summary>
		/// The IP from which the Event originated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source_ip_address")]
		public string Source_ip_address { get; set; }
		
		/// <summary>
		/// The absolute URL of the Event resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		/// <summary>
		/// The SID of the Workspace that contains the Event.
		/// Min length: 34
		/// Max length: 34
		/// Pattern: ^WS[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workspace_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^WS[0-9a-fA-F]{32}$")]
		public string Workspace_sid { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Taskrouterv1workspacetask
	{
		
		/// <summary>
		/// The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Task resource.
		/// Min length: 34
		/// Max length: 34
		/// Pattern: ^AC[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="account_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^AC[0-9a-fA-F]{32}$")]
		public string Account_sid { get; set; }
		
		/// <summary>
		/// An object that contains the [Add-on](https://www.twilio.com/docs/add-ons) data for all installed Add-ons.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addons")]
		public string Addons { get; set; }
		
		/// <summary>
		/// The number of seconds since the Task was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="age")]
		public System.Nullable<System.Int32> Age { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="assignment_status")]
		public Task_enum_status Assignment_status { get; set; }
		
		/// <summary>
		/// The JSON string with custom attributes of the work. **Note** If this property has been assigned a value, it will only be displayed in FETCH action that returns a single resource. Otherwise, it will be null.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public string Attributes { get; set; }
		
		/// <summary>
		/// The date and time in GMT when the resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date_created")]
		public System.Nullable<System.DateTimeOffset> Date_created { get; set; }
		
		/// <summary>
		/// The date and time in GMT when the resource was last updated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date_updated")]
		public System.Nullable<System.DateTimeOffset> Date_updated { get; set; }
		
		/// <summary>
		/// The URLs of related resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="links")]
		public string Links { get; set; }
		
		/// <summary>
		/// The current priority score of the Task as assigned to a Worker by the workflow. Tasks with higher priority values will be assigned before Tasks with lower values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priority")]
		public System.Nullable<System.Int32> Priority { get; set; }
		
		/// <summary>
		/// The reason the Task was canceled or completed, if applicable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		/// <summary>
		/// The unique string that we created to identify the Task resource.
		/// Min length: 34
		/// Max length: 34
		/// Pattern: ^WT[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^WT[0-9a-fA-F]{32}$")]
		public string Sid { get; set; }
		
		/// <summary>
		/// The SID of the TaskChannel.
		/// Min length: 34
		/// Max length: 34
		/// Pattern: ^TC[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="task_channel_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^TC[0-9a-fA-F]{32}$")]
		public string Task_channel_sid { get; set; }
		
		/// <summary>
		/// The unique name of the TaskChannel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="task_channel_unique_name")]
		public string Task_channel_unique_name { get; set; }
		
		/// <summary>
		/// The date and time in GMT when the Task entered the TaskQueue, specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="task_queue_entered_date")]
		public System.Nullable<System.DateTimeOffset> Task_queue_entered_date { get; set; }
		
		/// <summary>
		/// The friendly name of the TaskQueue.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="task_queue_friendly_name")]
		public string Task_queue_friendly_name { get; set; }
		
		/// <summary>
		/// The SID of the TaskQueue.
		/// Min length: 34
		/// Max length: 34
		/// Pattern: ^WQ[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="task_queue_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^WQ[0-9a-fA-F]{32}$")]
		public string Task_queue_sid { get; set; }
		
		/// <summary>
		/// The amount of time in seconds that the Task can live before being assigned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeout")]
		public System.Nullable<System.Int32> Timeout { get; set; }
		
		/// <summary>
		/// The absolute URL of the Task resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		/// <summary>
		/// The date and time in GMT indicating the ordering for routing of the Task specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="virtual_start_time")]
		public System.Nullable<System.DateTimeOffset> Virtual_start_time { get; set; }
		
		/// <summary>
		/// The friendly name of the Workflow that is controlling the Task.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workflow_friendly_name")]
		public string Workflow_friendly_name { get; set; }
		
		/// <summary>
		/// The SID of the Workflow that is controlling the Task.
		/// Min length: 34
		/// Max length: 34
		/// Pattern: ^WW[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workflow_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^WW[0-9a-fA-F]{32}$")]
		public string Workflow_sid { get; set; }
		
		/// <summary>
		/// The SID of the Workspace that contains the Task.
		/// Min length: 34
		/// Max length: 34
		/// Pattern: ^WS[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workspace_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^WS[0-9a-fA-F]{32}$")]
		public string Workspace_sid { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Taskrouterv1workspacetasktask_reservation
	{
		
		/// <summary>
		/// The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the TaskReservation resource.
		/// Min length: 34
		/// Max length: 34
		/// Pattern: ^AC[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="account_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^AC[0-9a-fA-F]{32}$")]
		public string Account_sid { get; set; }
		
		/// <summary>
		/// The date and time in GMT when the resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date_created")]
		public System.Nullable<System.DateTimeOffset> Date_created { get; set; }
		
		/// <summary>
		/// The date and time in GMT when the resource was last updated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date_updated")]
		public System.Nullable<System.DateTimeOffset> Date_updated { get; set; }
		
		/// <summary>
		/// The URLs of related resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="links")]
		public string Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reservation_status")]
		public Task_reservation_enum_status Reservation_status { get; set; }
		
		/// <summary>
		/// The unique string that we created to identify the TaskReservation resource.
		/// Min length: 34
		/// Max length: 34
		/// Pattern: ^WR[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^WR[0-9a-fA-F]{32}$")]
		public string Sid { get; set; }
		
		/// <summary>
		/// The SID of the reserved Task resource.
		/// Min length: 34
		/// Max length: 34
		/// Pattern: ^WT[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="task_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^WT[0-9a-fA-F]{32}$")]
		public string Task_sid { get; set; }
		
		/// <summary>
		/// The absolute URL of the TaskReservation reservation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		/// <summary>
		/// The `friendly_name` of the Worker that is reserved.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="worker_name")]
		public string Worker_name { get; set; }
		
		/// <summary>
		/// The SID of the reserved Worker resource.
		/// Min length: 34
		/// Max length: 34
		/// Pattern: ^WK[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="worker_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^WK[0-9a-fA-F]{32}$")]
		public string Worker_sid { get; set; }
		
		/// <summary>
		/// The SID of the Workspace that this task is contained within.
		/// Min length: 34
		/// Max length: 34
		/// Pattern: ^WS[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workspace_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^WS[0-9a-fA-F]{32}$")]
		public string Workspace_sid { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Taskrouterv1workspacetask_channel
	{
		
		/// <summary>
		/// The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Task Channel resource.
		/// Min length: 34
		/// Max length: 34
		/// Pattern: ^AC[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="account_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^AC[0-9a-fA-F]{32}$")]
		public string Account_sid { get; set; }
		
		/// <summary>
		/// Whether the Task Channel will prioritize Workers that have been idle. When `true`, Workers that have been idle the longest are prioritized.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channel_optimized_routing")]
		public System.Nullable<System.Boolean> Channel_optimized_routing { get; set; }
		
		/// <summary>
		/// The date and time in GMT when the resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date_created")]
		public System.Nullable<System.DateTimeOffset> Date_created { get; set; }
		
		/// <summary>
		/// The date and time in GMT when the resource was last updated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date_updated")]
		public System.Nullable<System.DateTimeOffset> Date_updated { get; set; }
		
		/// <summary>
		/// The string that you assigned to describe the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="friendly_name")]
		public string Friendly_name { get; set; }
		
		/// <summary>
		/// The URLs of related resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="links")]
		public string Links { get; set; }
		
		/// <summary>
		/// The unique string that we created to identify the Task Channel resource.
		/// Min length: 34
		/// Max length: 34
		/// Pattern: ^TC[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^TC[0-9a-fA-F]{32}$")]
		public string Sid { get; set; }
		
		/// <summary>
		/// An application-defined string that uniquely identifies the Task Channel, such as `voice` or `sms`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unique_name")]
		public string Unique_name { get; set; }
		
		/// <summary>
		/// The absolute URL of the Task Channel resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		/// <summary>
		/// The SID of the Workspace that contains the Task Channel.
		/// Min length: 34
		/// Max length: 34
		/// Pattern: ^WS[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workspace_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^WS[0-9a-fA-F]{32}$")]
		public string Workspace_sid { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Taskrouterv1workspacetask_queue
	{
		
		/// <summary>
		/// The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the TaskQueue resource.
		/// Min length: 34
		/// Max length: 34
		/// Pattern: ^AC[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="account_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^AC[0-9a-fA-F]{32}$")]
		public string Account_sid { get; set; }
		
		/// <summary>
		/// The name of the Activity to assign Workers when a task is assigned for them.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="assignment_activity_name")]
		public string Assignment_activity_name { get; set; }
		
		/// <summary>
		/// The SID of the Activity to assign Workers when a task is assigned for them.
		/// Min length: 34
		/// Max length: 34
		/// Pattern: ^WA[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="assignment_activity_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^WA[0-9a-fA-F]{32}$")]
		public string Assignment_activity_sid { get; set; }
		
		/// <summary>
		/// The date and time in GMT when the resource was created specified in [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt) format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date_created")]
		public System.Nullable<System.DateTimeOffset> Date_created { get; set; }
		
		/// <summary>
		/// The date and time in GMT when the resource was last updated specified in [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt) format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date_updated")]
		public System.Nullable<System.DateTimeOffset> Date_updated { get; set; }
		
		/// <summary>
		/// The string that you assigned to describe the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="friendly_name")]
		public string Friendly_name { get; set; }
		
		/// <summary>
		/// The URLs of related resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="links")]
		public string Links { get; set; }
		
		/// <summary>
		/// The maximum number of Workers to reserve for the assignment of a task in the queue. Can be an integer between 1 and 50, inclusive and defaults to 1.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="max_reserved_workers")]
		public System.Nullable<System.Int32> Max_reserved_workers { get; set; }
		
		/// <summary>
		/// The name of the Activity to assign Workers once a task is reserved for them.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reservation_activity_name")]
		public string Reservation_activity_name { get; set; }
		
		/// <summary>
		/// The SID of the Activity to assign Workers once a task is reserved for them.
		/// Min length: 34
		/// Max length: 34
		/// Pattern: ^WA[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reservation_activity_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^WA[0-9a-fA-F]{32}$")]
		public string Reservation_activity_sid { get; set; }
		
		/// <summary>
		/// The unique string that we created to identify the TaskQueue resource.
		/// Min length: 34
		/// Max length: 34
		/// Pattern: ^WQ[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^WQ[0-9a-fA-F]{32}$")]
		public string Sid { get; set; }
		
		/// <summary>
		/// A string describing the Worker selection criteria for any Tasks that enter the TaskQueue. For example `'"language" == "spanish"'` If no TargetWorkers parameter is provided, Tasks will wait in the TaskQueue until they are either deleted or moved to another TaskQueue. Additional examples on how to describing Worker selection criteria below. Defaults to 1==1.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="target_workers")]
		public string Target_workers { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="task_order")]
		public Task_queue_enum_task_order Task_order { get; set; }
		
		/// <summary>
		/// The absolute URL of the TaskQueue resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		/// <summary>
		/// The SID of the Workspace that contains the TaskQueue.
		/// Min length: 34
		/// Max length: 34
		/// Pattern: ^WS[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workspace_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^WS[0-9a-fA-F]{32}$")]
		public string Workspace_sid { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Taskrouterv1workspacetask_queuetask_queue_bulk_real_time_statistics
	{
		
		/// <summary>
		/// The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the TaskQueue resource.
		/// Min length: 34
		/// Max length: 34
		/// Pattern: ^AC[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="account_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^AC[0-9a-fA-F]{32}$")]
		public string Account_sid { get; set; }
		
		/// <summary>
		/// The real-time statistics for each requested TaskQueue SID. `task_queue_data` returns the following attributes:
		///
		///`task_queue_sid`: The SID of the TaskQueue from which these statistics were calculated.
		///
		///`total_available_workers`: The total number of Workers available for Tasks in the TaskQueue.
		///
		///`total_eligible_workers`: The total number of Workers eligible for Tasks in the TaskQueue, regardless of their Activity state.
		///
		///`total_tasks`: The total number of Tasks.
		///
		///`longest_task_waiting_age`: The age of the longest waiting Task.
		///
		///`longest_task_waiting_sid`: The SID of the longest waiting Task.
		///
		///`tasks_by_status`: The number of Tasks grouped by their current status.
		///
		///`tasks_by_priority`: The number of Tasks grouped by priority.
		///
		///`activity_statistics`: The number of current Workers grouped by Activity.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="task_queue_data")]
		public string[] Task_queue_data { get; set; }
		
		/// <summary>
		/// The number of TaskQueue statistics received in task_queue_data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="task_queue_response_count")]
		public System.Nullable<System.Int32> Task_queue_response_count { get; set; }
		
		/// <summary>
		/// The absolute URL of the TaskQueue statistics resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		/// <summary>
		/// The SID of the Workspace that contains the TaskQueue.
		/// Min length: 34
		/// Max length: 34
		/// Pattern: ^WS[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workspace_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^WS[0-9a-fA-F]{32}$")]
		public string Workspace_sid { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Taskrouterv1workspacetask_queuetask_queue_cumulative_statistics
	{
		
		/// <summary>
		/// The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the TaskQueue resource.
		/// Min length: 34
		/// Max length: 34
		/// Pattern: ^AC[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="account_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^AC[0-9a-fA-F]{32}$")]
		public string Account_sid { get; set; }
		
		/// <summary>
		/// The average time in seconds between Task creation and acceptance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="avg_task_acceptance_time")]
		public System.Nullable<System.Int32> Avg_task_acceptance_time { get; set; }
		
		/// <summary>
		/// The end of the interval during which these statistics were calculated, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="end_time")]
		public System.Nullable<System.DateTimeOffset> End_time { get; set; }
		
		/// <summary>
		/// The total number of Reservations accepted for Tasks in the TaskQueue.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reservations_accepted")]
		public System.Nullable<System.Int32> Reservations_accepted { get; set; }
		
		/// <summary>
		/// The total number of Reservations canceled for Tasks in the TaskQueue.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reservations_canceled")]
		public System.Nullable<System.Int32> Reservations_canceled { get; set; }
		
		/// <summary>
		/// The total number of Reservations created for Tasks in the TaskQueue.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reservations_created")]
		public System.Nullable<System.Int32> Reservations_created { get; set; }
		
		/// <summary>
		/// The total number of Reservations rejected for Tasks in the TaskQueue.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reservations_rejected")]
		public System.Nullable<System.Int32> Reservations_rejected { get; set; }
		
		/// <summary>
		/// The total number of Reservations rescinded.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reservations_rescinded")]
		public System.Nullable<System.Int32> Reservations_rescinded { get; set; }
		
		/// <summary>
		/// The total number of Reservations that timed out for Tasks in the TaskQueue.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reservations_timed_out")]
		public System.Nullable<System.Int32> Reservations_timed_out { get; set; }
		
		/// <summary>
		/// A list of objects that describe the number of Tasks canceled and reservations accepted above and below the thresholds specified in seconds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="split_by_wait_time")]
		public object Split_by_wait_time { get; set; }
		
		/// <summary>
		/// The beginning of the interval during which these statistics were calculated, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="start_time")]
		public System.Nullable<System.DateTimeOffset> Start_time { get; set; }
		
		/// <summary>
		/// The SID of the TaskQueue from which these statistics were calculated.
		/// Min length: 34
		/// Max length: 34
		/// Pattern: ^WQ[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="task_queue_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^WQ[0-9a-fA-F]{32}$")]
		public string Task_queue_sid { get; set; }
		
		/// <summary>
		/// The total number of Tasks canceled in the TaskQueue.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tasks_canceled")]
		public System.Nullable<System.Int32> Tasks_canceled { get; set; }
		
		/// <summary>
		/// The total number of Tasks completed in the TaskQueue.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tasks_completed")]
		public System.Nullable<System.Int32> Tasks_completed { get; set; }
		
		/// <summary>
		/// The total number of Tasks deleted in the TaskQueue.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tasks_deleted")]
		public System.Nullable<System.Int32> Tasks_deleted { get; set; }
		
		/// <summary>
		/// The total number of Tasks entered into the TaskQueue.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tasks_entered")]
		public System.Nullable<System.Int32> Tasks_entered { get; set; }
		
		/// <summary>
		/// The total number of Tasks that were moved from one queue to another.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tasks_moved")]
		public System.Nullable<System.Int32> Tasks_moved { get; set; }
		
		/// <summary>
		/// The absolute URL of the TaskQueue statistics resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		/// <summary>
		/// The relative wait duration statistics (`avg`, `min`, `max`, `total`) for Tasks accepted while in the TaskQueue. Calculation is based on the time when the Tasks entered the TaskQueue.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="wait_duration_in_queue_until_accepted")]
		public object Wait_duration_in_queue_until_accepted { get; set; }
		
		/// <summary>
		/// The wait duration statistics (`avg`, `min`, `max`, `total`) for Tasks accepted while in the TaskQueue. Calculation is based on the time when the Tasks were created. For transfers, the wait duration is counted from the moment ***the Task was created***, and not from when the transfer was initiated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="wait_duration_until_accepted")]
		public object Wait_duration_until_accepted { get; set; }
		
		/// <summary>
		/// The wait duration statistics (`avg`, `min`, `max`, `total`) for Tasks canceled while in the TaskQueue.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="wait_duration_until_canceled")]
		public object Wait_duration_until_canceled { get; set; }
		
		/// <summary>
		/// The SID of the Workspace that contains the TaskQueue.
		/// Min length: 34
		/// Max length: 34
		/// Pattern: ^WS[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workspace_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^WS[0-9a-fA-F]{32}$")]
		public string Workspace_sid { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Taskrouterv1workspacetask_queuetask_queue_real_time_statistics
	{
		
		/// <summary>
		/// The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the TaskQueue resource.
		/// Min length: 34
		/// Max length: 34
		/// Pattern: ^AC[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="account_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^AC[0-9a-fA-F]{32}$")]
		public string Account_sid { get; set; }
		
		/// <summary>
		/// The number of current Workers by Activity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activity_statistics")]
		public string[] Activity_statistics { get; set; }
		
		/// <summary>
		/// The relative age in the TaskQueue for the longest waiting Task. Calculation is based on the time when the Task entered the TaskQueue.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="longest_relative_task_age_in_queue")]
		public System.Nullable<System.Int32> Longest_relative_task_age_in_queue { get; set; }
		
		/// <summary>
		/// The Task SID of the Task waiting in the TaskQueue the longest. Calculation is based on the time when the Task entered the TaskQueue.
		/// Min length: 34
		/// Max length: 34
		/// Pattern: ^WT[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="longest_relative_task_sid_in_queue")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^WT[0-9a-fA-F]{32}$")]
		public string Longest_relative_task_sid_in_queue { get; set; }
		
		/// <summary>
		/// The age of the longest waiting Task.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="longest_task_waiting_age")]
		public System.Nullable<System.Int32> Longest_task_waiting_age { get; set; }
		
		/// <summary>
		/// The SID of the longest waiting Task.
		/// Min length: 34
		/// Max length: 34
		/// Pattern: ^WT[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="longest_task_waiting_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^WT[0-9a-fA-F]{32}$")]
		public string Longest_task_waiting_sid { get; set; }
		
		/// <summary>
		/// The SID of the TaskQueue from which these statistics were calculated.
		/// Min length: 34
		/// Max length: 34
		/// Pattern: ^WQ[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="task_queue_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^WQ[0-9a-fA-F]{32}$")]
		public string Task_queue_sid { get; set; }
		
		/// <summary>
		/// The number of Tasks by priority. For example: `{"0": "10", "99": "5"}` shows 10 Tasks at priority 0 and 5 at priority 99.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tasks_by_priority")]
		public object Tasks_by_priority { get; set; }
		
		/// <summary>
		/// The number of Tasks by their current status. For example: `{"pending": "1", "reserved": "3", "assigned": "2", "completed": "5"}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tasks_by_status")]
		public object Tasks_by_status { get; set; }
		
		/// <summary>
		/// The total number of Workers available for Tasks in the TaskQueue.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_available_workers")]
		public System.Nullable<System.Int32> Total_available_workers { get; set; }
		
		/// <summary>
		/// The total number of Workers eligible for Tasks in the TaskQueue, independent of their Activity state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_eligible_workers")]
		public System.Nullable<System.Int32> Total_eligible_workers { get; set; }
		
		/// <summary>
		/// The total number of Tasks.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_tasks")]
		public System.Nullable<System.Int32> Total_tasks { get; set; }
		
		/// <summary>
		/// The absolute URL of the TaskQueue statistics resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		/// <summary>
		/// The SID of the Workspace that contains the TaskQueue.
		/// Min length: 34
		/// Max length: 34
		/// Pattern: ^WS[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workspace_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^WS[0-9a-fA-F]{32}$")]
		public string Workspace_sid { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Taskrouterv1workspacetask_queuetask_queue_statistics
	{
		
		/// <summary>
		/// The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the TaskQueue resource.
		/// Min length: 34
		/// Max length: 34
		/// Pattern: ^AC[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="account_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^AC[0-9a-fA-F]{32}$")]
		public string Account_sid { get; set; }
		
		/// <summary>
		/// An object that contains the cumulative statistics for the TaskQueue.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cumulative")]
		public object Cumulative { get; set; }
		
		/// <summary>
		/// An object that contains the real-time statistics for the TaskQueue.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="realtime")]
		public object Realtime { get; set; }
		
		/// <summary>
		/// The SID of the TaskQueue from which these statistics were calculated.
		/// Min length: 34
		/// Max length: 34
		/// Pattern: ^WQ[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="task_queue_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^WQ[0-9a-fA-F]{32}$")]
		public string Task_queue_sid { get; set; }
		
		/// <summary>
		/// The absolute URL of the TaskQueue statistics resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		/// <summary>
		/// The SID of the Workspace that contains the TaskQueue.
		/// Min length: 34
		/// Max length: 34
		/// Pattern: ^WS[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workspace_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^WS[0-9a-fA-F]{32}$")]
		public string Workspace_sid { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Taskrouterv1workspacetask_queuetask_queues_statistics
	{
		
		/// <summary>
		/// The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the TaskQueue resource.
		/// Min length: 34
		/// Max length: 34
		/// Pattern: ^AC[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="account_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^AC[0-9a-fA-F]{32}$")]
		public string Account_sid { get; set; }
		
		/// <summary>
		/// An object that contains the cumulative statistics for the TaskQueues.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cumulative")]
		public object Cumulative { get; set; }
		
		/// <summary>
		/// An object that contains the real-time statistics for the TaskQueues.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="realtime")]
		public object Realtime { get; set; }
		
		/// <summary>
		/// The SID of the TaskQueue from which these statistics were calculated.
		/// Min length: 34
		/// Max length: 34
		/// Pattern: ^WQ[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="task_queue_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^WQ[0-9a-fA-F]{32}$")]
		public string Task_queue_sid { get; set; }
		
		/// <summary>
		/// The SID of the Workspace that contains the TaskQueues.
		/// Min length: 34
		/// Max length: 34
		/// Pattern: ^WS[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workspace_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^WS[0-9a-fA-F]{32}$")]
		public string Workspace_sid { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Taskrouterv1workspaceworker
	{
		
		/// <summary>
		/// The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Worker resource.
		/// Min length: 34
		/// Max length: 34
		/// Pattern: ^AC[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="account_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^AC[0-9a-fA-F]{32}$")]
		public string Account_sid { get; set; }
		
		/// <summary>
		/// The `friendly_name` of the Worker's current Activity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activity_name")]
		public string Activity_name { get; set; }
		
		/// <summary>
		/// The SID of the Worker's current Activity.
		/// Min length: 34
		/// Max length: 34
		/// Pattern: ^WA[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activity_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^WA[0-9a-fA-F]{32}$")]
		public string Activity_sid { get; set; }
		
		/// <summary>
		/// The JSON string that describes the Worker. For example: `{ "email": "Bob@example.com", "phone": "+5095551234" }`. **Note** If this property has been assigned a value, it will only be displayed in FETCH actions that return a single resource. Otherwise, this property will be null, even if it has a value. This data is passed to the `assignment_callback_url` when TaskRouter assigns a Task to the Worker.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public string Attributes { get; set; }
		
		/// <summary>
		/// Whether the Worker is available to perform tasks.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="available")]
		public System.Nullable<System.Boolean> Available { get; set; }
		
		/// <summary>
		/// The date and time in GMT when the resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date_created")]
		public System.Nullable<System.DateTimeOffset> Date_created { get; set; }
		
		/// <summary>
		/// The date and time in GMT of the last change to the Worker's activity specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. Used to calculate Workflow statistics.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date_status_changed")]
		public System.Nullable<System.DateTimeOffset> Date_status_changed { get; set; }
		
		/// <summary>
		/// The date and time in GMT when the resource was last updated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date_updated")]
		public System.Nullable<System.DateTimeOffset> Date_updated { get; set; }
		
		/// <summary>
		/// The string that you assigned to describe the resource. Friendly names are case insensitive, and unique within the TaskRouter Workspace.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="friendly_name")]
		public string Friendly_name { get; set; }
		
		/// <summary>
		/// The URLs of related resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="links")]
		public string Links { get; set; }
		
		/// <summary>
		/// The unique string that we created to identify the Worker resource.
		/// Min length: 34
		/// Max length: 34
		/// Pattern: ^WK[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^WK[0-9a-fA-F]{32}$")]
		public string Sid { get; set; }
		
		/// <summary>
		/// The absolute URL of the Worker resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		/// <summary>
		/// The SID of the Workspace that contains the Worker.
		/// Min length: 34
		/// Max length: 34
		/// Pattern: ^WS[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workspace_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^WS[0-9a-fA-F]{32}$")]
		public string Workspace_sid { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Taskrouterv1workspaceworkerworker_channel
	{
		
		/// <summary>
		/// The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Worker resource.
		/// Min length: 34
		/// Max length: 34
		/// Pattern: ^AC[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="account_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^AC[0-9a-fA-F]{32}$")]
		public string Account_sid { get; set; }
		
		/// <summary>
		/// The total number of Tasks assigned to Worker for the TaskChannel type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="assigned_tasks")]
		public System.Nullable<System.Int32> Assigned_tasks { get; set; }
		
		/// <summary>
		/// Whether the Worker should receive Tasks of the TaskChannel type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="available")]
		public System.Nullable<System.Boolean> Available { get; set; }
		
		/// <summary>
		/// The current percentage of capacity the TaskChannel has available. Can be a number between `0` and `100`. A value of `0` indicates that TaskChannel has no capacity available and a value of `100` means the  Worker is available to receive any Tasks of this TaskChannel type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="available_capacity_percentage")]
		public System.Nullable<System.Int32> Available_capacity_percentage { get; set; }
		
		/// <summary>
		/// The current configured capacity for the WorkerChannel. TaskRouter will not create any reservations after the assigned Tasks for the Worker reaches the value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="configured_capacity")]
		public System.Nullable<System.Int32> Configured_capacity { get; set; }
		
		/// <summary>
		/// The date and time in GMT when the resource was created specified in [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt) format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date_created")]
		public System.Nullable<System.DateTimeOffset> Date_created { get; set; }
		
		/// <summary>
		/// The date and time in GMT when the resource was last updated specified in [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt) format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date_updated")]
		public System.Nullable<System.DateTimeOffset> Date_updated { get; set; }
		
		/// <summary>
		/// The unique string that we created to identify the WorkerChannel resource.
		/// Min length: 34
		/// Max length: 34
		/// Pattern: ^WC[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^WC[0-9a-fA-F]{32}$")]
		public string Sid { get; set; }
		
		/// <summary>
		/// The SID of the TaskChannel.
		/// Min length: 34
		/// Max length: 34
		/// Pattern: ^TC[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="task_channel_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^TC[0-9a-fA-F]{32}$")]
		public string Task_channel_sid { get; set; }
		
		/// <summary>
		/// The unique name of the TaskChannel, such as `voice` or `sms`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="task_channel_unique_name")]
		public string Task_channel_unique_name { get; set; }
		
		/// <summary>
		/// The absolute URL of the WorkerChannel resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		/// <summary>
		/// The SID of the Worker that contains the WorkerChannel.
		/// Min length: 34
		/// Max length: 34
		/// Pattern: ^WK[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="worker_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^WK[0-9a-fA-F]{32}$")]
		public string Worker_sid { get; set; }
		
		/// <summary>
		/// The SID of the Workspace that contains the WorkerChannel.
		/// Min length: 34
		/// Max length: 34
		/// Pattern: ^WS[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workspace_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^WS[0-9a-fA-F]{32}$")]
		public string Workspace_sid { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Taskrouterv1workspaceworkerworker_instance_statistics
	{
		
		/// <summary>
		/// The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Worker resource.
		/// Min length: 34
		/// Max length: 34
		/// Pattern: ^AC[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="account_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^AC[0-9a-fA-F]{32}$")]
		public string Account_sid { get; set; }
		
		/// <summary>
		/// An object that contains the cumulative statistics for the Worker.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cumulative")]
		public object Cumulative { get; set; }
		
		/// <summary>
		/// The absolute URL of the WorkerChannel statistics resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		/// <summary>
		/// The SID of the Worker that contains the WorkerChannel.
		/// Min length: 34
		/// Max length: 34
		/// Pattern: ^WK[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="worker_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^WK[0-9a-fA-F]{32}$")]
		public string Worker_sid { get; set; }
		
		/// <summary>
		/// The SID of the Workspace that contains the WorkerChannel.
		/// Min length: 34
		/// Max length: 34
		/// Pattern: ^WS[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workspace_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^WS[0-9a-fA-F]{32}$")]
		public string Workspace_sid { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Taskrouterv1workspaceworkerworker_reservation
	{
		
		/// <summary>
		/// The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the WorkerReservation resource.
		/// Min length: 34
		/// Max length: 34
		/// Pattern: ^AC[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="account_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^AC[0-9a-fA-F]{32}$")]
		public string Account_sid { get; set; }
		
		/// <summary>
		/// The date and time in GMT when the resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date_created")]
		public System.Nullable<System.DateTimeOffset> Date_created { get; set; }
		
		/// <summary>
		/// The date and time in GMT when the resource was last updated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date_updated")]
		public System.Nullable<System.DateTimeOffset> Date_updated { get; set; }
		
		/// <summary>
		/// The URLs of related resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="links")]
		public string Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reservation_status")]
		public Task_reservation_enum_status Reservation_status { get; set; }
		
		/// <summary>
		/// The unique string that we created to identify the WorkerReservation resource.
		/// Min length: 34
		/// Max length: 34
		/// Pattern: ^WR[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^WR[0-9a-fA-F]{32}$")]
		public string Sid { get; set; }
		
		/// <summary>
		/// The SID of the reserved Task resource.
		/// Min length: 34
		/// Max length: 34
		/// Pattern: ^WT[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="task_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^WT[0-9a-fA-F]{32}$")]
		public string Task_sid { get; set; }
		
		/// <summary>
		/// The absolute URL of the WorkerReservation resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		/// <summary>
		/// The `friendly_name` of the Worker that is reserved.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="worker_name")]
		public string Worker_name { get; set; }
		
		/// <summary>
		/// The SID of the reserved Worker resource.
		/// Min length: 34
		/// Max length: 34
		/// Pattern: ^WK[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="worker_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^WK[0-9a-fA-F]{32}$")]
		public string Worker_sid { get; set; }
		
		/// <summary>
		/// The SID of the Workspace that this worker is contained within.
		/// Min length: 34
		/// Max length: 34
		/// Pattern: ^WS[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workspace_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^WS[0-9a-fA-F]{32}$")]
		public string Workspace_sid { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Taskrouterv1workspaceworkerworker_statistics
	{
		
		/// <summary>
		/// The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Worker resource.
		/// Min length: 34
		/// Max length: 34
		/// Pattern: ^AC[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="account_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^AC[0-9a-fA-F]{32}$")]
		public string Account_sid { get; set; }
		
		/// <summary>
		/// An object that contains the cumulative statistics for the Worker.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cumulative")]
		public object Cumulative { get; set; }
		
		/// <summary>
		/// An object that contains the real-time statistics for the Worker.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="realtime")]
		public object Realtime { get; set; }
		
		/// <summary>
		/// The absolute URL of the Worker statistics resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		/// <summary>
		/// The SID of the Workspace that contains the Worker.
		/// Min length: 34
		/// Max length: 34
		/// Pattern: ^WS[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workspace_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^WS[0-9a-fA-F]{32}$")]
		public string Workspace_sid { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Taskrouterv1workspaceworkerworkers_cumulative_statistics
	{
		
		/// <summary>
		/// The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Worker resource.
		/// Min length: 34
		/// Max length: 34
		/// Pattern: ^AC[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="account_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^AC[0-9a-fA-F]{32}$")]
		public string Account_sid { get; set; }
		
		/// <summary>
		/// The minimum, average, maximum, and total time (in seconds) that Workers spent in each Activity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activity_durations")]
		public string[] Activity_durations { get; set; }
		
		/// <summary>
		/// The end of the interval during which these statistics were calculated, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="end_time")]
		public System.Nullable<System.DateTimeOffset> End_time { get; set; }
		
		/// <summary>
		/// The total number of Reservations that were accepted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reservations_accepted")]
		public System.Nullable<System.Int32> Reservations_accepted { get; set; }
		
		/// <summary>
		/// The total number of Reservations that were canceled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reservations_canceled")]
		public System.Nullable<System.Int32> Reservations_canceled { get; set; }
		
		/// <summary>
		/// The total number of Reservations that were created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reservations_created")]
		public System.Nullable<System.Int32> Reservations_created { get; set; }
		
		/// <summary>
		/// The total number of Reservations that were rejected.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reservations_rejected")]
		public System.Nullable<System.Int32> Reservations_rejected { get; set; }
		
		/// <summary>
		/// The total number of Reservations that were rescinded.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reservations_rescinded")]
		public System.Nullable<System.Int32> Reservations_rescinded { get; set; }
		
		/// <summary>
		/// The total number of Reservations that were timed out.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reservations_timed_out")]
		public System.Nullable<System.Int32> Reservations_timed_out { get; set; }
		
		/// <summary>
		/// The beginning of the interval during which these statistics were calculated, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="start_time")]
		public System.Nullable<System.DateTimeOffset> Start_time { get; set; }
		
		/// <summary>
		/// The absolute URL of the Workers statistics resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		/// <summary>
		/// The SID of the Workspace that contains the Workers.
		/// Min length: 34
		/// Max length: 34
		/// Pattern: ^WS[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workspace_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^WS[0-9a-fA-F]{32}$")]
		public string Workspace_sid { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Taskrouterv1workspaceworkerworkers_real_time_statistics
	{
		
		/// <summary>
		/// The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Worker resource.
		/// Min length: 34
		/// Max length: 34
		/// Pattern: ^AC[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="account_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^AC[0-9a-fA-F]{32}$")]
		public string Account_sid { get; set; }
		
		/// <summary>
		/// The number of current Workers by Activity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activity_statistics")]
		public string[] Activity_statistics { get; set; }
		
		/// <summary>
		/// The total number of Workers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_workers")]
		public System.Nullable<System.Int32> Total_workers { get; set; }
		
		/// <summary>
		/// The absolute URL of the Workers statistics resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		/// <summary>
		/// The SID of the Workspace that contains the Workers.
		/// Min length: 34
		/// Max length: 34
		/// Pattern: ^WS[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workspace_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^WS[0-9a-fA-F]{32}$")]
		public string Workspace_sid { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Taskrouterv1workspaceworkflow
	{
		
		/// <summary>
		/// The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Workflow resource.
		/// Min length: 34
		/// Max length: 34
		/// Pattern: ^AC[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="account_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^AC[0-9a-fA-F]{32}$")]
		public string Account_sid { get; set; }
		
		/// <summary>
		/// The URL that we call when a task managed by the Workflow is assigned to a Worker. See Assignment Callback URL for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="assignment_callback_url")]
		public string Assignment_callback_url { get; set; }
		
		/// <summary>
		/// A JSON string that contains the Workflow's configuration. See [Configuring Workflows](https://www.twilio.com/docs/taskrouter/workflow-configuration) for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="configuration")]
		public string Configuration { get; set; }
		
		/// <summary>
		/// The date and time in GMT when the resource was created specified in [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt) format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date_created")]
		public System.Nullable<System.DateTimeOffset> Date_created { get; set; }
		
		/// <summary>
		/// The date and time in GMT when the resource was last updated specified in [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt) format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date_updated")]
		public System.Nullable<System.DateTimeOffset> Date_updated { get; set; }
		
		/// <summary>
		/// The MIME type of the document.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="document_content_type")]
		public string Document_content_type { get; set; }
		
		/// <summary>
		/// The URL that we call when a call to the `assignment_callback_url` fails.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fallback_assignment_callback_url")]
		public string Fallback_assignment_callback_url { get; set; }
		
		/// <summary>
		/// The string that you assigned to describe the Workflow resource. For example, `Customer Support` or `2014 Election Campaign`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="friendly_name")]
		public string Friendly_name { get; set; }
		
		/// <summary>
		/// The URLs of related resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="links")]
		public string Links { get; set; }
		
		/// <summary>
		/// The unique string that we created to identify the Workflow resource.
		/// Min length: 34
		/// Max length: 34
		/// Pattern: ^WW[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^WW[0-9a-fA-F]{32}$")]
		public string Sid { get; set; }
		
		/// <summary>
		/// How long TaskRouter will wait for a confirmation response from your application after it assigns a Task to a Worker. Can be up to `86,400` (24 hours) and the default is `120`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="task_reservation_timeout")]
		public System.Nullable<System.Int32> Task_reservation_timeout { get; set; }
		
		/// <summary>
		/// The absolute URL of the Workflow resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		/// <summary>
		/// The SID of the Workspace that contains the Workflow.
		/// Min length: 34
		/// Max length: 34
		/// Pattern: ^WS[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workspace_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^WS[0-9a-fA-F]{32}$")]
		public string Workspace_sid { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Taskrouterv1workspaceworkflowworkflow_cumulative_statistics
	{
		
		/// <summary>
		/// The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Workflow resource.
		/// Min length: 34
		/// Max length: 34
		/// Pattern: ^AC[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="account_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^AC[0-9a-fA-F]{32}$")]
		public string Account_sid { get; set; }
		
		/// <summary>
		/// The average time in seconds between Task creation and acceptance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="avg_task_acceptance_time")]
		public System.Nullable<System.Int32> Avg_task_acceptance_time { get; set; }
		
		/// <summary>
		/// The end of the interval during which these statistics were calculated, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="end_time")]
		public System.Nullable<System.DateTimeOffset> End_time { get; set; }
		
		/// <summary>
		/// The total number of Reservations accepted by Workers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reservations_accepted")]
		public System.Nullable<System.Int32> Reservations_accepted { get; set; }
		
		/// <summary>
		/// The total number of Reservations that were canceled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reservations_canceled")]
		public System.Nullable<System.Int32> Reservations_canceled { get; set; }
		
		/// <summary>
		/// The total number of Reservations that were created for Workers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reservations_created")]
		public System.Nullable<System.Int32> Reservations_created { get; set; }
		
		/// <summary>
		/// The total number of Reservations that were rejected.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reservations_rejected")]
		public System.Nullable<System.Int32> Reservations_rejected { get; set; }
		
		/// <summary>
		/// The total number of Reservations that were rescinded.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reservations_rescinded")]
		public System.Nullable<System.Int32> Reservations_rescinded { get; set; }
		
		/// <summary>
		/// The total number of Reservations that were timed out.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reservations_timed_out")]
		public System.Nullable<System.Int32> Reservations_timed_out { get; set; }
		
		/// <summary>
		/// A list of objects that describe the number of Tasks canceled and reservations accepted above and below the thresholds specified in seconds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="split_by_wait_time")]
		public object Split_by_wait_time { get; set; }
		
		/// <summary>
		/// The beginning of the interval during which these statistics were calculated, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="start_time")]
		public System.Nullable<System.DateTimeOffset> Start_time { get; set; }
		
		/// <summary>
		/// The total number of Tasks that were canceled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tasks_canceled")]
		public System.Nullable<System.Int32> Tasks_canceled { get; set; }
		
		/// <summary>
		/// The total number of Tasks that were completed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tasks_completed")]
		public System.Nullable<System.Int32> Tasks_completed { get; set; }
		
		/// <summary>
		/// The total number of Tasks that were deleted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tasks_deleted")]
		public System.Nullable<System.Int32> Tasks_deleted { get; set; }
		
		/// <summary>
		/// The total number of Tasks that entered the Workflow.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tasks_entered")]
		public System.Nullable<System.Int32> Tasks_entered { get; set; }
		
		/// <summary>
		/// The total number of Tasks that were moved from one queue to another.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tasks_moved")]
		public System.Nullable<System.Int32> Tasks_moved { get; set; }
		
		/// <summary>
		/// The total number of Tasks that were timed out of their Workflows (and deleted).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tasks_timed_out_in_workflow")]
		public System.Nullable<System.Int32> Tasks_timed_out_in_workflow { get; set; }
		
		/// <summary>
		/// The absolute URL of the Workflow statistics resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		/// <summary>
		/// The wait duration statistics (`avg`, `min`, `max`, `total`) for Tasks that were accepted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="wait_duration_until_accepted")]
		public object Wait_duration_until_accepted { get; set; }
		
		/// <summary>
		/// The wait duration statistics (`avg`, `min`, `max`, `total`) for Tasks that were canceled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="wait_duration_until_canceled")]
		public object Wait_duration_until_canceled { get; set; }
		
		/// <summary>
		/// Returns the list of Tasks that are being controlled by the Workflow with the specified Sid value.
		/// Min length: 34
		/// Max length: 34
		/// Pattern: ^WW[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workflow_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^WW[0-9a-fA-F]{32}$")]
		public string Workflow_sid { get; set; }
		
		/// <summary>
		/// The SID of the Workspace that contains the Workflow.
		/// Min length: 34
		/// Max length: 34
		/// Pattern: ^WS[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workspace_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^WS[0-9a-fA-F]{32}$")]
		public string Workspace_sid { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Taskrouterv1workspaceworkflowworkflow_real_time_statistics
	{
		
		/// <summary>
		/// The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Workflow resource.
		/// Min length: 34
		/// Max length: 34
		/// Pattern: ^AC[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="account_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^AC[0-9a-fA-F]{32}$")]
		public string Account_sid { get; set; }
		
		/// <summary>
		/// The age of the longest waiting Task.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="longest_task_waiting_age")]
		public System.Nullable<System.Int32> Longest_task_waiting_age { get; set; }
		
		/// <summary>
		/// The SID of the longest waiting Task.
		/// Min length: 34
		/// Max length: 34
		/// Pattern: ^WT[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="longest_task_waiting_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^WT[0-9a-fA-F]{32}$")]
		public string Longest_task_waiting_sid { get; set; }
		
		/// <summary>
		/// The number of Tasks by priority. For example: `{"0": "10", "99": "5"}` shows 10 Tasks at priority 0 and 5 at priority 99.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tasks_by_priority")]
		public object Tasks_by_priority { get; set; }
		
		/// <summary>
		/// The number of Tasks by their current status. For example: `{"pending": "1", "reserved": "3", "assigned": "2", "completed": "5"}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tasks_by_status")]
		public object Tasks_by_status { get; set; }
		
		/// <summary>
		/// The total number of Tasks.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_tasks")]
		public System.Nullable<System.Int32> Total_tasks { get; set; }
		
		/// <summary>
		/// The absolute URL of the Workflow statistics resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		/// <summary>
		/// Returns the list of Tasks that are being controlled by the Workflow with the specified SID value.
		/// Min length: 34
		/// Max length: 34
		/// Pattern: ^WW[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workflow_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^WW[0-9a-fA-F]{32}$")]
		public string Workflow_sid { get; set; }
		
		/// <summary>
		/// The SID of the Workspace that contains the Workflow.
		/// Min length: 34
		/// Max length: 34
		/// Pattern: ^WS[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workspace_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^WS[0-9a-fA-F]{32}$")]
		public string Workspace_sid { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Taskrouterv1workspaceworkflowworkflow_statistics
	{
		
		/// <summary>
		/// The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Workflow resource.
		/// Min length: 34
		/// Max length: 34
		/// Pattern: ^AC[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="account_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^AC[0-9a-fA-F]{32}$")]
		public string Account_sid { get; set; }
		
		/// <summary>
		/// An object that contains the cumulative statistics for the Workflow.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cumulative")]
		public object Cumulative { get; set; }
		
		/// <summary>
		/// An object that contains the real-time statistics for the Workflow.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="realtime")]
		public object Realtime { get; set; }
		
		/// <summary>
		/// The absolute URL of the Workflow statistics resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		/// <summary>
		/// Returns the list of Tasks that are being controlled by the Workflow with the specified SID value.
		/// Min length: 34
		/// Max length: 34
		/// Pattern: ^WW[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workflow_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^WW[0-9a-fA-F]{32}$")]
		public string Workflow_sid { get; set; }
		
		/// <summary>
		/// The SID of the Workspace that contains the Workflow.
		/// Min length: 34
		/// Max length: 34
		/// Pattern: ^WS[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workspace_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^WS[0-9a-fA-F]{32}$")]
		public string Workspace_sid { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Taskrouterv1workspaceworkspace_cumulative_statistics
	{
		
		/// <summary>
		/// The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Workspace resource.
		/// Min length: 34
		/// Max length: 34
		/// Pattern: ^AC[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="account_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^AC[0-9a-fA-F]{32}$")]
		public string Account_sid { get; set; }
		
		/// <summary>
		/// The average time in seconds between Task creation and acceptance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="avg_task_acceptance_time")]
		public System.Nullable<System.Int32> Avg_task_acceptance_time { get; set; }
		
		/// <summary>
		/// The end of the interval during which these statistics were calculated, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="end_time")]
		public System.Nullable<System.DateTimeOffset> End_time { get; set; }
		
		/// <summary>
		/// The total number of Reservations accepted by Workers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reservations_accepted")]
		public System.Nullable<System.Int32> Reservations_accepted { get; set; }
		
		/// <summary>
		/// The total number of Reservations that were canceled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reservations_canceled")]
		public System.Nullable<System.Int32> Reservations_canceled { get; set; }
		
		/// <summary>
		/// The total number of Reservations that were created for Workers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reservations_created")]
		public System.Nullable<System.Int32> Reservations_created { get; set; }
		
		/// <summary>
		/// The total number of Reservations that were rejected.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reservations_rejected")]
		public System.Nullable<System.Int32> Reservations_rejected { get; set; }
		
		/// <summary>
		/// The total number of Reservations that were rescinded.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reservations_rescinded")]
		public System.Nullable<System.Int32> Reservations_rescinded { get; set; }
		
		/// <summary>
		/// The total number of Reservations that were timed out.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reservations_timed_out")]
		public System.Nullable<System.Int32> Reservations_timed_out { get; set; }
		
		/// <summary>
		/// A list of objects that describe the number of Tasks canceled and reservations accepted above and below the thresholds specified in seconds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="split_by_wait_time")]
		public object Split_by_wait_time { get; set; }
		
		/// <summary>
		/// The beginning of the interval during which these statistics were calculated, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="start_time")]
		public System.Nullable<System.DateTimeOffset> Start_time { get; set; }
		
		/// <summary>
		/// The total number of Tasks that were canceled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tasks_canceled")]
		public System.Nullable<System.Int32> Tasks_canceled { get; set; }
		
		/// <summary>
		/// The total number of Tasks that were completed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tasks_completed")]
		public System.Nullable<System.Int32> Tasks_completed { get; set; }
		
		/// <summary>
		/// The total number of Tasks created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tasks_created")]
		public System.Nullable<System.Int32> Tasks_created { get; set; }
		
		/// <summary>
		/// The total number of Tasks that were deleted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tasks_deleted")]
		public System.Nullable<System.Int32> Tasks_deleted { get; set; }
		
		/// <summary>
		/// The total number of Tasks that were moved from one queue to another.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tasks_moved")]
		public System.Nullable<System.Int32> Tasks_moved { get; set; }
		
		/// <summary>
		/// The total number of Tasks that were timed out of their Workflows (and deleted).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tasks_timed_out_in_workflow")]
		public System.Nullable<System.Int32> Tasks_timed_out_in_workflow { get; set; }
		
		/// <summary>
		/// The absolute URL of the Workspace statistics resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		/// <summary>
		/// The wait duration statistics (`avg`, `min`, `max`, `total`) for Tasks that were accepted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="wait_duration_until_accepted")]
		public object Wait_duration_until_accepted { get; set; }
		
		/// <summary>
		/// The wait duration statistics (`avg`, `min`, `max`, `total`) for Tasks that were canceled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="wait_duration_until_canceled")]
		public object Wait_duration_until_canceled { get; set; }
		
		/// <summary>
		/// The SID of the Workspace.
		/// Min length: 34
		/// Max length: 34
		/// Pattern: ^WS[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workspace_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^WS[0-9a-fA-F]{32}$")]
		public string Workspace_sid { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Taskrouterv1workspaceworkspace_real_time_statistics
	{
		
		/// <summary>
		/// The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Workspace resource.
		/// Min length: 34
		/// Max length: 34
		/// Pattern: ^AC[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="account_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^AC[0-9a-fA-F]{32}$")]
		public string Account_sid { get; set; }
		
		/// <summary>
		/// The number of current Workers by Activity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activity_statistics")]
		public string[] Activity_statistics { get; set; }
		
		/// <summary>
		/// The age of the longest waiting Task.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="longest_task_waiting_age")]
		public System.Nullable<System.Int32> Longest_task_waiting_age { get; set; }
		
		/// <summary>
		/// The SID of the longest waiting Task.
		/// Min length: 34
		/// Max length: 34
		/// Pattern: ^WT[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="longest_task_waiting_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^WT[0-9a-fA-F]{32}$")]
		public string Longest_task_waiting_sid { get; set; }
		
		/// <summary>
		/// The number of Tasks by priority. For example: `{"0": "10", "99": "5"}` shows 10 Tasks at priority 0 and 5 at priority 99.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tasks_by_priority")]
		public object Tasks_by_priority { get; set; }
		
		/// <summary>
		/// The number of Tasks by their current status. For example: `{"pending": "1", "reserved": "3", "assigned": "2", "completed": "5"}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tasks_by_status")]
		public object Tasks_by_status { get; set; }
		
		/// <summary>
		/// The total number of Tasks.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_tasks")]
		public System.Nullable<System.Int32> Total_tasks { get; set; }
		
		/// <summary>
		/// The total number of Workers in the Workspace.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_workers")]
		public System.Nullable<System.Int32> Total_workers { get; set; }
		
		/// <summary>
		/// The absolute URL of the Workspace statistics resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		/// <summary>
		/// The SID of the Workspace.
		/// Min length: 34
		/// Max length: 34
		/// Pattern: ^WS[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workspace_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^WS[0-9a-fA-F]{32}$")]
		public string Workspace_sid { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Taskrouterv1workspaceworkspace_statistics
	{
		
		/// <summary>
		/// The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Workspace resource.
		/// Min length: 34
		/// Max length: 34
		/// Pattern: ^AC[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="account_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^AC[0-9a-fA-F]{32}$")]
		public string Account_sid { get; set; }
		
		/// <summary>
		/// An object that contains the cumulative statistics for the Workspace.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cumulative")]
		public object Cumulative { get; set; }
		
		/// <summary>
		/// An object that contains the real-time statistics for the Workspace.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="realtime")]
		public object Realtime { get; set; }
		
		/// <summary>
		/// The absolute URL of the Workspace statistics resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		/// <summary>
		/// The SID of the Workspace.
		/// Min length: 34
		/// Max length: 34
		/// Pattern: ^WS[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workspace_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^WS[0-9a-fA-F]{32}$")]
		public string Workspace_sid { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum Worker_reservation_enum_call_status
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		initiated = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ringing = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		answered = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		completed = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum Worker_reservation_enum_conference_event
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		start = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		end = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		join = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		leave = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		mute = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		hold = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		speaker = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum Worker_reservation_enum_status
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		accepted = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		rejected = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		timeout = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		canceled = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		rescinded = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		wrapping = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		completed = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum Workspace_enum_queue_order
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FIFO = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LIFO = 1,
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// ListWorkspace v1/Workspaces
		/// </summary>
		/// <param name="FriendlyName">The `friendly_name` of the Workspace resources to read. For example `Customer Support` or `2014 Election Campaign`.</param>
		/// <param name="PageSize">How many resources to return in each list page. The default is 50, and the maximum is 1000.
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="Page">The page index. This value is simply for client state.
		/// Minimum: 0
		// </param>
		/// <param name="PageToken">The page token. This is provided by the API.</param>
		/// <returns>OK</returns>
		public async Task<ListWorkspaceReturn> ListWorkspaceAsync(string FriendlyName, int PageSize, int Page, string PageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/Workspaces?FriendlyName=" + (FriendlyName==null? "" : System.Uri.EscapeDataString(FriendlyName))+"&PageSize="+PageSize+"&Page="+Page+"&PageToken=" + (PageToken==null? "" : System.Uri.EscapeDataString(PageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListWorkspaceReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// DeleteWorkspace v1/Workspaces/{Sid}
		/// </summary>
		/// <param name="Sid">The SID of the Workspace resource to delete.
		/// Min length: 34
		/// Max length: 34
		// </param>
		public async Task DeleteWorkspaceAsync(string Sid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/Workspaces/"+ (Sid==null? "" : System.Uri.EscapeDataString(Sid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// FetchWorkspace v1/Workspaces/{Sid}
		/// </summary>
		/// <param name="Sid">The SID of the Workspace resource to fetch.
		/// Min length: 34
		/// Max length: 34
		// </param>
		/// <returns>OK</returns>
		public async Task<Taskrouterv1workspace> FetchWorkspaceAsync(string Sid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/Workspaces/"+ (Sid==null? "" : System.Uri.EscapeDataString(Sid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Taskrouterv1workspace>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ListActivity v1/Workspaces/{WorkspaceSid}/Activities
		/// </summary>
		/// <param name="WorkspaceSid">The SID of the Workspace with the Activity resources to read.
		/// Min length: 34
		/// Max length: 34
		// </param>
		/// <param name="FriendlyName">The `friendly_name` of the Activity resources to read.</param>
		/// <param name="Available">Whether return only Activity resources that are available or unavailable. A value of `true` returns only available activities. Values of '1' or `yes` also indicate `true`. All other values represent `false` and return activities that are unavailable.</param>
		/// <param name="PageSize">How many resources to return in each list page. The default is 50, and the maximum is 1000.
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="Page">The page index. This value is simply for client state.
		/// Minimum: 0
		// </param>
		/// <param name="PageToken">The page token. This is provided by the API.</param>
		/// <returns>OK</returns>
		public async Task<ListActivityReturn> ListActivityAsync(string WorkspaceSid, string FriendlyName, string Available, int PageSize, int Page, string PageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/Workspaces/"+ (WorkspaceSid==null? "" : System.Uri.EscapeDataString(WorkspaceSid))+"/Activities&FriendlyName=" + (FriendlyName==null? "" : System.Uri.EscapeDataString(FriendlyName))+"&Available=" + (Available==null? "" : System.Uri.EscapeDataString(Available))+"&PageSize="+PageSize+"&Page="+Page+"&PageToken=" + (PageToken==null? "" : System.Uri.EscapeDataString(PageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListActivityReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// DeleteActivity v1/Workspaces/{WorkspaceSid}/Activities/{Sid}
		/// </summary>
		/// <param name="WorkspaceSid">The SID of the Workspace with the Activity resources to delete.
		/// Min length: 34
		/// Max length: 34
		// </param>
		/// <param name="Sid">The SID of the Activity resource to delete.
		/// Min length: 34
		/// Max length: 34
		// </param>
		public async Task DeleteActivityAsync(string WorkspaceSid, string Sid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/Workspaces/"+ (WorkspaceSid==null? "" : System.Uri.EscapeDataString(WorkspaceSid))+"/Activities/"+ (Sid==null? "" : System.Uri.EscapeDataString(Sid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// FetchActivity v1/Workspaces/{WorkspaceSid}/Activities/{Sid}
		/// </summary>
		/// <param name="WorkspaceSid">The SID of the Workspace with the Activity resources to fetch.
		/// Min length: 34
		/// Max length: 34
		// </param>
		/// <param name="Sid">The SID of the Activity resource to fetch.
		/// Min length: 34
		/// Max length: 34
		// </param>
		/// <returns>OK</returns>
		public async Task<Taskrouterv1workspaceactivity> FetchActivityAsync(string WorkspaceSid, string Sid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/Workspaces/"+ (WorkspaceSid==null? "" : System.Uri.EscapeDataString(WorkspaceSid))+"/Activities/"+ (Sid==null? "" : System.Uri.EscapeDataString(Sid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Taskrouterv1workspaceactivity>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// FetchWorkspaceCumulativeStatistics v1/Workspaces/{WorkspaceSid}/CumulativeStatistics
		/// </summary>
		/// <param name="WorkspaceSid">The SID of the Workspace to fetch.
		/// Min length: 34
		/// Max length: 34
		// </param>
		/// <param name="EndDate">Only include usage that occurred on or before this date, specified in GMT as an [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date-time.</param>
		/// <param name="Minutes">Only calculate statistics since this many minutes in the past. The default 15 minutes. This is helpful for displaying statistics for the last 15 minutes, 240 minutes (4 hours), and 480 minutes (8 hours) to see trends.</param>
		/// <param name="StartDate">Only calculate statistics from this date and time and later, specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.</param>
		/// <param name="TaskChannel">Only calculate cumulative statistics on this TaskChannel. Can be the TaskChannel's SID or its `unique_name`, such as `voice`, `sms`, or `default`.</param>
		/// <param name="SplitByWaitTime">A comma separated list of values that describes the thresholds, in seconds, to calculate statistics on. For each threshold specified, the number of Tasks canceled and reservations accepted above and below the specified thresholds in seconds are computed. For example, `5,30` would show splits of Tasks that were canceled or accepted before and after 5 seconds and before and after 30 seconds. This can be used to show short abandoned Tasks or Tasks that failed to meet an SLA. TaskRouter will calculate statistics on up to 10,000 Tasks for any given threshold.</param>
		/// <returns>OK</returns>
		public async Task<Taskrouterv1workspaceworkspace_cumulative_statistics> FetchWorkspaceCumulativeStatisticsAsync(string WorkspaceSid, System.DateTimeOffset EndDate, int Minutes, System.DateTimeOffset StartDate, string TaskChannel, string SplitByWaitTime, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/Workspaces/"+ (WorkspaceSid==null? "" : System.Uri.EscapeDataString(WorkspaceSid))+"/CumulativeStatistics&EndDate=" + EndDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&Minutes="+Minutes+"&StartDate=" + StartDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&TaskChannel=" + (TaskChannel==null? "" : System.Uri.EscapeDataString(TaskChannel))+"&SplitByWaitTime=" + (SplitByWaitTime==null? "" : System.Uri.EscapeDataString(SplitByWaitTime));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Taskrouterv1workspaceworkspace_cumulative_statistics>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ListEvent v1/Workspaces/{WorkspaceSid}/Events
		/// </summary>
		/// <param name="WorkspaceSid">The SID of the Workspace with the Events to read. Returns only the Events that pertain to the specified Workspace.
		/// Min length: 34
		/// Max length: 34
		// </param>
		/// <param name="EndDate">Only include Events that occurred on or before this date, specified in GMT as an [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date-time.</param>
		/// <param name="EventType">The type of Events to read. Returns only Events of the type specified.</param>
		/// <param name="Minutes">The period of events to read in minutes. Returns only Events that occurred since this many minutes in the past. The default is `15` minutes. Task Attributes for Events occuring more 43,200 minutes ago will be redacted.</param>
		/// <param name="ReservationSid">The SID of the Reservation with the Events to read. Returns only Events that pertain to the specified Reservation.
		/// Min length: 34
		/// Max length: 34
		// </param>
		/// <param name="StartDate">Only include Events from on or after this date and time, specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. Task Attributes for Events older than 30 days will be redacted.</param>
		/// <param name="TaskQueueSid">The SID of the TaskQueue with the Events to read. Returns only the Events that pertain to the specified TaskQueue.
		/// Min length: 34
		/// Max length: 34
		// </param>
		/// <param name="TaskSid">The SID of the Task with the Events to read. Returns only the Events that pertain to the specified Task.
		/// Min length: 34
		/// Max length: 34
		// </param>
		/// <param name="WorkerSid">The SID of the Worker with the Events to read. Returns only the Events that pertain to the specified Worker.
		/// Min length: 34
		/// Max length: 34
		// </param>
		/// <param name="WorkflowSid">The SID of the Workflow with the Events to read. Returns only the Events that pertain to the specified Workflow.
		/// Min length: 34
		/// Max length: 34
		// </param>
		/// <param name="TaskChannel">The TaskChannel with the Events to read. Returns only the Events that pertain to the specified TaskChannel.</param>
		/// <param name="Sid">The SID of the Event resource to read.
		/// Min length: 34
		/// Max length: 34
		// </param>
		/// <param name="PageSize">How many resources to return in each list page. The default is 50, and the maximum is 1000.
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="Page">The page index. This value is simply for client state.
		/// Minimum: 0
		// </param>
		/// <param name="PageToken">The page token. This is provided by the API.</param>
		/// <returns>OK</returns>
		public async Task<ListEventReturn> ListEventAsync(
					string WorkspaceSid, 
					System.DateTimeOffset EndDate, 
					string EventType, 
					int Minutes, 
					string ReservationSid, 
					System.DateTimeOffset StartDate, 
					string TaskQueueSid, 
					string TaskSid, 
					string WorkerSid, 
					string WorkflowSid, 
					string TaskChannel, 
					string Sid, 
					int PageSize, 
					int Page, 
					string PageToken, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/Workspaces/"+ (WorkspaceSid==null? "" : System.Uri.EscapeDataString(WorkspaceSid))+"/Events&EndDate=" + EndDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&EventType=" + (EventType==null? "" : System.Uri.EscapeDataString(EventType))+"&Minutes="+Minutes+"&ReservationSid=" + (ReservationSid==null? "" : System.Uri.EscapeDataString(ReservationSid))+"&StartDate=" + StartDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&TaskQueueSid=" + (TaskQueueSid==null? "" : System.Uri.EscapeDataString(TaskQueueSid))+"&TaskSid=" + (TaskSid==null? "" : System.Uri.EscapeDataString(TaskSid))+"&WorkerSid=" + (WorkerSid==null? "" : System.Uri.EscapeDataString(WorkerSid))+"&WorkflowSid=" + (WorkflowSid==null? "" : System.Uri.EscapeDataString(WorkflowSid))+"&TaskChannel=" + (TaskChannel==null? "" : System.Uri.EscapeDataString(TaskChannel))+"&Sid=" + (Sid==null? "" : System.Uri.EscapeDataString(Sid))+"&PageSize="+PageSize+"&Page="+Page+"&PageToken=" + (PageToken==null? "" : System.Uri.EscapeDataString(PageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListEventReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// FetchEvent v1/Workspaces/{WorkspaceSid}/Events/{Sid}
		/// </summary>
		/// <param name="WorkspaceSid">The SID of the Workspace with the Event to fetch.
		/// Min length: 34
		/// Max length: 34
		// </param>
		/// <param name="Sid">The SID of the Event resource to fetch.
		/// Min length: 34
		/// Max length: 34
		// </param>
		/// <returns>OK</returns>
		public async Task<Taskrouterv1workspaceevent> FetchEventAsync(string WorkspaceSid, string Sid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/Workspaces/"+ (WorkspaceSid==null? "" : System.Uri.EscapeDataString(WorkspaceSid))+"/Events/"+ (Sid==null? "" : System.Uri.EscapeDataString(Sid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Taskrouterv1workspaceevent>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// FetchWorkspaceRealTimeStatistics v1/Workspaces/{WorkspaceSid}/RealTimeStatistics
		/// </summary>
		/// <param name="WorkspaceSid">The SID of the Workspace to fetch.
		/// Min length: 34
		/// Max length: 34
		// </param>
		/// <param name="TaskChannel">Only calculate real-time statistics on this TaskChannel. Can be the TaskChannel's SID or its `unique_name`, such as `voice`, `sms`, or `default`.</param>
		/// <returns>OK</returns>
		public async Task<Taskrouterv1workspaceworkspace_real_time_statistics> FetchWorkspaceRealTimeStatisticsAsync(string WorkspaceSid, string TaskChannel, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/Workspaces/"+ (WorkspaceSid==null? "" : System.Uri.EscapeDataString(WorkspaceSid))+"/RealTimeStatistics&TaskChannel=" + (TaskChannel==null? "" : System.Uri.EscapeDataString(TaskChannel));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Taskrouterv1workspaceworkspace_real_time_statistics>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// FetchWorkspaceStatistics v1/Workspaces/{WorkspaceSid}/Statistics
		/// </summary>
		/// <param name="WorkspaceSid">The SID of the Workspace to fetch.
		/// Min length: 34
		/// Max length: 34
		// </param>
		/// <param name="Minutes">Only calculate statistics since this many minutes in the past. The default 15 minutes. This is helpful for displaying statistics for the last 15 minutes, 240 minutes (4 hours), and 480 minutes (8 hours) to see trends.</param>
		/// <param name="StartDate">Only calculate statistics from this date and time and later, specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.</param>
		/// <param name="EndDate">Only calculate statistics from this date and time and earlier, specified in GMT as an [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date-time.</param>
		/// <param name="TaskChannel">Only calculate statistics on this TaskChannel. Can be the TaskChannel's SID or its `unique_name`, such as `voice`, `sms`, or `default`.</param>
		/// <param name="SplitByWaitTime">A comma separated list of values that describes the thresholds, in seconds, to calculate statistics on. For each threshold specified, the number of Tasks canceled and reservations accepted above and below the specified thresholds in seconds are computed. For example, `5,30` would show splits of Tasks that were canceled or accepted before and after 5 seconds and before and after 30 seconds. This can be used to show short abandoned Tasks or Tasks that failed to meet an SLA.</param>
		/// <returns>OK</returns>
		public async Task<Taskrouterv1workspaceworkspace_statistics> FetchWorkspaceStatisticsAsync(string WorkspaceSid, int Minutes, System.DateTimeOffset StartDate, System.DateTimeOffset EndDate, string TaskChannel, string SplitByWaitTime, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/Workspaces/"+ (WorkspaceSid==null? "" : System.Uri.EscapeDataString(WorkspaceSid))+"/Statistics&Minutes="+Minutes+"&StartDate=" + StartDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&EndDate=" + EndDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&TaskChannel=" + (TaskChannel==null? "" : System.Uri.EscapeDataString(TaskChannel))+"&SplitByWaitTime=" + (SplitByWaitTime==null? "" : System.Uri.EscapeDataString(SplitByWaitTime));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Taskrouterv1workspaceworkspace_statistics>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ListTaskChannel v1/Workspaces/{WorkspaceSid}/TaskChannels
		/// </summary>
		/// <param name="WorkspaceSid">The SID of the Workspace with the Task Channel to read.
		/// Min length: 34
		/// Max length: 34
		// </param>
		/// <param name="PageSize">How many resources to return in each list page. The default is 50, and the maximum is 1000.
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="Page">The page index. This value is simply for client state.
		/// Minimum: 0
		// </param>
		/// <param name="PageToken">The page token. This is provided by the API.</param>
		/// <returns>OK</returns>
		public async Task<ListTaskChannelReturn> ListTaskChannelAsync(string WorkspaceSid, int PageSize, int Page, string PageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/Workspaces/"+ (WorkspaceSid==null? "" : System.Uri.EscapeDataString(WorkspaceSid))+"/TaskChannels&PageSize="+PageSize+"&Page="+Page+"&PageToken=" + (PageToken==null? "" : System.Uri.EscapeDataString(PageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListTaskChannelReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// DeleteTaskChannel v1/Workspaces/{WorkspaceSid}/TaskChannels/{Sid}
		/// </summary>
		/// <param name="WorkspaceSid">The SID of the Workspace with the Task Channel to delete.
		/// Min length: 34
		/// Max length: 34
		// </param>
		/// <param name="Sid">The SID of the Task Channel resource to delete.</param>
		public async Task DeleteTaskChannelAsync(string WorkspaceSid, string Sid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/Workspaces/"+ (WorkspaceSid==null? "" : System.Uri.EscapeDataString(WorkspaceSid))+"/TaskChannels/"+ (Sid==null? "" : System.Uri.EscapeDataString(Sid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// FetchTaskChannel v1/Workspaces/{WorkspaceSid}/TaskChannels/{Sid}
		/// </summary>
		/// <param name="WorkspaceSid">The SID of the Workspace with the Task Channel to fetch.
		/// Min length: 34
		/// Max length: 34
		// </param>
		/// <param name="Sid">The SID of the Task Channel resource to fetch.</param>
		/// <returns>OK</returns>
		public async Task<Taskrouterv1workspacetask_channel> FetchTaskChannelAsync(string WorkspaceSid, string Sid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/Workspaces/"+ (WorkspaceSid==null? "" : System.Uri.EscapeDataString(WorkspaceSid))+"/TaskChannels/"+ (Sid==null? "" : System.Uri.EscapeDataString(Sid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Taskrouterv1workspacetask_channel>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ListTaskQueue v1/Workspaces/{WorkspaceSid}/TaskQueues
		/// </summary>
		/// <param name="WorkspaceSid">The SID of the Workspace with the TaskQueue to read.
		/// Min length: 34
		/// Max length: 34
		// </param>
		/// <param name="FriendlyName">The `friendly_name` of the TaskQueue resources to read.</param>
		/// <param name="EvaluateWorkerAttributes">The attributes of the Workers to read. Returns the TaskQueues with Workers that match the attributes specified in this parameter.</param>
		/// <param name="WorkerSid">The SID of the Worker with the TaskQueue resources to read.
		/// Min length: 34
		/// Max length: 34
		// </param>
		/// <param name="Ordering">Sorting parameter for TaskQueues</param>
		/// <param name="PageSize">How many resources to return in each list page. The default is 50, and the maximum is 1000.
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="Page">The page index. This value is simply for client state.
		/// Minimum: 0
		// </param>
		/// <param name="PageToken">The page token. This is provided by the API.</param>
		/// <returns>OK</returns>
		public async Task<ListTaskQueueReturn> ListTaskQueueAsync(string WorkspaceSid, string FriendlyName, string EvaluateWorkerAttributes, string WorkerSid, string Ordering, int PageSize, int Page, string PageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/Workspaces/"+ (WorkspaceSid==null? "" : System.Uri.EscapeDataString(WorkspaceSid))+"/TaskQueues&FriendlyName=" + (FriendlyName==null? "" : System.Uri.EscapeDataString(FriendlyName))+"&EvaluateWorkerAttributes=" + (EvaluateWorkerAttributes==null? "" : System.Uri.EscapeDataString(EvaluateWorkerAttributes))+"&WorkerSid=" + (WorkerSid==null? "" : System.Uri.EscapeDataString(WorkerSid))+"&Ordering=" + (Ordering==null? "" : System.Uri.EscapeDataString(Ordering))+"&PageSize="+PageSize+"&Page="+Page+"&PageToken=" + (PageToken==null? "" : System.Uri.EscapeDataString(PageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListTaskQueueReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ListTaskQueuesStatistics v1/Workspaces/{WorkspaceSid}/TaskQueues/Statistics
		/// </summary>
		/// <param name="WorkspaceSid">The SID of the Workspace with the TaskQueues to read.
		/// Min length: 34
		/// Max length: 34
		// </param>
		/// <param name="EndDate">Only calculate statistics from this date and time and earlier, specified in GMT as an [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date-time.</param>
		/// <param name="FriendlyName">The `friendly_name` of the TaskQueue statistics to read.</param>
		/// <param name="Minutes">Only calculate statistics since this many minutes in the past. The default is 15 minutes.</param>
		/// <param name="StartDate">Only calculate statistics from this date and time and later, specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.</param>
		/// <param name="TaskChannel">Only calculate statistics on this TaskChannel. Can be the TaskChannel's SID or its `unique_name`, such as `voice`, `sms`, or `default`.</param>
		/// <param name="SplitByWaitTime">A comma separated list of values that describes the thresholds, in seconds, to calculate statistics on. For each threshold specified, the number of Tasks canceled and reservations accepted above and below the specified thresholds in seconds are computed.</param>
		/// <param name="PageSize">How many resources to return in each list page. The default is 50, and the maximum is 1000.
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="Page">The page index. This value is simply for client state.
		/// Minimum: 0
		// </param>
		/// <param name="PageToken">The page token. This is provided by the API.</param>
		/// <returns>OK</returns>
		public async Task<ListTaskQueuesStatisticsReturn> ListTaskQueuesStatisticsAsync(string WorkspaceSid, System.DateTimeOffset EndDate, string FriendlyName, int Minutes, System.DateTimeOffset StartDate, string TaskChannel, string SplitByWaitTime, int PageSize, int Page, string PageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/Workspaces/"+ (WorkspaceSid==null? "" : System.Uri.EscapeDataString(WorkspaceSid))+"/TaskQueues/Statistics&EndDate=" + EndDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&FriendlyName=" + (FriendlyName==null? "" : System.Uri.EscapeDataString(FriendlyName))+"&Minutes="+Minutes+"&StartDate=" + StartDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&TaskChannel=" + (TaskChannel==null? "" : System.Uri.EscapeDataString(TaskChannel))+"&SplitByWaitTime=" + (SplitByWaitTime==null? "" : System.Uri.EscapeDataString(SplitByWaitTime))+"&PageSize="+PageSize+"&Page="+Page+"&PageToken=" + (PageToken==null? "" : System.Uri.EscapeDataString(PageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListTaskQueuesStatisticsReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// DeleteTaskQueue v1/Workspaces/{WorkspaceSid}/TaskQueues/{Sid}
		/// </summary>
		/// <param name="WorkspaceSid">The SID of the Workspace with the TaskQueue to delete.
		/// Min length: 34
		/// Max length: 34
		// </param>
		/// <param name="Sid">The SID of the TaskQueue resource to delete.
		/// Min length: 34
		/// Max length: 34
		// </param>
		public async Task DeleteTaskQueueAsync(string WorkspaceSid, string Sid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/Workspaces/"+ (WorkspaceSid==null? "" : System.Uri.EscapeDataString(WorkspaceSid))+"/TaskQueues/"+ (Sid==null? "" : System.Uri.EscapeDataString(Sid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// FetchTaskQueue v1/Workspaces/{WorkspaceSid}/TaskQueues/{Sid}
		/// </summary>
		/// <param name="WorkspaceSid">The SID of the Workspace with the TaskQueue to fetch.
		/// Min length: 34
		/// Max length: 34
		// </param>
		/// <param name="Sid">The SID of the TaskQueue resource to fetch.
		/// Min length: 34
		/// Max length: 34
		// </param>
		/// <returns>OK</returns>
		public async Task<Taskrouterv1workspacetask_queue> FetchTaskQueueAsync(string WorkspaceSid, string Sid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/Workspaces/"+ (WorkspaceSid==null? "" : System.Uri.EscapeDataString(WorkspaceSid))+"/TaskQueues/"+ (Sid==null? "" : System.Uri.EscapeDataString(Sid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Taskrouterv1workspacetask_queue>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// FetchTaskQueueCumulativeStatistics v1/Workspaces/{WorkspaceSid}/TaskQueues/{TaskQueueSid}/CumulativeStatistics
		/// </summary>
		/// <param name="WorkspaceSid">The SID of the Workspace with the TaskQueue to fetch.
		/// Min length: 34
		/// Max length: 34
		// </param>
		/// <param name="TaskQueueSid">The SID of the TaskQueue for which to fetch statistics.
		/// Min length: 34
		/// Max length: 34
		// </param>
		/// <param name="EndDate">Only calculate statistics from this date and time and earlier, specified in GMT as an [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date-time.</param>
		/// <param name="Minutes">Only calculate statistics since this many minutes in the past. The default is 15 minutes.</param>
		/// <param name="StartDate">Only calculate statistics from this date and time and later, specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.</param>
		/// <param name="TaskChannel">Only calculate cumulative statistics on this TaskChannel. Can be the TaskChannel's SID or its `unique_name`, such as `voice`, `sms`, or `default`.</param>
		/// <param name="SplitByWaitTime">A comma separated list of values that describes the thresholds, in seconds, to calculate statistics on. For each threshold specified, the number of Tasks canceled and reservations accepted above and below the specified thresholds in seconds are computed. TaskRouter will calculate statistics on up to 10,000 Tasks/Reservations for any given threshold.</param>
		/// <returns>OK</returns>
		public async Task<Taskrouterv1workspacetask_queuetask_queue_cumulative_statistics> FetchTaskQueueCumulativeStatisticsAsync(string WorkspaceSid, string TaskQueueSid, System.DateTimeOffset EndDate, int Minutes, System.DateTimeOffset StartDate, string TaskChannel, string SplitByWaitTime, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/Workspaces/"+ (WorkspaceSid==null? "" : System.Uri.EscapeDataString(WorkspaceSid))+"/TaskQueues/"+ (TaskQueueSid==null? "" : System.Uri.EscapeDataString(TaskQueueSid))+"/CumulativeStatistics&EndDate=" + EndDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&Minutes="+Minutes+"&StartDate=" + StartDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&TaskChannel=" + (TaskChannel==null? "" : System.Uri.EscapeDataString(TaskChannel))+"&SplitByWaitTime=" + (SplitByWaitTime==null? "" : System.Uri.EscapeDataString(SplitByWaitTime));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Taskrouterv1workspacetask_queuetask_queue_cumulative_statistics>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// FetchTaskQueueRealTimeStatistics v1/Workspaces/{WorkspaceSid}/TaskQueues/{TaskQueueSid}/RealTimeStatistics
		/// </summary>
		/// <param name="WorkspaceSid">The SID of the Workspace with the TaskQueue to fetch.
		/// Min length: 34
		/// Max length: 34
		// </param>
		/// <param name="TaskQueueSid">The SID of the TaskQueue for which to fetch statistics.
		/// Min length: 34
		/// Max length: 34
		// </param>
		/// <param name="TaskChannel">The TaskChannel for which to fetch statistics. Can be the TaskChannel's SID or its `unique_name`, such as `voice`, `sms`, or `default`.</param>
		/// <returns>OK</returns>
		public async Task<Taskrouterv1workspacetask_queuetask_queue_real_time_statistics> FetchTaskQueueRealTimeStatisticsAsync(string WorkspaceSid, string TaskQueueSid, string TaskChannel, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/Workspaces/"+ (WorkspaceSid==null? "" : System.Uri.EscapeDataString(WorkspaceSid))+"/TaskQueues/"+ (TaskQueueSid==null? "" : System.Uri.EscapeDataString(TaskQueueSid))+"/RealTimeStatistics&TaskChannel=" + (TaskChannel==null? "" : System.Uri.EscapeDataString(TaskChannel));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Taskrouterv1workspacetask_queuetask_queue_real_time_statistics>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// FetchTaskQueueStatistics v1/Workspaces/{WorkspaceSid}/TaskQueues/{TaskQueueSid}/Statistics
		/// </summary>
		/// <param name="WorkspaceSid">The SID of the Workspace with the TaskQueue to fetch.
		/// Min length: 34
		/// Max length: 34
		// </param>
		/// <param name="TaskQueueSid">The SID of the TaskQueue for which to fetch statistics.
		/// Min length: 34
		/// Max length: 34
		// </param>
		/// <param name="EndDate">Only calculate statistics from this date and time and earlier, specified in GMT as an [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date-time.</param>
		/// <param name="Minutes">Only calculate statistics since this many minutes in the past. The default is 15 minutes.</param>
		/// <param name="StartDate">Only calculate statistics from this date and time and later, specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.</param>
		/// <param name="TaskChannel">Only calculate real-time and cumulative statistics for the specified TaskChannel. Can be the TaskChannel's SID or its `unique_name`, such as `voice`, `sms`, or `default`.</param>
		/// <param name="SplitByWaitTime">A comma separated list of values that describes the thresholds, in seconds, to calculate statistics on. For each threshold specified, the number of Tasks canceled and reservations accepted above and below the specified thresholds in seconds are computed.</param>
		/// <returns>OK</returns>
		public async Task<Taskrouterv1workspacetask_queuetask_queue_statistics> FetchTaskQueueStatisticsAsync(string WorkspaceSid, string TaskQueueSid, System.DateTimeOffset EndDate, int Minutes, System.DateTimeOffset StartDate, string TaskChannel, string SplitByWaitTime, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/Workspaces/"+ (WorkspaceSid==null? "" : System.Uri.EscapeDataString(WorkspaceSid))+"/TaskQueues/"+ (TaskQueueSid==null? "" : System.Uri.EscapeDataString(TaskQueueSid))+"/Statistics&EndDate=" + EndDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&Minutes="+Minutes+"&StartDate=" + StartDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&TaskChannel=" + (TaskChannel==null? "" : System.Uri.EscapeDataString(TaskChannel))+"&SplitByWaitTime=" + (SplitByWaitTime==null? "" : System.Uri.EscapeDataString(SplitByWaitTime));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Taskrouterv1workspacetask_queuetask_queue_statistics>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ListTask v1/Workspaces/{WorkspaceSid}/Tasks
		/// </summary>
		/// <param name="WorkspaceSid">The SID of the Workspace with the Tasks to read.
		/// Min length: 34
		/// Max length: 34
		// </param>
		/// <param name="Priority">The priority value of the Tasks to read. Returns the list of all Tasks in the Workspace with the specified priority.</param>
		/// <param name="AssignmentStatus">The `assignment_status` of the Tasks you want to read. Can be: `pending`, `reserved`, `assigned`, `canceled`, `wrapping`, or `completed`. Returns all Tasks in the Workspace with the specified `assignment_status`.</param>
		/// <param name="WorkflowSid">The SID of the Workflow with the Tasks to read. Returns the Tasks controlled by the Workflow identified by this SID.
		/// Min length: 34
		/// Max length: 34
		// </param>
		/// <param name="WorkflowName">The friendly name of the Workflow with the Tasks to read. Returns the Tasks controlled by the Workflow identified by this friendly name.</param>
		/// <param name="TaskQueueSid">The SID of the TaskQueue with the Tasks to read. Returns the Tasks waiting in the TaskQueue identified by this SID.
		/// Min length: 34
		/// Max length: 34
		// </param>
		/// <param name="TaskQueueName">The `friendly_name` of the TaskQueue with the Tasks to read. Returns the Tasks waiting in the TaskQueue identified by this friendly name.</param>
		/// <param name="EvaluateTaskAttributes">The attributes of the Tasks to read. Returns the Tasks that match the attributes specified in this parameter.</param>
		/// <param name="Ordering">How to order the returned Task resources. By default, Tasks are sorted by ascending DateCreated. This value is specified as: `Attribute:Order`, where `Attribute` can be either `DateCreated`, `Priority`, or `VirtualStartTime` and `Order` can be either `asc` or `desc`. For example, `Priority:desc` returns Tasks ordered in descending order of their Priority. Pairings of sort orders can be specified in a comma-separated list such as `Priority:desc,DateCreated:asc`, which returns the Tasks in descending Priority order and ascending DateCreated Order. The only ordering pairing not allowed is DateCreated and VirtualStartTime.</param>
		/// <param name="HasAddons">Whether to read Tasks with Add-ons. If `true`, returns only Tasks with Add-ons. If `false`, returns only Tasks without Add-ons.</param>
		/// <param name="PageSize">How many resources to return in each list page. The default is 50, and the maximum is 1000.
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="Page">The page index. This value is simply for client state.
		/// Minimum: 0
		// </param>
		/// <param name="PageToken">The page token. This is provided by the API.</param>
		/// <returns>OK</returns>
		public async Task<ListTaskReturn> ListTaskAsync(string WorkspaceSid, int Priority, string[] AssignmentStatus, string WorkflowSid, string WorkflowName, string TaskQueueSid, string TaskQueueName, string EvaluateTaskAttributes, string Ordering, bool HasAddons, int PageSize, int Page, string PageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/Workspaces/"+ (WorkspaceSid==null? "" : System.Uri.EscapeDataString(WorkspaceSid))+"/Tasks&Priority="+Priority+"&"+string.Join("&", AssignmentStatus.Select(z => $"AssignmentStatus={System.Uri.EscapeDataString(z.ToString())}"))+"&WorkflowSid=" + (WorkflowSid==null? "" : System.Uri.EscapeDataString(WorkflowSid))+"&WorkflowName=" + (WorkflowName==null? "" : System.Uri.EscapeDataString(WorkflowName))+"&TaskQueueSid=" + (TaskQueueSid==null? "" : System.Uri.EscapeDataString(TaskQueueSid))+"&TaskQueueName=" + (TaskQueueName==null? "" : System.Uri.EscapeDataString(TaskQueueName))+"&EvaluateTaskAttributes=" + (EvaluateTaskAttributes==null? "" : System.Uri.EscapeDataString(EvaluateTaskAttributes))+"&Ordering=" + (Ordering==null? "" : System.Uri.EscapeDataString(Ordering))+"&HasAddons="+HasAddons+"&PageSize="+PageSize+"&Page="+Page+"&PageToken=" + (PageToken==null? "" : System.Uri.EscapeDataString(PageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListTaskReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// DeleteTask v1/Workspaces/{WorkspaceSid}/Tasks/{Sid}
		/// </summary>
		/// <param name="WorkspaceSid">The SID of the Workspace with the Task to delete.
		/// Min length: 34
		/// Max length: 34
		// </param>
		/// <param name="Sid">The SID of the Task resource to delete.
		/// Min length: 34
		/// Max length: 34
		// </param>
		public async Task DeleteTaskAsync(string WorkspaceSid, string Sid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/Workspaces/"+ (WorkspaceSid==null? "" : System.Uri.EscapeDataString(WorkspaceSid))+"/Tasks/"+ (Sid==null? "" : System.Uri.EscapeDataString(Sid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// FetchTask v1/Workspaces/{WorkspaceSid}/Tasks/{Sid}
		/// </summary>
		/// <param name="WorkspaceSid">The SID of the Workspace with the Task to fetch.
		/// Min length: 34
		/// Max length: 34
		// </param>
		/// <param name="Sid">The SID of the Task resource to fetch.
		/// Min length: 34
		/// Max length: 34
		// </param>
		/// <returns>OK</returns>
		public async Task<Taskrouterv1workspacetask> FetchTaskAsync(string WorkspaceSid, string Sid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/Workspaces/"+ (WorkspaceSid==null? "" : System.Uri.EscapeDataString(WorkspaceSid))+"/Tasks/"+ (Sid==null? "" : System.Uri.EscapeDataString(Sid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Taskrouterv1workspacetask>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ListTaskReservation v1/Workspaces/{WorkspaceSid}/Tasks/{TaskSid}/Reservations
		/// </summary>
		/// <param name="WorkspaceSid">The SID of the Workspace with the TaskReservation resources to read.
		/// Min length: 34
		/// Max length: 34
		// </param>
		/// <param name="TaskSid">The SID of the reserved Task resource with the TaskReservation resources to read.
		/// Min length: 34
		/// Max length: 34
		// </param>
		/// <param name="ReservationStatus">Returns the list of reservations for a task with a specified ReservationStatus.  Can be: `pending`, `accepted`, `rejected`, or `timeout`.</param>
		/// <param name="WorkerSid">The SID of the reserved Worker resource to read.
		/// Min length: 34
		/// Max length: 34
		// </param>
		/// <param name="PageSize">How many resources to return in each list page. The default is 50, and the maximum is 1000.
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="Page">The page index. This value is simply for client state.
		/// Minimum: 0
		// </param>
		/// <param name="PageToken">The page token. This is provided by the API.</param>
		/// <returns>OK</returns>
		public async Task<ListTaskReservationReturn> ListTaskReservationAsync(string WorkspaceSid, string TaskSid, Task_reservation_enum_status ReservationStatus, string WorkerSid, int PageSize, int Page, string PageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/Workspaces/"+ (WorkspaceSid==null? "" : System.Uri.EscapeDataString(WorkspaceSid))+"/Tasks/"+ (TaskSid==null? "" : System.Uri.EscapeDataString(TaskSid))+"/Reservations&ReservationStatus=" + ReservationStatus+"&WorkerSid=" + (WorkerSid==null? "" : System.Uri.EscapeDataString(WorkerSid))+"&PageSize="+PageSize+"&Page="+Page+"&PageToken=" + (PageToken==null? "" : System.Uri.EscapeDataString(PageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListTaskReservationReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// FetchTaskReservation v1/Workspaces/{WorkspaceSid}/Tasks/{TaskSid}/Reservations/{Sid}
		/// </summary>
		/// <param name="WorkspaceSid">The SID of the Workspace with the TaskReservation resource to fetch.
		/// Min length: 34
		/// Max length: 34
		// </param>
		/// <param name="TaskSid">The SID of the reserved Task resource with the TaskReservation resource to fetch.
		/// Min length: 34
		/// Max length: 34
		// </param>
		/// <param name="Sid">The SID of the TaskReservation resource to fetch.
		/// Min length: 34
		/// Max length: 34
		// </param>
		/// <returns>OK</returns>
		public async Task<Taskrouterv1workspacetasktask_reservation> FetchTaskReservationAsync(string WorkspaceSid, string TaskSid, string Sid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/Workspaces/"+ (WorkspaceSid==null? "" : System.Uri.EscapeDataString(WorkspaceSid))+"/Tasks/"+ (TaskSid==null? "" : System.Uri.EscapeDataString(TaskSid))+"/Reservations/"+ (Sid==null? "" : System.Uri.EscapeDataString(Sid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Taskrouterv1workspacetasktask_reservation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ListWorker v1/Workspaces/{WorkspaceSid}/Workers
		/// </summary>
		/// <param name="WorkspaceSid">The SID of the Workspace with the Workers to read.
		/// Min length: 34
		/// Max length: 34
		// </param>
		/// <param name="ActivityName">The `activity_name` of the Worker resources to read.</param>
		/// <param name="ActivitySid">The `activity_sid` of the Worker resources to read.
		/// Min length: 34
		/// Max length: 34
		// </param>
		/// <param name="Available">Whether to return only Worker resources that are available or unavailable. Can be `true`, `1`, or `yes` to return Worker resources that are available, and `false`, or any value returns the Worker resources that are not available.</param>
		/// <param name="FriendlyName">The `friendly_name` of the Worker resources to read.</param>
		/// <param name="TargetWorkersExpression">Filter by Workers that would match an expression. In addition to fields in the workers' attributes, the expression can include the following worker fields: `sid`, `friendly_name`, `activity_sid`, or `activity_name`</param>
		/// <param name="TaskQueueName">The `friendly_name` of the TaskQueue that the Workers to read are eligible for.</param>
		/// <param name="TaskQueueSid">The SID of the TaskQueue that the Workers to read are eligible for.
		/// Min length: 34
		/// Max length: 34
		// </param>
		/// <param name="Ordering">Sorting parameter for Workers</param>
		/// <param name="PageSize">How many resources to return in each list page. The default is 50, and the maximum is 1000.
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="Page">The page index. This value is simply for client state.
		/// Minimum: 0
		// </param>
		/// <param name="PageToken">The page token. This is provided by the API.</param>
		/// <returns>OK</returns>
		public async Task<ListWorkerReturn> ListWorkerAsync(string WorkspaceSid, string ActivityName, string ActivitySid, string Available, string FriendlyName, string TargetWorkersExpression, string TaskQueueName, string TaskQueueSid, string Ordering, int PageSize, int Page, string PageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/Workspaces/"+ (WorkspaceSid==null? "" : System.Uri.EscapeDataString(WorkspaceSid))+"/Workers&ActivityName=" + (ActivityName==null? "" : System.Uri.EscapeDataString(ActivityName))+"&ActivitySid=" + (ActivitySid==null? "" : System.Uri.EscapeDataString(ActivitySid))+"&Available=" + (Available==null? "" : System.Uri.EscapeDataString(Available))+"&FriendlyName=" + (FriendlyName==null? "" : System.Uri.EscapeDataString(FriendlyName))+"&TargetWorkersExpression=" + (TargetWorkersExpression==null? "" : System.Uri.EscapeDataString(TargetWorkersExpression))+"&TaskQueueName=" + (TaskQueueName==null? "" : System.Uri.EscapeDataString(TaskQueueName))+"&TaskQueueSid=" + (TaskQueueSid==null? "" : System.Uri.EscapeDataString(TaskQueueSid))+"&Ordering=" + (Ordering==null? "" : System.Uri.EscapeDataString(Ordering))+"&PageSize="+PageSize+"&Page="+Page+"&PageToken=" + (PageToken==null? "" : System.Uri.EscapeDataString(PageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListWorkerReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// FetchWorkersCumulativeStatistics v1/Workspaces/{WorkspaceSid}/Workers/CumulativeStatistics
		/// </summary>
		/// <param name="WorkspaceSid">The SID of the Workspace with the resource to fetch.
		/// Min length: 34
		/// Max length: 34
		// </param>
		/// <param name="EndDate">Only calculate statistics from this date and time and earlier, specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.</param>
		/// <param name="Minutes">Only calculate statistics since this many minutes in the past. The default 15 minutes. This is helpful for displaying statistics for the last 15 minutes, 240 minutes (4 hours), and 480 minutes (8 hours) to see trends.</param>
		/// <param name="StartDate">Only calculate statistics from this date and time and later, specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.</param>
		/// <param name="TaskChannel">Only calculate cumulative statistics on this TaskChannel. Can be the TaskChannel's SID or its `unique_name`, such as `voice`, `sms`, or `default`.</param>
		/// <returns>OK</returns>
		public async Task<Taskrouterv1workspaceworkerworkers_cumulative_statistics> FetchWorkersCumulativeStatisticsAsync(string WorkspaceSid, System.DateTimeOffset EndDate, int Minutes, System.DateTimeOffset StartDate, string TaskChannel, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/Workspaces/"+ (WorkspaceSid==null? "" : System.Uri.EscapeDataString(WorkspaceSid))+"/Workers/CumulativeStatistics&EndDate=" + EndDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&Minutes="+Minutes+"&StartDate=" + StartDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&TaskChannel=" + (TaskChannel==null? "" : System.Uri.EscapeDataString(TaskChannel));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Taskrouterv1workspaceworkerworkers_cumulative_statistics>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// FetchWorkersRealTimeStatistics v1/Workspaces/{WorkspaceSid}/Workers/RealTimeStatistics
		/// </summary>
		/// <param name="WorkspaceSid">The SID of the Workspace with the resource to fetch.
		/// Min length: 34
		/// Max length: 34
		// </param>
		/// <param name="TaskChannel">Only calculate real-time statistics on this TaskChannel. Can be the TaskChannel's SID or its `unique_name`, such as `voice`, `sms`, or `default`.</param>
		/// <returns>OK</returns>
		public async Task<Taskrouterv1workspaceworkerworkers_real_time_statistics> FetchWorkersRealTimeStatisticsAsync(string WorkspaceSid, string TaskChannel, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/Workspaces/"+ (WorkspaceSid==null? "" : System.Uri.EscapeDataString(WorkspaceSid))+"/Workers/RealTimeStatistics&TaskChannel=" + (TaskChannel==null? "" : System.Uri.EscapeDataString(TaskChannel));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Taskrouterv1workspaceworkerworkers_real_time_statistics>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// FetchWorkerStatistics v1/Workspaces/{WorkspaceSid}/Workers/Statistics
		/// </summary>
		/// <param name="WorkspaceSid">The SID of the Workspace with the Worker to fetch.
		/// Min length: 34
		/// Max length: 34
		// </param>
		/// <param name="Minutes">Only calculate statistics since this many minutes in the past. The default 15 minutes. This is helpful for displaying statistics for the last 15 minutes, 240 minutes (4 hours), and 480 minutes (8 hours) to see trends.</param>
		/// <param name="StartDate">Only calculate statistics from this date and time and later, specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.</param>
		/// <param name="EndDate">Only calculate statistics from this date and time and earlier, specified in GMT as an [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date-time.</param>
		/// <param name="TaskQueueSid">The SID of the TaskQueue for which to fetch Worker statistics.
		/// Min length: 34
		/// Max length: 34
		// </param>
		/// <param name="TaskQueueName">The `friendly_name` of the TaskQueue for which to fetch Worker statistics.</param>
		/// <param name="FriendlyName">Only include Workers with `friendly_name` values that match this parameter.</param>
		/// <param name="TaskChannel">Only calculate statistics on this TaskChannel. Can be the TaskChannel's SID or its `unique_name`, such as `voice`, `sms`, or `default`.</param>
		/// <returns>OK</returns>
		public async Task<Taskrouterv1workspaceworkerworker_statistics> FetchWorkerStatisticsAsync(string WorkspaceSid, int Minutes, System.DateTimeOffset StartDate, System.DateTimeOffset EndDate, string TaskQueueSid, string TaskQueueName, string FriendlyName, string TaskChannel, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/Workspaces/"+ (WorkspaceSid==null? "" : System.Uri.EscapeDataString(WorkspaceSid))+"/Workers/Statistics&Minutes="+Minutes+"&StartDate=" + StartDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&EndDate=" + EndDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&TaskQueueSid=" + (TaskQueueSid==null? "" : System.Uri.EscapeDataString(TaskQueueSid))+"&TaskQueueName=" + (TaskQueueName==null? "" : System.Uri.EscapeDataString(TaskQueueName))+"&FriendlyName=" + (FriendlyName==null? "" : System.Uri.EscapeDataString(FriendlyName))+"&TaskChannel=" + (TaskChannel==null? "" : System.Uri.EscapeDataString(TaskChannel));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Taskrouterv1workspaceworkerworker_statistics>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// DeleteWorker v1/Workspaces/{WorkspaceSid}/Workers/{Sid}
		/// </summary>
		/// <param name="WorkspaceSid">The SID of the Workspace with the Worker to delete.
		/// Min length: 34
		/// Max length: 34
		// </param>
		/// <param name="Sid">The SID of the Worker resource to delete.
		/// Min length: 34
		/// Max length: 34
		// </param>
		public async Task DeleteWorkerAsync(string WorkspaceSid, string Sid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/Workspaces/"+ (WorkspaceSid==null? "" : System.Uri.EscapeDataString(WorkspaceSid))+"/Workers/"+ (Sid==null? "" : System.Uri.EscapeDataString(Sid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// FetchWorker v1/Workspaces/{WorkspaceSid}/Workers/{Sid}
		/// </summary>
		/// <param name="WorkspaceSid">The SID of the Workspace with the Worker to fetch.
		/// Min length: 34
		/// Max length: 34
		// </param>
		/// <param name="Sid">The SID of the Worker resource to fetch.
		/// Min length: 34
		/// Max length: 34
		// </param>
		/// <returns>OK</returns>
		public async Task<Taskrouterv1workspaceworker> FetchWorkerAsync(string WorkspaceSid, string Sid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/Workspaces/"+ (WorkspaceSid==null? "" : System.Uri.EscapeDataString(WorkspaceSid))+"/Workers/"+ (Sid==null? "" : System.Uri.EscapeDataString(Sid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Taskrouterv1workspaceworker>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ListWorkerChannel v1/Workspaces/{WorkspaceSid}/Workers/{WorkerSid}/Channels
		/// </summary>
		/// <param name="WorkspaceSid">The SID of the Workspace with the WorkerChannels to read.
		/// Min length: 34
		/// Max length: 34
		// </param>
		/// <param name="WorkerSid">The SID of the Worker with the WorkerChannels to read.
		/// Min length: 34
		/// Max length: 34
		// </param>
		/// <param name="PageSize">How many resources to return in each list page. The default is 50, and the maximum is 1000.
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="Page">The page index. This value is simply for client state.
		/// Minimum: 0
		// </param>
		/// <param name="PageToken">The page token. This is provided by the API.</param>
		/// <returns>OK</returns>
		public async Task<ListWorkerChannelReturn> ListWorkerChannelAsync(string WorkspaceSid, string WorkerSid, int PageSize, int Page, string PageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/Workspaces/"+ (WorkspaceSid==null? "" : System.Uri.EscapeDataString(WorkspaceSid))+"/Workers/"+ (WorkerSid==null? "" : System.Uri.EscapeDataString(WorkerSid))+"/Channels&PageSize="+PageSize+"&Page="+Page+"&PageToken=" + (PageToken==null? "" : System.Uri.EscapeDataString(PageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListWorkerChannelReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// FetchWorkerChannel v1/Workspaces/{WorkspaceSid}/Workers/{WorkerSid}/Channels/{Sid}
		/// </summary>
		/// <param name="WorkspaceSid">The SID of the Workspace with the WorkerChannel to fetch.
		/// Min length: 34
		/// Max length: 34
		// </param>
		/// <param name="WorkerSid">The SID of the Worker with the WorkerChannel to fetch.
		/// Min length: 34
		/// Max length: 34
		// </param>
		/// <param name="Sid">The SID of the WorkerChannel to fetch.</param>
		/// <returns>OK</returns>
		public async Task<Taskrouterv1workspaceworkerworker_channel> FetchWorkerChannelAsync(string WorkspaceSid, string WorkerSid, string Sid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/Workspaces/"+ (WorkspaceSid==null? "" : System.Uri.EscapeDataString(WorkspaceSid))+"/Workers/"+ (WorkerSid==null? "" : System.Uri.EscapeDataString(WorkerSid))+"/Channels/"+ (Sid==null? "" : System.Uri.EscapeDataString(Sid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Taskrouterv1workspaceworkerworker_channel>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ListWorkerReservation v1/Workspaces/{WorkspaceSid}/Workers/{WorkerSid}/Reservations
		/// </summary>
		/// <param name="WorkspaceSid">The SID of the Workspace with the WorkerReservation resources to read.
		/// Min length: 34
		/// Max length: 34
		// </param>
		/// <param name="WorkerSid">The SID of the reserved Worker resource with the WorkerReservation resources to read.
		/// Min length: 34
		/// Max length: 34
		// </param>
		/// <param name="ReservationStatus">Returns the list of reservations for a worker with a specified ReservationStatus. Can be: `pending`, `accepted`, `rejected`, `timeout`, `canceled`, or `rescinded`.</param>
		/// <param name="PageSize">How many resources to return in each list page. The default is 50, and the maximum is 1000.
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="Page">The page index. This value is simply for client state.
		/// Minimum: 0
		// </param>
		/// <param name="PageToken">The page token. This is provided by the API.</param>
		/// <returns>OK</returns>
		public async Task<ListWorkerReservationReturn> ListWorkerReservationAsync(string WorkspaceSid, string WorkerSid, Task_reservation_enum_status ReservationStatus, int PageSize, int Page, string PageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/Workspaces/"+ (WorkspaceSid==null? "" : System.Uri.EscapeDataString(WorkspaceSid))+"/Workers/"+ (WorkerSid==null? "" : System.Uri.EscapeDataString(WorkerSid))+"/Reservations&ReservationStatus=" + ReservationStatus+"&PageSize="+PageSize+"&Page="+Page+"&PageToken=" + (PageToken==null? "" : System.Uri.EscapeDataString(PageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListWorkerReservationReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// FetchWorkerReservation v1/Workspaces/{WorkspaceSid}/Workers/{WorkerSid}/Reservations/{Sid}
		/// </summary>
		/// <param name="WorkspaceSid">The SID of the Workspace with the WorkerReservation resource to fetch.
		/// Min length: 34
		/// Max length: 34
		// </param>
		/// <param name="WorkerSid">The SID of the reserved Worker resource with the WorkerReservation resource to fetch.
		/// Min length: 34
		/// Max length: 34
		// </param>
		/// <param name="Sid">The SID of the WorkerReservation resource to fetch.
		/// Min length: 34
		/// Max length: 34
		// </param>
		/// <returns>OK</returns>
		public async Task<Taskrouterv1workspaceworkerworker_reservation> FetchWorkerReservationAsync(string WorkspaceSid, string WorkerSid, string Sid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/Workspaces/"+ (WorkspaceSid==null? "" : System.Uri.EscapeDataString(WorkspaceSid))+"/Workers/"+ (WorkerSid==null? "" : System.Uri.EscapeDataString(WorkerSid))+"/Reservations/"+ (Sid==null? "" : System.Uri.EscapeDataString(Sid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Taskrouterv1workspaceworkerworker_reservation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// FetchWorkerInstanceStatistics v1/Workspaces/{WorkspaceSid}/Workers/{WorkerSid}/Statistics
		/// </summary>
		/// <param name="WorkspaceSid">The SID of the Workspace with the WorkerChannel to fetch.
		/// Min length: 34
		/// Max length: 34
		// </param>
		/// <param name="WorkerSid">The SID of the Worker with the WorkerChannel to fetch.
		/// Min length: 34
		/// Max length: 34
		// </param>
		/// <param name="Minutes">Only calculate statistics since this many minutes in the past. The default 15 minutes. This is helpful for displaying statistics for the last 15 minutes, 240 minutes (4 hours), and 480 minutes (8 hours) to see trends.</param>
		/// <param name="StartDate">Only calculate statistics from this date and time and later, specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.</param>
		/// <param name="EndDate">Only include usage that occurred on or before this date, specified in GMT as an [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date-time.</param>
		/// <param name="TaskChannel">Only calculate statistics on this TaskChannel. Can be the TaskChannel's SID or its `unique_name`, such as `voice`, `sms`, or `default`.</param>
		/// <returns>OK</returns>
		public async Task<Taskrouterv1workspaceworkerworker_instance_statistics> FetchWorkerInstanceStatisticsAsync(string WorkspaceSid, string WorkerSid, int Minutes, System.DateTimeOffset StartDate, System.DateTimeOffset EndDate, string TaskChannel, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/Workspaces/"+ (WorkspaceSid==null? "" : System.Uri.EscapeDataString(WorkspaceSid))+"/Workers/"+ (WorkerSid==null? "" : System.Uri.EscapeDataString(WorkerSid))+"/Statistics&Minutes="+Minutes+"&StartDate=" + StartDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&EndDate=" + EndDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&TaskChannel=" + (TaskChannel==null? "" : System.Uri.EscapeDataString(TaskChannel));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Taskrouterv1workspaceworkerworker_instance_statistics>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ListWorkflow v1/Workspaces/{WorkspaceSid}/Workflows
		/// </summary>
		/// <param name="WorkspaceSid">The SID of the Workspace with the Workflow to read.
		/// Min length: 34
		/// Max length: 34
		// </param>
		/// <param name="FriendlyName">The `friendly_name` of the Workflow resources to read.</param>
		/// <param name="PageSize">How many resources to return in each list page. The default is 50, and the maximum is 1000.
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="Page">The page index. This value is simply for client state.
		/// Minimum: 0
		// </param>
		/// <param name="PageToken">The page token. This is provided by the API.</param>
		/// <returns>OK</returns>
		public async Task<ListWorkflowReturn> ListWorkflowAsync(string WorkspaceSid, string FriendlyName, int PageSize, int Page, string PageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/Workspaces/"+ (WorkspaceSid==null? "" : System.Uri.EscapeDataString(WorkspaceSid))+"/Workflows&FriendlyName=" + (FriendlyName==null? "" : System.Uri.EscapeDataString(FriendlyName))+"&PageSize="+PageSize+"&Page="+Page+"&PageToken=" + (PageToken==null? "" : System.Uri.EscapeDataString(PageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListWorkflowReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// DeleteWorkflow v1/Workspaces/{WorkspaceSid}/Workflows/{Sid}
		/// </summary>
		/// <param name="WorkspaceSid">The SID of the Workspace with the Workflow to delete.
		/// Min length: 34
		/// Max length: 34
		// </param>
		/// <param name="Sid">The SID of the Workflow resource to delete.
		/// Min length: 34
		/// Max length: 34
		// </param>
		public async Task DeleteWorkflowAsync(string WorkspaceSid, string Sid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/Workspaces/"+ (WorkspaceSid==null? "" : System.Uri.EscapeDataString(WorkspaceSid))+"/Workflows/"+ (Sid==null? "" : System.Uri.EscapeDataString(Sid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// FetchWorkflow v1/Workspaces/{WorkspaceSid}/Workflows/{Sid}
		/// </summary>
		/// <param name="WorkspaceSid">The SID of the Workspace with the Workflow to fetch.
		/// Min length: 34
		/// Max length: 34
		// </param>
		/// <param name="Sid">The SID of the Workflow resource to fetch.
		/// Min length: 34
		/// Max length: 34
		// </param>
		/// <returns>OK</returns>
		public async Task<Taskrouterv1workspaceworkflow> FetchWorkflowAsync(string WorkspaceSid, string Sid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/Workspaces/"+ (WorkspaceSid==null? "" : System.Uri.EscapeDataString(WorkspaceSid))+"/Workflows/"+ (Sid==null? "" : System.Uri.EscapeDataString(Sid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Taskrouterv1workspaceworkflow>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// FetchWorkflowCumulativeStatistics v1/Workspaces/{WorkspaceSid}/Workflows/{WorkflowSid}/CumulativeStatistics
		/// </summary>
		/// <param name="WorkspaceSid">The SID of the Workspace with the resource to fetch.
		/// Min length: 34
		/// Max length: 34
		// </param>
		/// <param name="WorkflowSid">Returns the list of Tasks that are being controlled by the Workflow with the specified Sid value.
		/// Min length: 34
		/// Max length: 34
		// </param>
		/// <param name="EndDate">Only include usage that occurred on or before this date, specified in GMT as an [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date-time.</param>
		/// <param name="Minutes">Only calculate statistics since this many minutes in the past. The default 15 minutes. This is helpful for displaying statistics for the last 15 minutes, 240 minutes (4 hours), and 480 minutes (8 hours) to see trends.</param>
		/// <param name="StartDate">Only calculate statistics from this date and time and later, specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.</param>
		/// <param name="TaskChannel">Only calculate cumulative statistics on this TaskChannel. Can be the TaskChannel's SID or its `unique_name`, such as `voice`, `sms`, or `default`.</param>
		/// <param name="SplitByWaitTime">A comma separated list of values that describes the thresholds, in seconds, to calculate statistics on. For each threshold specified, the number of Tasks canceled and reservations accepted above and below the specified thresholds in seconds are computed. For example, `5,30` would show splits of Tasks that were canceled or accepted before and after 5 seconds and before and after 30 seconds. This can be used to show short abandoned Tasks or Tasks that failed to meet an SLA. TaskRouter will calculate statistics on up to 10,000 Tasks for any given threshold.</param>
		/// <returns>OK</returns>
		public async Task<Taskrouterv1workspaceworkflowworkflow_cumulative_statistics> FetchWorkflowCumulativeStatisticsAsync(string WorkspaceSid, string WorkflowSid, System.DateTimeOffset EndDate, int Minutes, System.DateTimeOffset StartDate, string TaskChannel, string SplitByWaitTime, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/Workspaces/"+ (WorkspaceSid==null? "" : System.Uri.EscapeDataString(WorkspaceSid))+"/Workflows/"+ (WorkflowSid==null? "" : System.Uri.EscapeDataString(WorkflowSid))+"/CumulativeStatistics&EndDate=" + EndDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&Minutes="+Minutes+"&StartDate=" + StartDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&TaskChannel=" + (TaskChannel==null? "" : System.Uri.EscapeDataString(TaskChannel))+"&SplitByWaitTime=" + (SplitByWaitTime==null? "" : System.Uri.EscapeDataString(SplitByWaitTime));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Taskrouterv1workspaceworkflowworkflow_cumulative_statistics>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// FetchWorkflowRealTimeStatistics v1/Workspaces/{WorkspaceSid}/Workflows/{WorkflowSid}/RealTimeStatistics
		/// </summary>
		/// <param name="WorkspaceSid">The SID of the Workspace with the Workflow to fetch.
		/// Min length: 34
		/// Max length: 34
		// </param>
		/// <param name="WorkflowSid">Returns the list of Tasks that are being controlled by the Workflow with the specified SID value.
		/// Min length: 34
		/// Max length: 34
		// </param>
		/// <param name="TaskChannel">Only calculate real-time statistics on this TaskChannel. Can be the TaskChannel's SID or its `unique_name`, such as `voice`, `sms`, or `default`.</param>
		/// <returns>OK</returns>
		public async Task<Taskrouterv1workspaceworkflowworkflow_real_time_statistics> FetchWorkflowRealTimeStatisticsAsync(string WorkspaceSid, string WorkflowSid, string TaskChannel, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/Workspaces/"+ (WorkspaceSid==null? "" : System.Uri.EscapeDataString(WorkspaceSid))+"/Workflows/"+ (WorkflowSid==null? "" : System.Uri.EscapeDataString(WorkflowSid))+"/RealTimeStatistics&TaskChannel=" + (TaskChannel==null? "" : System.Uri.EscapeDataString(TaskChannel));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Taskrouterv1workspaceworkflowworkflow_real_time_statistics>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// FetchWorkflowStatistics v1/Workspaces/{WorkspaceSid}/Workflows/{WorkflowSid}/Statistics
		/// </summary>
		/// <param name="WorkspaceSid">The SID of the Workspace with the Workflow to fetch.
		/// Min length: 34
		/// Max length: 34
		// </param>
		/// <param name="WorkflowSid">Returns the list of Tasks that are being controlled by the Workflow with the specified SID value.
		/// Min length: 34
		/// Max length: 34
		// </param>
		/// <param name="Minutes">Only calculate statistics since this many minutes in the past. The default 15 minutes. This is helpful for displaying statistics for the last 15 minutes, 240 minutes (4 hours), and 480 minutes (8 hours) to see trends.</param>
		/// <param name="StartDate">Only calculate statistics from this date and time and later, specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.</param>
		/// <param name="EndDate">Only calculate statistics from this date and time and earlier, specified in GMT as an [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date-time.</param>
		/// <param name="TaskChannel">Only calculate real-time statistics on this TaskChannel. Can be the TaskChannel's SID or its `unique_name`, such as `voice`, `sms`, or `default`.</param>
		/// <param name="SplitByWaitTime">A comma separated list of values that describes the thresholds, in seconds, to calculate statistics on. For each threshold specified, the number of Tasks canceled and reservations accepted above and below the specified thresholds in seconds are computed. For example, `5,30` would show splits of Tasks that were canceled or accepted before and after 5 seconds and before and after 30 seconds. This can be used to show short abandoned Tasks or Tasks that failed to meet an SLA.</param>
		/// <returns>OK</returns>
		public async Task<Taskrouterv1workspaceworkflowworkflow_statistics> FetchWorkflowStatisticsAsync(string WorkspaceSid, string WorkflowSid, int Minutes, System.DateTimeOffset StartDate, System.DateTimeOffset EndDate, string TaskChannel, string SplitByWaitTime, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/Workspaces/"+ (WorkspaceSid==null? "" : System.Uri.EscapeDataString(WorkspaceSid))+"/Workflows/"+ (WorkflowSid==null? "" : System.Uri.EscapeDataString(WorkflowSid))+"/Statistics&Minutes="+Minutes+"&StartDate=" + StartDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&EndDate=" + EndDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&TaskChannel=" + (TaskChannel==null? "" : System.Uri.EscapeDataString(TaskChannel))+"&SplitByWaitTime=" + (SplitByWaitTime==null? "" : System.Uri.EscapeDataString(SplitByWaitTime));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Taskrouterv1workspaceworkflowworkflow_statistics>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public class ListWorkspaceReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public ListWorkspaceReturnMeta Meta { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="workspaces")]
		public Taskrouterv1workspace[] Workspaces { get; set; }
	}
	
	public class ListWorkspaceReturnMeta
	{
		
		[System.Runtime.Serialization.DataMember(Name="first_page_url")]
		public string First_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="next_page_url")]
		public string Next_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page_size")]
		public System.Nullable<System.Int32> Page_size { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="previous_page_url")]
		public string Previous_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class ListActivityReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="activities")]
		public Taskrouterv1workspaceactivity[] Activities { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public ListActivityReturnMeta Meta { get; set; }
	}
	
	public class ListActivityReturnMeta
	{
		
		[System.Runtime.Serialization.DataMember(Name="first_page_url")]
		public string First_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="next_page_url")]
		public string Next_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page_size")]
		public System.Nullable<System.Int32> Page_size { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="previous_page_url")]
		public string Previous_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class ListEventReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="events")]
		public Taskrouterv1workspaceevent[] Events { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public ListEventReturnMeta Meta { get; set; }
	}
	
	public class ListEventReturnMeta
	{
		
		[System.Runtime.Serialization.DataMember(Name="first_page_url")]
		public string First_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="next_page_url")]
		public string Next_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page_size")]
		public System.Nullable<System.Int32> Page_size { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="previous_page_url")]
		public string Previous_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class ListTaskChannelReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="channels")]
		public Taskrouterv1workspacetask_channel[] Channels { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public ListTaskChannelReturnMeta Meta { get; set; }
	}
	
	public class ListTaskChannelReturnMeta
	{
		
		[System.Runtime.Serialization.DataMember(Name="first_page_url")]
		public string First_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="next_page_url")]
		public string Next_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page_size")]
		public System.Nullable<System.Int32> Page_size { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="previous_page_url")]
		public string Previous_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class ListTaskQueueReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public ListTaskQueueReturnMeta Meta { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="task_queues")]
		public Taskrouterv1workspacetask_queue[] Task_queues { get; set; }
	}
	
	public class ListTaskQueueReturnMeta
	{
		
		[System.Runtime.Serialization.DataMember(Name="first_page_url")]
		public string First_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="next_page_url")]
		public string Next_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page_size")]
		public System.Nullable<System.Int32> Page_size { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="previous_page_url")]
		public string Previous_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class ListTaskQueuesStatisticsReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public ListTaskQueuesStatisticsReturnMeta Meta { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="task_queues_statistics")]
		public Taskrouterv1workspacetask_queuetask_queues_statistics[] Task_queues_statistics { get; set; }
	}
	
	public class ListTaskQueuesStatisticsReturnMeta
	{
		
		[System.Runtime.Serialization.DataMember(Name="first_page_url")]
		public string First_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="next_page_url")]
		public string Next_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page_size")]
		public System.Nullable<System.Int32> Page_size { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="previous_page_url")]
		public string Previous_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class ListTaskReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public ListTaskReturnMeta Meta { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tasks")]
		public Taskrouterv1workspacetask[] Tasks { get; set; }
	}
	
	public class ListTaskReturnMeta
	{
		
		[System.Runtime.Serialization.DataMember(Name="first_page_url")]
		public string First_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="next_page_url")]
		public string Next_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page_size")]
		public System.Nullable<System.Int32> Page_size { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="previous_page_url")]
		public string Previous_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class ListTaskReservationReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public ListTaskReservationReturnMeta Meta { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reservations")]
		public Taskrouterv1workspacetasktask_reservation[] Reservations { get; set; }
	}
	
	public class ListTaskReservationReturnMeta
	{
		
		[System.Runtime.Serialization.DataMember(Name="first_page_url")]
		public string First_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="next_page_url")]
		public string Next_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page_size")]
		public System.Nullable<System.Int32> Page_size { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="previous_page_url")]
		public string Previous_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class ListWorkerReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public ListWorkerReturnMeta Meta { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="workers")]
		public Taskrouterv1workspaceworker[] Workers { get; set; }
	}
	
	public class ListWorkerReturnMeta
	{
		
		[System.Runtime.Serialization.DataMember(Name="first_page_url")]
		public string First_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="next_page_url")]
		public string Next_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page_size")]
		public System.Nullable<System.Int32> Page_size { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="previous_page_url")]
		public string Previous_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class ListWorkerChannelReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="channels")]
		public Taskrouterv1workspaceworkerworker_channel[] Channels { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public ListWorkerChannelReturnMeta Meta { get; set; }
	}
	
	public class ListWorkerChannelReturnMeta
	{
		
		[System.Runtime.Serialization.DataMember(Name="first_page_url")]
		public string First_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="next_page_url")]
		public string Next_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page_size")]
		public System.Nullable<System.Int32> Page_size { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="previous_page_url")]
		public string Previous_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class ListWorkerReservationReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public ListWorkerReservationReturnMeta Meta { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reservations")]
		public Taskrouterv1workspaceworkerworker_reservation[] Reservations { get; set; }
	}
	
	public class ListWorkerReservationReturnMeta
	{
		
		[System.Runtime.Serialization.DataMember(Name="first_page_url")]
		public string First_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="next_page_url")]
		public string Next_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page_size")]
		public System.Nullable<System.Int32> Page_size { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="previous_page_url")]
		public string Previous_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class ListWorkflowReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public ListWorkflowReturnMeta Meta { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="workflows")]
		public Taskrouterv1workspaceworkflow[] Workflows { get; set; }
	}
	
	public class ListWorkflowReturnMeta
	{
		
		[System.Runtime.Serialization.DataMember(Name="first_page_url")]
		public string First_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="next_page_url")]
		public string Next_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page_size")]
		public System.Nullable<System.Int32> Page_size { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="previous_page_url")]
		public string Previous_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
