//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// An instance of a Callback created by an execution.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Callback
	{
		
		/// <summary>
		/// Output only. The payloads received by the callback that have not been processed by a waiting execution step.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availablePayloads")]
		public string[] AvailablePayloads { get; set; }
		
		/// <summary>
		/// Output only. The method accepted by the callback. For example: GET, POST, PUT.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="method")]
		public string Method { get; set; }
		
		/// <summary>
		/// Output only. The resource name of the callback. Format: projects/{project}/locations/{location}/workflows/{workflow}/executions/{execution}/callback/{callback}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Output only. Number of execution steps waiting on this callback.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="waiters")]
		public string Waiters { get; set; }
	}
	
	/// <summary>
	/// Request for the CancelExecution method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CancelExecutionRequest
	{
	}
	
	/// <summary>
	/// Error describes why the execution was abnormally terminated.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Error
	{
		
		/// <summary>
		/// Human-readable stack trace string.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="context")]
		public string Context { get; set; }
		
		/// <summary>
		/// Error message and data returned represented as a JSON string.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payload")]
		public string Payload { get; set; }
		
		/// <summary>
		/// A collection of stack elements (frames) where an error occurred.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stackTrace")]
		public StackTrace StackTrace { get; set; }
	}
	
	/// <summary>
	/// A collection of stack elements (frames) where an error occurred.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StackTrace
	{
		
		/// <summary>
		/// An array of stack elements.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="elements")]
		public StackTraceElement[] Elements { get; set; }
	}
	
	/// <summary>
	/// A single stack element (frame) where an error occurred.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StackTraceElement
	{
		
		/// <summary>
		/// Position contains source position information about the stack trace element such as line number, column number and length of the code block in bytes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="position")]
		public Position Position { get; set; }
		
		/// <summary>
		/// The routine where the error occurred.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="routine")]
		public string Routine { get; set; }
		
		/// <summary>
		/// The step the error occurred at.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="step")]
		public string Step { get; set; }
	}
	
	/// <summary>
	/// Position contains source position information about the stack trace element such as line number, column number and length of the code block in bytes.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Position
	{
		
		/// <summary>
		/// The source code column position (of the line) the current instruction was generated from.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="column")]
		public string Column { get; set; }
		
		/// <summary>
		/// The number of bytes of source code making up this stack trace element.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="length")]
		public string Length { get; set; }
		
		/// <summary>
		/// The source code line number the current instruction was generated from.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="line")]
		public string Line { get; set; }
	}
	
	/// <summary>
	/// Exception describes why the step entry failed.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Exception
	{
		
		/// <summary>
		/// Error message represented as a JSON string.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payload")]
		public string Payload { get; set; }
	}
	
	/// <summary>
	/// A running instance of a [Workflow](/workflows/docs/reference/rest/v1/projects.locations.workflows).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Execution
	{
		
		/// <summary>
		/// Input parameters of the execution represented as a JSON string. The size limit is 32KB. *Note*: If you are using the REST API directly to run your workflow, you must escape any JSON string value of `argument`. Example: `'{"argument":"{\"firstName\":\"FIRST\",\"lastName\":\"LAST\"}"}'`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="argument")]
		public string Argument { get; set; }
		
		/// <summary>
		/// The call logging level associated to this execution.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="callLogLevel")]
		public System.Nullable<ExecutionCallLogLevel> CallLogLevel { get; set; }
		
		/// <summary>
		/// Output only. Measures the duration of the execution.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="duration")]
		public string Duration { get; set; }
		
		/// <summary>
		/// Output only. Marks the end of execution, successful or not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public string EndTime { get; set; }
		
		/// <summary>
		/// Error describes why the execution was abnormally terminated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public Error Error { get; set; }
		
		/// <summary>
		/// Labels associated with this execution. Labels can contain at most 64 entries. Keys and values can be no longer than 63 characters and can only contain lowercase letters, numeric characters, underscores, and dashes. Label keys must start with a letter. International characters are allowed. By default, labels are inherited from the workflow but are overridden by any labels associated with the execution.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// Output only. The resource name of the execution. Format: projects/{project}/locations/{location}/workflows/{workflow}/executions/{execution}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Output only. Output of the execution represented as a JSON string. The value can only be present if the execution's state is `SUCCEEDED`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="result")]
		public string Result { get; set; }
		
		/// <summary>
		/// Output only. Marks the beginning of execution.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public string StartTime { get; set; }
		
		/// <summary>
		/// Output only. Current state of the execution.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<ExecutionState> State { get; set; }
		
		/// <summary>
		/// Describes an error related to the current state of the Execution resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stateError")]
		public StateError StateError { get; set; }
		
		/// <summary>
		/// Represents the current status of this execution.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public Status Status { get; set; }
		
		/// <summary>
		/// Output only. Revision of the workflow this execution is using.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workflowRevisionId")]
		public string WorkflowRevisionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ExecutionCallLogLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CALL_LOG_LEVEL_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOG_ALL_CALLS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOG_ERRORS_ONLY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOG_NONE = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ExecutionState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCEEDED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELLED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNAVAILABLE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUEUED = 6,
	}
	
	/// <summary>
	/// Describes an error related to the current state of the Execution resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StateError
	{
		
		/// <summary>
		/// Provides specifics about the error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string Details { get; set; }
		
		/// <summary>
		/// The type of this state error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<StateErrorType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum StateErrorType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KMS_ERROR = 1,
	}
	
	/// <summary>
	/// Represents the current status of this execution.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Status
	{
		
		/// <summary>
		/// A list of currently executing or last executed step names for the workflow execution currently running. If the workflow has succeeded or failed, this is the last attempted or executed step. Presently, if the current step is inside a subworkflow, the list only includes that step. In the future, the list will contain items for each step in the call stack, starting with the outermost step in the `main` subworkflow, and ending with the most deeply nested step.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentSteps")]
		public Step[] CurrentSteps { get; set; }
	}
	
	/// <summary>
	/// Represents a step of the workflow this execution is running.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Step
	{
		
		/// <summary>
		/// Name of a routine within the workflow.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="routine")]
		public string Routine { get; set; }
		
		/// <summary>
		/// Name of a step within the routine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="step")]
		public string Step1 { get; set; }
	}
	
	/// <summary>
	/// Response for the ExportData method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ExportDataResponse
	{
		
		/// <summary>
		/// The JSON string with customer data and metadata for an execution with the given name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string Data { get; set; }
	}
	
	/// <summary>
	/// RPC response object for the ListCallbacks method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListCallbacksResponse
	{
		
		/// <summary>
		/// The callbacks which match the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="callbacks")]
		public Callback[] Callbacks { get; set; }
		
		/// <summary>
		/// A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Response for the ListExecutions method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListExecutionsResponse
	{
		
		/// <summary>
		/// The executions which match the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="executions")]
		public Execution[] Executions { get; set; }
		
		/// <summary>
		/// A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Response message for ExecutionHistory.ListStepEntries.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListStepEntriesResponse
	{
		
		/// <summary>
		/// A token to retrieve next page of results. Pass this value in the ListStepEntriesRequest.page_token field in the subsequent call to `ListStepEntries` method to retrieve the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// The list of entries.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stepEntries")]
		public StepEntry[] StepEntries { get; set; }
		
		/// <summary>
		/// Indicates the total number of StepEntries that matched the request filter. For running executions, this number shows the number of StepEntries that are executed thus far.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalSize")]
		public System.Nullable<System.Int32> TotalSize { get; set; }
	}
	
	/// <summary>
	/// An StepEntry contains debugging information for a step transition in a workflow execution.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StepEntry
	{
		
		/// <summary>
		/// Output only. The creation time of the step entry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// Output only. The numeric ID of this step entry, used for navigation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entryId")]
		public string EntryId { get; set; }
		
		/// <summary>
		/// Exception describes why the step entry failed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exception")]
		public Exception Exception { get; set; }
		
		/// <summary>
		/// Output only. The full resource name of the step entry. Each step entry has a unique entry ID, which is a monotonically increasing counter. Step entry names have the format: `projects/{project}/locations/{location}/workflows/{workflow}/executions/{execution}/stepEntries/{step_entry}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// NavigationInfo describes what steps if any come before or after this step, or what steps are parents or children of this step.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="navigationInfo")]
		public NavigationInfo NavigationInfo { get; set; }
		
		/// <summary>
		/// Output only. The name of the routine this step entry belongs to. A routine name is the subworkflow name defined in the YAML source code. The top level routine name is `main`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="routine")]
		public string Routine { get; set; }
		
		/// <summary>
		/// Output only. The state of the step entry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<StepEntryState> State { get; set; }
		
		/// <summary>
		/// Output only. The name of the step this step entry belongs to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="step")]
		public string Step { get; set; }
		
		/// <summary>
		/// StepEntryMetadata contains metadata information about this step.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stepEntryMetadata")]
		public StepEntryMetadata StepEntryMetadata { get; set; }
		
		/// <summary>
		/// Output only. The type of the step this step entry belongs to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stepType")]
		public System.Nullable<StepEntryStepType> StepType { get; set; }
		
		/// <summary>
		/// Output only. The most recently updated time of the step entry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
	}
	
	/// <summary>
	/// NavigationInfo describes what steps if any come before or after this step, or what steps are parents or children of this step.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NavigationInfo
	{
		
		/// <summary>
		/// Step entries that can be reached by "stepping into" e.g. a subworkflow call.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="children")]
		public string[] Children { get; set; }
		
		/// <summary>
		/// The index of the next step in the current workflow, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="next")]
		public string Next { get; set; }
		
		/// <summary>
		/// The step entry, if any, that can be reached by "stepping out" of the current workflow being executed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parent")]
		public string Parent { get; set; }
		
		/// <summary>
		/// The index of the previous step in the current workflow, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="previous")]
		public string Previous { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum StepEntryState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATE_IN_PROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATE_SUCCEEDED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATE_FAILED = 3,
	}
	
	/// <summary>
	/// StepEntryMetadata contains metadata information about this step.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StepEntryMetadata
	{
		
		/// <summary>
		/// Progress number represents the current state of the current progress. eg: A step entry represents the 4th iteration in a progress of PROGRESS_TYPE_FOR.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="progressNumber")]
		public string ProgressNumber { get; set; }
		
		/// <summary>
		/// Progress type of this step entry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="progressType")]
		public System.Nullable<StepEntryMetadataProgressType> ProgressType { get; set; }
		
		/// <summary>
		/// Child thread id that this step entry belongs to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="threadId")]
		public string ThreadId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum StepEntryMetadataProgressType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROGRESS_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROGRESS_TYPE_FOR = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROGRESS_TYPE_SWITCH = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROGRESS_TYPE_RETRY = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROGRESS_TYPE_PARALLEL_FOR = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROGRESS_TYPE_PARALLEL_BRANCH = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum StepEntryStepType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STEP_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STEP_ASSIGN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STEP_STD_LIB_CALL = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STEP_CONNECTOR_CALL = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STEP_SUBWORKFLOW_CALL = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STEP_CALL = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STEP_SWITCH = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STEP_CONDITION = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STEP_FOR = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STEP_FOR_ITERATION = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STEP_PARALLEL_FOR = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STEP_PARALLEL_BRANCH = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STEP_PARALLEL_BRANCH_ENTRY = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STEP_TRY_RETRY_EXCEPT = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STEP_TRY = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STEP_RETRY = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STEP_EXCEPT = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STEP_RETURN = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STEP_RAISE = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STEP_GOTO = 19,
	}
	
	/// <summary>
	/// A message that is published by publishers and consumed by subscribers. The message must contain either a non-empty data field or at least one attribute. Note that client libraries represent this object differently depending on the language. See the corresponding [client library documentation](https://cloud.google.com/pubsub/docs/reference/libraries) for more information. See [quotas and limits] (https://cloud.google.com/pubsub/quotas) for more information about message limits.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PubsubMessage
	{
		
		/// <summary>
		/// Optional. Attributes for this message. If this field is empty, the message must contain non-empty data. This can be used to filter messages on the subscription.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public System.Collections.Generic.Dictionary<string, string> Attributes { get; set; }
		
		/// <summary>
		/// Optional. The message data field. If this field is empty, the message must contain at least one attribute.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string Data { get; set; }
		
		/// <summary>
		/// Optional. ID of this message, assigned by the server when the message is published. Guaranteed to be unique within the topic. This value may be read by a subscriber that receives a `PubsubMessage` via a `Pull` call or a push delivery. It must not be populated by the publisher in a `Publish` call.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="messageId")]
		public string MessageId { get; set; }
		
		/// <summary>
		/// Optional. If non-empty, identifies related messages for which publish order should be respected. If a `Subscription` has `enable_message_ordering` set to `true`, messages published with the same non-empty `ordering_key` value will be delivered to subscribers in the order in which they are received by the Pub/Sub system. All `PubsubMessage`s published in a given `PublishRequest` must specify the same `ordering_key` value. For more information, see [ordering messages](https://cloud.google.com/pubsub/docs/ordering).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orderingKey")]
		public string OrderingKey { get; set; }
		
		/// <summary>
		/// Optional. The time at which the message was published, populated by the server when it receives the `Publish` call. It must not be populated by the publisher in a `Publish` call.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publishTime")]
		public string PublishTime { get; set; }
	}
	
	/// <summary>
	/// Request for the TriggerPubsubExecution method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TriggerPubsubExecutionRequest
	{
		
		/// <summary>
		/// Required. LINT: LEGACY_NAMES The query parameter value for __GCP_CloudEventsMode, set by the Eventarc service when configuring triggers.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string GCPCloudEventsMode { get; set; }
		
		/// <summary>
		/// The number of attempts that have been made to deliver this message. This is set by Pub/Sub for subscriptions that have the "dead letter" feature enabled, and hence provided here for compatibility, but is ignored by Workflows.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deliveryAttempt")]
		public System.Nullable<System.Int32> DeliveryAttempt { get; set; }
		
		/// <summary>
		/// A message that is published by publishers and consumed by subscribers. The message must contain either a non-empty data field or at least one attribute. Note that client libraries represent this object differently depending on the language. See the corresponding [client library documentation](https://cloud.google.com/pubsub/docs/reference/libraries) for more information. See [quotas and limits] (https://cloud.google.com/pubsub/quotas) for more information about message limits.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public PubsubMessage Message { get; set; }
		
		/// <summary>
		/// Required. The subscription of the Pub/Sub push notification. Format: projects/{project}/subscriptions/{sub}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subscription")]
		public string Subscription { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Gets a step entry.
		/// Workflowexecutions_projects_locations_workflows_executions_stepEntries_get v1/{name}
		/// </summary>
		/// <param name="name">Required. The name of the step entry to retrieve. Format: projects/{project}/locations/{location}/workflows/{workflow}/executions/{execution}/stepEntries/{step_entry}</param>
		/// <param name="view">Optional. A view defining which fields should be filled in the returned execution. The API will default to the FULL view.</param>
		/// <returns>Successful response</returns>
		public async Task<StepEntry> Workflowexecutions_projects_locations_workflows_executions_stepEntries_getAsync(string name, Workflowexecutions_projects_locations_workflows_executions_stepEntries_getView view, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&view=" + view;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StepEntry>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Cancels an execution of the given name.
		/// Workflowexecutions_projects_locations_workflows_executions_cancel v1/{name}:cancel
		/// </summary>
		/// <param name="name">Required. Name of the execution to be cancelled. Format: projects/{project}/locations/{location}/workflows/{workflow}/executions/{execution}</param>
		/// <returns>Successful response</returns>
		public async Task<Execution> Workflowexecutions_projects_locations_workflows_executions_cancelAsync(string name, CancelExecutionRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":cancel";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Execution>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns all metadata stored about an execution, excluding most data that is already accessible using other API methods.
		/// Workflowexecutions_projects_locations_workflows_executions_exportData v1/{name}:exportData
		/// </summary>
		/// <param name="name">Required. Name of the execution for which data is to be exported. Format: projects/{project}/locations/{location}/workflows/{workflow}/executions/{execution}</param>
		/// <returns>Successful response</returns>
		public async Task<ExportDataResponse> Workflowexecutions_projects_locations_workflows_executions_exportDataAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":exportData";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ExportDataResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of active callbacks that belong to the execution with the given name. The returned callbacks are ordered by callback ID.
		/// Workflowexecutions_projects_locations_workflows_executions_callbacks_list v1/{parent}/callbacks
		/// </summary>
		/// <param name="parent">Required. Name of the execution for which the callbacks should be listed. Format: projects/{project}/locations/{location}/workflows/{workflow}/executions/{execution}</param>
		/// <param name="pageSize">Maximum number of callbacks to return per call. The default value is 100 and is also the maximum value.</param>
		/// <param name="pageToken">A page token, received from a previous `ListCallbacks` call. Provide this to retrieve the subsequent page. Note that pagination is applied to dynamic data. The list of callbacks returned can change between page requests if callbacks are created or deleted.</param>
		/// <returns>Successful response</returns>
		public async Task<ListCallbacksResponse> Workflowexecutions_projects_locations_workflows_executions_callbacks_listAsync(string parent, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/callbacks&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListCallbacksResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of executions which belong to the workflow with the given name. The method returns executions of all workflow revisions. Returned executions are ordered by their start time (newest first).
		/// Workflowexecutions_projects_locations_workflows_executions_list v1/{parent}/executions
		/// </summary>
		/// <param name="parent">Required. Name of the workflow for which the executions should be listed. Format: projects/{project}/locations/{location}/workflows/{workflow}</param>
		/// <param name="filter">Optional. Filters applied to the `[Executions.ListExecutions]` results. The following fields are supported for filtering: `executionId`, `state`, `startTime`, `endTime`, `duration`, `workflowRevisionId`, `stepName`, and `label`. For details, see AIP-160. For example, if you are using the Google APIs Explorer: `state="SUCCEEDED"` or `startTime>"2023-08-01" AND state="FAILED"`</param>
		/// <param name="orderBy">Optional. Comma-separated list of fields that specify the ordering applied to the `[Executions.ListExecutions]` results. By default the ordering is based on descending `startTime`. The following fields are supported for ordering: `executionId`, `state`, `startTime`, `endTime`, `duration`, and `workflowRevisionId`. For details, see AIP-132.</param>
		/// <param name="pageSize">Maximum number of executions to return per call. Max supported value depends on the selected Execution view: it's 1000 for BASIC and 100 for FULL. The default value used if the field is not specified is 100, regardless of the selected view. Values greater than the max value will be coerced down to it.</param>
		/// <param name="pageToken">A page token, received from a previous `ListExecutions` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListExecutions` must match the call that provided the page token. Note that pagination is applied to dynamic data. The list of executions returned can change between page requests.</param>
		/// <param name="view">Optional. A view defining which fields should be filled in the returned executions. The API will default to the BASIC view.</param>
		/// <returns>Successful response</returns>
		public async Task<ListExecutionsResponse> Workflowexecutions_projects_locations_workflows_executions_listAsync(string parent, string filter, string orderBy, int pageSize, string pageToken, Workflowexecutions_projects_locations_workflows_executions_stepEntries_getView view, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/executions&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&orderBy=" + (orderBy==null? "" : System.Uri.EscapeDataString(orderBy))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&view=" + view;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListExecutionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new execution using the latest revision of the given workflow. For more information, see Execute a workflow.
		/// Workflowexecutions_projects_locations_workflows_executions_create v1/{parent}/executions
		/// </summary>
		/// <param name="parent">Required. Name of the workflow for which an execution should be created. Format: projects/{project}/locations/{location}/workflows/{workflow} The latest revision of the workflow will be used.</param>
		/// <returns>Successful response</returns>
		public async Task<Execution> Workflowexecutions_projects_locations_workflows_executions_createAsync(string parent, Execution requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/executions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Execution>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists step entries for the corresponding workflow execution. Returned entries are ordered by their create_time.
		/// Workflowexecutions_projects_locations_workflows_executions_stepEntries_list v1/{parent}/stepEntries
		/// </summary>
		/// <param name="parent">Required. Name of the workflow execution to list entries for. Format: projects/{project}/locations/{location}/workflows/{workflow}/executions/{execution}/stepEntries/</param>
		/// <param name="filter">Optional. Filters applied to the `[StepEntries.ListStepEntries]` results. The following fields are supported for filtering: `entryId`, `createTime`, `updateTime`, `routine`, `step`, `stepType`, `state`. For details, see AIP-160. For example, if you are using the Google APIs Explorer: `state="SUCCEEDED"` or `createTime>"2023-08-01" AND state="FAILED"`</param>
		/// <param name="orderBy">Optional. Comma-separated list of fields that specify the ordering applied to the `[StepEntries.ListStepEntries]` results. By default the ordering is based on ascending `entryId`. The following fields are supported for ordering: `entryId`, `createTime`, `updateTime`, `routine`, `step`, `stepType`, `state`. For details, see AIP-132.</param>
		/// <param name="pageSize">Optional. Number of step entries to return per call. The default max is 1000.</param>
		/// <param name="pageToken">Optional. A page token, received from a previous `ListStepEntries` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListStepEntries` must match the call that provided the page token.</param>
		/// <param name="skip">Optional. The number of step entries to skip. It can be used with or without a pageToken. If used with a pageToken, then it indicates the number of step entries to skip starting from the requested page.</param>
		/// <returns>Successful response</returns>
		public async Task<ListStepEntriesResponse> Workflowexecutions_projects_locations_workflows_executions_stepEntries_listAsync(string parent, string filter, string orderBy, int pageSize, string pageToken, int skip, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/stepEntries&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&orderBy=" + (orderBy==null? "" : System.Uri.EscapeDataString(orderBy))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&skip="+skip;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListStepEntriesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Triggers a new execution using the latest revision of the given workflow by a Pub/Sub push notification.
		/// Workflowexecutions_projects_locations_workflows_triggerPubsubExecution v1/{workflow}:triggerPubsubExecution
		/// </summary>
		/// <param name="workflow">Required. Name of the workflow for which an execution should be created. Format: projects/{project}/locations/{location}/workflows/{workflow}</param>
		/// <returns>Successful response</returns>
		public async Task<Execution> Workflowexecutions_projects_locations_workflows_triggerPubsubExecutionAsync(string workflow, TriggerPubsubExecutionRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (workflow==null? "" : System.Uri.EscapeDataString(workflow))+":triggerPubsubExecution";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Execution>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
	
	public enum Workflowexecutions_projects_locations_workflows_executions_stepEntries_getView
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXECUTION_VIEW_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BASIC = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FULL = 2,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
