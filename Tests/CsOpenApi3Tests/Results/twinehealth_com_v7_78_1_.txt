//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ActionMetric
	{
		
		[System.Runtime.Serialization.DataMember(Name="goal")]
		public string Goal { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="metric_type")]
		public string Metric_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public string Unit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="validations")]
		public ActionMetricValidations Validations { get; set; }
	}
	
	public class ActionMetricValidations
	{
		
		[System.Runtime.Serialization.DataMember(Name="maximum")]
		public ActionMetricValidationsMaximum Maximum { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="minimum")]
		public ActionMetricValidationsMinimum Minimum { get; set; }
	}
	
	public class ActionMetricValidationsMaximum
	{
		
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public string Unit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Double> Value { get; set; }
	}
	
	public class ActionMetricValidationsMinimum
	{
		
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public string Unit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Double> Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ActionResource
	{
		
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public ActionResourceAttributes Attributes { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="relationships")]
		public ActionResourceRelationships Relationships { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class ActionResourceAttributes
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string _thread { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="adherence")]
		public ActionResourceAttributesAdherence Adherence { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string Details { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="effective_from")]
		public string Effective_from { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="effective_to")]
		public string Effective_to { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="frequency_goal")]
		public ActionResourceAttributesFrequency_goal Frequency_goal { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="identifiers")]
		public Identifier[] Identifiers { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="intake")]
		public string Intake { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="metric_required")]
		public System.Nullable<System.Boolean> Metric_required { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="metrics")]
		public ActionMetric[] Metrics { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="static_title")]
		public string Static_title { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tracking")]
		public System.Nullable<System.Boolean> Tracking { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public ActionResourceAttributesType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="windows")]
		public ActionWindow[] Windows { get; set; }
	}
	
	public class ActionResourceAttributesAdherence
	{
		
		[System.Runtime.Serialization.DataMember(Name="complete")]
		public System.Nullable<System.Int32> Complete { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="due")]
		public System.Nullable<System.Int32> Due { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="streak")]
		public ActionResourceAttributesAdherenceStreak Streak { get; set; }
	}
	
	public class ActionResourceAttributesAdherenceStreak
	{
		
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public string Updated_at { get; set; }
	}
	
	public class ActionResourceAttributesFrequency_goal
	{
		
		[System.Runtime.Serialization.DataMember(Name="weeks")]
		public ActionResourceAttributesFrequency_goalWeeks Weeks { get; set; }
	}
	
	public class ActionResourceAttributesFrequency_goalWeeks
	{
		
		[System.Runtime.Serialization.DataMember(Name="days")]
		public int[] Days { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Identifier
	{
		
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="system")]
		public string System { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ActionResourceAttributesType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		other_lifestyle = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ActionWindow
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string _id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class ActionResourceRelationships
	{
		
		[System.Runtime.Serialization.DataMember(Name="plan")]
		public ActionResourceRelationshipsPlan Plan { get; set; }
	}
	
	public class ActionResourceRelationshipsPlan
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ActionResourceRelationshipsPlanData Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public string Links { get; set; }
	}
	
	public class ActionResourceRelationshipsPlanData
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Address
	{
		
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="district")]
		public string District { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lines")]
		public string[] Lines { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="postal_code")]
		public string Postal_code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="use")]
		public string Use { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ArchiveHistory
	{
		
		[System.Runtime.Serialization.DataMember(Name="archived")]
		public System.Nullable<System.Boolean> Archived { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="modified_at")]
		public string Modified_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="notes")]
		public string Notes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BundleResource
	{
		
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public BundleResourceAttributes Attributes { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="relationships")]
		public BundleResourceRelationships Relationships { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class BundleResourceAttributes
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string _thread { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="effective_from")]
		public string Effective_from { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="effective_to")]
		public string Effective_to { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class BundleResourceRelationships
	{
		
		[System.Runtime.Serialization.DataMember(Name="actions")]
		public BundleResourceRelationshipsActions Actions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="plan")]
		public BundleResourceRelationshipsPlan Plan { get; set; }
	}
	
	public class BundleResourceRelationshipsActions
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public BundleResourceRelationshipsActionsData Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public string Links { get; set; }
	}
	
	public class BundleResourceRelationshipsActionsData
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class BundleResourceRelationshipsPlan
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public BundleResourceRelationshipsPlanData Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public string Links { get; set; }
	}
	
	public class BundleResourceRelationshipsPlanData
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CalendarEventResource
	{
		
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public CalendarEventResourceAttributes Attributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public CalendarEventResourceLinks Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="relationships")]
		public CalendarEventResourceRelationships Relationships { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<CalendarEventResourceType> Type { get; set; }
	}
	
	public class CalendarEventResourceAttributes
	{
		
		/// <summary>
		/// True if the calendar event is an all day event, false otherwise. Must be set to true for `plan-check-in` event type. If it is true, then `start_at` and `end_at` must also be set to beginning of day, except `plan-check-in` event type does not need an `end_at` date. If it is false, then `start_at` and `end_at` must be on the same day.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="all_day")]
		public System.Nullable<System.Boolean> All_day { get; set; }
		
		/// <summary>
		/// List of attendees for the calendar event
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attendees")]
		public CalendarEventResourceAttributesAttendees[] CalendarEventResourceAttributesAttendees { get; set; }
		
		/// <summary>
		/// The date and time when the calendar event is marked as completed. Only valid for `plan-check-in` event type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="completed_at")]
		public string Completed_at { get; set; }
		
		/// <summary>
		/// The coach who marked the calendar event as completed. Only valid for `plan-check-in` event type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="completed_by")]
		public string Completed_by { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The date and time when the calendar event ends. Not valid for `plan-check-in` event type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="end_at")]
		public string End_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// The date and time when the calendar event starts
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="start_at")]
		public string Start_at { get; set; }
		
		/// <summary>
		/// The time zone in which the dates for the calendar event are specified
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="time_zone")]
		public string Time_zone { get; set; }
		
		/// <summary>
		/// The title of the calendar event. Must not be empty or null
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// The type of calendar event. Immutable after event creation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<CalendarEventResourceAttributesType> Type { get; set; }
	}
	
	public class CalendarEventResourceAttributesAttendees
	{
		
		/// <summary>
		/// Status of responses from attendees
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="response_status")]
		public System.Nullable<CalendarEventResourceAttributesAttendeesResponse_status> Response_status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="user")]
		public string User { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CalendarEventResourceAttributesAttendeesResponse_status
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		needsAction = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		declined = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		tentative = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		accepted = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CalendarEventResourceAttributesType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="plan-check-in")]
		planMinuscheckMinusin = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		reminder = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="telephone-call")]
		telephoneMinuscall = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="office-visit")]
		officeMinusvisit = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="video-call")]
		videoMinuscall = 4,
	}
	
	public class CalendarEventResourceLinks
	{
		
		/// <summary>
		/// Pattern: /calendar_event/[0-9a-z]+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="self")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"/calendar_event/[0-9a-z]+")]
		public string Self { get; set; }
	}
	
	public class CalendarEventResourceRelationships
	{
		
		/// <summary>
		/// The owner is the patient for whom the calendar event is created specificially for
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="owner")]
		public CalendarEventResourceRelationshipsOwner Owner { get; set; }
	}
	
	public class CalendarEventResourceRelationshipsOwner
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public CalendarEventResourceRelationshipsOwnerData Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public CalendarEventResourceRelationshipsOwnerLinks Links { get; set; }
	}
	
	public class CalendarEventResourceRelationshipsOwnerData
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class CalendarEventResourceRelationshipsOwnerLinks
	{
		
		/// <summary>
		/// Pattern: /pub/calendar_event/[0-9a-z]+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="related")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"/pub/calendar_event/[0-9a-z]+")]
		public string Related { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CalendarEventResourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		calendar_event = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CalendarEventResponseResource
	{
		
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public CalendarEventResponseResourceAttributes Attributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public CalendarEventResponseResourceLinks Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="relationships")]
		public CalendarEventResponseResourceRelationships Relationships { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<CalendarEventResponseResourceType> Type { get; set; }
	}
	
	public class CalendarEventResponseResourceAttributes
	{
		
		/// <summary>
		/// The attendee in the attendees list of the calendar event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attendee")]
		public string Attendee { get; set; }
		
		/// <summary>
		/// The response status for the attendee.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="response_status")]
		public System.Nullable<CalendarEventResponseResourceAttributesResponse_status> Response_status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CalendarEventResponseResourceAttributesResponse_status
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		accepted = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		declined = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		tentative = 2,
	}
	
	public class CalendarEventResponseResourceLinks
	{
		
		/// <summary>
		/// Pattern: /calendar_event_response/[0-9a-z]+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="self")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"/calendar_event_response/[0-9a-z]+")]
		public string Self { get; set; }
	}
	
	public class CalendarEventResponseResourceRelationships
	{
		
		/// <summary>
		/// The calendar_event is the calendar event for which the calendar event response is created specificially for
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="calendar_event")]
		public CalendarEventResponseResourceRelationshipsCalendar_event Calendar_event { get; set; }
		
		/// <summary>
		/// The user is the coach or patient for whom the calendar event response is created specificially for
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="user")]
		public CalendarEventResponseResourceRelationshipsUser User { get; set; }
	}
	
	public class CalendarEventResponseResourceRelationshipsCalendar_event
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public CalendarEventResponseResourceRelationshipsCalendar_eventData Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public CalendarEventResponseResourceRelationshipsCalendar_eventLinks Links { get; set; }
	}
	
	public class CalendarEventResponseResourceRelationshipsCalendar_eventData
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class CalendarEventResponseResourceRelationshipsCalendar_eventLinks
	{
		
		/// <summary>
		/// Pattern: /pub/calendar_event_response/[0-9a-z]+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="related")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"/pub/calendar_event_response/[0-9a-z]+")]
		public string Related { get; set; }
	}
	
	public class CalendarEventResponseResourceRelationshipsUser
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public CalendarEventResponseResourceRelationshipsUserData Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public CalendarEventResponseResourceRelationshipsUserLinks Links { get; set; }
	}
	
	public class CalendarEventResponseResourceRelationshipsUserData
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class CalendarEventResponseResourceRelationshipsUserLinks
	{
		
		/// <summary>
		/// Pattern: /pub/calendar_event_response/[0-9a-z]+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="related")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"/pub/calendar_event_response/[0-9a-z]+")]
		public string Related { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CalendarEventResponseResourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		calendar_event_response = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CoachResource
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public CoachResourceAttributes Attributes { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public CoachResourceLinks Links { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public CoachResourceType Type { get; set; }
	}
	
	public class CoachResourceAttributes
	{
		
		[System.Runtime.Serialization.DataMember(Name="first_name")]
		public string First_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_name")]
		public string Last_name { get; set; }
	}
	
	public class CoachResourceLinks
	{
		
		/// <summary>
		/// Required
		/// Pattern: /coach/[0-9a-z]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="self")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"/coach/[0-9a-z]+")]
		public string Self { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CoachResourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		coach = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CollectionResponseLinks
	{
		
		[System.Runtime.Serialization.DataMember(Name="last")]
		public string Last { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="next")]
		public string Next { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="prev")]
		public string Prev { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="self")]
		public string Self { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateActionRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ActionResource Data { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateActionResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ActionResource Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public CreateOrUpdateMetaResponse Meta { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateOrUpdateMetaResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="ignored")]
		public string[] Ignored { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="req_id")]
		public string Req_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateBundleRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public BundleResource Data { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateBundleResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public BundleResource Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public CreateOrUpdateMetaResponse Meta { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateCalendarEventRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public CreateCalendarEventRequestData Data { get; set; }
	}
	
	public class CreateCalendarEventRequestData
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public CalendarEventResource Attributes { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="relationships")]
		public CreateCalendarEventRequestDataRelationships Relationships { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public CalendarEventResource Type { get; set; }
	}
	
	public class CreateCalendarEventRequestDataRelationships
	{
		
		[System.Runtime.Serialization.DataMember(Name="owner")]
		public CreateCalendarEventRequestDataRelationshipsOwner Owner { get; set; }
	}
	
	public class CreateCalendarEventRequestDataRelationshipsOwner
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public CalendarEventResource Data { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateCalendarEventResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public CalendarEventResource Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public CreateOrUpdateMetaResponse Meta { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateCalendarEventResponseRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public CreateCalendarEventResponseRequestData Data { get; set; }
	}
	
	public class CreateCalendarEventResponseRequestData
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public CalendarEventResponseResource Attributes { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="relationships")]
		public CreateCalendarEventResponseRequestDataRelationships Relationships { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public CalendarEventResponseResource Type { get; set; }
	}
	
	public class CreateCalendarEventResponseRequestDataRelationships
	{
		
		[System.Runtime.Serialization.DataMember(Name="calendar_event")]
		public CreateCalendarEventResponseRequestDataRelationshipsCalendar_event Calendar_event { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="user")]
		public CreateCalendarEventResponseRequestDataRelationshipsUser User { get; set; }
	}
	
	public class CreateCalendarEventResponseRequestDataRelationshipsCalendar_event
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public CalendarEventResponseResource Data { get; set; }
	}
	
	public class CreateCalendarEventResponseRequestDataRelationshipsUser
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public CalendarEventResponseResource Data { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateGroupRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public GroupResource Data { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GroupResource
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public GroupResourceAttributes Attributes { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public GroupResourceLinks Links { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public GroupResourceType Type { get; set; }
	}
	
	public class GroupResourceAttributes
	{
		
		/// <summary>
		/// A description of the group
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bio")]
		public string Bio { get; set; }
		
		/// <summary>
		/// The name of the group
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	public class GroupResourceLinks
	{
		
		/// <summary>
		/// Required
		/// Pattern: /group/[0-9a-z]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="self")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"/group/[0-9a-z]+")]
		public string Self { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GroupResourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		group = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateGroupResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public GroupResource Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public CreateOrUpdateMetaResponse Meta { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateOrUpdateErrorResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error Errors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public CreateOrUpdateMetaResponse Meta { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Error
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<ErrorCode> Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="detail")]
		public string Detail { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source")]
		public ErrorSource Source { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ErrorCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Forbidden = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InvalidParameter = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InvalidBodyParameter = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ResourceNotFound = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unauthorized = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InvalidCredentials = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InvalidGrantType = 6,
	}
	
	public class ErrorSource
	{
		
		[System.Runtime.Serialization.DataMember(Name="parameter")]
		public string Parameter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pointer")]
		public string Pointer { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreatePatientHealthMetricRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public PatientHealthMetricCreateResource Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public CreatePatientHealthMetricRequestMeta Meta { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PatientHealthMetricCreateResource
	{
	}
	
	public class CreatePatientHealthMetricRequestMeta
	{
		
		/// <summary>
		/// If `true`, the patient health metric will be ignored if there is an existing patient health metric for
		///the same patient, with the same `type` and same `occurred_at`.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ignore_duplicates")]
		public System.Nullable<System.Boolean> Ignore_duplicates { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreatePatientHealthMetricResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public PatientHealthMetricResource Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public CreateOrUpdateMetaResponse Meta { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PatientHealthMetricResource
	{
		
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public PatientHealthMetricResourceAttributes Attributes { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="relationships")]
		public PatientHealthMetricResourceRelationships Relationships { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class PatientHealthMetricResourceAttributes
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public PatientHealthMetricResourceAttributesCode Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="diastolic")]
		public System.Nullable<System.Double> Diastolic { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="occurred_at")]
		public string Occurred_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="systolic")]
		public System.Nullable<System.Double> Systolic { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<PatientHealthMetricResourceAttributesType> Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public string Unit { get; set; }
		
		/// <summary>
		/// Can be any value (number, boolean, string, object) depending on the metric type. Most values are of type number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public object Value { get; set; }
	}
	
	public class PatientHealthMetricResourceAttributesCode
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="system")]
		public string System { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PatientHealthMetricResourceAttributesType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		blood_pressure_systolic = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		blood_pressure_diastolic = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		hemoglobin_a1c = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		hdl_cholesterol = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ldl_cholesterol = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		total_cholesterol = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		triglycerides = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		blood_urea_nitrogen = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		creatinine = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		hemoglobin = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		hematocrit = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		total_serum_iron = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		thyroid_stimulating_hormone = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		free_thyroxine = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		free_triiodothyronine = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		total_triiodothyronine = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		cd4_cell_count = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		hiv_viral_load = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		inr = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		free_testosterone = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		total_testosterone = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		c_reactive_protein = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		prostate_specific_antigen = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		cotinine = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		c_peptide = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		blood_pressure = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		blood_glucose = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		weight = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		heart_rate = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		body_fat_percentage = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		body_mass_index = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		body_temperature = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		forced_expiratory_volume1 = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		forced_vital_capacity = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		lean_body_mass = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		nausea_level = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		oxygen_saturation = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pain_level = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		peak_expiratory_flow_rate = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		peripheral_perfusion_index = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		respiratory_rate = 40,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		inhaler_usage = 41,
	}
	
	public class PatientHealthMetricResourceRelationships
	{
		
		[System.Runtime.Serialization.DataMember(Name="patient")]
		public PatientHealthMetricResourceRelationshipsPatient Patient { get; set; }
	}
	
	public class PatientHealthMetricResourceRelationshipsPatient
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public PatientHealthMetricResourceRelationshipsPatientData Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public string Links { get; set; }
	}
	
	public class PatientHealthMetricResourceRelationshipsPatientData
	{
		
		/// <summary>
		/// Required if the `meta.query` is not defined.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Allows the specification of a query for a patient rather than providing a patient id directly
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public PatientHealthMetricResourceRelationshipsPatientDataMeta Meta { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class PatientHealthMetricResourceRelationshipsPatientDataMeta
	{
		
		/// <summary>
		/// The query must return one and only one patient.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="query")]
		public PatientHealthMetricResourceRelationshipsPatientDataMetaQuery Query { get; set; }
	}
	
	public class PatientHealthMetricResourceRelationshipsPatientDataMetaQuery
	{
		
		[System.Runtime.Serialization.DataMember(Name="groups")]
		public string[] Groups { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="identifier")]
		public PatientHealthMetricResourceRelationshipsPatientDataMetaQueryIdentifier Identifier { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="organization")]
		public string Organization { get; set; }
	}
	
	public class PatientHealthMetricResourceRelationshipsPatientDataMetaQueryIdentifier
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="system")]
		public string System { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreatePatientRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public PatientCreateResource Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public CreatePatientRequestMeta Meta { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PatientCreateResource
	{
	}
	
	public class CreatePatientRequestMeta
	{
		
		/// <summary>
		/// If `true`, patients with any conflicting identifiers (same `system` and `value`) will be ignored.
		///Useful for gracefully skipping duplicates after errors occur during bulk create.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ignore_duplicates")]
		public System.Nullable<System.Boolean> Ignore_duplicates { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreatePatientResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public PatientResource Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public CreateOrUpdateMetaResponse Meta { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PatientResource
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public PatientResourceAttributes Attributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public PatientResourceLinks Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="relationships")]
		public PatientResourceRelationships Relationships { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public PatientResourceType Type { get; set; }
	}
	
	public class PatientResourceAttributes
	{
		
		[System.Runtime.Serialization.DataMember(Name="addresses")]
		public Address[] Addresses { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="archive_history")]
		public ArchiveHistory[] Archive_history { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="archived")]
		public System.Nullable<System.Boolean> Archived { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="birth_date")]
		public System.Nullable<System.DateOnly> Birth_date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="email_address")]
		public string Email_address { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enrolled_at")]
		public string Enrolled_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="first_access_at")]
		public string First_access_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="first_name")]
		public string First_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="gender")]
		public System.Nullable<PatientResourceAttributesGender> Gender { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="identifiers")]
		public PatientIdentifier[] Identifiers { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="invited_at")]
		public string Invited_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_access_at")]
		public string Last_access_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_name")]
		public string Last_name { get; set; }
		
		/// <summary>
		/// Coach's note about the patient. Not visible to the patient.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="note")]
		public string Note { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="phone_numbers")]
		public PhoneNumber[] Phone_numbers { get; set; }
		
		/// <summary>
		/// A patient's motivation statement.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statement")]
		public PatientResourceAttributesStatement Statement { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public string Updated_at { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PatientResourceAttributesGender
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		male = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		female = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		other = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PatientIdentifier
	{
		
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="system")]
		public string System { get; set; }
		
		/// <summary>
		/// If `true`, the combination of system and value must be global unique among all patients and coaches in Fitbit Plus.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unique")]
		public System.Nullable<System.Boolean> Unique { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PhoneNumber
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="primary")]
		public bool Primary { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public PhoneNumberType Type { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PhoneNumberType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		home = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		work = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		mobile = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="home-fax")]
		homeMinusfax = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="work-fax")]
		workMinusfax = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		other = 5,
	}
	
	public class PatientResourceAttributesStatement
	{
		
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public string Updated_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updated_by")]
		public string Updated_by { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	public class PatientResourceLinks
	{
		
		/// <summary>
		/// Pattern: /patient/[0-9a-z]+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="self")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"/patient/[0-9a-z]+")]
		public string Self { get; set; }
		
		/// <summary>
		/// A link to the patient record in the Fitbit Plus web application.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="twine_web_app")]
		public string Twine_web_app { get; set; }
	}
	
	public class PatientResourceRelationships
	{
		
		[System.Runtime.Serialization.DataMember(Name="coaches")]
		public object Coaches { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="groups")]
		public object Groups { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PatientResourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		patient = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateRewardEarningFulfillmentRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public RewardEarningFulfillmentResource Data { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RewardEarningFulfillmentResource
	{
		
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public RewardEarningFulfillmentResourceAttributes Attributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="relationships")]
		public RewardEarningFulfillmentResourceRelationships Relationships { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class RewardEarningFulfillmentResourceAttributes
	{
		
		/// <summary>
		/// Date at which the reward earning was fulfilled. (Must be at the same time or after the reward was earned)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fulfilled_at")]
		public string Fulfilled_at { get; set; }
		
		/// <summary>
		/// Unit of the earned reward that has been fulfilled. (Read-only property)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fulfilled_unit")]
		public string Fulfilled_unit { get; set; }
		
		/// <summary>
		/// Value of the earned reward that has been fulfilled. (Must be greater than or equal to 0)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fulfilled_value")]
		public double Fulfilled_value { get; set; }
	}
	
	public class RewardEarningFulfillmentResourceRelationships
	{
		
		[System.Runtime.Serialization.DataMember(Name="patient")]
		public RewardEarningFulfillmentResourceRelationshipsPatient Patient { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reward_earning")]
		public RewardEarningFulfillmentResourceRelationshipsReward_earning Reward_earning { get; set; }
	}
	
	public class RewardEarningFulfillmentResourceRelationshipsPatient
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public RewardEarningFulfillmentResourceRelationshipsPatientData Data { get; set; }
	}
	
	public class RewardEarningFulfillmentResourceRelationshipsPatientData
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class RewardEarningFulfillmentResourceRelationshipsReward_earning
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public RewardEarningFulfillmentResourceRelationshipsReward_earningData Data { get; set; }
	}
	
	public class RewardEarningFulfillmentResourceRelationshipsReward_earningData
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateRewardEarningFulfillmentResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public RewardEarningFulfillmentResource Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public CreateOrUpdateMetaResponse Meta { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateRewardEarningRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public RewardEarningResource Data { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RewardEarningResource
	{
		
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public RewardEarningResourceAttributes Attributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="relationships")]
		public RewardEarningResourceRelationships Relationships { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class RewardEarningResourceAttributes
	{
		
		/// <summary>
		/// Date at which the reward was earned. (Must be after the reward was allocated and before the reward program activation was deactivated or expired)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="earned_at")]
		public string Earned_at { get; set; }
		
		/// <summary>
		/// Unit of the reward that has been earned. (Read-only property)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="earned_unit")]
		public string Earned_unit { get; set; }
		
		/// <summary>
		/// Value of the reward that has been earned. (Must not exceed the allocated value for the reward)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="earned_value")]
		public double Earned_value { get; set; }
		
		/// <summary>
		/// Date at which the reward earning was fulfilled. (Read-only property)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fulfilled_at")]
		public string Fulfilled_at { get; set; }
		
		/// <summary>
		/// Value of the earned reward that has been fulfilled. (Read-only property)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fulfilled_value")]
		public System.Nullable<System.Double> Fulfilled_value { get; set; }
		
		/// <summary>
		/// If true, the reward earning is ready to be fulfilled, either because the reward program activation was fulfill_as_earned or because the reward program activation has been deactivated. (Read-only property)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ready_for_fulfillment")]
		public System.Nullable<System.Boolean> Ready_for_fulfillment { get; set; }
	}
	
	public class RewardEarningResourceRelationships
	{
		
		[System.Runtime.Serialization.DataMember(Name="group")]
		public RewardEarningResourceRelationshipsGroup Group { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="patient")]
		public RewardEarningResourceRelationshipsPatient Patient { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reward")]
		public RewardEarningResourceRelationshipsReward Reward { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reward_program_activation")]
		public RewardEarningResourceRelationshipsReward_program_activation Reward_program_activation { get; set; }
	}
	
	public class RewardEarningResourceRelationshipsGroup
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public RewardEarningResourceRelationshipsGroupData Data { get; set; }
	}
	
	public class RewardEarningResourceRelationshipsGroupData
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class RewardEarningResourceRelationshipsPatient
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public RewardEarningResourceRelationshipsPatientData Data { get; set; }
	}
	
	public class RewardEarningResourceRelationshipsPatientData
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class RewardEarningResourceRelationshipsReward
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public RewardEarningResourceRelationshipsRewardData Data { get; set; }
	}
	
	public class RewardEarningResourceRelationshipsRewardData
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class RewardEarningResourceRelationshipsReward_program_activation
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public RewardEarningResourceRelationshipsReward_program_activationData Data { get; set; }
	}
	
	public class RewardEarningResourceRelationshipsReward_program_activationData
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateRewardEarningResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public RewardEarningResource Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public CreateOrUpdateMetaResponse Meta { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateRewardProgramActivationRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public RewardProgramActivationResource Data { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RewardProgramActivationResource
	{
		
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public RewardProgramActivationResourceAttributes Attributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="relationships")]
		public RewardProgramActivationResourceRelationships Relationships { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class RewardProgramActivationResourceAttributes
	{
		
		/// <summary>
		/// Date at which the reward program was activated for the patient. (Must be between the start_at and end_at dates for the reward program)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="activated_at")]
		public string Activated_at { get; set; }
		
		/// <summary>
		/// If true, the reward program is currently active.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="active")]
		public System.Nullable<System.Boolean> Active { get; set; }
		
		/// <summary>
		/// Number of rewards allocated. (Read-only property)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allocated_count")]
		public System.Nullable<System.Double> Allocated_count { get; set; }
		
		/// <summary>
		/// Unit of the reward program budget. (Read-only property)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="budget_unit")]
		public string Budget_unit { get; set; }
		
		/// <summary>
		/// Date at which the reward program was deactivated. (Must be after the activated_at date)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deactivated_at")]
		public string Deactivated_at { get; set; }
		
		/// <summary>
		/// Number of reward earnings. (Read-only property)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="earned_count")]
		public System.Nullable<System.Double> Earned_count { get; set; }
		
		/// <summary>
		/// Date at which the reward program activation expires. (Read-only property set by adding the days_active from the reward program to the activated_at date)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expires_at")]
		public string Expires_at { get; set; }
		
		/// <summary>
		/// If true, the rewards created for a patient for the program can be fulfulled as they are earned. If false, the rewards should only be fulfilled when the program is deactivated. (Read-only property denormalized from the reward program)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fulfill_as_earned")]
		public System.Nullable<System.Boolean> Fulfill_as_earned { get; set; }
		
		/// <summary>
		/// Total value of reward allocated. (Read-only property)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_allocated_value")]
		public System.Nullable<System.Double> Total_allocated_value { get; set; }
		
		/// <summary>
		/// Total value of reward earnings. (Read-only property)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_earned_value")]
		public System.Nullable<System.Double> Total_earned_value { get; set; }
	}
	
	public class RewardProgramActivationResourceRelationships
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="patient")]
		public RewardProgramActivationResourceRelationshipsPatient Patient { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reward_program")]
		public RewardProgramActivationResourceRelationshipsReward_program Reward_program { get; set; }
	}
	
	public class RewardProgramActivationResourceRelationshipsPatient
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public RewardProgramActivationResourceRelationshipsPatientData Data { get; set; }
	}
	
	public class RewardProgramActivationResourceRelationshipsPatientData
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class RewardProgramActivationResourceRelationshipsReward_program
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public RewardProgramActivationResourceRelationshipsReward_programData Data { get; set; }
	}
	
	public class RewardProgramActivationResourceRelationshipsReward_programData
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateRewardProgramActivationResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public RewardProgramActivationResource Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public CreateOrUpdateMetaResponse Meta { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateRewardProgramRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public RewardProgramResource Data { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RewardProgramResource
	{
		
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public RewardProgramResourceAttributes Attributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="relationships")]
		public RewardProgramResourceRelationships Relationships { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class RewardProgramResourceAttributes
	{
		
		/// <summary>
		/// Unit of the budget for the reard program.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="budget_unit")]
		public System.Nullable<RewardProgramResourceAttributesBudget_unit> Budget_unit { get; set; }
		
		/// <summary>
		/// Value of the budget for the reward program. (Must be greater than 0)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="budget_value")]
		public double Budget_value { get; set; }
		
		/// <summary>
		/// Description of the reward program - designed to be a comprehensive text description
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Number of days that a program can be active after it has been activated for a patient. (Must be greater than 0)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="duration_active")]
		public System.Nullable<System.Double> Duration_active { get; set; }
		
		/// <summary>
		/// Date at which the reward program ends. (Must be after the start_at)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="end_at")]
		public string End_at { get; set; }
		
		/// <summary>
		/// If true, the reward program cannot be activated for a patient and new rewards cannot be created for the program.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="frozen")]
		public System.Nullable<System.Boolean> Frozen { get; set; }
		
		/// <summary>
		/// If true, the rewards created for a patient for the program can be fulfulled as they are earned. If false, the rewards should only be fulfilled when the program is deactivated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fulfill_as_earned")]
		public System.Nullable<System.Boolean> Fulfill_as_earned { get; set; }
		
		/// <summary>
		/// Name of the reward program
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Date at which the reward program starts.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="start_at")]
		public string Start_at { get; set; }
		
		/// <summary>
		/// Tagline of the reward program - designed to be one line
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tagline")]
		public string Tagline { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum RewardProgramResourceAttributesBudget_unit
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		dollar = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		point = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		credit = 2,
	}
	
	public class RewardProgramResourceRelationships
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="group")]
		public RewardProgramResourceRelationshipsGroup Group { get; set; }
	}
	
	public class RewardProgramResourceRelationshipsGroup
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public RewardProgramResourceRelationshipsGroupData Data { get; set; }
	}
	
	public class RewardProgramResourceRelationshipsGroupData
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateRewardProgramResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public RewardProgramResource Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public CreateOrUpdateMetaResponse Meta { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateRewardRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public RewardResource Data { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RewardResource
	{
		
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public RewardResourceAttributes Attributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="relationships")]
		public RewardResourceRelationships Relationships { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class RewardResourceAttributes
	{
		
		/// <summary>
		/// Unique string identifying the health action with which the reward is associated.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string _thread { get; set; }
		
		/// <summary>
		/// Date at which the reward was allocated. (Must be after the reward program is activated and before it is deactivated or expires)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="allocated_at")]
		public string Allocated_at { get; set; }
		
		/// <summary>
		/// Unit of the reward program. (Read-only property)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allocated_unit")]
		public string Allocated_unit { get; set; }
		
		/// <summary>
		/// Value of the reward program budget allocated for the reward. (Must not exceed the remaining budget for the reward program activation)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="allocated_value")]
		public double Allocated_value { get; set; }
		
		/// <summary>
		/// Description of the reward.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Date at which the reward was earned. (Read-only property)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="earned_at")]
		public string Earned_at { get; set; }
		
		/// <summary>
		/// Value of the reward that has been earned. (Read-only property)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="earned_value")]
		public System.Nullable<System.Double> Earned_value { get; set; }
		
		/// <summary>
		/// Date at which the reward earning was fulfilled. (Read-only property)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fulfilled_at")]
		public string Fulfilled_at { get; set; }
		
		/// <summary>
		/// Value of the earned reward that has been fulfilled. (Read-only property)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fulfilled_value")]
		public System.Nullable<System.Double> Fulfilled_value { get; set; }
		
		/// <summary>
		/// Date at which the patient aspires to achieve the reward. (Must be the same or after the allocated_at date)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="target_at")]
		public string Target_at { get; set; }
	}
	
	public class RewardResourceRelationships
	{
		
		[System.Runtime.Serialization.DataMember(Name="patient")]
		public RewardResourceRelationshipsPatient Patient { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reward_program_activation")]
		public RewardResourceRelationshipsReward_program_activation Reward_program_activation { get; set; }
	}
	
	public class RewardResourceRelationshipsPatient
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public RewardResourceRelationshipsPatientData Data { get; set; }
	}
	
	public class RewardResourceRelationshipsPatientData
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class RewardResourceRelationshipsReward_program_activation
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public RewardResourceRelationshipsReward_program_activationData Data { get; set; }
	}
	
	public class RewardResourceRelationshipsReward_program_activationData
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateRewardResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public RewardResource Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public CreateOrUpdateMetaResponse Meta { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateTokenRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public CreateTokenRequestData Data { get; set; }
	}
	
	public class CreateTokenRequestData
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public CreateTokenRequestDataAttributes Attributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<CreateTokenRequestDataType> Type { get; set; }
	}
	
	public class CreateTokenRequestDataAttributes
	{
		
		/// <summary>
		/// Contact Fitbit Plus API Support to get a client id and secret.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="client_id")]
		public string Client_id { get; set; }
		
		/// <summary>
		/// Contact Fitbit Plus API Support to get a client id and secret. Secret is required if grant_type is "client_credentials"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="client_secret")]
		public string Client_secret { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="grant_type")]
		public CreateTokenRequestDataAttributesGrant_type Grant_type { get; set; }
		
		/// <summary>
		/// Required if grant_type is "refresh_token"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refresh_token")]
		public string Refresh_token { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CreateTokenRequestDataAttributesGrant_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		refresh_token = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		client_credentials = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CreateTokenRequestDataType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		token = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateTokenResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public TokenResource Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="included")]
		public GroupResource[] Included { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public CreateOrUpdateMetaResponse Meta { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TokenResource
	{
		
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public object Attributes { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="relationships")]
		public TokenResourceRelationships Relationships { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public CreateTokenRequestDataType Type { get; set; }
	}
	
	public class TokenResourceRelationships
	{
		
		[System.Runtime.Serialization.DataMember(Name="groups")]
		public object Groups { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="organization")]
		public object Organization { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EmailHistoryResource
	{
		
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public EmailHistoryResourceAttributes Attributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="relationships")]
		public EmailHistoryResourceRelationships Relationships { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class EmailHistoryResourceAttributes
	{
		
		/// <summary>
		/// Address email was sent to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email_address")]
		public string Email_address { get; set; }
		
		/// <summary>
		/// Type of email.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email_type")]
		public string Email_type { get; set; }
		
		/// <summary>
		/// Time email was sent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="send_time")]
		public string Send_time { get; set; }
		
		/// <summary>
		/// Status of email. Multiple statuses may be defined. The current status is the one with the most recent date.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status_times")]
		public EmailHistoryResourceAttributesStatus_times Status_times { get; set; }
		
		/// <summary>
		/// Unique identifier for this email.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="twine_email_id")]
		public string Twine_email_id { get; set; }
	}
	
	public class EmailHistoryResourceAttributesStatus_times
	{
		
		/// <summary>
		/// Time email was bounced.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bounce")]
		public string Bounce { get; set; }
		
		/// <summary>
		/// Time email was clicked.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="click")]
		public string Click { get; set; }
		
		/// <summary>
		/// Time email was deferred.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deferred")]
		public string Deferred { get; set; }
		
		/// <summary>
		/// Time email was delivered.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="delivered")]
		public string Delivered { get; set; }
		
		/// <summary>
		/// Time email was dropped.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dropped")]
		public string Dropped { get; set; }
		
		/// <summary>
		/// Time email was opened.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="open")]
		public string Open { get; set; }
		
		/// <summary>
		/// Time email was processed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="processed")]
		public string Processed { get; set; }
		
		/// <summary>
		/// Time email was reported as spam.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="spamreport")]
		public string Spamreport { get; set; }
		
		/// <summary>
		/// Time email was unsubscribed from.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unsubscribe")]
		public string Unsubscribe { get; set; }
	}
	
	public class EmailHistoryResourceRelationships
	{
		
		[System.Runtime.Serialization.DataMember(Name="receiver")]
		public EmailHistoryResourceRelationshipsReceiver Receiver { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sender")]
		public EmailHistoryResourceRelationshipsSender Sender { get; set; }
	}
	
	public class EmailHistoryResourceRelationshipsReceiver
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public EmailHistoryResourceRelationshipsReceiverData Data { get; set; }
	}
	
	public class EmailHistoryResourceRelationshipsReceiverData
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class EmailHistoryResourceRelationshipsSender
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public EmailHistoryResourceRelationshipsSenderData Data { get; set; }
	}
	
	public class EmailHistoryResourceRelationshipsSenderData
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FetchActionResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ActionResource Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public FetchMetaResponse Meta { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FetchMetaResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="req_id")]
		public string Req_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FetchBundleResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public BundleResource Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public FetchMetaResponse Meta { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FetchCalendarEventResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public CalendarEventResource Data { get; set; }
		
		/// <summary>
		/// Related resources which are included in the response based on the `include` param.
		///Attributes of each resource will vary depending on the type.
		///See [patient](#operation/fetchPatient)
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="included")]
		public Resource[] Included { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public FetchMetaResponse Meta { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Resource
	{
		
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public string Attributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FetchCalendarEventsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public CalendarEventResource[] Data { get; set; }
		
		/// <summary>
		/// Related resources which are included in the response based on the `include` param.
		///Attributes of each resource will vary depending on the type.
		///See [patient](#operation/fetchPatient)
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="included")]
		public Resource[] Included { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public CollectionResponseLinks Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public FetchMetaResponse Meta { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FetchCoachResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public CoachResource Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public FetchMetaResponse Meta { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FetchCoachesResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public CoachResource[] Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public FetchMetaResponse Meta { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FetchEmailHistoriesResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public EmailHistoryResource[] Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public FetchMetaResponse Meta { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FetchEmailHistoryResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public EmailHistoryResource Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public FetchMetaResponse Meta { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FetchErrorResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error Errors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public FetchMetaResponse Meta { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FetchGroupResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public GroupResource Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public FetchMetaResponse Meta { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FetchGroupsResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public GroupResource[] Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public FetchMetaResponse Meta { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FetchHealthProfileAnswerResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public HealthProfileAnswerResource Data { get; set; }
		
		/// <summary>
		/// Related resources which are included in the response based on the `include` param.
		///Attributes of each resource will vary depending on the type.
		///See [patient](#operation/fetchPatient)
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="included")]
		public Resource[] Included { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public FetchMetaResponse Meta { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class HealthProfileAnswerResource
	{
		
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public HealthProfileAnswerResourceAttributes Attributes { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public HealthProfileAnswerResourceLinks Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="relationships")]
		public HealthProfileAnswerResourceRelationships Relationships { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class HealthProfileAnswerResourceAttributes
	{
		
		/// <summary>
		/// List of details of previous answers for a health profile question
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="history")]
		public HealthProfileAnswerResourceAttributesHistory[] HealthProfileAnswerResourceAttributesHistory { get; set; }
		
		/// <summary>
		/// The details of the latest answer for a health profile question
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="latest")]
		public HealthProfileAnswerResourceAttributesLatest Latest { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="question_id")]
		public string Question_id { get; set; }
	}
	
	public class HealthProfileAnswerResourceAttributesHistory
	{
		
		/// <summary>
		/// The id of the patient or coach who answered the health profile question
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string _created_by { get; set; }
		
		/// <summary>
		/// The date when the health profile question is answered
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="answered_at")]
		public string Answered_at { get; set; }
		
		/// <summary>
		/// The value of the answer entered for the health profile question
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	public class HealthProfileAnswerResourceAttributesLatest
	{
		
		/// <summary>
		/// The id of the patient or coach who answered the health profile question
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string _created_by { get; set; }
		
		/// <summary>
		/// The date when the health profile question is answered
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="answered_at")]
		public string Answered_at { get; set; }
		
		/// <summary>
		/// The value of the answer entered for the health profile question
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	public class HealthProfileAnswerResourceLinks
	{
		
		/// <summary>
		/// Required
		/// Pattern: /health_profile_answer/[0-9a-z]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="self")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"/health_profile_answer/[0-9a-z]+")]
		public string Self { get; set; }
	}
	
	public class HealthProfileAnswerResourceRelationships
	{
		
		[System.Runtime.Serialization.DataMember(Name="patient")]
		public HealthProfileAnswerResourceRelationshipsPatient Patient { get; set; }
	}
	
	public class HealthProfileAnswerResourceRelationshipsPatient
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public HealthProfileAnswerResourceRelationshipsPatientData Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public HealthProfileAnswerResourceRelationshipsPatientLinks Links { get; set; }
	}
	
	public class HealthProfileAnswerResourceRelationshipsPatientData
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class HealthProfileAnswerResourceRelationshipsPatientLinks
	{
		
		/// <summary>
		/// Pattern: /pub/health_profile_answer/[0-9a-z]+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="related")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"/pub/health_profile_answer/[0-9a-z]+")]
		public string Related { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FetchHealthProfileAnswersResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public HealthProfileAnswerResource[] Data { get; set; }
		
		/// <summary>
		/// Related resources which are included in the response based on the `include` param.
		///Attributes of each resource will vary depending on the type.
		///See [patient](#operation/fetchPatient)
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="included")]
		public Resource[] Included { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public CollectionResponseLinks Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public FetchMetaResponse Meta { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FetchHealthProfileQuestionResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public HealthProfileQuestionResource Data { get; set; }
		
		/// <summary>
		/// Related resources which are included in the response based on the `include` param.
		///Attributes of each resource will vary depending on the type.
		///See [question_definition](#operation/fetchHealthQuestionDefinition), [answer](#operation/fetchHealthProfileAnswer)
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="included")]
		public Resource[] Included { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public FetchMetaResponse Meta { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class HealthProfileQuestionResource
	{
		
		/// <summary>
		/// A health profile question does not have any attribute since it only relates an answer to the corresponding question definition.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public string Attributes { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public HealthProfileQuestionResourceLinks Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="relationships")]
		public HealthProfileQuestionResourceRelationships Relationships { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class HealthProfileQuestionResourceLinks
	{
		
		/// <summary>
		/// Required
		/// Pattern: /pub/health_profile_question/[0-9a-z]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="self")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"/pub/health_profile_question/[0-9a-z]+")]
		public string Self { get; set; }
	}
	
	public class HealthProfileQuestionResourceRelationships
	{
		
		[System.Runtime.Serialization.DataMember(Name="answer")]
		public HealthProfileQuestionResourceRelationshipsAnswer Answer { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="profile")]
		public HealthProfileQuestionResourceRelationshipsProfile Profile { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="question_definition")]
		public HealthProfileQuestionResourceRelationshipsQuestion_definition Question_definition { get; set; }
	}
	
	public class HealthProfileQuestionResourceRelationshipsAnswer
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public HealthProfileQuestionResourceRelationshipsAnswerData Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public HealthProfileQuestionResourceRelationshipsAnswerLinks Links { get; set; }
	}
	
	public class HealthProfileQuestionResourceRelationshipsAnswerData
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class HealthProfileQuestionResourceRelationshipsAnswerLinks
	{
		
		/// <summary>
		/// Pattern: /pub/health_profile_question/[0-9a-z]+/answer
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="related")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"/pub/health_profile_question/[0-9a-z]+/answer")]
		public string Related { get; set; }
	}
	
	public class HealthProfileQuestionResourceRelationshipsProfile
	{
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public HealthProfileQuestionResourceRelationshipsProfileLinks Links { get; set; }
	}
	
	public class HealthProfileQuestionResourceRelationshipsProfileLinks
	{
		
		/// <summary>
		/// Pattern: /pub/health_profile_question/[0-9a-z]+/profile
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="related")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"/pub/health_profile_question/[0-9a-z]+/profile")]
		public string Related { get; set; }
	}
	
	public class HealthProfileQuestionResourceRelationshipsQuestion_definition
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public HealthProfileQuestionResourceRelationshipsQuestion_definitionData Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public object Links { get; set; }
	}
	
	public class HealthProfileQuestionResourceRelationshipsQuestion_definitionData
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FetchHealthProfileQuestionsResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public HealthProfileQuestionResource[] Data { get; set; }
		
		/// <summary>
		/// Related resources which are included in the response based on the `include` param.
		///Attributes of each resource will vary depending on the type.
		///See [question_definition](#operation/fetchHealthQuestionDefinition), [answer](#operation/fetchHealthProfileAnswer)
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="included")]
		public Resource[] Included { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public CollectionResponseLinks Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public FetchMetaResponse Meta { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FetchHealthProfileResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public HealthProfileResource Data { get; set; }
		
		/// <summary>
		/// Related resources which are included in the response based on the `include` param.
		///Attributes of each resource will vary depending on the type.
		///See [patient](#operation/fetchPatient), [question](#operation/fetchHealthProfileQuestion)
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="included")]
		public Resource[] Included { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public FetchMetaResponse Meta { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class HealthProfileResource
	{
		
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public HealthProfileResourceAttributes Attributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public HealthProfileResourceLinks Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="relationships")]
		public HealthProfileResourceRelationships Relationships { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class HealthProfileResourceAttributes
	{
		
		/// <summary>
		/// List of category, answered and total counts for questions in the health profile
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stats")]
		public HealthProfileResourceAttributesStats[] HealthProfileResourceAttributesStats { get; set; }
	}
	
	public class HealthProfileResourceAttributesStats
	{
		
		[System.Runtime.Serialization.DataMember(Name="answered")]
		public System.Nullable<System.Double> Answered { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="category")]
		public System.Nullable<HealthProfileResourceAttributesStatsCategory> Category { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Double> Total { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum HealthProfileResourceAttributesStatsCategory
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		lifestyle_behaviors = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		mental_wellbeing = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		preventative_care = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		overall = 3,
	}
	
	public class HealthProfileResourceLinks
	{
		
		/// <summary>
		/// Required
		/// Pattern: /health_profile/[0-9a-z]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="self")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"/health_profile/[0-9a-z]+")]
		public string Self { get; set; }
	}
	
	public class HealthProfileResourceRelationships
	{
		
		[System.Runtime.Serialization.DataMember(Name="patient")]
		public HealthProfileResourceRelationshipsPatient Patient { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="questions")]
		public HealthProfileResourceRelationshipsQuestions Questions { get; set; }
	}
	
	public class HealthProfileResourceRelationshipsPatient
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public HealthProfileResourceRelationshipsPatientData Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public HealthProfileResourceRelationshipsPatientLinks Links { get; set; }
	}
	
	public class HealthProfileResourceRelationshipsPatientData
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class HealthProfileResourceRelationshipsPatientLinks
	{
		
		/// <summary>
		/// Pattern: /pub/health_profile/[0-9a-z]+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="related")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"/pub/health_profile/[0-9a-z]+")]
		public string Related { get; set; }
	}
	
	public class HealthProfileResourceRelationshipsQuestions
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public HealthProfileResourceRelationshipsQuestionsData[] HealthProfileResourceRelationshipsQuestionsData { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public HealthProfileResourceRelationshipsQuestionsLinks Links { get; set; }
	}
	
	public class HealthProfileResourceRelationshipsQuestionsData
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class HealthProfileResourceRelationshipsQuestionsLinks
	{
		
		/// <summary>
		/// Pattern: /pub/health_profile/[0-9a-z]+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="related")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"/pub/health_profile/[0-9a-z]+")]
		public string Related { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FetchHealthProfilesResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public HealthProfileResource[] Data { get; set; }
		
		/// <summary>
		/// Related resources which are included in the response based on the `include` param.
		///Attributes of each resource will vary depending on the type.
		///See [patient](#operation/fetchPatient), [question](#operation/fetchHealthProfileQuestion)
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="included")]
		public Resource[] Included { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public CollectionResponseLinks Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public FetchMetaResponse Meta { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FetchHealthQuestionDefinitionResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public HealthQuestionDefinitionResource Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public FetchMetaResponse Meta { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class HealthQuestionDefinitionResource
	{
		
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public HealthQuestionDefinitionResourceAttributes Attributes { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public HealthQuestionDefinitionResourceLinks Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="relationships")]
		public string Relationships { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class HealthQuestionDefinitionResourceAttributes
	{
		
		/// <summary>
		/// The category for the health profile definition
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="category")]
		public System.Nullable<HealthQuestionDefinitionResourceAttributesCategory> Category { get; set; }
		
		/// <summary>
		/// The list of formats for the health profile definition
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="format")]
		public HealthQuestionDefinitionResourceAttributesFormat Format { get; set; }
		
		/// <summary>
		/// The lsit of age and gender requirements for the question to be included
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requirements")]
		public HealthQuestionDefinitionResourceAttributesRequirements[] HealthQuestionDefinitionResourceAttributesRequirements { get; set; }
		
		/// <summary>
		/// The question text which corresponds to the answer choices
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum HealthQuestionDefinitionResourceAttributesCategory
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		lifestyle_behaviors = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		mental_wellbeing = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		preventative_care = 2,
	}
	
	public class HealthQuestionDefinitionResourceAttributesFormat
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public HealthQuestionDefinitionResourceAttributesFormatData[] HealthQuestionDefinitionResourceAttributesFormatData { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class HealthQuestionDefinitionResourceAttributesFormatData
	{
		
		[System.Runtime.Serialization.DataMember(Name="icon")]
		public string Icon { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	public class HealthQuestionDefinitionResourceAttributesRequirements
	{
		
		[System.Runtime.Serialization.DataMember(Name="property")]
		public string Property { get; set; }
		
		/// <summary>
		/// Specifies if the value in property should be equal to the one in value
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shouldBeEqual")]
		public System.Nullable<System.Boolean> ShouldBeEqual { get; set; }
		
		/// <summary>
		/// Specifies if the value in property should be greater than the one in value
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shouldBeGreaterThan")]
		public System.Nullable<System.Double> ShouldBeGreaterThan { get; set; }
		
		/// <summary>
		/// Specifies if the value in property should be less than the one in value
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shouldBeLessThan")]
		public System.Nullable<System.Double> ShouldBeLessThan { get; set; }
		
		/// <summary>
		/// The value to be compared with the one in property, based on shouldBeEqual, shouldBeGreaterThan, or shouldBeLessThan
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	public class HealthQuestionDefinitionResourceLinks
	{
		
		/// <summary>
		/// Required
		/// Pattern: /health_question_definition/[0-9]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="self")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"/health_question_definition/[0-9]+")]
		public string Self { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FetchHealthQuestionDefinitionsResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public HealthQuestionDefinitionResource[] Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public CollectionResponseLinks Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public FetchMetaResponse Meta { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FetchOrganizationResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public OrganizationResource Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public FetchMetaResponse Meta { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrganizationResource
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public object Attributes { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public object Links { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public OrganizationResourceType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OrganizationResourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		organization = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FetchPatientHealthMetricResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public PatientHealthMetricResource[] Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public CollectionResponseLinks Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public FetchMetaResponse Meta { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FetchPatientHealthResultResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public PatientHealthResultResource[] Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public CollectionResponseLinks Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public FetchMetaResponse Meta { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PatientHealthResultResource
	{
		
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public PatientHealthResultResourceAttributes Attributes { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="relationships")]
		public PatientHealthResultResourceRelationships Relationships { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class PatientHealthResultResourceAttributes
	{
		
		/// <summary>
		/// Links together results. This should be the same as the thread of _action, if it is defined
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string _thread { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="aggregation")]
		public string Aggregation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="annotations")]
		public PatientHealthResultResourceAttributesAnnotations[] PatientHealthResultResourceAttributesAnnotations { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="channel")]
		public string Channel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public PatientHealthResultResourceAttributesData Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="external_id")]
		public string External_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="metric_type")]
		public PatientHealthMetricResourceAttributesType Metric_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="occurred_at")]
		public string Occurred_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="occurred_at_time_zone")]
		public string Occurred_at_time_zone { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="skipped")]
		public System.Nullable<System.Boolean> Skipped { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source")]
		public PatientHealthResultResourceAttributesSource Source { get; set; }
		
		/// <summary>
		/// Type of result. Usually the same as metric_type except for lifestyle actions
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="window")]
		public string Window { get; set; }
	}
	
	public class PatientHealthResultResourceAttributesAnnotations
	{
		
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	public class PatientHealthResultResourceAttributesData
	{
		
		/// <summary>
		/// Can be any value (number, boolean, string, object) depending on the metric type. Most values are of type number
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public object Value { get; set; }
	}
	
	public class PatientHealthResultResourceAttributesSource
	{
		
		/// <summary>
		/// Can be any value
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public object Metadata { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source_id")]
		public string Source_id { get; set; }
	}
	
	public class PatientHealthResultResourceRelationships
	{
		
		[System.Runtime.Serialization.DataMember(Name="action")]
		public PatientHealthResultResourceRelationshipsAction Action { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="metric")]
		public PatientHealthResultResourceRelationshipsMetric Metric { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="patient")]
		public PatientHealthResultResourceRelationshipsPatient Patient { get; set; }
	}
	
	public class PatientHealthResultResourceRelationshipsAction
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public PatientHealthResultResourceRelationshipsActionData Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public string Links { get; set; }
	}
	
	public class PatientHealthResultResourceRelationshipsActionData
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class PatientHealthResultResourceRelationshipsMetric
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public PatientHealthResultResourceRelationshipsMetricData Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public string Links { get; set; }
	}
	
	public class PatientHealthResultResourceRelationshipsMetricData
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class PatientHealthResultResourceRelationshipsPatient
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public PatientHealthResultResourceRelationshipsPatientData Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public string Links { get; set; }
	}
	
	public class PatientHealthResultResourceRelationshipsPatientData
	{
		
		/// <summary>
		/// Required if the `meta.query` is not defined.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Allows the specification of a query for a patient rather than providing a patient id directly
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public PatientHealthResultResourceRelationshipsPatientDataMeta Meta { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class PatientHealthResultResourceRelationshipsPatientDataMeta
	{
		
		/// <summary>
		/// The query must return one and only one patient.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="query")]
		public PatientHealthResultResourceRelationshipsPatientDataMetaQuery Query { get; set; }
	}
	
	public class PatientHealthResultResourceRelationshipsPatientDataMetaQuery
	{
		
		[System.Runtime.Serialization.DataMember(Name="groups")]
		public string[] Groups { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="identifier")]
		public PatientHealthResultResourceRelationshipsPatientDataMetaQueryIdentifier Identifier { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="organization")]
		public string Organization { get; set; }
	}
	
	public class PatientHealthResultResourceRelationshipsPatientDataMetaQueryIdentifier
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="system")]
		public string System { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FetchPatientPlanSummariesResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public PatientPlanSummaryResource[] Data { get; set; }
		
		/// <summary>
		/// Related resources which are included in the response based on the `include` param.
		///Attributes of each resource will vary depending on the type.
		///See [action](#operation/fetchAction), [bundle](#operation/fetchBundle) and [patient](#operation/fetchPatient)
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="included")]
		public Resource[] Included { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public FetchMetaResponse Meta { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PatientPlanSummaryResource
	{
		
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public PatientPlanSummaryResourceAttributes Attributes { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public PatientPlanSummaryResourceLinks Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="relationships")]
		public PatientPlanSummaryResourceRelationships Relationships { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public PatientPlanSummaryResourceType Type { get; set; }
	}
	
	public class PatientPlanSummaryResourceAttributes
	{
		
		[System.Runtime.Serialization.DataMember(Name="adherence")]
		public string Adherence { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="critical")]
		public string Critical { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="effective_from")]
		public string Effective_from { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="time_zone")]
		public string Time_zone { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="window_notification_times")]
		public PatientPlanSummaryResourceAttributesWindow_notification_times Window_notification_times { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="window_order")]
		public PatientPlanSummaryResourceAttributesWindow_order[] PatientPlanSummaryResourceAttributesWindow_order { get; set; }
	}
	
	public class PatientPlanSummaryResourceAttributesWindow_notification_times
	{
		
		[System.Runtime.Serialization.DataMember(Name="afternoon")]
		public System.Nullable<System.Int32> Afternoon { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="evening")]
		public System.Nullable<System.Int32> Evening { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="morning")]
		public System.Nullable<System.Int32> Morning { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="night")]
		public System.Nullable<System.Int32> Night { get; set; }
	}
	
	public class PatientPlanSummaryResourceAttributesWindow_order
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] _actions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class PatientPlanSummaryResourceLinks
	{
		
		/// <summary>
		/// Required
		/// Pattern: /patient_plan_summary/[0-9a-z]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="self")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"/patient_plan_summary/[0-9a-z]+")]
		public string Self { get; set; }
	}
	
	public class PatientPlanSummaryResourceRelationships
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="actions")]
		public PatientPlanSummaryResourceRelationshipsActions Actions { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="bundles")]
		public PatientPlanSummaryResourceRelationshipsBundles Bundles { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="current_results")]
		public PatientPlanSummaryResourceRelationshipsCurrent_results Current_results { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="patient")]
		public PatientPlanSummaryResourceRelationshipsPatient Patient { get; set; }
	}
	
	public class PatientPlanSummaryResourceRelationshipsActions
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public PatientPlanSummaryResourceRelationshipsActionsData[] PatientPlanSummaryResourceRelationshipsActionsData { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public PatientPlanSummaryResourceRelationshipsActionsLinks Links { get; set; }
	}
	
	public class PatientPlanSummaryResourceRelationshipsActionsData
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class PatientPlanSummaryResourceRelationshipsActionsLinks
	{
		
		[System.Runtime.Serialization.DataMember(Name="related")]
		public string Related { get; set; }
	}
	
	public class PatientPlanSummaryResourceRelationshipsBundles
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public PatientPlanSummaryResourceRelationshipsBundlesData[] PatientPlanSummaryResourceRelationshipsBundlesData { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public PatientPlanSummaryResourceRelationshipsBundlesLinks Links { get; set; }
	}
	
	public class PatientPlanSummaryResourceRelationshipsBundlesData
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class PatientPlanSummaryResourceRelationshipsBundlesLinks
	{
		
		[System.Runtime.Serialization.DataMember(Name="related")]
		public string Related { get; set; }
	}
	
	public class PatientPlanSummaryResourceRelationshipsCurrent_results
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public PatientPlanSummaryResourceRelationshipsCurrent_resultsData[] PatientPlanSummaryResourceRelationshipsCurrent_resultsData { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public PatientPlanSummaryResourceRelationshipsCurrent_resultsLinks Links { get; set; }
	}
	
	public class PatientPlanSummaryResourceRelationshipsCurrent_resultsData
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class PatientPlanSummaryResourceRelationshipsCurrent_resultsLinks
	{
		
		[System.Runtime.Serialization.DataMember(Name="related")]
		public string Related { get; set; }
	}
	
	public class PatientPlanSummaryResourceRelationshipsPatient
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public PatientPlanSummaryResourceRelationshipsPatientData Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public PatientPlanSummaryResourceRelationshipsPatientLinks Links { get; set; }
	}
	
	public class PatientPlanSummaryResourceRelationshipsPatientData
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class PatientPlanSummaryResourceRelationshipsPatientLinks
	{
		
		[System.Runtime.Serialization.DataMember(Name="related")]
		public string Related { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PatientPlanSummaryResourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		patient_plan_summary = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FetchPatientPlanSummaryResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public PatientPlanSummaryResource Data { get; set; }
		
		/// <summary>
		/// Related resources which are included in the response based on the `include` param.
		///Attributes of each resource will vary depending on the type.
		///See [action](#operation/fetchAction), [bundle](#operation/fetchBundle) and [patient](#operation/fetchPatient)
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="included")]
		public Resource[] Included { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public FetchMetaResponse Meta { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FetchPatientResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public PatientResource Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public FetchMetaResponse Meta { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FetchPatientsResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public PatientResource[] Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public CollectionResponseLinks Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public FetchMetaResponse Meta { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FetchRewardEarningFulfillmentResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public RewardEarningFulfillmentResource Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public FetchMetaResponse Meta { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FetchRewardEarningFulfillmentsResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public RewardEarningFulfillmentResource[] Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public FetchMetaResponse Meta { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FetchRewardEarningResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public RewardEarningResource Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public FetchMetaResponse Meta { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FetchRewardEarningsResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public RewardEarningResource[] Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public FetchMetaResponse Meta { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FetchRewardProgramActivationResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public RewardProgramActivationResource Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public FetchMetaResponse Meta { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FetchRewardProgramActivationsResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public RewardProgramActivationResource[] Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public FetchMetaResponse Meta { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FetchRewardProgramResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public RewardProgramResource Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public FetchMetaResponse Meta { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FetchRewardProgramsResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public RewardProgramResource[] Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public FetchMetaResponse Meta { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FetchRewardResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public RewardResource Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public FetchMetaResponse Meta { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FetchRewardsResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public RewardResource[] Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public FetchMetaResponse Meta { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateActionRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ActionResource Data { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateActionResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ActionResource Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public CreateOrUpdateMetaResponse Meta { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateBundleRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public BundleResource Data { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateBundleResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public BundleResource Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public CreateOrUpdateMetaResponse Meta { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateCalendarEventRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public UpdateCalendarEventRequestData Data { get; set; }
	}
	
	public class UpdateCalendarEventRequestData
	{
		
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public CalendarEventResource Attributes { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public CalendarEventResource Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="relationships")]
		public UpdateCalendarEventRequestDataRelationships Relationships { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public CalendarEventResource Type { get; set; }
	}
	
	public class UpdateCalendarEventRequestDataRelationships
	{
		
		[System.Runtime.Serialization.DataMember(Name="owner")]
		public UpdateCalendarEventRequestDataRelationshipsOwner Owner { get; set; }
	}
	
	public class UpdateCalendarEventRequestDataRelationshipsOwner
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public CalendarEventResource Data { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateCalendarEventResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public CalendarEventResource Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public CreateOrUpdateMetaResponse Meta { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdatePatientPlanSummaryRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public PatientPlanSummaryResource Data { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdatePatientPlanSummaryResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public PatientPlanSummaryResource Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public CreateOrUpdateMetaResponse Meta { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdatePatientRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public PatientResource Data { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdatePatientResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public PatientResource Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public CreateOrUpdateMetaResponse Meta { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpsertPatientRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public PatientResource Data { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public UpsertPatientRequestMeta Meta { get; set; }
	}
	
	public class UpsertPatientRequestMeta
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="query")]
		public UpsertPatientRequestMetaQuery Query { get; set; }
	}
	
	public class UpsertPatientRequestMetaQuery
	{
		
		/// <summary>
		/// Group to create/update patient in.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="groups")]
		public string[] Groups { get; set; }
		
		/// <summary>
		/// Identifier to match patient
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="identifier")]
		public UpsertPatientRequestMetaQueryIdentifier Identifier { get; set; }
	}
	
	public class UpsertPatientRequestMetaQueryIdentifier
	{
		
		/// <summary>
		/// Name of system
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="system")]
		public string System { get; set; }
		
		/// <summary>
		/// Value in system
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Get an action
		/// Get a health action from a patient's plan.
		/// FetchAction action/{id}
		/// </summary>
		/// <param name="id">Action identifier</param>
		/// <returns>OK</returns>
		public async Task FetchActionAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "action/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a bundle
		/// Get a bundle from a patient's plan.
		/// FetchBundle bundle/{id}
		/// </summary>
		/// <param name="id">Bundle identifier</param>
		/// <returns>OK</returns>
		public async Task FetchBundleAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "bundle/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List calendar events
		/// Get a list of calendar events
		/// FetchCalendarEvents calendar_event
		/// </summary>
		/// <param name="filter_patient">Patient id to fetch calendar event. Note that one of the following filters must be specified: `filter[patient]`, `filter[group]`, `filter[organization]`, or `filter[attendees]`.
		///</param>
		/// <param name="filter_groups">Comma-separated list of group ids. Note that one of the following filters must be specified: `filter[patient]`, `filter[group]`, `filter[organization]`, or `filter[attendees]`.
		///</param>
		/// <param name="filter_organization">Fitbit Plus organization id. Note that one of the following filters must be specified: `filter[patient]`, `filter[group]`, `filter[organization]`, or `filter[attendees]`.
		///</param>
		/// <param name="filter_attendees">Comma-separated list of coach or patient ids. Note that one of the following filters must be specified: `filter[patient]`, `filter[group]`, `filter[organization]`, or `filter[attendees]`.
		///</param>
		/// <param name="filter_type">Calendar event type</param>
		/// <param name="filter_completed">If not specified, return all calendar events. If set to `true` return only events marked as completed, if set to `false`, return only events not marked as completed yet.</param>
		/// <param name="filter_start_at">The start (inclusive) and end (exclusive) dates are ISO date and time strings separated by `..`. Example for events starting in November 2017 (America/New_York): `filter[start_at]=2017-11-01T00:00:00-04:00..2017-12-01T00:00:00-05:00`
		///</param>
		/// <param name="filter_end_at">The start (inclusive) and end (exclusive) dates are ISO date and time strings separated by `..`. Example for events ending in November 2017 (America/New_York): `filter[end_at]=2017-11-01T00:00:00-04:00..2017-12-01T00:00:00-05:00`
		///</param>
		/// <param name="filter_completed_at">The start (inclusive) and end (exclusive) dates are ISO date and time strings separated by `..`. Example for events completed in November 2017 (America/New_York): `filter[completed_at]=2017-11-01T00:00:00-04:00..2017-12-01T00:00:00-05:00`
		///</param>
		/// <param name="filter_created_at">The start (inclusive) and end (exclusive) dates are ISO date and time strings separated by `..`. Example for events created in November 2017 (America/New_York): `filter[created_at]=2017-11-01T00:00:00-04:00..2017-12-01T00:00:00-05:00`
		///</param>
		/// <param name="filter_updated_at">The start (inclusive) and end (exclusive) dates are ISO date and time strings separated by `..`. Example for events updated in November 2017 (America/New_York): `filter[updated_at]=2017-11-01T00:00:00-04:00..2017-12-01T00:00:00-05:00`
		///</param>
		/// <param name="page_number">Page number</param>
		/// <param name="page_size">Page size
		/// Minimum: 0
		/// Maximum: 50
		// </param>
		/// <param name="page_limit">Page limit
		/// Minimum: 0
		// </param>
		/// <param name="page_cursor">Page cursor</param>
		/// <param name="include">List of related resources to include in the response</param>
		/// <returns>OK</returns>
		public async Task FetchCalendarEventsAsync(
					string filter_patient, 
					string filter_groups, 
					string filter_organization, 
					string filter_attendees, 
					FetchCalendarEventsFilter_type_ filter_type, 
					bool filter_completed, 
					string filter_start_at, 
					string filter_end_at, 
					string filter_completed_at, 
					string filter_created_at, 
					string filter_updated_at, 
					int page_number, 
					int page_size, 
					int page_limit, 
					string page_cursor, 
					FetchCalendarEventsInclude include, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "calendar_event?filter[patient]=" + (filter_patient==null? "" : System.Uri.EscapeDataString(filter_patient))+"&filter[groups]=" + (filter_groups==null? "" : System.Uri.EscapeDataString(filter_groups))+"&filter[organization]=" + (filter_organization==null? "" : System.Uri.EscapeDataString(filter_organization))+"&filter[attendees]=" + (filter_attendees==null? "" : System.Uri.EscapeDataString(filter_attendees))+"&filter[type]=" + filter_type+"&filter[completed]="+filter_completed+"&filter[start_at]=" + (filter_start_at==null? "" : System.Uri.EscapeDataString(filter_start_at))+"&filter[end_at]=" + (filter_end_at==null? "" : System.Uri.EscapeDataString(filter_end_at))+"&filter[completed_at]=" + (filter_completed_at==null? "" : System.Uri.EscapeDataString(filter_completed_at))+"&filter[created_at]=" + (filter_created_at==null? "" : System.Uri.EscapeDataString(filter_created_at))+"&filter[updated_at]=" + (filter_updated_at==null? "" : System.Uri.EscapeDataString(filter_updated_at))+"&page[number]="+page_number+"&page[size]="+page_size+"&page[limit]="+page_limit+"&page[cursor]=" + (page_cursor==null? "" : System.Uri.EscapeDataString(page_cursor))+"&include=" + include;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a calendar event
		/// Delete a calendar event by id
		/// DeleteCalendarEvent calendar_event/{id}
		/// </summary>
		/// <param name="id">Calendar event identifier</param>
		/// <returns>OK</returns>
		public async Task DeleteCalendarEventAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "calendar_event/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a calendar event
		/// Get a calendar event by id
		/// FetchCalendarEvent calendar_event/{id}
		/// </summary>
		/// <param name="id">Calendar event identifier</param>
		/// <returns>OK</returns>
		public async Task FetchCalendarEventAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "calendar_event/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List coaches
		/// Get a list of coaches matching the specified filters.
		/// FetchCoaches coach
		/// </summary>
		/// <param name="filter_groups">Comma-separated list of group ids. Note that one of the following filters must be specified: `filter[groups]`, `filter[organization]`.
		///</param>
		/// <param name="filter_organization">Fitbit Plus organization id. Note that one of the following filters must be specified: `filter[groups]`, `filter[organization]`.
		///</param>
		/// <returns>OK</returns>
		public async Task FetchCoachesAsync(string filter_groups, string filter_organization, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "coach?filter[groups]=" + (filter_groups==null? "" : System.Uri.EscapeDataString(filter_groups))+"&filter[organization]=" + (filter_organization==null? "" : System.Uri.EscapeDataString(filter_organization));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a coach
		/// Get a coach record by id.
		/// FetchCoach coach/{id}
		/// </summary>
		/// <param name="id">Coach identifier</param>
		/// <returns>OK</returns>
		public async Task FetchCoachAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "coach/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List email histories
		/// Get a list of email histories
		/// FetchEmailHistories email_history
		/// </summary>
		/// <param name="filter_receiver">Fitbit Plus user id of email recipient. Required if filter[sender] is not defined.</param>
		/// <param name="filter_sender">Fitbit Plus user id of email sender. Required if filter[receiver] is not defined.</param>
		/// <param name="filter_emailType">Type of email</param>
		/// <param name="sort">valid sorts:
		///  * send_time - ascending by send_time
		///  * -send_time - descending by send_time
		///</param>
		/// <returns>OK</returns>
		public async Task FetchEmailHistoriesAsync(string filter_receiver, string filter_sender, string filter_emailType, FetchEmailHistoriesSort sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "email_history?filter[receiver]=" + (filter_receiver==null? "" : System.Uri.EscapeDataString(filter_receiver))+"&filter[sender]=" + (filter_sender==null? "" : System.Uri.EscapeDataString(filter_sender))+"&filter[emailType]=" + (filter_emailType==null? "" : System.Uri.EscapeDataString(filter_emailType))+"&sort=" + sort;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get an email history
		/// Get an email history by id
		/// FetchEmailHistory email_history/{id}
		/// </summary>
		/// <param name="id">Email history identifier</param>
		/// <returns>OK</returns>
		public async Task FetchEmailHistoryAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "email_history/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List groups
		/// Get a list of groups matching the specified filters.
		/// FetchGroups group
		/// </summary>
		/// <param name="filter_organization">Organization identifier</param>
		/// <param name="filter_name">Group name</param>
		/// <returns>OK</returns>
		public async Task FetchGroupsAsync(string filter_organization, string filter_name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "group?filter[organization]=" + (filter_organization==null? "" : System.Uri.EscapeDataString(filter_organization))+"&filter[name]=" + (filter_name==null? "" : System.Uri.EscapeDataString(filter_name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a group
		/// Get a group record by id.
		/// FetchGroup group/{id}
		/// </summary>
		/// <param name="id">Group identifier</param>
		/// <returns>OK</returns>
		public async Task FetchGroupAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "group/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List health profiles
		/// Get a list of health profiles
		/// FetchHealthProfiles health_profile
		/// </summary>
		/// <param name="filter_patient">Patient id to fetch health profile. Note that one of the following filters must be specified: `filter[patient]`, `filter[group]`, or `filter[organization]`.
		///</param>
		/// <param name="filter_groups">Comma-separated list of group ids. Note that one of the following filters must be specified: `filter[patient]`, `filter[group]`, or `filter[organization]`.
		///</param>
		/// <param name="filter_organization">Fitbit Plus organization id. Note that one of the following filters must be specified: `filter[patient]`, `filter[group]`, or `filter[organization]`.
		///</param>
		/// <param name="page_number">Page number</param>
		/// <param name="page_size">Page size
		/// Minimum: 0
		/// Maximum: 50
		// </param>
		/// <param name="page_limit">Page limit
		/// Minimum: 0
		// </param>
		/// <param name="page_cursor">Page cursor</param>
		/// <param name="include">List of related resources to include in the response</param>
		/// <returns>OK</returns>
		public async Task FetchHealthProfilesAsync(string filter_patient, string filter_groups, string filter_organization, int page_number, int page_size, int page_limit, string page_cursor, FetchHealthProfilesInclude include, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "health_profile?filter[patient]=" + (filter_patient==null? "" : System.Uri.EscapeDataString(filter_patient))+"&filter[groups]=" + (filter_groups==null? "" : System.Uri.EscapeDataString(filter_groups))+"&filter[organization]=" + (filter_organization==null? "" : System.Uri.EscapeDataString(filter_organization))+"&page[number]="+page_number+"&page[size]="+page_size+"&page[limit]="+page_limit+"&page[cursor]=" + (page_cursor==null? "" : System.Uri.EscapeDataString(page_cursor))+"&include=" + include;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a health profile
		/// Get a health profile by id
		/// FetchHealthProfile health_profile/{id}
		/// </summary>
		/// <param name="id">Health profile identifier</param>
		/// <param name="include">List of related resources to include in the response</param>
		/// <returns>OK</returns>
		public async Task FetchHealthProfileAsync(string id, FetchHealthProfilesInclude include, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "health_profile/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&include=" + include;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List health profile answers
		/// Get a list of health profile answers
		/// FetchHealthProfileAnswers health_profile_answer
		/// </summary>
		/// <param name="filter_patient">Patient id to fetch healt profile answers. Note that one of the following filters must be specified: `filter[patient]`, `filter[group]`, or `filter[organization]`.
		///</param>
		/// <param name="filter_groups">Comma-separated list of group ids. Note that one of the following filters must be specified: `filter[patient]`, `filter[group]`, or `filter[organization]`.
		///</param>
		/// <param name="filter_organization">Fitbit Plus organization id. Note that one of the following filters must be specified: `filter[patient]`, `filter[group]`, or `filter[organization]`.
		///</param>
		/// <param name="page_number">Page number</param>
		/// <param name="page_size">Page size
		/// Minimum: 0
		/// Maximum: 100
		// </param>
		/// <param name="page_limit">Page limit
		/// Minimum: 0
		// </param>
		/// <param name="page_cursor">Page cursor</param>
		/// <param name="include">List of related resources to include in the response</param>
		/// <returns>OK</returns>
		public async Task FetchHealthProfileAnswersAsync(string filter_patient, string filter_groups, string filter_organization, int page_number, int page_size, int page_limit, string page_cursor, PatientResourceType include, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "health_profile_answer?filter[patient]=" + (filter_patient==null? "" : System.Uri.EscapeDataString(filter_patient))+"&filter[groups]=" + (filter_groups==null? "" : System.Uri.EscapeDataString(filter_groups))+"&filter[organization]=" + (filter_organization==null? "" : System.Uri.EscapeDataString(filter_organization))+"&page[number]="+page_number+"&page[size]="+page_size+"&page[limit]="+page_limit+"&page[cursor]=" + (page_cursor==null? "" : System.Uri.EscapeDataString(page_cursor))+"&include=" + include;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a health profile answer
		/// Get a health profile answer by id
		/// FetchHealthProfileAnswer health_profile_answer/{id}
		/// </summary>
		/// <param name="id">Health profile answer identifier</param>
		/// <param name="include">List of related resources to include in the response</param>
		/// <returns>OK</returns>
		public async Task FetchHealthProfileAnswerAsync(string id, PatientResourceType include, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "health_profile_answer/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&include=" + include;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List health profile questions
		/// Get a list of health profile questions
		/// FetchHealthProfileQuestions health_profile_question
		/// </summary>
		/// <param name="filter_patient">Patient id to fetch healt profile questions. Note that one of the following filters must be specified: `filter[patient]`, `filter[group]`, or `filter[organization]`.
		///</param>
		/// <param name="filter_groups">Comma-separated list of group ids. Note that one of the following filters must be specified: `filter[patient]`, `filter[group]`, or `filter[organization]`.
		///</param>
		/// <param name="filter_organization">Fitbit Plus organization id. Note that one of the following filters must be specified: `filter[patient]`, `filter[group]`, or `filter[organization]`.
		///</param>
		/// <param name="include">List of related resources to include in the response</param>
		/// <returns>OK</returns>
		public async Task FetchHealthProfileQuestionsAsync(string filter_patient, string filter_groups, string filter_organization, FetchHealthProfileQuestionsInclude include, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "health_profile_question?filter[patient]=" + (filter_patient==null? "" : System.Uri.EscapeDataString(filter_patient))+"&filter[groups]=" + (filter_groups==null? "" : System.Uri.EscapeDataString(filter_groups))+"&filter[organization]=" + (filter_organization==null? "" : System.Uri.EscapeDataString(filter_organization))+"&include=" + include;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a health profile question
		/// Get a health profile by id
		/// FetchHealthProfileQuestion health_profile_question/{id}
		/// </summary>
		/// <param name="id">Health profile question identifier</param>
		/// <param name="include">List of related resources to include in the response</param>
		/// <returns>OK</returns>
		public async Task FetchHealthProfileQuestionAsync(string id, FetchHealthProfileQuestionsInclude include, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "health_profile_question/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&include=" + include;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List health question definitions
		/// Get a list of all health question definitions
		/// FetchHealthQuestionDefinitions health_question_definition
		/// </summary>
		/// <returns>OK</returns>
		public async Task FetchHealthQuestionDefinitionsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "health_question_definition";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a health question definition
		/// Get a health question definition by id
		/// FetchHealthQuestionDefinition health_question_definition/{id}
		/// </summary>
		/// <param name="id">Health question definition identifier</param>
		/// <returns>OK</returns>
		public async Task FetchHealthQuestionDefinitionAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "health_question_definition/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create an oauth token
		/// Create an OAuth 2.0 Bearer token. A valid bearer token is required for all other API requests.
		/// 
		/// Be sure to set the header `Content-Type: "application/vnd.api+json"`. Otherwise, you will get an error
		/// 403 Forbidden. Using `Content-Type: "application/json"` is permitted (to support older oauth clients) but when
		/// using `application/json` the body should have a body in the following format instead of nesting under
		/// `data.attributes`:
		/// ```
		/// {
		/// "grant_type": "client_credentials",
		/// "client_id": "95c78ab2-167f-40b8-8bec-8398d4b87454",
		/// "client_secret": "35d18dc9-a3dd-4948-b787-063a490b9354"
		/// }
		/// ```
		/// 
		/// CreateToken oauth/token
		/// </summary>
		/// <param name="include">List of related resources to include in the response</param>
		public async Task CreateTokenAsync(CreateTokenInclude include, CreateTokenRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "oauth/token?include=" + include;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the groups for a token
		/// Get the list of groups a token can be used to access.
		/// FetchTokenGroups oauth/token/{id}/groups
		/// </summary>
		/// <param name="id">Token identifier</param>
		/// <returns>OK</returns>
		public async Task FetchTokenGroupsAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "oauth/token/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/groups";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the organization for a token
		/// Get the organization a token can be used to access.
		/// FetchTokenOrganization oauth/token/{id}/organization
		/// </summary>
		/// <param name="id">Token identifier</param>
		/// <returns>OK</returns>
		public async Task FetchTokenOrganizationAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "oauth/token/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/organization";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get an organization
		/// Get an organization record by id.
		/// FetchOrganization organization/{id}
		/// </summary>
		/// <param name="id">Organization identifier</param>
		/// <returns>OK</returns>
		public async Task FetchOrganizationAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "organization/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List patients
		/// Get a list of patients.
		/// FetchPatients patient
		/// </summary>
		/// <param name="filter_groups">Comma-separated list of group ids. Note that either `filter[group]` or `filter[organization]` must be specified.</param>
		/// <param name="filter_organization">Fitbit Plus organization id. Note that either `filter[group]` or `filter[organization]` must be specified.</param>
		/// <param name="filter_identifier_system">Identifier system (example: "MyEHR") - requires a "filter[identifier][value]" parameter</param>
		/// <param name="filter_identifier_value">Identifier value (example: "12345") - requires a "filter[identifier][system]" parameter</param>
		/// <param name="filter_archived">If not specified, return all patients. If set to 'true' return only archived patients, if set to 'false', return only patients who are not archived.</param>
		/// <param name="filter_created_at">The start (inclusive) and end (exclusive) dates are ISO date and time strings separated by `..`. Example for patients created in November 2017 (America/New_York): `filter[created_at]=2017-11-01T00:00:00-04:00..2017-12-01T00:00:00-05:00`
		///</param>
		/// <param name="filter_updated_at">The start (inclusive) and end (exclusive) dates are ISO date and time strings separated by `..`. Example for patients updated in November 2017 (America/New_York): `filter[updated_at]=2017-11-01T00:00:00-04:00..2017-12-01T00:00:00-05:00`
		///</param>
		/// <param name="page_number">Page number</param>
		/// <param name="page_size">Page size
		/// Minimum: 0
		/// Maximum: 50
		// </param>
		/// <param name="page_limit">Page limit
		/// Minimum: 0
		// </param>
		/// <param name="page_cursor">Page cursor</param>
		/// <returns>OK</returns>
		public async Task FetchPatientsAsync(string filter_groups, string filter_organization, string filter_identifier_system, string filter_identifier_value, bool filter_archived, string filter_created_at, string filter_updated_at, int page_number, int page_size, int page_limit, string page_cursor, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "patient?filter[groups]=" + (filter_groups==null? "" : System.Uri.EscapeDataString(filter_groups))+"&filter[organization]=" + (filter_organization==null? "" : System.Uri.EscapeDataString(filter_organization))+"&filter[identifier][system]=" + (filter_identifier_system==null? "" : System.Uri.EscapeDataString(filter_identifier_system))+"&filter[identifier][value]=" + (filter_identifier_value==null? "" : System.Uri.EscapeDataString(filter_identifier_value))+"&filter[archived]="+filter_archived+"&filter[created_at]=" + (filter_created_at==null? "" : System.Uri.EscapeDataString(filter_created_at))+"&filter[updated_at]=" + (filter_updated_at==null? "" : System.Uri.EscapeDataString(filter_updated_at))+"&page[number]="+page_number+"&page[size]="+page_size+"&page[limit]="+page_limit+"&page[cursor]=" + (page_cursor==null? "" : System.Uri.EscapeDataString(page_cursor));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a patient
		/// Gets a patient record by id.
		/// FetchPatient patient/{id}
		/// </summary>
		/// <param name="id">Patient identifier</param>
		/// <returns>OK</returns>
		public async Task FetchPatientAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "patient/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List coaches for a patient
		/// Get the list of coaches for a patient.
		/// FetchPatientCoaches patient/{id}/coaches
		/// </summary>
		/// <param name="id">Patient identifier</param>
		/// <returns>OK</returns>
		public async Task FetchPatientCoachesAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "patient/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/coaches";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List groups for a patient
		/// Get the list of groups for a patient.
		/// FetchPatientGroups patient/{id}/groups
		/// </summary>
		/// <param name="id">Patient identifier</param>
		/// <returns>OK</returns>
		public async Task FetchPatientGroupsAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "patient/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/groups";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List patient health metrics
		/// Get a list of patient health metrics.
		/// FetchPatientHealthMetrics patient_health_metric
		/// </summary>
		/// <param name="filter_patient">Filter the patient health metrics for a specified patient. Note that one of the following filters must be specified: `filter[patient]`, `filter[groups]`, `filter[organization]`.
		///</param>
		/// <param name="filter_groups">Comma-separated list of group ids. Note that one of the following filters must be specified: `filter[patient]`, `filter[groups]`, `filter[organization]`.
		///</param>
		/// <param name="filter_organization">Fitbit Plus organization id. Note that one of the following filters must be specified: `filter[patient]`, `filter[groups]`, `filter[organization]`.
		///</param>
		/// <param name="page_number">Page number</param>
		/// <param name="page_size">Page size
		/// Minimum: 0
		/// Maximum: 50
		// </param>
		/// <param name="page_limit">Page limit
		/// Minimum: 0
		// </param>
		/// <param name="page_cursor">Page cursor</param>
		/// <returns>OK</returns>
		public async Task FetchPatientHealthMetricsAsync(string filter_patient, string filter_groups, string filter_organization, int page_number, int page_size, int page_limit, string page_cursor, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "patient_health_metric?filter[patient]=" + (filter_patient==null? "" : System.Uri.EscapeDataString(filter_patient))+"&filter[groups]=" + (filter_groups==null? "" : System.Uri.EscapeDataString(filter_groups))+"&filter[organization]=" + (filter_organization==null? "" : System.Uri.EscapeDataString(filter_organization))+"&page[number]="+page_number+"&page[size]="+page_size+"&page[limit]="+page_limit+"&page[cursor]=" + (page_cursor==null? "" : System.Uri.EscapeDataString(page_cursor));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a patient health metric
		/// Get the plan summary for a patient.
		/// FetchPatientHealthMetric patient_health_metric/{id}
		/// </summary>
		/// <param name="id">Patient health metric identifier</param>
		/// <returns>OK</returns>
		public async Task FetchPatientHealthMetricAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "patient_health_metric/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List patient plan summaries
		/// Get a list of patient plan summaries
		/// FetchPatientPlanSummaries patient_plan_summary
		/// </summary>
		/// <param name="filter_patient">Patient id to fetch plan summary for. Note that one of the following filters must be specified: `filter[patient]`, `filter[groups]`, `filter[organization]`.
		///</param>
		/// <param name="filter_groups">Comma-separated list of group ids. Note that one of the following filters must be specified: `filter[patient]`, `filter[groups]`, `filter[organization]`.
		///</param>
		/// <param name="filter_organization">Fitbit Plus organization id. Note that one of the following filters must be specified: `filter[patient]`, `filter[groups]`, `filter[organization]`.
		///</param>
		/// <param name="include">List of related resources to include in the response</param>
		/// <returns>OK</returns>
		public async Task FetchPatientPlanSummariesAsync(string filter_patient, string filter_groups, string filter_organization, FetchPatientPlanSummariesInclude include, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "patient_plan_summary?filter[patient]=" + (filter_patient==null? "" : System.Uri.EscapeDataString(filter_patient))+"&filter[groups]=" + (filter_groups==null? "" : System.Uri.EscapeDataString(filter_groups))+"&filter[organization]=" + (filter_organization==null? "" : System.Uri.EscapeDataString(filter_organization))+"&include=" + include;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the plan summary for a patient
		/// Get the plan summary for a patient.
		/// FetchPatientPlanSummary patient_plan_summary/{id}
		/// </summary>
		/// <param name="id">Plan summary identifier</param>
		/// <param name="include">List of related resources to include in the response</param>
		/// <returns>OK</returns>
		public async Task FetchPatientPlanSummaryAsync(string id, FetchPatientPlanSummariesInclude include, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "patient_plan_summary/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&include=" + include;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List patient health results
		/// Get a list of patient health results.
		/// FetchPatientHealthResults result
		/// </summary>
		/// <param name="filter_patient">Filter the patient health results for a specified patient</param>
		/// <param name="filter_actions">A comma-separated list of action identifiers</param>
		/// <param name="filter_start_at">Filter results that occurred after the passed ISO date and time string</param>
		/// <param name="filter_end_at">Filter results that occurred before the passed ISO date and time string</param>
		/// <param name="filter_threads">A comma-separated list of thread identifiers</param>
		/// <param name="filter_created_at">The start (inclusive) and end (exclusive) dates are ISO date and time strings separated by `..`. Example for results created in November 2017 (America/New_York): `filter[created_at]=2017-11-01T00:00:00-04:00..2017-12-01T00:00:00-05:00`
		///</param>
		/// <param name="filter_updated_at">The start (inclusive) and end (exclusive) dates are ISO date and time strings separated by `..`. Example for results updated in November 2017 (America/New_York): `filter[updated_at]=2017-11-01T00:00:00-04:00..2017-12-01T00:00:00-05:00`
		///</param>
		/// <param name="page_number">Page number</param>
		/// <param name="page_size">Page size
		/// Minimum: 0
		/// Maximum: 50
		// </param>
		/// <param name="page_limit">Page limit
		/// Minimum: 0
		// </param>
		/// <param name="page_after">Page cursor</param>
		/// <returns>OK</returns>
		public async Task FetchPatientHealthResultsAsync(string filter_patient, string filter_actions, string filter_start_at, string filter_end_at, string filter_threads, string filter_created_at, string filter_updated_at, int page_number, int page_size, int page_limit, string page_after, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "result?filter[patient]=" + (filter_patient==null? "" : System.Uri.EscapeDataString(filter_patient))+"&filter[actions]=" + (filter_actions==null? "" : System.Uri.EscapeDataString(filter_actions))+"&filter[start_at]=" + (filter_start_at==null? "" : System.Uri.EscapeDataString(filter_start_at))+"&filter[end_at]=" + (filter_end_at==null? "" : System.Uri.EscapeDataString(filter_end_at))+"&filter[threads]=" + (filter_threads==null? "" : System.Uri.EscapeDataString(filter_threads))+"&filter[created_at]=" + (filter_created_at==null? "" : System.Uri.EscapeDataString(filter_created_at))+"&filter[updated_at]=" + (filter_updated_at==null? "" : System.Uri.EscapeDataString(filter_updated_at))+"&page[number]="+page_number+"&page[size]="+page_size+"&page[limit]="+page_limit+"&page[after]=" + (page_after==null? "" : System.Uri.EscapeDataString(page_after));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a patient health result
		/// Get patient health result by id.
		/// FetchPatientHealthResult result/{id}
		/// </summary>
		/// <param name="id">Patient health result identifier</param>
		/// <returns>OK</returns>
		public async Task FetchPatientHealthResultAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "result/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List rewards
		/// Get a list of rewards matching the specified filters.
		/// FetchRewards reward
		/// </summary>
		/// <param name="filter_patient">Patient identifier. Note that one of the following filters must be specified: `filter[patient]`, `filter[groups]`, `filter[organization]`.
		///</param>
		/// <param name="filter_reward_program_activation">Reward program activation identifier</param>
		/// <param name="filter_thread">Thread identifier</param>
		/// <param name="filter_groups">Comma-separated list of group ids. Note that one of the following filters must be specified: `filter[patient]`, `filter[groups]`, `filter[organization]`.
		///</param>
		/// <param name="filter_organization">Fitbit Plus organization id. Note that one of the following filters must be specified: `filter[patient]`, `filter[groups]`, `filter[organization]`.
		///</param>
		/// <returns>OK</returns>
		public async Task FetchRewardsAsync(string filter_patient, string filter_reward_program_activation, string filter_thread, string filter_groups, string filter_organization, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "reward?filter[patient]=" + (filter_patient==null? "" : System.Uri.EscapeDataString(filter_patient))+"&filter[reward_program_activation]=" + (filter_reward_program_activation==null? "" : System.Uri.EscapeDataString(filter_reward_program_activation))+"&filter[thread]=" + (filter_thread==null? "" : System.Uri.EscapeDataString(filter_thread))+"&filter[groups]=" + (filter_groups==null? "" : System.Uri.EscapeDataString(filter_groups))+"&filter[organization]=" + (filter_organization==null? "" : System.Uri.EscapeDataString(filter_organization));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a reward
		/// Get a reward record by id.
		/// FetchReward reward/{id}
		/// </summary>
		/// <param name="id">Reward identifier</param>
		/// <returns>OK</returns>
		public async Task FetchRewardAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "reward/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List reward earnings
		/// Get a list of reward earnings matching the specified filters.
		/// FetchRewardEarnings reward_earning
		/// </summary>
		/// <param name="filter_groups">Group identifiers</param>
		/// <param name="filter_patient">Patient identifier</param>
		/// <param name="filter_ready_for_fulfillment">If true, only returns those reward earnings for which ready_for_fulfillment is true and fulfilled_at is null. If false, only returns those reward earnings for which ready_for_fulfillment is false and fulfilled_at is null.</param>
		/// <returns>OK</returns>
		public async Task FetchRewardEarningsAsync(string filter_groups, string filter_patient, bool filter_ready_for_fulfillment, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "reward_earning?filter[groups]=" + (filter_groups==null? "" : System.Uri.EscapeDataString(filter_groups))+"&filter[patient]=" + (filter_patient==null? "" : System.Uri.EscapeDataString(filter_patient))+"&filter[ready_for_fulfillment]="+filter_ready_for_fulfillment;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a reward earning
		/// Get a reward earning record by id.
		/// FetchRewardEarning reward_earning/{id}
		/// </summary>
		/// <param name="id">Reward earning identifier</param>
		/// <returns>OK</returns>
		public async Task FetchRewardEarningAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "reward_earning/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List reward earning fulfillments
		/// Get a list of reward earning fulfillments matching the specified filters.
		/// FetchRewardEarningFulfillments reward_earning_fulfillment
		/// </summary>
		/// <param name="filter_patient">Patient identifier</param>
		/// <returns>OK</returns>
		public async Task FetchRewardEarningFulfillmentsAsync(string filter_patient, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "reward_earning_fulfillment?filter[patient]=" + (filter_patient==null? "" : System.Uri.EscapeDataString(filter_patient));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a reward earning fulfillment
		/// Get a reward earning fulfillment record by id.
		/// FetchRewardEarningFulfillment reward_earning_fulfillment/{id}
		/// </summary>
		/// <param name="id">Reward earning fulfillment identifier</param>
		/// <returns>OK</returns>
		public async Task FetchRewardEarningFulfillmentAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "reward_earning_fulfillment/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List reward programs
		/// Get a list of reward programs matching the specified filters.
		/// FetchRewardPrograms reward_program
		/// </summary>
		/// <param name="filter_groups">Comma-separated list of group identifiers. Note that one of the following filters must be specified: `filter[groups]`, `filter[organization]`.
		///</param>
		/// <param name="filter_organization">Fitbit Plus organization id. Note that one of the following filters must be specified: `filter[groups]`, `filter[organization]`.
		///</param>
		/// <returns>OK</returns>
		public async Task FetchRewardProgramsAsync(string filter_groups, string filter_organization, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "reward_program?filter[groups]=" + (filter_groups==null? "" : System.Uri.EscapeDataString(filter_groups))+"&filter[organization]=" + (filter_organization==null? "" : System.Uri.EscapeDataString(filter_organization));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a reward program
		/// Get a reward program record by id.
		/// FetchRewardProgram reward_program/{id}
		/// </summary>
		/// <param name="id">Reward program identifier</param>
		/// <returns>OK</returns>
		public async Task FetchRewardProgramAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "reward_program/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get group for a reward program
		/// Get the group related to a reward program.
		/// FetchRewardProgramGroup reward_program/{id}/group
		/// </summary>
		/// <param name="id">Reward program identifier</param>
		/// <returns>OK</returns>
		public async Task FetchRewardProgramGroupAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "reward_program/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/group";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List reward program activations
		/// Get a list of reward program activations matching the specified filters.
		/// FetchRewardProgramActivations reward_program_activation
		/// </summary>
		/// <param name="filter_patient">Patient identifier. Note that one of the following filters must be specified: `filter[patient]`, `filter[groups]`, `filter[organization]`.
		///</param>
		/// <param name="filter_groups">Comma-separated list of group ids. Note that one of the following filters must be specified: `filter[patient]`, `filter[groups]`, `filter[organization]`.
		///</param>
		/// <param name="filter_organization">Fitbit Plus organization id. Note that one of the following filters must be specified: `filter[patient]`, `filter[groups]`, `filter[organization]`.
		///</param>
		/// <returns>OK</returns>
		public async Task FetchRewardProgramActivationsAsync(string filter_patient, string filter_groups, string filter_organization, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "reward_program_activation?filter[patient]=" + (filter_patient==null? "" : System.Uri.EscapeDataString(filter_patient))+"&filter[groups]=" + (filter_groups==null? "" : System.Uri.EscapeDataString(filter_groups))+"&filter[organization]=" + (filter_organization==null? "" : System.Uri.EscapeDataString(filter_organization));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a reward program activation
		/// Get a reward program activationrecord by id.
		/// FetchRewardProgramActivation reward_program_activation/{id}
		/// </summary>
		/// <param name="id">Reward program activation identifier</param>
		/// <returns>OK</returns>
		public async Task FetchRewardProgramActivationAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "reward_program_activation/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum FetchCalendarEventsFilter_type_
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="plan-check-in")]
		planMinuscheckMinusin = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		reminder = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="telephone-call")]
		telephoneMinuscall = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="office-visit")]
		officeMinusvisit = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="video-call")]
		videoMinuscall = 4,
	}
	
	public enum FetchCalendarEventsInclude
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		owner = 0,
	}
	
	public enum FetchEmailHistoriesSort
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		send_time = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="-send_time")]
		Minussend_time = 1,
	}
	
	public enum FetchHealthProfilesInclude
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		patient = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		questions = 1,
	}
	
	public enum FetchHealthProfileQuestionsInclude
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		question_definition = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		answer = 1,
	}
	
	public enum CreateTokenInclude
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		groups = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		organization = 1,
	}
	
	public enum FetchPatientPlanSummariesInclude
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		actions = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		bundles = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		patient = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		current_results = 3,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
