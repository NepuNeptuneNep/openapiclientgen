//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Represents the data contained in an API key
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class APIKey
	{
		
		/// <summary>
		/// Previous version of the API key
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="api_key_previous_version")]
		public string Api_key_previous_version { get; set; }
		
		/// <summary>
		/// API key version
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="api_key_version")]
		public string Api_key_version { get; set; }
		
		/// <summary>
		/// Client ID of the API Key
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="client_id")]
		public string Client_id { get; set; }
		
		/// <summary>
		/// API key creation date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creation_date")]
		public System.Nullable<System.DateOnly> Creation_date { get; set; }
		
		/// <summary>
		/// Expiration date of the API key
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expiration_date")]
		public System.Nullable<System.DateOnly> Expiration_date { get; set; }
		
		/// <summary>
		/// Key name, equals user_key_name normalized
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key_name")]
		public string Key_name { get; set; }
		
		/// <summary>
		/// Date when the API key version was changed
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="update_date")]
		public System.Nullable<System.DateOnly> Update_date { get; set; }
		
		/// <summary>
		/// User name of the API key
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="user_key_name")]
		public string User_key_name { get; set; }
	}
	
	/// <summary>
	/// Represents an API key version
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class APIKeyVersion
	{
		
		/// <summary>
		/// Represents changes made to a API key version
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="changelog")]
		public APIKeyVersionChangelog Changelog { get; set; }
		
		/// <summary>
		/// Expiration date of the API key version
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expiration_date")]
		public System.Nullable<System.DateOnly> Expiration_date { get; set; }
		
		/// <summary>
		/// Release date of the API key version
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="release_date")]
		public System.Nullable<System.DateOnly> Release_date { get; set; }
		
		/// <summary>
		/// API key version
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	/// <summary>
	/// Represents changes made to a API key version
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class APIKeyVersionChangelog
	{
		
		/// <summary>
		/// List of added features
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="added")]
		public string[] Added { get; set; }
		
		/// <summary>
		/// List of changed features
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="changed")]
		public string[] Changed { get; set; }
		
		/// <summary>
		/// List of deprecated features
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deprecated")]
		public string[] Deprecated { get; set; }
		
		/// <summary>
		/// List of fixed features
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fixed")]
		public string[] Fixed { get; set; }
		
		/// <summary>
		/// Additional notes
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notes")]
		public string Notes { get; set; }
		
		/// <summary>
		/// List of removed features
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="removed")]
		public string[] Removed { get; set; }
		
		/// <summary>
		/// List of security features added
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="security")]
		public string[] Security { get; set; }
	}
	
	/// <summary>
	/// Represents the parameters required to perform a batch upload
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchUploadInput
	{
		
		/// <summary>
		/// Uploaded file name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="file")]
		public string[] File { get; set; }
	}
	
	/// <summary>
	/// Represents behaviour reports
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Behavior
	{
		
		/// <summary>
		/// Birth date of reported person
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="birth_date")]
		public System.DateOnly Birth_date { get; set; }
		
		/// <summary>
		/// Document country
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="country")]
		public BehaviorCountry Country { get; set; }
		
		/// <summary>
		/// Feedback creation date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creation_date")]
		public System.Nullable<System.DateTimeOffset> Creation_date { get; set; }
		
		/// <summary>
		/// Person document ID
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="document_id")]
		public string Document_id { get; set; }
		
		/// <summary>
		/// Document type associated with the background check
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="document_type")]
		public BehaviorDocument_type Document_type { get; set; }
		
		/// <summary>
		/// Reported person e-mail
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// Behavior report date
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="feedback_date")]
		public System.DateOnly Feedback_date { get; set; }
		
		/// <summary>
		/// Person first name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="first_name")]
		public string First_name { get; set; }
		
		/// <summary>
		/// Person last name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="last_name")]
		public string Last_name { get; set; }
		
		/// <summary>
		/// Phone number of the reported person
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phone_number")]
		public string Phone_number { get; set; }
		
		/// <summary>
		/// Report reason
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum BehaviorCountry
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="co")]
		co = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ve")]
		ve = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cl")]
		cl = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mx")]
		mx = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pe")]
		pe = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="do")]
		_do = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="sv")]
		sv = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="gt")]
		gt = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="bo")]
		bo = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cr")]
		cr = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ec")]
		ec = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pa")]
		pa = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="br")]
		br = 12,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum BehaviorDocument_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="national-id")]
		nationalMinusid = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="passport")]
		passport = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="foreign-id")]
		foreignMinusid = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="nit")]
		nit = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="diplomatic-id")]
		diplomaticMinusid = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="civil-registration")]
		civilMinusregistration = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="identity-card")]
		identityMinuscard = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="foreigner-card")]
		foreignerMinuscard = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="professional-card")]
		professionalMinuscard = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="military-card")]
		militaryMinuscard = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pep")]
		pep = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="nis")]
		nis = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="dni")]
		dni = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="rui")]
		rui = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="license-plate")]
		licenseMinusplate = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="query")]
		query = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="name")]
		name = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="rut")]
		rut = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="nuip")]
		nuip = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="foreign-societies")]
		foreignMinussocieties = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="escrow")]
		escrow = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="individual-registration")]
		individualMinusregistration = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="general-registration")]
		generalMinusregistration = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="curp")]
		curp = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="dui")]
		dui = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="driver-license")]
		driverMinuslicense = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ruc")]
		ruc = 26,
	}
	
	/// <summary>
	/// Represents behaviour search results
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BehaviourOutput
	{
		
		/// <summary>
		/// Behavior list
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="behavior")]
		public Behavior[] Behavior { get; set; }
		
		/// <summary>
		/// Path to this resource
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="self")]
		public string Self { get; set; }
	}
	
	/// <summary>
	/// Represents changes in check scores between continuous checks
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Change
	{
		
		/// <summary>
		/// Old and new score map by dataset
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataset_score_changes")]
		public System.Nullable<System.Double> Dataset_score_changes { get; set; }
		
		/// <summary>
		/// Old and new score list
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="score_changes")]
		public Change[] Score_changes { get; set; }
	}
	
	/// <summary>
	/// Represents a background check
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Check
	{
		
		/// <summary>
		/// Person birth certificate
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="birth_certificate")]
		public string Birth_certificate { get; set; }
		
		/// <summary>
		/// Background check ID
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="check_id")]
		public string Check_id { get; set; }
		
		/// <summary>
		/// Represents the summary of a company background check
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="company_summary")]
		public CompanySummary Company_summary { get; set; }
		
		/// <summary>
		/// ID Document country
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="country")]
		public CheckCountry Country { get; set; }
		
		/// <summary>
		/// Background check creation date
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="creation_date")]
		public System.DateTimeOffset Creation_date { get; set; }
		
		/// <summary>
		/// Person birthdate. Shown only if provided during check creation. YYYY-MM-DD format
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date_of_birth")]
		public System.Nullable<System.DateTimeOffset> Date_of_birth { get; set; }
		
		/// <summary>
		/// Person diplomatic id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="diplomatic_id")]
		public string Diplomatic_id { get; set; }
		
		/// <summary>
		/// Person driver's license
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="driver_license")]
		public string Driver_license { get; set; }
		
		/// <summary>
		/// Person or entity first name. Shown only if provided during check creation
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="first_name")]
		public string First_name { get; set; }
		
		/// <summary>
		/// Person foreign identification
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="foreign_id")]
		public string Foreign_id { get; set; }
		
		/// <summary>
		/// [Experimental] Analyzes the probability that the results by name are attributed to a homonym. Number between 0 and 1 where 1 is the the greatest probability
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="homonym_probability")]
		public System.Nullable<System.Single> Homonym_probability { get; set; }
		
		/// <summary>
		/// Background check score including results by name only. This might contain homonym information
		/// Minimum: 0
		/// Maximum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="homonym_score")]
		[System.ComponentModel.DataAnnotations.Range(0, 1)]
		public System.Nullable<System.Single> Homonym_score { get; set; }
		
		/// <summary>
		/// Background check scores by name for each profile group. [Deprecated for API key V1]
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="homonym_scores")]
		public Score[] Homonym_scores { get; set; }
		
		/// <summary>
		/// Background check score regarding results by ID number only. It is a number between 0 and 1 where 1 is the best score. This result is a weighted average of the id_scores listed under scores.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id_score")]
		public float Id_score { get; set; }
		
		/// <summary>
		/// Issue date of the person ID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="issue_date")]
		public System.Nullable<System.DateTimeOffset> Issue_date { get; set; }
		
		/// <summary>
		/// Person or entity last name. Shown only if provided during check creation
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="last_name")]
		public string Last_name { get; set; }
		
		/// <summary>
		/// Vehicle license plate
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="license_plate")]
		public string License_plate { get; set; }
		
		/// <summary>
		/// Person national identification
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="national_id")]
		public string National_id { get; set; }
		
		/// <summary>
		/// Person origin country
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="native_country")]
		public System.Nullable<CheckNative_country> Native_country { get; set; }
		
		/// <summary>
		/// Vehicle owner identification
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="owner_document_id")]
		public string Owner_document_id { get; set; }
		
		/// <summary>
		/// Vehicle owner document type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="owner_document_type")]
		public string Owner_document_type { get; set; }
		
		/// <summary>
		/// Person passport
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="passport")]
		public string Passport { get; set; }
		
		/// <summary>
		/// Vehicle license payment date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payment_date")]
		public string Payment_date { get; set; }
		
		/// <summary>
		/// Colombian PEP idenfitication for Venezuelans
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pep")]
		public string Pep { get; set; }
		
		/// <summary>
		/// Person phone number. Required by law in order to notify the person their background is being checked
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phone_number")]
		public string Phone_number { get; set; }
		
		/// <summary>
		/// Person professional card number
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="professional_card")]
		public string Professional_card { get; set; }
		
		/// <summary>
		/// Temporary residence permit of the person
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ptp")]
		public string Ptp { get; set; }
		
		/// <summary>
		/// Region where the background is to be checked. By default, background checks in Brazil are performed in region where the person is from. Applies for some Brazil collectors only. Allowed values are: DF: Distrito Federal, AC: Acre, AL: Alagoas, AP: Amapá, AM: Amazonas, BA: Bahía, CE: Ceará, ES: Espírito Santo, GO: Goiás, MA: Maranhão, MT: Mato Grosso, MS: Mato Grosso do Sul, MG: Minas Gerais, PA: Pará, PB: Paraíba, PR: Paraná, PE: Pernambuco, PI: Piauí, RJ: Río de Janeiro, RN: Río Grande do Norte, RS: Río Grande do Sul, RO: Rondônia, RR: Roraima, SC: Santa Catarina, SP: São Paulo, SE: Sergipe, TO : Tocantins.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="region")]
		public System.Nullable<CheckRegion> Region { get; set; }
		
		/// <summary>
		/// Report ID the background check is associated with
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="report_id")]
		public string Report_id { get; set; }
		
		/// <summary>
		/// Background check score. Number between 0 and 1 where 1 is the best score
		/// Required
		/// Minimum: 0
		/// Maximum: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="score")]
		[System.ComponentModel.DataAnnotations.Range(0, 1)]
		public float Score { get; set; }
		
		/// <summary>
		/// Background check score of each profile group and dataset
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scores")]
		public Score[] Scores { get; set; }
		
		/// <summary>
		/// Result status of the background check. **Not_started** means the background check is still in queue, since there is a limit of background checks that can be processed simultaneously, **completed** means the check finished successfully, **error** means the check failed, **in_progress** means the check is currently being processed, **delayed** means the check is waiting for an additional requirement to be met, this can last up to 3 days. **Completed** and **error** are the two only final statuses
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public CheckStatus Status { get; set; }
		
		/// <summary>
		/// Database status list
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="statuses")]
		public Status[] Statuses { get; set; }
		
		/// <summary>
		/// Represents a background check summary
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="summary")]
		public Summary Summary { get; set; }
		
		/// <summary>
		/// Person or company tax id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tax_id")]
		public string Tax_id { get; set; }
		
		/// <summary>
		/// Background check type
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public CheckType Type { get; set; }
		
		/// <summary>
		/// Background check update date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="update_date")]
		public System.Nullable<System.DateTimeOffset> Update_date { get; set; }
		
		/// <summary>
		/// Vehicle identification
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vehicle_id")]
		public string Vehicle_id { get; set; }
		
		/// <summary>
		/// Represents the summary of a vehicle background check
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vehicle_summary")]
		public VehicleSummary Vehicle_summary { get; set; }
		
		/// <summary>
		/// List of parameters entered during background check creation that do not match the information obtained
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="wrong_inputs")]
		public WrongInput[] Wrong_inputs { get; set; }
	}
	
	/// <summary>
	/// Represents the summary of a company background check
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CompanySummary
	{
		
		/// <summary>
		/// Names found during the background check process
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="names_found")]
		public NameFound[] Names_found { get; set; }
	}
	
	/// <summary>
	/// Represents names found during the process
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NameFound
	{
		
		/// <summary>
		/// Times this name was found during the background check process
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="count")]
		public int Count { get; set; }
		
		/// <summary>
		/// First name found in the background check
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="first_name")]
		public string First_name { get; set; }
		
		/// <summary>
		/// Last name found in the background check
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="last_name")]
		public string Last_name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CheckCountry
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ALL")]
		ALL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BR")]
		BR = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CL")]
		CL = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CO")]
		CO = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CR")]
		CR = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EC")]
		EC = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MX")]
		MX = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PE")]
		PE = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AR")]
		AR = 8,
	}
	
	/// <summary>
	/// Represents dataset scores. A score is a number between 0 and 1 that indicates how trustworthy the person, vehicle, or company is accordig to the result of the background check. Severity represents the risk associated with each dataset according to the background check. Keep in mind that you should use either the score or the severity but not both
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Score
	{
		
		/// <summary>
		/// Represents score detail of a background check
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="by_id")]
		public ScoreDetail By_id { get; set; }
		
		/// <summary>
		/// Represents score detail of a background check
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="by_name")]
		public ScoreDetail By_name { get; set; }
		
		/// <summary>
		/// Dataset summed up to create the score
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data_set")]
		public ScoreData_set Data_set { get; set; }
		
		/// <summary>
		/// Overall result of the data collected. If at least one collected data status is found, the result will be found, otherwise, it will be the most frecuent status
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="result")]
		public ScoreDetailResult Result { get; set; }
		
		/// <summary>
		/// Dataset score. Number between 0 and 1 where 1 is the best score.
		/// Required
		/// Minimum: 0
		/// Maximum: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="score")]
		[System.ComponentModel.DataAnnotations.Range(0, 1)]
		public float Score1 { get; set; }
		
		/// <summary>
		/// Risk asociated with each category for the search according to the information found. None is returned when the person, vehicle or company is in the clear. Unknown is returned when the score is none due to a problem with one of the searches
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="severity")]
		public ScoreSeverity Severity { get; set; }
	}
	
	/// <summary>
	/// Represents score detail of a background check
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScoreDetail
	{
		
		/// <summary>
		/// Overall result of the data collected. If at least one collected data status is found, the result will be found, otherwise, it will be the most frecuent status
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="result")]
		public ScoreDetailResult Result { get; set; }
		
		/// <summary>
		/// Dataset score. Number between 0 and 1 where 1 is the best score.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="score")]
		public float Score { get; set; }
		
		/// <summary>
		/// Risk asociated with each category for the search according to the information found. None is returned when the person, vehicle or company is in the clear. Unknown is returned when the score is none
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="severity")]
		public ScoreDetailSeverity Severity { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ScoreDetailResult
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pending")]
		pending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="found")]
		found = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="not_found")]
		not_found = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="error")]
		error = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="delayed")]
		delayed = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ignored")]
		ignored = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ScoreDetailSeverity
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="unknown")]
		unknown = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="none")]
		none = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="very_low")]
		very_low = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="low")]
		low = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="medium")]
		medium = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="high")]
		high = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="very_high")]
		very_high = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ScoreData_set
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="affiliations_and_insurances")]
		affiliations_and_insurances = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="alert_in_media")]
		alert_in_media = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="behavior")]
		behavior = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="business_background")]
		business_background = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="criminal_record")]
		criminal_record = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="driving_licenses")]
		driving_licenses = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="international_background")]
		international_background = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="legal_background")]
		legal_background = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="personal_identity")]
		personal_identity = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="professional_background")]
		professional_background = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="traffic_fines")]
		traffic_fines = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="vehicle_information")]
		vehicle_information = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="vehicle_permits")]
		vehicle_permits = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="taxes_and_finances")]
		taxes_and_finances = 13,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ScoreSeverity
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="unknown")]
		unknown = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="none")]
		none = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="very_low")]
		very_low = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="low")]
		low = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="medium")]
		medium = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="high")]
		high = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="very_high")]
		very_high = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CheckNative_country
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ad")]
		ad = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ae")]
		ae = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="af")]
		af = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ag")]
		ag = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ai")]
		ai = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="al")]
		al = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="am")]
		am = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="an")]
		an = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ao")]
		ao = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="aq")]
		aq = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ar")]
		ar = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="as")]
		_as = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="at")]
		at = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="au")]
		au = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="aw")]
		aw = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ax")]
		ax = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="az")]
		az = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ba")]
		ba = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="bb")]
		bb = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="bd")]
		bd = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="be")]
		be = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="bf")]
		bf = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="bg")]
		bg = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="bh")]
		bh = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="bi")]
		bi = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="bj")]
		bj = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="bm")]
		bm = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="bn")]
		bn = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="bo")]
		bo = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="br")]
		br = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="bs")]
		bs = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="bt")]
		bt = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="bv")]
		bv = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="bw")]
		bw = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="by")]
		by = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="bz")]
		bz = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ca")]
		ca = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cc")]
		cc = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cd")]
		cd = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cf")]
		cf = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cg")]
		cg = 40,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ch")]
		ch = 41,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ci")]
		ci = 42,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ck")]
		ck = 43,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cl")]
		cl = 44,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cm")]
		cm = 45,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cn")]
		cn = 46,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="co")]
		co = 47,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cr")]
		cr = 48,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cu")]
		cu = 49,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cv")]
		cv = 50,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cx")]
		cx = 51,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cy")]
		cy = 52,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cz")]
		cz = 53,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="de")]
		de = 54,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="dj")]
		dj = 55,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="dk")]
		dk = 56,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="dm")]
		dm = 57,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="do")]
		_do = 58,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="dz")]
		dz = 59,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ea")]
		ea = 60,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ec")]
		ec = 61,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ee")]
		ee = 62,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="eg")]
		eg = 63,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="eh")]
		eh = 64,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="er")]
		er = 65,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="es")]
		es = 66,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="et")]
		et = 67,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fi")]
		fi = 68,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fj")]
		fj = 69,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fk")]
		fk = 70,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fm")]
		fm = 71,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fo")]
		fo = 72,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fr")]
		fr = 73,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ga")]
		ga = 74,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="gb")]
		gb = 75,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="gd")]
		gd = 76,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ge")]
		ge = 77,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="gf")]
		gf = 78,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="gg")]
		gg = 79,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="gh")]
		gh = 80,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="gi")]
		gi = 81,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="gl")]
		gl = 82,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="gm")]
		gm = 83,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="gn")]
		gn = 84,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="gp")]
		gp = 85,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="gq")]
		gq = 86,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="gr")]
		gr = 87,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="gs")]
		gs = 88,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="gt")]
		gt = 89,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="gu")]
		gu = 90,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="gw")]
		gw = 91,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="gy")]
		gy = 92,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="hk")]
		hk = 93,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="hm")]
		hm = 94,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="hn")]
		hn = 95,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="hr")]
		hr = 96,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ht")]
		ht = 97,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="hu")]
		hu = 98,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="id")]
		id = 99,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ie")]
		ie = 100,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="il")]
		il = 101,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="im")]
		im = 102,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="in")]
		_in = 103,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="io")]
		io = 104,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="iq")]
		iq = 105,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ir")]
		ir = 106,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="is")]
		_is = 107,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="it")]
		it = 108,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="je")]
		je = 109,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="jm")]
		jm = 110,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="jo")]
		jo = 111,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="jp")]
		jp = 112,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ke")]
		ke = 113,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="kg")]
		kg = 114,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="kh")]
		kh = 115,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ki")]
		ki = 116,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="km")]
		km = 117,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="kn")]
		kn = 118,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="kp")]
		kp = 119,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="kr")]
		kr = 120,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="kw")]
		kw = 121,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ky")]
		ky = 122,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="kz")]
		kz = 123,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="la")]
		la = 124,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="lb")]
		lb = 125,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="lc")]
		lc = 126,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="li")]
		li = 127,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="lk")]
		lk = 128,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="lr")]
		lr = 129,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ls")]
		ls = 130,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="lt")]
		lt = 131,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="lu")]
		lu = 132,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="lv")]
		lv = 133,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ly")]
		ly = 134,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ma")]
		ma = 135,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mc")]
		mc = 136,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="md")]
		md = 137,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="me")]
		me = 138,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mg")]
		mg = 139,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mh")]
		mh = 140,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mk")]
		mk = 141,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml")]
		ml = 142,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mm")]
		mm = 143,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mn")]
		mn = 144,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mo")]
		mo = 145,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mp")]
		mp = 146,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mq")]
		mq = 147,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mr")]
		mr = 148,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ms")]
		ms = 149,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mt")]
		mt = 150,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mu")]
		mu = 151,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mv")]
		mv = 152,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mw")]
		mw = 153,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mx")]
		mx = 154,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="my")]
		my = 155,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mz")]
		mz = 156,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="na")]
		na = 157,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="nc")]
		nc = 158,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ne")]
		ne = 159,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="nf")]
		nf = 160,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ng")]
		ng = 161,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ni")]
		ni = 162,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="nl")]
		nl = 163,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="no")]
		no = 164,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="np")]
		np = 165,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="nr")]
		nr = 166,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="nu")]
		nu = 167,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="nz")]
		nz = 168,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="om")]
		om = 169,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pa")]
		pa = 170,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pe")]
		pe = 171,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pf")]
		pf = 172,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pg")]
		pg = 173,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ph")]
		ph = 174,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pk")]
		pk = 175,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pl")]
		pl = 176,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pm")]
		pm = 177,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pn")]
		pn = 178,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pr")]
		pr = 179,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ps")]
		ps = 180,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pt")]
		pt = 181,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pw")]
		pw = 182,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="py")]
		py = 183,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="qa")]
		qa = 184,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="re")]
		re = 185,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ro")]
		ro = 186,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="rs")]
		rs = 187,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ru")]
		ru = 188,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="rw")]
		rw = 189,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="sa")]
		sa = 190,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="sb")]
		sb = 191,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="sc")]
		sc = 192,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="sd")]
		sd = 193,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="se")]
		se = 194,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="sg")]
		sg = 195,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="sh")]
		sh = 196,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="si")]
		si = 197,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="sj")]
		sj = 198,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="sk")]
		sk = 199,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="sl")]
		sl = 200,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="sm")]
		sm = 201,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="sn")]
		sn = 202,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="so")]
		so = 203,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="sr")]
		sr = 204,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="st")]
		st = 205,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="sv")]
		sv = 206,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="sy")]
		sy = 207,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="sz")]
		sz = 208,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="tc")]
		tc = 209,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="td")]
		td = 210,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="tf")]
		tf = 211,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="tg")]
		tg = 212,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="th")]
		th = 213,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="tj")]
		tj = 214,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="tk")]
		tk = 215,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="tl")]
		tl = 216,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="tm")]
		tm = 217,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="tn")]
		tn = 218,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="to")]
		to = 219,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="tr")]
		tr = 220,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="tt")]
		tt = 221,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="tv")]
		tv = 222,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="tw")]
		tw = 223,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="tz")]
		tz = 224,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ua")]
		ua = 225,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ug")]
		ug = 226,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="um")]
		um = 227,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="us")]
		us = 228,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="uy")]
		uy = 229,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="uz")]
		uz = 230,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="va")]
		va = 231,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="vc")]
		vc = 232,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ve")]
		ve = 233,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="vg")]
		vg = 234,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="vi")]
		vi = 235,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="vn")]
		vn = 236,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="vu")]
		vu = 237,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="wf")]
		wf = 238,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ws")]
		ws = 239,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ye")]
		ye = 240,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="yt")]
		yt = 241,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="za")]
		za = 242,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="zm")]
		zm = 243,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="zw")]
		zw = 244,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CheckRegion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DF")]
		DF = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AC")]
		AC = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AL")]
		AL = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AP")]
		AP = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AM")]
		AM = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BA")]
		BA = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CE")]
		CE = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ES")]
		ES = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GO")]
		GO = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MA")]
		MA = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MT")]
		MT = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MS")]
		MS = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MG")]
		MG = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PA")]
		PA = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PB")]
		PB = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PR")]
		PR = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PE")]
		PE = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PI")]
		PI = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RJ")]
		RJ = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RN")]
		RN = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RS")]
		RS = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RO")]
		RO = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RR")]
		RR = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SC")]
		SC = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SP")]
		SP = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SE")]
		SE = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TO")]
		TO = 26,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CheckStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="not_started")]
		not_started = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="in_progress")]
		in_progress = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="completed")]
		completed = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="error")]
		error = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="delayed")]
		delayed = 4,
	}
	
	/// <summary>
	/// Represents the status of databases used to generate background checks
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Status
	{
		
		/// <summary>
		/// Background check dataset
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data_set")]
		public ScoreData_set Data_set { get; set; }
		
		/// <summary>
		/// Database ID. Can be used to verify the database status
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="database_id")]
		public string Database_id { get; set; }
		
		/// <summary>
		/// Background check database name. Do not use this field to identify the database as it may change during the check execution. Use database_id instead
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="database_name")]
		public string Database_name { get; set; }
		
		/// <summary>
		/// List of missing or invalid inputs
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="invalid_inputs")]
		public string[] Invalid_inputs { get; set; }
		
		/// <summary>
		/// Result status of the background check. **Not_started** means the background check is still in queue, since there is a limit of background checks that can be processed simultaneously, **completed** means the search finished successfully, **error** means the search failed, **expired** means the search took too long to finish and therefore failed, **skipped** means the search failed because a wrong number or type of parameters was provided, **delayed** means the search is waiting for an additional requirement to be met and can last up to 3 days
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<StatusStatus1> Status1 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum StatusStatus1
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="not_started")]
		not_started = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="completed")]
		completed = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="expired")]
		expired = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="error")]
		error = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="delayed")]
		delayed = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="skipped")]
		skipped = 5,
	}
	
	/// <summary>
	/// Represents a background check summary
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Summary
	{
		
		/// <summary>
		/// Person date of birth in RFC3339 format
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date_of_birth")]
		public System.Nullable<System.DateTimeOffset> Date_of_birth { get; set; }
		
		/// <summary>
		/// Person date of death
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="death_date")]
		public System.Nullable<System.DateTimeOffset> Death_date { get; set; }
		
		/// <summary>
		/// Person driver's license
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="drivers_license")]
		public string Drivers_license { get; set; }
		
		/// <summary>
		/// Person gender
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gender")]
		public System.Nullable<SummaryGender> Gender { get; set; }
		
		/// <summary>
		/// Indicates whether a person was found, found as dead or not found at all
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="identity_status")]
		public System.Nullable<SummaryIdentity_status> Identity_status { get; set; }
		
		/// <summary>
		/// Names found during the background check process
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="names_found")]
		public NameFound[] Names_found { get; set; }
		
		/// <summary>
		/// Social security number of the person (Mexico)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nss")]
		public string Nss { get; set; }
		
		/// <summary>
		/// Federal taxpayer registration number of the person
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rfc")]
		public string Rfc { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum SummaryGender
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="male")]
		male = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="female")]
		female = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum SummaryIdentity_status
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="found")]
		found = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="not_found")]
		not_found = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="dead")]
		dead = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CheckType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="company")]
		company = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="person")]
		person = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="vehicle")]
		vehicle = 2,
	}
	
	/// <summary>
	/// Represents the summary of a vehicle background check
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VehicleSummary
	{
		
		/// <summary>
		/// Number of passengers allowed to travel in the vehicle
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="capacity")]
		public System.Nullable<System.Int32> Capacity { get; set; }
		
		/// <summary>
		/// Vehicle color
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="color")]
		public string Color { get; set; }
		
		/// <summary>
		/// Vehicle license plate
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="license_plate")]
		public string License_plate { get; set; }
		
		/// <summary>
		/// Vehicle manufacturer
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="manufacturer")]
		public string Manufacturer { get; set; }
		
		/// <summary>
		/// Vehicle model
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="model")]
		public string Model { get; set; }
		
		/// <summary>
		/// Vehicle door count
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="number_of_doors")]
		public System.Nullable<System.Int32> Number_of_doors { get; set; }
		
		/// <summary>
		/// Expiration date of the vehicle compulsory insurance 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="obligatory_insurance_expiration_date")]
		public System.Nullable<System.DateOnly> Obligatory_insurance_expiration_date { get; set; }
		
		/// <summary>
		/// Status of the vehicle compulsory insurances
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="obligatory_insurance_status")]
		public string Obligatory_insurance_status { get; set; }
		
		/// <summary>
		/// Vehicle service type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="service_type")]
		public string Service_type { get; set; }
		
		/// <summary>
		/// Vehicle category
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vehicle_category")]
		public string Vehicle_category { get; set; }
		
		/// <summary>
		/// Vehicle ID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vehicle_id")]
		public string Vehicle_id { get; set; }
		
		/// <summary>
		/// Vehicle type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vehicle_type")]
		public string Vehicle_type { get; set; }
		
		/// <summary>
		/// Vehicle model year
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="year")]
		public System.Nullable<System.Int32> Year { get; set; }
	}
	
	/// <summary>
	/// Represents a parameter entered during the background check creation that does not match the information obtained
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WrongInput
	{
		
		/// <summary>
		/// Parameter entered that differs from the information obtained
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<WrongInputInput> Input { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum WrongInputInput
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="document_expedition_date")]
		document_expedition_date = 0,
	}
	
	/// <summary>
	/// Represents background check details
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CheckDetails
	{
		
		/// <summary>
		/// Associated background check ID
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="check_id")]
		public string Check_id { get; set; }
		
		/// <summary>
		/// Details dataset
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data_set")]
		public string Data_set { get; set; }
		
		/// <summary>
		/// Database name. Do not use this field to identify the database as its value may vary as the check is completed
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="database_name")]
		public string Database_name { get; set; }
		
		/// <summary>
		/// table group type
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="group")]
		public CheckDetailsGroup Group { get; set; }
		
		/// <summary>
		/// Detail ID
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Database result
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="result")]
		public CheckDetailsResult Result { get; set; }
		
		/// <summary>
		/// Partial detail score. Scores are aggregated later in the background check
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="score")]
		public double Score { get; set; }
		
		/// <summary>
		/// Query detailed information
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tables")]
		public Table[] Tables { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CheckDetailsGroup
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="profile")]
		profile = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="legal")]
		legal = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="affiliations")]
		affiliations = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="vehicle")]
		vehicle = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="global")]
		global = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="media")]
		media = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="unknown")]
		unknown = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CheckDetailsResult
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pending")]
		pending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="found")]
		found = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="not_found")]
		not_found = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="error")]
		error = 3,
	}
	
	/// <summary>
	/// Represents a table to lay out search results
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Table
	{
		
		/// <summary>
		/// Table rows
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="rows")]
		public TableRow[] Rows { get; set; }
		
		/// <summary>
		/// Table title
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	/// <summary>
	/// A table row, containing one or more cells
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TableRow
	{
		
		/// <summary>
		/// Row cells
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="cells")]
		public TableCell[] Cells { get; set; }
	}
	
	/// <summary>
	/// Represents a table cell
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TableCell
	{
		
		/// <summary>
		/// Cell label
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
		
		/// <summary>
		/// Cell value
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// Represents a list of background check details
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CheckDetailsOutput
	{
		
		/// <summary>
		/// Detail list
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="details")]
		public CheckDetails[] Details { get; set; }
		
		/// <summary>
		/// Next page path
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="next")]
		public string Next { get; set; }
		
		/// <summary>
		/// Current page path
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="self")]
		public string Self { get; set; }
	}
	
	/// <summary>
	/// Represents the result of a background check search
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CheckOutput
	{
		
		/// <summary>
		/// Represents a background check
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="check")]
		public Check Check { get; set; }
		
		/// <summary>
		/// Detail path
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string Details { get; set; }
		
		/// <summary>
		/// Background check URL
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="self")]
		public string Self { get; set; }
	}
	
	/// <summary>
	/// Represents the results of a background check search
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChecksOutput
	{
		
		/// <summary>
		/// Background check list in the page
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="checks")]
		public Check[] Checks { get; set; }
		
		/// <summary>
		/// Next page path
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="next")]
		public string Next { get; set; }
		
		/// <summary>
		/// Current page path
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="self")]
		public string Self { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Comment
	{
		
		/// <summary>
		/// Background check ID
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="check_id")]
		public string Check_id { get; set; }
		
		/// <summary>
		/// Comment content
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="content")]
		public string Content { get; set; }
		
		/// <summary>
		/// Comment creation date
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="creation_date")]
		public string Creation_date { get; set; }
		
		/// <summary>
		/// Comment ID
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Comment parent ID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parent_id")]
		public string Parent_id { get; set; }
		
		/// <summary>
		/// Comment update date
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="update_date")]
		public string Update_date { get; set; }
		
		/// <summary>
		/// Comment creator username
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
	}
	
	/// <summary>
	/// Represents a comment search result
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CommentOutput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="comment")]
		public Comment Comment { get; set; }
		
		/// <summary>
		/// Current comment path
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="self")]
		public string Self { get; set; }
	}
	
	/// <summary>
	/// Represents comment search results
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CommentsOutput
	{
		
		/// <summary>
		/// Comment list
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="comments")]
		public Comment[] Comments { get; set; }
		
		/// <summary>
		/// Next page path
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="next")]
		public string Next { get; set; }
		
		/// <summary>
		/// Previous page path
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="previous")]
		public string Previous { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Config
	{
		
		/// <summary>
		/// Client ID
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="client_id")]
		public string Client_id { get; set; }
		
		/// <summary>
		/// Configuration ID
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="config_id")]
		public string Config_id { get; set; }
		
		/// <summary>
		/// Represents a set of configurations to determine the background check score
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="score_config")]
		public ScoreConfig Score_config { get; set; }
	}
	
	/// <summary>
	/// Represents a set of configurations to determine the background check score
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScoreConfig
	{
		
		/// <summary>
		/// Background check dataset
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data_set")]
		public string Data_set { get; set; }
		
		/// <summary>
		/// Dataset weight for score calculation
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="weight")]
		public string Weight { get; set; }
	}
	
	/// <summary>
	/// Continuous check allows for background checks to be performed on the same people or vehicles periodically and notifies if new information is found. Allowing companies to keep an eye on their workforce or vehicle fleet for any recent wrongdoing they might be involved in.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContinuousCheck
	{
		
		/// <summary>
		/// Continuous check ID [partition key and sort key]
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ContinuousCheckID { get; set; }
		
		/// <summary>
		/// Shows whether the background check score rose, fell, stood the same or was just created
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ContinuousCheckContinuousCheckStatus ContinuousCheckStatus { get; set; }
		
		/// <summary>
		/// Continuous check creation date in RFC3339 format
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateOnly> CreationDate { get; set; }
		
		/// <summary>
		/// Indicates whether continuous check is enabled
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		/// <summary>
		/// Time between background checks. It can be daily, weekly, monthly, yearly or have a custom frequency written as a number accompanied by d: day, w: week, m: month, y: year for instance: 3d: every three days, 2w: every two weeks
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Frequency { get; set; }
		
		/// <summary>
		/// Represents to changelog entry of a continuous check
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ContinuousCheckEntry History { get; set; }
		
		/// <summary>
		/// Last check ID
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LastCheckID { get; set; }
		
		/// <summary>
		/// Next background check date, in RFC3339 format (without time)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateOnly> NextRunDate { get; set; }
		
		/// <summary>
		/// Represents a background check
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Check OriginalCheck { get; set; }
		
		/// <summary>
		/// Continuous check update date in RFC3339 format
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateOnly> UpdateDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ContinuousCheckContinuousCheckStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="new")]
		_new = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="up")]
		up = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="down")]
		down = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="same")]
		same = 3,
	}
	
	/// <summary>
	/// Represents to changelog entry of a continuous check
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContinuousCheckEntry
	{
		
		/// <summary>
		/// Change list of background check scores
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="changes")]
		public Change[] Changes { get; set; }
		
		/// <summary>
		/// Check ID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="check_id")]
		public string Check_id { get; set; }
		
		/// <summary>
		/// Continuous check ID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="continuous_check_id")]
		public string Continuous_check_id { get; set; }
		
		/// <summary>
		/// Continuous check creation date in RFC3339 format
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creation_date")]
		public System.Nullable<System.DateOnly> Creation_date { get; set; }
		
		/// <summary>
		/// Previous check ID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="previous_check_id")]
		public string Previous_check_id { get; set; }
	}
	
	/// <summary>
	/// Represents information required to create an API key
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateAPIKeyInput
	{
		
		/// <summary>
		/// Time in days the API key will be valid for. 365 by default
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="days_exp")]
		public int Days_exp { get; set; }
		
		/// <summary>
		/// API key name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="key_name")]
		public string Key_name { get; set; }
		
		/// <summary>
		/// API key owner name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tenant")]
		public string Tenant { get; set; }
		
		/// <summary>
		/// API key version. 0 by default
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	/// <summary>
	/// Represents paramaters required to give behavior feedback
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateBehaviorInput
	{
		
		/// <summary>
		/// Birth date of reported person
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="birth_date")]
		public System.DateTimeOffset Birth_date { get; set; }
		
		/// <summary>
		/// Document country
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="country")]
		public CreateBehaviorInputCountry Country { get; set; }
		
		/// <summary>
		/// Person document ID
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="document_id")]
		public string Document_id { get; set; }
		
		/// <summary>
		/// Document type associated with the background check
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="document_type")]
		public CreateBehaviorInputDocument_type Document_type { get; set; }
		
		/// <summary>
		/// Reported person e-mail
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// Behavior report date
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="feedback_date")]
		public System.DateTimeOffset Feedback_date { get; set; }
		
		/// <summary>
		/// Person first name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="first_name")]
		public string First_name { get; set; }
		
		/// <summary>
		/// Person last name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="last_name")]
		public string Last_name { get; set; }
		
		/// <summary>
		/// Phone number of the reported person
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phone_number")]
		public string Phone_number { get; set; }
		
		/// <summary>
		/// Report reason
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public CreateBehaviorInputReason Reason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CreateBehaviorInputCountry
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="co")]
		co = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ve")]
		ve = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cl")]
		cl = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mx")]
		mx = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pe")]
		pe = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="do")]
		_do = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="sv")]
		sv = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="gt")]
		gt = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="bo")]
		bo = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cr")]
		cr = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ec")]
		ec = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pa")]
		pa = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="br")]
		br = 12,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CreateBehaviorInputDocument_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="national-id")]
		nationalMinusid = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="passport")]
		passport = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="foreign-id")]
		foreignMinusid = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="nit")]
		nit = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="diplomatic-id")]
		diplomaticMinusid = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="civil-registration")]
		civilMinusregistration = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="identity-card")]
		identityMinuscard = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="foreigner-card")]
		foreignerMinuscard = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="professional-card")]
		professionalMinuscard = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="military-card")]
		militaryMinuscard = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pep")]
		pep = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="nis")]
		nis = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="dni")]
		dni = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="rui")]
		rui = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="license-plate")]
		licenseMinusplate = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="query")]
		query = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="name")]
		name = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="rut")]
		rut = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="nuip")]
		nuip = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="foreign-societies")]
		foreignMinussocieties = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="escrow")]
		escrow = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="individual-registration")]
		individualMinusregistration = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="general-registration")]
		generalMinusregistration = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="curp")]
		curp = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="dui")]
		dui = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="driver-license")]
		driverMinuslicense = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ruc")]
		ruc = 26,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CreateBehaviorInputReason
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="rape")]
		rape = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="drug-dealer")]
		drugMinusdealer = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="sexual-harassment")]
		sexualMinusharassment = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="theft")]
		theft = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fights")]
		fights = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="aggressive-behaviour")]
		aggressiveMinusbehaviour = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="identity-fraud")]
		identityMinusfraud = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="drunk")]
		drunk = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="drug-possession")]
		drugMinuspossession = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="absences")]
		absences = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="tardiness")]
		tardiness = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="confidentiality-breach")]
		confidentialityMinusbreach = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="good-reputation")]
		goodMinusreputation = 12,
	}
	
	/// <summary>
	/// Represents paramaters required to create a background check
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateCheckInput
	{
		
		/// <summary>
		/// Person birth certificate
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="birth_certificate")]
		public string Birth_certificate { get; set; }
		
		/// <summary>
		/// Company name "Don't forget this required field to complete background checks in Brazil"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="company_name")]
		public string Company_name { get; set; }
		
		/// <summary>
		/// Document country
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="country")]
		public CheckCountry Country { get; set; }
		
		/// <summary>
		/// Person birthdate. This date is used to get some additional information about a person and to filter homonyms in some cases. YYYY-MM-DD format, Required for complete background checks in Brazil
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date_of_birth")]
		public System.Nullable<System.DateOnly> Date_of_birth { get; set; }
		
		/// <summary>
		/// Diplomatic ID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="diplomatic_id")]
		public string Diplomatic_id { get; set; }
		
		/// <summary>
		/// Driver's license number
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="driver_license")]
		public string Driver_license { get; set; }
		
		/// <summary>
		/// Colombian escrow
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="escrow")]
		public string Escrow { get; set; }
		
		/// <summary>
		/// Person or entity first name. If the document type and number are not provided, the report might include homonyms. Required when searching by first name, Required in order to get complete background checks in Brazil
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="first_name")]
		public string First_name { get; set; }
		
		/// <summary>
		/// Forces a new background check creation when true. Reuses recently created background checks otherwise
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="force_creation")]
		public System.Nullable<System.Boolean> Force_creation { get; set; }
		
		/// <summary>
		/// Person foreign ID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="foreign_id")]
		public string Foreign_id { get; set; }
		
		/// <summary>
		/// Person document issue date in "YYYY-mm-dd" format (e.g. 2008-12-31) . This date is used to get some additional information about a person in some cases
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="issue_date")]
		public System.Nullable<System.DateOnly> Issue_date { get; set; }
		
		/// <summary>
		/// Person or entity last name. If the document type and number are not provided, the report might include homonyms. Required when searching by last name. Required in order to get complete background checks in Brazil
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="last_name")]
		public string Last_name { get; set; }
		
		/// <summary>
		/// Vehicle license plate
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="license_plate")]
		public string License_plate { get; set; }
		
		/// <summary>
		/// National ID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="national_id")]
		public string National_id { get; set; }
		
		/// <summary>
		/// Country of birth
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="native_country")]
		public string Native_country { get; set; }
		
		/// <summary>
		/// National ID of the vehicle owner
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="owner_document_id")]
		public string Owner_document_id { get; set; }
		
		/// <summary>
		/// National ID, foreign ID, or tax ID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="owner_document_type")]
		public string Owner_document_type { get; set; }
		
		/// <summary>
		/// Person passport
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="passport")]
		public string Passport { get; set; }
		
		/// <summary>
		/// Payment day of a vehicle circulation permit (Chile only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payment_date")]
		public System.Nullable<System.DateOnly> Payment_date { get; set; }
		
		/// <summary>
		/// ID for Venezuelans working in Colombia
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pep")]
		public string Pep { get; set; }
		
		/// <summary>
		/// Person phone number. Required by law to notify the person their background is being checked
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phone_number")]
		public string Phone_number { get; set; }
		
		/// <summary>
		/// Professional ID card
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="professional_card")]
		public string Professional_card { get; set; }
		
		/// <summary>
		/// ID for Venezuelans working in Peru
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ptp")]
		public string Ptp { get; set; }
		
		/// <summary>
		/// Region where the background is to be checked in addition to the region where the person is from. By default, background checks in Brazil are performed in the region where the person is from. Required for Brazil only. Allowed values are: DF: Distrito Federal, AC: Acre, AL: Alagoas, AP: Amapá, AM: Amazonas, BA: Bahía, CE: Ceará, ES: Espírito Santo, GO: Goiás, MA: Maranhão, MT: Mato Grosso, MS: Mato Grosso do Sul, MG: Minas Gerais, PA: Pará, PB: Paraíba, PR: Paraná, PE: Pernambuco, PI: Piauí, RJ: Río de Janeiro, RN: Río Grande do Norte, RS: Río Grande do Sul, RO: Rondônia, RR: Roraima, SC: Santa Catarina, SP: São Paulo, SE: Sergipe, TO : Tocantins.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="region")]
		public CheckRegion Region { get; set; }
		
		/// <summary>
		/// Report ID the background check will be inserted into
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="report_id")]
		public string Report_id { get; set; }
		
		/// <summary>
		///  Used for the RG (Registro Geral) identification in Brazil. This identification has different formats according to the state that issues the document. It can have numbers and letters but other characters (- * , . ) are omitted, Required in order to get complete background checks in Brazil
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state_id")]
		public string State_id { get; set; }
		
		/// <summary>
		/// Company ID used for tax payments
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tax_id")]
		public string Tax_id { get; set; }
		
		/// <summary>
		/// Background check type
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public CreateCheckInputType Type { get; set; }
		
		/// <summary>
		/// Indicates whether the person subject to the validation authorized the validation. Must be true in order to proceed [Required for API key V1 or later]
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="user_authorized")]
		public System.Nullable<System.Boolean> User_authorized { get; set; }
		
		/// <summary>
		/// Vehicle license plate
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vehicle_id")]
		public string Vehicle_id { get; set; }
		
		/// <summary>
		/// Verification code registered for criminal records in Peru only
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verification_code")]
		public string Verification_code { get; set; }
		
		/// <summary>
		/// Indicates whether the check score is to be periodically revised and its frequency. It can be daily, weekly, monthly, yearly or have a custom frequency written as a number accompanied by d: day, w: week, m: month, y: year for instance: 3d: every three days, 2w: every two weeks. Ignore this field if the check is only to be performed once
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="watch")]
		public string Watch { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CreateCheckInputType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="person")]
		person = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="vehicle")]
		vehicle = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="company")]
		company = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="custom_type_name")]
		custom_type_name = 3,
	}
	
	/// <summary>
	/// Represents paramaters required to create a comment
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateCommentInput
	{
		
		/// <summary>
		/// Comment content
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="content")]
		public object Content { get; set; }
	}
	
	/// <summary>
	/// Represents paramaters required to create a score configuration
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateConfigInput
	{
		
		/// <summary>
		/// Country where this set of rules applies. Use "all" if the check type searches by name by relying on international databases
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="country")]
		public CheckCountry Country { get; set; }
		
		/// <summary>
		/// Affiliation and insurance weight for score calculation. From 0 to 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataset_affiliations_and_insurances")]
		public System.Nullable<System.Single> Dataset_affiliations_and_insurances { get; set; }
		
		/// <summary>
		/// Alert in media weight for score calculation. From 0 to 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataset_alert_in_media")]
		public System.Nullable<System.Single> Dataset_alert_in_media { get; set; }
		
		/// <summary>
		/// Business background weight for score calculation. From 0 to 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataset_business_background")]
		public System.Nullable<System.Single> Dataset_business_background { get; set; }
		
		/// <summary>
		/// Criminal record weight for score calculation. From 0 to 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataset_criminal_record")]
		public System.Nullable<System.Single> Dataset_criminal_record { get; set; }
		
		/// <summary>
		/// Driving license weight for score calculation. From 0 to 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataset_driving_licenses")]
		public System.Nullable<System.Single> Dataset_driving_licenses { get; set; }
		
		/// <summary>
		/// International background weight for score calculation. From 0 to 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataset_international_background")]
		public System.Nullable<System.Single> Dataset_international_background { get; set; }
		
		/// <summary>
		/// Legal background weight for score calculation. From 0 to 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataset_legal_background")]
		public System.Nullable<System.Single> Dataset_legal_background { get; set; }
		
		/// <summary>
		/// Personal identity weight for score calculation. From 0 to 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataset_personal_identity")]
		public System.Nullable<System.Single> Dataset_personal_identity { get; set; }
		
		/// <summary>
		/// Professional background weight for score calculation. From 0 to 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataset_professional_background")]
		public System.Nullable<System.Single> Dataset_professional_background { get; set; }
		
		/// <summary>
		/// Taxes and financial background weight for score calculation. From 0 to 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataset_taxes_and_finances")]
		public System.Nullable<System.Single> Dataset_taxes_and_finances { get; set; }
		
		/// <summary>
		/// Traffic fines weight for score calculation. From 0 to 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataset_traffic_fines")]
		public System.Nullable<System.Single> Dataset_traffic_fines { get; set; }
		
		/// <summary>
		/// Vehicle information weight for score calculation. From 0 to 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataset_vehicle_information")]
		public System.Nullable<System.Single> Dataset_vehicle_information { get; set; }
		
		/// <summary>
		/// Vehicle certificate background weight for score calculation. From 0 to 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataset_vehicle_permits")]
		public System.Nullable<System.Single> Dataset_vehicle_permits { get; set; }
		
		/// <summary>
		/// Score configuration name. It cannot be person, vehicle, or company
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	///  Represents to CreateContinuousCheckInput
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateContinuousCheckInput
	{
		
		/// <summary>
		/// Background checks to be processed recurrently
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="check_id")]
		public string Check_id { get; set; }
		
		/// <summary>
		/// Time between background checks. It can be daily, weekly, monthly, yearly or have a custom frequency written as a number accompanied by d: day, w: week, m: month, y: year for instance: 3d: every three days, 2w: every two weeks
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="frequency")]
		public string Frequency { get; set; }
		
		/// <summary>
		/// Indicates whether the background checks must be processed recurrently (enabled | disabled)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	/// <summary>
	/// Creates a hook related to previous created check.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateHookInput
	{
		
		/// <summary>
		/// Actions you want to be notified. Possible inputs are created, started, and finished or any combination of those three
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="actions")]
		public string[] Actions { get; set; }
		
		/// <summary>
		/// The entity events the client wants to subscribe
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="event_type")]
		public CreateHookInputEvent_type Event_type { get; set; }
		
		/// <summary>
		/// indicates whether the hook is active or not. enabled by default
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<CreateHookInputStatus> Status { get; set; }
		
		/// <summary>
		/// Email address where the notification is to be sent. Required if subscriber_type was set to email
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subscriber_address")]
		public string Subscriber_address { get; set; }
		
		/// <summary>
		/// Language for the notification to be sent
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subscriber_language")]
		public System.Nullable<CreateHookInputSubscriber_language> Subscriber_language { get; set; }
		
		/// <summary>
		/// Name of the person to be notified
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subscriber_name")]
		public string Subscriber_name { get; set; }
		
		/// <summary>
		/// A platform with an endpoint ready to process the information
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="subscriber_type")]
		public CreateHookInputSubscriber_type Subscriber_type { get; set; }
		
		/// <summary>
		/// URL where the notification is to be sent. Required only if subscriber_type is set to web
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subscriber_url")]
		public string Subscriber_url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CreateHookInputEvent_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="all")]
		all = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="check")]
		check = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="continuous_check")]
		continuous_check = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CreateHookInputStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="enabled")]
		enabled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="disabled")]
		disabled = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CreateHookInputSubscriber_language
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="af")]
		af = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ar")]
		ar = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ca")]
		ca = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cs")]
		cs = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="da")]
		da = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="de")]
		de = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="el")]
		el = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="en")]
		en = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="es")]
		es = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fi")]
		fi = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fr")]
		fr = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="he")]
		he = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="hi")]
		hi = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="hr")]
		hr = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="hu")]
		hu = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="id")]
		id = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="it")]
		it = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ja")]
		ja = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ko")]
		ko = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ms")]
		ms = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="nb")]
		nb = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="nl")]
		nl = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pl")]
		pl = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pt")]
		pt = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pr-BR")]
		prMinusBR = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ro")]
		ro = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ru")]
		ru = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="sv")]
		sv = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="th")]
		th = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="tl")]
		tl = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="tr")]
		tr = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="vi")]
		vi = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="zh")]
		zh = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="zh-CN")]
		zhMinusCN = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="zh-HK")]
		zhMinusHK = 34,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CreateHookInputSubscriber_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="web")]
		web = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="email")]
		email = 1,
	}
	
	/// <summary>
	/// Represents paramaters required to create a report
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateReportInput
	{
		
		/// <summary>
		/// Report name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Represents paramaters required to create a rule
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateRuleInput
	{
		
		/// <summary>
		/// Used on the scores that fulfil this rule
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
		
		/// <summary>
		/// Rule nature
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="level")]
		public CreateRuleInputLevel Level { get; set; }
		
		/// <summary>
		/// Comparison between the rule and score values
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public CreateRuleInputOperation Operation { get; set; }
		
		/// <summary>
		/// Rule value
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public double Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CreateRuleInputLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="danger")]
		danger = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="warning")]
		warning = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="success")]
		success = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="info")]
		info = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CreateRuleInputOperation
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="==")]
		EqualEqual = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value=">=")]
		GreaterEqual = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value=">")]
		Greater = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="<")]
		LessThan = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="<=")]
		LessThanEqual = 4,
	}
	
	/// <summary>
	/// Represents the inputs required to create a user for an API-key version
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateUserInput
	{
		
		/// <summary>
		/// User country
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// User account email
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// User phone number (including country code)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="phone_number")]
		public string Phone_number { get; set; }
		
		/// <summary>
		/// Account name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tenant")]
		public string Tenant { get; set; }
	}
	
	/// <summary>
	/// Represents a database as well as an hourly status
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Database
	{
		
		/// <summary>
		/// List of data sets fed by the database. It can contain ``affiliations_and_insurances``, ``alert_in:media``, ``business_background``, ``criminal_record``, ``driving_licenses``, ``international_background``, ``legal_background``, ``personal_identity``, ``permiso_de_circulación_covid-19``, ``professional_background``, ``traffic_fines``, ``vehicle_information``, ``vehicle_permits``, ``behaviour_and_reputation``, or ``taxes_and_finances``
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data_sets")]
		public string[] Data_sets { get; set; }
		
		/// <summary>
		/// Database identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="database_id")]
		public string Database_id { get; set; }
		
		/// <summary>
		/// Database name. Do not use this field to identify the database as it might change, use database_id instead
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="database_name")]
		public string Database_name { get; set; }
		
		/// <summary>
		/// An hourly list of the database statuses. The ``operational`` status means the database executions were at least 90% successful, ``degraded_performance`` means the database executions were from 50 to 90% successful, ``partial_outage`` means the database executions were from 10 to 50% sucessful, ``major_outage`` means the database executions were under 10% successful. ``under_maintenance`` means the database is temporarily out of service for maintenance, ``deprecated`` means the database is permanently out of service, ``undetermined`` means there was no enough data to assess the database status
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hourly_status")]
		public string[] Hourly_status { get; set; }
	}
	
	/// <summary>
	/// Represents the input required to delete an API Key
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteAPIKeyInput
	{
		
		/// <summary>
		/// Key name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="key_name")]
		public string Key_name { get; set; }
	}
	
	/// <summary>
	/// Represents the inputs required to delete a Custom Type
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteConfigInput
	{
	}
	
	/// <summary>
	/// Repersents the input required to delete an API key user
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteUserInput
	{
		
		/// <summary>
		/// email of the API key user
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
	}
	
	/// <summary>
	/// The error type is returned when an error occurred in the platform.
	///
	///Error codes include:
	///
	///- 10404: resource was not found
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Error
	{
		
		/// <summary>
		/// Error code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// Message describing the error
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// GetContiuousCheckHistoryOutput
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetContiuousCheckHistoryOutput
	{
		
		/// <summary>
		/// List of background check changelogs
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="history")]
		public Change[] History { get; set; }
		
		/// <summary>
		/// Next page URL
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="next")]
		public string Next { get; set; }
		
		/// <summary>
		/// Current page URL
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="self")]
		public string Self { get; set; }
	}
	
	/// <summary>
	/// Represents the input required for health dashboard searches
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetHealthDashboardInput
	{
		
		/// <summary>
		/// Database country in ISO 3166 code. Must be in all caps.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// Unix timestamp. Send the current time to know the status
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="unixTimestampSeconds")]
		public string UnixTimestampSeconds { get; set; }
		
		/// <summary>
		/// Offset between the local time and the UTC time in seconds. (e.g., Colombia is located at UTC -18000 seconds)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="unixtimezoneOffsetSeconds")]
		public string UnixtimezoneOffsetSeconds { get; set; }
	}
	
	/// <summary>
	/// Represents a hook configuration
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Hook
	{
		
		/// <summary>
		/// Actions you want to be notified. Possible inputs are created, started, and finished or any combination of those three
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="actions")]
		public string[] Actions { get; set; }
		
		/// <summary>
		/// Entity events you want to be notified. If all is selected, there is no need to enter actions
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="event_type")]
		public System.Nullable<HookEvent_type> Event_type { get; set; }
		
		/// <summary>
		/// Secret random hexadecimal key used to sign the event and confirm its legitimacy. Signing keys are used to decode the JWT you get as payload from events
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="signing_key")]
		public string Signing_key { get; set; }
		
		/// <summary>
		/// indicates whether the hook is active or not. enabled by default
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public CreateHookInputStatus Status { get; set; }
		
		/// <summary>
		/// Platform with an endpoint ready to process the information. Only web is supported currently
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subscriber_type")]
		public string Subscriber_type { get; set; }
		
		/// <summary>
		/// Link where notification requests will be sent, required when subscriber_type is web
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subscriber_url")]
		public string Subscriber_url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum HookEvent_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="all")]
		all = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="check")]
		check = 1,
	}
	
	/// <summary>
	/// Represents the output of lists hooks request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HookOutput
	{
		
		/// <summary>
		/// List of hooks in current page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hooks")]
		public Hook[] Hooks { get; set; }
		
		/// <summary>
		/// Next page URL
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="next")]
		public string Next { get; set; }
		
		/// <summary>
		/// Current page URL
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="self")]
		public string Self { get; set; }
		
		/// <summary>
		/// HMAC key needed to decode the JWTs you will receive. All events are sent in JWT format, this key is needed in order to ensure that only authorized users can decode the information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="signing_key")]
		public string Signing_key { get; set; }
	}
	
	/// <summary>
	/// Represents to ListContinuousChecksOutput
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListContinuousChecksOutput
	{
		
		/// <summary>
		/// List of continuous checks in current page
		///
		///Default: all
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="continuous_checks")]
		public Check[] Continuous_checks { get; set; }
		
		/// <summary>
		/// Next page URL
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="next")]
		public string Next { get; set; }
		
		/// <summary>
		/// Current page URL
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="self")]
		public string Self { get; set; }
	}
	
	/// <summary>
	/// Represents reports
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Report
	{
		
		/// <summary>
		/// name of the user who created the report
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_by")]
		public string Created_by { get; set; }
		
		/// <summary>
		/// Amount of created checks. Returned only when a file is uploaded
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_checks_count")]
		public System.Nullable<System.Int32> Created_checks_count { get; set; }
		
		/// <summary>
		/// Report creation date
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="creation_date")]
		public System.DateTimeOffset Creation_date { get; set; }
		
		/// <summary>
		/// Indicates whether the report has an associated file
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="has_data")]
		public System.Nullable<System.Boolean> Has_data { get; set; }
		
		/// <summary>
		/// Report ID
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// number of invalid rows in the uploaded file. Returned only when a file is uploaded
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="invalid_checks_count")]
		public System.Nullable<System.Int32> Invalid_checks_count { get; set; }
		
		/// <summary>
		/// Report name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Uploaded file row count. Returned only when a file is uploaded
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="size")]
		public System.Nullable<System.Int32> Size { get; set; }
		
		/// <summary>
		/// Latest modification date of the report
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="update_date")]
		public System.DateTimeOffset Update_date { get; set; }
	}
	
	/// <summary>
	/// Reprents the report creation result
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReportOutput
	{
		
		/// <summary>
		/// Path to background check list
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="checks")]
		public string Checks { get; set; }
		
		/// <summary>
		/// Represents reports
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="report")]
		public Report Report { get; set; }
		
		/// <summary>
		/// Path to this resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="self")]
		public string Self { get; set; }
	}
	
	/// <summary>
	/// Represents the result of report searches
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReportsOutput
	{
		
		/// <summary>
		/// Next page path
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="next")]
		public string Next { get; set; }
		
		/// <summary>
		/// Report list
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reports")]
		public Report[] Reports { get; set; }
		
		/// <summary>
		/// Current page path
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="self")]
		public string Self { get; set; }
	}
	
	/// <summary>
	/// Represents a rule
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Rule
	{
		
		/// <summary>
		/// Rule nature
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="level")]
		public RuleLevel Level { get; set; }
		
		/// <summary>
		/// Comparison between the rule and score values
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public RuleOperation Operation { get; set; }
		
		/// <summary>
		/// Used on the scores that fulfil this rule
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outcome_label")]
		public string Outcome_label { get; set; }
		
		/// <summary>
		/// Rule value
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public double Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum RuleLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="danger")]
		danger = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="warning")]
		warning = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="success")]
		success = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="info")]
		info = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum RuleOperation
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="==")]
		EqualEqual = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value=">=")]
		GreaterEqual = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value=">")]
		Greater = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="<")]
		LessThan = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="<=")]
		LessThanEqual = 4,
	}
	
	/// <summary>
	/// Represents the result of a rule search
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RuleOutput
	{
		
		/// <summary>
		/// Represents a rule
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="rule")]
		public Rule Rule { get; set; }
		
		/// <summary>
		/// Path to this rule
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="self")]
		public string Self { get; set; }
	}
	
	/// <summary>
	/// Represents a list of score configurations that apply in the country
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScoreConfigOutput
	{
		
		/// <summary>
		/// List of score configs that apply for the country
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ScoreConfig[] ScoreConfigByCountry { get; set; }
	}
	
	/// <summary>
	/// The result of an operation that returns multiple score configs
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScoreConfigsOutput
	{
		
		/// <summary>
		/// The list of score configs
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="score_configs")]
		public ScoreConfigOutput[] Score_configs { get; set; }
	}
	
	/// <summary>
	/// Subscriber attribute that depends on the subscriber_type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Subscriber
	{
		
		/// <summary>
		/// Link where notification requests will be sent in case subscriber_type is web
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	/// <summary>
	/// Represents the input required to update an API key
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateAPIKeyInput
	{
		
		/// <summary>
		/// API key Version
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="api_key_version")]
		public string Api_key_version { get; set; }
		
		/// <summary>
		/// API key name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="key_name")]
		public string Key_name { get; set; }
	}
	
	/// <summary>
	///  Represents to UpdateContinuousCheckInput
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateContinuousCheckInput
	{
		
		/// <summary>
		/// Time between background checks
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="frequency")]
		public string Frequency { get; set; }
		
		/// <summary>
		/// Indicates whether the background checks must be processed recurrently
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public CreateHookInputStatus Status { get; set; }
	}
	
	/// <summary>
	/// Represents a user of API-key access control
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class User
	{
		
		/// <summary>
		/// User email
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// Indicates whether the user is allowed to access or not
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		/// <summary>
		/// Date on which the user was created
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="user_creation_date")]
		public string User_creation_date { get; set; }
		
		/// <summary>
		/// Indicates whether the user is confirmed or needs to change their password
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="user_status")]
		public System.Nullable<UserUser_status> User_status { get; set; }
		
		/// <summary>
		/// Username
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum UserUser_status
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FORCE_CHANGE_PASSWORD")]
		FORCE_CHANGE_PASSWORD = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CONFIRMED")]
		CONFIRMED = 1,
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// List Checks
		/// Lists the existing checks in the account or in a specified report.
		/// ListChecks v1/checks
		/// </summary>
		/// <param name="start_key">Start key value for the pagination</param>
		/// <param name="report_id">Report id checks to be returned</param>
		public async Task<ChecksOutput> ListChecksAsync(string start_key, string report_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/checks?start_key=" + (start_key==null? "" : System.Uri.EscapeDataString(start_key))+"&report_id=" + (report_id==null? "" : System.Uri.EscapeDataString(report_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ChecksOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Health Dashboard
		/// Get the status of a database
		/// GetHealthDashboard v1/checks/health
		/// </summary>
		/// <param name="country">Country in ISO 3166, uppercase</param>
		/// <param name="unixTimestampSeconds">Unix timestamp in seconds. Send a day timestamp to view the database hourly status for that day or send the current time to know the current database status</param>
		/// <param name="unixtimezoneOffsetSeconds">Offset between the local time and the UTC time in seconds. (e.g., Colombia is at UTC -18000 seconds)
		///</param>
		/// <returns>OK</returns>
		public async Task<Database[]> GetHealthDashboardAsync(string country, string unixTimestampSeconds, string unixtimezoneOffsetSeconds, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/checks/health?country=" + (country==null? "" : System.Uri.EscapeDataString(country))+"&unixTimestampSeconds=" + (unixTimestampSeconds==null? "" : System.Uri.EscapeDataString(unixTimestampSeconds))+"&unixtimezoneOffsetSeconds=" + (unixtimezoneOffsetSeconds==null? "" : System.Uri.EscapeDataString(unixtimezoneOffsetSeconds));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Database[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Background Check
		/// Returns the results of the check that matches the ID provided, complete with a set of scores explained below.
		/// 
		/// ### Scores:
		/// 
		/// 
		/// - **Global Score**: Average risk associated with a person, company or vehicle, according to  the background check results. The global score considers results that are validated with the  ID number provided. The score ranges from 0 to 1, where 0 represents high risk and 1 low risk.
		/// 
		/// 
		/// - **ID Score**: Average risk associated with a person according to the background check  results. The ID score considers the results that are validated with a person identity  document. The score ranges from 0 to 1, where 0 represents high risk and 1 low risk.
		/// 
		/// 
		/// - **Homonym Score**: Average risk associated with a person according to the background check  results. The homonym score considers results that are validated against the name of a person and could not be validated with their ID number. These results might have homonyms associated with them. The score ranges from 0 to 1, where 0 represents high risk and 1 low risk.
		/// 
		/// 
		/// In order to calculate these scores, a weighted average is considered with different weights allocated to each dataset. Scores can be customized using the config endpoints by assigning a weight to each dataset according to its relevance.
		/// 
		/// Keep in mind that results from the API vary depending on the country, check type and the inputs entered on check creation.
		/// GetCheck v1/checks/{check_id}
		/// </summary>
		/// <param name="check_id">Check ID</param>
		public async Task<CheckOutput> GetCheckAsync(string check_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/checks/"+ (check_id==null? "" : System.Uri.EscapeDataString(check_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CheckOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List Check Details
		/// Lists all details associated with a Check. It can be paginated.
		/// ListCheckDetails v1/checks/{check_id}/details
		/// </summary>
		/// <param name="start_key">Start key value for the pagination</param>
		/// <param name="lang">This parameter is used to specify the language wanted for details, if not specified details will come in their original language.</param>
		public async Task<CheckDetailsOutput> ListCheckDetailsAsync(string start_key, string lang, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/checks/{check_id}/details?start_key=" + (start_key==null? "" : System.Uri.EscapeDataString(start_key))+"&lang=" + (lang==null? "" : System.Uri.EscapeDataString(lang));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CheckDetailsOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get PDF
		/// Downloads the PDF in the specified language, Spanish by default.
		/// GetPDF v1/checks/{check_id}/pdf
		/// </summary>
		/// <param name="lang">Used to specify the language for the PDF, if not specified the PDF will be downloaded in Spanish.</param>
		/// <param name="check_id">ID of the check</param>
		/// <returns>Downloads the PDF of the check</returns>
		public async Task GetPDFAsync(string lang, string check_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/checks/"+ (check_id==null? "" : System.Uri.EscapeDataString(check_id))+"/pdf?lang=" + (lang==null? "" : System.Uri.EscapeDataString(lang));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create PDF
		/// Creates a PDF containing the background check results.
		/// CreatePDF v1/checks/{check_id}/pdf
		/// </summary>
		/// <param name="check_id">ID of the check</param>
		/// <returns>Outputs the link to download the PDF</returns>
		public async Task CreatePDFAsync(string check_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/checks/"+ (check_id==null? "" : System.Uri.EscapeDataString(check_id))+"/pdf";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete Custom Type
		/// Allows deleting a custom type. Person, vehicle, and company types cannot be deleted
		/// DeleteCustomType v1/config
		/// </summary>
		/// <param name="type">Name of the custom type to be deleted</param>
		/// <param name="country">Country where the custom type is valid</param>
		/// <returns>OK</returns>
		public async Task DeleteCustomTypeAsync(string type, DeleteCustomTypeCountry country, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/config?type=" + (type==null? "" : System.Uri.EscapeDataString(type))+"&country=" + country;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List Score Configurations
		/// Lists the custom score configurations of the associated account.
		/// ListScoreConfigs v1/config
		/// </summary>
		/// <param name="start_key">The key to start the pagination</param>
		public async Task<ScoreConfigsOutput> ListScoreConfigsAsync(string start_key, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/config?start_key=" + (start_key==null? "" : System.Uri.EscapeDataString(start_key));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ScoreConfigsOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all continuous checks
		/// ListContinuousChecks v1/continuous-checks
		/// </summary>
		/// <returns>OK</returns>
		public async Task<ListContinuousChecksOutput> ListContinuousChecksAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/continuous-checks";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListContinuousChecksOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists history associated with a Check. It can be paginated
		/// GetContinuousCheck v1/continuous-checks/{continuous_check_id}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ContinuousCheck> GetContinuousCheckAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/continuous-checks/{continuous_check_id}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ContinuousCheck>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists background check logs. It can be paginated
		/// 
		/// ContinuousGetByContinuous_check_id v1/continuous-checks/{continuous_check_id}/history
		/// </summary>
		/// <returns>ok</returns>
		public async Task<GetContiuousCheckHistoryOutput> ContinuousGetByContinuous_check_idAsync(string continuous_check_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/continuous-checks/"+ (continuous_check_id==null? "" : System.Uri.EscapeDataString(continuous_check_id))+"/history";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetContiuousCheckHistoryOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all hooks
		/// Lists all the configured hooks in your account.
		/// ListHook v1/hooks
		/// </summary>
		public async Task<HookOutput> ListHookAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/hooks";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<HookOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes hook
		/// Deletes hook configuration.
		/// DeletHook v1/hooks/{hook_id}
		/// </summary>
		/// <param name="hook_id">Hook ID</param>
		public async Task<string> DeletHookAsync(string hook_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/hooks/"+ (hook_id==null? "" : System.Uri.EscapeDataString(hook_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List Reports
		/// Lists all reports asociated with the client or user requesting.
		/// ListReports v1/reports
		/// </summary>
		/// <param name="start_key">Start value for pagination.</param>
		/// <param name="username">filter reports created by the specified username</param>
		/// <returns>Response containing list of reports</returns>
		public async Task<ReportsOutput> ListReportsAsync(string start_key, string username, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/reports?start_key=" + (start_key==null? "" : System.Uri.EscapeDataString(start_key))+"&username=" + (username==null? "" : System.Uri.EscapeDataString(username));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ReportsOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Report
		/// Returns a report with the given ID.
		/// GetReport v1/reports/{report_id}
		/// </summary>
		public async Task<ReportOutput> GetReportAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/reports/{report_id}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ReportOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum CreateCheckTruora_Priority
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="low")]
		low = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="medium")]
		medium = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="high")]
		high = 2,
	}
	
	public enum DeleteCustomTypeCountry
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BR")]
		BR = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CL")]
		CL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CO")]
		CO = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CR")]
		CR = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EC")]
		EC = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MX")]
		MX = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PE")]
		PE = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ALL")]
		ALL = 7,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
