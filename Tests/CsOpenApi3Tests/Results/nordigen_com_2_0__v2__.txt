//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// The representation of a bank account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Account
	{
		
		/// <summary>
		/// The date & time at which the account object was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created")]
		public System.Nullable<System.DateTimeOffset> Created { get; set; }
		
		/// <summary>
		/// The Account IBAN
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="iban")]
		public string Iban { get; set; }
		
		/// <summary>
		/// The ID of this Account, used to refer to this account in other API calls.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The ASPSP associated with this account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="institution_id")]
		public string Institution_id { get; set; }
		
		/// <summary>
		/// The date & time at which the account object was last accessed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="last_accessed")]
		public System.Nullable<System.DateTimeOffset> Last_accessed { get; set; }
		
		/// <summary>
		/// The name of the account owner.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="owner_name")]
		public string Owner_name { get; set; }
		
		/// <summary>
		/// The processing status of this account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public AccountStatusEnum Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AccountStatusEnum
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISCOVERED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROCESSING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		READY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERROR = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUSPENDED = 4,
	}
	
	/// <summary>
	/// * `AT` - Austria
	///* `BE` - Belgium
	///* `BG` - Bulgaria
	///* `HR` - Croatia
	///* `CY` - Cyprus
	///* `CZ` - Czechia
	///* `DK` - Denmark
	///* `EE` - Estonia
	///* `FI` - Finland
	///* `FR` - France
	///* `DE` - Germany
	///* `GR` - Greece
	///* `HU` - Hungary
	///* `IS` - Iceland
	///* `IE` - Ireland
	///* `IT` - Italy
	///* `LV` - Latvia
	///* `LI` - Liechtenstein
	///* `LT` - Lithuania
	///* `LU` - Luxembourg
	///* `MT` - Malta
	///* `NL` - Netherlands
	///* `NO` - Norway
	///* `PL` - Poland
	///* `PT` - Portugal
	///* `RO` - Romania
	///* `SK` - Slovakia
	///* `SI` - Slovenia
	///* `ES` - Spain
	///* `SE` - Sweden
	///* `GB` - United Kingdom
	///* `US` - United States of America
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AddressCountryEnum
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BG = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HR = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CY = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CZ = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DK = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EE = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FI = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FR = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DE = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GR = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HU = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IS = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IE = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IT = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LV = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LI = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LT = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LU = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MT = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NL = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PL = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PT = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RO = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SK = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SI = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ES = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SE = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GB = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		US = 31,
	}
	
	/// <summary>
	/// * `AT` - Austria
	///* `BE` - Belgium
	///* `BG` - Bulgaria
	///* `HR` - Croatia
	///* `CY` - Cyprus
	///* `CZ` - Czechia
	///* `DK` - Denmark
	///* `EE` - Estonia
	///* `FI` - Finland
	///* `FR` - France
	///* `DE` - Germany
	///* `GR` - Greece
	///* `HU` - Hungary
	///* `IS` - Iceland
	///* `IE` - Ireland
	///* `IT` - Italy
	///* `LV` - Latvia
	///* `LI` - Liechtenstein
	///* `LT` - Lithuania
	///* `LU` - Luxembourg
	///* `MT` - Malta
	///* `NL` - Netherlands
	///* `NO` - Norway
	///* `PL` - Poland
	///* `PT` - Portugal
	///* `RO` - Romania
	///* `SK` - Slovakia
	///* `SI` - Slovenia
	///* `ES` - Spain
	///* `SE` - Sweden
	///* `GB` - United Kingdom
	///* `US` - United States of America
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CountryEnum
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BG = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HR = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CY = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CZ = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DK = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EE = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FI = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FR = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DE = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GR = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HU = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IS = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IE = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IT = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LV = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LI = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LT = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LU = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MT = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NL = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PL = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PT = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RO = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SK = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SI = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ES = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SE = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GB = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		US = 31,
	}
	
	/// <summary>
	/// Creditor account read serializer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreditorAccount
	{
		
		/// <summary>
		/// Creditor account type identifier
		/// Required
		/// Max length: 128
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="account")]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string Account { get; set; }
		
		/// <summary>
		/// Creditor account address country
		/// Max length: 2
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address_country")]
		[System.ComponentModel.DataAnnotations.MaxLength(2)]
		public string Address_country { get; set; }
		
		/// <summary>
		/// Creditor account currency
		/// Required
		/// Max length: 3
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		[System.ComponentModel.DataAnnotations.MaxLength(3)]
		public string Currency { get; set; }
		
		/// <summary>
		/// Unique entry ID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Creditor account name
		/// Required
		/// Max length: 70
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MaxLength(70)]
		public string Name { get; set; }
		
		/// <summary>
		/// Creditor account type
		///
		///* `IBAN` - IBAN
		///* `SCAN` - SortCodeAccountNumber
		/// </summary>
		[System.ComponentModel.DefaultValue(TypeEnum.IBAN)]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public TypeEnum Type { get; set; } = TypeEnum.IBAN;
	}
	
	/// <summary>
	/// * `IBAN` - IBAN
	///* `SCAN` - SortCodeAccountNumber
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum TypeEnum
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IBAN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCAN = 1,
	}
	
	/// <summary>
	/// Creditor account write serializer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreditorAccountWrite
	{
		
		/// <summary>
		/// Creditor account type identifier
		/// Required
		/// Max length: 128
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="account")]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string Account { get; set; }
		
		/// <summary>
		/// * `AT` - Austria
		///* `BE` - Belgium
		///* `BG` - Bulgaria
		///* `HR` - Croatia
		///* `CY` - Cyprus
		///* `CZ` - Czechia
		///* `DK` - Denmark
		///* `EE` - Estonia
		///* `FI` - Finland
		///* `FR` - France
		///* `DE` - Germany
		///* `GR` - Greece
		///* `HU` - Hungary
		///* `IS` - Iceland
		///* `IE` - Ireland
		///* `IT` - Italy
		///* `LV` - Latvia
		///* `LI` - Liechtenstein
		///* `LT` - Lithuania
		///* `LU` - Luxembourg
		///* `MT` - Malta
		///* `NL` - Netherlands
		///* `NO` - Norway
		///* `PL` - Poland
		///* `PT` - Portugal
		///* `RO` - Romania
		///* `SK` - Slovakia
		///* `SI` - Slovenia
		///* `ES` - Spain
		///* `SE` - Sweden
		///* `GB` - United Kingdom
		///* `US` - United States of America
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address_country")]
		public AddressCountryEnum Address_country { get; set; }
		
		/// <summary>
		/// Creditor account address street
		/// Max length: 140
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address_street")]
		[System.ComponentModel.DataAnnotations.MaxLength(140)]
		public string Address_street { get; set; }
		
		/// <summary>
		/// Creditor account BICFI Identifier
		/// Max length: 128
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="agent")]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string Agent { get; set; }
		
		/// <summary>
		/// Creditor account agent name
		/// Max length: 140
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="agent_name")]
		[System.ComponentModel.DataAnnotations.MaxLength(140)]
		public string Agent_name { get; set; }
		
		/// <summary>
		/// Creditor account currency
		/// Required
		/// Max length: 3
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		[System.ComponentModel.DataAnnotations.MaxLength(3)]
		public string Currency { get; set; }
		
		/// <summary>
		/// Unique entry ID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// an Institution ID for this CreditorAccount
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="institution_id")]
		public string Institution_id { get; set; }
		
		/// <summary>
		/// Creditor account name
		/// Required
		/// Max length: 70
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MaxLength(70)]
		public string Name { get; set; }
		
		/// <summary>
		/// Creditor account address post code
		/// Max length: 30
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="post_code")]
		[System.ComponentModel.DataAnnotations.MaxLength(30)]
		public string Post_code { get; set; }
		
		/// <summary>
		/// Creditor account type
		///
		///* `IBAN` - IBAN
		///* `SCAN` - SortCodeAccountNumber
		/// </summary>
		[System.ComponentModel.DefaultValue(TypeEnum.IBAN)]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public TypeEnum Type { get; set; } = TypeEnum.IBAN;
	}
	
	/// <summary>
	/// Creditor account write serializer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreditorAccountWriteRequest
	{
		
		/// <summary>
		/// Creditor account type identifier
		/// Required
		/// Min length: 1
		/// Max length: 128
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="account")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string Account { get; set; }
		
		/// <summary>
		/// * `AT` - Austria
		///* `BE` - Belgium
		///* `BG` - Bulgaria
		///* `HR` - Croatia
		///* `CY` - Cyprus
		///* `CZ` - Czechia
		///* `DK` - Denmark
		///* `EE` - Estonia
		///* `FI` - Finland
		///* `FR` - France
		///* `DE` - Germany
		///* `GR` - Greece
		///* `HU` - Hungary
		///* `IS` - Iceland
		///* `IE` - Ireland
		///* `IT` - Italy
		///* `LV` - Latvia
		///* `LI` - Liechtenstein
		///* `LT` - Lithuania
		///* `LU` - Luxembourg
		///* `MT` - Malta
		///* `NL` - Netherlands
		///* `NO` - Norway
		///* `PL` - Poland
		///* `PT` - Portugal
		///* `RO` - Romania
		///* `SK` - Slovakia
		///* `SI` - Slovenia
		///* `ES` - Spain
		///* `SE` - Sweden
		///* `GB` - United Kingdom
		///* `US` - United States of America
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address_country")]
		public AddressCountryEnum Address_country { get; set; }
		
		/// <summary>
		/// Creditor account address street
		/// Min length: 1
		/// Max length: 140
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address_street")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(140)]
		public string Address_street { get; set; }
		
		/// <summary>
		/// Creditor account BICFI Identifier
		/// Min length: 1
		/// Max length: 128
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="agent")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string Agent { get; set; }
		
		/// <summary>
		/// Creditor account agent name
		/// Min length: 1
		/// Max length: 140
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="agent_name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(140)]
		public string Agent_name { get; set; }
		
		/// <summary>
		/// Creditor account currency
		/// Required
		/// Min length: 1
		/// Max length: 3
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(3)]
		public string Currency { get; set; }
		
		/// <summary>
		/// an Institution ID for this CreditorAccount
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="institution_id")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Institution_id { get; set; }
		
		/// <summary>
		/// Creditor account name
		/// Required
		/// Min length: 1
		/// Max length: 70
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(70)]
		public string Name { get; set; }
		
		/// <summary>
		/// Creditor account address post code
		/// Min length: 1
		/// Max length: 30
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="post_code")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(30)]
		public string Post_code { get; set; }
		
		/// <summary>
		/// Creditor account type
		///
		///* `IBAN` - IBAN
		///* `SCAN` - SortCodeAccountNumber
		/// </summary>
		[System.ComponentModel.DefaultValue(TypeEnum.IBAN)]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public TypeEnum Type { get; set; } = TypeEnum.IBAN;
	}
	
	/// <summary>
	/// Debtor account write serializer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DebtorAccountWrite
	{
		
		/// <summary>
		/// Debtor account type identifier
		/// Max length: 128
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="account")]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string Account { get; set; }
		
		/// <summary>
		/// Debtor account address country
		/// Max length: 2
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address_country")]
		[System.ComponentModel.DataAnnotations.MaxLength(2)]
		public string Address_country { get; set; }
		
		/// <summary>
		/// Debtor account address street
		/// Max length: 140
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address_street")]
		[System.ComponentModel.DataAnnotations.MaxLength(140)]
		public string Address_street { get; set; }
		
		/// <summary>
		/// Debtor account currency
		/// Max length: 3
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currency")]
		[System.ComponentModel.DataAnnotations.MaxLength(3)]
		public string Currency { get; set; }
		
		/// <summary>
		/// Debtor account name
		/// Required
		/// Max length: 70
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MaxLength(70)]
		public string Name { get; set; }
		
		/// <summary>
		/// Debtor account post code
		/// Max length: 30
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="post_code")]
		[System.ComponentModel.DataAnnotations.MaxLength(30)]
		public string Post_code { get; set; }
		
		/// <summary>
		/// Debtor account type
		///
		///* `IBAN` - IBAN
		///* `SCAN` - SortCodeAccountNumber
		/// </summary>
		[System.ComponentModel.DefaultValue(TypeEnum.IBAN)]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public TypeEnum Type { get; set; } = TypeEnum.IBAN;
		
		/// <summary>
		/// Debtor account type identifier
		/// Max length: 128
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type_number")]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string Type_number { get; set; }
	}
	
	/// <summary>
	/// Debtor account write serializer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DebtorAccountWriteRequest
	{
		
		/// <summary>
		/// Debtor account type identifier
		/// Min length: 1
		/// Max length: 128
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="account")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string Account { get; set; }
		
		/// <summary>
		/// Debtor account address country
		/// Min length: 1
		/// Max length: 2
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address_country")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2)]
		public string Address_country { get; set; }
		
		/// <summary>
		/// Debtor account address street
		/// Min length: 1
		/// Max length: 140
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address_street")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(140)]
		public string Address_street { get; set; }
		
		/// <summary>
		/// Debtor account currency
		/// Min length: 1
		/// Max length: 3
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currency")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(3)]
		public string Currency { get; set; }
		
		/// <summary>
		/// Debtor account name
		/// Required
		/// Min length: 1
		/// Max length: 70
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(70)]
		public string Name { get; set; }
		
		/// <summary>
		/// Debtor account post code
		/// Min length: 1
		/// Max length: 30
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="post_code")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(30)]
		public string Post_code { get; set; }
		
		/// <summary>
		/// Debtor account type
		///
		///* `IBAN` - IBAN
		///* `SCAN` - SortCodeAccountNumber
		/// </summary>
		[System.ComponentModel.DefaultValue(TypeEnum.IBAN)]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public TypeEnum Type { get; set; } = TypeEnum.IBAN;
		
		/// <summary>
		/// Debtor account type identifier
		/// Min length: 1
		/// Max length: 128
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type_number")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string Type_number { get; set; }
	}
	
	/// <summary>
	/// Represents an end-user agreement.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EndUserAgreement
	{
		
		/// <summary>
		/// The date & time at which the end user accepted the agreement.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accepted")]
		public System.Nullable<System.DateTimeOffset> Accepted { get; set; }
		
		/// <summary>
		/// Array containing one or several values of ['balances', 'details', 'transactions']
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="access_scope")]
		public string[] Access_scope { get; set; }
		
		/// <summary>
		/// Number of days from acceptance that the access can be used.
		/// Minimum: 1
		/// Maximum: 90
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="access_valid_for_days")]
		[System.ComponentModel.DataAnnotations.Range(1, 90)]
		public System.Nullable<System.Int32> Access_valid_for_days { get; set; }
		
		/// <summary>
		/// The date & time at which the end user agreement was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created")]
		public System.Nullable<System.DateTimeOffset> Created { get; set; }
		
		/// <summary>
		/// The ID of this End User Agreement, used to refer to this end user agreement in other API calls.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// an Institution ID for this EUA
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="institution_id")]
		public string Institution_id { get; set; }
		
		/// <summary>
		/// Maximum number of days of transaction data to retrieve.
		/// Minimum: 1
		/// Maximum: 730
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="max_historical_days")]
		[System.ComponentModel.DataAnnotations.Range(1, 730)]
		public System.Nullable<System.Int32> Max_historical_days { get; set; }
	}
	
	/// <summary>
	/// Represents an end-user agreement.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EndUserAgreementRequest
	{
		
		/// <summary>
		/// Array containing one or several values of ['balances', 'details', 'transactions']
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="access_scope")]
		public string[] Access_scope { get; set; }
		
		/// <summary>
		/// Number of days from acceptance that the access can be used.
		/// Minimum: 1
		/// Maximum: 90
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="access_valid_for_days")]
		[System.ComponentModel.DataAnnotations.Range(1, 90)]
		public System.Nullable<System.Int32> Access_valid_for_days { get; set; }
		
		/// <summary>
		/// an Institution ID for this EUA
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="institution_id")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Institution_id { get; set; }
		
		/// <summary>
		/// Maximum number of days of transaction data to retrieve.
		/// Minimum: 1
		/// Maximum: 730
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="max_historical_days")]
		[System.ComponentModel.DataAnnotations.Range(1, 730)]
		public System.Nullable<System.Int32> Max_historical_days { get; set; }
	}
	
	/// <summary>
	/// Represents end-user details.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EnduserAcceptanceDetailsRequest
	{
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ip_address")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Ip_address { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="user_agent")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string User_agent { get; set; }
	}
	
	/// <summary>
	/// * `following` - following
	///* `preceding` - preceding
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ExecutionRuleEnum
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		following = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		preceding = 1,
	}
	
	/// <summary>
	/// * `Daily` - Daily
	///* `Weekly` - Weekly
	///* `EveryTwoWeeks` - EveryTwoWeeks
	///* `Monthly` - Monthly
	///* `EveryTwoMonths` - EveryTwoMonths
	///* `Quarterly` - Quarterly
	///* `SemiAnnual` - SemiAnnual
	///* `Annual` - Annual
	///* `MonthlyVariable` - MonthlyVariable
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum FrequencyEnum
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Daily = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Weekly = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EveryTwoWeeks = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Monthly = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EveryTwoMonths = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Quarterly = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SemiAnnual = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Annual = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MonthlyVariable = 8,
	}
	
	/// <summary>
	/// InstructedAmountSerializer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InstructedAmount
	{
		
		/// <summary>
		/// Instructed amount
		/// Required
		/// Pattern: ^-?\d{0,10}(?:\.\d{0,2})?$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^-?\d{0,10}(?:\.\d{0,2})?$")]
		public string Amount { get; set; }
		
		/// <summary>
		/// Instructed amount currency
		/// Required
		/// Max length: 3
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		[System.ComponentModel.DataAnnotations.MaxLength(3)]
		public string Currency { get; set; }
	}
	
	/// <summary>
	/// InstructedAmountSerializer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InstructedAmountRequest
	{
		
		/// <summary>
		/// Instructed amount
		/// Required
		/// Pattern: ^-?\d{0,10}(?:\.\d{0,2})?$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^-?\d{0,10}(?:\.\d{0,2})?$")]
		public string Amount { get; set; }
		
		/// <summary>
		/// Instructed amount currency
		/// Required
		/// Min length: 1
		/// Max length: 3
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(3)]
		public string Currency { get; set; }
	}
	
	/// <summary>
	/// Represents an Integration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Integration
	{
		
		[System.Runtime.Serialization.DataMember(Name="bic")]
		public string Bic { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="countries")]
		public string[] Countries { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="logo")]
		public string Logo { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.ComponentModel.DefaultValue("90")]
		[System.Runtime.Serialization.DataMember(Name="transaction_total_days")]
		public string Transaction_total_days { get; set; } = "90";
	}
	
	/// <summary>
	/// IntegrationSerializer for Retrieve endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IntegrationRetrieve
	{
		
		[System.Runtime.Serialization.DataMember(Name="bic")]
		public string Bic { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="countries")]
		public string[] Countries { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="logo")]
		public string Logo { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="supported_features")]
		public string[] Supported_features { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="supported_payments")]
		public System.Collections.Generic.Dictionary<string, object> Supported_payments { get; set; }
		
		[System.ComponentModel.DefaultValue("90")]
		[System.Runtime.Serialization.DataMember(Name="transaction_total_days")]
		public string Transaction_total_days { get; set; } = "90";
	}
	
	/// <summary>
	/// Obtain JWT pair.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class JWTObtainPairRequest
	{
		
		/// <summary>
		/// Secret id from /user-secrets/
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="secret_id")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Secret_id { get; set; }
		
		/// <summary>
		/// Secret key from /user-secrets/
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="secret_key")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Secret_key { get; set; }
	}
	
	/// <summary>
	/// Refresh access token.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class JWTRefreshRequest
	{
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="refresh")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Refresh { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PaginatedCreditorAccountList
	{
		
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="next")]
		public string Next { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="previous")]
		public string Previous { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public CreditorAccount[] Results { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PaginatedEndUserAgreementList
	{
		
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="next")]
		public string Next { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="previous")]
		public string Previous { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public EndUserAgreement[] Results { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PaginatedPaymentReadList
	{
		
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="next")]
		public string Next { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="previous")]
		public string Previous { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public PaymentRead[] Results { get; set; }
	}
	
	/// <summary>
	/// PaymentReadSerializer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PaymentRead
	{
		
		/// <summary>
		/// Registered creditor account
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creditor_account")]
		public string Creditor_account { get; set; }
		
		/// <summary>
		/// Creditor account
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creditor_object")]
		public CreditorAccountWrite Creditor_object { get; set; }
		
		/// <summary>
		/// Payment Custom Payment ID
		/// Max length: 35
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="custom_payment_id")]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string Custom_payment_id { get; set; }
		
		/// <summary>
		/// Debtor account write serializer.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="debtor_account")]
		public DebtorAccountWrite Debtor_account { get; set; }
		
		/// <summary>
		/// Payment description
		/// </summary>
		[System.ComponentModel.DefaultValue("GOCARDLESS")]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; } = "GOCARDLESS";
		
		/// <summary>
		/// Instructed amount
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="instructed_amount")]
		public InstructedAmount Instructed_amount { get; set; }
		
		/// <summary>
		/// Payment ID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payment_id")]
		public string Payment_id { get; set; }
		
		/// <summary>
		/// Payment product
		///
		///* `T2P` - target-2-payments
		///* `SCT` - sepa-credit-transfers
		///* `ISCT` - instant-sepa-credit-transfer
		///* `CBCT` - cross-border-credit-transfers
		///* `BACS` - Back Payment Scheme
		///* `CHAPS` - CHAPS Payment Scheme
		///* `FPS` - Faster Payment Scheme
		///* `SWIFT` - Swift Payment Service
		///* `BT` - Balance Transfer
		///* `MT` - Money Transfer
		/// </summary>
		[System.ComponentModel.DefaultValue(PaymentProductEnum.ISCT)]
		[System.Runtime.Serialization.DataMember(Name="payment_product")]
		public PaymentProductEnum Payment_product { get; set; } = PaymentProductEnum.ISCT;
		
		/// <summary>
		/// Payment end to end identification
		///
		///* `INIT` - Initiated. Payment has been initiated.
		///* `ERRE` - ExecutionError. We experienced error on payment execution.
		///* `ERRS` - StatusError. We experienced error retrieving payment status. Try again.
		///* `ACCC` - AcceptedSettlementCompleted. Settlement on the creditor's account has been completed
		///* `ACCP` - AcceptedCustomerProfile. Preceding check of technical validation was successful. Customer profile check was successful
		///* `ACSC` - AcceptedSettlementCompleted. Settlement on the debtor’s account has been completed
		///* `ACSP` - AcceptedSettlementInProcess. All preceding checks such as technical validation and customer profile were successful and therefore the payment initiation has been accepted for execution
		///* `ACTC` - AcceptedTechnicalValidation. Authentication and syntactical and semantical validation are successful
		///* `ACWC` - AcceptedWithChange. Instruction is accepted but a change will be made, such as date or remittance not sent
		///* `ACWP` - AcceptedWithoutPosting. Payment instruction included in the credit transfer is accepted without being posted to the creditor customer’s account
		///* `RCVD` - Received. Payment initiation has been received by the receiving agent
		///* `PDNG` - Pending. Payment initiation or individual transaction included in the payment initiation is pending. Further checks and status update will be performed
		///* `RJCT` - Rejected. Payment initiation or individual transaction included in the payment initiation has been rejected.
		///* `CANC` - Cancelled. Payment initiation has been cancelled before execution
		///* `ACFC` - AcceptedFundsChecked. Pre-ceeding check of technical validation and customer profile was successful and an automatic funds check was positive
		///* `PATC` - PartiallyAcceptedTechnicalCorrect. The payment initiation needs multiple authentications, where some but not yet all have been performed
		///* `PART` - PartiallyAccepted. A number of transactions have been accepted, whereas another number of transactions have not yet achieved 'accepted' status
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payment_status")]
		public PaymentStatusEnum Payment_status { get; set; }
		
		/// <summary>
		/// Payment Type
		///
		///* `single-payment` - payment
		///* `bulk-payment` - bulk-payments
		///* `periodic-payment` - periodic-payments
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payment_type")]
		public PaymentTypeEnum Payment_type { get; set; }
		
		/// <summary>
		/// Redirect URL to your application after payment is done
		/// Required
		/// Max length: 1024
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="redirect")]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		public string Redirect { get; set; }
	}
	
	/// <summary>
	/// * `T2P` - target-2-payments
	///* `SCT` - sepa-credit-transfers
	///* `ISCT` - instant-sepa-credit-transfer
	///* `CBCT` - cross-border-credit-transfers
	///* `BACS` - Back Payment Scheme
	///* `CHAPS` - CHAPS Payment Scheme
	///* `FPS` - Faster Payment Scheme
	///* `SWIFT` - Swift Payment Service
	///* `BT` - Balance Transfer
	///* `MT` - Money Transfer
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PaymentProductEnum
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		T2P = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ISCT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CBCT = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BACS = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHAPS = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FPS = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SWIFT = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BT = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MT = 9,
	}
	
	/// <summary>
	/// * `INIT` - Initiated. Payment has been initiated.
	///* `ERRE` - ExecutionError. We experienced error on payment execution.
	///* `ERRS` - StatusError. We experienced error retrieving payment status. Try again.
	///* `ACCC` - AcceptedSettlementCompleted. Settlement on the creditor's account has been completed
	///* `ACCP` - AcceptedCustomerProfile. Preceding check of technical validation was successful. Customer profile check was successful
	///* `ACSC` - AcceptedSettlementCompleted. Settlement on the debtor’s account has been completed
	///* `ACSP` - AcceptedSettlementInProcess. All preceding checks such as technical validation and customer profile were successful and therefore the payment initiation has been accepted for execution
	///* `ACTC` - AcceptedTechnicalValidation. Authentication and syntactical and semantical validation are successful
	///* `ACWC` - AcceptedWithChange. Instruction is accepted but a change will be made, such as date or remittance not sent
	///* `ACWP` - AcceptedWithoutPosting. Payment instruction included in the credit transfer is accepted without being posted to the creditor customer’s account
	///* `RCVD` - Received. Payment initiation has been received by the receiving agent
	///* `PDNG` - Pending. Payment initiation or individual transaction included in the payment initiation is pending. Further checks and status update will be performed
	///* `RJCT` - Rejected. Payment initiation or individual transaction included in the payment initiation has been rejected.
	///* `CANC` - Cancelled. Payment initiation has been cancelled before execution
	///* `ACFC` - AcceptedFundsChecked. Pre-ceeding check of technical validation and customer profile was successful and an automatic funds check was positive
	///* `PATC` - PartiallyAcceptedTechnicalCorrect. The payment initiation needs multiple authentications, where some but not yet all have been performed
	///* `PART` - PartiallyAccepted. A number of transactions have been accepted, whereas another number of transactions have not yet achieved 'accepted' status
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PaymentStatusEnum
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INIT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERRE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERRS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACCC = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACCP = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACSC = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACSP = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTC = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACWC = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACWP = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RCVD = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PDNG = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RJCT = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANC = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACFC = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PATC = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PART = 16,
	}
	
	/// <summary>
	/// * `single-payment` - payment
	///* `bulk-payment` - bulk-payments
	///* `periodic-payment` - periodic-payments
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PaymentTypeEnum
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="single-payment")]
		singleMinuspayment = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="bulk-payment")]
		bulkMinuspayment = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="periodic-payment")]
		periodicMinuspayment = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PaginatedRequisitionList
	{
		
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="next")]
		public string Next { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="previous")]
		public string Previous { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public Requisition[] Results { get; set; }
	}
	
	/// <summary>
	/// RequisitionSerializer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Requisition
	{
		
		/// <summary>
		/// option to enable account selection view for the end user
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="account_selection")]
		public System.Nullable<System.Boolean> Account_selection { get; set; }
		
		/// <summary>
		/// array of account IDs retrieved within a scope of this requisition
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accounts")]
		public string[] Accounts { get; set; }
		
		/// <summary>
		/// EUA associated with this requisition
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="agreement")]
		public string Agreement { get; set; }
		
		/// <summary>
		/// The date & time at which the requisition was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created")]
		public System.Nullable<System.DateTimeOffset> Created { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// an Institution ID for this Requisition
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="institution_id")]
		public string Institution_id { get; set; }
		
		/// <summary>
		/// link to initiate authorization with Institution
		/// </summary>
		[System.ComponentModel.DefaultValue("https://ob.nordigen.com/psd2/start/3fa85f64-5717-4562-b3fc-2c963f66afa6/{$INSTITUTION_ID}")]
		[System.Runtime.Serialization.DataMember(Name="link")]
		public string Link { get; set; } = "https://ob.nordigen.com/psd2/start/3fa85f64-5717-4562-b3fc-2c963f66afa6/{$INSTITUTION_ID}";
		
		/// <summary>
		/// redirect URL to your application after end-user authorization with ASPSP
		/// Required
		/// Max length: 1024
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="redirect")]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		public string Redirect { get; set; }
		
		/// <summary>
		/// enable redirect back to the client after account list received
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="redirect_immediate")]
		public System.Nullable<System.Boolean> Redirect_immediate { get; set; }
		
		/// <summary>
		/// additional ID to identify the end user
		/// Max length: 256
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reference")]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Reference { get; set; }
		
		/// <summary>
		/// optional SSN field to verify ownership of the account
		/// Max length: 64
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ssn")]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		public string Ssn { get; set; }
		
		/// <summary>
		/// status of this requisition
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public Status1c5Enum Status { get; set; }
		
		/// <summary>
		/// A two-letter country code (ISO 639-1)
		/// Max length: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="user_language")]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public string User_language { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum Status1c5Enum
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CR = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ID = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LN = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RJ = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ER = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SU = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EX = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GC = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UA = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GA = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SA = 10,
	}
	
	/// <summary>
	/// PaymentReadSerializer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PaymentReadRequest
	{
		
		/// <summary>
		/// Registered creditor account
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creditor_account")]
		public string Creditor_account { get; set; }
		
		/// <summary>
		/// Creditor account
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creditor_object")]
		public CreditorAccountWriteRequest Creditor_object { get; set; }
		
		/// <summary>
		/// Payment Custom Payment ID
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="custom_payment_id")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string Custom_payment_id { get; set; }
		
		/// <summary>
		/// Debtor account write serializer.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="debtor_account")]
		public DebtorAccountWriteRequest Debtor_account { get; set; }
		
		/// <summary>
		/// Payment description
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DefaultValue("GOCARDLESS")]
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Description { get; set; } = "GOCARDLESS";
		
		/// <summary>
		/// Institution ID for Payment
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DefaultValue("SWEDBANK_SANDBOX_SANDLV22")]
		[System.Runtime.Serialization.DataMember(Name="institution_id")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Institution_id { get; set; } = "SWEDBANK_SANDBOX_SANDLV22";
		
		/// <summary>
		/// Instructed amount
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="instructed_amount")]
		public InstructedAmountRequest Instructed_amount { get; set; }
		
		/// <summary>
		/// Payment product
		///
		///* `T2P` - target-2-payments
		///* `SCT` - sepa-credit-transfers
		///* `ISCT` - instant-sepa-credit-transfer
		///* `CBCT` - cross-border-credit-transfers
		///* `BACS` - Back Payment Scheme
		///* `CHAPS` - CHAPS Payment Scheme
		///* `FPS` - Faster Payment Scheme
		///* `SWIFT` - Swift Payment Service
		///* `BT` - Balance Transfer
		///* `MT` - Money Transfer
		/// </summary>
		[System.ComponentModel.DefaultValue(PaymentProductEnum.ISCT)]
		[System.Runtime.Serialization.DataMember(Name="payment_product")]
		public PaymentProductEnum Payment_product { get; set; } = PaymentProductEnum.ISCT;
		
		/// <summary>
		/// Redirect URL to your application after payment is done
		/// Required
		/// Min length: 1
		/// Max length: 1024
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="redirect")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		public string Redirect { get; set; }
	}
	
	/// <summary>
	/// PaymentWriteSerializer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PaymentWrite
	{
		
		/// <summary>
		/// Registered creditor account
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creditor_account")]
		public string Creditor_account { get; set; }
		
		/// <summary>
		/// Creditor account
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creditor_object")]
		public CreditorAccountWrite Creditor_object { get; set; }
		
		/// <summary>
		/// Payment Custom Payment ID
		/// Max length: 35
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="custom_payment_id")]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string Custom_payment_id { get; set; }
		
		/// <summary>
		/// Payment description
		/// </summary>
		[System.ComponentModel.DefaultValue("GOCARDLESS")]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; } = "GOCARDLESS";
		
		/// <summary>
		/// Instructed amount
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="instructed_amount")]
		public InstructedAmount Instructed_amount { get; set; }
		
		/// <summary>
		/// Link to initiate authorization with Institution
		/// </summary>
		[System.ComponentModel.DefaultValue("https://ob.nordigen.com/pis/start/ec728ca1-e25f-4eab-8fa6-66b94439722f/{$INSTITUTION_ID}")]
		[System.Runtime.Serialization.DataMember(Name="link")]
		public string Link { get; set; } = "https://ob.nordigen.com/pis/start/ec728ca1-e25f-4eab-8fa6-66b94439722f/{$INSTITUTION_ID}";
		
		/// <summary>
		/// Payment ID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payment_id")]
		public string Payment_id { get; set; }
		
		/// <summary>
		/// Payment product
		///
		///* `T2P` - target-2-payments
		///* `SCT` - sepa-credit-transfers
		///* `ISCT` - instant-sepa-credit-transfer
		///* `CBCT` - cross-border-credit-transfers
		///* `BACS` - Back Payment Scheme
		///* `CHAPS` - CHAPS Payment Scheme
		///* `FPS` - Faster Payment Scheme
		///* `SWIFT` - Swift Payment Service
		///* `BT` - Balance Transfer
		///* `MT` - Money Transfer
		/// </summary>
		[System.ComponentModel.DefaultValue(PaymentProductEnum.ISCT)]
		[System.Runtime.Serialization.DataMember(Name="payment_product")]
		public PaymentProductEnum Payment_product { get; set; } = PaymentProductEnum.ISCT;
		
		/// <summary>
		/// Payment end to end identification
		///
		///* `INIT` - Initiated. Payment has been initiated.
		///* `ERRE` - ExecutionError. We experienced error on payment execution.
		///* `ERRS` - StatusError. We experienced error retrieving payment status. Try again.
		///* `ACCC` - AcceptedSettlementCompleted. Settlement on the creditor's account has been completed
		///* `ACCP` - AcceptedCustomerProfile. Preceding check of technical validation was successful. Customer profile check was successful
		///* `ACSC` - AcceptedSettlementCompleted. Settlement on the debtor’s account has been completed
		///* `ACSP` - AcceptedSettlementInProcess. All preceding checks such as technical validation and customer profile were successful and therefore the payment initiation has been accepted for execution
		///* `ACTC` - AcceptedTechnicalValidation. Authentication and syntactical and semantical validation are successful
		///* `ACWC` - AcceptedWithChange. Instruction is accepted but a change will be made, such as date or remittance not sent
		///* `ACWP` - AcceptedWithoutPosting. Payment instruction included in the credit transfer is accepted without being posted to the creditor customer’s account
		///* `RCVD` - Received. Payment initiation has been received by the receiving agent
		///* `PDNG` - Pending. Payment initiation or individual transaction included in the payment initiation is pending. Further checks and status update will be performed
		///* `RJCT` - Rejected. Payment initiation or individual transaction included in the payment initiation has been rejected.
		///* `CANC` - Cancelled. Payment initiation has been cancelled before execution
		///* `ACFC` - AcceptedFundsChecked. Pre-ceeding check of technical validation and customer profile was successful and an automatic funds check was positive
		///* `PATC` - PartiallyAcceptedTechnicalCorrect. The payment initiation needs multiple authentications, where some but not yet all have been performed
		///* `PART` - PartiallyAccepted. A number of transactions have been accepted, whereas another number of transactions have not yet achieved 'accepted' status
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payment_status")]
		public PaymentStatusEnum Payment_status { get; set; }
		
		/// <summary>
		/// Payment Type
		///
		///* `single-payment` - payment
		///* `bulk-payment` - bulk-payments
		///* `periodic-payment` - periodic-payments
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payment_type")]
		public PaymentTypeEnum Payment_type { get; set; }
		
		/// <summary>
		/// Periodic Payment Serializer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="periodic_payment")]
		public PeriodicPayment Periodic_payment { get; set; }
		
		/// <summary>
		/// Redirect URL to your application after payment is done
		/// Required
		/// Max length: 1024
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="redirect")]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		public string Redirect { get; set; }
		
		/// <summary>
		/// Payment Execution date (for periodic payments)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requested_execution_date")]
		public System.Nullable<System.DateOnly> Requested_execution_date { get; set; }
		
		/// <summary>
		/// Indicates whether payment should be submitted separately
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="submit_payment")]
		public System.Nullable<System.Boolean> Submit_payment { get; set; }
	}
	
	/// <summary>
	/// Periodic Payment Serializer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PeriodicPayment
	{
		
		[System.Runtime.Serialization.DataMember(Name="day_of_execution")]
		public string Day_of_execution { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="end_date")]
		public System.Nullable<System.DateOnly> End_date { get; set; }
		
		/// <summary>
		/// Behavior when periodic payment dates fall on holiday.
		///
		///* `following` - following
		///* `preceding` - preceding
		/// </summary>
		[System.ComponentModel.DefaultValue(ExecutionRuleEnum.following)]
		[System.Runtime.Serialization.DataMember(Name="execution_rule")]
		public ExecutionRuleEnum Execution_rule { get; set; } = ExecutionRuleEnum.following;
		
		[System.ComponentModel.DefaultValue(FrequencyEnum.Monthly)]
		[System.Runtime.Serialization.DataMember(Name="frequency")]
		public FrequencyEnum Frequency { get; set; } = FrequencyEnum.Monthly;
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="start_date")]
		public System.DateOnly Start_date { get; set; }
	}
	
	/// <summary>
	/// PaymentWriteSerializer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PaymentWriteRequest
	{
		
		/// <summary>
		/// Registered creditor account
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creditor_account")]
		public string Creditor_account { get; set; }
		
		/// <summary>
		/// Creditor account
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creditor_object")]
		public CreditorAccountWriteRequest Creditor_object { get; set; }
		
		/// <summary>
		/// Payment Custom Payment ID
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="custom_payment_id")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string Custom_payment_id { get; set; }
		
		/// <summary>
		/// Debtor account
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="debtor_account")]
		public DebtorAccountWriteRequest Debtor_account { get; set; }
		
		/// <summary>
		/// Payment description
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DefaultValue("GOCARDLESS")]
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Description { get; set; } = "GOCARDLESS";
		
		/// <summary>
		/// Institution ID for Payment
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DefaultValue("SWEDBANK_SANDBOX_SANDLV22")]
		[System.Runtime.Serialization.DataMember(Name="institution_id")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Institution_id { get; set; } = "SWEDBANK_SANDBOX_SANDLV22";
		
		/// <summary>
		/// Instructed amount
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="instructed_amount")]
		public InstructedAmountRequest Instructed_amount { get; set; }
		
		/// <summary>
		/// Payment product
		///
		///* `T2P` - target-2-payments
		///* `SCT` - sepa-credit-transfers
		///* `ISCT` - instant-sepa-credit-transfer
		///* `CBCT` - cross-border-credit-transfers
		///* `BACS` - Back Payment Scheme
		///* `CHAPS` - CHAPS Payment Scheme
		///* `FPS` - Faster Payment Scheme
		///* `SWIFT` - Swift Payment Service
		///* `BT` - Balance Transfer
		///* `MT` - Money Transfer
		/// </summary>
		[System.ComponentModel.DefaultValue(PaymentProductEnum.ISCT)]
		[System.Runtime.Serialization.DataMember(Name="payment_product")]
		public PaymentProductEnum Payment_product { get; set; } = PaymentProductEnum.ISCT;
		
		/// <summary>
		/// Periodic Payment Serializer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="periodic_payment")]
		public PeriodicPaymentRequest Periodic_payment { get; set; }
		
		/// <summary>
		/// Redirect URL to your application after payment is done
		/// Required
		/// Min length: 1
		/// Max length: 1024
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="redirect")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		public string Redirect { get; set; }
		
		/// <summary>
		/// Payment Execution date (for periodic payments)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requested_execution_date")]
		public System.Nullable<System.DateOnly> Requested_execution_date { get; set; }
		
		/// <summary>
		/// Indicates whether payment should be submitted separately
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="submit_payment")]
		public System.Nullable<System.Boolean> Submit_payment { get; set; }
	}
	
	/// <summary>
	/// Periodic Payment Serializer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PeriodicPaymentRequest
	{
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="day_of_execution")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Day_of_execution { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="end_date")]
		public System.Nullable<System.DateOnly> End_date { get; set; }
		
		/// <summary>
		/// Behavior when periodic payment dates fall on holiday.
		///
		///* `following` - following
		///* `preceding` - preceding
		/// </summary>
		[System.ComponentModel.DefaultValue(ExecutionRuleEnum.following)]
		[System.Runtime.Serialization.DataMember(Name="execution_rule")]
		public ExecutionRuleEnum Execution_rule { get; set; } = ExecutionRuleEnum.following;
		
		[System.ComponentModel.DefaultValue(FrequencyEnum.Monthly)]
		[System.Runtime.Serialization.DataMember(Name="frequency")]
		public FrequencyEnum Frequency { get; set; } = FrequencyEnum.Monthly;
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="start_date")]
		public System.DateOnly Start_date { get; set; }
	}
	
	/// <summary>
	/// Filter country.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PremiumAccountQuery
	{
		
		/// <summary>
		/// * `AT` - Austria
		///* `BE` - Belgium
		///* `BG` - Bulgaria
		///* `HR` - Croatia
		///* `CY` - Cyprus
		///* `CZ` - Czechia
		///* `DK` - Denmark
		///* `EE` - Estonia
		///* `FI` - Finland
		///* `FR` - France
		///* `DE` - Germany
		///* `GR` - Greece
		///* `HU` - Hungary
		///* `IS` - Iceland
		///* `IE` - Ireland
		///* `IT` - Italy
		///* `LV` - Latvia
		///* `LI` - Liechtenstein
		///* `LT` - Lithuania
		///* `LU` - Luxembourg
		///* `MT` - Malta
		///* `NL` - Netherlands
		///* `NO` - Norway
		///* `PL` - Poland
		///* `PT` - Portugal
		///* `RO` - Romania
		///* `SK` - Slovakia
		///* `SI` - Slovenia
		///* `ES` - Spain
		///* `SE` - Sweden
		///* `GB` - United Kingdom
		///* `US` - United States of America
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public AddressCountryEnum Country { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="date_from")]
		public System.Nullable<System.DateOnly> Date_from { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="date_to")]
		public System.Nullable<System.DateOnly> Date_to { get; set; }
	}
	
	/// <summary>
	/// RequisitionSerializer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RequisitionRequest
	{
		
		/// <summary>
		/// option to enable account selection view for the end user
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="account_selection")]
		public System.Nullable<System.Boolean> Account_selection { get; set; }
		
		/// <summary>
		/// EUA associated with this requisition
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="agreement")]
		public string Agreement { get; set; }
		
		/// <summary>
		/// an Institution ID for this Requisition
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="institution_id")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Institution_id { get; set; }
		
		/// <summary>
		/// redirect URL to your application after end-user authorization with ASPSP
		/// Required
		/// Min length: 1
		/// Max length: 1024
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="redirect")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		public string Redirect { get; set; }
		
		/// <summary>
		/// enable redirect back to the client after account list received
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="redirect_immediate")]
		public System.Nullable<System.Boolean> Redirect_immediate { get; set; }
		
		/// <summary>
		/// additional ID to identify the end user
		/// Min length: 1
		/// Max length: 256
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reference")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Reference { get; set; }
		
		/// <summary>
		/// optional SSN field to verify ownership of the account
		/// Max length: 64
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ssn")]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		public string Ssn { get; set; }
		
		/// <summary>
		/// A two-letter country code (ISO 639-1)
		/// Min length: 1
		/// Max length: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="user_language")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public string User_language { get; set; }
	}
	
	/// <summary>
	/// Obtain new JWT pair.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SpectacularJWTObtain
	{
		
		/// <summary>
		/// Your access token
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="access")]
		public string Access { get; set; }
		
		/// <summary>
		/// Access token expires in seconds
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="access_expires")]
		public System.Nullable<System.Int32> Access_expires { get; set; }
		
		/// <summary>
		/// Your refresh token
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refresh")]
		public string Refresh { get; set; }
		
		/// <summary>
		/// Refresh token expires in seconds
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refresh_expires")]
		public System.Nullable<System.Int32> Refresh_expires { get; set; }
	}
	
	/// <summary>
	/// Refresh Access token.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SpectacularJWTRefresh
	{
		
		/// <summary>
		/// Your access token
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="access")]
		public string Access { get; set; }
		
		/// <summary>
		/// Access token expires in seconds
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="access_expires")]
		public System.Nullable<System.Int32> Access_expires { get; set; }
	}
	
	/// <summary>
	/// Create requisition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SpectacularRequisition
	{
		
		/// <summary>
		/// option to enable account selection view for the end user
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="account_selection")]
		public System.Nullable<System.Boolean> Account_selection { get; set; }
		
		/// <summary>
		/// array of account IDs retrieved within a scope of this requisition
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accounts")]
		public string[] Accounts { get; set; }
		
		/// <summary>
		/// EUA associated with this requisition
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="agreement")]
		public string Agreement { get; set; }
		
		/// <summary>
		/// The date & time at which the requisition was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created")]
		public System.Nullable<System.DateTimeOffset> Created { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// an Institution ID for this Requisition
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="institution_id")]
		public string Institution_id { get; set; }
		
		/// <summary>
		/// link to initiate authorization with Institution
		/// </summary>
		[System.ComponentModel.DefaultValue("https://ob.nordigen.com/psd2/start/3fa85f64-5717-4562-b3fc-2c963f66afa6/{$INSTITUTION_ID}")]
		[System.Runtime.Serialization.DataMember(Name="link")]
		public string Link { get; set; } = "https://ob.nordigen.com/psd2/start/3fa85f64-5717-4562-b3fc-2c963f66afa6/{$INSTITUTION_ID}";
		
		/// <summary>
		/// redirect URL to your application after end-user authorization with ASPSP
		/// Required
		/// Max length: 1024
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="redirect")]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		public string Redirect { get; set; }
		
		/// <summary>
		/// enable redirect back to the client after account list received
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="redirect_immediate")]
		public System.Nullable<System.Boolean> Redirect_immediate { get; set; }
		
		/// <summary>
		/// additional ID to identify the end user
		/// Max length: 256
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reference")]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Reference { get; set; }
		
		/// <summary>
		/// optional SSN field to verify ownership of the account
		/// Max length: 64
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ssn")]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		public string Ssn { get; set; }
		
		/// <summary>
		/// status of this requisition
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public Status1c5Enum Status { get; set; }
		
		/// <summary>
		/// A two-letter country code (ISO 639-1)
		/// Max length: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="user_language")]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public string User_language { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Access account premium transactions.
		/// Retrieve_account_transactions_v2 api/v2/accounts/premium/{id}/transactions/
		/// </summary>
		/// <param name="country">ISO 3166 two-character country code</param>
		/// <returns>Retrieve account transactions</returns>
		public async Task<System.Collections.Generic.Dictionary<string, object>> Retrieve_account_transactions_v2Async(string country, System.DateOnly date_from, System.DateOnly date_to, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/accounts/premium/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/transactions/?country=" + (country==null? "" : System.Uri.EscapeDataString(country))+"&date_from="+date_from+"&date_to="+date_to;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<System.Collections.Generic.Dictionary<string, object>>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Access account metadata.
		/// 
		/// Information about the account record, such as the processing status and IBAN.
		/// 
		/// Account status is recalculated based on the error count in the latest req.
		/// Retrieve_account_metadata api/v2/accounts/{id}/
		/// </summary>
		/// <returns>sample account metadata</returns>
		public async Task<Account> Retrieve_account_metadataAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/accounts/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Account>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Access account balances.
		/// 
		/// Balances will be returned in Berlin Group PSD2 format.
		/// Retrieve_account_balances_v2 api/v2/accounts/{id}/balances/
		/// </summary>
		/// <returns>Retrieve account balances</returns>
		public async Task<System.Collections.Generic.Dictionary<string, object>> Retrieve_account_balances_v2Async(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/accounts/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/balances/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<System.Collections.Generic.Dictionary<string, object>>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Access account details.
		/// 
		/// Account details will be returned in Berlin Group PSD2 format.
		/// Retrieve_account_details_v2 api/v2/accounts/{id}/details/
		/// </summary>
		/// <returns>Retrieve account details</returns>
		public async Task<System.Collections.Generic.Dictionary<string, object>> Retrieve_account_details_v2Async(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/accounts/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/details/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<System.Collections.Generic.Dictionary<string, object>>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Access account transactions.
		/// 
		/// Transactions will be returned in Berlin Group PSD2 format.
		/// Retrieve_account_transactions_v2_2 api/v2/accounts/{id}/transactions/
		/// </summary>
		/// <returns>Retrieve account transactions</returns>
		public async Task<System.Collections.Generic.Dictionary<string, object>> Retrieve_account_transactions_v2_2Async(System.DateOnly date_from, System.DateOnly date_to, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/accounts/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/transactions/?date_from="+date_from+"&date_to="+date_to;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<System.Collections.Generic.Dictionary<string, object>>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// API endpoints related to end-user agreements.
		/// Retrieve_all_EUAs_for_an_end_user_v2 api/v2/agreements/enduser/
		/// </summary>
		/// <param name="limit">Number of results to return per page.
		/// Minimum: 1
		// </param>
		/// <param name="offset">The initial index from which to return the results.
		/// Minimum: 1
		// </param>
		/// <returns>Retrieve all end user agreements</returns>
		public async Task<PaginatedEndUserAgreementList> Retrieve_all_EUAs_for_an_end_user_v2Async(int limit, int offset, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/agreements/enduser/?limit="+limit+"&offset="+offset;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PaginatedEndUserAgreementList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// API endpoints related to end-user agreements.
		/// Create_EUA_v2 api/v2/agreements/enduser/
		/// </summary>
		public async Task Create_EUA_v2Async(EndUserAgreementRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/agreements/enduser/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete an end user agreement
		/// Delete_EUA_by_id_v2 api/v2/agreements/enduser/{id}/
		/// </summary>
		/// <param name="id">A UUID string identifying this end user agreement.</param>
		public async Task Delete_EUA_by_id_v2Async(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/agreements/enduser/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve end user agreement by ID
		/// Retrieve_EUA_by_id_v2 api/v2/agreements/enduser/{id}/
		/// </summary>
		/// <param name="id">A UUID string identifying this end user agreement.</param>
		/// <returns>Retrieve end user agreement by ID</returns>
		public async Task<EndUserAgreement> Retrieve_EUA_by_id_v2Async(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/agreements/enduser/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<EndUserAgreement>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Accept an end-user agreement via the API
		/// Accept_EUA api/v2/agreements/enduser/{id}/accept/
		/// </summary>
		/// <param name="id">A UUID string identifying this end user agreement.</param>
		/// <returns>Accept end user agreement</returns>
		public async Task<EndUserAgreement> Accept_EUAAsync(string id, EnduserAcceptanceDetailsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/agreements/enduser/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/accept/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<EndUserAgreement>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List all available institutions
		/// Retrieve_all_supported_Institutions_in_a_given_country api/v2/institutions/
		/// </summary>
		/// <param name="country">ISO 3166 two-character country code</param>
		/// <param name="payments_enabled">Boolean value, indicating if payments are enabled</param>
		/// <returns>list of supported Institutions in the country</returns>
		public async Task<Integration[]> Retrieve_all_supported_Institutions_in_a_given_countryAsync(string country, string payments_enabled, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/institutions/?country=" + (country==null? "" : System.Uri.EscapeDataString(country))+"&payments_enabled=" + (payments_enabled==null? "" : System.Uri.EscapeDataString(payments_enabled));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Integration[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get details about a specific Institution
		/// Retrieve_institution api/v2/institutions/{id}/
		/// </summary>
		/// <returns>Retrieve institution by id</returns>
		public async Task<IntegrationRetrieve> Retrieve_institutionAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/institutions/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<IntegrationRetrieve>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve all payments belonging to the company
		/// List_payments api/v2/payments/
		/// </summary>
		/// <param name="limit">Number of results to return per page.
		/// Minimum: 1
		// </param>
		/// <param name="offset">The initial index from which to return the results.
		/// Minimum: 1
		// </param>
		/// <returns>List payments</returns>
		public async Task<PaginatedPaymentReadList> List_paymentsAsync(int limit, int offset, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/payments/?limit="+limit+"&offset="+offset;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PaginatedPaymentReadList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create payment
		/// Create_payment api/v2/payments/
		/// </summary>
		public async Task Create_paymentAsync(PaymentWriteRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/payments/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieve all payment creditor accounts
		/// Retrieve_all_payment_creditor_accounts api/v2/payments/account/
		/// </summary>
		/// <returns>Retrieve all payment creditor accounts</returns>
		public async Task<CreditorAccount[]> Retrieve_all_payment_creditor_accountsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/payments/account/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreditorAccount[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// API endpoints related to creditor accounts.
		/// Payments_creditors_list api/v2/payments/creditors/
		/// </summary>
		/// <param name="limit">Number of results to return per page.
		/// Minimum: 1
		// </param>
		/// <param name="offset">The initial index from which to return the results.
		/// Minimum: 1
		// </param>
		public async Task<PaginatedCreditorAccountList> Payments_creditors_listAsync(string account, string address_country, string agent, string currency, int limit, string name, int offset, string type, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/payments/creditors/?account=" + (account==null? "" : System.Uri.EscapeDataString(account))+"&address_country=" + (address_country==null? "" : System.Uri.EscapeDataString(address_country))+"&agent=" + (agent==null? "" : System.Uri.EscapeDataString(agent))+"&currency=" + (currency==null? "" : System.Uri.EscapeDataString(currency))+"&limit="+limit+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&offset="+offset+"&type=" + (type==null? "" : System.Uri.EscapeDataString(type));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PaginatedCreditorAccountList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// API endpoints related to creditor accounts.
		/// Payments_creditors_create api/v2/payments/creditors/
		/// </summary>
		public async Task Payments_creditors_createAsync(CreditorAccountWriteRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/payments/creditors/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// API endpoints related to creditor accounts.
		/// Payments_creditors_destroy api/v2/payments/creditors/{id}/
		/// </summary>
		public async Task Payments_creditors_destroyAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/payments/creditors/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// API endpoints related to creditor accounts.
		/// Payments_creditors_retrieve api/v2/payments/creditors/{id}/
		/// </summary>
		public async Task<CreditorAccount> Payments_creditors_retrieveAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/payments/creditors/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreditorAccount>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List minimum required fields for institution
		/// List_minimum_required_fields_for_institution api/v2/payments/fields/{institution_id}/
		/// </summary>
		/// <returns>Minimum required fields</returns>
		public async Task<System.Collections.Generic.Dictionary<string, object>> List_minimum_required_fields_for_institutionAsync(string institution_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/payments/fields/"+ (institution_id==null? "" : System.Uri.EscapeDataString(institution_id))+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<System.Collections.Generic.Dictionary<string, object>>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete periodic payment
		/// Delete_periodic_payment api/v2/payments/{id}/
		/// </summary>
		/// <returns>Payment deleted</returns>
		public async Task<System.Collections.Generic.Dictionary<string, object>> Delete_periodic_paymentAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/payments/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<System.Collections.Generic.Dictionary<string, object>>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve payment
		/// Retrieve_payment api/v2/payments/{id}/
		/// </summary>
		/// <returns>Retrieve payment information</returns>
		public async Task<PaymentRead> Retrieve_paymentAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/payments/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PaymentRead>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Initiate the payment on bank's side.
		/// 
		/// Complete the payment and return payment details as a response.
		/// Payments_submit_create api/v2/payments/{id}/submit/
		/// </summary>
		public async Task<PaymentRead> Payments_submit_createAsync(string id, PaymentReadRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/payments/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/submit/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PaymentRead>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieve all requisitions belonging to the company
		/// Retrieve_all_requisitions api/v2/requisitions/
		/// </summary>
		/// <param name="limit">Number of results to return per page.
		/// Minimum: 1
		// </param>
		/// <param name="offset">The initial index from which to return the results.
		/// Minimum: 1
		// </param>
		/// <returns>Retrieve all requisitions</returns>
		public async Task<PaginatedRequisitionList> Retrieve_all_requisitionsAsync(int limit, int offset, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/requisitions/?limit="+limit+"&offset="+offset;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PaginatedRequisitionList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new requisition
		/// Requisition_created api/v2/requisitions/
		/// </summary>
		public async Task Requisition_createdAsync(RequisitionRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/requisitions/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete requisition and its end user agreement
		/// Delete_requisition_by_id_v2 api/v2/requisitions/{id}/
		/// </summary>
		/// <param name="id">A UUID string identifying this requisition.</param>
		public async Task Delete_requisition_by_id_v2Async(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/requisitions/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve a requisition by ID
		/// Requisition_by_id api/v2/requisitions/{id}/
		/// </summary>
		/// <param name="id">A UUID string identifying this requisition.</param>
		/// <returns>Get requisition by ID</returns>
		public async Task<Requisition> Requisition_by_idAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/requisitions/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Requisition>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Obtain JWT pair
		/// JWT_Obtain api/v2/token/new/
		/// </summary>
		/// <returns>Obtain JWT response.</returns>
		public async Task<SpectacularJWTObtain> JWT_ObtainAsync(JWTObtainPairRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/token/new/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SpectacularJWTObtain>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Refresh access token
		/// JWT_Refresh api/v2/token/refresh/
		/// </summary>
		/// <returns>Refresh access token.</returns>
		public async Task<SpectacularJWTRefresh> JWT_RefreshAsync(JWTRefreshRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/token/refresh/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SpectacularJWTRefresh>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
