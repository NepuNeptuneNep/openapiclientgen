//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchPutPropertyValuesResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="errorEntries")]
		public BatchPutPropertyErrorEntry[] ErrorEntries { get; set; }
	}
	
	/// <summary>
	/// An object that contains information about errors returned by the <code>BatchPutProperty</code> action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchPutPropertyErrorEntry
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public BatchPutPropertyError[] Errors { get; set; }
	}
	
	/// <summary>
	/// An error returned by the <code>BatchPutProperty</code> action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchPutPropertyError
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="errorCode")]
		public string ErrorCode { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="errorMessage")]
		public string ErrorMessage { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="entry")]
		public PropertyValueEntry Entry { get; set; }
	}
	
	/// <summary>
	/// An object that specifies information about time series property values. This object is used and consumed by the <a href="https://docs.aws.amazon.com/iot-twinmaker/latest/apireference/API_BatchPutPropertyValues.html">BatchPutPropertyValues</a> action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PropertyValueEntry
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="entityPropertyReference")]
		public EntityPropertyReference EntityPropertyReference { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="propertyValues")]
		public PropertyValue[] PropertyValues { get; set; }
	}
	
	/// <summary>
	/// An object that uniquely identifies an entity property.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EntityPropertyReference
	{
		
		[System.Runtime.Serialization.DataMember(Name="componentName")]
		public string ComponentName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="externalIdProperty")]
		public ExternalIdProperty ExternalIdProperty { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="entityId")]
		public string EntityId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="propertyName")]
		public string PropertyName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ExternalIdProperty
	{
	}
	
	/// <summary>
	/// An object that contains information about a value for a time series property.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PropertyValue
	{
		
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public System.DateTimeOffset Timestamp { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public DataValue Value { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="time")]
		public string Time { get; set; }
	}
	
	/// <summary>
	/// An object that specifies a value for a property.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DataValue
	{
		
		[System.Runtime.Serialization.DataMember(Name="booleanValue")]
		public System.Nullable<System.Boolean> BooleanValue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="doubleValue")]
		public System.Nullable<System.Double> DoubleValue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="integerValue")]
		public System.Nullable<System.Int32> IntegerValue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="longValue")]
		public System.Nullable<System.Int32> LongValue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stringValue")]
		public string StringValue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="listValue")]
		public DataValue[] ListValue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mapValue")]
		public DataValueMap MapValue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="relationshipValue")]
		public RelationshipValue RelationshipValue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="expression")]
		public string Expression { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DataValueMap
	{
	}
	
	/// <summary>
	/// A value that associates a component and an entity.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RelationshipValue
	{
		
		[System.Runtime.Serialization.DataMember(Name="targetEntityId")]
		public string TargetEntityId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="targetComponentName")]
		public string TargetComponentName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InternalServerException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResourceNotFoundException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ThrottlingException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ValidationException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateComponentTypeResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="creationDateTime")]
		public System.DateTimeOffset CreationDateTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="state")]
		public State State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum State
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERROR = 4,
	}
	
	/// <summary>
	/// An object that sets information about a property.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PropertyDefinitionRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="dataType")]
		public DataType DataType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isRequiredInEntity")]
		public System.Nullable<System.Boolean> IsRequiredInEntity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isExternalId")]
		public System.Nullable<System.Boolean> IsExternalId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isStoredExternally")]
		public System.Nullable<System.Boolean> IsStoredExternally { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isTimeSeries")]
		public System.Nullable<System.Boolean> IsTimeSeries { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultValue")]
		public DataValue DefaultValue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="configuration")]
		public Configuration Configuration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
	}
	
	/// <summary>
	/// An object that specifies the data type of a property.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DataType
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public Type Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nestedType")]
		public DataType NestedType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="allowedValues")]
		public DataValue[] AllowedValues { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unitOfMeasure")]
		public string UnitOfMeasure { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="relationship")]
		public Relationship Relationship { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum Type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RELATIONSHIP = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STRING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LONG = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BOOLEAN = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTEGER = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DOUBLE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LIST = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAP = 7,
	}
	
	/// <summary>
	/// An object that specifies a relationship with another component type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Relationship
	{
		
		[System.Runtime.Serialization.DataMember(Name="targetComponentTypeId")]
		public string TargetComponentTypeId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="relationshipType")]
		public string RelationshipType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Configuration
	{
	}
	
	/// <summary>
	/// The function request body.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FunctionRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="requiredProperties")]
		public string[] RequiredProperties { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scope")]
		public Scope Scope { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="implementedBy")]
		public DataConnector ImplementedBy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum Scope
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENTITY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WORKSPACE = 1,
	}
	
	/// <summary>
	/// The data connector.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DataConnector
	{
		
		[System.Runtime.Serialization.DataMember(Name="lambda")]
		public LambdaFunction Lambda { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isNative")]
		public System.Nullable<System.Boolean> IsNative { get; set; }
	}
	
	/// <summary>
	/// The Lambda function.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LambdaFunction
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PropertyGroupRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="groupType")]
		public GroupType GroupType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="propertyNames")]
		public string[] PropertyNames { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GroupType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TABULAR = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccessDeniedException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConflictException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ServiceQuotaExceededException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateEntityResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="entityId")]
		public string EntityId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="creationDateTime")]
		public System.DateTimeOffset CreationDateTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="state")]
		public State State { get; set; }
	}
	
	/// <summary>
	/// An object that sets information about a component type create or update request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ComponentRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="componentTypeId")]
		public string ComponentTypeId { get; set; }
		
		/// <summary>
		/// An object that maps strings to the properties to set in the component type. Each string in the mapping must be unique to this object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="propertyGroups")]
		public ComponentPropertyGroupRequests PropertyGroups { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ComponentPropertyGroupRequests
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateSceneResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="creationDateTime")]
		public System.DateTimeOffset CreationDateTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateSyncJobResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="creationDateTime")]
		public System.DateTimeOffset CreationDateTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="state")]
		public SyncJobState State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SyncJobState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INITIALIZING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERROR = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateWorkspaceResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="creationDateTime")]
		public System.DateTimeOffset CreationDateTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteComponentTypeResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="state")]
		public State State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteEntityResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="state")]
		public State State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteSceneResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteSyncJobResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="state")]
		public SyncJobState State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteWorkspaceResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ExecuteQueryResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="columnDescriptions")]
		public ColumnDescription[] ColumnDescriptions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rows")]
		public Row[] Rows { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// A description of the column in the query results.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ColumnDescription
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public ColumnType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ColumnType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NODE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EDGE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VALUE = 2,
	}
	
	/// <summary>
	/// Represents a single row in the query results.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Row
	{
		
		[System.Runtime.Serialization.DataMember(Name="rowData")]
		public QueryResultValue[] RowData { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class QueryResultValue
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class QueryTimeoutException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetComponentTypeResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="workspaceId")]
		public string WorkspaceId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isSingleton")]
		public System.Nullable<System.Boolean> IsSingleton { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="componentTypeId")]
		public string ComponentTypeId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="propertyDefinitions")]
		public PropertyDefinitionsResponse PropertyDefinitions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="extendsFrom")]
		public string[] ExtendsFrom { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="functions")]
		public FunctionsResponse Functions { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="creationDateTime")]
		public System.DateTimeOffset CreationDateTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="updateDateTime")]
		public System.DateTimeOffset UpdateDateTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isAbstract")]
		public System.Nullable<System.Boolean> IsAbstract { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isSchemaInitialized")]
		public System.Nullable<System.Boolean> IsSchemaInitialized { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public Status Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="propertyGroups")]
		public PropertyGroupsResponse PropertyGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="syncSource")]
		public string SyncSource { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="componentTypeName")]
		public string ComponentTypeName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PropertyDefinitionsResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FunctionsResponse
	{
	}
	
	/// <summary>
	/// An object that represents the status of an entity, component, component type, or workspace.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Status
	{
		
		[System.Runtime.Serialization.DataMember(Name="state")]
		public State State { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="error")]
		public ErrorDetails Error { get; set; }
	}
	
	/// <summary>
	/// The error details.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ErrorDetails
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public ErrorCode Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ErrorCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VALIDATION_ERROR = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERNAL_FAILURE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SYNC_INITIALIZING_ERROR = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SYNC_CREATING_ERROR = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SYNC_PROCESSING_ERROR = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PropertyGroupsResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetEntityResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="entityId")]
		public string EntityId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="entityName")]
		public string EntityName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public Status Status { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="workspaceId")]
		public string WorkspaceId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="components")]
		public ComponentsMap Components { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="parentEntityId")]
		public string ParentEntityId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="hasChildEntities")]
		public bool HasChildEntities { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="creationDateTime")]
		public System.DateTimeOffset CreationDateTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="updateDateTime")]
		public System.DateTimeOffset UpdateDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="syncSource")]
		public string SyncSource { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ComponentsMap
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetPricingPlanResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currentPricingPlan")]
		public PricingPlan CurrentPricingPlan { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pendingPricingPlan")]
		public PricingPlan PendingPricingPlan { get; set; }
	}
	
	/// <summary>
	/// The pricing plan.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PricingPlan
	{
		
		[System.Runtime.Serialization.DataMember(Name="billableEntityCount")]
		public System.Nullable<System.Int32> BillableEntityCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bundleInformation")]
		public BundleInformation BundleInformation { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="effectiveDateTime")]
		public System.DateTimeOffset EffectiveDateTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pricingMode")]
		public PricingMode PricingMode { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="updateDateTime")]
		public System.DateTimeOffset UpdateDateTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="updateReason")]
		public UpdateReason UpdateReason { get; set; }
	}
	
	/// <summary>
	/// Information about the pricing bundle.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BundleInformation
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="bundleNames")]
		public string[] BundleNames { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pricingTier")]
		public PricingTier PricingTier { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PricingTier
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIER_1 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIER_2 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIER_3 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIER_4 = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PricingMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BASIC = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STANDARD = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIERED_BUNDLE = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum UpdateReason
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEFAULT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRICING_TIER_UPDATE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENTITY_COUNT_UPDATE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRICING_MODE_UPDATE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OVERWRITTEN = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetPropertyValueResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="propertyValues")]
		public PropertyLatestValueMap PropertyValues { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tabularPropertyValues")]
		public PropertyTableValue[][] TabularPropertyValues { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PropertyLatestValueMap
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PropertyTableValue
	{
	}
	
	/// <summary>
	/// Filter criteria that orders the return output. It can be sorted in ascending or descending order.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrderBy
	{
		
		[System.Runtime.Serialization.DataMember(Name="order")]
		public Order Order { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="propertyName")]
		public string PropertyName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum Order
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASCENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DESCENDING = 1,
	}
	
	/// <summary>
	/// An object that filters items returned by a property request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PropertyFilter
	{
		
		[System.Runtime.Serialization.DataMember(Name="propertyName")]
		public string PropertyName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="operator")]
		public string Operator { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public DataValue Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConnectorFailureException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConnectorTimeoutException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetPropertyValueHistoryResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="propertyValues")]
		public PropertyValueHistory[] PropertyValues { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// The history of values for a time series property.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PropertyValueHistory
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="entityPropertyReference")]
		public EntityPropertyReference EntityPropertyReference { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="values")]
		public PropertyValue[] Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum InterpolationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LINEAR = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetSceneResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="workspaceId")]
		public string WorkspaceId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sceneId")]
		public string SceneId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="contentLocation")]
		public string ContentLocation { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="creationDateTime")]
		public System.DateTimeOffset CreationDateTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="updateDateTime")]
		public System.DateTimeOffset UpdateDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="capabilities")]
		public string[] Capabilities { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sceneMetadata")]
		public SceneMetadataMap SceneMetadata { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="generatedSceneMetadata")]
		public GeneratedSceneMetadataMap GeneratedSceneMetadata { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="error")]
		public SceneError Error { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SceneMetadataMap
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GeneratedSceneMetadataMap
	{
	}
	
	/// <summary>
	/// The scene error.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SceneError
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public SceneErrorCode Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SceneErrorCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MATTERPORT_ERROR = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetSyncJobResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="workspaceId")]
		public string WorkspaceId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="syncSource")]
		public string SyncSource { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="syncRole")]
		public string SyncRole { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public SyncJobStatus Status { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="creationDateTime")]
		public System.DateTimeOffset CreationDateTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="updateDateTime")]
		public System.DateTimeOffset UpdateDateTime { get; set; }
	}
	
	/// <summary>
	/// The SyncJob status.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SyncJobStatus
	{
		
		[System.Runtime.Serialization.DataMember(Name="state")]
		public SyncJobState State { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="error")]
		public ErrorDetails Error { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetWorkspaceResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="workspaceId")]
		public string WorkspaceId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="s3Location")]
		public string S3Location { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="role")]
		public string Role { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="creationDateTime")]
		public System.DateTimeOffset CreationDateTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="updateDateTime")]
		public System.DateTimeOffset UpdateDateTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListComponentTypesResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="workspaceId")]
		public string WorkspaceId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="componentTypeSummaries")]
		public ComponentTypeSummary[] ComponentTypeSummaries { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	/// <summary>
	/// An object that contains information about a component type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ComponentTypeSummary
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="componentTypeId")]
		public string ComponentTypeId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="creationDateTime")]
		public System.DateTimeOffset CreationDateTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="updateDateTime")]
		public System.DateTimeOffset UpdateDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public Status Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="componentTypeName")]
		public string ComponentTypeName { get; set; }
	}
	
	/// <summary>
	/// <p>An object that filters items in a list of component types.</p> <note> <p>Only one object is accepted as a valid input.</p> </note>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListComponentTypesFilter
	{
		
		[System.Runtime.Serialization.DataMember(Name="extendsFrom")]
		public string ExtendsFrom { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="namespace")]
		public string Namespace { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isAbstract")]
		public System.Nullable<System.Boolean> IsAbstract { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListEntitiesResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="entitySummaries")]
		public EntitySummary[] EntitySummaries { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// An object that contains information about an entity.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EntitySummary
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="entityId")]
		public string EntityId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="entityName")]
		public string EntityName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parentEntityId")]
		public string ParentEntityId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public Status Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hasChildEntities")]
		public System.Nullable<System.Boolean> HasChildEntities { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="creationDateTime")]
		public System.DateTimeOffset CreationDateTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="updateDateTime")]
		public System.DateTimeOffset UpdateDateTime { get; set; }
	}
	
	/// <summary>
	/// An object that filters items in a list of entities.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListEntitiesFilter
	{
		
		[System.Runtime.Serialization.DataMember(Name="parentEntityId")]
		public string ParentEntityId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="componentTypeId")]
		public string ComponentTypeId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="externalId")]
		public string ExternalId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListScenesResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="sceneSummaries")]
		public SceneSummary[] SceneSummaries { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// An object that contains information about a scene.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SceneSummary
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sceneId")]
		public string SceneId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="contentLocation")]
		public string ContentLocation { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="creationDateTime")]
		public System.DateTimeOffset CreationDateTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="updateDateTime")]
		public System.DateTimeOffset UpdateDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListSyncJobsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="syncJobSummaries")]
		public SyncJobSummary[] SyncJobSummaries { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// The SyncJob summary.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SyncJobSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="workspaceId")]
		public string WorkspaceId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="syncSource")]
		public string SyncSource { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public SyncJobStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationDateTime")]
		public System.DateTimeOffset CreationDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updateDateTime")]
		public System.DateTimeOffset UpdateDateTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListSyncResourcesResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="syncResources")]
		public SyncResourceSummary[] SyncResources { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// The sync resource summary.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SyncResourceSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="resourceType")]
		public SyncResourceType ResourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="externalId")]
		public string ExternalId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceId")]
		public string ResourceId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public SyncResourceStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updateDateTime")]
		public System.DateTimeOffset UpdateDateTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SyncResourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENTITY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPONENT_TYPE = 1,
	}
	
	/// <summary>
	/// The sync resource status.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SyncResourceStatus
	{
		
		[System.Runtime.Serialization.DataMember(Name="state")]
		public SyncResourceState State { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="error")]
		public ErrorDetails Error { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SyncResourceState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INITIALIZING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROCESSING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_SYNC = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERROR = 4,
	}
	
	/// <summary>
	/// The sync resource filter.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SyncResourceFilter
	{
		
		[System.Runtime.Serialization.DataMember(Name="state")]
		public SyncResourceState State { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceType")]
		public SyncResourceType ResourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceId")]
		public string ResourceId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="externalId")]
		public string ExternalId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTagsForResourceResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TagMap
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListWorkspacesResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="workspaceSummaries")]
		public WorkspaceSummary[] WorkspaceSummaries { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// An object that contains information about a workspace.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WorkspaceSummary
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="workspaceId")]
		public string WorkspaceId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="creationDateTime")]
		public System.DateTimeOffset CreationDateTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="updateDateTime")]
		public System.DateTimeOffset UpdateDateTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TagResourceResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TooManyTagsException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UntagResourceResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateComponentTypeResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="workspaceId")]
		public string WorkspaceId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="componentTypeId")]
		public string ComponentTypeId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="state")]
		public State State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateEntityResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="updateDateTime")]
		public System.DateTimeOffset UpdateDateTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="state")]
		public State State { get; set; }
	}
	
	/// <summary>
	/// The component update request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ComponentUpdateRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="updateType")]
		public ComponentUpdateType UpdateType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="componentTypeId")]
		public string ComponentTypeId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="propertyUpdates")]
		public PropertyRequests PropertyUpdates { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="propertyGroupUpdates")]
		public ComponentPropertyGroupRequests PropertyGroupUpdates { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ComponentUpdateType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PropertyRequests
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ParentEntityUpdateType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdatePricingPlanResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currentPricingPlan")]
		public PricingPlan CurrentPricingPlan { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pendingPricingPlan")]
		public PricingPlan PendingPricingPlan { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateSceneResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="updateDateTime")]
		public System.DateTimeOffset UpdateDateTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateWorkspaceResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="updateDateTime")]
		public System.DateTimeOffset UpdateDateTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchPutPropertyValuesRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="entries")]
		public PropertyValueEntry[] Entries { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PropertyGroupUpdateType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE = 2,
	}
	
	/// <summary>
	/// The component property group request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ComponentPropertyGroupRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="groupType")]
		public GroupType GroupType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="propertyNames")]
		public string[] PropertyNames { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updateType")]
		public PropertyGroupUpdateType UpdateType { get; set; }
	}
	
	/// <summary>
	/// The component property group response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ComponentPropertyGroupResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="groupType")]
		public GroupType GroupType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="propertyNames")]
		public string[] PropertyNames { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isInherited")]
		public bool IsInherited { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ComponentPropertyGroupResponses
	{
	}
	
	/// <summary>
	/// An object that returns information about a component type create or update request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ComponentResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="componentName")]
		public string ComponentName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="componentTypeId")]
		public string ComponentTypeId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public Status Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="definedIn")]
		public string DefinedIn { get; set; }
		
		/// <summary>
		/// An object that maps strings to the properties to set in the component type. Each string in the mapping must be unique to this object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="propertyGroups")]
		public ComponentPropertyGroupResponses PropertyGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="syncSource")]
		public string SyncSource { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ComponentUpdatesMapRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ComponentsMapRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PropertyDefinitionsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FunctionsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PropertyGroupsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateComponentTypeRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="isSingleton")]
		public System.Nullable<System.Boolean> IsSingleton { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="propertyDefinitions")]
		public PropertyDefinitionsRequest PropertyDefinitions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="extendsFrom")]
		public string[] ExtendsFrom { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="functions")]
		public FunctionsRequest Functions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="propertyGroups")]
		public PropertyGroupsRequest PropertyGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="componentTypeName")]
		public string ComponentTypeName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateEntityRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="entityId")]
		public string EntityId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="entityName")]
		public string EntityName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="components")]
		public ComponentsMapRequest Components { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parentEntityId")]
		public string ParentEntityId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateSceneRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sceneId")]
		public string SceneId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="contentLocation")]
		public string ContentLocation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="capabilities")]
		public string[] Capabilities { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sceneMetadata")]
		public SceneMetadataMap SceneMetadata { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateSyncJobRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="syncRole")]
		public string SyncRole { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateWorkspaceRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="s3Location")]
		public string S3Location { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="role")]
		public string Role { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteComponentTypeRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteEntityRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteSceneRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteSyncJobRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteWorkspaceRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ExecuteQueryRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="workspaceId")]
		public string WorkspaceId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="queryStatement")]
		public string QueryStatement { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// The function response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FunctionResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="requiredProperties")]
		public string[] RequiredProperties { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scope")]
		public Scope Scope { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="implementedBy")]
		public DataConnector ImplementedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isInherited")]
		public System.Nullable<System.Boolean> IsInherited { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetComponentTypeRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetEntityRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetPricingPlanRequest
	{
	}
	
	/// <summary>
	/// An object that specifies how to interpolate data in a list.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InterpolationParameters
	{
		
		[System.Runtime.Serialization.DataMember(Name="interpolationType")]
		public InterpolationType InterpolationType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="intervalInSeconds")]
		public System.Nullable<System.Int32> IntervalInSeconds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OrderByTime
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASCENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DESCENDING = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetPropertyValueHistoryRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="entityId")]
		public string EntityId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="componentName")]
		public string ComponentName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="componentTypeId")]
		public string ComponentTypeId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="selectedProperties")]
		public string[] SelectedProperties { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="propertyFilters")]
		public PropertyFilter[] PropertyFilters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startDateTime")]
		public System.DateTimeOffset StartDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endDateTime")]
		public System.DateTimeOffset EndDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="interpolation")]
		public InterpolationParameters Interpolation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="orderByTime")]
		public Order OrderByTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public string StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public string EndTime { get; set; }
	}
	
	/// <summary>
	/// The tabular conditions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TabularConditions
	{
		
		[System.Runtime.Serialization.DataMember(Name="orderBy")]
		public OrderBy[] OrderBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="propertyFilters")]
		public PropertyFilter[] PropertyFilters { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetPropertyValueRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="componentName")]
		public string ComponentName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="componentTypeId")]
		public string ComponentTypeId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="entityId")]
		public string EntityId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="selectedProperties")]
		public string[] SelectedProperties { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="propertyGroupName")]
		public string PropertyGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tabularConditions")]
		public TabularConditions TabularConditions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetSceneRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetSyncJobRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetWorkspaceRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListComponentTypesRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public ListComponentTypesFilter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListEntitiesRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public ListEntitiesFilter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListScenesRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListSyncJobsRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListSyncResourcesRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public SyncResourceFilter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTagsForResourceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceARN")]
		public string ResourceARN { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListWorkspacesRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// The parent entity update request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ParentEntityUpdateRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="updateType")]
		public ParentEntityUpdateType UpdateType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parentEntityId")]
		public string ParentEntityId { get; set; }
	}
	
	/// <summary>
	/// An object that contains response data from a property definition request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PropertyDefinitionResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dataType")]
		public DataType DataType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isTimeSeries")]
		public bool IsTimeSeries { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isRequiredInEntity")]
		public bool IsRequiredInEntity { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isExternalId")]
		public bool IsExternalId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isStoredExternally")]
		public bool IsStoredExternally { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isImported")]
		public bool IsImported { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isFinal")]
		public bool IsFinal { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isInherited")]
		public bool IsInherited { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultValue")]
		public DataValue DefaultValue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="configuration")]
		public Configuration Configuration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
	}
	
	/// <summary>
	/// The property group response
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PropertyGroupResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="groupType")]
		public GroupType GroupType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="propertyNames")]
		public string[] PropertyNames { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isInherited")]
		public bool IsInherited { get; set; }
	}
	
	/// <summary>
	/// The latest value of the property.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PropertyLatestValue
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="propertyReference")]
		public EntityPropertyReference PropertyReference { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="propertyValue")]
		public DataValue PropertyValue { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PropertyUpdateType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE = 2,
	}
	
	/// <summary>
	/// An object that sets information about a property.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PropertyRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="definition")]
		public PropertyDefinitionRequest Definition { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public DataValue Value { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updateType")]
		public PropertyGroupUpdateType UpdateType { get; set; }
	}
	
	/// <summary>
	/// An object that contains information about a property response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PropertyResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="definition")]
		public PropertyDefinitionResponse Definition { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public DataValue Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PropertyResponses
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TagResourceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceARN")]
		public string ResourceARN { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UntagResourceRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateComponentTypeRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="isSingleton")]
		public System.Nullable<System.Boolean> IsSingleton { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="propertyDefinitions")]
		public PropertyDefinitionsRequest PropertyDefinitions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="extendsFrom")]
		public string[] ExtendsFrom { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="functions")]
		public FunctionsRequest Functions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="propertyGroups")]
		public PropertyGroupsRequest PropertyGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="componentTypeName")]
		public string ComponentTypeName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateEntityRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="entityName")]
		public string EntityName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="componentUpdates")]
		public ComponentUpdatesMapRequest ComponentUpdates { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parentEntityUpdate")]
		public ParentEntityUpdateRequest ParentEntityUpdate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdatePricingPlanRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pricingMode")]
		public PricingMode PricingMode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bundleNames")]
		public string[] BundleNames { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateSceneRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="contentLocation")]
		public string ContentLocation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="capabilities")]
		public string[] Capabilities { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sceneMetadata")]
		public SceneMetadataMap SceneMetadata { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateWorkspaceRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="role")]
		public string Role { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Sets values for multiple time series properties.
		/// BatchPutPropertyValues workspaces/{workspaceId}/entity-properties
		/// </summary>
		/// <param name="workspaceId">The ID of the workspace that contains the properties to set.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <returns>Success</returns>
		public async Task<BatchPutPropertyValuesResponse> BatchPutPropertyValuesAsync(string workspaceId, BatchPutPropertyValuesPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "workspaces/"+ (workspaceId==null? "" : System.Uri.EscapeDataString(workspaceId))+"/entity-properties";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchPutPropertyValuesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a component type.
		/// CreateComponentType workspaces/{workspaceId}/component-types/{componentTypeId}
		/// </summary>
		/// <param name="workspaceId">The ID of the workspace that contains the component type.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <param name="componentTypeId">The ID of the component type.
		/// Min length: 1
		/// Max length: 256
		// </param>
		/// <returns>Success</returns>
		public async Task<CreateComponentTypeResponse> CreateComponentTypeAsync(string workspaceId, string componentTypeId, CreateComponentTypePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "workspaces/"+ (workspaceId==null? "" : System.Uri.EscapeDataString(workspaceId))+"/component-types/"+ (componentTypeId==null? "" : System.Uri.EscapeDataString(componentTypeId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateComponentTypeResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a component type.
		/// DeleteComponentType workspaces/{workspaceId}/component-types/{componentTypeId}
		/// </summary>
		/// <param name="workspaceId">The ID of the workspace that contains the component type.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <param name="componentTypeId">The ID of the component type to delete.
		/// Min length: 1
		/// Max length: 256
		// </param>
		/// <returns>Success</returns>
		public async Task<DeleteComponentTypeResponse> DeleteComponentTypeAsync(string workspaceId, string componentTypeId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "workspaces/"+ (workspaceId==null? "" : System.Uri.EscapeDataString(workspaceId))+"/component-types/"+ (componentTypeId==null? "" : System.Uri.EscapeDataString(componentTypeId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteComponentTypeResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves information about a component type.
		/// GetComponentType workspaces/{workspaceId}/component-types/{componentTypeId}
		/// </summary>
		/// <param name="workspaceId">The ID of the workspace that contains the component type.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <param name="componentTypeId">The ID of the component type.
		/// Min length: 1
		/// Max length: 256
		// </param>
		/// <returns>Success</returns>
		public async Task<GetComponentTypeResponse> GetComponentTypeAsync(string workspaceId, string componentTypeId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "workspaces/"+ (workspaceId==null? "" : System.Uri.EscapeDataString(workspaceId))+"/component-types/"+ (componentTypeId==null? "" : System.Uri.EscapeDataString(componentTypeId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetComponentTypeResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates information in a component type.
		/// UpdateComponentType workspaces/{workspaceId}/component-types/{componentTypeId}
		/// </summary>
		/// <param name="workspaceId">The ID of the workspace.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <param name="componentTypeId">The ID of the component type.
		/// Min length: 1
		/// Max length: 256
		// </param>
		/// <returns>Success</returns>
		public async Task<UpdateComponentTypeResponse> UpdateComponentTypeAsync(string workspaceId, string componentTypeId, UpdateComponentTypePutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "workspaces/"+ (workspaceId==null? "" : System.Uri.EscapeDataString(workspaceId))+"/component-types/"+ (componentTypeId==null? "" : System.Uri.EscapeDataString(componentTypeId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateComponentTypeResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates an entity.
		/// CreateEntity workspaces/{workspaceId}/entities
		/// </summary>
		/// <param name="workspaceId">The ID of the workspace that contains the entity.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <returns>Success</returns>
		public async Task<CreateEntityResponse> CreateEntityAsync(string workspaceId, CreateEntityPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "workspaces/"+ (workspaceId==null? "" : System.Uri.EscapeDataString(workspaceId))+"/entities";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateEntityResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a scene.
		/// CreateScene workspaces/{workspaceId}/scenes
		/// </summary>
		/// <param name="workspaceId">The ID of the workspace that contains the scene.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <returns>Success</returns>
		public async Task<CreateSceneResponse> CreateSceneAsync(string workspaceId, CreateScenePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "workspaces/"+ (workspaceId==null? "" : System.Uri.EscapeDataString(workspaceId))+"/scenes";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateSceneResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// This action creates a SyncJob.
		/// CreateSyncJob workspaces/{workspaceId}/sync-jobs/{syncSource}
		/// </summary>
		/// <param name="workspaceId">The workspace ID.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <param name="syncSource"><p>The sync source.</p> <note> <p>Currently the only supported syncSoource is <code>SITEWISE </code>.</p> </note></param>
		/// <returns>Success</returns>
		public async Task<CreateSyncJobResponse> CreateSyncJobAsync(string workspaceId, string syncSource, CreateSyncJobPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "workspaces/"+ (workspaceId==null? "" : System.Uri.EscapeDataString(workspaceId))+"/sync-jobs/"+ (syncSource==null? "" : System.Uri.EscapeDataString(syncSource));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateSyncJobResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete the SyncJob.
		/// DeleteSyncJob workspaces/{workspaceId}/sync-jobs/{syncSource}
		/// </summary>
		/// <param name="workspaceId">The workspace ID.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <param name="syncSource"><p>The sync source.</p> <note> <p>Currently the only supported syncSource is <code>SITEWISE </code>.</p> </note></param>
		/// <returns>Success</returns>
		public async Task<DeleteSyncJobResponse> DeleteSyncJobAsync(string workspaceId, string syncSource, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "workspaces/"+ (workspaceId==null? "" : System.Uri.EscapeDataString(workspaceId))+"/sync-jobs/"+ (syncSource==null? "" : System.Uri.EscapeDataString(syncSource));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteSyncJobResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a workplace.
		/// CreateWorkspace workspaces/{workspaceId}
		/// </summary>
		/// <param name="workspaceId">The ID of the workspace.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <returns>Success</returns>
		public async Task<CreateWorkspaceResponse> CreateWorkspaceAsync(string workspaceId, CreateWorkspacePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "workspaces/"+ (workspaceId==null? "" : System.Uri.EscapeDataString(workspaceId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateWorkspaceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a workspace.
		/// DeleteWorkspace workspaces/{workspaceId}
		/// </summary>
		/// <param name="workspaceId">The ID of the workspace to delete.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <returns>Success</returns>
		public async Task<DeleteWorkspaceResponse> DeleteWorkspaceAsync(string workspaceId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "workspaces/"+ (workspaceId==null? "" : System.Uri.EscapeDataString(workspaceId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteWorkspaceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves information about a workspace.
		/// GetWorkspace workspaces/{workspaceId}
		/// </summary>
		/// <param name="workspaceId">The ID of the workspace.
		/// Min length: 1
		/// Max length: 2048
		// </param>
		/// <returns>Success</returns>
		public async Task<GetWorkspaceResponse> GetWorkspaceAsync(string workspaceId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "workspaces/"+ (workspaceId==null? "" : System.Uri.EscapeDataString(workspaceId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetWorkspaceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a workspace.
		/// UpdateWorkspace workspaces/{workspaceId}
		/// </summary>
		/// <param name="workspaceId">The ID of the workspace.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <returns>Success</returns>
		public async Task<UpdateWorkspaceResponse> UpdateWorkspaceAsync(string workspaceId, UpdateWorkspacePutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "workspaces/"+ (workspaceId==null? "" : System.Uri.EscapeDataString(workspaceId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateWorkspaceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes an entity.
		/// DeleteEntity workspaces/{workspaceId}/entities/{entityId}
		/// </summary>
		/// <param name="workspaceId">The ID of the workspace that contains the entity to delete.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <param name="entityId">The ID of the entity to delete.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <param name="isRecursive">A Boolean value that specifies whether the operation deletes child entities.</param>
		/// <returns>Success</returns>
		public async Task<DeleteEntityResponse> DeleteEntityAsync(string workspaceId, string entityId, bool isRecursive, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "workspaces/"+ (workspaceId==null? "" : System.Uri.EscapeDataString(workspaceId))+"/entities/"+ (entityId==null? "" : System.Uri.EscapeDataString(entityId))+"&isRecursive="+isRecursive;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteEntityResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves information about an entity.
		/// GetEntity workspaces/{workspaceId}/entities/{entityId}
		/// </summary>
		/// <param name="workspaceId">The ID of the workspace.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <param name="entityId">The ID of the entity.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <returns>Success</returns>
		public async Task<GetEntityResponse> GetEntityAsync(string workspaceId, string entityId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "workspaces/"+ (workspaceId==null? "" : System.Uri.EscapeDataString(workspaceId))+"/entities/"+ (entityId==null? "" : System.Uri.EscapeDataString(entityId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetEntityResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an entity.
		/// UpdateEntity workspaces/{workspaceId}/entities/{entityId}
		/// </summary>
		/// <param name="workspaceId">The ID of the workspace that contains the entity.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <param name="entityId">The ID of the entity.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <returns>Success</returns>
		public async Task<UpdateEntityResponse> UpdateEntityAsync(string workspaceId, string entityId, UpdateEntityPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "workspaces/"+ (workspaceId==null? "" : System.Uri.EscapeDataString(workspaceId))+"/entities/"+ (entityId==null? "" : System.Uri.EscapeDataString(entityId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateEntityResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a scene.
		/// DeleteScene workspaces/{workspaceId}/scenes/{sceneId}
		/// </summary>
		/// <param name="workspaceId">The ID of the workspace.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <param name="sceneId">The ID of the scene to delete.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <returns>Success</returns>
		public async Task<DeleteSceneResponse> DeleteSceneAsync(string workspaceId, string sceneId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "workspaces/"+ (workspaceId==null? "" : System.Uri.EscapeDataString(workspaceId))+"/scenes/"+ (sceneId==null? "" : System.Uri.EscapeDataString(sceneId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteSceneResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves information about a scene.
		/// GetScene workspaces/{workspaceId}/scenes/{sceneId}
		/// </summary>
		/// <param name="workspaceId">The ID of the workspace that contains the scene.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <param name="sceneId">The ID of the scene.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <returns>Success</returns>
		public async Task<GetSceneResponse> GetSceneAsync(string workspaceId, string sceneId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "workspaces/"+ (workspaceId==null? "" : System.Uri.EscapeDataString(workspaceId))+"/scenes/"+ (sceneId==null? "" : System.Uri.EscapeDataString(sceneId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetSceneResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a scene.
		/// UpdateScene workspaces/{workspaceId}/scenes/{sceneId}
		/// </summary>
		/// <param name="workspaceId">The ID of the workspace that contains the scene.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <param name="sceneId">The ID of the scene.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <returns>Success</returns>
		public async Task<UpdateSceneResponse> UpdateSceneAsync(string workspaceId, string sceneId, UpdateScenePutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "workspaces/"+ (workspaceId==null? "" : System.Uri.EscapeDataString(workspaceId))+"/scenes/"+ (sceneId==null? "" : System.Uri.EscapeDataString(sceneId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateSceneResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Run queries to access information from your knowledge graph of entities within individual workspaces.
		/// ExecuteQuery queries/execution
		/// </summary>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ExecuteQueryResponse> ExecuteQueryAsync(string maxResults, string nextToken, ExecuteQueryPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "queries/execution?maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ExecuteQueryResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets the pricing plan.
		/// GetPricingPlan pricingplan
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetPricingPlanResponse> GetPricingPlanAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "pricingplan";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetPricingPlanResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update the pricing plan.
		/// UpdatePricingPlan pricingplan
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdatePricingPlanResponse> UpdatePricingPlanAsync(UpdatePricingPlanPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "pricingplan";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdatePricingPlanResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Gets the property values for a component, component type, entity, or workspace.</p> <p>You must specify a value for either <code>componentName</code>, <code>componentTypeId</code>, <code>entityId</code>, or <code>workspaceId</code>.</p>
		/// GetPropertyValue workspaces/{workspaceId}/entity-properties/value
		/// </summary>
		/// <param name="workspaceId">The ID of the workspace whose values the operation returns.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<GetPropertyValueResponse> GetPropertyValueAsync(string workspaceId, string maxResults, string nextToken, GetPropertyValuePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "workspaces/"+ (workspaceId==null? "" : System.Uri.EscapeDataString(workspaceId))+"/entity-properties/value&maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetPropertyValueResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Retrieves information about the history of a time series property value for a component, component type, entity, or workspace.</p> <p>You must specify a value for <code>workspaceId</code>. For entity-specific queries, specify values for <code>componentName</code> and <code>entityId</code>. For cross-entity quries, specify a value for <code>componentTypeId</code>.</p>
		/// GetPropertyValueHistory workspaces/{workspaceId}/entity-properties/history
		/// </summary>
		/// <param name="workspaceId">The ID of the workspace.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<GetPropertyValueHistoryResponse> GetPropertyValueHistoryAsync(string workspaceId, string maxResults, string nextToken, GetPropertyValueHistoryPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "workspaces/"+ (workspaceId==null? "" : System.Uri.EscapeDataString(workspaceId))+"/entity-properties/history&maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetPropertyValueHistoryResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets the SyncJob.
		/// GetSyncJob sync-jobs/{syncSource}
		/// </summary>
		/// <param name="syncSource"><p>The sync source.</p> <note> <p>Currently the only supported syncSource is <code>SITEWISE </code>.</p> </note></param>
		/// <param name="workspace">The workspace ID.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <returns>Success</returns>
		public async Task<GetSyncJobResponse> GetSyncJobAsync(string syncSource, string workspace, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sync-jobs/"+ (syncSource==null? "" : System.Uri.EscapeDataString(syncSource))+"&workspace=" + (workspace==null? "" : System.Uri.EscapeDataString(workspace));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetSyncJobResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all component types in a workspace.
		/// ListComponentTypes workspaces/{workspaceId}/component-types-list
		/// </summary>
		/// <param name="workspaceId">The ID of the workspace.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListComponentTypesResponse> ListComponentTypesAsync(string workspaceId, string maxResults, string nextToken, ListComponentTypesPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "workspaces/"+ (workspaceId==null? "" : System.Uri.EscapeDataString(workspaceId))+"/component-types-list&maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListComponentTypesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists all entities in a workspace.
		/// ListEntities workspaces/{workspaceId}/entities-list
		/// </summary>
		/// <param name="workspaceId">The ID of the workspace.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListEntitiesResponse> ListEntitiesAsync(string workspaceId, string maxResults, string nextToken, ListEntitiesPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "workspaces/"+ (workspaceId==null? "" : System.Uri.EscapeDataString(workspaceId))+"/entities-list&maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListEntitiesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists all scenes in a workspace.
		/// ListScenes workspaces/{workspaceId}/scenes-list
		/// </summary>
		/// <param name="workspaceId">The ID of the workspace that contains the scenes.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListScenesResponse> ListScenesAsync(string workspaceId, string maxResults, string nextToken, ListScenesPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "workspaces/"+ (workspaceId==null? "" : System.Uri.EscapeDataString(workspaceId))+"/scenes-list&maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListScenesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List all SyncJobs.
		/// ListSyncJobs workspaces/{workspaceId}/sync-jobs-list
		/// </summary>
		/// <param name="workspaceId">The ID of the workspace that contains the sync job.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListSyncJobsResponse> ListSyncJobsAsync(string workspaceId, string maxResults, string nextToken, ListSyncJobsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "workspaces/"+ (workspaceId==null? "" : System.Uri.EscapeDataString(workspaceId))+"/sync-jobs-list&maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListSyncJobsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the sync resources.
		/// ListSyncResources workspaces/{workspaceId}/sync-jobs/{syncSource}/resources-list
		/// </summary>
		/// <param name="workspaceId">The ID of the workspace that contains the sync job.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <param name="syncSource"><p>The sync source.</p> <note> <p>Currently the only supported syncSource is <code>SITEWISE </code>.</p> </note></param>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListSyncResourcesResponse> ListSyncResourcesAsync(string workspaceId, string syncSource, string maxResults, string nextToken, ListSyncResourcesPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "workspaces/"+ (workspaceId==null? "" : System.Uri.EscapeDataString(workspaceId))+"/sync-jobs/"+ (syncSource==null? "" : System.Uri.EscapeDataString(syncSource))+"/resources-list&maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListSyncResourcesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists all tags associated with a resource.
		/// ListTagsForResource tags-list
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ListTagsForResourceResponse> ListTagsForResourceAsync(ListTagsForResourcePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags-list";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListTagsForResourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves information about workspaces in the current account.
		/// ListWorkspaces workspaces-list
		/// </summary>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListWorkspacesResponse> ListWorkspacesAsync(string maxResults, string nextToken, ListWorkspacesPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "workspaces-list?maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListWorkspacesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Adds tags to a resource.
		/// TagResource tags
		/// </summary>
		/// <returns>Success</returns>
		public async Task<TagResourceResponse> TagResourceAsync(TagResourcePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TagResourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Removes tags from a resource.
		/// UntagResource tags#resourceARN&tagKeys
		/// </summary>
		/// <param name="resourceARN">The ARN of the resource.
		/// Min length: 20
		/// Max length: 2048
		// </param>
		/// <param name="tagKeys">A list of tag key names to remove from the resource. You don't specify the value. Both the key and its associated value are removed.
		/// Minimum items: 0
		/// Maximum items: 50
		// </param>
		/// <returns>Success</returns>
		public async Task<UntagResourceResponse> UntagResourceAsync(string resourceARN, string[] tagKeys, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags#resourceARN&tagKeys?resourceARN=" + (resourceARN==null? "" : System.Uri.EscapeDataString(resourceARN))+"&"+string.Join("&", tagKeys.Select(z => $"tagKeys={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UntagResourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public class BatchPutPropertyValuesPostBody
	{
		
		/// <summary>
		/// An object that maps strings to the property value entries to set. Each string in the mapping must be unique to this object.
		/// Required
		/// Minimum items: 1
		/// Maximum items: 10
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="entries")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public PropertyValueEntry[] Entries { get; set; }
	}
	
	public class CreateComponentTypePostBody
	{
		
		/// <summary>
		/// A Boolean value that specifies whether an entity can have more than one component of this type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isSingleton")]
		public System.Nullable<System.Boolean> IsSingleton { get; set; }
		
		/// <summary>
		/// The description of the component type.
		/// Min length: 0
		/// Max length: 2048
		/// Pattern: .*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@".*")]
		public string Description { get; set; }
		
		/// <summary>
		/// An object that maps strings to the property definitions in the component type. Each string in the mapping must be unique to this object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="propertyDefinitions")]
		public System.Collections.Generic.Dictionary<string, PropertyDefinitionRequest> PropertyDefinitions { get; set; }
		
		/// <summary>
		/// Specifies the parent component type to extend.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="extendsFrom")]
		public string[] ExtendsFrom { get; set; }
		
		/// <summary>
		/// An object that maps strings to the functions in the component type. Each string in the mapping must be unique to this object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="functions")]
		public System.Collections.Generic.Dictionary<string, FunctionRequest> Functions { get; set; }
		
		/// <summary>
		/// Metadata that you can use to manage the component type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
		
		/// <summary>
		/// <p/>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="propertyGroups")]
		public System.Collections.Generic.Dictionary<string, PropertyGroupRequest> PropertyGroups { get; set; }
		
		/// <summary>
		/// A friendly name for the component type.
		/// Min length: 0
		/// Max length: 256
		/// Pattern: .*[^\u0000-\u001F\u007F]*.*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="componentTypeName")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@".*[^\u0000-\u001F\u007F]*.*")]
		public string ComponentTypeName { get; set; }
	}
	
	public class UpdateComponentTypePutBody
	{
		
		/// <summary>
		/// A Boolean value that specifies whether an entity can have more than one component of this type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isSingleton")]
		public System.Nullable<System.Boolean> IsSingleton { get; set; }
		
		/// <summary>
		/// The description of the component type.
		/// Min length: 0
		/// Max length: 2048
		/// Pattern: .*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@".*")]
		public string Description { get; set; }
		
		/// <summary>
		/// An object that maps strings to the property definitions in the component type. Each string in the mapping must be unique to this object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="propertyDefinitions")]
		public System.Collections.Generic.Dictionary<string, PropertyDefinitionRequest> PropertyDefinitions { get; set; }
		
		/// <summary>
		/// Specifies the component type that this component type extends.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="extendsFrom")]
		public string[] ExtendsFrom { get; set; }
		
		/// <summary>
		/// An object that maps strings to the functions in the component type. Each string in the mapping must be unique to this object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="functions")]
		public System.Collections.Generic.Dictionary<string, FunctionRequest> Functions { get; set; }
		
		/// <summary>
		/// The property groups.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="propertyGroups")]
		public System.Collections.Generic.Dictionary<string, PropertyGroupRequest> PropertyGroups { get; set; }
		
		/// <summary>
		/// The component type name.
		/// Min length: 0
		/// Max length: 256
		/// Pattern: .*[^\u0000-\u001F\u007F]*.*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="componentTypeName")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@".*[^\u0000-\u001F\u007F]*.*")]
		public string ComponentTypeName { get; set; }
	}
	
	public class CreateEntityPostBody
	{
		
		/// <summary>
		/// The ID of the entity.
		/// Min length: 1
		/// Max length: 128
		/// Pattern: [0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}|^[a-zA-Z0-9][a-zA-Z_\-0-9.:]*[a-zA-Z0-9]+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entityId")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}|^[a-zA-Z0-9][a-zA-Z_\-0-9.:]*[a-zA-Z0-9]+")]
		public string EntityId { get; set; }
		
		/// <summary>
		/// The name of the entity.
		/// Required
		/// Min length: 1
		/// Max length: 256
		/// Pattern: [^\u0000-\u001F\u007F]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="entityName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[^\u0000-\u001F\u007F]+")]
		public string EntityName { get; set; }
		
		/// <summary>
		/// The description of the entity.
		/// Min length: 0
		/// Max length: 2048
		/// Pattern: .*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@".*")]
		public string Description { get; set; }
		
		/// <summary>
		/// An object that maps strings to the components in the entity. Each string in the mapping must be unique to this object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="components")]
		public System.Collections.Generic.Dictionary<string, ComponentRequest> Components { get; set; }
		
		/// <summary>
		/// The ID of the entity's parent entity.
		/// Min length: 1
		/// Max length: 128
		/// Pattern: \$ROOT|^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}|^[a-zA-Z0-9][a-zA-Z_\-0-9.:]*[a-zA-Z0-9]+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parentEntityId")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"\$ROOT|^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}|^[a-zA-Z0-9][a-zA-Z_\-0-9.:]*[a-zA-Z0-9]+")]
		public string ParentEntityId { get; set; }
		
		/// <summary>
		/// Metadata that you can use to manage the entity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public class CreateScenePostBody
	{
		
		/// <summary>
		/// The ID of the scene.
		/// Required
		/// Min length: 1
		/// Max length: 128
		/// Pattern: [a-zA-Z_0-9][a-zA-Z_\-0-9]*[a-zA-Z0-9]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sceneId")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[a-zA-Z_0-9][a-zA-Z_\-0-9]*[a-zA-Z0-9]+")]
		public string SceneId { get; set; }
		
		/// <summary>
		/// The relative path that specifies the location of the content definition file.
		/// Required
		/// Min length: 0
		/// Max length: 256
		/// Pattern: [sS]3://[A-Za-z0-9._/-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="contentLocation")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[sS]3://[A-Za-z0-9._/-]+")]
		public string ContentLocation { get; set; }
		
		/// <summary>
		/// The description for this scene.
		/// Min length: 0
		/// Max length: 2048
		/// Pattern: .*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@".*")]
		public string Description { get; set; }
		
		/// <summary>
		/// A list of capabilities that the scene uses to render itself.
		/// Minimum items: 0
		/// Maximum items: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="capabilities")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string[] Capabilities { get; set; }
		
		/// <summary>
		/// Metadata that you can use to manage the scene.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
		
		/// <summary>
		/// The request metadata.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sceneMetadata")]
		public System.Collections.Generic.Dictionary<string, string> SceneMetadata { get; set; }
	}
	
	public class CreateSyncJobPostBody
	{
		
		/// <summary>
		/// The SyncJob IAM role. This IAM role is used by the SyncJob to read from the syncSource, and create, update, or delete the corresponding resources.
		/// Required
		/// Min length: 20
		/// Max length: 2048
		/// Pattern: arn:((aws)|(aws-cn)|(aws-us-gov)):iam::[0-9]{12}:role/.*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="syncRole")]
		[System.ComponentModel.DataAnnotations.MinLength(20)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"arn:((aws)|(aws-cn)|(aws-us-gov)):iam::[0-9]{12}:role/.*")]
		public string SyncRole { get; set; }
		
		/// <summary>
		/// The SyncJob tags.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public class CreateWorkspacePostBody
	{
		
		/// <summary>
		/// The description of the workspace.
		/// Min length: 0
		/// Max length: 2048
		/// Pattern: .*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@".*")]
		public string Description { get; set; }
		
		/// <summary>
		/// The ARN of the S3 bucket where resources associated with the workspace are stored.
		/// Required
		/// Min length: 0
		/// Max length: 1024
		/// Pattern: .*(^arn:((aws)|(aws-cn)|(aws-us-gov)):s3:::)([a-zA-Z0-9_-]+$).*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="s3Location")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@".*(^arn:((aws)|(aws-cn)|(aws-us-gov)):s3:::)([a-zA-Z0-9_-]+$).*")]
		public string S3Location { get; set; }
		
		/// <summary>
		/// The ARN of the execution role associated with the workspace.
		/// Required
		/// Min length: 20
		/// Max length: 2048
		/// Pattern: arn:((aws)|(aws-cn)|(aws-us-gov)):iam::[0-9]{12}:role/.*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="role")]
		[System.ComponentModel.DataAnnotations.MinLength(20)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"arn:((aws)|(aws-cn)|(aws-us-gov)):iam::[0-9]{12}:role/.*")]
		public string Role { get; set; }
		
		/// <summary>
		/// Metadata that you can use to manage the workspace
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public class UpdateWorkspacePutBody
	{
		
		/// <summary>
		/// The description of the workspace.
		/// Min length: 0
		/// Max length: 2048
		/// Pattern: .*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@".*")]
		public string Description { get; set; }
		
		/// <summary>
		/// The ARN of the execution role associated with the workspace.
		/// Min length: 20
		/// Max length: 2048
		/// Pattern: arn:((aws)|(aws-cn)|(aws-us-gov)):iam::[0-9]{12}:role/.*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="role")]
		[System.ComponentModel.DataAnnotations.MinLength(20)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"arn:((aws)|(aws-cn)|(aws-us-gov)):iam::[0-9]{12}:role/.*")]
		public string Role { get; set; }
	}
	
	public class UpdateEntityPutBody
	{
		
		/// <summary>
		/// The name of the entity.
		/// Min length: 1
		/// Max length: 256
		/// Pattern: [^\u0000-\u001F\u007F]+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entityName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[^\u0000-\u001F\u007F]+")]
		public string EntityName { get; set; }
		
		/// <summary>
		/// The description of the entity.
		/// Min length: 0
		/// Max length: 2048
		/// Pattern: .*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@".*")]
		public string Description { get; set; }
		
		/// <summary>
		/// An object that maps strings to the component updates in the request. Each string in the mapping must be unique to this object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="componentUpdates")]
		public System.Collections.Generic.Dictionary<string, ComponentUpdateRequest> ComponentUpdates { get; set; }
		
		/// <summary>
		/// The parent entity update request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parentEntityUpdate")]
		public UpdateEntityPutBodyParentEntityUpdate ParentEntityUpdate { get; set; }
	}
	
	public class UpdateEntityPutBodyParentEntityUpdate
	{
		
		[System.Runtime.Serialization.DataMember(Name="updateType")]
		public ParentEntityUpdateType UpdateType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parentEntityId")]
		public string ParentEntityId { get; set; }
	}
	
	public class UpdateScenePutBody
	{
		
		/// <summary>
		/// The relative path that specifies the location of the content definition file.
		/// Min length: 0
		/// Max length: 256
		/// Pattern: [sS]3://[A-Za-z0-9._/-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentLocation")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[sS]3://[A-Za-z0-9._/-]+")]
		public string ContentLocation { get; set; }
		
		/// <summary>
		/// The description of this scene.
		/// Min length: 0
		/// Max length: 2048
		/// Pattern: .*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@".*")]
		public string Description { get; set; }
		
		/// <summary>
		/// A list of capabilities that the scene uses to render.
		/// Minimum items: 0
		/// Maximum items: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="capabilities")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string[] Capabilities { get; set; }
		
		/// <summary>
		/// The scene metadata.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sceneMetadata")]
		public System.Collections.Generic.Dictionary<string, string> SceneMetadata { get; set; }
	}
	
	public class ExecuteQueryPostBody
	{
		
		/// <summary>
		/// The ID of the workspace.
		/// Required
		/// Min length: 1
		/// Max length: 128
		/// Pattern: [a-zA-Z_0-9][a-zA-Z_\-0-9]*[a-zA-Z0-9]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="workspaceId")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[a-zA-Z_0-9][a-zA-Z_\-0-9]*[a-zA-Z0-9]+")]
		public string WorkspaceId { get; set; }
		
		/// <summary>
		/// The query statement.
		/// Required
		/// Min length: 1
		/// Max length: 1000
		/// Pattern: [\s\S]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="queryStatement")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\s\S]+")]
		public string QueryStatement { get; set; }
		
		/// <summary>
		/// <p>The maximum number of results to return at one time. The default is 25.</p> <p>Valid Range: Minimum value of 1. Maximum value of 250.</p>
		/// Minimum: 1
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		[System.ComponentModel.DataAnnotations.Range(1, 100)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// The string that specifies the next page of results.
		/// Min length: 0
		/// Max length: 17880
		/// Pattern: .*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(17880)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@".*")]
		public string NextToken { get; set; }
	}
	
	public class UpdatePricingPlanPostBody
	{
		
		/// <summary>
		/// The pricing mode.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pricingMode")]
		public PricingMode PricingMode { get; set; }
		
		/// <summary>
		/// The bundle names.
		/// Minimum items: 1
		/// Maximum items: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bundleNames")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public string[] BundleNames { get; set; }
	}
	
	public class GetPropertyValuePostBody
	{
		
		/// <summary>
		/// The name of the component whose property values the operation returns.
		/// Min length: 1
		/// Max length: 256
		/// Pattern: [a-zA-Z_\-0-9]+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="componentName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[a-zA-Z_\-0-9]+")]
		public string ComponentName { get; set; }
		
		/// <summary>
		/// The ID of the component type whose property values the operation returns.
		/// Min length: 1
		/// Max length: 256
		/// Pattern: [a-zA-Z_\.\-0-9:]+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="componentTypeId")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[a-zA-Z_\.\-0-9:]+")]
		public string ComponentTypeId { get; set; }
		
		/// <summary>
		/// The ID of the entity whose property values the operation returns.
		/// Min length: 1
		/// Max length: 128
		/// Pattern: [0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}|^[a-zA-Z0-9][a-zA-Z_\-0-9.:]*[a-zA-Z0-9]+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entityId")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}|^[a-zA-Z0-9][a-zA-Z_\-0-9.:]*[a-zA-Z0-9]+")]
		public string EntityId { get; set; }
		
		/// <summary>
		/// The properties whose values the operation returns.
		/// Required
		/// Minimum items: 1
		/// Maximum items: 10
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="selectedProperties")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public string[] SelectedProperties { get; set; }
		
		/// <summary>
		/// <p>The maximum number of results to return at one time. The default is 25.</p> <p>Valid Range: Minimum value of 1. Maximum value of 250.</p>
		/// Minimum: 0
		/// Maximum: 200
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		[System.ComponentModel.DataAnnotations.Range(0, 200)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// The string that specifies the next page of results.
		/// Min length: 0
		/// Max length: 17880
		/// Pattern: .*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(17880)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@".*")]
		public string NextToken { get; set; }
		
		/// <summary>
		/// The property group name.
		/// Min length: 1
		/// Max length: 256
		/// Pattern: [a-zA-Z_\-0-9]+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="propertyGroupName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[a-zA-Z_\-0-9]+")]
		public string PropertyGroupName { get; set; }
		
		/// <summary>
		/// The tabular conditions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tabularConditions")]
		public GetPropertyValuePostBodyTabularConditions TabularConditions { get; set; }
	}
	
	public class GetPropertyValuePostBodyTabularConditions
	{
		
		[System.Runtime.Serialization.DataMember(Name="orderBy")]
		public OrderBy[] OrderBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="propertyFilters")]
		public PropertyFilter[] PropertyFilters { get; set; }
	}
	
	public class GetPropertyValueHistoryPostBody
	{
		
		/// <summary>
		/// The ID of the entity.
		/// Min length: 1
		/// Max length: 128
		/// Pattern: [0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}|^[a-zA-Z0-9][a-zA-Z_\-0-9.:]*[a-zA-Z0-9]+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entityId")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}|^[a-zA-Z0-9][a-zA-Z_\-0-9.:]*[a-zA-Z0-9]+")]
		public string EntityId { get; set; }
		
		/// <summary>
		/// The name of the component.
		/// Min length: 1
		/// Max length: 256
		/// Pattern: [a-zA-Z_\-0-9]+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="componentName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[a-zA-Z_\-0-9]+")]
		public string ComponentName { get; set; }
		
		/// <summary>
		/// The ID of the component type.
		/// Min length: 1
		/// Max length: 256
		/// Pattern: [a-zA-Z_\.\-0-9:]+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="componentTypeId")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[a-zA-Z_\.\-0-9:]+")]
		public string ComponentTypeId { get; set; }
		
		/// <summary>
		/// A list of properties whose value histories the request retrieves.
		/// Required
		/// Minimum items: 1
		/// Maximum items: 10
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="selectedProperties")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public string[] SelectedProperties { get; set; }
		
		/// <summary>
		/// A list of objects that filter the property value history request.
		/// Minimum items: 1
		/// Maximum items: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="propertyFilters")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public PropertyFilter[] PropertyFilters { get; set; }
		
		/// <summary>
		/// supports epoch seconds value
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startDateTime")]
		public System.Nullable<System.DateTimeOffset> StartDateTime { get; set; }
		
		/// <summary>
		/// supports epoch seconds value
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endDateTime")]
		public System.Nullable<System.DateTimeOffset> EndDateTime { get; set; }
		
		/// <summary>
		/// An object that specifies how to interpolate data in a list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="interpolation")]
		public GetPropertyValueHistoryPostBodyInterpolation Interpolation { get; set; }
		
		/// <summary>
		/// The string that specifies the next page of results.
		/// Min length: 0
		/// Max length: 17880
		/// Pattern: .*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(17880)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@".*")]
		public string NextToken { get; set; }
		
		/// <summary>
		/// <p>The maximum number of results to return at one time. The default is 25.</p> <p>Valid Range: Minimum value of 1. Maximum value of 250.</p>
		/// Minimum: 0
		/// Maximum: 200
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		[System.ComponentModel.DataAnnotations.Range(0, 200)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// The time direction to use in the result order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orderByTime")]
		public Order OrderByTime { get; set; }
		
		/// <summary>
		/// Timestamp represented in ISO 8601 format
		/// Min length: 20
		/// Max length: 35
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		[System.ComponentModel.DataAnnotations.MinLength(20)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string StartTime { get; set; }
		
		/// <summary>
		/// Timestamp represented in ISO 8601 format
		/// Min length: 20
		/// Max length: 35
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		[System.ComponentModel.DataAnnotations.MinLength(20)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string EndTime { get; set; }
	}
	
	public class GetPropertyValueHistoryPostBodyInterpolation
	{
		
		[System.Runtime.Serialization.DataMember(Name="interpolationType")]
		public InterpolationType InterpolationType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="intervalInSeconds")]
		public System.Nullable<System.Int32> IntervalInSeconds { get; set; }
	}
	
	public class ListComponentTypesPostBody
	{
		
		/// <summary>
		/// A list of objects that filter the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public ListComponentTypesFilter[] Filters { get; set; }
		
		/// <summary>
		/// The string that specifies the next page of results.
		/// Min length: 0
		/// Max length: 17880
		/// Pattern: .*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(17880)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@".*")]
		public string NextToken { get; set; }
		
		/// <summary>
		/// <p>The maximum number of results to return at one time. The default is 25.</p> <p>Valid Range: Minimum value of 1. Maximum value of 250.</p>
		/// Minimum: 0
		/// Maximum: 200
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		[System.ComponentModel.DataAnnotations.Range(0, 200)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	public class ListEntitiesPostBody
	{
		
		/// <summary>
		/// <p>A list of objects that filter the request.</p> <note> <p>Only one object is accepted as a valid input.</p> </note>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public ListEntitiesFilter[] Filters { get; set; }
		
		/// <summary>
		/// <p>The maximum number of results to return at one time. The default is 25.</p> <p>Valid Range: Minimum value of 1. Maximum value of 250.</p>
		/// Minimum: 0
		/// Maximum: 200
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		[System.ComponentModel.DataAnnotations.Range(0, 200)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// The string that specifies the next page of results.
		/// Min length: 0
		/// Max length: 17880
		/// Pattern: .*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(17880)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@".*")]
		public string NextToken { get; set; }
	}
	
	public class ListScenesPostBody
	{
		
		/// <summary>
		/// Specifies the maximum number of results to display.
		/// Minimum: 0
		/// Maximum: 200
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		[System.ComponentModel.DataAnnotations.Range(0, 200)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// The string that specifies the next page of results.
		/// Min length: 0
		/// Max length: 17880
		/// Pattern: .*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(17880)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@".*")]
		public string NextToken { get; set; }
	}
	
	public class ListSyncJobsPostBody
	{
		
		/// <summary>
		/// <p>The maximum number of results to return at one time. The default is 50.</p> <p>Valid Range: Minimum value of 0. Maximum value of 200.</p>
		/// Minimum: 0
		/// Maximum: 200
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		[System.ComponentModel.DataAnnotations.Range(0, 200)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// The string that specifies the next page of results.
		/// Min length: 0
		/// Max length: 17880
		/// Pattern: .*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(17880)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@".*")]
		public string NextToken { get; set; }
	}
	
	public class ListSyncResourcesPostBody
	{
		
		/// <summary>
		/// <p>A list of objects that filter the request.</p> <p>The following filter combinations are supported:</p> <ul> <li> <p>Filter with state</p> </li> <li> <p>Filter with ResourceType and ResourceId</p> </li> <li> <p>Filter with ResourceType and ExternalId</p> </li> </ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public SyncResourceFilter[] Filters { get; set; }
		
		/// <summary>
		/// <p>The maximum number of results to return at one time. The default is 50.</p> <p>Valid Range: Minimum value of 0. Maximum value of 200.</p>
		/// Minimum: 0
		/// Maximum: 200
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		[System.ComponentModel.DataAnnotations.Range(0, 200)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// The string that specifies the next page of results.
		/// Min length: 0
		/// Max length: 17880
		/// Pattern: .*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(17880)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@".*")]
		public string NextToken { get; set; }
	}
	
	public class ListTagsForResourcePostBody
	{
		
		/// <summary>
		/// The ARN of the resource.
		/// Required
		/// Min length: 20
		/// Max length: 2048
		/// Pattern: arn:((aws)|(aws-cn)|(aws-us-gov)):iottwinmaker:[a-z0-9-]+:[0-9]{12}:[\/a-zA-Z0-9_\-\.:]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceARN")]
		[System.ComponentModel.DataAnnotations.MinLength(20)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"arn:((aws)|(aws-cn)|(aws-us-gov)):iottwinmaker:[a-z0-9-]+:[0-9]{12}:[\/a-zA-Z0-9_\-\.:]+")]
		public string ResourceARN { get; set; }
		
		/// <summary>
		/// <p>The maximum number of results to return at one time. The default is 25.</p> <p>Valid Range: Minimum value of 1. Maximum value of 250.</p>
		/// Minimum: 0
		/// Maximum: 200
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		[System.ComponentModel.DataAnnotations.Range(0, 200)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// The string that specifies the next page of results.
		/// Min length: 0
		/// Max length: 17880
		/// Pattern: .*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(17880)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@".*")]
		public string NextToken { get; set; }
	}
	
	public class ListWorkspacesPostBody
	{
		
		/// <summary>
		/// <p>The maximum number of results to return at one time. The default is 25.</p> <p>Valid Range: Minimum value of 1. Maximum value of 250.</p>
		/// Minimum: 0
		/// Maximum: 200
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		[System.ComponentModel.DataAnnotations.Range(0, 200)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// The string that specifies the next page of results.
		/// Min length: 0
		/// Max length: 17880
		/// Pattern: .*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(17880)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@".*")]
		public string NextToken { get; set; }
	}
	
	public class TagResourcePostBody
	{
		
		/// <summary>
		/// The ARN of the resource.
		/// Required
		/// Min length: 20
		/// Max length: 2048
		/// Pattern: arn:((aws)|(aws-cn)|(aws-us-gov)):iottwinmaker:[a-z0-9-]+:[0-9]{12}:[\/a-zA-Z0-9_\-\.:]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceARN")]
		[System.ComponentModel.DataAnnotations.MinLength(20)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"arn:((aws)|(aws-cn)|(aws-us-gov)):iottwinmaker:[a-z0-9-]+:[0-9]{12}:[\/a-zA-Z0-9_\-\.:]+")]
		public string ResourceARN { get; set; }
		
		/// <summary>
		/// Metadata to add to this resource.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
