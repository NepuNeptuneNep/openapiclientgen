//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreatePipeResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PipeState CurrentState { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RequestedPipeState DesiredState { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PipeState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUNNING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STOPPED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STARTING = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STOPPING = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_FAILED = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_FAILED = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		START_FAILED = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STOP_FAILED = 10,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum RequestedPipeState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUNNING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STOPPED = 1,
	}
	
	/// <summary>
	/// These are custom parameter to be used when the target is an API Gateway REST APIs or EventBridge ApiDestinations. In the latter case, these are merged with any InvocationParameters specified on the Connection, with any values from the Connection taking precedence.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PipeEnrichmentHttpParameters
	{
		
		[System.Runtime.Serialization.DataMember()]
		public HeaderParametersMap HeaderParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] PathParameterValues { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public QueryStringParametersMap QueryStringParameters { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class HeaderParametersMap
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class QueryStringParametersMap
	{
	}
	
	/// <summary>
	/// The parameters for using an Active MQ broker as a source.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PipeSourceActiveMQBrokerParameters
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> BatchSize { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MQBrokerAccessCredentials Credentials { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaximumBatchingWindowInSeconds { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string QueueName { get; set; }
	}
	
	/// <summary>
	/// The Secrets Manager secret that stores your broker credentials.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MQBrokerAccessCredentials
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string BasicAuth { get; set; }
	}
	
	/// <summary>
	/// The parameters for using a DynamoDB stream as a source.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PipeSourceDynamoDBStreamParameters
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> BatchSize { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DeadLetterConfig DeadLetterConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaximumBatchingWindowInSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaximumRecordAgeInSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaximumRetryAttempts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OnPartialBatchItemFailureStreams OnPartialBatchItemFailure { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ParallelizationFactor { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DynamoDBStreamStartPosition StartingPosition { get; set; }
	}
	
	/// <summary>
	/// A <code>DeadLetterConfig</code> object that contains information about a dead-letter queue configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeadLetterConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OnPartialBatchItemFailureStreams
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTOMATIC_BISECT = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DynamoDBStreamStartPosition
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TRIM_HORIZON = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LATEST = 1,
	}
	
	/// <summary>
	/// The collection of event patterns used to filter events. For more information, see <a href="https://docs.aws.amazon.com/eventbridge/latest/userguide/eventbridge-and-event-patterns.html">Events and Event Patterns</a> in the <i>Amazon EventBridge User Guide</i>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FilterCriteria
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
	}
	
	/// <summary>
	/// Filter events using an event pattern. For more information, see <a href="https://docs.aws.amazon.com/eventbridge/latest/userguide/eventbridge-and-event-patterns.html">Events and Event Patterns</a> in the <i>Amazon EventBridge User Guide</i>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Filter
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Pattern { get; set; }
	}
	
	/// <summary>
	/// The parameters for using a Kinesis stream as a source.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PipeSourceKinesisStreamParameters
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> BatchSize { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DeadLetterConfig DeadLetterConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaximumBatchingWindowInSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaximumRecordAgeInSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaximumRetryAttempts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OnPartialBatchItemFailureStreams OnPartialBatchItemFailure { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ParallelizationFactor { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public KinesisStreamStartPosition StartingPosition { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset StartingPositionTimestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum KinesisStreamStartPosition
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TRIM_HORIZON = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LATEST = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AT_TIMESTAMP = 2,
	}
	
	/// <summary>
	/// The parameters for using an MSK stream as a source.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PipeSourceManagedStreamingKafkaParameters
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> BatchSize { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ConsumerGroupID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MSKAccessCredentials Credentials { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaximumBatchingWindowInSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DynamoDBStreamStartPosition StartingPosition { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TopicName { get; set; }
	}
	
	/// <summary>
	/// The Secrets Manager secret that stores your stream credentials.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MSKAccessCredentials
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientCertificateTlsAuth { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SaslScram512Auth { get; set; }
	}
	
	/// <summary>
	/// The parameters for using a Rabbit MQ broker as a source.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PipeSourceRabbitMQBrokerParameters
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> BatchSize { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MQBrokerAccessCredentials Credentials { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaximumBatchingWindowInSeconds { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string QueueName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VirtualHost { get; set; }
	}
	
	/// <summary>
	/// The parameters for using a self-managed Apache Kafka stream as a source.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PipeSourceSelfManagedKafkaParameters
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] AdditionalBootstrapServers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> BatchSize { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ConsumerGroupID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SelfManagedKafkaAccessConfigurationCredentials Credentials { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaximumBatchingWindowInSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ServerRootCaCertificate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DynamoDBStreamStartPosition StartingPosition { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TopicName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SelfManagedKafkaAccessConfigurationVpc Vpc { get; set; }
	}
	
	/// <summary>
	/// The Secrets Manager secret that stores your stream credentials.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SelfManagedKafkaAccessConfigurationCredentials
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string BasicAuth { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientCertificateTlsAuth { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SaslScram256Auth { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SaslScram512Auth { get; set; }
	}
	
	/// <summary>
	/// This structure specifies the VPC subnets and security groups for the stream, and whether a public IP address is to be used.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SelfManagedKafkaAccessConfigurationVpc
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] SecurityGroup { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Subnets { get; set; }
	}
	
	/// <summary>
	/// The parameters for using a Amazon SQS stream as a source.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PipeSourceSqsQueueParameters
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> BatchSize { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaximumBatchingWindowInSeconds { get; set; }
	}
	
	/// <summary>
	/// The parameters for using an Batch job as a target.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PipeTargetBatchJobParameters
	{
		
		[System.Runtime.Serialization.DataMember()]
		public BatchArrayProperties ArrayProperties { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BatchContainerOverrides ContainerOverrides { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BatchJobDependency[] DependsOn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string JobDefinition { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string JobName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BatchParametersMap Parameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BatchRetryStrategy RetryStrategy { get; set; }
	}
	
	/// <summary>
	/// The array properties for the submitted job, such as the size of the array. The array size can be between 2 and 10,000. If you specify array properties for a job, it becomes an array job. This parameter is used only if the target is an Batch job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchArrayProperties
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Size { get; set; }
	}
	
	/// <summary>
	/// The overrides that are sent to a container.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchContainerOverrides
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Command { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BatchEnvironmentVariable[] Environment { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InstanceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BatchResourceRequirement[] ResourceRequirements { get; set; }
	}
	
	/// <summary>
	/// <p>The environment variables to send to the container. You can add new environment variables, which are added to the container at launch, or you can override the existing environment variables from the Docker image or the task definition.</p> <note> <p>Environment variables cannot start with "<code>Batch</code>". This naming convention is reserved for variables that Batch sets.</p> </note>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchEnvironmentVariable
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// The type and amount of a resource to assign to a container. The supported resources include <code>GPU</code>, <code>MEMORY</code>, and <code>VCPU</code>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchResourceRequirement
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public BatchResourceRequirementType Type { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BatchResourceRequirementType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GPU = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEMORY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VCPU = 2,
	}
	
	/// <summary>
	/// An object that represents an Batch job dependency.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchJobDependency
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string JobId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BatchJobDependencyType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BatchJobDependencyType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		N_TO_N = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SEQUENTIAL = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchParametersMap
	{
	}
	
	/// <summary>
	/// The retry strategy that's associated with a job. For more information, see <a href="https://docs.aws.amazon.com/batch/latest/userguide/job_retries.html"> Automated job retries</a> in the <i>Batch User Guide</i>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchRetryStrategy
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Attempts { get; set; }
	}
	
	/// <summary>
	/// The parameters for using an CloudWatch Logs log stream as a target.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PipeTargetCloudWatchLogsParameters
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string LogStreamName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Timestamp { get; set; }
	}
	
	/// <summary>
	/// The parameters for using an Amazon ECS task as a target.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PipeTargetEcsTaskParameters
	{
		
		[System.Runtime.Serialization.DataMember()]
		public CapacityProviderStrategyItem[] CapacityProviderStrategy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EnableECSManagedTags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EnableExecuteCommand { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Group { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LaunchType LaunchType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NetworkConfiguration NetworkConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EcsTaskOverride Overrides { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PlacementConstraint[] PlacementConstraints { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PlacementStrategy[] PlacementStrategy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PlatformVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PropagateTags PropagateTags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ReferenceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TaskCount { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TaskDefinitionArn { get; set; }
	}
	
	/// <summary>
	/// The details of a capacity provider strategy. To learn more, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_CapacityProviderStrategyItem.html">CapacityProviderStrategyItem</a> in the Amazon ECS API Reference.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CapacityProviderStrategyItem
	{
		
		[System.Runtime.Serialization.DataMember(Name="base")]
		public System.Nullable<System.Int32> Base { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="capacityProvider")]
		public string CapacityProvider { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="weight")]
		public System.Nullable<System.Int32> Weight { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum LaunchType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EC2 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FARGATE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXTERNAL = 2,
	}
	
	/// <summary>
	/// This structure specifies the network configuration for an Amazon ECS task.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NetworkConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="awsvpcConfiguration")]
		public AwsVpcConfiguration AwsvpcConfiguration { get; set; }
	}
	
	/// <summary>
	/// This structure specifies the VPC subnets and security groups for the task, and whether a public IP address is to be used. This structure is relevant only for ECS tasks that use the <code>awsvpc</code> network mode.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AwsVpcConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AssignPublicIp AssignPublicIp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] SecurityGroups { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] Subnets { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AssignPublicIp
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 1,
	}
	
	/// <summary>
	/// The overrides that are associated with a task.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EcsTaskOverride
	{
		
		[System.Runtime.Serialization.DataMember()]
		public EcsContainerOverride[] ContainerOverrides { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Cpu { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EcsEphemeralStorage EphemeralStorage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ExecutionRoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EcsInferenceAcceleratorOverride[] InferenceAcceleratorOverrides { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Memory { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TaskRoleArn { get; set; }
	}
	
	/// <summary>
	/// The overrides that are sent to a container. An empty container override can be passed in. An example of an empty container override is <code>{"containerOverrides": [ ] }</code>. If a non-empty container override is specified, the <code>name</code> parameter must be included.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EcsContainerOverride
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Command { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Cpu { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EcsEnvironmentVariable[] Environment { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EcsEnvironmentFile[] EnvironmentFiles { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Memory { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MemoryReservation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EcsResourceRequirement[] ResourceRequirements { get; set; }
	}
	
	/// <summary>
	/// The environment variables to send to the container. You can add new environment variables, which are added to the container at launch, or you can override the existing environment variables from the Docker image or the task definition. You must also specify a container name.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EcsEnvironmentVariable
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// <p>A list of files containing the environment variables to pass to a container. You can specify up to ten environment files. The file must have a <code>.env</code> file extension. Each line in an environment file should contain an environment variable in <code>VARIABLE=VALUE</code> format. Lines beginning with <code>#</code> are treated as comments and are ignored. For more information about the environment variable file syntax, see <a href="https://docs.docker.com/compose/env-file/">Declare default environment variables in file</a>.</p> <p>If there are environment variables specified using the <code>environment</code> parameter in a container definition, they take precedence over the variables contained within an environment file. If multiple environment files are specified that contain the same variable, they're processed from the top down. We recommend that you use unique variable names. For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/taskdef-envfiles.html">Specifying environment variables</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.</p> <p>This parameter is only supported for tasks hosted on Fargate using the following platform versions:</p> <ul> <li> <p>Linux platform version <code>1.4.0</code> or later.</p> </li> <li> <p>Windows platform version <code>1.0.0</code> or later.</p> </li> </ul>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EcsEnvironmentFile
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public EcsEnvironmentFileType Type { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum EcsEnvironmentFileType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		s3 = 0,
	}
	
	/// <summary>
	/// The type and amount of a resource to assign to a container. The supported resource types are GPUs and Elastic Inference accelerators. For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-gpu.html">Working with GPUs on Amazon ECS</a> or <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-inference.html">Working with Amazon Elastic Inference on Amazon ECS</a> in the <i>Amazon Elastic Container Service Developer Guide</i> 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EcsResourceRequirement
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public EcsResourceRequirementType Type { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum EcsResourceRequirementType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GPU = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InferenceAccelerator = 1,
	}
	
	/// <summary>
	/// <p>The amount of ephemeral storage to allocate for the task. This parameter is used to expand the total amount of ephemeral storage available, beyond the default amount, for tasks hosted on Fargate. For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/userguide/using_data_volumes.html">Fargate task storage</a> in the <i>Amazon ECS User Guide for Fargate</i>.</p> <note> <p>This parameter is only supported for tasks hosted on Fargate using Linux platform version <code>1.4.0</code> or later. This parameter is not supported for Windows containers on Fargate.</p> </note>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EcsEphemeralStorage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sizeInGiB")]
		public int SizeInGiB { get; set; }
	}
	
	/// <summary>
	/// Details on an Elastic Inference accelerator task override. This parameter is used to override the Elastic Inference accelerator specified in the task definition. For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/userguide/ecs-inference.html">Working with Amazon Elastic Inference on Amazon ECS</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EcsInferenceAcceleratorOverride
	{
		
		[System.Runtime.Serialization.DataMember(Name="deviceName")]
		public string DeviceName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deviceType")]
		public string DeviceType { get; set; }
	}
	
	/// <summary>
	/// An object representing a constraint on task placement. To learn more, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html">Task Placement Constraints</a> in the Amazon Elastic Container Service Developer Guide.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PlacementConstraint
	{
		
		[System.Runtime.Serialization.DataMember(Name="expression")]
		public string Expression { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public PlacementConstraintType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PlacementConstraintType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		distinctInstance = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		memberOf = 1,
	}
	
	/// <summary>
	/// The task placement strategy for a task or service. To learn more, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-strategies.html">Task Placement Strategies</a> in the Amazon Elastic Container Service Service Developer Guide.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PlacementStrategy
	{
		
		[System.Runtime.Serialization.DataMember(Name="field")]
		public string Field { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public PlacementStrategyType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PlacementStrategyType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		random = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		spread = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		binpack = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PropagateTags
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TASK_DEFINITION = 0,
	}
	
	/// <summary>
	/// A key-value pair associated with an Amazon Web Services resource. In EventBridge, rules and event buses support tagging.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Tag
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Key { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// The parameters for using an EventBridge event bus as a target.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PipeTargetEventBridgeEventBusParameters
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DetailType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EndpointId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Resources { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Source { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Time { get; set; }
	}
	
	/// <summary>
	/// These are custom parameter to be used when the target is an API Gateway REST APIs or EventBridge ApiDestinations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PipeTargetHttpParameters
	{
		
		[System.Runtime.Serialization.DataMember()]
		public HeaderParametersMap HeaderParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] PathParameterValues { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public QueryStringParametersMap QueryStringParameters { get; set; }
	}
	
	/// <summary>
	/// The parameters for using a Kinesis stream as a source.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PipeTargetKinesisStreamParameters
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PartitionKey { get; set; }
	}
	
	/// <summary>
	/// The parameters for using a Lambda function as a target.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PipeTargetLambdaFunctionParameters
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PipeTargetInvocationType InvocationType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PipeTargetInvocationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REQUEST_RESPONSE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FIRE_AND_FORGET = 1,
	}
	
	/// <summary>
	/// These are custom parameters to be used when the target is a Amazon Redshift cluster to invoke the Amazon Redshift Data API ExecuteStatement.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PipeTargetRedshiftDataParameters
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Database { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DbUser { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SecretManagerArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] Sqls { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StatementName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> WithEvent { get; set; }
	}
	
	/// <summary>
	/// The parameters for using a SageMaker pipeline as a target.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PipeTargetSageMakerPipelineParameters
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SageMakerPipelineParameter[] PipelineParameterList { get; set; }
	}
	
	/// <summary>
	/// Name/Value pair of a parameter to start execution of a SageMaker Model Building Pipeline.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SageMakerPipelineParameter
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// The parameters for using a Amazon SQS stream as a source.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PipeTargetSqsQueueParameters
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string MessageDeduplicationId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MessageGroupId { get; set; }
	}
	
	/// <summary>
	/// The parameters for using a Step Functions state machine as a target.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PipeTargetStateMachineParameters
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PipeTargetInvocationType InvocationType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InternalException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ValidationException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ThrottlingException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NotFoundException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConflictException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ServiceQuotaExceededException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeletePipeResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PipeState CurrentState { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RequestedPipeStateDescribeResponse DesiredState { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum RequestedPipeStateDescribeResponse
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUNNING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STOPPED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETED = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribePipeResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PipeState CurrentState { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RequestedPipeStateDescribeResponse DesiredState { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Enrichment { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PipeEnrichmentParameters EnrichmentParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Source { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PipeSourceParameters SourceParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StateReason { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagMap Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Target { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PipeTargetParameters TargetParameters { get; set; }
	}
	
	/// <summary>
	/// The parameters required to set up enrichment on your pipe.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PipeEnrichmentParameters
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PipeEnrichmentHttpParameters HttpParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InputTemplate { get; set; }
	}
	
	/// <summary>
	/// The parameters required to set up a source for your pipe.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PipeSourceParameters
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PipeSourceActiveMQBrokerParameters ActiveMQBrokerParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PipeSourceDynamoDBStreamParameters DynamoDBStreamParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FilterCriteria FilterCriteria { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PipeSourceKinesisStreamParameters KinesisStreamParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PipeSourceManagedStreamingKafkaParameters ManagedStreamingKafkaParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PipeSourceRabbitMQBrokerParameters RabbitMQBrokerParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PipeSourceSelfManagedKafkaParameters SelfManagedKafkaParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PipeSourceSqsQueueParameters SqsQueueParameters { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TagMap
	{
	}
	
	/// <summary>
	/// The parameters required to set up a target for your pipe.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PipeTargetParameters
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PipeTargetBatchJobParameters BatchJobParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PipeTargetCloudWatchLogsParameters CloudWatchLogsParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PipeTargetEcsTaskParameters EcsTaskParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PipeTargetEventBridgeEventBusParameters EventBridgeEventBusParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PipeTargetHttpParameters HttpParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InputTemplate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PipeTargetKinesisStreamParameters KinesisStreamParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PipeTargetLambdaFunctionParameters LambdaFunctionParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PipeTargetRedshiftDataParameters RedshiftDataParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PipeTargetSageMakerPipelineParameters SageMakerPipelineParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PipeTargetSqsQueueParameters SqsQueueParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PipeTargetStateMachineParameters StepFunctionStateMachineParameters { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListPipesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Pipe[] Pipes { get; set; }
	}
	
	/// <summary>
	/// An object that represents a pipe. Amazon EventBridgePipes connect event sources to targets and reduces the need for specialized knowledge and integration code.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Pipe
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PipeState CurrentState { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RequestedPipeState DesiredState { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Enrichment { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Source { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StateReason { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Target { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTagsForResourceResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartPipeResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PipeState CurrentState { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RequestedPipeState DesiredState { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StopPipeResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PipeState CurrentState { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RequestedPipeState DesiredState { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TagResourceResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UntagResourceResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdatePipeResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PipeState CurrentState { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RequestedPipeState DesiredState { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// The parameters for using an Active MQ broker as a source.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdatePipeSourceActiveMQBrokerParameters
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> BatchSize { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MQBrokerAccessCredentials Credentials { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaximumBatchingWindowInSeconds { get; set; }
	}
	
	/// <summary>
	/// The parameters for using a DynamoDB stream as a source.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdatePipeSourceDynamoDBStreamParameters
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> BatchSize { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DeadLetterConfig DeadLetterConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaximumBatchingWindowInSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaximumRecordAgeInSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaximumRetryAttempts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OnPartialBatchItemFailureStreams OnPartialBatchItemFailure { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ParallelizationFactor { get; set; }
	}
	
	/// <summary>
	/// The parameters for using a Kinesis stream as a source.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdatePipeSourceKinesisStreamParameters
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> BatchSize { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DeadLetterConfig DeadLetterConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaximumBatchingWindowInSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaximumRecordAgeInSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaximumRetryAttempts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OnPartialBatchItemFailureStreams OnPartialBatchItemFailure { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ParallelizationFactor { get; set; }
	}
	
	/// <summary>
	/// The parameters for using an MSK stream as a source.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdatePipeSourceManagedStreamingKafkaParameters
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> BatchSize { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MSKAccessCredentials Credentials { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaximumBatchingWindowInSeconds { get; set; }
	}
	
	/// <summary>
	/// The parameters for using a Rabbit MQ broker as a source.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdatePipeSourceRabbitMQBrokerParameters
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> BatchSize { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MQBrokerAccessCredentials Credentials { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaximumBatchingWindowInSeconds { get; set; }
	}
	
	/// <summary>
	/// The parameters for using a self-managed Apache Kafka stream as a source.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdatePipeSourceSelfManagedKafkaParameters
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> BatchSize { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SelfManagedKafkaAccessConfigurationCredentials Credentials { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaximumBatchingWindowInSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ServerRootCaCertificate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SelfManagedKafkaAccessConfigurationVpc Vpc { get; set; }
	}
	
	/// <summary>
	/// The parameters for using a Amazon SQS stream as a source.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdatePipeSourceSqsQueueParameters
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> BatchSize { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaximumBatchingWindowInSeconds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreatePipeRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RequestedPipeState DesiredState { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Enrichment { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PipeEnrichmentParameters EnrichmentParameters { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Source { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PipeSourceParameters SourceParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagMap Tags { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Target { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PipeTargetParameters TargetParameters { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeletePipeRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribePipeRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListPipesRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTagsForResourceRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum MSKStartPosition
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TRIM_HORIZON = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LATEST = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SelfManagedKafkaStartPosition
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TRIM_HORIZON = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LATEST = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartPipeRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StopPipeRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TagResourceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UntagResourceRequest
	{
	}
	
	/// <summary>
	/// The parameters required to set up a source for your pipe.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdatePipeSourceParameters
	{
		
		[System.Runtime.Serialization.DataMember()]
		public UpdatePipeSourceActiveMQBrokerParameters ActiveMQBrokerParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UpdatePipeSourceDynamoDBStreamParameters DynamoDBStreamParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FilterCriteria FilterCriteria { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UpdatePipeSourceKinesisStreamParameters KinesisStreamParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UpdatePipeSourceManagedStreamingKafkaParameters ManagedStreamingKafkaParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UpdatePipeSourceRabbitMQBrokerParameters RabbitMQBrokerParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UpdatePipeSourceSelfManagedKafkaParameters SelfManagedKafkaParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UpdatePipeSourceSqsQueueParameters SqsQueueParameters { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdatePipeRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RequestedPipeState DesiredState { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Enrichment { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PipeEnrichmentParameters EnrichmentParameters { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UpdatePipeSourceParameters SourceParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Target { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PipeTargetParameters TargetParameters { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Create a pipe. Amazon EventBridge Pipes connect event sources to targets and reduces the need for specialized knowledge and integration code.
		/// CreatePipe v1/pipes/{Name}
		/// </summary>
		/// <param name="Name">The name of the pipe.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <returns>Success</returns>
		public async Task<CreatePipeResponse> CreatePipeAsync(string Name, CreatePipePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/pipes/"+ (Name==null? "" : System.Uri.EscapeDataString(Name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreatePipeResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete an existing pipe. For more information about pipes, see <a href="https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-pipes.html">Amazon EventBridge Pipes</a> in the Amazon EventBridge User Guide.
		/// DeletePipe v1/pipes/{Name}
		/// </summary>
		/// <param name="Name">The name of the pipe.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <returns>Success</returns>
		public async Task<DeletePipeResponse> DeletePipeAsync(string Name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/pipes/"+ (Name==null? "" : System.Uri.EscapeDataString(Name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeletePipeResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the information about an existing pipe. For more information about pipes, see <a href="https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-pipes.html">Amazon EventBridge Pipes</a> in the Amazon EventBridge User Guide.
		/// DescribePipe v1/pipes/{Name}
		/// </summary>
		/// <param name="Name">The name of the pipe.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <returns>Success</returns>
		public async Task<DescribePipeResponse> DescribePipeAsync(string Name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/pipes/"+ (Name==null? "" : System.Uri.EscapeDataString(Name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribePipeResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Update an existing pipe. When you call <code>UpdatePipe</code>, only the fields that are included in the request are changed, the rest are unchanged. The exception to this is if you modify any Amazon Web Services-service specific fields in the <code>SourceParameters</code>, <code>EnrichmentParameters</code>, or <code>TargetParameters</code> objects. The fields in these objects are updated atomically as one and override existing values. This is by design and means that if you don't specify an optional field in one of these Parameters objects, that field will be set to its system-default value after the update.</p> <p>For more information about pipes, see <a href="https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-pipes.html"> Amazon EventBridge Pipes</a> in the Amazon EventBridge User Guide.</p>
		/// UpdatePipe v1/pipes/{Name}
		/// </summary>
		/// <param name="Name">The name of the pipe.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <returns>Success</returns>
		public async Task<UpdatePipeResponse> UpdatePipeAsync(string Name, UpdatePipePutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/pipes/"+ (Name==null? "" : System.Uri.EscapeDataString(Name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdatePipeResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get the pipes associated with this account. For more information about pipes, see <a href="https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-pipes.html">Amazon EventBridge Pipes</a> in the Amazon EventBridge User Guide.
		/// ListPipes v1/pipes
		/// </summary>
		/// <param name="CurrentState">The state the pipe is in.</param>
		/// <param name="DesiredState">The state the pipe should be in.</param>
		/// <param name="Limit">The maximum number of pipes to include in the response.
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="NamePrefix">A value that will return a subset of the pipes associated with this account. For example, <code>"NamePrefix": "ABC"</code> will return all endpoints with "ABC" in the name.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="NextToken">If <code>nextToken</code> is returned, there are more results available. The value of <code>nextToken</code> is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. Using an expired pagination token will return an HTTP 400 InvalidToken error.
		/// Min length: 1
		/// Max length: 2048
		// </param>
		/// <param name="SourcePrefix">The prefix matching the pipe source.
		/// Min length: 1
		/// Max length: 1600
		// </param>
		/// <param name="TargetPrefix">The prefix matching the pipe target.
		/// Min length: 1
		/// Max length: 1600
		// </param>
		/// <returns>Success</returns>
		public async Task<ListPipesResponse> ListPipesAsync(PipeState CurrentState, RequestedPipeState DesiredState, int Limit, string NamePrefix, string NextToken, string SourcePrefix, string TargetPrefix, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/pipes?CurrentState=" + CurrentState+"&DesiredState=" + DesiredState+"&Limit="+Limit+"&NamePrefix=" + (NamePrefix==null? "" : System.Uri.EscapeDataString(NamePrefix))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken))+"&SourcePrefix=" + (SourcePrefix==null? "" : System.Uri.EscapeDataString(SourcePrefix))+"&TargetPrefix=" + (TargetPrefix==null? "" : System.Uri.EscapeDataString(TargetPrefix));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListPipesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Displays the tags associated with a pipe.
		/// ListTagsForResource tags/{resourceArn}
		/// </summary>
		/// <param name="resourceArn">The ARN of the pipe for which you want to view tags.
		/// Min length: 1
		/// Max length: 1600
		// </param>
		/// <returns>Success</returns>
		public async Task<ListTagsForResourceResponse> ListTagsForResourceAsync(string resourceArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+ (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListTagsForResourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Assigns one or more tags (key-value pairs) to the specified pipe. Tags can help you organize and categorize your resources. You can also use them to scope user permissions by granting a user permission to access or change only resources with certain tag values.</p> <p>Tags don't have any semantic meaning to Amazon Web Services and are interpreted strictly as strings of characters.</p> <p>You can use the <code>TagResource</code> action with a pipe that already has tags. If you specify a new tag key, this tag is appended to the list of tags associated with the pipe. If you specify a tag key that is already associated with the pipe, the new tag value that you specify replaces the previous value for that tag.</p> <p>You can associate as many as 50 tags with a pipe.</p>
		/// TagResource tags/{resourceArn}
		/// </summary>
		/// <param name="resourceArn">The ARN of the pipe.
		/// Min length: 1
		/// Max length: 1600
		// </param>
		/// <returns>Success</returns>
		public async Task<TagResourceResponse> TagResourceAsync(string resourceArn, TagResourcePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+ (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TagResourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Start an existing pipe.
		/// StartPipe v1/pipes/{Name}/start
		/// </summary>
		/// <param name="Name">The name of the pipe.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <returns>Success</returns>
		public async Task<StartPipeResponse> StartPipeAsync(string Name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/pipes/"+ (Name==null? "" : System.Uri.EscapeDataString(Name))+"/start";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StartPipeResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Stop an existing pipe.
		/// StopPipe v1/pipes/{Name}/stop
		/// </summary>
		/// <param name="Name">The name of the pipe.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <returns>Success</returns>
		public async Task<StopPipeResponse> StopPipeAsync(string Name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/pipes/"+ (Name==null? "" : System.Uri.EscapeDataString(Name))+"/stop";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StopPipeResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Removes one or more tags from the specified pipes.
		/// UntagResource tags/{resourceArn}#tagKeys
		/// </summary>
		/// <param name="resourceArn">The ARN of the pipe.
		/// Min length: 1
		/// Max length: 1600
		// </param>
		/// <param name="tagKeys">The list of tag keys to remove from the pipe.
		/// Minimum items: 0
		/// Maximum items: 50
		// </param>
		/// <returns>Success</returns>
		public async Task<UntagResourceResponse> UntagResourceAsync(string resourceArn, string[] tagKeys, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+ (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn))+"#tagKeys&"+string.Join("&", tagKeys.Select(z => $"tagKeys={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UntagResourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public class CreatePipePostBody
	{
		
		/// <summary>
		/// A description of the pipe.
		/// Min length: 0
		/// Max length: 512
		/// Pattern: ^.*$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(512)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^.*$")]
		public string Description { get; set; }
		
		/// <summary>
		/// The state the pipe should be in.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RequestedPipeState DesiredState { get; set; }
		
		/// <summary>
		/// The ARN of the enrichment resource.
		/// Min length: 0
		/// Max length: 1600
		/// Pattern: ^$|arn:(aws[a-zA-Z0-9-]*):([a-zA-Z0-9\-]+):([a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-\d{1})?:(\d{12})?:(.+)$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(1600)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^$|arn:(aws[a-zA-Z0-9-]*):([a-zA-Z0-9\-]+):([a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-\d{1})?:(\d{12})?:(.+)$")]
		public string Enrichment { get; set; }
		
		/// <summary>
		/// The parameters required to set up enrichment on your pipe.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CreatePipePostBodyEnrichmentParameters EnrichmentParameters { get; set; }
		
		/// <summary>
		/// The ARN of the role that allows the pipe to send data to the target.
		/// Required
		/// Min length: 1
		/// Max length: 1600
		/// Pattern: ^arn:(aws[a-zA-Z-]*)?:iam::\d{12}:role/?[a-zA-Z0-9+=,.@\-_/]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1600)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^arn:(aws[a-zA-Z-]*)?:iam::\d{12}:role/?[a-zA-Z0-9+=,.@\-_/]+$")]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// The ARN of the source resource.
		/// Required
		/// Min length: 1
		/// Max length: 1600
		/// Pattern: ^smk://(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]*[A-Za-z0-9]):[0-9]{1,5}|arn:(aws[a-zA-Z0-9-]*):([a-zA-Z0-9\-]+):([a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-\d{1})?:(\d{12})?:(.+)$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1600)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^smk://(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]*[A-Za-z0-9]):[0-9]{1,5}|arn:(aws[a-zA-Z0-9-]*):([a-zA-Z0-9\-]+):([a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-\d{1})?:(\d{12})?:(.+)$")]
		public string Source { get; set; }
		
		/// <summary>
		/// The parameters required to set up a source for your pipe.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CreatePipePostBodySourceParameters SourceParameters { get; set; }
		
		/// <summary>
		/// The list of key-value pairs to associate with the pipe.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
		
		/// <summary>
		/// The ARN of the target resource.
		/// Required
		/// Min length: 1
		/// Max length: 1600
		/// Pattern: ^arn:(aws[a-zA-Z0-9-]*):([a-zA-Z0-9\-]+):([a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-\d{1})?:(\d{12})?:(.+)$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1600)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^arn:(aws[a-zA-Z0-9-]*):([a-zA-Z0-9\-]+):([a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-\d{1})?:(\d{12})?:(.+)$")]
		public string Target { get; set; }
		
		/// <summary>
		/// The parameters required to set up a target for your pipe.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CreatePipePostBodyTargetParameters TargetParameters { get; set; }
	}
	
	public class CreatePipePostBodyEnrichmentParameters
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PipeEnrichmentHttpParameters HttpParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InputTemplate { get; set; }
	}
	
	public class CreatePipePostBodySourceParameters
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PipeSourceActiveMQBrokerParameters ActiveMQBrokerParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PipeSourceDynamoDBStreamParameters DynamoDBStreamParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FilterCriteria FilterCriteria { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PipeSourceKinesisStreamParameters KinesisStreamParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PipeSourceManagedStreamingKafkaParameters ManagedStreamingKafkaParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PipeSourceRabbitMQBrokerParameters RabbitMQBrokerParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PipeSourceSelfManagedKafkaParameters SelfManagedKafkaParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PipeSourceSqsQueueParameters SqsQueueParameters { get; set; }
	}
	
	public class CreatePipePostBodyTargetParameters
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PipeTargetBatchJobParameters BatchJobParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PipeTargetCloudWatchLogsParameters CloudWatchLogsParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PipeTargetEcsTaskParameters EcsTaskParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PipeTargetEventBridgeEventBusParameters EventBridgeEventBusParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PipeTargetHttpParameters HttpParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InputTemplate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PipeTargetKinesisStreamParameters KinesisStreamParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PipeTargetLambdaFunctionParameters LambdaFunctionParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PipeTargetRedshiftDataParameters RedshiftDataParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PipeTargetSageMakerPipelineParameters SageMakerPipelineParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PipeTargetSqsQueueParameters SqsQueueParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PipeTargetStateMachineParameters StepFunctionStateMachineParameters { get; set; }
	}
	
	public class UpdatePipePutBody
	{
		
		/// <summary>
		/// A description of the pipe.
		/// Min length: 0
		/// Max length: 512
		/// Pattern: ^.*$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(512)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^.*$")]
		public string Description { get; set; }
		
		/// <summary>
		/// The state the pipe should be in.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RequestedPipeState DesiredState { get; set; }
		
		/// <summary>
		/// The ARN of the enrichment resource.
		/// Min length: 0
		/// Max length: 1600
		/// Pattern: ^$|arn:(aws[a-zA-Z0-9-]*):([a-zA-Z0-9\-]+):([a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-\d{1})?:(\d{12})?:(.+)$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(1600)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^$|arn:(aws[a-zA-Z0-9-]*):([a-zA-Z0-9\-]+):([a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-\d{1})?:(\d{12})?:(.+)$")]
		public string Enrichment { get; set; }
		
		/// <summary>
		/// The parameters required to set up enrichment on your pipe.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UpdatePipePutBodyEnrichmentParameters EnrichmentParameters { get; set; }
		
		/// <summary>
		/// The ARN of the role that allows the pipe to send data to the target.
		/// Required
		/// Min length: 1
		/// Max length: 1600
		/// Pattern: ^arn:(aws[a-zA-Z-]*)?:iam::\d{12}:role/?[a-zA-Z0-9+=,.@\-_/]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1600)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^arn:(aws[a-zA-Z-]*)?:iam::\d{12}:role/?[a-zA-Z0-9+=,.@\-_/]+$")]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// The parameters required to set up a source for your pipe.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UpdatePipePutBodySourceParameters SourceParameters { get; set; }
		
		/// <summary>
		/// The ARN of the target resource.
		/// Min length: 1
		/// Max length: 1600
		/// Pattern: ^arn:(aws[a-zA-Z0-9-]*):([a-zA-Z0-9\-]+):([a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-\d{1})?:(\d{12})?:(.+)$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1600)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^arn:(aws[a-zA-Z0-9-]*):([a-zA-Z0-9\-]+):([a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-\d{1})?:(\d{12})?:(.+)$")]
		public string Target { get; set; }
		
		/// <summary>
		/// The parameters required to set up a target for your pipe.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UpdatePipePutBodyTargetParameters TargetParameters { get; set; }
	}
	
	public class UpdatePipePutBodyEnrichmentParameters
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PipeEnrichmentHttpParameters HttpParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InputTemplate { get; set; }
	}
	
	public class UpdatePipePutBodySourceParameters
	{
		
		[System.Runtime.Serialization.DataMember()]
		public UpdatePipeSourceActiveMQBrokerParameters ActiveMQBrokerParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UpdatePipeSourceDynamoDBStreamParameters DynamoDBStreamParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FilterCriteria FilterCriteria { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UpdatePipeSourceKinesisStreamParameters KinesisStreamParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UpdatePipeSourceManagedStreamingKafkaParameters ManagedStreamingKafkaParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UpdatePipeSourceRabbitMQBrokerParameters RabbitMQBrokerParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UpdatePipeSourceSelfManagedKafkaParameters SelfManagedKafkaParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UpdatePipeSourceSqsQueueParameters SqsQueueParameters { get; set; }
	}
	
	public class UpdatePipePutBodyTargetParameters
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PipeTargetBatchJobParameters BatchJobParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PipeTargetCloudWatchLogsParameters CloudWatchLogsParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PipeTargetEcsTaskParameters EcsTaskParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PipeTargetEventBridgeEventBusParameters EventBridgeEventBusParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PipeTargetHttpParameters HttpParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InputTemplate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PipeTargetKinesisStreamParameters KinesisStreamParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PipeTargetLambdaFunctionParameters LambdaFunctionParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PipeTargetRedshiftDataParameters RedshiftDataParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PipeTargetSageMakerPipelineParameters SageMakerPipelineParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PipeTargetSqsQueueParameters SqsQueueParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PipeTargetStateMachineParameters StepFunctionStateMachineParameters { get; set; }
	}
	
	public class TagResourcePostBody
	{
		
		/// <summary>
		/// The list of key-value pairs associated with the pipe.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
