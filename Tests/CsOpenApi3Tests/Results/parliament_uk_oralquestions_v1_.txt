//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ApiResponse_List_PublishedEarlyDayMotion_
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Errors { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PagingInfo PagingInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PublishedEarlyDayMotion[] Response { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<ApiResponse_List_PublishedEarlyDayMotion_StatusCode> StatusCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Success { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PagingInfo
	{
		
		[System.Runtime.Serialization.DataMember()]
		public StatusCount[] GlobalStatusCounts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> GlobalTotal { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Skip { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StatusCount[] StatusCounts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Take { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Total { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StatusCount
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> StatusId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PublishedEarlyDayMotion
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AmendmentSuffix { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> AmendmentToMotionId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MemberId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MotionText { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PrayingAgainstNegativeStatutoryInstrumentId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MemberForDate PrimarySponsor { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SponsorsCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<PublishedEarlyDayMotionStatus> Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> StatusDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> StatutoryInstrumentNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StatutoryInstrumentTitle { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StatutoryInstrumentYear { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Title { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> UIN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string UINWithAmendmentSuffix { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MemberForDate
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Constituency { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ListAs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MnisId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Party { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PartyColour { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PartyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PhotoUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PimsId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PublishedEarlyDayMotionStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Published")]
		Published = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Withdrawn")]
		Withdrawn = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ApiResponse_List_PublishedEarlyDayMotion_StatusCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Continue")]
		Continue = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SwitchingProtocols")]
		SwitchingProtocols = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OK")]
		OK = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Created")]
		Created = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Accepted")]
		Accepted = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NonAuthoritativeInformation")]
		NonAuthoritativeInformation = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NoContent")]
		NoContent = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ResetContent")]
		ResetContent = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PartialContent")]
		PartialContent = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MultipleChoices")]
		MultipleChoices = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Ambiguous")]
		Ambiguous = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MovedPermanently")]
		MovedPermanently = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Moved")]
		Moved = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Found")]
		Found = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Redirect")]
		Redirect = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SeeOther")]
		SeeOther = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RedirectMethod")]
		RedirectMethod = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NotModified")]
		NotModified = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UseProxy")]
		UseProxy = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Unused")]
		Unused = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TemporaryRedirect")]
		TemporaryRedirect = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RedirectKeepVerb")]
		RedirectKeepVerb = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BadRequest")]
		BadRequest = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Unauthorized")]
		Unauthorized = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PaymentRequired")]
		PaymentRequired = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Forbidden")]
		Forbidden = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NotFound")]
		NotFound = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MethodNotAllowed")]
		MethodNotAllowed = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NotAcceptable")]
		NotAcceptable = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ProxyAuthenticationRequired")]
		ProxyAuthenticationRequired = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RequestTimeout")]
		RequestTimeout = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Conflict")]
		Conflict = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Gone")]
		Gone = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LengthRequired")]
		LengthRequired = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PreconditionFailed")]
		PreconditionFailed = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RequestEntityTooLarge")]
		RequestEntityTooLarge = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RequestUriTooLong")]
		RequestUriTooLong = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UnsupportedMediaType")]
		UnsupportedMediaType = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RequestedRangeNotSatisfiable")]
		RequestedRangeNotSatisfiable = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ExpectationFailed")]
		ExpectationFailed = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UpgradeRequired")]
		UpgradeRequired = 40,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="InternalServerError")]
		InternalServerError = 41,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NotImplemented")]
		NotImplemented = 42,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BadGateway")]
		BadGateway = 43,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ServiceUnavailable")]
		ServiceUnavailable = 44,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GatewayTimeout")]
		GatewayTimeout = 45,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HttpVersionNotSupported")]
		HttpVersionNotSupported = 46,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ApiResponse_List_PublishedOralQuestionTime_
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Errors { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PagingInfo PagingInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PublishedOralQuestionTime[] Response { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ApiResponse_List_PublishedEarlyDayMotion_StatusCode StatusCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Success { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PublishedOralQuestionTime
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AnsweringBodyNames { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AnsweringMinisterTitles { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> AnsweringWhen { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DeadlineWhen { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SubstantiveTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TopicalTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ApiResponse_List_PublishedOralQuestion_
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Errors { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PagingInfo PagingInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PublishedOralQuestion[] Response { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ApiResponse_List_PublishedEarlyDayMotion_StatusCode StatusCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Success { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PublishedOralQuestion
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AnsweringBody { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> AnsweringBodyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MemberForDate AnsweringMinister { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> AnsweringMinisterId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AnsweringMinisterTitle { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> AnsweringWhen { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MemberForDate AskingMember { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> AskingMemberId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DeclarableInterestDetail { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string HansardLink { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Number { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string QuestionText { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<PublishedOralQuestionQuestionType> QuestionType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> RemovedFromToBeAskedWhen { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<PublishedOralQuestionStatus> Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> TabledWhen { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> UIN { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PublishedOralQuestionQuestionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Substantive")]
		Substantive = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Topical")]
		Topical = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PublishedOralQuestionStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Submitted")]
		Submitted = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Carded")]
		Carded = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Unsaved")]
		Unsaved = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ReadyForShuffle")]
		ReadyForShuffle = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ToBeAsked")]
		ToBeAsked = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ShuffleUnsuccessful")]
		ShuffleUnsuccessful = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Withdrawn")]
		Withdrawn = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Unstarred")]
		Unstarred = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Draft")]
		Draft = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ForReview")]
		ForReview = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Unasked")]
		Unasked = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Transferred")]
		Transferred = 11,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ApiResponse_List_PublishedWrittenQuestion_
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Errors { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PagingInfo PagingInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PublishedWrittenQuestion[] Response { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ApiResponse_List_PublishedEarlyDayMotion_StatusCode StatusCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Success { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PublishedWrittenQuestion
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Answer { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> AnsweredWhen { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AnsweringBody { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> AnsweringBodyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MemberForDate AnsweringMinister { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> AnsweringMinisterId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AnsweringMinisterTitle { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MemberForDate AskingMember { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> AskingMemberId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DueForAnswer { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string QuestionText { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<PublishedWrittenQuestionQuestionType> QuestionType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> TabledWhen { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> UIN { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PublishedWrittenQuestionQuestionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NamedDay")]
		NamedDay = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Ordinary")]
		Ordinary = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ApiResponse_Object_
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Errors { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PagingInfo PagingInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Response { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ApiResponse_List_PublishedEarlyDayMotion_StatusCode StatusCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Success { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ApiResponse_PublishedEarlyDayMotionDetails_
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Errors { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PagingInfo PagingInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PublishedEarlyDayMotionDetails Response { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ApiResponse_List_PublishedEarlyDayMotion_StatusCode StatusCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Success { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PublishedEarlyDayMotionDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AmendmentSuffix { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> AmendmentToMotionId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PublishedEarlyDayMotionDetails[] Amendments { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MemberId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MotionText { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PrayingAgainstNegativeStatutoryInstrumentId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MemberForDate PrimarySponsor { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PublishedEarlyDayMotionSponsor[] Sponsors { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SponsorsCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PublishedEarlyDayMotionStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> StatusDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> StatutoryInstrumentNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StatutoryInstrumentTitle { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StatutoryInstrumentYear { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Title { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> UIN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string UINWithAmendmentSuffix { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PublishedEarlyDayMotionSponsor
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreatedWhen { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsWithdrawn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MemberForDate Member { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MemberId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SponsoringOrder { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> WithdrawnDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PublishedEarlyDayMotionQueryParameters
	{
		
		/// <summary>
		/// Early Day Motions where the current status has been set on or before the date provided. Date format YYYY-MM-DD.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CurrentStatusDateEnd { get; set; }
		
		/// <summary>
		/// Early Day Motions where the current status has been set on or after the date provided. Date format YYYY-MM-DD.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CurrentStatusDateStart { get; set; }
		
		/// <summary>
		/// Early Day Motions with an ID in the list provided.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public int[] EdmIds { get; set; }
		
		/// <summary>
		/// Include Early Day Motions sponsored by Member specified
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IncludeSponsoredByMember { get; set; }
		
		/// <summary>
		/// Early Day Motions which are a prayer against a Negative Statutory Instrument.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsPrayer { get; set; }
		
		/// <summary>
		/// Return Early Day Motions tabled by Member with ID provided.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MemberId { get; set; }
		
		/// <summary>
		/// Order results by date tabled, title or signature count. Default is date tabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<PublishedEarlyDayMotionQueryParametersOrderBy> OrderBy { get; set; }
		
		/// <summary>
		/// Early Day Motions where the title includes the search term provided.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SearchTerm { get; set; }
		
		/// <summary>
		/// The number of records to skip from the first, default is 0.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Skip { get; set; }
		
		/// <summary>
		/// Early Day Motions where current status is in the selected list.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PublishedEarlyDayMotionStatus[] Statuses { get; set; }
		
		/// <summary>
		/// Early Day Motions where the date tabled is on or before the date provided. Date format YYYY-MM-DD.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> TabledEndDate { get; set; }
		
		/// <summary>
		/// Early Day Motions where the date tabled is on or after the date provided. Date format YYYY-MM-DD.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> TabledStartDate { get; set; }
		
		/// <summary>
		/// The number of records to return, default is 25, maximum is 100.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Take { get; set; }
		
		/// <summary>
		/// Early Day Motions with an UINWithAmendmentSuffix provided.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string UINWithAmendmentSuffix { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PublishedEarlyDayMotionQueryParametersOrderBy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DateTabledAsc")]
		DateTabledAsc = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DateTabledDesc")]
		DateTabledDesc = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TitleAsc")]
		TitleAsc = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TitleDesc")]
		TitleDesc = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SignatureCountAsc")]
		SignatureCountAsc = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SignatureCountDesc")]
		SignatureCountDesc = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PublishedOralQuestionQueryParameters
	{
		
		/// <summary>
		/// Which answering body is to respond. A list of answering bodies can be found <a target="_blank" href="http://data.parliament.uk/membersdataplatform/services/mnis/referencedata/AnsweringBodies/">here</a>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public int[] AnsweringBodyIds { get; set; }
		
		/// <summary>
		/// Oral Questions where the answering date has been set on or before the date provided. Date format YYYY-MM-DD.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> AnsweringDateEnd { get; set; }
		
		/// <summary>
		/// Oral Questions where the answering date has been set on or after the date provided. Date format YYYY-MM-DD.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> AnsweringDateStart { get; set; }
		
		/// <summary>
		/// The ID of the member asking the question. Lists of member IDs for each house are available <a href="http://data.parliament.uk/membersdataplatform/services/mnis/members/query/house=Commons" target="_blank">Commons</a> and <a href="http://data.parliament.uk/membersdataplatform/services/mnis/members/query/house=Lords" target="_blank">Lords</a>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public int[] AskingMemberIds { get; set; }
		
		/// <summary>
		/// Oral Questions where the question is within the question time with the ID provided
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> OralQuestionTimeId { get; set; }
		
		/// <summary>
		/// Oral Questions where the question type is the selected type, substantive or topical.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PublishedOralQuestionQuestionType QuestionType { get; set; }
		
		/// <summary>
		/// The number of records to skip from the first, default is 0.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Skip { get; set; }
		
		/// <summary>
		/// The number of records to return, default is 25, maximum is 100.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Take { get; set; }
		
		/// <summary>
		/// The UIN for the question - note that UINs reset at the start of each Parliamentary session.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public int[] UINs { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PublishedOralQuestionTimeQueryParameters
	{
		
		/// <summary>
		/// Which answering body is to respond. A list of answering bodies can be found <a target="_blank" href="http://data.parliament.uk/membersdataplatform/services/mnis/referencedata/AnsweringBodies/">here</a>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public int[] AnsweringBodyIds { get; set; }
		
		/// <summary>
		/// Oral Questions Time where the answering date has been set on or before the date provided. Date format YYYY-MM-DD.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> AnsweringDateEnd { get; set; }
		
		/// <summary>
		/// Oral Questions Time where the answering date has been set on or after the date provided. Date format YYYY-MM-DD.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> AnsweringDateStart { get; set; }
		
		/// <summary>
		/// Oral Questions Time where the deadline date has been set on or before the date provided. Date format YYYY-MM-DD.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DeadlineDateEnd { get; set; }
		
		/// <summary>
		/// Oral Questions Time where the deadline date has been set on or after the date provided. Date format YYYY-MM-DD.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DeadlineDateStart { get; set; }
		
		/// <summary>
		/// Identifier of the OQT
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> OralQuestionTimeId { get; set; }
		
		/// <summary>
		/// The number of records to skip from the first, default is 0.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Skip { get; set; }
		
		/// <summary>
		/// The number of records to return, default is 25, maximum is 100.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Take { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Returns a single Early Day Motion by ID
		/// Get a single Early Day Motion which has the ID specified.
		/// PublishedEarlyDayMotion_Get EarlyDayMotion/{id}
		/// </summary>
		/// <param name="id">Early Day Motion with the ID specified.</param>
		/// <returns>OK</returns>
		public async Task<ApiResponse_List_PublishedWrittenQuestion_> PublishedEarlyDayMotion_GetAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "EarlyDayMotion/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ApiResponse_List_PublishedWrittenQuestion_>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of Early Day Motions
		/// Get a list of Early Day Motions which meet the specified criteria. Only supports Published and Withdrawn status.
		/// Early_Day_MotionsGetByParameters_edmIdsAndParameters_uINWithAmendmentSuffixAndParameters_searchTermAndParameters_currentStatusDateStartAndParameters_currentStatusDateEndAndParameters_isPrayerAndParameters_memberIdAndParameters_includeSponsoredByMemberAndParameters_tabledStartDateAndParameters_tabledEndDateAndParameters_statusesAndParameters_orderByAndParameters_skipAndParameters_take EarlyDayMotions/list
		/// </summary>
		/// <param name="parameters_edmIds">Early Day Motions with an ID in the list provided.</param>
		/// <param name="parameters_uINWithAmendmentSuffix">Early Day Motions with an UINWithAmendmentSuffix provided.</param>
		/// <param name="parameters_searchTerm">Early Day Motions where the title includes the search term provided.</param>
		/// <param name="parameters_currentStatusDateStart">Early Day Motions where the current status has been set on or after the date provided. Date format YYYY-MM-DD.</param>
		/// <param name="parameters_currentStatusDateEnd">Early Day Motions where the current status has been set on or before the date provided. Date format YYYY-MM-DD.</param>
		/// <param name="parameters_isPrayer">Early Day Motions which are a prayer against a Negative Statutory Instrument.</param>
		/// <param name="parameters_memberId">Return Early Day Motions tabled by Member with ID provided.</param>
		/// <param name="parameters_includeSponsoredByMember">Include Early Day Motions sponsored by Member specified</param>
		/// <param name="parameters_tabledStartDate">Early Day Motions where the date tabled is on or after the date provided. Date format YYYY-MM-DD.</param>
		/// <param name="parameters_tabledEndDate">Early Day Motions where the date tabled is on or before the date provided. Date format YYYY-MM-DD.</param>
		/// <param name="parameters_statuses">Early Day Motions where current status is in the selected list.</param>
		/// <param name="parameters_orderBy">Order results by date tabled, title or signature count. Default is date tabled.</param>
		/// <param name="parameters_skip">The number of records to skip from the first, default is 0.</param>
		/// <param name="parameters_take">The number of records to return, default is 25, maximum is 100.</param>
		/// <returns>OK</returns>
		public async Task<ApiResponse_List_PublishedWrittenQuestion_> Early_Day_MotionsGetByParameters_edmIdsAndParameters_uINWithAmendmentSuffixAndParameters_searchTermAndParameters_currentStatusDateStartAndParameters_currentStatusDateEndAndParameters_isPrayerAndParameters_memberIdAndParameters_includeSponsoredByMemberAndParameters_tabledStartDateAndParameters_tabledEndDateAndParameters_statusesAndParameters_orderByAndParameters_skipAndParameters_takeAsync(int[] parameters_edmIds, string parameters_uINWithAmendmentSuffix, string parameters_searchTerm, System.DateTimeOffset parameters_currentStatusDateStart, System.DateTimeOffset parameters_currentStatusDateEnd, bool parameters_isPrayer, int parameters_memberId, bool parameters_includeSponsoredByMember, System.DateTimeOffset parameters_tabledStartDate, System.DateTimeOffset parameters_tabledEndDate, PublishedEarlyDayMotionStatus[] parameters_statuses, PublishedEarlyDayMotionQueryParametersOrderBy parameters_orderBy, int parameters_skip, int parameters_take, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "EarlyDayMotions/list?"+string.Join("&", parameters_edmIds.Select(z => $"parameters.edmIds={z}"))+"&parameters.uINWithAmendmentSuffix=" + (parameters_uINWithAmendmentSuffix==null? "" : System.Uri.EscapeDataString(parameters_uINWithAmendmentSuffix))+"&parameters.searchTerm=" + (parameters_searchTerm==null? "" : System.Uri.EscapeDataString(parameters_searchTerm))+"&parameters.currentStatusDateStart=" + parameters_currentStatusDateStart.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&parameters.currentStatusDateEnd=" + parameters_currentStatusDateEnd.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&parameters.isPrayer="+parameters_isPrayer+"&parameters.memberId="+parameters_memberId+"&parameters.includeSponsoredByMember="+parameters_includeSponsoredByMember+"&parameters.tabledStartDate=" + parameters_tabledStartDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&parameters.tabledEndDate=" + parameters_tabledEndDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&"+string.Join("&", parameters_statuses.Select(z => $"parameters.statuses={z}"))+"&parameters.orderBy=" + parameters_orderBy+"&parameters.skip="+parameters_skip+"&parameters.take="+parameters_take;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ApiResponse_List_PublishedWrittenQuestion_>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of oral questions
		/// A list of oral questions meeting the specified criteria.
		/// PublishedOralQuestion_Get oralquestions/list
		/// </summary>
		/// <param name="parameters_answeringDateStart">Oral Questions where the answering date has been set on or after the date provided. Date format YYYY-MM-DD.</param>
		/// <param name="parameters_answeringDateEnd">Oral Questions where the answering date has been set on or before the date provided. Date format YYYY-MM-DD.</param>
		/// <param name="parameters_questionType">Oral Questions where the question type is the selected type, substantive or topical.</param>
		/// <param name="parameters_oralQuestionTimeId">Oral Questions where the question is within the question time with the ID provided</param>
		/// <param name="parameters_askingMemberIds">The ID of the member asking the question. Lists of member IDs for each house are available <a href="http://data.parliament.uk/membersdataplatform/services/mnis/members/query/house=Commons" target="_blank">Commons</a> and <a href="http://data.parliament.uk/membersdataplatform/services/mnis/members/query/house=Lords" target="_blank">Lords</a>.</param>
		/// <param name="parameters_uINs">The UIN for the question - note that UINs reset at the start of each Parliamentary session.</param>
		/// <param name="parameters_answeringBodyIds">Which answering body is to respond. A list of answering bodies can be found <a target="_blank" href="http://data.parliament.uk/membersdataplatform/services/mnis/referencedata/AnsweringBodies/">here</a>.</param>
		/// <param name="parameters_skip">The number of records to skip from the first, default is 0.</param>
		/// <param name="parameters_take">The number of records to return, default is 25, maximum is 100.</param>
		/// <returns>OK</returns>
		public async Task<ApiResponse_List_PublishedWrittenQuestion_> PublishedOralQuestion_GetAsync(System.DateTimeOffset parameters_answeringDateStart, System.DateTimeOffset parameters_answeringDateEnd, PublishedOralQuestionQuestionType parameters_questionType, int parameters_oralQuestionTimeId, int[] parameters_askingMemberIds, int[] parameters_uINs, int[] parameters_answeringBodyIds, int parameters_skip, int parameters_take, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "oralquestions/list?parameters.answeringDateStart=" + parameters_answeringDateStart.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&parameters.answeringDateEnd=" + parameters_answeringDateEnd.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&parameters.questionType=" + parameters_questionType+"&parameters.oralQuestionTimeId="+parameters_oralQuestionTimeId+"&"+string.Join("&", parameters_askingMemberIds.Select(z => $"parameters.askingMemberIds={z}"))+"&"+string.Join("&", parameters_uINs.Select(z => $"parameters.uINs={z}"))+"&"+string.Join("&", parameters_answeringBodyIds.Select(z => $"parameters.answeringBodyIds={z}"))+"&parameters.skip="+parameters_skip+"&parameters.take="+parameters_take;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ApiResponse_List_PublishedWrittenQuestion_>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of oral question times
		/// A list of oral question times meeting the specified criteria.
		/// PublishedOralQuestionTime_Get oralquestiontimes/list
		/// </summary>
		/// <param name="parameters_answeringDateStart">Oral Questions Time where the answering date has been set on or after the date provided. Date format YYYY-MM-DD.</param>
		/// <param name="parameters_answeringDateEnd">Oral Questions Time where the answering date has been set on or before the date provided. Date format YYYY-MM-DD.</param>
		/// <param name="parameters_deadlineDateStart">Oral Questions Time where the deadline date has been set on or after the date provided. Date format YYYY-MM-DD.</param>
		/// <param name="parameters_deadlineDateEnd">Oral Questions Time where the deadline date has been set on or before the date provided. Date format YYYY-MM-DD.</param>
		/// <param name="parameters_oralQuestionTimeId">Identifier of the OQT</param>
		/// <param name="parameters_answeringBodyIds">Which answering body is to respond. A list of answering bodies can be found <a target="_blank" href="http://data.parliament.uk/membersdataplatform/services/mnis/referencedata/AnsweringBodies/">here</a>.</param>
		/// <param name="parameters_skip">The number of records to skip from the first, default is 0.</param>
		/// <param name="parameters_take">The number of records to return, default is 25, maximum is 100.</param>
		/// <returns>OK</returns>
		public async Task<ApiResponse_List_PublishedWrittenQuestion_> PublishedOralQuestionTime_GetAsync(System.DateTimeOffset parameters_answeringDateStart, System.DateTimeOffset parameters_answeringDateEnd, System.DateTimeOffset parameters_deadlineDateStart, System.DateTimeOffset parameters_deadlineDateEnd, int parameters_oralQuestionTimeId, int[] parameters_answeringBodyIds, int parameters_skip, int parameters_take, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "oralquestiontimes/list?parameters.answeringDateStart=" + parameters_answeringDateStart.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&parameters.answeringDateEnd=" + parameters_answeringDateEnd.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&parameters.deadlineDateStart=" + parameters_deadlineDateStart.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&parameters.deadlineDateEnd=" + parameters_deadlineDateEnd.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&parameters.oralQuestionTimeId="+parameters_oralQuestionTimeId+"&"+string.Join("&", parameters_answeringBodyIds.Select(z => $"parameters.answeringBodyIds={z}"))+"&parameters.skip="+parameters_skip+"&parameters.take="+parameters_take;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ApiResponse_List_PublishedWrittenQuestion_>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
