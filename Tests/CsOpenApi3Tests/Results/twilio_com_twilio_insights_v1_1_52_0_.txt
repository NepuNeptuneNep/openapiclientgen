//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Annotation_enum_answered_by
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="unknown_answered_by")]
		unknown_answered_by = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="human")]
		human = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="machine")]
		machine = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Annotation_enum_connectivity_issue
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="unknown_connectivity_issue")]
		unknown_connectivity_issue = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="no_connectivity_issue")]
		no_connectivity_issue = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="invalid_number")]
		invalid_number = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="caller_id")]
		caller_id = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="dropped_call")]
		dropped_call = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="number_reachability")]
		number_reachability = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Annotation_enum_quality_issues
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="unknown_quality_issue")]
		unknown_quality_issue = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="no_quality_issue")]
		no_quality_issue = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="low_volume")]
		low_volume = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="choppy_robotic")]
		choppy_robotic = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="echo")]
		echo = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="dtmf")]
		dtmf = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="latency")]
		latency = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="owa")]
		owa = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="static_noise")]
		static_noise = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Call_summaries_enum_answered_by
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="unknown")]
		unknown = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="machine_start")]
		machine_start = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="machine_end_beep")]
		machine_end_beep = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="machine_end_silence")]
		machine_end_silence = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="machine_end_other")]
		machine_end_other = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="human")]
		human = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fax")]
		fax = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Call_summaries_enum_call_direction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="outbound_api")]
		outbound_api = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="outbound_dial")]
		outbound_dial = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="inbound")]
		inbound = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="trunking_originating")]
		trunking_originating = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="trunking_terminating")]
		trunking_terminating = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Call_summaries_enum_call_state
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ringing")]
		ringing = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="completed")]
		completed = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="busy")]
		busy = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fail")]
		fail = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="noanswer")]
		noanswer = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="canceled")]
		canceled = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="answered")]
		answered = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="undialed")]
		undialed = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Call_summaries_enum_call_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="carrier")]
		carrier = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="sip")]
		sip = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="trunking")]
		trunking = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="client")]
		client = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Call_summaries_enum_processing_state
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="complete")]
		complete = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="partial")]
		@partial = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Call_summaries_enum_processing_state_request
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="completed")]
		completed = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="started")]
		started = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="partial")]
		@partial = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="all")]
		all = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Call_summaries_enum_sort_by
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="start_time")]
		start_time = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="end_time")]
		end_time = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Conference_enum_conference_end_reason
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="last_participant_left")]
		last_participant_left = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="conference_ended_via_api")]
		conference_ended_via_api = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="participant_with_end_conference_on_exit_left")]
		participant_with_end_conference_on_exit_left = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="last_participant_kicked")]
		last_participant_kicked = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="participant_with_end_conference_on_exit_kicked")]
		participant_with_end_conference_on_exit_kicked = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Conference_enum_conference_status
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="in_progress")]
		in_progress = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="not_started")]
		not_started = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="completed")]
		completed = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="summary_timeout")]
		summary_timeout = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Conference_enum_processing_state
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="complete")]
		complete = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="in_progress")]
		in_progress = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="timeout")]
		timeout = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Conference_enum_region
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="us1")]
		us1 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="au1")]
		au1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="br1")]
		br1 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ie1")]
		ie1 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="jp1")]
		jp1 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="sg1")]
		sg1 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="de1")]
		de1 = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Conference_enum_tag
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="invalid_requested_region")]
		invalid_requested_region = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="duplicate_identity")]
		duplicate_identity = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="start_failure")]
		start_failure = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="region_configuration_issues")]
		region_configuration_issues = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="quality_warnings")]
		quality_warnings = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="participant_behavior_issues")]
		participant_behavior_issues = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="high_packet_loss")]
		high_packet_loss = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="high_jitter")]
		high_jitter = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="high_latency")]
		high_latency = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="low_mos")]
		low_mos = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="detected_silence")]
		detected_silence = 10,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Conference_participant_enum_call_direction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="inbound")]
		inbound = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="outbound")]
		outbound = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Conference_participant_enum_call_status
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="answered")]
		answered = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="completed")]
		completed = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="busy")]
		busy = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fail")]
		fail = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="noanswer")]
		noanswer = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ringing")]
		ringing = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="canceled")]
		canceled = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Conference_participant_enum_call_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="carrier")]
		carrier = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="client")]
		client = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="sip")]
		sip = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Conference_participant_enum_jitter_buffer_size
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="large")]
		large = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="small")]
		small = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="medium")]
		medium = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="off")]
		off = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Conference_participant_enum_processing_state
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="complete")]
		complete = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="in_progress")]
		in_progress = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="timeout")]
		timeout = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Conference_participant_enum_region
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="us1")]
		us1 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="us2")]
		us2 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="au1")]
		au1 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="br1")]
		br1 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ie1")]
		ie1 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="jp1")]
		jp1 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="sg1")]
		sg1 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="de1")]
		de1 = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Event_enum_level
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNKNOWN")]
		UNKNOWN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DEBUG")]
		DEBUG = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INFO")]
		INFO = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="WARNING")]
		WARNING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ERROR")]
		ERROR = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Event_enum_twilio_edge
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="unknown_edge")]
		unknown_edge = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="carrier_edge")]
		carrier_edge = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="sip_edge")]
		sip_edge = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="sdk_edge")]
		sdk_edge = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="client_edge")]
		client_edge = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Insightsv1account_settings
	{
		
		/// <summary>
		/// The unique SID identifier of the Account.
		/// Max length: 34
		/// Min length: 34
		/// Pattern: ^AC[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="account_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^AC[0-9a-fA-F]{32}$")]
		public string Account_sid { get; set; }
		
		/// <summary>
		/// A boolean flag indicating whether Advanced Features for Voice Insights are enabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="advanced_features")]
		public System.Nullable<System.Boolean> Advanced_features { get; set; }
		
		/// <summary>
		/// The URL of this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		/// <summary>
		/// A boolean flag indicating whether Voice Trace is enabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="voice_trace")]
		public System.Nullable<System.Boolean> Voice_trace { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Insightsv1call
	{
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public string Links { get; set; }
		
		/// <summary>
		/// Max length: 34
		/// Min length: 34
		/// Pattern: ^CA[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^CA[0-9a-fA-F]{32}$")]
		public string Sid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Insightsv1callannotation
	{
		
		/// <summary>
		/// The unique SID identifier of the Account.
		/// Max length: 34
		/// Min length: 34
		/// Pattern: ^AC[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="account_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^AC[0-9a-fA-F]{32}$")]
		public string Account_sid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="answered_by")]
		public Annotation_enum_answered_by Answered_by { get; set; }
		
		/// <summary>
		/// Specifies the Call Score, if available. This is of type integer. Use a range of 1-5 to indicate the call experience score, with the following mapping as a reference for rating the call [5: Excellent, 4: Good, 3 : Fair, 2 : Poor, 1: Bad].
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="call_score")]
		public System.Nullable<System.Int32> Call_score { get; set; }
		
		/// <summary>
		/// The unique SID identifier of the Call.
		/// Max length: 34
		/// Min length: 34
		/// Pattern: ^CA[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="call_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^CA[0-9a-fA-F]{32}$")]
		public string Call_sid { get; set; }
		
		/// <summary>
		/// Specifies any comments pertaining to the call. Twilio does not treat this field as PII, so no PII should be included in comments.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="comment")]
		public string Comment { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="connectivity_issue")]
		public Annotation_enum_connectivity_issue Connectivity_issue { get; set; }
		
		/// <summary>
		/// Incident or support ticket associated with this call. The `incident` property is of type string with a maximum character limit of 100. Twilio does not treat this field as PII, so no PII should be included in `incident`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="incident")]
		public string Incident { get; set; }
		
		/// <summary>
		/// Specifies if the call had any subjective quality issues. Possible values are one or more of `no_quality_issue`, `low_volume`, `choppy_robotic`, `echo`, `dtmf`, `latency`, `owa`, or `static_noise`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quality_issues")]
		public string[] Quality_issues { get; set; }
		
		/// <summary>
		/// Specifies if the call was a spam call. Use this to provide feedback on whether calls placed from your account were marked as spam, or if inbound calls received by your account were unwanted spam. Is of type Boolean: true, false. Use true if the call was a spam call.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="spam")]
		public System.Nullable<System.Boolean> Spam { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Insightsv1callevent
	{
		
		/// <summary>
		/// The unique SID identifier of the Account.
		/// Max length: 34
		/// Min length: 34
		/// Pattern: ^AC[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="account_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^AC[0-9a-fA-F]{32}$")]
		public string Account_sid { get; set; }
		
		/// <summary>
		/// The unique SID identifier of the Call.
		/// Max length: 34
		/// Min length: 34
		/// Pattern: ^CA[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="call_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^CA[0-9a-fA-F]{32}$")]
		public string Call_sid { get; set; }
		
		/// <summary>
		/// Represents the connection between Twilio and our immediate carrier partners. The events here describe the call lifecycle as reported by Twilio's carrier media gateways.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="carrier_edge")]
		public object Carrier_edge { get; set; }
		
		/// <summary>
		/// Represents the Twilio media gateway for Client calls. The events here describe the call lifecycle as reported by Twilio's Voice SDK media gateways.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="client_edge")]
		public object Client_edge { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="edge")]
		public Event_enum_twilio_edge Edge { get; set; }
		
		/// <summary>
		/// Event group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="group")]
		public string Group { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="level")]
		public Event_enum_level Level { get; set; }
		
		/// <summary>
		/// Event name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Represents the Voice SDK running locally in the browser or in the Android/iOS application. The events here are emitted by the Voice SDK in response to certain call progress events, network changes, or call quality conditions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sdk_edge")]
		public object Sdk_edge { get; set; }
		
		/// <summary>
		/// Represents the Twilio media gateway for SIP interface and SIP trunking calls. The events here describe the call lifecycle as reported by Twilio's public media gateways.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sip_edge")]
		public object Sip_edge { get; set; }
		
		/// <summary>
		/// Event time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public string Timestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Insightsv1callmetric
	{
		
		/// <summary>
		/// The unique SID identifier of the Account.
		/// Max length: 34
		/// Min length: 34
		/// Pattern: ^AC[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="account_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^AC[0-9a-fA-F]{32}$")]
		public string Account_sid { get; set; }
		
		/// <summary>
		/// The unique SID identifier of the Call.
		/// Max length: 34
		/// Min length: 34
		/// Pattern: ^CA[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="call_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^CA[0-9a-fA-F]{32}$")]
		public string Call_sid { get; set; }
		
		/// <summary>
		/// Contains metrics and properties for the Twilio media gateway of a PSTN call.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="carrier_edge")]
		public object Carrier_edge { get; set; }
		
		/// <summary>
		/// Contains metrics and properties for the Twilio media gateway of a Client call.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="client_edge")]
		public object Client_edge { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="direction")]
		public System.Nullable<Insightsv1callmetricDirection> Direction { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="edge")]
		public Event_enum_twilio_edge Edge { get; set; }
		
		/// <summary>
		/// Contains metrics and properties for the SDK sensor library for Client calls.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sdk_edge")]
		public object Sdk_edge { get; set; }
		
		/// <summary>
		/// Contains metrics and properties for the Twilio media gateway of a SIP Interface or Trunking call.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sip_edge")]
		public object Sip_edge { get; set; }
		
		/// <summary>
		/// Timestamp of metric sample. Samples are taken every 10 seconds and contain the metrics for the previous 10 seconds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public string Timestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Insightsv1callmetricDirection
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="unknown")]
		unknown = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="inbound")]
		inbound = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="outbound")]
		outbound = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="both")]
		both = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Insightsv1callsummary
	{
		
		/// <summary>
		/// The unique SID identifier of the Account.
		/// Max length: 34
		/// Min length: 34
		/// Pattern: ^AC[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="account_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^AC[0-9a-fA-F]{32}$")]
		public string Account_sid { get; set; }
		
		/// <summary>
		/// Programmatically labeled annotations for the Call. Developers can update the Call Summary records with Annotation during or after a Call. Annotations can be updated as long as the Call Summary record is addressable via the API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="annotation")]
		public object Annotation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="answered_by")]
		public Call_summaries_enum_answered_by Answered_by { get; set; }
		
		/// <summary>
		/// Attributes capturing call-flow-specific details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public object Attributes { get; set; }
		
		/// <summary>
		/// The unique SID identifier of the Call.
		/// Max length: 34
		/// Min length: 34
		/// Pattern: ^CA[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="call_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^CA[0-9a-fA-F]{32}$")]
		public string Call_sid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="call_state")]
		public Call_summaries_enum_call_state Call_state { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="call_type")]
		public Call_summaries_enum_call_type Call_type { get; set; }
		
		/// <summary>
		/// Contains metrics and properties for the Twilio media gateway of a PSTN call.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="carrier_edge")]
		public object Carrier_edge { get; set; }
		
		/// <summary>
		/// Contains metrics and properties for the Twilio media gateway of a Client call.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="client_edge")]
		public object Client_edge { get; set; }
		
		/// <summary>
		/// Duration between when the call was answered and when it ended
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connect_duration")]
		public System.Nullable<System.Int32> Connect_duration { get; set; }
		
		/// <summary>
		/// The time at which the Call was created, given in ISO 8601 format. Can be different from `start_time` in the event of queueing due to CPS
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_time")]
		public System.Nullable<System.DateTimeOffset> Created_time { get; set; }
		
		/// <summary>
		/// Duration between when the call was initiated and the call was ended
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="duration")]
		public System.Nullable<System.Int32> Duration { get; set; }
		
		/// <summary>
		/// The time at which the Call was ended, given in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="end_time")]
		public System.Nullable<System.DateTimeOffset> End_time { get; set; }
		
		/// <summary>
		/// The calling party.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="from")]
		public object From { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="processing_state")]
		public Call_summaries_enum_processing_state Processing_state { get; set; }
		
		/// <summary>
		/// Contains edge-agnostic call-level details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
		
		/// <summary>
		/// Contains metrics and properties for the SDK sensor library for Client calls.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sdk_edge")]
		public object Sdk_edge { get; set; }
		
		/// <summary>
		/// Contains metrics and properties for the Twilio media gateway of a SIP Interface or Trunking call.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sip_edge")]
		public object Sip_edge { get; set; }
		
		/// <summary>
		/// The time at which the Call was started, given in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="start_time")]
		public System.Nullable<System.DateTimeOffset> Start_time { get; set; }
		
		/// <summary>
		/// Tags applied to calls by Voice Insights analysis indicating a condition that could result in subjective degradation of the call quality.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public string[] Tags { get; set; }
		
		/// <summary>
		/// The called party.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="to")]
		public object To { get; set; }
		
		/// <summary>
		/// Contains trusted communications details including Branded Call and verified caller ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trust")]
		public object Trust { get; set; }
		
		/// <summary>
		/// The URL of this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Insightsv1call_summaries
	{
		
		/// <summary>
		/// The unique SID identifier of the Account.
		/// Max length: 34
		/// Min length: 34
		/// Pattern: ^AC[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="account_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^AC[0-9a-fA-F]{32}$")]
		public string Account_sid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="annotation")]
		public object Annotation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="answered_by")]
		public Call_summaries_enum_answered_by Answered_by { get; set; }
		
		/// <summary>
		/// Attributes capturing call-flow-specific details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public object Attributes { get; set; }
		
		/// <summary>
		/// The unique SID identifier of the Call.
		/// Max length: 34
		/// Min length: 34
		/// Pattern: ^CA[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="call_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^CA[0-9a-fA-F]{32}$")]
		public string Call_sid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="call_state")]
		public Call_summaries_enum_call_state Call_state { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="call_type")]
		public Call_summaries_enum_call_type Call_type { get; set; }
		
		/// <summary>
		/// Contains metrics and properties for the Twilio media gateway of a PSTN call.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="carrier_edge")]
		public object Carrier_edge { get; set; }
		
		/// <summary>
		/// Contains metrics and properties for the Twilio media gateway of a Client call.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="client_edge")]
		public object Client_edge { get; set; }
		
		/// <summary>
		/// Duration between when the call was answered and when it ended
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connect_duration")]
		public System.Nullable<System.Int32> Connect_duration { get; set; }
		
		/// <summary>
		/// The time at which the Call was created, given in ISO 8601 format. Can be different from `start_time` in the event of queueing due to CPS
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_time")]
		public System.Nullable<System.DateTimeOffset> Created_time { get; set; }
		
		/// <summary>
		/// Duration between when the call was initiated and the call was ended
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="duration")]
		public System.Nullable<System.Int32> Duration { get; set; }
		
		/// <summary>
		/// The time at which the Call was ended, given in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="end_time")]
		public System.Nullable<System.DateTimeOffset> End_time { get; set; }
		
		/// <summary>
		/// The calling party.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="from")]
		public object From { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="processing_state")]
		public Call_summaries_enum_processing_state Processing_state { get; set; }
		
		/// <summary>
		/// Contains edge-agnostic call-level details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
		
		/// <summary>
		/// Contains metrics and properties for the SDK sensor library for Client calls.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sdk_edge")]
		public object Sdk_edge { get; set; }
		
		/// <summary>
		/// Contains metrics and properties for the Twilio media gateway of a SIP Interface or Trunking call.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sip_edge")]
		public object Sip_edge { get; set; }
		
		/// <summary>
		/// The time at which the Call was started, given in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="start_time")]
		public System.Nullable<System.DateTimeOffset> Start_time { get; set; }
		
		/// <summary>
		/// Tags applied to calls by Voice Insights analysis indicating a condition that could result in subjective degradation of the call quality.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public string[] Tags { get; set; }
		
		/// <summary>
		/// The called party.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="to")]
		public object To { get; set; }
		
		/// <summary>
		/// Contains trusted communications details including Branded Call and verified caller ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trust")]
		public object Trust { get; set; }
		
		/// <summary>
		/// The URL of this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Insightsv1conference
	{
		
		/// <summary>
		/// The unique SID identifier of the Account.
		/// Max length: 34
		/// Min length: 34
		/// Pattern: ^AC[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="account_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^AC[0-9a-fA-F]{32}$")]
		public string Account_sid { get; set; }
		
		/// <summary>
		/// The unique SID identifier of the Conference.
		/// Max length: 34
		/// Min length: 34
		/// Pattern: ^CF[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="conference_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^CF[0-9a-fA-F]{32}$")]
		public string Conference_sid { get; set; }
		
		/// <summary>
		/// Duration of the between conference start event and conference end event in seconds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connect_duration_seconds")]
		public System.Nullable<System.Int32> Connect_duration_seconds { get; set; }
		
		/// <summary>
		/// Conference creation date and time in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="create_time")]
		public System.Nullable<System.DateTimeOffset> Create_time { get; set; }
		
		/// <summary>
		/// Potential issues detected by Twilio during the conference.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="detected_issues")]
		public object Detected_issues { get; set; }
		
		/// <summary>
		/// Conference duration in seconds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="duration_seconds")]
		public System.Nullable<System.Int32> Duration_seconds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="end_reason")]
		public Conference_enum_conference_end_reason End_reason { get; set; }
		
		/// <summary>
		/// Conference end date and time in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="end_time")]
		public System.Nullable<System.DateTimeOffset> End_time { get; set; }
		
		/// <summary>
		/// Call SID of the participant whose actions ended the conference.
		/// Max length: 34
		/// Min length: 34
		/// Pattern: ^CA[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ended_by")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^CA[0-9a-fA-F]{32}$")]
		public string Ended_by { get; set; }
		
		/// <summary>
		/// Custom label for the conference resource, up to 64 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="friendly_name")]
		public string Friendly_name { get; set; }
		
		/// <summary>
		/// Contains a dictionary of URL links to nested resources of this Conference.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="links")]
		public string Links { get; set; }
		
		/// <summary>
		/// Actual maximum number of concurrent participants in the conference.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="max_concurrent_participants")]
		public System.Nullable<System.Int32> Max_concurrent_participants { get; set; }
		
		/// <summary>
		/// Maximum number of concurrent participants as specified by the configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="max_participants")]
		public System.Nullable<System.Int32> Max_participants { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mixer_region")]
		public Conference_enum_region Mixer_region { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mixer_region_requested")]
		public Conference_enum_region Mixer_region_requested { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="processing_state")]
		public Conference_enum_processing_state Processing_state { get; set; }
		
		/// <summary>
		/// Boolean. Indicates whether recording was enabled at the conference mixer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recording_enabled")]
		public System.Nullable<System.Boolean> Recording_enabled { get; set; }
		
		/// <summary>
		/// Timestamp in ISO 8601 format when the conference started. Conferences do not start until at least two participants join, at least one of whom has startConferenceOnEnter=true.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="start_time")]
		public System.Nullable<System.DateTimeOffset> Start_time { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public Conference_enum_conference_status Status { get; set; }
		
		/// <summary>
		/// Object. Contains details about conference tags including severity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tag_info")]
		public object Tag_info { get; set; }
		
		/// <summary>
		/// Tags for detected conference conditions and participant behaviors which may be of interest.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Conference_enum_tag[] Tags { get; set; }
		
		/// <summary>
		/// Unique conference participants based on caller ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unique_participants")]
		public System.Nullable<System.Int32> Unique_participants { get; set; }
		
		/// <summary>
		/// The URL of this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Insightsv1conferenceconference_participant
	{
		
		/// <summary>
		/// The unique SID identifier of the Account.
		/// Max length: 34
		/// Min length: 34
		/// Pattern: ^AC[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="account_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^AC[0-9a-fA-F]{32}$")]
		public string Account_sid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="call_direction")]
		public Conference_participant_enum_call_direction Call_direction { get; set; }
		
		/// <summary>
		/// Unique SID identifier of the call that generated the Participant resource.
		/// Max length: 34
		/// Min length: 34
		/// Pattern: ^CA[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="call_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^CA[0-9a-fA-F]{32}$")]
		public string Call_sid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="call_status")]
		public Conference_participant_enum_call_status Call_status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="call_type")]
		public Conference_participant_enum_call_type Call_type { get; set; }
		
		/// <summary>
		/// Call SIDs coached by this participant.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="coached_participants")]
		public string[] Coached_participants { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="conference_region")]
		public Conference_participant_enum_region Conference_region { get; set; }
		
		/// <summary>
		/// The unique SID identifier of the Conference.
		/// Max length: 34
		/// Min length: 34
		/// Pattern: ^CF[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="conference_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^CF[0-9a-fA-F]{32}$")]
		public string Conference_sid { get; set; }
		
		/// <summary>
		/// ISO alpha-2 country code of the participant based on caller ID or called number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country_code")]
		public string Country_code { get; set; }
		
		/// <summary>
		/// Participant durations in seconds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="duration_seconds")]
		public System.Nullable<System.Int32> Duration_seconds { get; set; }
		
		/// <summary>
		/// Object containing information of actions taken by participants. Contains a dictionary of URL links to nested resources of this Conference Participant.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="events")]
		public object Events { get; set; }
		
		/// <summary>
		/// Caller ID of the calling party.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="from")]
		public string From { get; set; }
		
		/// <summary>
		/// Boolean. Indicated whether participant was a coach.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="is_coach")]
		public System.Nullable<System.Boolean> Is_coach { get; set; }
		
		/// <summary>
		/// Boolean. Indicates whether participant had startConferenceOnEnter=true or endConferenceOnExit=true.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="is_moderator")]
		public System.Nullable<System.Boolean> Is_moderator { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="jitter_buffer_size")]
		public Conference_participant_enum_jitter_buffer_size Jitter_buffer_size { get; set; }
		
		/// <summary>
		/// ISO 8601 timestamp of participant join event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="join_time")]
		public System.Nullable<System.DateTimeOffset> Join_time { get; set; }
		
		/// <summary>
		/// The user-specified label of this participant.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
		
		/// <summary>
		/// ISO 8601 timestamp of participant leave event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="leave_time")]
		public System.Nullable<System.DateTimeOffset> Leave_time { get; set; }
		
		/// <summary>
		/// Object. Contains participant call quality metrics.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metrics")]
		public object Metrics { get; set; }
		
		/// <summary>
		/// Add Participant API only. Estimated time in queue at call creation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outbound_queue_length")]
		public System.Nullable<System.Int32> Outbound_queue_length { get; set; }
		
		/// <summary>
		/// Add Participant API only. Actual time in queue in seconds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outbound_time_in_queue")]
		public System.Nullable<System.Int32> Outbound_time_in_queue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="participant_region")]
		public Conference_participant_enum_region Participant_region { get; set; }
		
		/// <summary>
		/// SID for this participant.
		/// Max length: 34
		/// Min length: 34
		/// Pattern: ^CP[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="participant_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^CP[0-9a-fA-F]{32}$")]
		public string Participant_sid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="processing_state")]
		public Conference_enum_processing_state Processing_state { get; set; }
		
		/// <summary>
		/// Participant properties and metadata.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
		
		/// <summary>
		/// Called party.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="to")]
		public string To { get; set; }
		
		/// <summary>
		/// The URL of this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Insightsv1video_room_summary
	{
		
		/// <summary>
		/// Account SID associated with this room.
		/// Max length: 34
		/// Min length: 34
		/// Pattern: ^AC[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="account_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^AC[0-9a-fA-F]{32}$")]
		public string Account_sid { get; set; }
		
		/// <summary>
		/// Codecs used by participants in the room. Can be `VP8`, `H264`, or `VP9`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="codecs")]
		public Video_room_summary_enum_codec[] Codecs { get; set; }
		
		/// <summary>
		/// Actual number of concurrent participants.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="concurrent_participants")]
		public System.Nullable<System.Int32> Concurrent_participants { get; set; }
		
		/// <summary>
		/// Creation time of the room.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="create_time")]
		public System.Nullable<System.DateTimeOffset> Create_time { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="created_method")]
		public System.Nullable<Insightsv1video_room_summaryCreated_method> Created_method { get; set; }
		
		/// <summary>
		/// Total room duration from create time to end time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="duration_sec")]
		public System.Nullable<System.Int64> Duration_sec { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="edge_location")]
		public System.Nullable<Insightsv1video_room_summaryEdge_location> Edge_location { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="end_reason")]
		public System.Nullable<Insightsv1video_room_summaryEnd_reason> End_reason { get; set; }
		
		/// <summary>
		/// End time for the room.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="end_time")]
		public System.Nullable<System.DateTimeOffset> End_time { get; set; }
		
		/// <summary>
		/// Room subresources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="links")]
		public string Links { get; set; }
		
		/// <summary>
		/// Maximum number of participants allowed in the room at the same time allowed by the application settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="max_concurrent_participants")]
		public System.Nullable<System.Int32> Max_concurrent_participants { get; set; }
		
		/// <summary>
		/// Max number of total participants allowed by the application settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="max_participants")]
		public System.Nullable<System.Int32> Max_participants { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="media_region")]
		public System.Nullable<Insightsv1video_room_summaryMedia_region> Media_region { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="processing_state")]
		public System.Nullable<Insightsv1video_room_summaryProcessing_state> Processing_state { get; set; }
		
		/// <summary>
		/// Boolean indicating if recording is enabled for the room.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recording_enabled")]
		public System.Nullable<System.Boolean> Recording_enabled { get; set; }
		
		/// <summary>
		/// Room friendly name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="room_name")]
		public string Room_name { get; set; }
		
		/// <summary>
		/// Unique identifier for the room.
		/// Max length: 34
		/// Min length: 34
		/// Pattern: ^RM[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="room_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^RM[0-9a-fA-F]{32}$")]
		public string Room_sid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="room_status")]
		public System.Nullable<Insightsv1video_room_summaryRoom_status> Room_status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="room_type")]
		public System.Nullable<Insightsv1video_room_summaryRoom_type> Room_type { get; set; }
		
		/// <summary>
		/// Webhook provided for status callbacks.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status_callback")]
		public string Status_callback { get; set; }
		
		/// <summary>
		/// HTTP method provided for status callback URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status_callback_method")]
		public System.Nullable<Insightsv1video_room_summaryStatus_callback_method> Status_callback_method { get; set; }
		
		/// <summary>
		/// Combined amount of participant time in the room.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_participant_duration_sec")]
		public System.Nullable<System.Int64> Total_participant_duration_sec { get; set; }
		
		/// <summary>
		/// Combined amount of recorded seconds for participants in the room.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_recording_duration_sec")]
		public System.Nullable<System.Int64> Total_recording_duration_sec { get; set; }
		
		/// <summary>
		/// Unique number of participant identities.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unique_participant_identities")]
		public System.Nullable<System.Int32> Unique_participant_identities { get; set; }
		
		/// <summary>
		/// Number of participants. May include duplicate identities for participants who left and rejoined.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unique_participants")]
		public System.Nullable<System.Int32> Unique_participants { get; set; }
		
		/// <summary>
		/// URL for the room resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Video_room_summary_enum_codec
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VP8")]
		VP8 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="H264")]
		H264 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VP9")]
		VP9 = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Insightsv1video_room_summaryCreated_method
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="sdk")]
		sdk = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ad_hoc")]
		ad_hoc = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="api")]
		api = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Insightsv1video_room_summaryEdge_location
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ashburn")]
		ashburn = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="dublin")]
		dublin = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="frankfurt")]
		frankfurt = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="singapore")]
		singapore = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="sydney")]
		sydney = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="sao_paulo")]
		sao_paulo = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="roaming")]
		roaming = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="umatilla")]
		umatilla = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="tokyo")]
		tokyo = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Insightsv1video_room_summaryEnd_reason
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="room_ended_via_api")]
		room_ended_via_api = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="timeout")]
		timeout = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Insightsv1video_room_summaryMedia_region
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="us1")]
		us1 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="us2")]
		us2 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="au1")]
		au1 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="br1")]
		br1 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ie1")]
		ie1 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="jp1")]
		jp1 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="sg1")]
		sg1 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="in1")]
		in1 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="de1")]
		de1 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="gll")]
		gll = 9,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Insightsv1video_room_summaryProcessing_state
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="complete")]
		complete = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="in_progress")]
		in_progress = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Insightsv1video_room_summaryRoom_status
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="in_progress")]
		in_progress = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="completed")]
		completed = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Insightsv1video_room_summaryRoom_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="go")]
		go = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="peer_to_peer")]
		peer_to_peer = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group")]
		group = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group_small")]
		group_small = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Insightsv1video_room_summaryStatus_callback_method
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HEAD")]
		HEAD = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GET")]
		GET = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="POST")]
		POST = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PATCH")]
		PATCH = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PUT")]
		PUT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DELETE")]
		DELETE = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Insightsv1video_room_summaryvideo_participant_summary
	{
		
		/// <summary>
		/// Account SID associated with the room.
		/// Max length: 34
		/// Min length: 34
		/// Pattern: ^AC[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="account_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^AC[0-9a-fA-F]{32}$")]
		public string Account_sid { get; set; }
		
		/// <summary>
		/// Codecs detected from the participant. Can be `VP8`, `H264`, or `VP9`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="codecs")]
		public Video_participant_summary_enum_codec[] Codecs { get; set; }
		
		/// <summary>
		/// Amount of time in seconds the participant was in the room.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="duration_sec")]
		public System.Nullable<System.Int64> Duration_sec { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="edge_location")]
		public Insightsv1video_room_summaryEdge_location Edge_location { get; set; }
		
		/// <summary>
		/// Reason the participant left the room. See [the list of possible values here](https://www.twilio.com/docs/video/troubleshooting/video-log-analyzer-api#end_reason).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="end_reason")]
		public string End_reason { get; set; }
		
		/// <summary>
		/// Errors encountered by the participant.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error_code")]
		public System.Nullable<System.Int32> Error_code { get; set; }
		
		/// <summary>
		/// Twilio error code dictionary link.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error_code_url")]
		public string Error_code_url { get; set; }
		
		/// <summary>
		/// When the participant joined the room.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="join_time")]
		public System.Nullable<System.DateTimeOffset> Join_time { get; set; }
		
		/// <summary>
		/// When the participant left the room.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="leave_time")]
		public System.Nullable<System.DateTimeOffset> Leave_time { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="media_region")]
		public Insightsv1video_room_summaryMedia_region Media_region { get; set; }
		
		/// <summary>
		/// The application-defined string that uniquely identifies the participant within a Room.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="participant_identity")]
		public string Participant_identity { get; set; }
		
		/// <summary>
		/// Unique identifier for the participant.
		/// Max length: 34
		/// Min length: 34
		/// Pattern: ^PA[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="participant_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^PA[0-9a-fA-F]{32}$")]
		public string Participant_sid { get; set; }
		
		/// <summary>
		/// Object containing information about the participant's data from the room. See [below](https://www.twilio.com/docs/video/troubleshooting/video-log-analyzer-api#properties) for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
		
		/// <summary>
		/// Object containing information about the SDK name and version. See [below](https://www.twilio.com/docs/video/troubleshooting/video-log-analyzer-api#publisher_info) for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publisher_info")]
		public object Publisher_info { get; set; }
		
		/// <summary>
		/// Unique identifier for the room.
		/// Max length: 34
		/// Min length: 34
		/// Pattern: ^RM[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="room_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^RM[0-9a-fA-F]{32}$")]
		public string Room_sid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public Insightsv1video_room_summaryRoom_status Status { get; set; }
		
		/// <summary>
		/// URL of the participant resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Video_participant_summary_enum_codec
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VP8")]
		VP8 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="H264")]
		H264 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VP9")]
		VP9 = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Metric_enum_stream_direction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="unknown")]
		unknown = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="inbound")]
		inbound = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="outbound")]
		outbound = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="both")]
		both = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Metric_enum_twilio_edge
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="unknown_edge")]
		unknown_edge = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="carrier_edge")]
		carrier_edge = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="sip_edge")]
		sip_edge = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="sdk_edge")]
		sdk_edge = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="client_edge")]
		client_edge = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Summary_enum_answered_by
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="unknown")]
		unknown = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="machine_start")]
		machine_start = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="machine_end_beep")]
		machine_end_beep = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="machine_end_silence")]
		machine_end_silence = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="machine_end_other")]
		machine_end_other = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="human")]
		human = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fax")]
		fax = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Summary_enum_call_state
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ringing")]
		ringing = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="completed")]
		completed = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="busy")]
		busy = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fail")]
		fail = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="noanswer")]
		noanswer = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="canceled")]
		canceled = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="answered")]
		answered = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="undialed")]
		undialed = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Summary_enum_call_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="carrier")]
		carrier = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="sip")]
		sip = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="trunking")]
		trunking = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="client")]
		client = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Summary_enum_processing_state
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="complete")]
		complete = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="partial")]
		@partial = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Video_participant_summary_enum_edge_location
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ashburn")]
		ashburn = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="dublin")]
		dublin = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="frankfurt")]
		frankfurt = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="singapore")]
		singapore = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="sydney")]
		sydney = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="sao_paulo")]
		sao_paulo = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="roaming")]
		roaming = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="umatilla")]
		umatilla = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="tokyo")]
		tokyo = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Video_participant_summary_enum_room_status
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="in_progress")]
		in_progress = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="completed")]
		completed = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Video_participant_summary_enum_twilio_realm
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="us1")]
		us1 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="us2")]
		us2 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="au1")]
		au1 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="br1")]
		br1 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ie1")]
		ie1 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="jp1")]
		jp1 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="sg1")]
		sg1 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="in1")]
		in1 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="de1")]
		de1 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="gll")]
		gll = 9,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Video_room_summary_enum_created_method
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="sdk")]
		sdk = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ad_hoc")]
		ad_hoc = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="api")]
		api = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Video_room_summary_enum_edge_location
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ashburn")]
		ashburn = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="dublin")]
		dublin = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="frankfurt")]
		frankfurt = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="singapore")]
		singapore = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="sydney")]
		sydney = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="sao_paulo")]
		sao_paulo = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="roaming")]
		roaming = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="umatilla")]
		umatilla = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="tokyo")]
		tokyo = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Video_room_summary_enum_end_reason
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="room_ended_via_api")]
		room_ended_via_api = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="timeout")]
		timeout = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Video_room_summary_enum_processing_state
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="complete")]
		complete = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="in_progress")]
		in_progress = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Video_room_summary_enum_room_status
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="in_progress")]
		in_progress = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="completed")]
		completed = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Video_room_summary_enum_room_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="go")]
		go = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="peer_to_peer")]
		peer_to_peer = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group")]
		group = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group_small")]
		group_small = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Video_room_summary_enum_twilio_realm
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="us1")]
		us1 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="us2")]
		us2 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="au1")]
		au1 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="br1")]
		br1 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ie1")]
		ie1 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="jp1")]
		jp1 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="sg1")]
		sg1 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="in1")]
		in1 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="de1")]
		de1 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="gll")]
		gll = 9,
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Get a list of Conference Summaries.
		/// ListConference v1/Conferences
		/// </summary>
		/// <param name="ConferenceSid">The SID of the conference.</param>
		/// <param name="FriendlyName">Custom label for the conference resource, up to 64 characters.</param>
		/// <param name="Status">Conference status.</param>
		/// <param name="CreatedAfter">Conferences created after the provided timestamp specified in ISO 8601 format</param>
		/// <param name="CreatedBefore">Conferences created before the provided timestamp specified in ISO 8601 format.</param>
		/// <param name="MixerRegion">Twilio region where the conference media was mixed.</param>
		/// <param name="Tags">Tags applied by Twilio for common potential configuration, quality, or performance issues.</param>
		/// <param name="Subaccount">Account SID for the subaccount whose resources you wish to retrieve.</param>
		/// <param name="DetectedIssues">Potential configuration, behavior, or performance issues detected during the conference.</param>
		/// <param name="EndReason">Conference end reason; e.g. last participant left, modified by API, etc.</param>
		/// <param name="PageSize">How many resources to return in each list page. The default is 50, and the maximum is 1000.</param>
		/// <param name="Page">The page index. This value is simply for client state.</param>
		/// <param name="PageToken">The page token. This is provided by the API.</param>
		/// <returns>OK</returns>
		public async Task<ListConferenceReturn> ListConferenceAsync(string ConferenceSid, string FriendlyName, string Status, string CreatedAfter, string CreatedBefore, string MixerRegion, string Tags, string Subaccount, string DetectedIssues, string EndReason, int PageSize, int Page, string PageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/Conferences?ConferenceSid=" + (ConferenceSid==null? "" : System.Uri.EscapeDataString(ConferenceSid))+"&FriendlyName=" + (FriendlyName==null? "" : System.Uri.EscapeDataString(FriendlyName))+"&Status=" + (Status==null? "" : System.Uri.EscapeDataString(Status))+"&CreatedAfter=" + (CreatedAfter==null? "" : System.Uri.EscapeDataString(CreatedAfter))+"&CreatedBefore=" + (CreatedBefore==null? "" : System.Uri.EscapeDataString(CreatedBefore))+"&MixerRegion=" + (MixerRegion==null? "" : System.Uri.EscapeDataString(MixerRegion))+"&Tags=" + (Tags==null? "" : System.Uri.EscapeDataString(Tags))+"&Subaccount=" + (Subaccount==null? "" : System.Uri.EscapeDataString(Subaccount))+"&DetectedIssues=" + (DetectedIssues==null? "" : System.Uri.EscapeDataString(DetectedIssues))+"&EndReason=" + (EndReason==null? "" : System.Uri.EscapeDataString(EndReason))+"&PageSize="+PageSize+"&Page="+Page+"&PageToken=" + (PageToken==null? "" : System.Uri.EscapeDataString(PageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListConferenceReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a specific Conference Summary.
		/// FetchConference v1/Conferences/{ConferenceSid}
		/// </summary>
		/// <param name="ConferenceSid">The unique SID identifier of the Conference.</param>
		/// <returns>OK</returns>
		public async Task<Insightsv1conference> FetchConferenceAsync(string ConferenceSid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/Conferences/"+ (ConferenceSid==null? "" : System.Uri.EscapeDataString(ConferenceSid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Insightsv1conference>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a list of Conference Participants Summaries for a Conference.
		/// ListConferenceParticipant v1/Conferences/{ConferenceSid}/Participants
		/// </summary>
		/// <param name="ConferenceSid">The unique SID identifier of the Conference.</param>
		/// <param name="ParticipantSid">The unique SID identifier of the Participant.</param>
		/// <param name="Label">User-specified label for a participant.</param>
		/// <param name="Events">Conference events generated by application or participant activity; e.g. `hold`, `mute`, etc.</param>
		/// <param name="PageSize">How many resources to return in each list page. The default is 50, and the maximum is 1000.</param>
		/// <param name="Page">The page index. This value is simply for client state.</param>
		/// <param name="PageToken">The page token. This is provided by the API.</param>
		/// <returns>OK</returns>
		public async Task<ListConferenceParticipantReturn> ListConferenceParticipantAsync(string ConferenceSid, string ParticipantSid, string Label, string Events, int PageSize, int Page, string PageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/Conferences/"+ (ConferenceSid==null? "" : System.Uri.EscapeDataString(ConferenceSid))+"/Participants&ParticipantSid=" + (ParticipantSid==null? "" : System.Uri.EscapeDataString(ParticipantSid))+"&Label=" + (Label==null? "" : System.Uri.EscapeDataString(Label))+"&Events=" + (Events==null? "" : System.Uri.EscapeDataString(Events))+"&PageSize="+PageSize+"&Page="+Page+"&PageToken=" + (PageToken==null? "" : System.Uri.EscapeDataString(PageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListConferenceParticipantReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a specific Conference Participant Summary for a Conference.
		/// FetchConferenceParticipant v1/Conferences/{ConferenceSid}/Participants/{ParticipantSid}
		/// </summary>
		/// <param name="ConferenceSid">The unique SID identifier of the Conference.</param>
		/// <param name="ParticipantSid">The unique SID identifier of the Participant.</param>
		/// <param name="Events">Conference events generated by application or participant activity; e.g. `hold`, `mute`, etc.</param>
		/// <param name="Metrics">Object. Contains participant call quality metrics.</param>
		/// <returns>OK</returns>
		public async Task<Insightsv1conferenceconference_participant> FetchConferenceParticipantAsync(string ConferenceSid, string ParticipantSid, string Events, string Metrics, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/Conferences/"+ (ConferenceSid==null? "" : System.Uri.EscapeDataString(ConferenceSid))+"/Participants/"+ (ParticipantSid==null? "" : System.Uri.EscapeDataString(ParticipantSid))+"&Events=" + (Events==null? "" : System.Uri.EscapeDataString(Events))+"&Metrics=" + (Metrics==null? "" : System.Uri.EscapeDataString(Metrics));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Insightsv1conferenceconference_participant>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a list of Programmable Video Rooms.
		/// ListVideoRoomSummary v1/Video/Rooms
		/// </summary>
		/// <param name="RoomType">Type of room. Can be `go`, `peer_to_peer`, `group`, or `group_small`.</param>
		/// <param name="Codec">Codecs used by participants in the room. Can be `VP8`, `H264`, or `VP9`.</param>
		/// <param name="RoomName">Room friendly name.</param>
		/// <param name="CreatedAfter">Only read rooms that started on or after this ISO 8601 timestamp.</param>
		/// <param name="CreatedBefore">Only read rooms that started before this ISO 8601 timestamp.</param>
		/// <param name="PageSize">How many resources to return in each list page. The default is 50, and the maximum is 1000.</param>
		/// <param name="Page">The page index. This value is simply for client state.</param>
		/// <param name="PageToken">The page token. This is provided by the API.</param>
		/// <returns>OK</returns>
		public async Task<ListVideoRoomSummaryReturn> ListVideoRoomSummaryAsync(Video_room_summary_enum_room_type[] RoomType, Video_room_summary_enum_codec[] Codec, string RoomName, System.DateTimeOffset CreatedAfter, System.DateTimeOffset CreatedBefore, int PageSize, int Page, string PageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/Video/Rooms?"+string.Join("&", RoomType.Select(z => $"RoomType={z}"))+"&"+string.Join("&", Codec.Select(z => $"Codec={z}"))+"&RoomName=" + (RoomName==null? "" : System.Uri.EscapeDataString(RoomName))+"&CreatedAfter=" + CreatedAfter.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&CreatedBefore=" + CreatedBefore.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&PageSize="+PageSize+"&Page="+Page+"&PageToken=" + (PageToken==null? "" : System.Uri.EscapeDataString(PageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListVideoRoomSummaryReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Video Log Analyzer data for a Room.
		/// FetchVideoRoomSummary v1/Video/Rooms/{RoomSid}
		/// </summary>
		/// <param name="RoomSid">The SID of the Room resource.</param>
		/// <returns>OK</returns>
		public async Task<Insightsv1video_room_summary> FetchVideoRoomSummaryAsync(string RoomSid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/Video/Rooms/"+ (RoomSid==null? "" : System.Uri.EscapeDataString(RoomSid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Insightsv1video_room_summary>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a list of room participants.
		/// ListVideoParticipantSummary v1/Video/Rooms/{RoomSid}/Participants
		/// </summary>
		/// <param name="RoomSid">The SID of the Room resource.</param>
		/// <param name="PageSize">How many resources to return in each list page. The default is 50, and the maximum is 1000.</param>
		/// <param name="Page">The page index. This value is simply for client state.</param>
		/// <param name="PageToken">The page token. This is provided by the API.</param>
		/// <returns>OK</returns>
		public async Task<ListVideoParticipantSummaryReturn> ListVideoParticipantSummaryAsync(string RoomSid, int PageSize, int Page, string PageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/Video/Rooms/"+ (RoomSid==null? "" : System.Uri.EscapeDataString(RoomSid))+"/Participants&PageSize="+PageSize+"&Page="+Page+"&PageToken=" + (PageToken==null? "" : System.Uri.EscapeDataString(PageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListVideoParticipantSummaryReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Video Log Analyzer data for a Room Participant.
		/// FetchVideoParticipantSummary v1/Video/Rooms/{RoomSid}/Participants/{ParticipantSid}
		/// </summary>
		/// <param name="RoomSid">The SID of the Room resource.</param>
		/// <param name="ParticipantSid">The SID of the Participant resource.</param>
		/// <returns>OK</returns>
		public async Task<Insightsv1video_room_summaryvideo_participant_summary> FetchVideoParticipantSummaryAsync(string RoomSid, string ParticipantSid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/Video/Rooms/"+ (RoomSid==null? "" : System.Uri.EscapeDataString(RoomSid))+"/Participants/"+ (ParticipantSid==null? "" : System.Uri.EscapeDataString(ParticipantSid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Insightsv1video_room_summaryvideo_participant_summary>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the Voice Insights Settings.
		/// FetchAccountSettings v1/Voice/Settings
		/// </summary>
		/// <param name="SubaccountSid">The unique SID identifier of the Subaccount.</param>
		/// <returns>OK</returns>
		public async Task<Insightsv1account_settings> FetchAccountSettingsAsync(string SubaccountSid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/Voice/Settings?SubaccountSid=" + (SubaccountSid==null? "" : System.Uri.EscapeDataString(SubaccountSid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Insightsv1account_settings>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a list of Call Summaries.
		/// ListCallSummaries v1/Voice/Summaries
		/// </summary>
		/// <param name="From">A calling party. Could be an E.164 number, a SIP URI, or a Twilio Client registered name.</param>
		/// <param name="To">A called party. Could be an E.164 number, a SIP URI, or a Twilio Client registered name.</param>
		/// <param name="FromCarrier">An origination carrier.</param>
		/// <param name="ToCarrier">A destination carrier.</param>
		/// <param name="FromCountryCode">A source country code based on phone number in From.</param>
		/// <param name="ToCountryCode">A destination country code. Based on phone number in To.</param>
		/// <param name="Branded">A boolean flag indicating whether or not the calls were branded using Twilio Branded Calls.</param>
		/// <param name="VerifiedCaller">A boolean flag indicating whether or not the caller was verified using SHAKEN/STIR.</param>
		/// <param name="HasTag">A boolean flag indicating the presence of one or more [Voice Insights Call Tags](https://www.twilio.com/docs/voice/voice-insights/api/call/details-call-tags).</param>
		/// <param name="StartTime">A Start time of the calls. xm (x minutes), xh (x hours), xd (x days), 1w, 30m, 3d, 4w or datetime-ISO. Defaults to 4h.</param>
		/// <param name="EndTime">An End Time of the calls. xm (x minutes), xh (x hours), xd (x days), 1w, 30m, 3d, 4w or datetime-ISO. Defaults to 0m.</param>
		/// <param name="CallType">A Call Type of the calls. One of `carrier`, `sip`, `trunking` or `client`.</param>
		/// <param name="CallState">A Call State of the calls. One of `ringing`, `completed`, `busy`, `fail`, `noanswer`, `canceled`, `answered`, `undialed`.</param>
		/// <param name="Direction">A Direction of the calls. One of `outbound_api`, `outbound_dial`, `inbound`, `trunking_originating`, `trunking_terminating`.</param>
		/// <param name="ProcessingState">A Processing State of the Call Summaries. One of `completed`, `partial` or `all`.</param>
		/// <param name="SortBy">A Sort By criterion for the returned list of Call Summaries. One of `start_time` or `end_time`.</param>
		/// <param name="Subaccount">A unique SID identifier of a Subaccount.</param>
		/// <param name="AbnormalSession">A boolean flag indicating an abnormal session where the last SIP response was not 200 OK.</param>
		/// <param name="AnsweredBy">An Answered By value for the calls based on `Answering Machine Detection (AMD)`. One of `unknown`, `machine_start`, `machine_end_beep`, `machine_end_silence`, `machine_end_other`, `human` or `fax`.</param>
		/// <param name="AnsweredByAnnotation">Either machine or human.</param>
		/// <param name="ConnectivityIssueAnnotation">A Connectivity Issue with the calls. One of `no_connectivity_issue`, `invalid_number`, `caller_id`, `dropped_call`, or `number_reachability`.</param>
		/// <param name="QualityIssueAnnotation">A subjective Quality Issue with the calls. One of `no_quality_issue`, `low_volume`, `choppy_robotic`, `echo`, `dtmf`, `latency`, `owa`, `static_noise`.</param>
		/// <param name="SpamAnnotation">A boolean flag indicating spam calls.</param>
		/// <param name="CallScoreAnnotation">A Call Score of the calls. Use a range of 1-5 to indicate the call experience score, with the following mapping as a reference for the rated call [5: Excellent, 4: Good, 3 : Fair, 2 : Poor, 1: Bad].</param>
		/// <param name="PageSize">How many resources to return in each list page. The default is 50, and the maximum is 1000.</param>
		/// <param name="Page">The page index. This value is simply for client state.</param>
		/// <param name="PageToken">The page token. This is provided by the API.</param>
		/// <returns>OK</returns>
		public async Task<ListCallSummariesReturn> ListCallSummariesAsync(
					string From, 
					string To, 
					string FromCarrier, 
					string ToCarrier, 
					string FromCountryCode, 
					string ToCountryCode, 
					bool Branded, 
					bool VerifiedCaller, 
					bool HasTag, 
					string StartTime, 
					string EndTime, 
					string CallType, 
					string CallState, 
					string Direction, 
					Call_summaries_enum_processing_state_request ProcessingState, 
					Call_summaries_enum_sort_by SortBy, 
					string Subaccount, 
					bool AbnormalSession, 
					Call_summaries_enum_answered_by AnsweredBy, 
					string AnsweredByAnnotation, 
					string ConnectivityIssueAnnotation, 
					string QualityIssueAnnotation, 
					bool SpamAnnotation, 
					string CallScoreAnnotation, 
					int PageSize, 
					int Page, 
					string PageToken, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/Voice/Summaries?From=" + (From==null? "" : System.Uri.EscapeDataString(From))+"&To=" + (To==null? "" : System.Uri.EscapeDataString(To))+"&FromCarrier=" + (FromCarrier==null? "" : System.Uri.EscapeDataString(FromCarrier))+"&ToCarrier=" + (ToCarrier==null? "" : System.Uri.EscapeDataString(ToCarrier))+"&FromCountryCode=" + (FromCountryCode==null? "" : System.Uri.EscapeDataString(FromCountryCode))+"&ToCountryCode=" + (ToCountryCode==null? "" : System.Uri.EscapeDataString(ToCountryCode))+"&Branded="+Branded+"&VerifiedCaller="+VerifiedCaller+"&HasTag="+HasTag+"&StartTime=" + (StartTime==null? "" : System.Uri.EscapeDataString(StartTime))+"&EndTime=" + (EndTime==null? "" : System.Uri.EscapeDataString(EndTime))+"&CallType=" + (CallType==null? "" : System.Uri.EscapeDataString(CallType))+"&CallState=" + (CallState==null? "" : System.Uri.EscapeDataString(CallState))+"&Direction=" + (Direction==null? "" : System.Uri.EscapeDataString(Direction))+"&ProcessingState=" + ProcessingState+"&SortBy=" + SortBy+"&Subaccount=" + (Subaccount==null? "" : System.Uri.EscapeDataString(Subaccount))+"&AbnormalSession="+AbnormalSession+"&AnsweredBy=" + AnsweredBy+"&AnsweredByAnnotation=" + (AnsweredByAnnotation==null? "" : System.Uri.EscapeDataString(AnsweredByAnnotation))+"&ConnectivityIssueAnnotation=" + (ConnectivityIssueAnnotation==null? "" : System.Uri.EscapeDataString(ConnectivityIssueAnnotation))+"&QualityIssueAnnotation=" + (QualityIssueAnnotation==null? "" : System.Uri.EscapeDataString(QualityIssueAnnotation))+"&SpamAnnotation="+SpamAnnotation+"&CallScoreAnnotation=" + (CallScoreAnnotation==null? "" : System.Uri.EscapeDataString(CallScoreAnnotation))+"&PageSize="+PageSize+"&Page="+Page+"&PageToken=" + (PageToken==null? "" : System.Uri.EscapeDataString(PageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListCallSummariesReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the Annotation for a specific Call.
		/// FetchAnnotation v1/Voice/{CallSid}/Annotation
		/// </summary>
		/// <param name="CallSid">The unique SID identifier of the Call.</param>
		/// <returns>OK</returns>
		public async Task<Insightsv1callannotation> FetchAnnotationAsync(string CallSid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/Voice/"+ (CallSid==null? "" : System.Uri.EscapeDataString(CallSid))+"/Annotation";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Insightsv1callannotation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a list of Call Insight Events for a Call.
		/// ListEvent v1/Voice/{CallSid}/Events
		/// </summary>
		/// <param name="CallSid">The unique SID identifier of the Call.</param>
		/// <param name="Edge">The Edge of this Event. One of `unknown_edge`, `carrier_edge`, `sip_edge`, `sdk_edge` or `client_edge`.</param>
		/// <param name="PageSize">How many resources to return in each list page. The default is 50, and the maximum is 1000.</param>
		/// <param name="Page">The page index. This value is simply for client state.</param>
		/// <param name="PageToken">The page token. This is provided by the API.</param>
		/// <returns>OK</returns>
		public async Task<ListEventReturn> ListEventAsync(string CallSid, Event_enum_twilio_edge Edge, int PageSize, int Page, string PageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/Voice/"+ (CallSid==null? "" : System.Uri.EscapeDataString(CallSid))+"/Events&Edge=" + Edge+"&PageSize="+PageSize+"&Page="+Page+"&PageToken=" + (PageToken==null? "" : System.Uri.EscapeDataString(PageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListEventReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a list of Call Metrics for a Call.
		/// ListMetric v1/Voice/{CallSid}/Metrics
		/// </summary>
		/// <param name="CallSid">The unique SID identifier of the Call.</param>
		/// <param name="Edge">The Edge of this Metric. One of `unknown_edge`, `carrier_edge`, `sip_edge`, `sdk_edge` or `client_edge`.</param>
		/// <param name="Direction">The Direction of this Metric. One of `unknown`, `inbound`, `outbound` or `both`.</param>
		/// <param name="PageSize">How many resources to return in each list page. The default is 50, and the maximum is 1000.</param>
		/// <param name="Page">The page index. This value is simply for client state.</param>
		/// <param name="PageToken">The page token. This is provided by the API.</param>
		/// <returns>OK</returns>
		public async Task<ListMetricReturn> ListMetricAsync(string CallSid, Event_enum_twilio_edge Edge, Insightsv1callmetricDirection Direction, int PageSize, int Page, string PageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/Voice/"+ (CallSid==null? "" : System.Uri.EscapeDataString(CallSid))+"/Metrics&Edge=" + Edge+"&Direction=" + Direction+"&PageSize="+PageSize+"&Page="+Page+"&PageToken=" + (PageToken==null? "" : System.Uri.EscapeDataString(PageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListMetricReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a specific Call Summary.
		/// FetchSummary v1/Voice/{CallSid}/Summary
		/// </summary>
		/// <param name="CallSid">The unique SID identifier of the Call.</param>
		/// <param name="ProcessingState">The Processing State of this Call Summary. One of `complete`, `partial` or `all`.</param>
		/// <returns>OK</returns>
		public async Task<Insightsv1callsummary> FetchSummaryAsync(string CallSid, Call_summaries_enum_processing_state ProcessingState, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/Voice/"+ (CallSid==null? "" : System.Uri.EscapeDataString(CallSid))+"/Summary&ProcessingState=" + ProcessingState;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Insightsv1callsummary>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// FetchCall v1/Voice/{Sid}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<Insightsv1call> FetchCallAsync(string Sid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/Voice/"+ (Sid==null? "" : System.Uri.EscapeDataString(Sid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Insightsv1call>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public class ListConferenceReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="conferences")]
		public Insightsv1conference[] Conferences { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public ListConferenceReturnMeta Meta { get; set; }
	}
	
	public class ListConferenceReturnMeta
	{
		
		[System.Runtime.Serialization.DataMember(Name="first_page_url")]
		public string First_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="next_page_url")]
		public string Next_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page_size")]
		public System.Nullable<System.Int32> Page_size { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="previous_page_url")]
		public string Previous_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class ListConferenceParticipantReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public ListConferenceParticipantReturnMeta Meta { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="participants")]
		public Insightsv1conferenceconference_participant[] Participants { get; set; }
	}
	
	public class ListConferenceParticipantReturnMeta
	{
		
		[System.Runtime.Serialization.DataMember(Name="first_page_url")]
		public string First_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="next_page_url")]
		public string Next_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page_size")]
		public System.Nullable<System.Int32> Page_size { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="previous_page_url")]
		public string Previous_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class ListVideoRoomSummaryReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public ListVideoRoomSummaryReturnMeta Meta { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rooms")]
		public Insightsv1video_room_summary[] Rooms { get; set; }
	}
	
	public class ListVideoRoomSummaryReturnMeta
	{
		
		[System.Runtime.Serialization.DataMember(Name="first_page_url")]
		public string First_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="next_page_url")]
		public string Next_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page_size")]
		public System.Nullable<System.Int32> Page_size { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="previous_page_url")]
		public string Previous_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class ListVideoParticipantSummaryReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public ListVideoParticipantSummaryReturnMeta Meta { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="participants")]
		public Insightsv1video_room_summaryvideo_participant_summary[] Participants { get; set; }
	}
	
	public class ListVideoParticipantSummaryReturnMeta
	{
		
		[System.Runtime.Serialization.DataMember(Name="first_page_url")]
		public string First_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="next_page_url")]
		public string Next_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page_size")]
		public System.Nullable<System.Int32> Page_size { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="previous_page_url")]
		public string Previous_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class ListCallSummariesReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="call_summaries")]
		public Insightsv1call_summaries[] Call_summaries { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public ListCallSummariesReturnMeta Meta { get; set; }
	}
	
	public class ListCallSummariesReturnMeta
	{
		
		[System.Runtime.Serialization.DataMember(Name="first_page_url")]
		public string First_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="next_page_url")]
		public string Next_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page_size")]
		public System.Nullable<System.Int32> Page_size { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="previous_page_url")]
		public string Previous_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class ListEventReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="events")]
		public Insightsv1callevent[] Events { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public ListEventReturnMeta Meta { get; set; }
	}
	
	public class ListEventReturnMeta
	{
		
		[System.Runtime.Serialization.DataMember(Name="first_page_url")]
		public string First_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="next_page_url")]
		public string Next_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page_size")]
		public System.Nullable<System.Int32> Page_size { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="previous_page_url")]
		public string Previous_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class ListMetricReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public ListMetricReturnMeta Meta { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="metrics")]
		public Insightsv1callmetric[] Metrics { get; set; }
	}
	
	public class ListMetricReturnMeta
	{
		
		[System.Runtime.Serialization.DataMember(Name="first_page_url")]
		public string First_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="next_page_url")]
		public string Next_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page_size")]
		public System.Nullable<System.Int32> Page_size { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="previous_page_url")]
		public string Previous_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
