//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Get SKU Bindings by SKU ID
		/// Retrieves SKU Bindings details by SKU ID.
		/// 
		/// ## Response body example
		/// 
		/// ```json
		/// [
		/// {
		/// "Id": 48,
		/// "SellerId": "cosmetics1",
		/// "StockKeepingUnitId": 1,
		/// "SellerSkuId": "42",
		/// "IsActive": true,
		/// "LastUpdateDate": "2020-10-21T19:13:00.657",
		/// "SalesPolicy": 0
		/// }
		/// ]
		/// ```
		/// GetbySkuId catalog/pvt/skusellers/{skuId}
		/// </summary>
		/// <param name="skuId">SKU's unique identifier in the marketplace.</param>
		/// <returns>OK</returns>
		public async Task<GetbySkuIdReturn[]> GetbySkuIdAsync(string skuId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "catalog/pvt/skusellers/"+ (skuId==null? "" : System.Uri.EscapeDataString(skuId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetbySkuIdReturn[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Activate SKU Binding
		/// Changes the status of an SKU Binding to active, setting `isActive` to `true`.
		/// 
		/// > ℹ This path is an updated version of `/api/catalog_system/pvt/skuseller/activate/{sellerId}/{skuSellerId}`.
		/// ActivateSKUBinding sku-binding/pvt/skuseller/activate/{sellerId}/{skuSellerId}
		/// </summary>
		/// <param name="sellerId">ID that identifies the seller in the marketplace. It can be the same as the seller name or a unique number. Check the **Sellers management** section in the Admin to get the correct ID.</param>
		/// <param name="skuSellerId">SKU ID in the seller's store.</param>
		/// <returns>OK</returns>
		public async Task ActivateSKUBindingAsync(string sellerId, string skuSellerId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sku-binding/pvt/skuseller/activate/"+ (sellerId==null? "" : System.Uri.EscapeDataString(sellerId))+"/"+ (skuSellerId==null? "" : System.Uri.EscapeDataString(skuSellerId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get SKU Bindings information
		/// Retrieves SKU Bindings administrative information using optional query params `sellerId`, `skuId`, `sellerSkuId` and `IsActive` to filter results and `size` to restrict the amount of results.
		/// 
		/// > ℹ This path is an updated version of `/api/catalog_system/pvt/skuseller/admin`.
		/// 
		/// ## Response body example
		/// 
		/// ```json
		/// [
		/// {
		/// "IsPersisted": true,
		/// "IsRemoved": false,
		/// "SkuSellerId": 1,
		/// "UpdateDate": "2019-12-04T01:56:00.673Z",
		/// "RequestedUpdateDate": null,
		/// "SellerStockKeepingUnitId": "12",
		/// "SellerId": "cosmetics1",
		/// "StockKeepingUnitId": 25,
		/// "IsActive": true
		/// }
		/// ]
		/// ```
		/// Getpagedadmin sku-binding/pvt/skuseller/admin
		/// </summary>
		/// <param name="sellerId">ID that identifies the seller in the marketplace. It can be the same as the seller name or a unique number. Check the **Sellers management** section in the Admin to get the correct ID.</param>
		/// <param name="skuId">SKU's unique identifier in the marketplace.</param>
		/// <param name="sellerSkuId">SKU ID in the seller's store.</param>
		/// <param name="isActive">Defines if the SKU binding is active.</param>
		/// <param name="size">Amount of results.</param>
		/// <returns>OK</returns>
		public async Task<GetpagedadminReturn> GetpagedadminAsync(string sellerId, string skuId, string sellerSkuId, bool isActive, string size, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sku-binding/pvt/skuseller/admin?sellerId=" + (sellerId==null? "" : System.Uri.EscapeDataString(sellerId))+"&skuId=" + (skuId==null? "" : System.Uri.EscapeDataString(skuId))+"&sellerSkuId=" + (sellerSkuId==null? "" : System.Uri.EscapeDataString(sellerSkuId))+"&isActive="+isActive+"&size=" + (size==null? "" : System.Uri.EscapeDataString(size));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetpagedadminReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Change Notification with Seller ID and Seller SKU ID
		/// The seller is responsible for suggesting new SKUs to be sold in the VTEX marketplace and also for informing the marketplace about changes in their SKUs that already exist in the marketplace. Both actions start with a catalog notification, which is made by this request.
		/// 
		/// With this notification, the seller is telling the marketplace that something has changed about a specific SKU, like price or inventory, or that this is a new SKU that the seller would like to offer to the marketplace.
		/// 
		/// There are two information expected by the marketplace in this request: the `sellerId`, which identifies the seller, and the `sellerSkuId`, which identifies the binding of the seller with the SKU.
		/// 
		/// Both information are passed through the request URL. The body of the request should be empty.
		/// > ℹ This path is an updated version of `/api/catalog_system/pvt/skuseller/changenotification/{sellerId}/{sellerSkuId}`.
		/// 
		/// ## Example
		/// 
		/// Let's say your seller has the ID `123` in the marketplace and you want to inform the marketplace that has been a change in the SKU with ID `700`.
		/// 
		/// In this case, you would have to replace the `sellerId` parameter with the value `123` and the `skuId` parameter with the value `700`. The URL of the request would be the following.
		/// 
		/// ```
		/// https://{{accountName}}.vtexcommercestable.com.br/api/sku-binding/pvt/skuseller/changenotification/123/700
		/// ```
		/// 
		/// ## Response codes
		/// 
		/// The following response codes are possible for this request.
		/// * 200: the SKU whose ID was informed in the URL already exists in the marketplace and was found. The marketplace can now proceed with a fulfillment simulation in order to get updated information about this SKU's inventory and price.
		/// * 403: Failure in the authentication.
		/// * 404: the SKU was not found in the marketplace. The body of the response, in this case, should follow this format: "Seller StockKeepingUnit `{{skuId}}` not found for this seller id `{{sellerId}}`. This means that the seller can now proceed with sending an offer to the marketplace in order to suggest that this SKU is sold there.
		/// * 429: Failure due to too many requests.
		/// SKU_BindingsPostBySellerIdAndSellerSkuId sku-binding/pvt/skuseller/changenotification/{sellerId}/{sellerSkuId}
		/// </summary>
		/// <param name="sellerId">ID that identifies the seller in the marketplace. It can be the same as the seller name or a unique number. Check the **Sellers management** section in the Admin to get the correct ID.</param>
		/// <param name="sellerSkuId">ID of the binding of the seller with the SKU.</param>
		/// <returns>OK</returns>
		public async Task SKU_BindingsPostBySellerIdAndSellerSkuIdAsync(string sellerId, string sellerSkuId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sku-binding/pvt/skuseller/changenotification/"+ (sellerId==null? "" : System.Uri.EscapeDataString(sellerId))+"/"+ (sellerSkuId==null? "" : System.Uri.EscapeDataString(sellerSkuId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Change Notification with SKU ID
		/// The seller is responsible for suggesting new SKUs to be sold in the VTEX marketplace and also for informing the marketplace about changes in their SKUs that already exist in the marketplace. Both actions start with a catalog notification, which is made by this request.
		/// 
		/// With this notification, the seller is telling the marketplace that something has changed about a specific SKU, like price or inventory, or that this is a new SKU that the seller would like to offer to the marketplace.
		/// 
		/// The body of the request should be empty.
		/// 
		/// > ℹ This path is an updated version of `/api/catalog_system/pvt/skuseller/changenotification/{skuId}`.
		/// ChangeNotification sku-binding/pvt/skuseller/changenotification/{skuId}
		/// </summary>
		/// <param name="skuId">A string that identifies the SKU in the marketplace. This is the ID that the marketplace will use to look for the SKU whose change the seller wants to inform. If the marketplace finds this ID, it responds with status code `200`. Otherwise, it responds with status code `404`.</param>
		/// <returns>OK</returns>
		public async Task ChangeNotificationAsync(string skuId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sku-binding/pvt/skuseller/changenotification/"+ (skuId==null? "" : System.Uri.EscapeDataString(skuId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deactivate SKU Binding
		/// Changes the status of an SKU Binding to inactive, setting `isActive` to `false`.
		/// 
		/// > ℹ This path is an updated version of `/api/catalog_system/pvt/skuseller/inactivate/{sellerId}/{skuSellerId}`.
		/// DeactivateSKUBinding sku-binding/pvt/skuseller/inactivate/{sellerId}/{skuSellerId}
		/// </summary>
		/// <param name="sellerId">ID that identifies the seller in the marketplace. It can be the same as the seller name or a unique number. Check the **Sellers management** section in the Admin to get the correct ID.</param>
		/// <param name="skuSellerId">SKU ID in the seller's store.</param>
		/// <returns>OK</returns>
		public async Task DeactivateSKUBindingAsync(string sellerId, string skuSellerId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sku-binding/pvt/skuseller/inactivate/"+ (sellerId==null? "" : System.Uri.EscapeDataString(sellerId))+"/"+ (skuSellerId==null? "" : System.Uri.EscapeDataString(skuSellerId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Insert SKU Binding
		/// Creates an SKU Binding, associating a seller's SKU with a marketplace's SKU.
		/// 
		/// > ℹ This path is an updated version of `/api/catalog_system/pvt/skuseller/insertion`.
		/// InsertSKUBinding sku-binding/pvt/skuseller/insertion
		/// </summary>
		/// <param name="requestBody">Request body</param>
		/// <returns>OK</returns>
		public async Task InsertSKUBindingAsync(InsertSKUBindingPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sku-binding/pvt/skuseller/insertion";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get all SKU Bindings by Seller ID
		/// Retrieves a list of SKU Bindings given a specific Seller ID.
		/// 
		/// > ℹ This path is an updated version of `/api/catalog_system/pvt/skuseller/list/bysellerId/{sellerId}`.
		/// 
		/// ## Response body example
		/// 
		/// ```json
		/// [
		/// {
		/// "SellerStockKeepingUnitId": "24",
		/// "FreightCommissionPercentage": null,
		/// "ProductCommissionPercentage": null,
		/// "SellerId": "vtxkfj7352",
		/// "StockKeepingUnitId": 121,
		/// "IsActive": true
		/// }
		/// ]
		/// ```
		/// GetallbySellerId sku-binding/pvt/skuseller/list/bysellerId/{sellerId}
		/// </summary>
		/// <param name="sellerId">ID that identifies the seller in the marketplace. It can be the same as the seller name or a unique number. Check the **Sellers management** section in the Admin to get the correct ID.</param>
		/// <returns>OK</returns>
		public async Task<GetallbySellerIdReturn[]> GetallbySellerIdAsync(string sellerId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sku-binding/pvt/skuseller/list/bysellerId/"+ (sellerId==null? "" : System.Uri.EscapeDataString(sellerId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetallbySellerIdReturn[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get paged SKU Bindings by Seller ID
		/// Retrieves a paged list of SKU Bindings given a specific Seller ID.
		/// 
		/// > ℹ This path is an updated version of `/api/catalog_system/pvt/skuseller/paged/sellerid/{sellerId}`.
		/// 
		/// ## Response body example
		/// 
		/// ```json
		/// [
		/// {
		/// "SellerId": "vtxkfj7352",
		/// "StockKeepingUnitId": 121,
		/// "SellerStockKeepingUnitId": "24",
		/// "IsActive": true,
		/// "FreightCommissionPercentage": null,
		/// "ProductCommissionPercentage": null
		/// },
		/// {
		/// "SellerId": "vtxkfj7352",
		/// "StockKeepingUnitId": 14,
		/// "SellerStockKeepingUnitId": "60",
		/// "IsActive": true,
		/// "FreightCommissionPercentage": null,
		/// "ProductCommissionPercentage": null
		/// }
		/// ]
		/// ```
		/// GetpagedbySellerId sku-binding/pvt/skuseller/paged/sellerid/{sellerId}
		/// </summary>
		/// <param name="page">Page number.</param>
		/// <param name="size">Amount of results per page.</param>
		/// <param name="sellerId">ID that identifies the seller in the marketplace. It can be the same as the seller name or a unique number. Check the **Sellers management** section in the Admin to get the correct ID.</param>
		/// <returns>OK</returns>
		public async Task<GetpagedbySellerIdReturn[]> GetpagedbySellerIdAsync(string page, string size, string sellerId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sku-binding/pvt/skuseller/paged/sellerid/"+ (sellerId==null? "" : System.Uri.EscapeDataString(sellerId))+"?page=" + (page==null? "" : System.Uri.EscapeDataString(page))+"&size=" + (size==null? "" : System.Uri.EscapeDataString(size));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetpagedbySellerIdReturn[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Remove a seller's SKU Binding
		/// Remove a seller's SKU binding, given the Seller ID and the SKU ID in the seller's store.
		/// 
		/// > ℹ This path is an updated version of `/api/catalog_system/pvt/skuseller/remove/{sellerId}/{sellerSkuId}`.
		/// DeleteSKUsellerassociation sku-binding/pvt/skuseller/remove/{sellerId}/{sellerSkuId}
		/// </summary>
		/// <param name="sellerId">ID that identifies the seller in the marketplace. It can be the same as the seller name or a unique number. Check the **Sellers management** section in the Admin to get the correct ID.</param>
		/// <param name="sellerSkuId">SKU ID in the seller's store.</param>
		/// <returns>OK</returns>
		public async Task DeleteSKUsellerassociationAsync(string sellerId, string sellerSkuId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sku-binding/pvt/skuseller/remove/"+ (sellerId==null? "" : System.Uri.EscapeDataString(sellerId))+"/"+ (sellerSkuId==null? "" : System.Uri.EscapeDataString(sellerSkuId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get details of a seller's SKU
		/// Retrieves the details of a seller's SKU given a seller ID and the SKU ID in the seller's store.
		/// 
		/// > ℹ This path is an updated version of `/api/catalog_system/pvt/skuseller/{sellerId}/{sellerSkuId}`.
		/// 
		/// ## Response body example
		/// 
		/// ```json
		/// {
		/// "IsPersisted": true,
		/// "IsRemoved": false,
		/// "SkuSellerId": 102,
		/// "UpdateDate": "2021-04-12T20:06:59.413Z",
		/// "RequestedUpdateDate": null,
		/// "SellerStockKeepingUnitId": "71",
		/// "SellerId": "vtxkfj7352",
		/// "StockKeepingUnitId": 1,
		/// "IsActive": true
		/// }
		/// ```
		/// GetSKUseller sku-binding/pvt/skuseller/{sellerId}/{sellerSkuId}
		/// </summary>
		/// <param name="sellerId">ID that identifies the seller in the marketplace. It can be the same as the seller name or a unique number. Check the **Sellers management** section in the Admin to get the correct ID.</param>
		/// <param name="sellerSkuId">SKU ID in the seller's store.</param>
		/// <returns>OK</returns>
		public async Task<GetSKUsellerReturn> GetSKUsellerAsync(string sellerId, string sellerSkuId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sku-binding/pvt/skuseller/"+ (sellerId==null? "" : System.Uri.EscapeDataString(sellerId))+"/"+ (sellerSkuId==null? "" : System.Uri.EscapeDataString(sellerSkuId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetSKUsellerReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Bind a seller's SKU to another SKU
		/// Associates a seller's SKU to another marketplace SKU.
		/// 
		/// > ℹ This path is an updated version of `/api/catalog_system/pvt/skuseller/{sellerId}/{sellerSkuId}`.
		/// 
		/// ## Request body example
		/// 
		/// ```json
		/// {
		/// "StockKeepingUnitId": 1
		/// }
		/// ```
		/// Bindtoanothersku sku-binding/pvt/skuseller/{sellerId}/{sellerSkuId}
		/// </summary>
		/// <param name="sellerId">ID that identifies the seller in the marketplace. It can be the same as the seller name or a unique number. Check the **Sellers management** section in the Admin to get the correct ID.</param>
		/// <param name="sellerSkuId">SKU ID in the seller's store.</param>
		/// <param name="requestBody">Request body</param>
		public async Task BindtoanotherskuAsync(string sellerId, string sellerSkuId, BindtoanotherskuPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sku-binding/pvt/skuseller/"+ (sellerId==null? "" : System.Uri.EscapeDataString(sellerId))+"/"+ (sellerSkuId==null? "" : System.Uri.EscapeDataString(sellerSkuId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
	
	public class GetbySkuIdReturn
	{
		
		/// <summary>
		/// SKU Binding ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Defines if the SKU binding is active.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsActive { get; set; }
		
		/// <summary>
		/// Date when the SKU binding was updated for the last time, in UTC format.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string LastUpdateDate { get; set; }
		
		/// <summary>
		/// Sales policy ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SalesPolicy { get; set; }
		
		/// <summary>
		/// ID that identifies the seller in the marketplace. It can be the same as the seller name or a unique number. Check the **Sellers management** section in the Admin to get the correct ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SellerId { get; set; }
		
		/// <summary>
		/// SKU seller ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SellerSkuId { get; set; }
		
		/// <summary>
		/// SKU ID in the VTEX marketplace.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> StockKeepingUnitId { get; set; }
	}
	
	public class GetpagedadminReturn
	{
		
		/// <summary>
		/// Defines if the SKU binding is active.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsActive { get; set; }
		
		/// <summary>
		/// Defines if the seller is persisted.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsPersisted { get; set; }
		
		/// <summary>
		/// Defines if the seller is removed.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsRemoved { get; set; }
		
		/// <summary>
		/// Date when an SKU binding update was requested for the last time, in UTC format.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string RequestedUpdateDate { get; set; }
		
		/// <summary>
		/// ID that identifies the seller in the marketplace. It can be the same as the seller name or a unique number. Check the **Sellers management** section in the Admin to get the correct ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SellerId { get; set; }
		
		/// <summary>
		/// SKU ID in the seller's store.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SellerStockKeepingUnitId { get; set; }
		
		/// <summary>
		/// SKU Binding ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SkuSellerId { get; set; }
		
		/// <summary>
		/// SKU ID in the VTEX marketplace.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> StockKeepingUnitId { get; set; }
		
		/// <summary>
		/// Date when the SKU binding was updated for the last time, in UTC format.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string UpdateDate { get; set; }
	}
	
	public class InsertSKUBindingPostBody
	{
		
		/// <summary>
		/// Defines if the SKU binding is active.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool IsActive { get; set; }
		
		/// <summary>
		/// ID that identifies the seller in the marketplace. It can be the same as the seller name or a unique number. Check the **Sellers management** section in the Admin to get the correct ID.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SellerId { get; set; }
		
		/// <summary>
		/// SKU seller ID.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SellerStockKeepingUnitId { get; set; }
		
		/// <summary>
		/// SKU ID in the marketplace.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int StockKeepingUnitId { get; set; }
	}
	
	public class GetallbySellerIdReturn
	{
		
		/// <summary>
		/// The percentage that must be filled in as agreed between the marketplace and the seller.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> FreightCommissionPercentage { get; set; }
		
		/// <summary>
		/// Defines if the SKU binding is active.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsActive { get; set; }
		
		/// <summary>
		/// The percentage that must be filled in as agreed between the marketplace and the seller. If there is no such commission, please fill in the field with the value: `0.00`.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> ProductCommissionPercentage { get; set; }
		
		/// <summary>
		/// ID that identifies the seller in the marketplace. It can be the same as the seller name or a unique number. Check the **Sellers management** section in the Admin to get the correct ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SellerId { get; set; }
		
		/// <summary>
		/// SKU ID in the seller's store.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SellerStockKeepingUnitId { get; set; }
		
		/// <summary>
		/// SKU ID in the marketplace.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> StockKeepingUnitId { get; set; }
	}
	
	public class GetpagedbySellerIdReturn
	{
		
		/// <summary>
		/// The percentage that must be filled in as agreed between the marketplace and the seller.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> FreightCommissionPercentage { get; set; }
		
		/// <summary>
		/// Defines if the SKU binding is active.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsActive { get; set; }
		
		/// <summary>
		/// The percentage that must be filled in as agreed between the marketplace and the seller. If there is no such commission, please fill in the field with the value: `0.00`.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> ProductCommissionPercentage { get; set; }
		
		/// <summary>
		/// ID that identifies the seller in the marketplace. It can be the same as the seller name or a unique number. Check the **Sellers management** section in the Admin to get the correct ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SellerId { get; set; }
		
		/// <summary>
		/// SKU ID in the seller's store.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SellerStockKeepingUnitId { get; set; }
		
		/// <summary>
		/// SKU ID in the marketplace.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> StockKeepingUnitId { get; set; }
	}
	
	public class GetSKUsellerReturn
	{
		
		/// <summary>
		/// Defines if the SKU binding is active.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool IsActive { get; set; }
		
		/// <summary>
		/// Defines if the seller is persisted.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool IsPersisted { get; set; }
		
		/// <summary>
		/// Defines if the seller is removed.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool IsRemoved { get; set; }
		
		/// <summary>
		/// Date when an SKU binding update was requested for the last time, in UTC format.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RequestedUpdateDate { get; set; }
		
		/// <summary>
		/// ID that identifies the seller in the marketplace. It can be the same as the seller name or a unique number. Check the **Sellers management** section in the Admin to get the correct ID.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SellerId { get; set; }
		
		/// <summary>
		/// SKU seller ID.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SellerStockKeepingUnitId { get; set; }
		
		/// <summary>
		/// SKU ID in the seller's store.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int SkuSellerId { get; set; }
		
		/// <summary>
		/// SKU ID in the VTEX marketplace.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int StockKeepingUnitId { get; set; }
		
		/// <summary>
		/// Date when the SKU binding was updated for the last time, in UTC format.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string UpdateDate { get; set; }
	}
	
	public class BindtoanotherskuPutBody
	{
		
		/// <summary>
		/// SKU ID in the marketplace.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int StockKeepingUnitId { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
