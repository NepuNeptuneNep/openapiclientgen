//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AnalyzeDocumentResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DocumentMetadata DocumentMetadata { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Block[] Blocks { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HumanLoopActivationOutput HumanLoopActivationOutput { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AnalyzeDocumentModelVersion { get; set; }
	}
	
	/// <summary>
	/// Information about the input document.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DocumentMetadata
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Pages { get; set; }
	}
	
	/// <summary>
	/// <p>A <code>Block</code> represents items that are recognized in a document within a group of pixels close to each other. The information returned in a <code>Block</code> object depends on the type of operation. In text detection for documents (for example <a>DetectDocumentText</a>), you get information about the detected words and lines of text. In text analysis (for example <a>AnalyzeDocument</a>), you can also get information about the fields, tables, and selection elements that are detected in the document.</p> <p>An array of <code>Block</code> objects is returned by both synchronous and asynchronous operations. In synchronous operations, such as <a>DetectDocumentText</a>, the array of <code>Block</code> objects is the entire set of results. In asynchronous operations, such as <a>GetDocumentAnalysis</a>, the array is returned over one or more responses.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/textract/latest/dg/how-it-works.html">How Amazon Textract Works</a>.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Block
	{
		
		[System.Runtime.Serialization.DataMember()]
		public BlockType BlockType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public float Confidence { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Text { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TextType TextType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> RowIndex { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ColumnIndex { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> RowSpan { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ColumnSpan { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Geometry Geometry { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Relationship[] Relationships { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EntityType[] EntityTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SelectionStatus SelectionStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Page { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Query Query { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BlockType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KEY_VALUE_SET = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PAGE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LINE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WORD = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TABLE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CELL = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SELECTION_ELEMENT = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MERGED_CELL = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TITLE = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUERY = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUERY_RESULT = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SIGNATURE = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TABLE_TITLE = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TABLE_FOOTER = 13,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum TextType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HANDWRITING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRINTED = 1,
	}
	
	/// <summary>
	/// Information about where the following items are located on a document page: detected page, text, key-value pairs, tables, table cells, and selection elements.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Geometry
	{
		
		[System.Runtime.Serialization.DataMember()]
		public BoundingBox BoundingBox { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Point[] Polygon { get; set; }
	}
	
	/// <summary>
	/// <p>The bounding box around the detected page, text, key-value pair, table, table cell, or selection element on a document page. The <code>left</code> (x-coordinate) and <code>top</code> (y-coordinate) are coordinates that represent the top and left sides of the bounding box. Note that the upper-left corner of the image is the origin (0,0). </p> <p>The <code>top</code> and <code>left</code> values returned are ratios of the overall document page size. For example, if the input image is 700 x 200 pixels, and the top-left coordinate of the bounding box is 350 x 50 pixels, the API returns a <code>left</code> value of 0.5 (350/700) and a <code>top</code> value of 0.25 (50/200).</p> <p>The <code>width</code> and <code>height</code> values represent the dimensions of the bounding box as a ratio of the overall document page dimension. For example, if the document page size is 700 x 200 pixels, and the bounding box width is 70 pixels, the width returned is 0.1. </p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BoundingBox
	{
		
		[System.Runtime.Serialization.DataMember()]
		public float Width { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public float Height { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public float Left { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public float Top { get; set; }
	}
	
	/// <summary>
	/// <p>The X and Y coordinates of a point on a document page. The X and Y values that are returned are ratios of the overall document page size. For example, if the input document is 700 x 200 and the operation returns X=0.5 and Y=0.25, then the point is at the (350,50) pixel coordinate on the document page.</p> <p>An array of <code>Point</code> objects, <code>Polygon</code>, is returned by <a>DetectDocumentText</a>. <code>Polygon</code> represents a fine-grained polygon around detected text. For more information, see Geometry in the Amazon Textract Developer Guide. </p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Point
	{
		
		[System.Runtime.Serialization.DataMember()]
		public float X { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public float Y { get; set; }
	}
	
	/// <summary>
	/// <p>Information about how blocks are related to each other. A <code>Block</code> object contains 0 or more <code>Relation</code> objects in a list, <code>Relationships</code>. For more information, see <a>Block</a>.</p> <p>The <code>Type</code> element provides the type of the relationship for all blocks in the <code>IDs</code> array. </p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Relationship
	{
		
		[System.Runtime.Serialization.DataMember()]
		public RelationshipType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Ids { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum RelationshipType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VALUE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHILD = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLEX_FEATURES = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MERGED_CELL = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TITLE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ANSWER = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TABLE = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TABLE_TITLE = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TABLE_FOOTER = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum EntityType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KEY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VALUE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COLUMN_HEADER = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TABLE_TITLE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TABLE_FOOTER = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TABLE_SECTION_TITLE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TABLE_SUMMARY = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STRUCTURED_TABLE = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SEMI_STRUCTURED_TABLE = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SelectionStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SELECTED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_SELECTED = 1,
	}
	
	/// <summary>
	/// Each query contains the question you want to ask in the Text and the alias you want to associate.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Query
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Text { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Alias { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Pages { get; set; }
	}
	
	/// <summary>
	/// Shows the results of the human in the loop evaluation. If there is no HumanLoopArn, the input did not trigger human review.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class HumanLoopActivationOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string HumanLoopArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] HumanLoopActivationReasons { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string HumanLoopActivationConditionsEvaluationResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AnalyzeDocumentRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Document Document { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public FeatureType[] FeatureTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HumanLoopConfig HumanLoopConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public QueriesConfig QueriesConfig { get; set; }
	}
	
	/// <summary>
	/// <p>The input document, either as bytes or as an S3 object.</p> <p>You pass image bytes to an Amazon Textract API operation by using the <code>Bytes</code> property. For example, you would use the <code>Bytes</code> property to pass a document loaded from a local file system. Image bytes passed by using the <code>Bytes</code> property must be base64 encoded. Your code might not need to encode document file bytes if you're using an AWS SDK to call Amazon Textract API operations. </p> <p>You pass images stored in an S3 bucket to an Amazon Textract API operation by using the <code>S3Object</code> property. Documents stored in an S3 bucket don't need to be base64 encoded.</p> <p>The AWS Region for the S3 bucket that contains the S3 object must match the AWS Region that you use for Amazon Textract operations.</p> <p>If you use the AWS CLI to call Amazon Textract operations, passing image bytes using the Bytes property isn't supported. You must first upload the document to an Amazon S3 bucket, and then call the operation using the S3Object property.</p> <p>For Amazon Textract to process an S3 object, the user must have permission to access the S3 object. </p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Document
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Bytes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public S3Object S3Object { get; set; }
	}
	
	/// <summary>
	/// <p>The S3 bucket name and file name that identifies the document.</p> <p>The AWS Region for the S3 bucket that contains the document must match the Region that you use for Amazon Textract operations.</p> <p>For Amazon Textract to process a file in an S3 bucket, the user must have permission to access the S3 bucket and file. </p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class S3Object
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Bucket { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum FeatureType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TABLES = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FORMS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUERIES = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SIGNATURES = 3,
	}
	
	/// <summary>
	/// Sets up the human review workflow the document will be sent to if one of the conditions is met. You can also set certain attributes of the image before review. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class HumanLoopConfig
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string HumanLoopName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string FlowDefinitionArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HumanLoopDataAttributes DataAttributes { get; set; }
	}
	
	/// <summary>
	/// Allows you to set attributes of the image. Currently, you can declare an image as free of personally identifiable information and adult content. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class HumanLoopDataAttributes
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ContentClassifier[] ContentClassifiers { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ContentClassifier
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FreeOfPersonallyIdentifiableInformation = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FreeOfAdultContent = 1,
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class QueriesConfig
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Query[] Queries { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InvalidParameterException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InvalidS3ObjectException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UnsupportedDocumentException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DocumentTooLargeException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BadDocumentException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccessDeniedException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProvisionedThroughputExceededException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InternalServerError
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ThrottlingException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class HumanLoopQuotaExceededException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AnalyzeExpenseResponse
	{
		
		/// <summary>
		/// Information about the input document.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DocumentMetadata DocumentMetadata { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ExpenseDocument[] ExpenseDocuments { get; set; }
	}
	
	/// <summary>
	/// The structure holding all the information returned by AnalyzeExpense
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ExpenseDocument
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ExpenseIndex { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ExpenseField[] SummaryFields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LineItemGroup[] LineItemGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Block[] Blocks { get; set; }
	}
	
	/// <summary>
	/// Breakdown of detected information, seperated into the catagories Type, LabelDetection, and ValueDetection
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ExpenseField
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ExpenseType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ExpenseDetection LabelDetection { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ExpenseDetection ValueDetection { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PageNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ExpenseCurrency Currency { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ExpenseGroupProperty[] GroupProperties { get; set; }
	}
	
	/// <summary>
	/// An object used to store information about the Type detected by Amazon Textract.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ExpenseType
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Text { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public float Confidence { get; set; }
	}
	
	/// <summary>
	/// An object used to store information about the Value or Label detected by Amazon Textract.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ExpenseDetection
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Text { get; set; }
		
		/// <summary>
		/// Information about where the following items are located on a document page: detected page, text, key-value pairs, tables, table cells, and selection elements.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Geometry Geometry { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public float Confidence { get; set; }
	}
	
	/// <summary>
	/// Returns the kind of currency detected.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ExpenseCurrency
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public float Confidence { get; set; }
	}
	
	/// <summary>
	/// Shows the group that a certain key belongs to. This helps differentiate between names and addresses for different organizations, that can be hard to determine via JSON response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ExpenseGroupProperty
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Types { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
	}
	
	/// <summary>
	/// A grouping of tables which contain LineItems, with each table identified by the table's <code>LineItemGroupIndex</code>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LineItemGroup
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> LineItemGroupIndex { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LineItemFields[] LineItems { get; set; }
	}
	
	/// <summary>
	/// A structure that holds information about the different lines found in a document's tables.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LineItemFields
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ExpenseField[] LineItemExpenseFields { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AnalyzeExpenseRequest
	{
		
		/// <summary>
		/// <p>The input document, either as bytes or as an S3 object.</p> <p>You pass image bytes to an Amazon Textract API operation by using the <code>Bytes</code> property. For example, you would use the <code>Bytes</code> property to pass a document loaded from a local file system. Image bytes passed by using the <code>Bytes</code> property must be base64 encoded. Your code might not need to encode document file bytes if you're using an AWS SDK to call Amazon Textract API operations. </p> <p>You pass images stored in an S3 bucket to an Amazon Textract API operation by using the <code>S3Object</code> property. Documents stored in an S3 bucket don't need to be base64 encoded.</p> <p>The AWS Region for the S3 bucket that contains the S3 object must match the AWS Region that you use for Amazon Textract operations.</p> <p>If you use the AWS CLI to call Amazon Textract operations, passing image bytes using the Bytes property isn't supported. You must first upload the document to an Amazon S3 bucket, and then call the operation using the S3Object property.</p> <p>For Amazon Textract to process an S3 object, the user must have permission to access the S3 object. </p>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Document Document { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AnalyzeIDResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public IdentityDocument[] IdentityDocuments { get; set; }
		
		/// <summary>
		/// Information about the input document.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DocumentMetadata DocumentMetadata { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AnalyzeIDModelVersion { get; set; }
	}
	
	/// <summary>
	/// The structure that lists each document processed in an AnalyzeID operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IdentityDocument
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DocumentIndex { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public IdentityDocumentField[] IdentityDocumentFields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Block[] Blocks { get; set; }
	}
	
	/// <summary>
	/// Structure containing both the normalized type of the extracted information and the text associated with it. These are extracted as Type and Value respectively.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IdentityDocumentField
	{
		
		/// <summary>
		/// Used to contain the information detected by an AnalyzeID operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AnalyzeIDDetections Type { get; set; }
		
		/// <summary>
		/// Used to contain the information detected by an AnalyzeID operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AnalyzeIDDetections ValueDetection { get; set; }
	}
	
	/// <summary>
	/// Used to contain the information detected by an AnalyzeID operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AnalyzeIDDetections
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Text { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NormalizedValue NormalizedValue { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public float Confidence { get; set; }
	}
	
	/// <summary>
	/// Contains information relating to dates in a document, including the type of value, and the value.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NormalizedValue
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ValueType ValueType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ValueType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATE = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AnalyzeIDRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Document[] DocumentPages { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DetectDocumentTextResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DocumentMetadata DocumentMetadata { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Block[] Blocks { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DetectDocumentTextModelVersion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DetectDocumentTextRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Document Document { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetDocumentAnalysisResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DocumentMetadata DocumentMetadata { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public JobStatus JobStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Block[] Blocks { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Warning[] Warnings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StatusMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AnalyzeDocumentModelVersion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum JobStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PROGRESS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCEEDED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PARTIAL_SUCCESS = 3,
	}
	
	/// <summary>
	/// A warning about an issue that occurred during asynchronous text analysis (<a>StartDocumentAnalysis</a>) or asynchronous document text detection (<a>StartDocumentTextDetection</a>). 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Warning
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ErrorCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Pages { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetDocumentAnalysisRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string JobId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InvalidJobIdException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InvalidKMSKeyException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetDocumentTextDetectionResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DocumentMetadata DocumentMetadata { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public JobStatus JobStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Block[] Blocks { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Warning[] Warnings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StatusMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DetectDocumentTextModelVersion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetDocumentTextDetectionRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string JobId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetExpenseAnalysisResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DocumentMetadata DocumentMetadata { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public JobStatus JobStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ExpenseDocument[] ExpenseDocuments { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Warning[] Warnings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StatusMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AnalyzeExpenseModelVersion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetExpenseAnalysisRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string JobId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetLendingAnalysisResponse
	{
		
		/// <summary>
		/// Information about the input document.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DocumentMetadata DocumentMetadata { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public JobStatus JobStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LendingResult[] Results { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Warning[] Warnings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StatusMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AnalyzeLendingModelVersion { get; set; }
	}
	
	/// <summary>
	/// Contains the detections for each page analyzed through the Analyze Lending API.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LendingResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Page { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PageClassification PageClassification { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Extraction[] Extractions { get; set; }
	}
	
	/// <summary>
	/// The class assigned to a Page object detected in an input document. Contains information regarding the predicted type/class of a document's page and the page number that the Page object was detected on.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PageClassification
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Prediction[] PageType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Prediction[] PageNumber { get; set; }
	}
	
	/// <summary>
	/// Contains information regarding predicted values returned by Amazon Textract operations, including the predicted value and the confidence in the predicted value.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Prediction
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public float Confidence { get; set; }
	}
	
	/// <summary>
	/// Contains information extracted by an analysis operation after using StartLendingAnalysis.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Extraction
	{
		
		[System.Runtime.Serialization.DataMember()]
		public LendingDocument LendingDocument { get; set; }
		
		/// <summary>
		/// The structure holding all the information returned by AnalyzeExpense
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ExpenseDocument ExpenseDocument { get; set; }
		
		/// <summary>
		/// The structure that lists each document processed in an AnalyzeID operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public IdentityDocument IdentityDocument { get; set; }
	}
	
	/// <summary>
	/// Holds the structured data returned by AnalyzeDocument for lending documents.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LendingDocument
	{
		
		[System.Runtime.Serialization.DataMember()]
		public LendingField[] LendingFields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SignatureDetection[] SignatureDetections { get; set; }
	}
	
	/// <summary>
	/// Holds the normalized key-value pairs returned by AnalyzeDocument, including the document type, detected text, and geometry.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LendingField
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
		
		/// <summary>
		/// The results extracted for a lending document.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LendingDetection KeyDetection { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LendingDetection[] ValueDetections { get; set; }
	}
	
	/// <summary>
	/// The results extracted for a lending document.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LendingDetection
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Text { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SelectionStatus SelectionStatus { get; set; }
		
		/// <summary>
		/// Information about where the following items are located on a document page: detected page, text, key-value pairs, tables, table cells, and selection elements.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Geometry Geometry { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public float Confidence { get; set; }
	}
	
	/// <summary>
	/// Information regarding a detected signature on a page.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SignatureDetection
	{
		
		[System.Runtime.Serialization.DataMember()]
		public float Confidence { get; set; }
		
		/// <summary>
		/// Information about where the following items are located on a document page: detected page, text, key-value pairs, tables, table cells, and selection elements.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Geometry Geometry { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetLendingAnalysisRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string JobId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetLendingAnalysisSummaryResponse
	{
		
		/// <summary>
		/// Information about the input document.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DocumentMetadata DocumentMetadata { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public JobStatus JobStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LendingSummary Summary { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Warning[] Warnings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StatusMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AnalyzeLendingModelVersion { get; set; }
	}
	
	/// <summary>
	/// Contains information regarding DocumentGroups and UndetectedDocumentTypes.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LendingSummary
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DocumentGroup[] DocumentGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] UndetectedDocumentTypes { get; set; }
	}
	
	/// <summary>
	/// Summary information about documents grouped by the same document type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DocumentGroup
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SplitDocument[] SplitDocuments { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DetectedSignature[] DetectedSignatures { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UndetectedSignature[] UndetectedSignatures { get; set; }
	}
	
	/// <summary>
	/// Contains information about the pages of a document, defined by logical boundary.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SplitDocument
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Index { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Pages { get; set; }
	}
	
	/// <summary>
	/// A structure that holds information regarding a detected signature on a page.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DetectedSignature
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Page { get; set; }
	}
	
	/// <summary>
	/// A structure containing information about an undetected signature on a page where it was expected but not found.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UndetectedSignature
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Page { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetLendingAnalysisSummaryRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string JobId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartDocumentAnalysisResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string JobId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartDocumentAnalysisRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DocumentLocation DocumentLocation { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public FeatureType[] FeatureTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientRequestToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string JobTag { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NotificationChannel NotificationChannel { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OutputConfig OutputConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KMSKeyId { get; set; }
		
		/// <summary>
		/// <p/>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public QueriesConfig QueriesConfig { get; set; }
	}
	
	/// <summary>
	/// <p>The Amazon S3 bucket that contains the document to be processed. It's used by asynchronous operations.</p> <p>The input document can be an image file in JPEG or PNG format. It can also be a file in PDF format.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DocumentLocation
	{
		
		[System.Runtime.Serialization.DataMember()]
		public S3Object S3Object { get; set; }
	}
	
	/// <summary>
	/// The Amazon Simple Notification Service (Amazon SNS) topic to which Amazon Textract publishes the completion status of an asynchronous document operation. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NotificationChannel
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SNSTopicArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
	}
	
	/// <summary>
	/// <p>Sets whether or not your output will go to a user created bucket. Used to set the name of the bucket, and the prefix on the output file.</p> <p> <code>OutputConfig</code> is an optional parameter which lets you adjust where your output will be placed. By default, Amazon Textract will store the results internally and can only be accessed by the Get API operations. With <code>OutputConfig</code> enabled, you can set the name of the bucket the output will be sent to the file prefix of the results where you can download your results. Additionally, you can set the <code>KMSKeyID</code> parameter to a customer master key (CMK) to encrypt your output. Without this parameter set Amazon Textract will encrypt server-side using the AWS managed CMK for Amazon S3.</p> <p>Decryption of Customer Content is necessary for processing of the documents by Amazon Textract. If your account is opted out under an AI services opt out policy then all unencrypted Customer Content is immediately and permanently deleted after the Customer Content has been processed by the service. No copy of of the output is retained by Amazon Textract. For information about how to opt out, see <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_ai-opt-out.html"> Managing AI services opt-out policy. </a> </p> <p>For more information on data privacy, see the <a href="https://aws.amazon.com/compliance/data-privacy-faq/">Data Privacy FAQ</a>.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OutputConfig
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string S3Bucket { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string S3Prefix { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IdempotentParameterMismatchException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LimitExceededException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartDocumentTextDetectionResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string JobId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartDocumentTextDetectionRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DocumentLocation DocumentLocation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientRequestToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string JobTag { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NotificationChannel NotificationChannel { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OutputConfig OutputConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KMSKeyId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartExpenseAnalysisResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string JobId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartExpenseAnalysisRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DocumentLocation DocumentLocation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientRequestToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string JobTag { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NotificationChannel NotificationChannel { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OutputConfig OutputConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KMSKeyId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartLendingAnalysisResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string JobId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartLendingAnalysisRequest
	{
		
		/// <summary>
		/// <p>The Amazon S3 bucket that contains the document to be processed. It's used by asynchronous operations.</p> <p>The input document can be an image file in JPEG or PNG format. It can also be a file in PDF format.</p>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DocumentLocation DocumentLocation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientRequestToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string JobTag { get; set; }
		
		/// <summary>
		/// The Amazon Simple Notification Service (Amazon SNS) topic to which Amazon Textract publishes the completion status of an asynchronous document operation. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public NotificationChannel NotificationChannel { get; set; }
		
		/// <summary>
		/// <p>Sets whether or not your output will go to a user created bucket. Used to set the name of the bucket, and the prefix on the output file.</p> <p> <code>OutputConfig</code> is an optional parameter which lets you adjust where your output will be placed. By default, Amazon Textract will store the results internally and can only be accessed by the Get API operations. With <code>OutputConfig</code> enabled, you can set the name of the bucket the output will be sent to the file prefix of the results where you can download your results. Additionally, you can set the <code>KMSKeyID</code> parameter to a customer master key (CMK) to encrypt your output. Without this parameter set Amazon Textract will encrypt server-side using the AWS managed CMK for Amazon S3.</p> <p>Decryption of Customer Content is necessary for processing of the documents by Amazon Textract. If your account is opted out under an AI services opt out policy then all unencrypted Customer Content is immediately and permanently deleted after the Customer Content has been processed by the service. No copy of of the output is retained by Amazon Textract. For information about how to opt out, see <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_ai-opt-out.html"> Managing AI services opt-out policy. </a> </p> <p>For more information on data privacy, see the <a href="https://aws.amazon.com/compliance/data-privacy-faq/">Data Privacy FAQ</a>.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OutputConfig OutputConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KMSKeyId { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// <p>Analyzes an input document for relationships between detected items. </p> <p>The types of information returned are as follows: </p> <ul> <li> <p>Form data (key-value pairs). The related information is returned in two <a>Block</a> objects, each of type <code>KEY_VALUE_SET</code>: a KEY <code>Block</code> object and a VALUE <code>Block</code> object. For example, <i>Name: Ana Silva Carolina</i> contains a key and value. <i>Name:</i> is the key. <i>Ana Silva Carolina</i> is the value.</p> </li> <li> <p>Table and table cell data. A TABLE <code>Block</code> object contains information about a detected table. A CELL <code>Block</code> object is returned for each cell in a table.</p> </li> <li> <p>Lines and words of text. A LINE <code>Block</code> object contains one or more WORD <code>Block</code> objects. All lines and words that are detected in the document are returned (including text that doesn't have a relationship with the value of <code>FeatureTypes</code>). </p> </li> <li> <p>Signatures. A SIGNATURE <code>Block</code> object contains the location information of a signature in a document. If used in conjunction with forms or tables, a signature can be given a Key-Value pairing or be detected in the cell of a table.</p> </li> <li> <p>Query. A QUERY Block object contains the query text, alias and link to the associated Query results block object.</p> </li> <li> <p>Query Result. A QUERY_RESULT Block object contains the answer to the query and an ID that connects it to the query asked. This Block also contains a confidence score.</p> </li> </ul> <p>Selection elements such as check boxes and option buttons (radio buttons) can be detected in form data and in tables. A SELECTION_ELEMENT <code>Block</code> object contains information about a selection element, including the selection status.</p> <p>You can choose which type of analysis to perform by specifying the <code>FeatureTypes</code> list. </p> <p>The output is returned in a list of <code>Block</code> objects.</p> <p> <code>AnalyzeDocument</code> is a synchronous operation. To analyze documents asynchronously, use <a>StartDocumentAnalysis</a>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/textract/latest/dg/how-it-works-analyzing.html">Document Text Analysis</a>.</p>
		/// AnalyzeDocument #X-Amz-Target=Textract.AnalyzeDocument
		/// </summary>
		/// <returns>Success</returns>
		public async Task<AnalyzeDocumentResponse> AnalyzeDocumentAsync(AnalyzeDocumentRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Textract.AnalyzeDocument";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AnalyzeDocumentResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p> <code>AnalyzeExpense</code> synchronously analyzes an input document for financially related relationships between text.</p> <p>Information is returned as <code>ExpenseDocuments</code> and seperated as follows:</p> <ul> <li> <p> <code>LineItemGroups</code>- A data set containing <code>LineItems</code> which store information about the lines of text, such as an item purchased and its price on a receipt.</p> </li> <li> <p> <code>SummaryFields</code>- Contains all other information a receipt, such as header information or the vendors name.</p> </li> </ul>
		/// AnalyzeExpense #X-Amz-Target=Textract.AnalyzeExpense
		/// </summary>
		/// <returns>Success</returns>
		public async Task<AnalyzeExpenseResponse> AnalyzeExpenseAsync(AnalyzeExpenseRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Textract.AnalyzeExpense";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AnalyzeExpenseResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Analyzes identity documents for relevant information. This information is extracted and returned as <code>IdentityDocumentFields</code>, which records both the normalized field and value of the extracted text. Unlike other Amazon Textract operations, <code>AnalyzeID</code> doesn't return any Geometry data.
		/// AnalyzeID #X-Amz-Target=Textract.AnalyzeID
		/// </summary>
		/// <returns>Success</returns>
		public async Task<AnalyzeIDResponse> AnalyzeIDAsync(AnalyzeIDRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Textract.AnalyzeID";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AnalyzeIDResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Detects text in the input document. Amazon Textract can detect lines of text and the words that make up a line of text. The input document must be in one of the following image formats: JPEG, PNG, PDF, or TIFF. <code>DetectDocumentText</code> returns the detected text in an array of <a>Block</a> objects. </p> <p>Each document page has as an associated <code>Block</code> of type PAGE. Each PAGE <code>Block</code> object is the parent of LINE <code>Block</code> objects that represent the lines of detected text on a page. A LINE <code>Block</code> object is a parent for each word that makes up the line. Words are represented by <code>Block</code> objects of type WORD.</p> <p> <code>DetectDocumentText</code> is a synchronous operation. To analyze documents asynchronously, use <a>StartDocumentTextDetection</a>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/textract/latest/dg/how-it-works-detecting.html">Document Text Detection</a>.</p>
		/// DetectDocumentText #X-Amz-Target=Textract.DetectDocumentText
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DetectDocumentTextResponse> DetectDocumentTextAsync(DetectDocumentTextRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Textract.DetectDocumentText";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DetectDocumentTextResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Gets the results for an Amazon Textract asynchronous operation that analyzes text in a document.</p> <p>You start asynchronous text analysis by calling <a>StartDocumentAnalysis</a>, which returns a job identifier (<code>JobId</code>). When the text analysis operation finishes, Amazon Textract publishes a completion status to the Amazon Simple Notification Service (Amazon SNS) topic that's registered in the initial call to <code>StartDocumentAnalysis</code>. To get the results of the text-detection operation, first check that the status value published to the Amazon SNS topic is <code>SUCCEEDED</code>. If so, call <code>GetDocumentAnalysis</code>, and pass the job identifier (<code>JobId</code>) from the initial call to <code>StartDocumentAnalysis</code>.</p> <p> <code>GetDocumentAnalysis</code> returns an array of <a>Block</a> objects. The following types of information are returned: </p> <ul> <li> <p>Form data (key-value pairs). The related information is returned in two <a>Block</a> objects, each of type <code>KEY_VALUE_SET</code>: a KEY <code>Block</code> object and a VALUE <code>Block</code> object. For example, <i>Name: Ana Silva Carolina</i> contains a key and value. <i>Name:</i> is the key. <i>Ana Silva Carolina</i> is the value.</p> </li> <li> <p>Table and table cell data. A TABLE <code>Block</code> object contains information about a detected table. A CELL <code>Block</code> object is returned for each cell in a table.</p> </li> <li> <p>Lines and words of text. A LINE <code>Block</code> object contains one or more WORD <code>Block</code> objects. All lines and words that are detected in the document are returned (including text that doesn't have a relationship with the value of the <code>StartDocumentAnalysis</code> <code>FeatureTypes</code> input parameter). </p> </li> <li> <p>Query. A QUERY Block object contains the query text, alias and link to the associated Query results block object.</p> </li> <li> <p>Query Results. A QUERY_RESULT Block object contains the answer to the query and an ID that connects it to the query asked. This Block also contains a confidence score.</p> </li> </ul> <note> <p>While processing a document with queries, look out for <code>INVALID_REQUEST_PARAMETERS</code> output. This indicates that either the per page query limit has been exceeded or that the operation is trying to query a page in the document which doesn’t exist. </p> </note> <p>Selection elements such as check boxes and option buttons (radio buttons) can be detected in form data and in tables. A SELECTION_ELEMENT <code>Block</code> object contains information about a selection element, including the selection status.</p> <p>Use the <code>MaxResults</code> parameter to limit the number of blocks that are returned. If there are more results than specified in <code>MaxResults</code>, the value of <code>NextToken</code> in the operation response contains a pagination token for getting the next set of results. To get the next page of results, call <code>GetDocumentAnalysis</code>, and populate the <code>NextToken</code> request parameter with the token value that's returned from the previous call to <code>GetDocumentAnalysis</code>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/textract/latest/dg/how-it-works-analyzing.html">Document Text Analysis</a>.</p>
		/// GetDocumentAnalysis #X-Amz-Target=Textract.GetDocumentAnalysis
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetDocumentAnalysisResponse> GetDocumentAnalysisAsync(GetDocumentAnalysisRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Textract.GetDocumentAnalysis";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetDocumentAnalysisResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Gets the results for an Amazon Textract asynchronous operation that detects text in a document. Amazon Textract can detect lines of text and the words that make up a line of text.</p> <p>You start asynchronous text detection by calling <a>StartDocumentTextDetection</a>, which returns a job identifier (<code>JobId</code>). When the text detection operation finishes, Amazon Textract publishes a completion status to the Amazon Simple Notification Service (Amazon SNS) topic that's registered in the initial call to <code>StartDocumentTextDetection</code>. To get the results of the text-detection operation, first check that the status value published to the Amazon SNS topic is <code>SUCCEEDED</code>. If so, call <code>GetDocumentTextDetection</code>, and pass the job identifier (<code>JobId</code>) from the initial call to <code>StartDocumentTextDetection</code>.</p> <p> <code>GetDocumentTextDetection</code> returns an array of <a>Block</a> objects. </p> <p>Each document page has as an associated <code>Block</code> of type PAGE. Each PAGE <code>Block</code> object is the parent of LINE <code>Block</code> objects that represent the lines of detected text on a page. A LINE <code>Block</code> object is a parent for each word that makes up the line. Words are represented by <code>Block</code> objects of type WORD.</p> <p>Use the MaxResults parameter to limit the number of blocks that are returned. If there are more results than specified in <code>MaxResults</code>, the value of <code>NextToken</code> in the operation response contains a pagination token for getting the next set of results. To get the next page of results, call <code>GetDocumentTextDetection</code>, and populate the <code>NextToken</code> request parameter with the token value that's returned from the previous call to <code>GetDocumentTextDetection</code>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/textract/latest/dg/how-it-works-detecting.html">Document Text Detection</a>.</p>
		/// GetDocumentTextDetection #X-Amz-Target=Textract.GetDocumentTextDetection
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetDocumentTextDetectionResponse> GetDocumentTextDetectionAsync(GetDocumentTextDetectionRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Textract.GetDocumentTextDetection";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetDocumentTextDetectionResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Gets the results for an Amazon Textract asynchronous operation that analyzes invoices and receipts. Amazon Textract finds contact information, items purchased, and vendor name, from input invoices and receipts.</p> <p>You start asynchronous invoice/receipt analysis by calling <a>StartExpenseAnalysis</a>, which returns a job identifier (<code>JobId</code>). Upon completion of the invoice/receipt analysis, Amazon Textract publishes the completion status to the Amazon Simple Notification Service (Amazon SNS) topic. This topic must be registered in the initial call to <code>StartExpenseAnalysis</code>. To get the results of the invoice/receipt analysis operation, first ensure that the status value published to the Amazon SNS topic is <code>SUCCEEDED</code>. If so, call <code>GetExpenseAnalysis</code>, and pass the job identifier (<code>JobId</code>) from the initial call to <code>StartExpenseAnalysis</code>.</p> <p>Use the MaxResults parameter to limit the number of blocks that are returned. If there are more results than specified in <code>MaxResults</code>, the value of <code>NextToken</code> in the operation response contains a pagination token for getting the next set of results. To get the next page of results, call <code>GetExpenseAnalysis</code>, and populate the <code>NextToken</code> request parameter with the token value that's returned from the previous call to <code>GetExpenseAnalysis</code>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/textract/latest/dg/invoices-receipts.html">Analyzing Invoices and Receipts</a>.</p>
		/// GetExpenseAnalysis #X-Amz-Target=Textract.GetExpenseAnalysis
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetExpenseAnalysisResponse> GetExpenseAnalysisAsync(GetExpenseAnalysisRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Textract.GetExpenseAnalysis";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetExpenseAnalysisResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Gets the results for an Amazon Textract asynchronous operation that analyzes text in a lending document. </p> <p>You start asynchronous text analysis by calling <code>StartLendingAnalysis</code>, which returns a job identifier (<code>JobId</code>). When the text analysis operation finishes, Amazon Textract publishes a completion status to the Amazon Simple Notification Service (Amazon SNS) topic that's registered in the initial call to <code>StartLendingAnalysis</code>. </p> <p>To get the results of the text analysis operation, first check that the status value published to the Amazon SNS topic is SUCCEEDED. If so, call GetLendingAnalysis, and pass the job identifier (<code>JobId</code>) from the initial call to <code>StartLendingAnalysis</code>.</p>
		/// GetLendingAnalysis #X-Amz-Target=Textract.GetLendingAnalysis
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetLendingAnalysisResponse> GetLendingAnalysisAsync(GetLendingAnalysisRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Textract.GetLendingAnalysis";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetLendingAnalysisResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Gets summarized results for the <code>StartLendingAnalysis</code> operation, which analyzes text in a lending document. The returned summary consists of information about documents grouped together by a common document type. Information like detected signatures, page numbers, and split documents is returned with respect to the type of grouped document. </p> <p>You start asynchronous text analysis by calling <code>StartLendingAnalysis</code>, which returns a job identifier (<code>JobId</code>). When the text analysis operation finishes, Amazon Textract publishes a completion status to the Amazon Simple Notification Service (Amazon SNS) topic that's registered in the initial call to <code>StartLendingAnalysis</code>. </p> <p>To get the results of the text analysis operation, first check that the status value published to the Amazon SNS topic is SUCCEEDED. If so, call <code>GetLendingAnalysisSummary</code>, and pass the job identifier (<code>JobId</code>) from the initial call to <code>StartLendingAnalysis</code>.</p>
		/// GetLendingAnalysisSummary #X-Amz-Target=Textract.GetLendingAnalysisSummary
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetLendingAnalysisSummaryResponse> GetLendingAnalysisSummaryAsync(GetLendingAnalysisSummaryRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Textract.GetLendingAnalysisSummary";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetLendingAnalysisSummaryResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Starts the asynchronous analysis of an input document for relationships between detected items such as key-value pairs, tables, and selection elements.</p> <p> <code>StartDocumentAnalysis</code> can analyze text in documents that are in JPEG, PNG, TIFF, and PDF format. The documents are stored in an Amazon S3 bucket. Use <a>DocumentLocation</a> to specify the bucket name and file name of the document. </p> <p> <code>StartDocumentAnalysis</code> returns a job identifier (<code>JobId</code>) that you use to get the results of the operation. When text analysis is finished, Amazon Textract publishes a completion status to the Amazon Simple Notification Service (Amazon SNS) topic that you specify in <code>NotificationChannel</code>. To get the results of the text analysis operation, first check that the status value published to the Amazon SNS topic is <code>SUCCEEDED</code>. If so, call <a>GetDocumentAnalysis</a>, and pass the job identifier (<code>JobId</code>) from the initial call to <code>StartDocumentAnalysis</code>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/textract/latest/dg/how-it-works-analyzing.html">Document Text Analysis</a>.</p>
		/// StartDocumentAnalysis #X-Amz-Target=Textract.StartDocumentAnalysis
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StartDocumentAnalysisResponse> StartDocumentAnalysisAsync(StartDocumentAnalysisRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Textract.StartDocumentAnalysis";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<StartDocumentAnalysisResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Starts the asynchronous detection of text in a document. Amazon Textract can detect lines of text and the words that make up a line of text.</p> <p> <code>StartDocumentTextDetection</code> can analyze text in documents that are in JPEG, PNG, TIFF, and PDF format. The documents are stored in an Amazon S3 bucket. Use <a>DocumentLocation</a> to specify the bucket name and file name of the document. </p> <p> <code>StartTextDetection</code> returns a job identifier (<code>JobId</code>) that you use to get the results of the operation. When text detection is finished, Amazon Textract publishes a completion status to the Amazon Simple Notification Service (Amazon SNS) topic that you specify in <code>NotificationChannel</code>. To get the results of the text detection operation, first check that the status value published to the Amazon SNS topic is <code>SUCCEEDED</code>. If so, call <a>GetDocumentTextDetection</a>, and pass the job identifier (<code>JobId</code>) from the initial call to <code>StartDocumentTextDetection</code>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/textract/latest/dg/how-it-works-detecting.html">Document Text Detection</a>.</p>
		/// StartDocumentTextDetection #X-Amz-Target=Textract.StartDocumentTextDetection
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StartDocumentTextDetectionResponse> StartDocumentTextDetectionAsync(StartDocumentTextDetectionRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Textract.StartDocumentTextDetection";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<StartDocumentTextDetectionResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Starts the asynchronous analysis of invoices or receipts for data like contact information, items purchased, and vendor names.</p> <p> <code>StartExpenseAnalysis</code> can analyze text in documents that are in JPEG, PNG, and PDF format. The documents must be stored in an Amazon S3 bucket. Use the <a>DocumentLocation</a> parameter to specify the name of your S3 bucket and the name of the document in that bucket. </p> <p> <code>StartExpenseAnalysis</code> returns a job identifier (<code>JobId</code>) that you will provide to <code>GetExpenseAnalysis</code> to retrieve the results of the operation. When the analysis of the input invoices/receipts is finished, Amazon Textract publishes a completion status to the Amazon Simple Notification Service (Amazon SNS) topic that you provide to the <code>NotificationChannel</code>. To obtain the results of the invoice and receipt analysis operation, ensure that the status value published to the Amazon SNS topic is <code>SUCCEEDED</code>. If so, call <a>GetExpenseAnalysis</a>, and pass the job identifier (<code>JobId</code>) that was returned by your call to <code>StartExpenseAnalysis</code>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/textract/latest/dg/invoice-receipts.html">Analyzing Invoices and Receipts</a>.</p>
		/// StartExpenseAnalysis #X-Amz-Target=Textract.StartExpenseAnalysis
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StartExpenseAnalysisResponse> StartExpenseAnalysisAsync(StartExpenseAnalysisRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Textract.StartExpenseAnalysis";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<StartExpenseAnalysisResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Starts the classification and analysis of an input document. <code>StartLendingAnalysis</code> initiates the classification and analysis of a packet of lending documents. <code>StartLendingAnalysis</code> operates on a document file located in an Amazon S3 bucket.</p> <p> <code>StartLendingAnalysis</code> can analyze text in documents that are in one of the following formats: JPEG, PNG, TIFF, PDF. Use <code>DocumentLocation</code> to specify the bucket name and the file name of the document. </p> <p> <code>StartLendingAnalysis</code> returns a job identifier (<code>JobId</code>) that you use to get the results of the operation. When the text analysis is finished, Amazon Textract publishes a completion status to the Amazon Simple Notification Service (Amazon SNS) topic that you specify in <code>NotificationChannel</code>. To get the results of the text analysis operation, first check that the status value published to the Amazon SNS topic is SUCCEEDED. If the status is SUCCEEDED you can call either <code>GetLendingAnalysis</code> or <code>GetLendingAnalysisSummary</code> and provide the <code>JobId</code> to obtain the results of the analysis.</p> <p>If using <code>OutputConfig</code> to specify an Amazon S3 bucket, the output will be contained within the specified prefix in a directory labeled with the job-id. In the directory there are 3 sub-directories: </p> <ul> <li> <p>detailedResponse (contains the GetLendingAnalysis response)</p> </li> <li> <p>summaryResponse (for the GetLendingAnalysisSummary response)</p> </li> <li> <p>splitDocuments (documents split across logical boundaries)</p> </li> </ul>
		/// StartLendingAnalysis #X-Amz-Target=Textract.StartLendingAnalysis
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StartLendingAnalysisResponse> StartLendingAnalysisAsync(StartLendingAnalysisRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Textract.StartLendingAnalysis";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<StartLendingAnalysisResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum AnalyzeDocumentX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Textract.AnalyzeDocument")]
		Textract_AnalyzeDocument = 0,
	}
	
	public enum AnalyzeExpenseX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Textract.AnalyzeExpense")]
		Textract_AnalyzeExpense = 0,
	}
	
	public enum AnalyzeIDX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Textract.AnalyzeID")]
		Textract_AnalyzeID = 0,
	}
	
	public enum DetectDocumentTextX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Textract.DetectDocumentText")]
		Textract_DetectDocumentText = 0,
	}
	
	public enum GetDocumentAnalysisX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Textract.GetDocumentAnalysis")]
		Textract_GetDocumentAnalysis = 0,
	}
	
	public enum GetDocumentTextDetectionX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Textract.GetDocumentTextDetection")]
		Textract_GetDocumentTextDetection = 0,
	}
	
	public enum GetExpenseAnalysisX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Textract.GetExpenseAnalysis")]
		Textract_GetExpenseAnalysis = 0,
	}
	
	public enum GetLendingAnalysisX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Textract.GetLendingAnalysis")]
		Textract_GetLendingAnalysis = 0,
	}
	
	public enum GetLendingAnalysisSummaryX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Textract.GetLendingAnalysisSummary")]
		Textract_GetLendingAnalysisSummary = 0,
	}
	
	public enum StartDocumentAnalysisX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Textract.StartDocumentAnalysis")]
		Textract_StartDocumentAnalysis = 0,
	}
	
	public enum StartDocumentTextDetectionX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Textract.StartDocumentTextDetection")]
		Textract_StartDocumentTextDetection = 0,
	}
	
	public enum StartExpenseAnalysisX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Textract.StartExpenseAnalysis")]
		Textract_StartExpenseAnalysis = 0,
	}
	
	public enum StartLendingAnalysisX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Textract.StartLendingAnalysis")]
		Textract_StartLendingAnalysis = 0,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
