//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Oauthv1certs
	{
		
		/// <summary>
		/// A collection of certificates where are signed Twilio-issued tokens.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keys")]
		public object Keys { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Oauthv1device_code
	{
		
		/// <summary>
		/// The device verification code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="device_code")]
		public string Device_code { get; set; }
		
		/// <summary>
		/// The expiration time of the device_code and user_code in seconds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expires_in")]
		public System.Nullable<System.Int64> Expires_in { get; set; }
		
		/// <summary>
		/// The minimum amount of time in seconds that the client should wait between polling requests to the token endpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="interval")]
		public System.Nullable<System.Int32> Interval { get; set; }
		
		/// <summary>
		/// The verification code which end user uses to verify authorization request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="user_code")]
		public string User_code { get; set; }
		
		/// <summary>
		/// The URI that the end user visits to verify authorization request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verification_uri")]
		public string Verification_uri { get; set; }
		
		/// <summary>
		/// The URI with user_code that the end-user alternatively visits to verify authorization request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verification_uri_complete")]
		public string Verification_uri_complete { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Oauthv1openid_discovery
	{
		
		/// <summary>
		/// The endpoint that validates all authorization requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authorization_endpoint")]
		public string Authorization_endpoint { get; set; }
		
		/// <summary>
		/// A collection of claims supported by authorization server for identity token
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="claims_supported")]
		public string[] Claims_supported { get; set; }
		
		/// <summary>
		/// The endpoint that validates all device code related authorization requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="device_authorization_endpoint")]
		public string Device_authorization_endpoint { get; set; }
		
		/// <summary>
		/// A collection of JWS signing algorithms supported by authorization server to sign identity token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id_token_signing_alg_values_supported")]
		public string[] Id_token_signing_alg_values_supported { get; set; }
		
		/// <summary>
		/// The URL of the party that will create the token and sign it with its private key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="issuer")]
		public string Issuer { get; set; }
		
		/// <summary>
		/// The URL of your JSON Web Key Set. This set is a collection of JSON Web Keys, a standard method for representing cryptographic keys in a JSON structure.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jwk_uri")]
		public string Jwk_uri { get; set; }
		
		/// <summary>
		/// A collection of response type supported by authorization server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="response_type_supported")]
		public string[] Response_type_supported { get; set; }
		
		/// <summary>
		/// The endpoint used to revoke access or refresh tokens issued by the authorization server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="revocation_endpoint")]
		public string Revocation_endpoint { get; set; }
		
		/// <summary>
		/// A collection of scopes supported by authorization server for identity token
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scopes_supported")]
		public string[] Scopes_supported { get; set; }
		
		/// <summary>
		/// A collection of subject by authorization server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subject_type_supported")]
		public string[] Subject_type_supported { get; set; }
		
		/// <summary>
		/// The URL of the token endpoint. After a client has received an authorization code, that code is presented to the token endpoint and exchanged for an identity token, an access token, and a refresh token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="token_endpoint")]
		public string Token_endpoint { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		/// <summary>
		/// The URL of the user info endpoint, which returns user profile information to a client. Keep in mind that the user info endpoint returns only the information that has been requested.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userinfo_endpoint")]
		public string Userinfo_endpoint { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Oauthv1token
	{
		
		/// <summary>
		/// Token which carries the necessary information to access a Twilio resource directly.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="access_token")]
		public string Access_token { get; set; }
		
		/// <summary>
		/// The date and time in GMT when the refresh token expires in [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt) format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="access_token_expires_at")]
		public System.Nullable<System.DateTimeOffset> Access_token_expires_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id_token")]
		public string Id_token { get; set; }
		
		/// <summary>
		/// Token which carries the information necessary to get a new access token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refresh_token")]
		public string Refresh_token { get; set; }
		
		/// <summary>
		/// The date and time in GMT when the refresh token expires in [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt) format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refresh_token_expires_at")]
		public System.Nullable<System.DateTimeOffset> Refresh_token_expires_at { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Oauthv1user_info
	{
		
		/// <summary>
		/// The end-user's preferred email address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// The first name of the end-user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="first_name")]
		public string First_name { get; set; }
		
		/// <summary>
		/// The friendly name of the end-user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="friendly_name")]
		public string Friendly_name { get; set; }
		
		/// <summary>
		/// The last name of the end-user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="last_name")]
		public string Last_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		/// <summary>
		/// The URL of the party that will create the token and sign it with its private key.
		/// Max length: 34
		/// Min length: 34
		/// Pattern: ^US[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="user_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^US[0-9a-fA-F]{32}$")]
		public string User_sid { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Fetch configuration details about the OpenID Connect Authorization Server
		/// FetchOpenidDiscovery v1/.well-known/openid-configuration
		/// </summary>
		/// <returns>OK</returns>
		public async Task<Oauthv1openid_discovery> FetchOpenidDiscoveryAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/.well-known/openid-configuration";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Oauthv1openid_discovery>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Fetches public JWKs
		/// FetchCerts v1/certs
		/// </summary>
		/// <returns>OK</returns>
		public async Task<Oauthv1certs> FetchCertsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/certs";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Oauthv1certs>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the consented UserInfo and other claims about the logged-in subject (end-user).
		/// FetchUserInfo v1/userinfo
		/// </summary>
		/// <returns>OK</returns>
		public async Task<Oauthv1user_info> FetchUserInfoAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/userinfo";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Oauthv1user_info>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
