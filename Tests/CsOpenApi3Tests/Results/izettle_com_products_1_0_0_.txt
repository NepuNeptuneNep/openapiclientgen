//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BulkImportRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="products")]
		public FullProductUpdateRequest[] Products { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FullProductUpdateRequest
	{
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="categories")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public string[] Categories { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="category")]
		public CategoryDTO Category { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="externalReference")]
		public string ExternalReference { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imageLookupKeys")]
		public string[] ImageLookupKeys { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public MetadataDTO Metadata { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="online")]
		public OnlineProperties Online { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="presentation")]
		public PresentationDTO Presentation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="taxCode")]
		public string TaxCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="taxExempt")]
		public System.Nullable<System.Boolean> TaxExempt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="taxRates")]
		public string[] TaxRates { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unitName")]
		public string UnitName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uuid")]
		public string Uuid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="variantOptionDefinitions")]
		public VariantOptionDefinitions VariantOptionDefinitions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="variants")]
		public VariantDTO[] Variants { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vatPercentage")]
		[System.ComponentModel.DataAnnotations.Range(0, 100)]
		public System.Nullable<System.Double> VatPercentage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CategoryDTO
	{
		
		/// <summary>
		/// Required
		/// Max length: 100
		/// Min length: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uuid")]
		public string Uuid { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MetadataDTO
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="inPos")]
		public bool InPos { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source")]
		public SourceDTO Source { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SourceDTO
	{
		
		[System.Runtime.Serialization.DataMember(Name="external")]
		public System.Nullable<System.Boolean> External { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OnlineProperties
	{
		
		/// <summary>
		/// Max length: 3500
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(3500)]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="presentation")]
		public Presentation Presentation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="seo")]
		public SearchEngineOptimization Seo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="shipping")]
		public Shipping Shipping { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public OnlinePropertiesStatus Status { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Presentation
	{
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 25
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additionalImageUrls")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public string[] AdditionalImageUrls { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="displayImageUrl")]
		public string DisplayImageUrl { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 8
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mediaUrls")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(8)]
		public string[] MediaUrls { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SearchEngineOptimization
	{
		
		/// <summary>
		/// Max length: 320
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metaDescription")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(320)]
		public string MetaDescription { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="slug")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Slug { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Shipping
	{
		
		[System.Runtime.Serialization.DataMember(Name="shippingPricingModel")]
		public System.Nullable<ShippingShippingPricingModel> ShippingPricingModel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="weight")]
		public Weight Weight { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 2147483647
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="weightInGrams")]
		[System.ComponentModel.DataAnnotations.Range(0, 2147483647)]
		public System.Nullable<System.Int64> WeightInGrams { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ShippingShippingPricingModel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FREE")]
		FREE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="STANDARD")]
		STANDARD = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Weight
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public WeightUnit Unit { get; set; }
		
		/// <summary>
		/// Required
		/// Minimum: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="weight")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Double.MaxValue)]
		public double Weight1 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum WeightUnit
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="kg")]
		kg = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="g")]
		g = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="oz")]
		oz = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="lb")]
		lb = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum OnlinePropertiesStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ACTIVE")]
		ACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HIDDEN")]
		HIDDEN = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PresentationDTO
	{
		
		[System.Runtime.Serialization.DataMember(Name="backgroundColor")]
		public string BackgroundColor { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imageUrl")]
		public string ImageUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="textColor")]
		public string TextColor { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VariantOptionDefinitions
	{
		
		/// <summary>
		/// Required
		/// Minimum items: 1
		/// Maximum items: 3
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="definitions")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(3)]
		public VariantOptionDefinition[] Definitions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VariantOptionDefinition
	{
		
		/// <summary>
		/// Required
		/// Max length: 30
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(30)]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// Minimum items: 1
		/// Maximum items: 99
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(99)]
		public VariantOptionProperties[] Properties { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VariantOptionProperties
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageUrl")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string ImageUrl { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VariantDTO
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="barcode")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string Barcode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="costPrice")]
		public Price CostPrice { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		public string Description { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Name { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 99
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="options")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(99)]
		public VariantOption[] Options { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="presentation")]
		public PresentationDTO Presentation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="price")]
		public Price Price { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sku")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		public string Sku { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uuid")]
		public string Uuid { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vatPercentage")]
		[System.ComponentModel.DataAnnotations.Range(0, 100)]
		public System.Nullable<System.Double> VatPercentage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Price
	{
		
		/// <summary>
		/// Required
		/// Minimum: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int64.MaxValue)]
		public long Amount { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currencyId")]
		public PriceCurrencyId CurrencyId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PriceCurrencyId
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AED")]
		AED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AFA")]
		AFA = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AFN")]
		AFN = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ALL")]
		ALL = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AMD")]
		AMD = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ANG")]
		ANG = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AOA")]
		AOA = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ARS")]
		ARS = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AUD")]
		AUD = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWG")]
		AWG = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AZM")]
		AZM = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AZN")]
		AZN = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BAM")]
		BAM = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BBD")]
		BBD = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BDT")]
		BDT = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BGN")]
		BGN = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BHD")]
		BHD = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BIF")]
		BIF = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BMD")]
		BMD = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BND")]
		BND = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BOB")]
		BOB = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BRL")]
		BRL = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BSD")]
		BSD = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BTN")]
		BTN = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BWP")]
		BWP = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BYR")]
		BYR = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BZD")]
		BZD = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CAD")]
		CAD = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CDF")]
		CDF = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CHF")]
		CHF = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CLP")]
		CLP = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CNY")]
		CNY = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="COP")]
		COP = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CRC")]
		CRC = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CSD")]
		CSD = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CUC")]
		CUC = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CUP")]
		CUP = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CVE")]
		CVE = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CYP")]
		CYP = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CZK")]
		CZK = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DJF")]
		DJF = 40,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DKK")]
		DKK = 41,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DOP")]
		DOP = 42,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DZD")]
		DZD = 43,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EEK")]
		EEK = 44,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EGP")]
		EGP = 45,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ERN")]
		ERN = 46,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ETB")]
		ETB = 47,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EUR")]
		EUR = 48,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FJD")]
		FJD = 49,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FKP")]
		FKP = 50,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GBP")]
		GBP = 51,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GEL")]
		GEL = 52,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GGP")]
		GGP = 53,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GHC")]
		GHC = 54,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GHS")]
		GHS = 55,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GIP")]
		GIP = 56,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GMD")]
		GMD = 57,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GNF")]
		GNF = 58,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GTQ")]
		GTQ = 59,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GYD")]
		GYD = 60,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HKD")]
		HKD = 61,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HNL")]
		HNL = 62,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HRK")]
		HRK = 63,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HTG")]
		HTG = 64,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HUF")]
		HUF = 65,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IDR")]
		IDR = 66,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ILS")]
		ILS = 67,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IMP")]
		IMP = 68,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INR")]
		INR = 69,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IQD")]
		IQD = 70,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IRR")]
		IRR = 71,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ISK")]
		ISK = 72,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="JEP")]
		JEP = 73,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="JMD")]
		JMD = 74,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="JOD")]
		JOD = 75,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="JPY")]
		JPY = 76,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="KES")]
		KES = 77,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="KGS")]
		KGS = 78,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="KHR")]
		KHR = 79,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="KMF")]
		KMF = 80,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="KPW")]
		KPW = 81,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="KRW")]
		KRW = 82,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="KWD")]
		KWD = 83,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="KYD")]
		KYD = 84,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="KZT")]
		KZT = 85,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LAK")]
		LAK = 86,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LBP")]
		LBP = 87,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LKR")]
		LKR = 88,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LRD")]
		LRD = 89,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LSL")]
		LSL = 90,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LTL")]
		LTL = 91,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LVL")]
		LVL = 92,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LYD")]
		LYD = 93,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MAD")]
		MAD = 94,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MDL")]
		MDL = 95,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MGA")]
		MGA = 96,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MKD")]
		MKD = 97,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MMK")]
		MMK = 98,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MNT")]
		MNT = 99,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MOP")]
		MOP = 100,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MRO")]
		MRO = 101,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MTL")]
		MTL = 102,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MUR")]
		MUR = 103,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MVR")]
		MVR = 104,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MWK")]
		MWK = 105,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MXN")]
		MXN = 106,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MYR")]
		MYR = 107,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MZM")]
		MZM = 108,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MZN")]
		MZN = 109,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NAD")]
		NAD = 110,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NGN")]
		NGN = 111,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NIO")]
		NIO = 112,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NOK")]
		NOK = 113,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NPR")]
		NPR = 114,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NZD")]
		NZD = 115,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OMR")]
		OMR = 116,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PAB")]
		PAB = 117,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PEN")]
		PEN = 118,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PGK")]
		PGK = 119,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PHP")]
		PHP = 120,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PKR")]
		PKR = 121,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PLN")]
		PLN = 122,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PYG")]
		PYG = 123,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="QAR")]
		QAR = 124,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RON")]
		RON = 125,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RSD")]
		RSD = 126,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RUB")]
		RUB = 127,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RWF")]
		RWF = 128,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SAR")]
		SAR = 129,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SBD")]
		SBD = 130,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SCR")]
		SCR = 131,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SDD")]
		SDD = 132,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SDG")]
		SDG = 133,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SEK")]
		SEK = 134,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SGD")]
		SGD = 135,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SHP")]
		SHP = 136,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SIT")]
		SIT = 137,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SKK")]
		SKK = 138,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SLL")]
		SLL = 139,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SOS")]
		SOS = 140,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SPL")]
		SPL = 141,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SRD")]
		SRD = 142,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SSP")]
		SSP = 143,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="STD")]
		STD = 144,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SVC")]
		SVC = 145,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SYP")]
		SYP = 146,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SZL")]
		SZL = 147,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="THB")]
		THB = 148,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TJS")]
		TJS = 149,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TMM")]
		TMM = 150,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TMT")]
		TMT = 151,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TND")]
		TND = 152,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TOP")]
		TOP = 153,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TRL")]
		TRL = 154,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TRY")]
		TRY = 155,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TTD")]
		TTD = 156,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TVD")]
		TVD = 157,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TWD")]
		TWD = 158,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TZS")]
		TZS = 159,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UAH")]
		UAH = 160,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UGX")]
		UGX = 161,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="USD")]
		USD = 162,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UYU")]
		UYU = 163,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UZS")]
		UZS = 164,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VEB")]
		VEB = 165,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VEF")]
		VEF = 166,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VND")]
		VND = 167,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VUV")]
		VUV = 168,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="WST")]
		WST = 169,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="XAF")]
		XAF = 170,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="XAG")]
		XAG = 171,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="XAU")]
		XAU = 172,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="XCD")]
		XCD = 173,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="XDR")]
		XDR = 174,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="XOF")]
		XOF = 175,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="XPD")]
		XPD = 176,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="XPF")]
		XPF = 177,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="XPT")]
		XPT = 178,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="YER")]
		YER = 179,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ZAR")]
		ZAR = 180,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ZMK")]
		ZMK = 181,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ZMW")]
		ZMW = 182,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ZWD")]
		ZWD = 183,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ZWL")]
		ZWL = 184,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VariantOption
	{
		
		/// <summary>
		/// Required
		/// Max length: 30
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(30)]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CategoryResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="categories")]
		public CategoryDTO[] Categories { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConstraintViolation
	{
		
		[System.Runtime.Serialization.DataMember(Name="constraintType")]
		public System.Nullable<ConstraintViolationConstraintType> ConstraintType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="developerMessage")]
		public string DeveloperMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="expected")]
		public string Expected { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="propertyName")]
		public string PropertyName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ConstraintViolationConstraintType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MUST_BE_FALSE")]
		MUST_BE_FALSE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MUST_BE_TRUE")]
		MUST_BE_TRUE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MUST_BE_LESS_THAN")]
		MUST_BE_LESS_THAN = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MUST_BE_GREATER_THAN")]
		MUST_BE_GREATER_THAN = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DIGIT_OUT_OF_BOUNDS")]
		DIGIT_OUT_OF_BOUNDS = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DATE_MUST_BE_IN_THE_FUTURE")]
		DATE_MUST_BE_IN_THE_FUTURE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MUST_BE_LESS_OR_EQUAL_THAN")]
		MUST_BE_LESS_OR_EQUAL_THAN = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MUST_BE_GREATER_OR_EQUAL_TO")]
		MUST_BE_GREATER_OR_EQUAL_TO = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MUST_NOT_BE_NULL")]
		MUST_NOT_BE_NULL = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MUST_BE_NULL")]
		MUST_BE_NULL = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DATE_MUST_BE_IN_THE_PAST")]
		DATE_MUST_BE_IN_THE_PAST = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MUST_MATCH_PATTERN")]
		MUST_MATCH_PATTERN = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INVALID_SIZE")]
		INVALID_SIZE = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INVALID_EMAIL")]
		INVALID_EMAIL = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MUST_NOT_BE_EMPTY")]
		MUST_NOT_BE_EMPTY = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INVALID_RANGE")]
		INVALID_RANGE = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNKNOWN")]
		UNKNOWN = 16,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateCategoriesRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="categories")]
		public CategoryDTO[] Categories { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateSlugRequest
	{
		
		/// <summary>
		/// Required
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="productName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string ProductName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DiscountRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public Price Amount { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string Description { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="externalReference")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string ExternalReference { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imageLookupKeys")]
		public string[] ImageLookupKeys { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		public string Name { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="percentage")]
		[System.ComponentModel.DataAnnotations.Range(0, 100)]
		public System.Nullable<System.Double> Percentage { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uuid")]
		public string Uuid { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DiscountResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public Price Amount { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="created")]
		public System.DateTimeOffset Created { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="externalReference")]
		public string ExternalReference { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imageLookupKeys")]
		public string[] ImageLookupKeys { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="percentage")]
		public System.Nullable<System.Double> Percentage { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="updated")]
		public System.DateTimeOffset Updated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updatedBy")]
		public string UpdatedBy { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uuid")]
		public string Uuid { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ErrorResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="developerMessage")]
		public string DeveloperMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errorType")]
		public string ErrorType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="violations")]
		public ConstraintViolation[] Violations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ImportResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="created")]
		public System.Nullable<System.DateTimeOffset> Created { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errorMessage")]
		public string ErrorMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="finished")]
		public System.Nullable<System.DateTimeOffset> Finished { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public System.Nullable<System.Int64> Items { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<ImportResponseState> State { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="uuid")]
		public string Uuid { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ImportResponseState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IMPORTING")]
		IMPORTING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FINISHED_SUCCESS")]
		FINISHED_SUCCESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FINISHED_FAILED")]
		FINISHED_FAILED = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LibraryImagesResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="imageUrls")]
		public string[] ImageUrls { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LibraryResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="deletedDiscounts")]
		public string[] DeletedDiscounts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deletedProducts")]
		public string[] DeletedProducts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="discounts")]
		public DiscountResponse[] Discounts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fromEventLogUuid")]
		public string FromEventLogUuid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="products")]
		public ProductResponse[] Products { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="untilEventLogUuid")]
		public string UntilEventLogUuid { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProductResponse
	{
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="categories")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public string[] Categories { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="category")]
		public CategoryDTO Category { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="created")]
		public System.DateTimeOffset Created { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="externalReference")]
		public string ExternalReference { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imageLookupKeys")]
		public string[] ImageLookupKeys { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public MetadataDTO Metadata { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="online")]
		public OnlineProperties Online { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="presentation")]
		public PresentationDTO Presentation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="taxCode")]
		public string TaxCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="taxExempt")]
		public System.Nullable<System.Boolean> TaxExempt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="taxRates")]
		public string[] TaxRates { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unitName")]
		public string UnitName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="updated")]
		public System.DateTimeOffset Updated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updatedBy")]
		public string UpdatedBy { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uuid")]
		public string Uuid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="variantOptionDefinitions")]
		public VariantOptionDefinitions VariantOptionDefinitions { get; set; }
		
		/// <summary>
		/// Required
		/// Minimum items: 1
		/// Maximum items: 99
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="variants")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(99)]
		public VariantDTO[] Variants { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vatPercentage")]
		public System.Nullable<System.Double> VatPercentage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Option
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="values")]
		public string[] Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProductCountResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="productCount")]
		public int ProductCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProductCreateRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="categories")]
		public string[] Categories { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="category")]
		public CategoryDTO Category { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createWithDefaultTax")]
		public System.Nullable<System.Boolean> CreateWithDefaultTax { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		public string Description { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="externalReference")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string ExternalReference { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imageLookupKeys")]
		public string[] ImageLookupKeys { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public MetadataDTO Metadata { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="online")]
		public OnlineProperties Online { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="presentation")]
		public PresentationDTO Presentation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="taxCode")]
		public string TaxCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="taxExempt")]
		public System.Nullable<System.Boolean> TaxExempt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="taxRates")]
		public string[] TaxRates { get; set; }
		
		/// <summary>
		/// Max length: 32
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unitName")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(32)]
		public string UnitName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uuid")]
		public string Uuid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="variantOptionDefinitions")]
		public VariantOptionDefinitions VariantOptionDefinitions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="variants")]
		public VariantDTO[] Variants { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vatPercentage")]
		[System.ComponentModel.DataAnnotations.Range(0, 100)]
		public System.Nullable<System.Double> VatPercentage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RenameCategoryRequest
	{
		
		/// <summary>
		/// Required
		/// Max length: 100
		/// Min length: 1
		/// Pattern: \S|\S.*\S
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"\S|\S.*\S")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SlugResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="productName")]
		public string ProductName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="slug")]
		public string Slug { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TaxRate
	{
		
		[System.Runtime.Serialization.DataMember(Name="default")]
		public System.Nullable<System.Boolean> Default { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 512
		/// Min length: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="label")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(512)]
		public string Label { get; set; }
		
		/// <summary>
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="percentage")]
		[System.ComponentModel.DataAnnotations.Range(System.Double.MinValue, 100)]
		public System.Nullable<System.Double> Percentage { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uuid")]
		public string Uuid { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TaxRateProductCount
	{
		
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="taxRateUuid")]
		public string TaxRateUuid { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TaxRateProductCountResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="counts")]
		public TaxRateProductCount[] Counts { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TaxRateUpdateRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="default")]
		public System.Nullable<System.Boolean> Default { get; set; }
		
		/// <summary>
		/// Max length: 512
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="label")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(512)]
		public string Label { get; set; }
		
		/// <summary>
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="percentage")]
		[System.ComponentModel.DataAnnotations.Range(System.Double.MinValue, 100)]
		public System.Nullable<System.Double> Percentage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TaxRatesCreateRequest
	{
		
		/// <summary>
		/// Required
		/// Minimum items: 0
		/// Maximum items: 15
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="taxRates")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(15)]
		public TaxRate[] TaxRates { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TaxRatesResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="taxRates")]
		public TaxRate[] TaxRates { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TaxSettingsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="organizationUuid")]
		public string OrganizationUuid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="taxationMode")]
		public System.Nullable<TaxSettingsResponseTaxationMode> TaxationMode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="taxationType")]
		public System.Nullable<TaxSettingsResponseTaxationType> TaxationType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum TaxSettingsResponseTaxationMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EXCLUSIVE")]
		EXCLUSIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INCLUSIVE")]
		INCLUSIVE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum TaxSettingsResponseTaxationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NONE")]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SALES_TAX")]
		SALES_TAX = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VAT")]
		VAT = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TaxSettingsUpdateRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="taxationMode")]
		public TaxSettingsResponseTaxationMode TaxationMode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VariantOptionsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="options")]
		public Option[] Options { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Retrieve all categories
		/// GetProductTypes organizations/{organizationUuid}/categories/v2
		/// </summary>
		/// <returns>List of all categories</returns>
		public async Task<CategoryResponse> GetProductTypesAsync(string organizationUuid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "organizations/"+ (organizationUuid==null? "" : System.Uri.EscapeDataString(organizationUuid))+"/categories/v2";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CategoryResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new category
		/// CreateCategories organizations/{organizationUuid}/categories/v2
		/// </summary>
		public async Task CreateCategoriesAsync(string organizationUuid, CreateCategoriesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "organizations/"+ (organizationUuid==null? "" : System.Uri.EscapeDataString(organizationUuid))+"/categories/v2";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a category
		/// DeleteCategory organizations/{organizationUuid}/categories/v2/{categoryUuid}
		/// </summary>
		public async Task DeleteCategoryAsync(string organizationUuid, string categoryUuid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "organizations/"+ (organizationUuid==null? "" : System.Uri.EscapeDataString(organizationUuid))+"/categories/v2/"+ (categoryUuid==null? "" : System.Uri.EscapeDataString(categoryUuid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Rename a category
		/// RenameCategory organizations/{organizationUuid}/categories/v2/{categoryUuid}
		/// </summary>
		public async Task RenameCategoryAsync(string organizationUuid, string categoryUuid, RenameCategoryRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "organizations/"+ (organizationUuid==null? "" : System.Uri.EscapeDataString(organizationUuid))+"/categories/v2/"+ (categoryUuid==null? "" : System.Uri.EscapeDataString(categoryUuid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieve all discounts
		/// GetAllDiscounts organizations/{organizationUuid}/discounts
		/// </summary>
		/// <returns>List of all discounts</returns>
		public async Task<DiscountResponse[]> GetAllDiscountsAsync(string organizationUuid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "organizations/"+ (organizationUuid==null? "" : System.Uri.EscapeDataString(organizationUuid))+"/discounts";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DiscountResponse[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a discount
		/// Creates a single discount entity. The location of the newly created discount will be available in the successful response as a HttpHeaders.LOCATION header
		/// CreateDiscount organizations/{organizationUuid}/discounts
		/// </summary>
		public async Task CreateDiscountAsync(string organizationUuid, DiscountRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "organizations/"+ (organizationUuid==null? "" : System.Uri.EscapeDataString(organizationUuid))+"/discounts";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a single discount
		/// DeleteDiscount organizations/{organizationUuid}/discounts/{discountUuid}
		/// </summary>
		public async Task DeleteDiscountAsync(string organizationUuid, string discountUuid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "organizations/"+ (organizationUuid==null? "" : System.Uri.EscapeDataString(organizationUuid))+"/discounts/"+ (discountUuid==null? "" : System.Uri.EscapeDataString(discountUuid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve a single discount
		/// Get the full discount with the provided UUID. The method supports conditional GET through providing a HttpHeaders.IF_NONE_MATCH header. If the conditional prerequisite is fullfilled, the full discount is returned: otherwise a 304 not modified will be returned with an empty body.
		/// GetDiscount organizations/{organizationUuid}/discounts/{discountUuid}
		/// </summary>
		/// <returns>Discount</returns>
		public async Task<DiscountResponse> GetDiscountAsync(string organizationUuid, string discountUuid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "organizations/"+ (organizationUuid==null? "" : System.Uri.EscapeDataString(organizationUuid))+"/discounts/"+ (discountUuid==null? "" : System.Uri.EscapeDataString(discountUuid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DiscountResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a single discount
		/// Updates a discount entity using JSON merge patch (https://tools.ietf.org/html/rfc7386). This means that only included fields will be changed: null values removes the field on the target entity, and other values updates the field. Conditional updates are supported through the HttpHeaders.IF_MATCH header. If the conditional prerequisite is fullfilled, the discount is updated: otherwise a 412 precondition failed will be returned with an empty body.
		/// UpdateDiscount organizations/{organizationUuid}/discounts/{discountUuid}
		/// </summary>
		public async Task UpdateDiscountAsync(string organizationUuid, string discountUuid, DiscountRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "organizations/"+ (organizationUuid==null? "" : System.Uri.EscapeDataString(organizationUuid))+"/discounts/"+ (discountUuid==null? "" : System.Uri.EscapeDataString(discountUuid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieve all library item images
		/// Retrieves all library items images used by the organization, sorted by updated date
		/// GetAllImageUrls organizations/{organizationUuid}/images
		/// </summary>
		/// <returns>List of all image urls</returns>
		public async Task<LibraryImagesResponse> GetAllImageUrlsAsync(string organizationUuid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "organizations/"+ (organizationUuid==null? "" : System.Uri.EscapeDataString(organizationUuid))+"/images";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LibraryImagesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get status for latest import
		/// GetLatestImportStatus organizations/{organizationUuid}/import/status
		/// </summary>
		/// <returns>Import status</returns>
		public async Task<ImportResponse> GetLatestImportStatusAsync(string organizationUuid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "organizations/"+ (organizationUuid==null? "" : System.Uri.EscapeDataString(organizationUuid))+"/import/status";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ImportResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get status for an import
		/// GetStatusByUuid organizations/{organizationUuid}/import/status/{importUuid}
		/// </summary>
		/// <returns>Import status</returns>
		public async Task<ImportResponse> GetStatusByUuidAsync(string organizationUuid, string importUuid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "organizations/"+ (organizationUuid==null? "" : System.Uri.EscapeDataString(organizationUuid))+"/import/status/"+ (importUuid==null? "" : System.Uri.EscapeDataString(importUuid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ImportResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Import library items
		/// ImportLibraryV2 organizations/{organizationUuid}/import/v2
		/// </summary>
		/// <returns>Import status</returns>
		public async Task<ImportResponse> ImportLibraryV2Async(string organizationUuid, BulkImportRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "organizations/"+ (organizationUuid==null? "" : System.Uri.EscapeDataString(organizationUuid))+"/import/v2";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ImportResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieve the entire library
		/// Will return the entire library for the authenticated user. If size of the library exceeds server preferences (normally 500) or the value of the optional limit parameter, the result will be paginated. Paginated responses return a Link header, indicating the next URI to fetch. The resulting header value will look something like:
		/// 
		/// <https://products.izettle.com/organizations/self/library?limit=X&offset=Y>; rel="next"
		/// 
		/// where limit is number of items in response, and offset is the current position in pagination. The rel-part in the header is the links relation to the data previously recieved. The idea is that as long as this header is present there are still items remaining to be fetched. When either the header is not present or it's value doesn't contain any "next" value, all items have been sent to the client.
		/// 
		/// Note: The client should NOT try to extract query parameters from the URI, but rather use it as-is for the next request. Also, clients should be perpared that one Link header might contain multiple other IRIs that are not "next" (there will never be more than one "next" though). See more at:
		/// 
		/// IETF: https://tools.ietf.org/html/rfc5988
		/// GitHub: https://developer.github.com/guides/traversing-with-pagination/
		/// 
		/// If eventLogUuid is provided, the response will only include events affecting the library since that event. Such responses are normally quite small and would be a preferred method for most fat clients after retrieving the initial full library.
		/// 
		/// GetLibrary organizations/{organizationUuid}/library
		/// </summary>
		/// <returns>List of library items</returns>
		public async Task<LibraryResponse> GetLibraryAsync(string organizationUuid, string eventLogUuid, int limit, string offset, bool all, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "organizations/"+ (organizationUuid==null? "" : System.Uri.EscapeDataString(organizationUuid))+"/library&eventLogUuid=" + (eventLogUuid==null? "" : System.Uri.EscapeDataString(eventLogUuid))+"&limit="+limit+"&offset=" + (offset==null? "" : System.Uri.EscapeDataString(offset))+"&all="+all;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LibraryResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a list of products
		/// DeleteProducts organizations/{organizationUuid}/products
		/// </summary>
		/// <param name="uuid">List of product UUIDs to be deleted</param>
		public async Task DeleteProductsAsync(string organizationUuid, string[] uuid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "organizations/"+ (organizationUuid==null? "" : System.Uri.EscapeDataString(organizationUuid))+"/products&"+string.Join("&", uuid.Select(z => $"uuid={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve all products visible in POS
		/// GetAllProductsInPos organizations/{organizationUuid}/products
		/// </summary>
		/// <returns>A list of products</returns>
		public async Task<ProductResponse[]> GetAllProductsInPosAsync(string organizationUuid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "organizations/"+ (organizationUuid==null? "" : System.Uri.EscapeDataString(organizationUuid))+"/products";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProductResponse[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new product
		/// CreateProduct organizations/{organizationUuid}/products
		/// </summary>
		public async Task CreateProductAsync(string organizationUuid, bool returnEntity, ProductCreateRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "organizations/"+ (organizationUuid==null? "" : System.Uri.EscapeDataString(organizationUuid))+"/products&returnEntity="+returnEntity;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Create a product identifier
		/// Creates a unique slug (identifier) for a product. The slug is used to create a product URL
		/// CreateProductSlug organizations/{organizationUuid}/products/online/slug
		/// </summary>
		/// <returns>Product slug</returns>
		public async Task<SlugResponse> CreateProductSlugAsync(string organizationUuid, CreateSlugRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "organizations/"+ (organizationUuid==null? "" : System.Uri.EscapeDataString(organizationUuid))+"/products/online/slug";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SlugResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieve an aggregate of active Options in the library
		/// GetAllOptions organizations/{organizationUuid}/products/options
		/// </summary>
		/// <returns>List of Options</returns>
		public async Task<VariantOptionsResponse[]> GetAllOptionsAsync(string organizationUuid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "organizations/"+ (organizationUuid==null? "" : System.Uri.EscapeDataString(organizationUuid))+"/products/options";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<VariantOptionsResponse[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve all products visible in POS – v2
		/// GetAllProductsV2 organizations/{organizationUuid}/products/v2
		/// </summary>
		/// <param name="sort">If true, sorts response by created date</param>
		/// <returns>A list of products</returns>
		public async Task<ProductResponse[]> GetAllProductsV2Async(string organizationUuid, bool sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "organizations/"+ (organizationUuid==null? "" : System.Uri.EscapeDataString(organizationUuid))+"/products/v2&sort="+sort;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProductResponse[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve the count of existing products
		/// CountAllProducts organizations/{organizationUuid}/products/v2/count
		/// </summary>
		/// <returns>Count of existing products</returns>
		public async Task<ProductCountResponse[]> CountAllProductsAsync(string organizationUuid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "organizations/"+ (organizationUuid==null? "" : System.Uri.EscapeDataString(organizationUuid))+"/products/v2/count";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProductCountResponse[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a single product
		/// Updates a product entity using JSON merge patch (https://tools.ietf.org/html/rfc7386). This means that only included fields will be changed: null values removes the field on the target entity, and other values updates the field. Conditional updates are supported through the HttpHeaders.IF_MATCH header. If the conditional prerequisite is fullfilled, the product is updated: otherwise a 412 (precondition failed) will be returned with an empty body.
		/// UpdateProduct organizations/{organizationUuid}/products/v2/{productUuid}
		/// </summary>
		public async Task UpdateProductAsync(string organizationUuid, string productUuid, FullProductUpdateRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "organizations/"+ (organizationUuid==null? "" : System.Uri.EscapeDataString(organizationUuid))+"/products/v2/"+ (productUuid==null? "" : System.Uri.EscapeDataString(productUuid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a single product
		/// DeleteProduct organizations/{organizationUuid}/products/{productUuid}
		/// </summary>
		public async Task DeleteProductAsync(string organizationUuid, string productUuid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "organizations/"+ (organizationUuid==null? "" : System.Uri.EscapeDataString(organizationUuid))+"/products/"+ (productUuid==null? "" : System.Uri.EscapeDataString(productUuid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve a single product
		/// Get the full product with the provided UUID. The method supports conditional GET through providing a HttpHeaders.IF_NONE_MATCH header. If the conditional prerequisite is fullfilled, the full product is returned, otherwise a 304 not modified will be returned with an empty body.
		/// GetProduct organizations/{organizationUuid}/products/{productUuid}
		/// </summary>
		/// <returns>Product</returns>
		public async Task<ProductResponse> GetProductAsync(string organizationUuid, string productUuid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "organizations/"+ (organizationUuid==null? "" : System.Uri.EscapeDataString(organizationUuid))+"/products/"+ (productUuid==null? "" : System.Uri.EscapeDataString(productUuid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProductResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all available tax rates
		/// GetTaxRates v1/taxes
		/// </summary>
		/// <returns>List of tax rates</returns>
		public async Task<TaxRatesResponse[]> GetTaxRatesAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/taxes";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TaxRatesResponse[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create new tax rates
		/// CreateTaxRates v1/taxes
		/// </summary>
		public async Task CreateTaxRatesAsync(TaxRatesCreateRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/taxes";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get all tax rates and a count of products associated with each
		/// GetProductCountForAllTaxes v1/taxes/count
		/// </summary>
		/// <returns>Count of products for each tax rate</returns>
		public async Task<TaxRateProductCountResponse> GetProductCountForAllTaxesAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/taxes/count";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TaxRateProductCountResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the organization tax settings
		/// GetTaxSettings v1/taxes/settings
		/// </summary>
		/// <returns>Tax settings</returns>
		public async Task<TaxSettingsResponse> GetTaxSettingsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/taxes/settings";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TaxSettingsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update the organization tax settings
		/// SetTaxationMode v1/taxes/settings
		/// </summary>
		/// <returns>Updated tax settings</returns>
		public async Task<TaxSettingsResponse> SetTaxationModeAsync(TaxSettingsUpdateRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/taxes/settings";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TaxSettingsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a single tax rate
		/// DeleteTaxRate v1/taxes/{taxRateUuid}
		/// </summary>
		public async Task DeleteTaxRateAsync(string taxRateUuid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/taxes/"+ (taxRateUuid==null? "" : System.Uri.EscapeDataString(taxRateUuid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a single tax rate
		/// GetTaxRate v1/taxes/{taxRateUuid}
		/// </summary>
		/// <returns>Single tax rate</returns>
		public async Task<TaxRate> GetTaxRateAsync(string taxRateUuid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/taxes/"+ (taxRateUuid==null? "" : System.Uri.EscapeDataString(taxRateUuid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TaxRate>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a single tax rate
		/// UpdateTaxRate v1/taxes/{taxRateUuid}
		/// </summary>
		/// <returns>Updated tax rate</returns>
		public async Task<TaxRate> UpdateTaxRateAsync(string taxRateUuid, TaxRateUpdateRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/taxes/"+ (taxRateUuid==null? "" : System.Uri.EscapeDataString(taxRateUuid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TaxRate>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
