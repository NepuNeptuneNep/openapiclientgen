//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Added
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="programme")]
		public Programme Programme { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public AddedType Type { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="urn")]
		public string Urn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Programme
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="categories")]
		public string[] Categories { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="count")]
		public double Count { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="images")]
		public ProgrammeImages Images { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="initial_children")]
		public Episode[] Initial_children { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public ProgrammeLabels Labels { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lexical_sort_letter")]
		public string Lexical_sort_letter { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="master_brand")]
		public Master_brand Master_brand { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="programme_type")]
		public System.Nullable<ProgrammeProgramme_type> Programme_type { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ProgrammeStatus Status { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="synopses")]
		public ProgrammeSynopses Synopses { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tleo_type")]
		public System.Nullable<ProgrammeTleo_type> Tleo_type { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public ProgrammeType Type { get; set; }
	}
	
	public class ProgrammeImages
	{
		
		[System.Runtime.Serialization.DataMember(Name="inherited_from")]
		public string Inherited_from { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="standard")]
		public string Standard { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public ProgrammeImagesType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ProgrammeImagesType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		image = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Episode
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="audio_described")]
		public bool Audio_described { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="categories")]
		public string[] Categories { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="childrens")]
		public System.Nullable<System.Boolean> Childrens { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="editorial_subtitle")]
		public string Editorial_subtitle { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="editorial_title")]
		public string Editorial_title { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="event_group_id")]
		public string Event_group_id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="guidance")]
		public bool Guidance { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="has_credits")]
		public System.Nullable<System.Boolean> Has_credits { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="images")]
		public EpisodeImages Images { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public EpisodeLabels Labels { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lexical_sort_letter")]
		public string Lexical_sort_letter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="live")]
		public System.Nullable<System.Boolean> Live { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="live_subtitle")]
		public string Live_subtitle { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="live_title")]
		public string Live_title { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="master_brand")]
		public Master_brand Master_brand { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="next_broadcast")]
		public EpisodeNext_broadcast Next_broadcast { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="numeric_tleo_position")]
		public System.Nullable<System.Double> Numeric_tleo_position { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="original_title")]
		public string Original_title { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parent_id")]
		public string Parent_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parent_position")]
		public System.Nullable<System.Double> Parent_position { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="preview_id")]
		public string Preview_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="programme_type")]
		public System.Nullable<EpisodeProgramme_type> Programme_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="promoted")]
		public System.Nullable<System.Boolean> Promoted { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="related_links")]
		public EpisodeRelated_links[] EpisodeRelated_links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="release_date")]
		public string Release_date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="release_date_time")]
		public string Release_date_time { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requires_ab")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string[] Requires_ab { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="requires_sign_in")]
		public bool Requires_sign_in { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="requires_tv_licence")]
		public System.Nullable<System.Boolean> Requires_tv_licence { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="signed")]
		public bool Signed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="slice_id")]
		public string Slice_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="slice_subtitle")]
		public string Slice_subtitle { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public EpisodeStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subtitle")]
		public string Subtitle { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="synopses")]
		public EpisodeSynopses Synopses { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tests")]
		public EpisodeTests[] EpisodeTests { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tleo_id")]
		public string Tleo_id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tleo_type")]
		public EpisodeTleo_type Tleo_type { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public EpisodeType Type { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="versions")]
		public string[] Versions { get; set; }
	}
	
	public class EpisodeImages
	{
		
		[System.Runtime.Serialization.DataMember(Name="character_image")]
		public string Character_image { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="inherited_from")]
		public string Inherited_from { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="live")]
		public string Live { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="portrait")]
		public string Portrait { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="promotional")]
		public string Promotional { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="promotional_with_logo")]
		public string Promotional_with_logo { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="standard")]
		public string Standard { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public EpisodeImagesType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum EpisodeImagesType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		image = 0,
	}
	
	public class EpisodeLabels
	{
		
		[System.Runtime.Serialization.DataMember(Name="category")]
		public string Category { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="editorial")]
		public string Editorial { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="editorial_category")]
		public string Editorial_category { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="time")]
		public string Time { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Master_brand
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="attribution")]
		public string Attribution { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ident_id")]
		public string Ident_id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="titles")]
		public Master_brandTitles Titles { get; set; }
	}
	
	public class Master_brandTitles
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="large")]
		public string Large { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="medium")]
		public string Medium { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="small")]
		public string Small { get; set; }
	}
	
	public class EpisodeNext_broadcast
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="channel_title")]
		public string Channel_title { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="scheduled_start")]
		public string Scheduled_start { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum EpisodeProgramme_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		narrative = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		sequential = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="self-contained")]
		selfMinuscontained = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		strand = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unclassified = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="one-off")]
		oneMinusoff = 5,
	}
	
	public class EpisodeRelated_links
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public EpisodeRelated_linksType Type { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum EpisodeRelated_linksType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		link = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum EpisodeStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		available = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unavailable = 1,
	}
	
	public class EpisodeSynopses
	{
		
		[System.Runtime.Serialization.DataMember(Name="editorial")]
		public string Editorial { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="large")]
		public string Large { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="live")]
		public string Live { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="medium")]
		public string Medium { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="preview")]
		public string Preview { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="programme_small")]
		public string Programme_small { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="small")]
		public string Small { get; set; }
	}
	
	public class EpisodeTests
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public EpisodeTestsStatus Status { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="variants")]
		public EpisodeTestsVariants[] EpisodeTestsVariants { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum EpisodeTestsStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		active = 0,
	}
	
	public class EpisodeTestsVariants
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public EpisodeTestsVariantsData Data { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	public class EpisodeTestsVariantsData
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="images")]
		public EpisodeTestsVariantsDataImages Images { get; set; }
	}
	
	public class EpisodeTestsVariantsDataImages
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="standard")]
		public string Standard { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public EpisodeTestsVariantsDataImagesType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum EpisodeTestsVariantsDataImagesType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		episode = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		episode_large = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum EpisodeTleo_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		episode = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		brand = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		series = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum EpisodeType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		episode = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		episode_large = 1,
	}
	
	public class ProgrammeLabels
	{
		
		[System.Runtime.Serialization.DataMember(Name="category")]
		public string Category { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ProgrammeProgramme_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		narrative = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		sequential = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="self-contained")]
		selfMinuscontained = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		strand = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unclassified = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="one-off")]
		oneMinusoff = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ProgrammeStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		available = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unavailable = 1,
	}
	
	public class ProgrammeSynopses
	{
		
		[System.Runtime.Serialization.DataMember(Name="large")]
		public string Large { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="medium")]
		public string Medium { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="small")]
		public string Small { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ProgrammeTleo_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		brand = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		series = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		episode = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ProgrammeType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		programme = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		programme_large = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AddedType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		added = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Broadcast
	{
		
		[System.Runtime.Serialization.DataMember(Name="available_on_hd_service")]
		public string Available_on_hd_service { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="blanked")]
		public bool Blanked { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="channel_title")]
		public string Channel_title { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="duration")]
		public BroadcastDuration Duration { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="episode")]
		public Episode Episode { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="episode_id")]
		public string Episode_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="events")]
		public BroadcastEvents[] BroadcastEvents { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="repeat")]
		public bool Repeat { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="scheduled_end")]
		public string Scheduled_end { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="scheduled_start")]
		public string Scheduled_start { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="service_id")]
		public string Service_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transmission_end")]
		public string Transmission_end { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transmission_start")]
		public string Transmission_start { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public BroadcastType Type { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="version_id")]
		public string Version_id { get; set; }
	}
	
	public class BroadcastDuration
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	public class BroadcastEvents
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="system")]
		public string System { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="time")]
		public string Time { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BroadcastType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		broadcast = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Category
	{
		
		[System.Runtime.Serialization.DataMember(Name="child_episode_count")]
		public System.Nullable<System.Double> Child_episode_count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="child_programme_count")]
		public System.Nullable<System.Double> Child_programme_count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contextual_title")]
		public string Contextual_title { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public CategoryKind Kind { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parent_category")]
		public string Parent_category { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sub_categories")]
		public Category[] Sub_categories { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public CategoryType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CategoryKind
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		genre = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		accessibility = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		national = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		childrens = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CategoryType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		category = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Channel
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="has_schedule")]
		public bool Has_schedule { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="master_brand_id")]
		public string Master_brand_id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="master_brand_title")]
		public string Master_brand_title { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="on_air")]
		public System.Nullable<System.Boolean> On_air { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public ChannelType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ChannelType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		channel = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Clip
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="images")]
		public ClipImages Images { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public ClipLabels Labels { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="master_brand")]
		public Master_brand Master_brand { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="onward_journey")]
		public ClipOnward_journey Onward_journey { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="promotion_type")]
		public System.Nullable<ClipPromotion_type> Promotion_type { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="synopses")]
		public ClipSynopses Synopses { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tleo_id")]
		public string Tleo_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tleo_type")]
		public System.Nullable<ClipTleo_type> Tleo_type { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public ClipType Type { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="versions")]
		public ClipVersions[] ClipVersions { get; set; }
	}
	
	public class ClipImages
	{
		
		[System.Runtime.Serialization.DataMember(Name="inherited_from")]
		public string Inherited_from { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="standard")]
		public string Standard { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public ClipImagesType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ClipImagesType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		image = 0,
	}
	
	public class ClipLabels
	{
		
		[System.Runtime.Serialization.DataMember(Name="category")]
		public string Category { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="editorial")]
		public string Editorial { get; set; }
	}
	
	public class ClipOnward_journey
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<ClipOnward_journeyType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ClipOnward_journeyType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		episode = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ClipPromotion_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		available_now = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		coming_soon = 1,
	}
	
	public class ClipSynopses
	{
		
		[System.Runtime.Serialization.DataMember(Name="editorial")]
		public string Editorial { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="large")]
		public string Large { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="medium")]
		public string Medium { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="small")]
		public string Small { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ClipTleo_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		episode = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		brand = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		series = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ClipType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		clip = 0,
	}
	
	public class ClipVersions
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="availability")]
		public ClipVersionsAvailability Availability { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="credits_start")]
		public System.Nullable<System.Double> Credits_start { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="download")]
		public bool Download { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="duration")]
		public ClipVersionsDuration Duration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="events")]
		public string[] Events { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="first_broadcast")]
		public string First_broadcast { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="first_broadcast_date_time")]
		public string First_broadcast_date_time { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guidance")]
		public ClipVersionsGuidance Guidance { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="hd")]
		public bool Hd { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="interactions")]
		public Interaction[] Interactions { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public ClipVersionsKind Kind { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rrc")]
		public ClipVersionsRrc Rrc { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="service_id")]
		public string Service_id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public ClipVersionsType Type { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uhd")]
		public bool Uhd { get; set; }
	}
	
	public class ClipVersionsAvailability
	{
		
		[System.Runtime.Serialization.DataMember(Name="accurate_start")]
		public string Accurate_start { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="end")]
		public string End { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="remaining")]
		public ClipVersionsAvailabilityRemaining Remaining { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="start")]
		public string Start { get; set; }
	}
	
	public class ClipVersionsAvailabilityRemaining
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
	}
	
	public class ClipVersionsDuration
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	public class ClipVersionsGuidance
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="text")]
		public ClipVersionsGuidanceText Text { get; set; }
	}
	
	public class ClipVersionsGuidanceText
	{
		
		[System.Runtime.Serialization.DataMember(Name="large")]
		public string Large { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="medium")]
		public string Medium { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="small")]
		public string Small { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Interaction
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="interaction_points")]
		public InteractionInteraction_points Interaction_points { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="subtype")]
		public string Subtype { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="title")]
		public InteractionTitle Title { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class InteractionInteraction_points
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="show_from")]
		public double Show_from { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="skip_to")]
		public double Skip_to { get; set; }
	}
	
	public class InteractionTitle
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="long")]
		public string Long { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="short")]
		public string Short { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ClipVersionsKind
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		legal = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		editorial = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="technical-replacement")]
		technicalMinusreplacement = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		original = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="iplayer-version")]
		iplayerMinusversion = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		lengthened = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		shortened = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pre-watershed")]
		preMinuswatershed = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="post-watershed")]
		postMinuswatershed = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="warnings-higher")]
		warningsMinushigher = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="warnings-lower")]
		warningsMinuslower = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="warnings-none")]
		warningsMinusnone = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		duplication = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="open-subtitled")]
		openMinussubtitled = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		other = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="audio-described")]
		audioMinusdescribed = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		signed = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		webcast = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		simulcast = 18,
	}
	
	public class ClipVersionsRrc
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public ClipVersionsRrcDescription Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class ClipVersionsRrcDescription
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="large")]
		public string Large { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="small")]
		public string Small { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ClipVersionsType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		version = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		version_large = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Group
	{
		
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Double> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="episode_sort_direction")]
		public string Episode_sort_direction { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="group_type")]
		public System.Nullable<GroupGroup_type> Group_type { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="images")]
		public GroupImages Images { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="initial_children")]
		public string[] Initial_children { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="master_brand")]
		public Master_brand Master_brand { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="related_links")]
		public GroupRelated_links[] GroupRelated_links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="short_title")]
		public string Short_title { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stacked")]
		public System.Nullable<System.Boolean> Stacked { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="synopses")]
		public GroupSynopses Synopses { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public GroupType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GroupGroup_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		tleo = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		curated = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		automated = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="event")]
		_event = 3,
	}
	
	public class GroupImages
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="standard")]
		public string Standard { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public GroupImagesType Type { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="vertical")]
		public string Vertical { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GroupImagesType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		image = 0,
	}
	
	public class GroupRelated_links
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class GroupSynopses
	{
		
		[System.Runtime.Serialization.DataMember(Name="large")]
		public string Large { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="medium")]
		public string Medium { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="small")]
		public string Small { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GroupType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		group = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		group_large = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Ibl
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Promotion
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="images")]
		public PromotionImages Images { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public PromotionLabels Labels { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subtitle")]
		public string Subtitle { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="synopses")]
		public PromotionSynopses Synopses { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public PromotionType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class PromotionImages
	{
		
		[System.Runtime.Serialization.DataMember(Name="inherited_from")]
		public string Inherited_from { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="standard")]
		public string Standard { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public PromotionImagesType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PromotionImagesType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		image = 0,
	}
	
	public class PromotionLabels
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="promotion")]
		public string Promotion { get; set; }
	}
	
	public class PromotionSynopses
	{
		
		[System.Runtime.Serialization.DataMember(Name="large")]
		public string Large { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="medium")]
		public string Medium { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="small")]
		public string Small { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PromotionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		promotion = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Region
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public RegionKind Kind { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="short_id")]
		public string Short_id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public RegionType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum RegionKind
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		regional = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		national = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum RegionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		region = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Search_group
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="episode")]
		public Episode Episode { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public Search_groupType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum Search_groupType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		search_group = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Store_version
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="download")]
		public bool Download { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="duration")]
		public Store_versionDuration Duration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guidance")]
		public Store_versionGuidance Guidance { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="hd")]
		public bool Hd { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="store_id")]
		public string Store_id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="store_profile")]
		public string Store_profile { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="store_session")]
		public Store_versionStore_session Store_session { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public Store_versionType Type { get; set; }
	}
	
	public class Store_versionDuration
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	public class Store_versionGuidance
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="text")]
		public Store_versionGuidanceText Text { get; set; }
	}
	
	public class Store_versionGuidanceText
	{
		
		[System.Runtime.Serialization.DataMember(Name="large")]
		public string Large { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="medium")]
		public string Medium { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="small")]
		public string Small { get; set; }
	}
	
	public class Store_versionStore_session
	{
		
		[System.Runtime.Serialization.DataMember(Name="ceiling")]
		public System.Nullable<System.Double> Ceiling { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="stats")]
		public Store_versionStore_sessionStats Stats { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="token")]
		public string Token { get; set; }
	}
	
	public class Store_versionStore_sessionStats
	{
		
		[System.Runtime.Serialization.DataMember(Name="assetName")]
		public string AssetName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contentType")]
		public string ContentType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contentVariant")]
		public string ContentVariant { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="episodeName")]
		public string EpisodeName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parentPID")]
		public string ParentPID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parentPIDType")]
		public string ParentPIDType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="productVariant")]
		public string ProductVariant { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="viewerId")]
		public string ViewerId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum Store_versionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		store_version = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Trailer
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public TrailerKind Kind { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public TrailerType Type { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="version_id")]
		public string Version_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum TrailerKind
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		available_now = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		watch_now = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		coming_soon = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		streaming_now_sounds = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		other = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum TrailerType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		trailer = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class User_recommendation
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="algorithm")]
		public string Algorithm { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="episode")]
		public Episode Episode { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public User_recommendationType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum User_recommendationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		user_recommendation = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Version
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="availability")]
		public VersionAvailability Availability { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="credits_start")]
		public System.Nullable<System.Double> Credits_start { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="download")]
		public bool Download { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="duration")]
		public VersionDuration Duration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="events")]
		public string[] Events { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="first_broadcast")]
		public string First_broadcast { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="first_broadcast_date_time")]
		public string First_broadcast_date_time { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guidance")]
		public VersionGuidance Guidance { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="hd")]
		public bool Hd { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="interactions")]
		public Interaction[] Interactions { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public VersionKind Kind { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rrc")]
		public VersionRrc Rrc { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="service_id")]
		public string Service_id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public VersionType Type { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uhd")]
		public bool Uhd { get; set; }
	}
	
	public class VersionAvailability
	{
		
		[System.Runtime.Serialization.DataMember(Name="accurate_start")]
		public string Accurate_start { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="end")]
		public string End { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="remaining")]
		public VersionAvailabilityRemaining Remaining { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="start")]
		public string Start { get; set; }
	}
	
	public class VersionAvailabilityRemaining
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
	}
	
	public class VersionDuration
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	public class VersionGuidance
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="text")]
		public VersionGuidanceText Text { get; set; }
	}
	
	public class VersionGuidanceText
	{
		
		[System.Runtime.Serialization.DataMember(Name="large")]
		public string Large { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="medium")]
		public string Medium { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="small")]
		public string Small { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum VersionKind
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		legal = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		editorial = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="technical-replacement")]
		technicalMinusreplacement = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		original = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="iplayer-version")]
		iplayerMinusversion = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		lengthened = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		shortened = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pre-watershed")]
		preMinuswatershed = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="post-watershed")]
		postMinuswatershed = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="warnings-higher")]
		warningsMinushigher = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="warnings-lower")]
		warningsMinuslower = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="warnings-none")]
		warningsMinusnone = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		duplication = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="open-subtitled")]
		openMinussubtitled = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		other = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="audio-described")]
		audioMinusdescribed = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		signed = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		webcast = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		simulcast = 18,
	}
	
	public class VersionRrc
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public VersionRrcDescription Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class VersionRrcDescription
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="large")]
		public string Large { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="small")]
		public string Small { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum VersionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		version = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		version_large = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Watching
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="episode")]
		public Episode Episode { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="has_next")]
		public bool Has_next { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="offset")]
		public System.Nullable<System.Double> Offset { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="programme")]
		public Programme Programme { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="progress")]
		public System.Nullable<System.Double> Progress { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="remaining")]
		public System.Nullable<System.Double> Remaining { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<WatchingStatus> Status { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public WatchingType Type { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="urn")]
		public string Urn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="version")]
		public Version Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum WatchingStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		current = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		next = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ended = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum WatchingType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		watching = 0,
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Programmes by initial title character
		/// Get the Programmes whose title begins with the given initial character.
		/// Get_Programmes_AtoZ_search_ atoz/{letter}/programmes
		/// </summary>
		/// <param name="letter">Letter to search by, a to z or the string '0-9'</param>
		/// <param name="rights">The rights group to limit results to.</param>
		/// <param name="page">The page index.</param>
		/// <param name="per_page">The number of results to return.</param>
		/// <param name="initial_child_count">The depth to return child entities.
		/// Minimum: 1
		/// Maximum: 4
		// </param>
		/// <param name="sort">The sort order of the results.</param>
		/// <param name="sort_direction">Whether to sort ascending or descending</param>
		/// <param name="availability">Whether to return all, or available programmes</param>
		/// <returns>Default response</returns>
		public async Task<Ibl> Get_Programmes_AtoZ_search_Async(string letter, Get_Programmes_AtoZ_search_Rights rights, long page, long per_page, int initial_child_count, Get_Programmes_AtoZ_search_Sort sort, Get_Programmes_AtoZ_search_Sort_direction sort_direction, Get_Programmes_AtoZ_search_Availability availability, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "atoz/"+ (letter==null? "" : System.Uri.EscapeDataString(letter))+"/programmes&rights=" + rights+"&page="+page+"&per_page="+per_page+"&initial_child_count="+initial_child_count+"&sort=" + sort+"&sort_direction=" + sort_direction+"&availability=" + availability;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Ibl>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get categories
		/// Get the list of all the categories in TV & iPlayer.
		/// Get_Categories_ categories
		/// </summary>
		/// <param name="lang">The language for any applicable localised strings.</param>
		/// <returns>Default response</returns>
		public async Task<Ibl> Get_Categories_Async(Get_Categories_Lang lang, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "categories?lang=" + lang;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Ibl>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get sub-categories
		/// Get sub-categories
		/// Get_Sub_categories_ categories/{category}
		/// </summary>
		/// <param name="category">The category identifier to return results from.</param>
		/// <param name="lang">The language for any applicable localised strings.</param>
		/// <returns>Default response</returns>
		public async Task<Ibl> Get_Sub_categories_Async(string category, Get_Categories_Lang lang, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "categories/"+ (category==null? "" : System.Uri.EscapeDataString(category))+"&lang=" + lang;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Ibl>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all the episodes for a category.
		/// Get the list of all the episodes for a given category in TV & iPlayer.
		/// Get_Episodes_by_category_ categories/{category}/episodes
		/// </summary>
		/// <param name="category">The category identifier to return results from.</param>
		/// <param name="lang">The language for any applicable localised strings.</param>
		/// <param name="rights">The rights group to limit results to.</param>
		/// <param name="availability">Whether to return all, or available programmes</param>
		/// <param name="page">The page index.</param>
		/// <param name="per_page">The number of results to return.</param>
		/// <param name="sort">The sort order of the results.</param>
		/// <returns>Default response</returns>
		public async Task<Ibl> Get_Episodes_by_category_Async(string category, Get_Categories_Lang lang, Get_Programmes_AtoZ_search_Rights rights, Get_Programmes_AtoZ_search_Availability availability, long page, long per_page, Get_Episodes_by_category_Sort sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "categories/"+ (category==null? "" : System.Uri.EscapeDataString(category))+"/episodes&lang=" + lang+"&rights=" + rights+"&availability=" + availability+"&page="+page+"&per_page="+per_page+"&sort=" + sort;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Ibl>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List the highlights for a category.
		/// Get the editorial highlights of a given category in TV & iPlayer.
		/// Get_Highlights_by_category_ categories/{category}/highlights
		/// </summary>
		/// <param name="category">The category identifier to return results from.</param>
		/// <param name="lang">The language for any applicable localised strings.</param>
		/// <param name="rights">The rights group to limit results to.</param>
		/// <param name="availability">Whether to return all, or available programmes</param>
		/// <param name="mixin">Request additional data in the output</param>
		/// <returns>Default response</returns>
		public async Task<Ibl> Get_Highlights_by_category_Async(string category, Get_Categories_Lang lang, Get_Programmes_AtoZ_search_Rights rights, Get_Programmes_AtoZ_search_Availability availability, string[] mixin, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "categories/"+ (category==null? "" : System.Uri.EscapeDataString(category))+"/highlights&lang=" + lang+"&rights=" + rights+"&availability=" + availability+"&"+string.Join("&", mixin.Select(z => $"mixin={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Ibl>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all the programmes for a category.
		/// Get the list of all the Programmes (TLEOs) for a given category in TV & iPlayer.
		/// Get_Programmes_by_category_ categories/{category}/programmes
		/// </summary>
		/// <param name="category">The category identifier to return results from.</param>
		/// <param name="lang">The language for any applicable localised strings.</param>
		/// <param name="rights">The rights group to limit results to.</param>
		/// <param name="availability">Whether to return all, or available programmes</param>
		/// <param name="page">The page index.</param>
		/// <param name="per_page">The number of results to return.</param>
		/// <returns>Default response</returns>
		public async Task<Ibl> Get_Programmes_by_category_Async(string category, Get_Categories_Lang lang, Get_Programmes_AtoZ_search_Rights rights, Get_Programmes_AtoZ_search_Availability availability, long page, long per_page, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "categories/"+ (category==null? "" : System.Uri.EscapeDataString(category))+"/programmes&lang=" + lang+"&rights=" + rights+"&availability=" + availability+"&page="+page+"&per_page="+per_page;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Ibl>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all the channels.
		/// Get the list of all the channels TV & iPlayer.
		/// Get_Channels_ channels
		/// </summary>
		/// <param name="region">The region to get the channels for.</param>
		/// <param name="lang">The language for any applicable localised strings.</param>
		/// <returns>Default response</returns>
		public async Task<Ibl> Get_Channels_Async(string region, Get_Categories_Lang lang, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "channels?region=" + (region==null? "" : System.Uri.EscapeDataString(region))+"&lang=" + lang;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Ibl>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get broadcasts by channel
		/// Get broadcasts by channel
		/// Get_Broadcasts_by_channel_ channels/{channel}/broadcasts
		/// </summary>
		/// <param name="channel">The channel identifier to limit results to.</param>
		/// <param name="lang">The language for any applicable localised strings.</param>
		/// <param name="rights">The rights group to limit results to.</param>
		/// <param name="availability">Whether to return all, or available programmes</param>
		/// <param name="mixin">Request additional data in the output</param>
		/// <param name="per_page">The number of results to return.</param>
		/// <param name="from">Time to return results from, e.g. -3h</param>
		/// <returns>Default response</returns>
		public async Task<Ibl> Get_Broadcasts_by_channel_Async(string channel, Get_Categories_Lang lang, Get_Programmes_AtoZ_search_Rights rights, Get_Programmes_AtoZ_search_Availability availability, string[] mixin, long per_page, string from, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "channels/"+ (channel==null? "" : System.Uri.EscapeDataString(channel))+"/broadcasts&lang=" + lang+"&rights=" + rights+"&availability=" + availability+"&"+string.Join("&", mixin.Select(z => $"mixin={System.Uri.EscapeDataString(z.ToString())}"))+"&per_page="+per_page+"&from=" + (from==null? "" : System.Uri.EscapeDataString(from));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Ibl>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List the highlights for a channel.
		/// Get the editorial highlights of a given channel in TV & iPlayer.
		/// Get_Highlights_by_channel_ channels/{channel}/highlights
		/// </summary>
		/// <param name="channel">The channel identifier to limit results to.</param>
		/// <param name="lang">The language for any applicable localised strings.</param>
		/// <param name="rights">The rights group to limit results to.</param>
		/// <param name="availability">Whether to return all, or available programmes</param>
		/// <param name="live">Whether to include live programmes</param>
		/// <param name="mixin">Request additional data in the output</param>
		/// <returns>Default response</returns>
		public async Task<Ibl> Get_Highlights_by_channel_Async(string channel, Get_Categories_Lang lang, Get_Programmes_AtoZ_search_Rights rights, Get_Programmes_AtoZ_search_Availability availability, bool live, string[] mixin, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "channels/"+ (channel==null? "" : System.Uri.EscapeDataString(channel))+"/highlights&lang=" + lang+"&rights=" + rights+"&availability=" + availability+"&live="+live+"&"+string.Join("&", mixin.Select(z => $"mixin={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Ibl>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get programmes by channel
		/// Get programmes by channel
		/// Get_Programmes_by_channel_ channels/{channel}/programmes
		/// </summary>
		/// <param name="channel">The channel identifier to limit results to.</param>
		/// <param name="lang">The language for any applicable localised strings.</param>
		/// <param name="rights">The rights group to limit results to.</param>
		/// <param name="availability">Whether to return all, or available programmes</param>
		/// <param name="page">The page index.</param>
		/// <param name="per_page">The number of results to return.</param>
		/// <returns>Default response</returns>
		public async Task<Ibl> Get_Programmes_by_channel_Async(string channel, Get_Categories_Lang lang, Get_Programmes_AtoZ_search_Rights rights, Get_Programmes_AtoZ_search_Availability availability, long page, long per_page, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "channels/"+ (channel==null? "" : System.Uri.EscapeDataString(channel))+"/programmes&lang=" + lang+"&rights=" + rights+"&availability=" + availability+"&page="+page+"&per_page="+per_page;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Ibl>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get schedule by channel
		/// Get schedule by channel
		/// Get_Schedule_by_channel_ channels/{channel}/schedule/{date}
		/// </summary>
		/// <param name="channel">The channel identifier to limit results to.</param>
		/// <param name="date">The date to return the schedule for, yyyy-mm-dd format</param>
		/// <param name="lang">The language for any applicable localised strings.</param>
		/// <param name="rights">The rights group to limit results to.</param>
		/// <param name="availability">Whether to return all, or available programmes</param>
		/// <returns>Default response</returns>
		public async Task<Ibl> Get_Schedule_by_channel_Async(string channel, string date, Get_Categories_Lang lang, Get_Programmes_AtoZ_search_Rights rights, Get_Programmes_AtoZ_search_Availability availability, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "channels/"+ (channel==null? "" : System.Uri.EscapeDataString(channel))+"/schedule/"+ (date==null? "" : System.Uri.EscapeDataString(date))+"&lang=" + lang+"&rights=" + rights+"&availability=" + availability;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Ibl>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Clips
		/// Get Clips
		/// Get_Clips_ clips/{pid}
		/// </summary>
		/// <param name="pid">The programme identifier.
		/// Min length: 8
		// </param>
		/// <param name="rights">The rights group to limit results to.</param>
		/// <param name="availability">Whether to return all, or available programmes</param>
		/// <returns>Default response</returns>
		public async Task<Ibl> Get_Clips_Async(string pid, Get_Programmes_AtoZ_search_Rights rights, Get_Programmes_AtoZ_search_Availability availability, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "clips/"+ (pid==null? "" : System.Uri.EscapeDataString(pid))+"&rights=" + rights+"&availability=" + availability;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Ibl>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Episode for a given pid.
		/// Get the episode for a given episode identifier.
		/// Get_Programme_by_PID_ episodes/{pid}
		/// </summary>
		/// <param name="pid">The programme identifier.
		/// Min length: 8
		// </param>
		/// <param name="rights">The rights group to limit results to.</param>
		/// <param name="availability">Whether to return all, or available programmes</param>
		/// <param name="mixin">Request additional data in the output</param>
		/// <returns>Default response</returns>
		public async Task<Ibl> Get_Programme_by_PID_Async(string pid, Get_Programmes_AtoZ_search_Rights rights, Get_Programmes_AtoZ_search_Availability availability, string[] mixin, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "episodes/"+ (pid==null? "" : System.Uri.EscapeDataString(pid))+"&rights=" + rights+"&availability=" + availability+"&"+string.Join("&", mixin.Select(z => $"mixin={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Ibl>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Onward Journey
		/// Get Onward Journey (next programme)
		/// Get_Onward_Journey episodes/{pid}/next
		/// </summary>
		/// <param name="pid">The programme identifier.
		/// Min length: 8
		// </param>
		/// <param name="rights">The rights group to limit results to.</param>
		/// <param name="availability">Whether to return all, or available programmes</param>
		/// <returns>Default response</returns>
		public async Task<Ibl> Get_Onward_JourneyAsync(string pid, Get_Programmes_AtoZ_search_Rights rights, Get_Programmes_AtoZ_search_Availability availability, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "episodes/"+ (pid==null? "" : System.Uri.EscapeDataString(pid))+"/next&rights=" + rights+"&availability=" + availability;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Ibl>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Follow-ups (post-rolls)
		/// Get Follow-ups (post-rolls)
		/// GetPostRolls episodes/{pid}/postrolls
		/// </summary>
		/// <param name="pid">The programme identifier.
		/// Min length: 8
		// </param>
		/// <param name="rights">The rights group to limit results to.</param>
		/// <param name="availability">Whether to return all, or available programmes</param>
		/// <returns>Default response</returns>
		public async Task<Ibl> GetPostRollsAsync(string pid, Get_Programmes_AtoZ_search_Rights rights, Get_Programmes_AtoZ_search_Availability availability, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "episodes/"+ (pid==null? "" : System.Uri.EscapeDataString(pid))+"/postrolls&rights=" + rights+"&availability=" + availability;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Ibl>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Trailers (pre-rolls)
		/// Get Trailers (pre-rolls)
		/// Get_Trailers_pre_rolls_ episodes/{pid}/prerolls
		/// </summary>
		/// <param name="pid">The programme identifier.
		/// Min length: 8
		// </param>
		/// <param name="rights">The rights group to limit results to.</param>
		/// <param name="availability">Whether to return all, or available programmes</param>
		/// <returns>Default response</returns>
		public async Task<Ibl> Get_Trailers_pre_rolls_Async(string pid, Get_Programmes_AtoZ_search_Rights rights, Get_Programmes_AtoZ_search_Availability availability, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "episodes/"+ (pid==null? "" : System.Uri.EscapeDataString(pid))+"/prerolls&rights=" + rights+"&availability=" + availability;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Ibl>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get programme recommendations
		/// Get programme recommendations
		/// Get_Programme_recommendations_ episodes/{pid}/recommendations
		/// </summary>
		/// <param name="pid">The programme identifier.
		/// Min length: 8
		// </param>
		/// <param name="rights">The rights group to limit results to.</param>
		/// <param name="availability">Whether to return all, or available programmes</param>
		/// <param name="page">The page index.</param>
		/// <param name="per_page">The number of results to return.</param>
		/// <returns>Default response</returns>
		public async Task<Ibl> Get_Programme_recommendations_Async(string pid, Get_Programmes_AtoZ_search_Rights rights, Get_Programmes_AtoZ_search_Availability availability, long page, long per_page, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "episodes/"+ (pid==null? "" : System.Uri.EscapeDataString(pid))+"/recommendations&rights=" + rights+"&availability=" + availability+"&page="+page+"&per_page="+per_page;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Ibl>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get programmes popular
		/// Get programmes popular
		/// Get_Programmes_popular_ groups/popular/episodes
		/// </summary>
		/// <param name="rights">The rights group to limit results to.</param>
		/// <param name="page">The page index.</param>
		/// <param name="per_page">The number of results to return.</param>
		/// <param name="initial_child_count">The depth to return child entities.
		/// Minimum: 1
		/// Maximum: 4
		// </param>
		/// <param name="sort">The sort order of the results.</param>
		/// <param name="sort_direction">Whether to sort ascending or descending</param>
		/// <param name="availability">Whether to return all, or available programmes</param>
		/// <param name="mixin">Request additional data in the output</param>
		/// <returns>Default response</returns>
		public async Task<Ibl> Get_Programmes_popular_Async(Get_Programmes_AtoZ_search_Rights rights, long page, long per_page, int initial_child_count, string sort, Get_Programmes_AtoZ_search_Sort_direction sort_direction, Get_Programmes_AtoZ_search_Availability availability, string[] mixin, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "groups/popular/episodes?rights=" + rights+"&page="+page+"&per_page="+per_page+"&initial_child_count="+initial_child_count+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort))+"&sort_direction=" + sort_direction+"&availability=" + availability+"&"+string.Join("&", mixin.Select(z => $"mixin={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Ibl>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get episodes by group, brand or series
		/// Get episodes by group, brand or series
		/// Get_Episodes_by_group_ groups/{pid}/episodes
		/// </summary>
		/// <param name="pid">The programme identifier.
		/// Min length: 8
		// </param>
		/// <param name="rights">The rights group to limit results to.</param>
		/// <param name="page">The page index.</param>
		/// <param name="per_page">The number of results to return.</param>
		/// <param name="initial_child_count">The depth to return child entities.
		/// Minimum: 1
		/// Maximum: 4
		// </param>
		/// <param name="sort">The sort order of the results.</param>
		/// <param name="sort_direction">Whether to sort ascending or descending</param>
		/// <param name="availability">Whether to return all, or available programmes</param>
		/// <param name="mixin">Request additional data in the output</param>
		/// <returns>Default response</returns>
		public async Task<Ibl> Get_Episodes_by_group_Async(string pid, Get_Programmes_AtoZ_search_Rights rights, long page, long per_page, int initial_child_count, string sort, Get_Programmes_AtoZ_search_Sort_direction sort_direction, Get_Programmes_AtoZ_search_Availability availability, string[] mixin, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "groups/"+ (pid==null? "" : System.Uri.EscapeDataString(pid))+"/episodes&rights=" + rights+"&page="+page+"&per_page="+per_page+"&initial_child_count="+initial_child_count+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort))+"&sort_direction=" + sort_direction+"&availability=" + availability+"&"+string.Join("&", mixin.Select(z => $"mixin={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Ibl>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get programme highlights
		/// Get programme highlights
		/// Get_Programme_highlights_ home/highlights
		/// </summary>
		/// <param name="lang">The language for any applicable localised strings.</param>
		/// <param name="rights">The rights group to limit results to.</param>
		/// <param name="availability">Whether to return all, or available programmes</param>
		/// <param name="mixin">Request additional data in the output</param>
		/// <returns>Default response</returns>
		public async Task<Ibl> Get_Programme_highlights_Async(Get_Categories_Lang lang, Get_Programmes_AtoZ_search_Rights rights, Get_Programmes_AtoZ_search_Availability availability, string[] mixin, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "home/highlights?lang=" + lang+"&rights=" + rights+"&availability=" + availability+"&"+string.Join("&", mixin.Select(z => $"mixin={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Ibl>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Programme for a given pid.
		/// Get the programme for a given programme identifier.
		/// Get_Programmes_by_parent_PID_ programmes/{pid}
		/// </summary>
		/// <param name="pid">The programme identifier.
		/// Min length: 8
		// </param>
		/// <param name="rights">The rights group to limit results to.</param>
		/// <param name="availability">Whether to return all, or available programmes</param>
		/// <param name="initial_child_count">The depth to return child entities.
		/// Minimum: 1
		/// Maximum: 4
		// </param>
		/// <returns>Default response</returns>
		public async Task<Ibl> Get_Programmes_by_parent_PID_Async(string pid, Get_Programmes_AtoZ_search_Rights rights, Get_Programmes_AtoZ_search_Availability availability, int initial_child_count, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "programmes/"+ (pid==null? "" : System.Uri.EscapeDataString(pid))+"&rights=" + rights+"&availability=" + availability+"&initial_child_count="+initial_child_count;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Ibl>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Child episodes for a given programme pid.
		/// Get the child episodes belonging to a given programme identifier.
		/// Get_Episodes_by_parent_PID_ programmes/{pid}/episodes
		/// </summary>
		/// <param name="pid">The programme identifier.
		/// Min length: 8
		// </param>
		/// <param name="rights">The rights group to limit results to.</param>
		/// <param name="availability">Whether to return all, or available programmes</param>
		/// <param name="initial_child_count">The depth to return child entities.
		/// Minimum: 1
		/// Maximum: 4
		// </param>
		/// <returns>Default response</returns>
		public async Task<Ibl> Get_Episodes_by_parent_PID_Async(string pid, Get_Programmes_AtoZ_search_Rights rights, Get_Programmes_AtoZ_search_Availability availability, int initial_child_count, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "programmes/"+ (pid==null? "" : System.Uri.EscapeDataString(pid))+"/episodes&rights=" + rights+"&availability=" + availability+"&initial_child_count="+initial_child_count;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Ibl>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all regions
		/// Get the list of all the regions TV & iPlayer.
		/// Get_Regions_ regions
		/// </summary>
		/// <param name="lang">The language for any applicable localised strings.</param>
		/// <returns>Default response</returns>
		public async Task<Ibl> Get_Regions_Async(Get_Categories_Lang lang, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "regions?lang=" + lang;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Ibl>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get schema
		/// Get schema
		/// Get_Schema_ schema/ibl.json
		/// </summary>
		/// <returns>Default response</returns>
		public async Task<Ibl> Get_Schema_Async(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "schema/ibl.json";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Ibl>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Search
		/// Search
		/// Search_ search
		/// </summary>
		/// <param name="q">The term to search for.</param>
		/// <param name="lang">The language for any applicable localised strings.</param>
		/// <param name="rights">The rights group to limit results to.</param>
		/// <param name="availability">Whether to return all, or available programmes</param>
		/// <returns>Default response</returns>
		public async Task<Ibl> Search_Async(string q, Get_Categories_Lang lang, Get_Programmes_AtoZ_search_Rights rights, Get_Programmes_AtoZ_search_Availability availability, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "search?q=" + (q==null? "" : System.Uri.EscapeDataString(q))+"&lang=" + lang+"&rights=" + rights+"&availability=" + availability;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Ibl>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Search-suggest
		/// Search-suggest
		/// Search_suggest_ search-suggest
		/// </summary>
		/// <param name="q">The term to search for.</param>
		/// <param name="lang">The language for any applicable localised strings.</param>
		/// <param name="rights">The rights group to limit results to.</param>
		/// <param name="availability">Whether to return all, or available programmes</param>
		/// <returns>Default response</returns>
		public async Task<Ibl> Search_suggest_Async(string q, Get_Categories_Lang lang, Get_Programmes_AtoZ_search_Rights rights, Get_Programmes_AtoZ_search_Availability availability, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "search-suggest?q=" + (q==null? "" : System.Uri.EscapeDataString(q))+"&lang=" + lang+"&rights=" + rights+"&availability=" + availability;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Ibl>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get status
		/// Get the current iPlayer business layer status. This tells the caller the status of the iPlayer data, but not necessarily the overall status of the website. In the future it might include the status of the dependent data services within the BBC.
		/// Get_Status_ status
		/// </summary>
		/// <returns>Default response</returns>
		public async Task<Ibl> Get_Status_Async(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "status";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Ibl>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get user store purchases
		/// Get user store purchases
		/// Get_User_store_purchases_ user/purchases
		/// </summary>
		/// <param name="identity_cookie">The BBC-id cookie value</param>
		/// <returns>Default response</returns>
		public async Task<Ibl> Get_User_store_purchases_Async(double identity_cookie, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "user/purchases?identity_cookie="+identity_cookie;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Ibl>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get user store recommendations
		/// Get user store recommendations
		/// Get_User_store_recommendations_ user/recommendations
		/// </summary>
		/// <param name="identity_cookie">The BBC-id cookie value</param>
		/// <returns>Default response</returns>
		public async Task<Ibl> Get_User_store_recommendations_Async(double identity_cookie, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "user/recommendations?identity_cookie="+identity_cookie;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Ibl>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get user watching
		/// Get user watching
		/// Get_User_watching_ user/watching
		/// </summary>
		/// <param name="identity_cookie">The BBC-id cookie value</param>
		/// <returns>Default response</returns>
		public async Task<Ibl> Get_User_watching_Async(double identity_cookie, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "user/watching?identity_cookie="+identity_cookie;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Ibl>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum Get_Programmes_AtoZ_search_Rights
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		mobile = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		tv = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		web = 2,
	}
	
	public enum Get_Programmes_AtoZ_search_Sort
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		title = 0,
	}
	
	public enum Get_Programmes_AtoZ_search_Sort_direction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		asc = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		desc = 1,
	}
	
	public enum Get_Programmes_AtoZ_search_Availability
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		all = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		available = 1,
	}
	
	public enum Get_Categories_Lang
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		cy = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ga = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		gd = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pi = 4,
	}
	
	public enum Get_Episodes_by_category_Sort
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		recent = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		popular = 1,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
