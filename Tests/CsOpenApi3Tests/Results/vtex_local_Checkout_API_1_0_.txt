//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Item
	{
		
		/// <summary>
		/// The SKU ID.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The quantity of items of this specific SKU in the cart to be simulated.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public int Quantity { get; set; }
		
		/// <summary>
		/// The ID of the seller responsible for this SKU. This ID can be found in your VTEX Admin.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="seller")]
		public string Seller { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrderFormSimulationRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// Array containing information about the SKUs inside the cart to be simulated.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Item[] Items { get; set; }
	}
	
	/// <summary>
	/// Payment Configuration object
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PaymentConfiguration
	{
		
		/// <summary>
		/// By default (when `false`), on a multi-seller purchase is on the run, a simple intersection with installments options configured by every seller will be available. When `true`, this option allows a more complex but flexible installment option, since it considers max installments of every seller configuration, even if those don't match. Installment values ​​may not be equal in this case.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowInstallmentsMerge")]
		public System.Nullable<System.Boolean> AllowInstallmentsMerge { get; set; }
		
		/// <summary>
		/// Determines whether pre-authorized payments require authentication
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="requiresAuthenticationForPreAuthorizedPaymentOption")]
		public bool RequiresAuthenticationForPreAuthorizedPaymentOption { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PriceChangeRequest
	{
		
		/// <summary>
		/// The new price of the item.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="price")]
		public int Price { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SetsinglecustomfieldvalueRequest
	{
		
		/// <summary>
		/// The value you want to set to the specified field.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateorderFormconfigurationRequest
	{
		
		/// <summary>
		/// Allows the editing of SKU prices right in the cart.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="allowManualPrice")]
		public System.Nullable<System.Boolean> AllowManualPrice { get; set; }
		
		/// <summary>
		/// On the same purchase, allows the selection of items from multiple delivery channels.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="allowMultipleDeliveries")]
		public System.Nullable<System.Boolean> AllowMultipleDeliveries { get; set; }
		
		/// <summary>
		/// Array of objects containing Apps configuration information.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="apps")]
		public UpdateorderFormconfigurationRequestApps[] UpdateorderFormconfigurationRequestApps { get; set; }
		
		/// <summary>
		/// Number of price digits.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="decimalDigitsPrecision")]
		public int DecimalDigitsPrecision { get; set; }
		
		/// <summary>
		/// Allows, on a first purchase, masking client's data. It could be useful when a shared cart is used and the client doesn't want to share its data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maskFirstPurchaseData")]
		public System.Nullable<System.Boolean> MaskFirstPurchaseData { get; set; }
		
		/// <summary>
		/// Allows the input of a limit of white label sellers involved on the cart.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxNumberOfWhiteLabelSellers")]
		public System.Nullable<System.Int32> MaxNumberOfWhiteLabelSellers { get; set; }
		
		/// <summary>
		/// Minimum SKU quantity by cart.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="minimumQuantityAccumulatedForItems")]
		public int MinimumQuantityAccumulatedForItems { get; set; }
		
		/// <summary>
		/// Minimum cart value.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="minimumValueAccumulated")]
		public System.Nullable<System.Int32> MinimumValueAccumulated { get; set; }
		
		/// <summary>
		/// Payment Configuration object
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="paymentConfiguration")]
		public PaymentConfiguration PaymentConfiguration { get; set; }
		
		/// <summary>
		/// If you want to apply a first installment discount to a particular payment system, set this field to that payment system's ID. Learn more: [Configuring a discount for orders prepaid in full](https://help.vtex.com/en/tutorial/configurar-desconto-de-preco-a-vista--7Lfcj9Wb5dpYfA2gKkACIt).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paymentSystemToCheckFirstInstallment")]
		public string PaymentSystemToCheckFirstInstallment { get; set; }
		
		/// <summary>
		/// Configures reCAPTCHA validation for the account, defining in which situations the shopper will be prompted to validate a purchase with reCAPTCHA. Learn more about [reCAPTCHA validation for VTEX stores](https://help.vtex.com/tutorial/recaptcha-no-checkout--18Te3oDd7f4qcjKu9jhNzP)
		///
		///		///Possible values are:
		///		///- `"never"`: no purchases are validated with reCAPTCHA.
		///		///- `"always"`: every purchase is validated with reCAPTCHA.
		///		///- `"vtexCriteria"`: only some purchases are validated with reCAPTCHA in order to minimize friction and improve shopping experience. VTEX’s algorithm determines which sessions are trustworthy and which should be validated with reCAPTCHA. This is the recommended option.
		/// </summary>
		[System.ComponentModel.DefaultValue("vtexCriteria")]
		[System.Runtime.Serialization.DataMember(Name="recaptchaValidation")]
		public string RecaptchaValidation { get; set; } = "vtexCriteria";
		
		/// <summary>
		/// External tax service configuration.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="taxConfiguration")]
		public UpdateorderFormconfigurationRequestTaxConfiguration TaxConfiguration { get; set; }
	}
	
	public class UpdateorderFormconfigurationRequestApps
	{
		
		/// <summary>
		/// Array of fields available to the app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fields")]
		public string[] Fields { get; set; }
		
		/// <summary>
		/// App ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// App major version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="major")]
		public System.Nullable<System.Int32> Major { get; set; }
	}
	
	public class UpdateorderFormconfigurationRequestTaxConfiguration
	{
		
		/// <summary>
		/// Custom data ID sent to the tax system.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appId")]
		public string AppId { get; set; }
		
		/// <summary>
		/// Authorization header.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authorizationHeader")]
		public string AuthorizationHeader { get; set; }
		
		/// <summary>
		/// Endpoint URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WaitingTime
	{
		
		/// <summary>
		/// Number of days after order cancelation by a seller, during which another seller may be assigned to fulfill the order.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="waitingTime")]
		public int WaitingTime1 { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Process order
		/// Order processing callback request, which is made after an order's payment is approved.
		/// 
		/// > This request has to be made until five minutes after the [Place order](https://developers.vtex.com/docs/api-reference/checkout-api#put-/api/checkout/pub/orders) or [Place order from existing cart](https://developers.vtex.com/docs/api-reference/checkout-api#post-/api/checkout/pub/orderForm/-orderFormId-/transaction) request has been made, or else, the order will not be processed.
		/// ProcessOrder api/checkout/pub/gatewayCallback/{orderGroup}
		/// </summary>
		/// <param name="orderGroup">Order group. It is the part of the `orderId` that comes before the `-`. For example, the `orderGroup` of the order `123456789-01` is `123456789`.</param>
		/// <returns>OK</returns>
		public async Task ProcessOrderAsync(string orderGroup, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/checkout/pub/gatewayCallback/"+ (orderGroup==null? "" : System.Uri.EscapeDataString(orderGroup));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get current or create a new cart
		/// You can use this request to get your current shopping cart information (`orderFormId`) or to create a new cart.
		/// 
		/// **Important**: To create a new empty shopping cart you need to send this request with the query param `forceNewCart=true`.
		/// 
		/// The [orderForm](https://developers.vtex.com/docs/guides/orderform-fields) is the data structure which represents a shopping cart and contains all information pertaining to it. Hence, the `orderFormId` obtained in response is the identification code of the newly created cart.
		/// 
		/// > This request has a time out of 45 seconds.
		/// CreateANewCart api/checkout/pub/orderForm
		/// </summary>
		/// <param name="forceNewCart">Use this query parameter to create a new empty shopping cart.</param>
		/// <returns>OK</returns>
		public async Task CreateANewCartAsync(bool forceNewCart, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/checkout/pub/orderForm?forceNewCart="+forceNewCart;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get cart information by ID
		/// Use this request to get all information associated to a given shopping  cart.
		/// 
		/// The [orderForm](https://developers.vtex.com/docs/guides/orderform-fields) is the data structure which represents a shopping cart and contains all information pertaining to it. Hence, the `orderFormId` is the identification code of a given cart.
		/// 
		/// > This request has a time out of 45 seconds.
		/// GetCartInformationById api/checkout/pub/orderForm/{orderFormId}
		/// </summary>
		/// <param name="orderFormId">ID of the orderForm corresponding to the cart whose information you want to retrieve.</param>
		/// <param name="refreshOutdatedData">It is possible to use the [Update cart items request](https://developers.vtex.com/vtex-rest-api/reference/cart-update#itemsupdate) so as to allow outdated information in the `orderForm`, which may improve performance in some cases. To guarantee that all cart information is updated, send this request with this parameter as `true`. We recommend doing this in the final stages of the shopping experience, starting from the checkout page.</param>
		public async Task GetCartInformationByIdAsync(string orderFormId, bool refreshOutdatedData, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/checkout/pub/orderForm/"+ (orderFormId==null? "" : System.Uri.EscapeDataString(orderFormId))+"&refreshOutdatedData="+refreshOutdatedData;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add client preferences
		/// Use this request to include client preferences information to a given shopping cart.
		/// 
		/// The [orderForm](https://developers.vtex.com/docs/guides/orderform-fields) is the data structure which represents a shopping cart and contains all information pertaining to it. Hence, the `orderFormId` is the identification code of a given cart.
		/// 
		/// > This request has a time out of 12 seconds.
		/// AddClientPreferences api/checkout/pub/orderForm/{orderFormId}/attachments/clientPreferencesData
		/// </summary>
		/// <param name="orderFormId">ID of the orderForm that will receive client profile information.</param>
		/// <returns>OK</returns>
		public async Task<object> AddClientPreferencesAsync(string orderFormId, AddClientPreferencesPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/checkout/pub/orderForm/"+ (orderFormId==null? "" : System.Uri.EscapeDataString(orderFormId))+"/attachments/clientPreferencesData";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<object>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Add client profile
		/// Use this request to include client profile information to a given shopping cart.
		/// 
		/// The [orderForm](https://developers.vtex.com/docs/guides/orderform-fields) is the data structure which represents a shopping cart and contains all information pertaining to it. Hence, the `orderFormId` is the identification code of a given cart.
		/// 
		/// > This request has a time out of 12 seconds.
		/// 
		/// >⚠️ The authentication of this endpoint can change depending on the customer context. If you are modifying information from a customer with a complete profile on the store, the response will return the customer's data masked. You can only access the customer data with an authenticated request.
		/// AddClientProfile api/checkout/pub/orderForm/{orderFormId}/attachments/clientProfileData
		/// </summary>
		/// <param name="orderFormId">ID of the orderForm that will receive client profile information.</param>
		/// <returns>OK</returns>
		public async Task AddClientProfileAsync(string orderFormId, AddClientProfilePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/checkout/pub/orderForm/"+ (orderFormId==null? "" : System.Uri.EscapeDataString(orderFormId))+"/attachments/clientProfileData";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Add marketing data
		/// Use this request to include marketing information to a given shopping cart.
		/// 
		/// The [orderForm](https://developers.vtex.com/docs/guides/orderform-fields) is the data structure which represents a shopping cart and contains all information pertaining to it. Hence, the `orderFormId` is the identification code of a given cart.
		/// 
		/// > This request has a time out of 12 seconds.
		/// AddMarketingData api/checkout/pub/orderForm/{orderFormId}/attachments/marketingData
		/// </summary>
		/// <param name="orderFormId">ID of the orderForm that will receive client profile information.</param>
		/// <returns>OK</returns>
		public async Task AddMarketingDataAsync(string orderFormId, AddMarketingDataPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/checkout/pub/orderForm/"+ (orderFormId==null? "" : System.Uri.EscapeDataString(orderFormId))+"/attachments/marketingData";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Add merchant context data
		/// This endpoint is used for the merchant to add to the cart any relevant information that is related to the context of a specific order.
		/// 
		/// The [orderForm](https://developers.vtex.com/docs/guides/orderform-fields) is the data structure which represents a shopping cart and contains all information pertaining to it. Hence, the `orderFormId` is the identification code of a given cart.
		/// 
		/// > This request has a time out of 12 seconds.
		/// AddMerchantContextData api/checkout/pub/orderForm/{orderFormId}/attachments/merchantContextData
		/// </summary>
		/// <param name="orderFormId">ID of the orderForm that will receive the relevant information added by the merchant.</param>
		/// <returns>OK</returns>
		public async Task<AddMerchantContextDataReturn> AddMerchantContextDataAsync(string orderFormId, AddMerchantContextDataPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/checkout/pub/orderForm/"+ (orderFormId==null? "" : System.Uri.EscapeDataString(orderFormId))+"/attachments/merchantContextData";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AddMerchantContextDataReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Add payment data
		/// Use this request to include payment information to a given shopping cart. The payment information attachment in the shopping cart does not determine the final order payment method in itself. However, it allows tha platform to update any relevant information that may be impacted by the payment method.
		/// 
		/// The [orderForm](https://developers.vtex.com/docs/guides/orderform-fields) is the data structure which represents a shopping cart and contains all information pertaining to it. Hence, the `orderFormId` is the identification code of a given cart.
		/// 
		/// > This request has a time out of 12 seconds.
		/// AddPaymentData api/checkout/pub/orderForm/{orderFormId}/attachments/paymentData
		/// </summary>
		/// <param name="orderFormId">ID of the orderForm that will receive client profile information.</param>
		public async Task AddPaymentDataAsync(string orderFormId, AddPaymentDataPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/checkout/pub/orderForm/"+ (orderFormId==null? "" : System.Uri.EscapeDataString(orderFormId))+"/attachments/paymentData";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Add shipping address and select delivery option
		/// Use this request to include shipping information and/or selected delivery option to a given shopping cart.
		/// 
		/// To add shipping addresses send the `selectedAddresses` array. For delivery option use the `logisticsInfo` array.
		/// 
		/// The [orderForm](https://developers.vtex.com/docs/guides/orderform-fields) is the data structure which represents a shopping cart and contains all information pertaining to it. Hence, the `orderFormId` is the identification code of a given cart.
		/// 
		/// > This request has a time out of 12 seconds.
		/// 
		/// >⚠️ The authentication of this endpoint can change depending on the customer context. If you are modifying information from a customer with a complete profile on the store, the response will return the customer's data masked. You can only access the customer data with an authenticated request.
		/// AddShippingAddress api/checkout/pub/orderForm/{orderFormId}/attachments/shippingData
		/// </summary>
		/// <param name="orderFormId">ID of the orderForm that will receive client profile information.</param>
		public async Task AddShippingAddressAsync(string orderFormId, AddShippingAddressPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/checkout/pub/orderForm/"+ (orderFormId==null? "" : System.Uri.EscapeDataString(orderFormId))+"/attachments/shippingData";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Add coupons to the cart
		/// Use this request to add coupons to a given shopping cart.
		/// AddCoupons api/checkout/pub/orderForm/{orderFormId}/coupons
		/// </summary>
		/// <param name="orderFormId">ID of the orderForm that will receive coupon information.</param>
		/// <returns>OK</returns>
		public async Task<AddCouponsReturn> AddCouponsAsync(string orderFormId, AddCouponsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/checkout/pub/orderForm/"+ (orderFormId==null? "" : System.Uri.EscapeDataString(orderFormId))+"/coupons";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AddCouponsReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Set multiple custom field values
		/// Your account may create `apps`, which contain custom fields, through the [Update orderForm configuration](https://developers.vtex.com/reference/configuration#updateorderformconfiguration) request. The values of these custom fields can then be updated by this request.
		/// 
		/// To do that, you need to inform the ID of the app you created with the configuration API (`appId`).
		/// 
		/// In the body of the request, for each field created in this app (`appFieldName`) you will inform a value (`appFieldValue`).
		/// 
		/// The [orderForm](https://developers.vtex.com/docs/guides/orderform-fields) is the data structure which represents a shopping cart and contains all information pertaining to it. Hence, the `orderFormId` is the identification code of a given cart.
		/// SetMultipleCustomFieldValues api/checkout/pub/orderForm/{orderFormId}/customData/{appId}
		/// </summary>
		/// <param name="orderFormId">ID of the orderForm that will receive the new custom field values.</param>
		/// <param name="appId">ID of the app created with the configuration API.</param>
		/// <returns>OK</returns>
		public async Task<object> SetMultipleCustomFieldValuesAsync(string orderFormId, string appId, string requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/checkout/pub/orderForm/"+ (orderFormId==null? "" : System.Uri.EscapeDataString(orderFormId))+"/customData/"+ (appId==null? "" : System.Uri.EscapeDataString(appId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<object>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Remove single custom field value
		/// Your account may create `apps`, which contain custom fields, through the [Update orderForm configuration](https://developers.vtex.com/reference#updateorderformconfiguration) request. The value of a specific custom field can be removed by this request.
		/// 
		/// To do that, you need to inform in the URL the ID of the app you created with the configuration API (`appId`).
		/// 
		/// You also need to iform the specific field created in this app (identified by the `appFieldName` parameter, also passed through the URL) whose value you want to remove.
		/// Removesinglecustomfieldvalue api/checkout/pub/orderForm/{orderFormId}/customData/{appId}/{appFieldName}
		/// </summary>
		/// <param name="orderFormId">The ID of the orderForm from which you want to remove the custom field value.</param>
		/// <param name="appId">ID of the app created through the Update orderForm Configuration endpoint.</param>
		/// <param name="appFieldName">Name of the app's field created through the Update orderForm Configuration endpoint and which will be deleted.</param>
		/// <returns>OK</returns>
		public async Task RemovesinglecustomfieldvalueAsync(string orderFormId, string appId, string appFieldName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/checkout/pub/orderForm/"+ (orderFormId==null? "" : System.Uri.EscapeDataString(orderFormId))+"/customData/"+ (appId==null? "" : System.Uri.EscapeDataString(appId))+"/"+ (appFieldName==null? "" : System.Uri.EscapeDataString(appFieldName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Set single custom field value
		/// Your account may create `apps`, which contain custom fields, through the [Update orderForm configuration](https://developers.vtex.com/reference#updateorderformconfiguration) request. The value of a specific custom field can then be updated by this request.
		/// 
		/// To do that, you need to inform in the URL the ID of the app you created with the configuration API (`appId`).
		/// 
		/// In the body of the request, you will inform the new value (`appFieldValue`, passed through the body) of the specific field created in this app (identified by the `appFieldName` parameter, passed through the URL).
		/// 
		/// The [orderForm](https://developers.vtex.com/docs/guides/orderform-fields) is the data structure which represents a shopping cart and contains all information pertaining to it. Hence, the `orderFormId` is the identification code of a given cart.
		/// SetSingleCustomFieldValue api/checkout/pub/orderForm/{orderFormId}/customData/{appId}/{appFieldName}
		/// </summary>
		/// <param name="orderFormId">The ID of the orderForm whose custom field's value you want to change.</param>
		/// <param name="appId">ID of the app created through the Update orderForm Configuration endpoint.</param>
		/// <param name="appFieldName">Name of the app's field created through the Update orderForm Configuration endpoint.</param>
		public async Task SetSingleCustomFieldValueAsync(string orderFormId, string appId, string appFieldName, SetsinglecustomfieldvalueRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/checkout/pub/orderForm/"+ (orderFormId==null? "" : System.Uri.EscapeDataString(orderFormId))+"/customData/"+ (appId==null? "" : System.Uri.EscapeDataString(appId))+"/"+ (appFieldName==null? "" : System.Uri.EscapeDataString(appFieldName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Cart installments
		/// Retrieves possible amount of installments and respective values for a given cart with a given payment method.
		/// 
		/// The [orderForm](https://developers.vtex.com/docs/guides/orderform-fields) is the data structure which represents a shopping cart and contains all information pertaining to it. Hence, the `orderFormId` is the identification code of a given cart.
		/// 
		/// This endpoint can be used to get the installment options for only one payment method at a time.
		/// 
		/// This endpoint should be called only after the selected `orderForm` already has a `paymentData`.
		/// GetCartInstallments api/checkout/pub/orderForm/{orderFormId}/installments
		/// </summary>
		/// <param name="orderFormId">ID of the `orderForm` to be consulted for installments.</param>
		/// <param name="paymentSystem">ID of the payment method to be consulted for installments.</param>
		/// <returns>OK</returns>
		public async Task GetCartInstallmentsAsync(string orderFormId, int paymentSystem, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/checkout/pub/orderForm/"+ (orderFormId==null? "" : System.Uri.EscapeDataString(orderFormId))+"/installments&paymentSystem="+paymentSystem;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add cart items
		/// Use this request to add a new item to the shopping cart.
		/// 
		/// The [orderForm](https://developers.vtex.com/docs/guides/orderform-fields) is the data structure which represents a shopping cart and contains all information pertaining to it. Hence, the `orderFormId` is the identification code of a given cart.
		/// 
		/// > This request has a time out of 45 seconds.
		/// Items api/checkout/pub/orderForm/{orderFormId}/items
		/// </summary>
		/// <param name="orderFormId">ID of the orderForm corresponding to the cart in which the new item will be added.</param>
		/// <param name="allowedOutdatedData">In order to optimize performance, this parameter allows some information to not be updated when there are changes in the minicart. For instance, if a shopper adds another unit of a given SKU to the cart, it may not be necessary to recalculate payment information, which could impact performance.
		///
		///		///This array accepts strings and currently the only possible value is `”paymentData”`.</param>
		/// <returns>OK</returns>
		public async Task<ItemsReturn> ItemsAsync(string orderFormId, string[] allowedOutdatedData, ItemsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/checkout/pub/orderForm/"+ (orderFormId==null? "" : System.Uri.EscapeDataString(orderFormId))+"/items&"+string.Join("&", allowedOutdatedData.Select(z => $"allowedOutdatedData={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ItemsReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Remove all items
		/// This request removes all items from a given cart, leaving it empty.
		/// 
		/// You must send an empty JSON in the body of the request.
		/// 
		/// The [orderForm](https://developers.vtex.com/docs/guides/orderform-fields) is the data structure which represents a shopping cart and contains all information pertaining to it. Hence, the `orderFormId` is the identification code of a given cart.
		/// 
		/// **Important**: **Request Body** must always be sent with empty value "{ }" in this endpoint.
		/// RemoveAllItems api/checkout/pub/orderForm/{orderFormId}/items/removeAll
		/// </summary>
		/// <param name="orderFormId">ID of the orderForm corresponding to the cart whose items you want to remove.</param>
		public async Task<string> RemoveAllItemsAsync(string orderFormId, string requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/checkout/pub/orderForm/"+ (orderFormId==null? "" : System.Uri.EscapeDataString(orderFormId))+"/items/removeAll";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update cart items
		/// You can use this request to:
		/// 
		/// 1. Change the quantity of one or more items in a specific cart.
		/// 2. Remove an item from the cart (by sending the `quantity` value = `0` in the request body).
		/// 
		/// **Important**: To remove all items from the cart at the same time, use the [Remove all items](https://developers.vtex.com/vtex-rest-api/reference/removeallitems) endpoint.
		/// 
		/// The [orderForm](https://developers.vtex.com/docs/guides/orderform-fields) is the data structure that represents a shopping cart and contains all information pertaining to it. Hence, the `orderFormId` is the identification code of a given cart.
		/// 
		/// > This request has a time out of 45 seconds.
		/// ItemsUpdate api/checkout/pub/orderForm/{orderFormId}/items/update
		/// </summary>
		/// <param name="orderFormId">ID of the `orderForm` corresponding to the cart whose items you want to update.</param>
		/// <param name="allowedOutdatedData">In order to optimize performance, this parameter allows some information to not be updated when there are changes in the minicart. For instance, if a shopper adds another unit of a given SKU to the cart, it may not be necessary to recalculate payment information, which could impact performance.
		///
		///		///This array accepts strings and currently the only possible value is `”paymentData”`.</param>
		/// <returns>OK</returns>
		public async Task<ItemsUpdateReturn> ItemsUpdateAsync(string orderFormId, string[] allowedOutdatedData, ItemsUpdatePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/checkout/pub/orderForm/"+ (orderFormId==null? "" : System.Uri.EscapeDataString(orderFormId))+"/items/update&"+string.Join("&", allowedOutdatedData.Select(z => $"allowedOutdatedData={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ItemsUpdateReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Change price
		/// This request changes the price of an SKU in a cart. You can also perform type of bulk price change with the [Update cart items request](https://developers.vtex.com/vtex-rest-api/reference/shopping-cart#itemsupdate)
		/// 
		/// The [orderForm](https://developers.vtex.com/docs/guides/orderform-fields) is the data structure which represents a shopping cart and contains all information pertaining to it. Hence, the `orderFormId` is the identification code of a given cart.
		/// 
		/// You need to inform which cart you are referring to, by sending its `orderFormId`; and what is the item whose price you want to change, by sending its `itemIndex`.
		/// 
		/// You also need to pass the new price value in the body.
		/// 
		/// Remember that, to use this endpoint, the feature of *manual price* must be active. To check if it's active, use the [Get orderForm configuration](https://developers.vtex.com/reference#getorderformconfiguration) endpoint. To make it active, use the [Update orderForm configuration](https://developers.vtex.com/reference#updateorderformconfiguration) endpoint, making the `allowManualPrice` field `true`.
		/// 
		/// > Whenever you use this request to change the price of an item, all items in that cart with the same SKU are affected by this change. This applies even to items that share the SKU but have been separated into different objects in the `items` array due to customizations or attachments, for example.
		/// PriceChange api/checkout/pub/orderForm/{orderFormId}/items/{itemIndex}/price
		/// </summary>
		/// <param name="orderFormId">ID of the orderForm corresponding to the cart whose items will have the price changed.</param>
		/// <param name="itemIndex">The index of the item in the cart. Each cart item is identified by an index, starting in 0.</param>
		/// <returns>OK</returns>
		public async Task PriceChangeAsync(string orderFormId, string itemIndex, PriceChangeRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/checkout/pub/orderForm/"+ (orderFormId==null? "" : System.Uri.EscapeDataString(orderFormId))+"/items/"+ (itemIndex==null? "" : System.Uri.EscapeDataString(itemIndex))+"/price";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Clear orderForm messages
		/// This request removes all messages from the `messages` field of the orderForm , leaving it empty.
		/// 
		/// You must send an empty JSON in the body of the request.
		/// 
		/// The [orderForm](https://developers.vtex.com/docs/guides/orderform-fields) is the data structure which represents a shopping cart and contains all information pertaining to it. Hence, the `orderFormId` is the identification code of a given cart.
		/// 
		/// **Important**: **Request Body** must always be sent with empty value "{ }" in this endpoint.
		/// ClearorderFormMessages api/checkout/pub/orderForm/{orderFormId}/messages/clear
		/// </summary>
		/// <param name="orderFormId">ID of the orderForm corresponding to the cart whose messages you want to remove.</param>
		/// <returns>OK</returns>
		public async Task<ClearorderFormMessagesReturn> ClearorderFormMessagesAsync(string orderFormId, string requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/checkout/pub/orderForm/"+ (orderFormId==null? "" : System.Uri.EscapeDataString(orderFormId))+"/messages/clear";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ClearorderFormMessagesReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Ignore profile data
		/// When a shopper provides an email address at Checkout, the platform tries to retrieve existing profile information for that email and add it to the shopping cart information. Use this request if you want to change this behavior for a given cart, meaning profile information will not be included in the order automattically.
		/// 
		/// The [orderForm](https://developers.vtex.com/docs/guides/orderform-fields) is the data structure which represents a shopping cart and contains all information pertaining to it. Hence, the `orderFormId` is the identification code of a given cart.
		/// 
		/// Note that this request will only work if you have not sent the `clientProfileData` to the cart yet. Sending it to a cart that already has a `clientProfileData` should return a status `403 Forbidden` error, with an `Access denied` message.
		/// IgnoreProfileData api/checkout/pub/orderForm/{orderFormId}/profile
		/// </summary>
		/// <param name="orderFormId">ID of the orderForm corresponding to the cart whose items will have the price changed.</param>
		public async Task IgnoreProfileDataAsync(string orderFormId, IgnoreProfileDataPatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/checkout/pub/orderForm/"+ (orderFormId==null? "" : System.Uri.EscapeDataString(orderFormId))+"/profile";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Place order from an existing cart
		/// This endpoint places an order from an existing `orderForm` object, meaning an existing cart.
		/// 
		/// After the creation of an order with this request, you have five minutes to send payment information and then request payment processing.
		/// PlaceOrderFromExistingOrderForm api/checkout/pub/orderForm/{orderFormId}/transaction
		/// </summary>
		/// <param name="orderFormId">ID of the `orderForm` corresponding to the cart from which to place the order.</param>
		public async Task<string> PlaceOrderFromExistingOrderFormAsync(string orderFormId, PlaceOrderFromExistingOrderFormPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/checkout/pub/orderForm/"+ (orderFormId==null? "" : System.Uri.EscapeDataString(orderFormId))+"/transaction";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Cart simulation
		/// This endpoint is used to simulate a cart in VTEX Checkout.
		/// 
		/// It receives an **SKU ID**, the **quantity** of items in the cart and the ID of the **Seller**.
		/// 
		/// It sends back all information about the cart, such as the selling price of each item, rates and benefits data, payment and logistics info.
		/// 
		/// This is useful whenever you need to know the availability of fulfilling an order for a specific cart setting, since the API response will let you know the updated price, inventory and shipping data.
		/// 
		/// **Important**: The fields (`sku id`, `quantity`, `seller`, `country`, `postalCode` and `geoCoordinates`) are just examples of content that you can simulate in your cart. You can add more fields to the request as per your need. Access the [orderForm](https://developers.vtex.com/docs/guides/orderform-fields) guide to check the available fields.
		/// CartSimulation api/checkout/pub/orderForms/simulation
		/// </summary>
		/// <param name="RnbBehavior">This parameter defines which promotions apply to the simulation. Use `0` for simulations at cart stage, which means all promotions apply. In case of window simulation use `1`, which indicates promotions that apply nominal discounts over the total purchase value shouldn't be considered on the simulation.
		///
		///		///Note that if this not sent, the parameter is `1`.</param>
		/// <param name="sc">Trade Policy (Sales Channel) identification.</param>
		/// <returns>OK</returns>
		public async Task<CartSimulationReturn> CartSimulationAsync(int RnbBehavior, int sc, CartSimulationPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/checkout/pub/orderForms/simulation?RnbBehavior="+RnbBehavior+"&sc="+sc;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CartSimulationReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Place order
		/// Places order without having any prior cart information. This means all information on items, client, payment and shipping must be sent in the body.
		/// 
		/// >⚠️ The authentication of this endpoint is required if you are creating an order with an item that has an attachment that creates a Subscription. For more information, access [Subscriptions API](https://developers.vtex.com/docs/api-reference/subscriptions-api-v3).
		/// PlaceOrder api/checkout/pub/orders
		/// </summary>
		/// <param name="sc">Trade Policy (Sales Channel) identification. This query can be used to create an order for a specific sales channel.</param>
		/// <returns>OK</returns>
		public async Task<PlaceOrderReturn> PlaceOrderAsync(int sc, PlaceOrderPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/checkout/pub/orders?sc="+sc;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PlaceOrderReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List pickup points by location
		/// Retrieves information on pickup points close to a given location determined by geocoordinates or postal code.
		/// 
		/// The pickup points returned are not necessarily all active ones. Make sure to validate the information consumed by integrations.
		/// ListPickupPpointsByLocation api/checkout/pub/pickup-points
		/// </summary>
		/// <param name="geoCoordinates">Geocoordinates (first longitude, then latitude) around which to search for pickup points. If you use this type of search, do not pass postal and country codes.</param>
		/// <param name="postalCode">Postal code around which to search for pickup points. If you use this type of search, make sure to pass a `countryCode` and do not pass `geoCoordinates`.</param>
		/// <param name="countryCode">Three letter country code refering to the `postalCode` field. Pass the country code only if you are searching pickup points by postal code.</param>
		/// <returns>OK</returns>
		public async Task ListPickupPpointsByLocationAsync(double[] geoCoordinates, string postalCode, string countryCode, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/checkout/pub/pickup-points?"+string.Join("&", geoCoordinates.Select(z => $"geoCoordinates={z}"))+"&postalCode=" + (postalCode==null? "" : System.Uri.EscapeDataString(postalCode))+"&countryCode=" + (countryCode==null? "" : System.Uri.EscapeDataString(countryCode));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get address by postal code
		/// Retrieves address information for a given postal code and country.
		/// 
		/// This request can be used to implement auto complete functionality when a customer needs to fill in an address.
		/// GetAddressByPostalCode api/checkout/pub/postal-code/{countryCode}/{postalCode}
		/// </summary>
		/// <param name="countryCode">Three letter country code refering to the `postalCode` field.</param>
		/// <param name="postalCode">Postal code.</param>
		/// <returns>OK</returns>
		public async Task GetAddressByPostalCodeAsync(string countryCode, string postalCode, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/checkout/pub/postal-code/"+ (countryCode==null? "" : System.Uri.EscapeDataString(countryCode))+"/"+ (postalCode==null? "" : System.Uri.EscapeDataString(postalCode));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get client profile by email
		/// Retrieve a client's profile information by providing an email address.
		/// 
		/// If the response body fields are empty, the following situations may have occurred:
		/// 
		/// 1. There is no client registered with the email address provided in your store, or;
		/// 2. Client profile is invalid or incomplete. For more information, see [SmartCheckout - Customer information automatic fill-in](https://help.vtex.com/en/tutorial/smartcheckout-customer-information-automatic-fill-in--2Nuu3xAFzdhIzJIldAdtan).
		/// 
		/// >⚠️ The authentication of this endpoint can change depending on the customer context. If you are consulting information from a customer with a complete profile on the store, the response will return the customer's data masked. You can only access the customer data with an authenticated request.
		/// GetClientProfileByEmail api/checkout/pub/profiles
		/// </summary>
		/// <param name="email">Client's email address to be searched.</param>
		/// <returns>OK</returns>
		public async Task<GetClientProfileByEmailReturn> GetClientProfileByEmailAsync(string email, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/checkout/pub/profiles?email=" + (email==null? "" : System.Uri.EscapeDataString(email));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetClientProfileByEmailReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get sellers by region or address
		/// Retrieve a list of sellers that cater to a specific region or address, according to your set up of our [regionalization feature](https://help.vtex.com/en/tutorial/setting-up-price-and-availability-of-skus-by-region--12ne58BmvYsYuGsimmugoc#). Learn more about [Region v2](https://developers.vtex.com/vtex-developer-docs/changelog/region-v2).
		/// 
		/// To access the list of sellers, you must choose one of the following methods:
		/// 
		/// 1. Send the identification of the list of sellers (`regionId`) as a path parameter through the URL. Or;
		/// 2. Send the `country` (3-digit ISO code) and at least one of the two values (`postal Code` or `geo Coordinates`) as query parameters through the URL. For this method, it is also allowed to send both values (`postalCode` or `geoCoordinates`) in the same request.
		/// GetSellersByRegion api/checkout/pub/regions/{regionId}
		/// </summary>
		/// <param name="regionId">ID of the region corresponding to the shopper's location.</param>
		/// <param name="country">Three letter country code refering to the `postalCode` field.</param>
		/// <param name="postalCode">Postal code corresponding to the shopper's location.</param>
		/// <param name="geoCoordinates">Geocoordinates (first longitude, semicolon, then latitude) corresponding to the shopper's location.</param>
		/// <returns>OK</returns>
		public async Task<GetSellersByRegionReturn> GetSellersByRegionAsync(string regionId, string country, string postalCode, double[] geoCoordinates, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/checkout/pub/regions/"+ (regionId==null? "" : System.Uri.EscapeDataString(regionId))+"&country=" + (country==null? "" : System.Uri.EscapeDataString(country))+"&postalCode=" + (postalCode==null? "" : System.Uri.EscapeDataString(postalCode))+"&"+string.Join("&", geoCoordinates.Select(z => $"geoCoordinates={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetSellersByRegionReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get orderForm configuration
		/// Retrieves the settings that are currently applied to every orderForm in the account.
		/// 
		/// These settings are defined by the request [Update orderForm configuration](https://developers.vtex.com/reference/configuration#updateorderformconfiguration).
		/// 
		/// Always use this request to retrieve the current configuration before performing an update. By doing so you ensure that you are modifying only the properties you want.
		/// GetorderFormconfiguration api/checkout/pvt/configuration/orderForm
		/// </summary>
		public async Task<object> GetorderFormconfigurationAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/checkout/pvt/configuration/orderForm";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<object>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update orderForm configuration
		/// Determines settings that will apply to every orderForm in the account.
		/// 
		/// For example, if you create an app using this request, every orderForm of this account will have the custom fields created though it.
		/// 
		/// **Important**: always retrieve the current configuration before performing an update to ensure that you are modifying only the properties you want. Otherwise, old values can be overwritten. To retrieve the current configuration, use the request [Get orderForm configuration](https://developers.vtex.com/reference#getorderformconfiguration).
		/// UpdateorderFormconfiguration api/checkout/pvt/configuration/orderForm
		/// </summary>
		public async Task UpdateorderFormconfigurationAsync(UpdateorderFormconfigurationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/checkout/pvt/configuration/orderForm";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get window to change seller
		/// Retrieves a marketplace’s window to change seller, that is, the period when it is possible to choose another seller to fulfill a given order after the original seller has canceled it.
		/// 
		/// The default period for this window is of 2 days, but it can be configured by the request Update window to change seller.
		/// GetWindowToChangeSeller api/checkout/pvt/configuration/window-to-change-seller
		/// </summary>
		/// <returns>OK</returns>
		public async Task GetWindowToChangeSellerAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/checkout/pvt/configuration/window-to-change-seller";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update window to change seller
		/// Updates a marketplace’s window to change seller, that is, the period when it is possible to choose another seller to fulfill a given order after the original seller has canceled it.
		/// 
		/// It is possible to check the current window using the request Get window to change seller.
		/// UpdateWindowToChangeSeller api/checkout/pvt/configuration/window-to-change-seller
		/// </summary>
		public async Task UpdateWindowToChangeSellerAsync(WaitingTime requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/checkout/pvt/configuration/window-to-change-seller";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Remove all personal data
		/// This call removes all user information, making a cart anonymous while leaving the items.
		/// 
		/// The [orderForm](https://developers.vtex.com/docs/guides/orderform-fields) is the data structure that represents a shopping cart and contains all information about it. Hence, the `orderFormId` is the identification code of a given cart.
		/// 
		/// This call works by creating a new orderForm, setting a new cookie, and returning a redirect 302 to the cart URL (`/checkout/#/orderform`).
		/// Removeallpersonaldata checkout/changeToAnonymousUser/{orderFormId}
		/// </summary>
		/// <param name="orderFormId">ID of the orderForm corresponding to the cart whose user's personal data you want to remove.</param>
		/// <returns>OK</returns>
		public async Task<string> RemoveallpersonaldataAsync(string orderFormId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "checkout/changeToAnonymousUser/"+ (orderFormId==null? "" : System.Uri.EscapeDataString(orderFormId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (System.IO.StreamReader streamReader = new System.IO.StreamReader(responseMessageStream))
				{
				return streamReader.ReadToEnd();;
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public class AddClientPreferencesPostBody
	{
		
		/// <summary>
		/// Locale chosen by the shopper. Determines website language.
		/// </summary>
		[System.ComponentModel.DefaultValue("EN")]
		[System.Runtime.Serialization.DataMember(Name="locale")]
		public string Locale { get; set; } = "EN";
		
		/// <summary>
		/// Indicates whether the shopper opted in to receive the store's news letter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="optinNewsLetter")]
		public System.Nullable<System.Boolean> OptinNewsLetter { get; set; }
	}
	
	public class AddClientProfilePostBody
	{
		
		/// <summary>
		/// Corporate document, if the customer is a legal entity.
		/// </summary>
		[System.ComponentModel.DefaultValue("12345678000100")]
		[System.Runtime.Serialization.DataMember(Name="corporateDocument")]
		public string CorporateDocument { get; set; } = "12345678000100";
		
		/// <summary>
		/// Company name, if the customer is a legal entity.
		/// </summary>
		[System.ComponentModel.DefaultValue("company-name")]
		[System.Runtime.Serialization.DataMember(Name="corporateName")]
		public string CorporateName { get; set; } = "company-name";
		
		/// <summary>
		/// Corporate phone number, if the customer is a legal entity.
		/// </summary>
		[System.ComponentModel.DefaultValue("+551100988887777")]
		[System.Runtime.Serialization.DataMember(Name="corporatePhone")]
		public string CorporatePhone { get; set; } = "+551100988887777";
		
		/// <summary>
		/// Document number informed by the customer.
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue("123456789")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="document")]
		public string Document { get; set; } = "123456789";
		
		/// <summary>
		/// Type of the document informed by the customer.
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue("cpf")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="documentType")]
		public string DocumentType { get; set; } = "cpf";
		
		/// <summary>
		/// Customer's email address.
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue("customer@examplemail.com")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; } = "customer@examplemail.com";
		
		/// <summary>
		/// Customer's first name.
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue("first-name")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="firstName")]
		public string FirstName { get; set; } = "first-name";
		
		/// <summary>
		/// `true` if the customer is a legal entity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isCorporate")]
		public System.Nullable<System.Boolean> IsCorporate { get; set; }
		
		/// <summary>
		/// Customer's last name.
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue("last-name")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastName")]
		public string LastName { get; set; } = "last-name";
		
		/// <summary>
		/// Customer's phone number.
		/// </summary>
		[System.ComponentModel.DefaultValue("+55110988887777")]
		[System.Runtime.Serialization.DataMember(Name="phone")]
		public string Phone { get; set; } = "+55110988887777";
		
		/// <summary>
		/// State inscription, if the customer is a legal entity.
		/// </summary>
		[System.ComponentModel.DefaultValue("12345678")]
		[System.Runtime.Serialization.DataMember(Name="stateInscription")]
		public string StateInscription { get; set; } = "12345678";
		
		/// <summary>
		/// Trade name, if the customer is a legal entity.
		/// </summary>
		[System.ComponentModel.DefaultValue("trade-name")]
		[System.Runtime.Serialization.DataMember(Name="tradeName")]
		public string TradeName { get; set; } = "trade-name";
	}
	
	public class AddMarketingDataPostBody
	{
		
		/// <summary>
		/// Sending an existing coupon code in this field will return the corresponding discount in the purchase. Use the [cart simulation](https://developers.vtex.com/vtex-rest-api/reference/orderform#orderformsimulation) request to check which coupons might apply before placing the order.
		/// </summary>
		[System.ComponentModel.DefaultValue("free-shipping")]
		[System.Runtime.Serialization.DataMember(Name="coupon")]
		public string Coupon { get; set; } = "free-shipping";
		
		/// <summary>
		/// Marketing tags.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="marketingTags")]
		public string[] MarketingTags { get; set; }
		
		/// <summary>
		/// UTM campaign
		/// </summary>
		[System.ComponentModel.DefaultValue("Black friday")]
		[System.Runtime.Serialization.DataMember(Name="utmCampaign")]
		public string UtmCampaign { get; set; } = "Black friday";
		
		/// <summary>
		/// UTM medium.
		/// </summary>
		[System.ComponentModel.DefaultValue("CPC")]
		[System.Runtime.Serialization.DataMember(Name="utmMedium")]
		public string UtmMedium { get; set; } = "CPC";
		
		/// <summary>
		/// UTM source.
		/// </summary>
		[System.ComponentModel.DefaultValue("Facebook")]
		[System.Runtime.Serialization.DataMember(Name="utmSource")]
		public string UtmSource { get; set; } = "Facebook";
		
		/// <summary>
		/// utmi_campaign (internal utm)
		/// </summary>
		[System.ComponentModel.DefaultValue("utmi_campaign-exmaple")]
		[System.Runtime.Serialization.DataMember(Name="utmiCampaign")]
		public string UtmiCampaign { get; set; } = "utmi_campaign-exmaple";
		
		/// <summary>
		/// utmi_page (internal utm)
		/// </summary>
		[System.ComponentModel.DefaultValue("utmi_page-example")]
		[System.Runtime.Serialization.DataMember(Name="utmiPage")]
		public string UtmiPage { get; set; } = "utmi_page-example";
		
		/// <summary>
		/// utmi_part (internal utm)
		/// </summary>
		[System.ComponentModel.DefaultValue("utmi_part-exmaple")]
		[System.Runtime.Serialization.DataMember(Name="utmiPart")]
		public string UtmiPart { get; set; } = "utmi_part-exmaple";
	}
	
	public class AddMerchantContextDataPostBody
	{
		
		/// <summary>
		/// Sales Associate information.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="salesAssociateData")]
		public AddMerchantContextDataPostBodySalesAssociateData SalesAssociateData { get; set; }
	}
	
	public class AddMerchantContextDataPostBodySalesAssociateData
	{
		
		/// <summary>
		/// Sales Associate (Seller) identification code. All information should be registered by the merchant. Maximum of 100 characters.
		/// </summary>
		[System.ComponentModel.DefaultValue("seller123")]
		[System.Runtime.Serialization.DataMember(Name="salesAssociateId")]
		public string SalesAssociateId { get; set; } = "seller123";
	}
	
	public class AddMerchantContextDataReturn
	{
		
		/// <summary>
		/// Sales Associate (Seller) identification code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="salesAssociateId")]
		public string SalesAssociateId { get; set; }
	}
	
	public class AddPaymentDataPostBody
	{
		
		/// <summary>
		/// Array with information on each payment chosen by the shopper.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payments")]
		public AddPaymentDataPostBodyPayments[] AddPaymentDataPostBodyPayments { get; set; }
	}
	
	public class AddPaymentDataPostBodyPayments
	{
		
		/// <summary>
		/// Payment system group.
		/// </summary>
		[System.ComponentModel.DefaultValue("bankInvoicePaymentGroup")]
		[System.Runtime.Serialization.DataMember(Name="group")]
		public string Group { get; set; } = "bankInvoicePaymentGroup";
		
		/// <summary>
		/// Indicates whether billing address for this payment is the default address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hasDefaultBillingAddress")]
		public System.Nullable<System.Boolean> HasDefaultBillingAddress { get; set; }
		
		/// <summary>
		/// Selected number of installments.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="installments")]
		public System.Nullable<System.Int32> Installments { get; set; }
		
		/// <summary>
		/// Installments' interest rate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="installmentsInterestRate")]
		public System.Nullable<System.Double> InstallmentsInterestRate { get; set; }
		
		/// <summary>
		/// Value of the installments.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="installmentsValue")]
		public System.Nullable<System.Int32> InstallmentsValue { get; set; }
		
		/// <summary>
		/// Payment system ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paymentSystem")]
		public System.Nullable<System.Int32> PaymentSystem { get; set; }
		
		/// <summary>
		/// Payment system name.
		/// </summary>
		[System.ComponentModel.DefaultValue("Boleto Bancário")]
		[System.Runtime.Serialization.DataMember(Name="paymentSystemName")]
		public string PaymentSystemName { get; set; } = "Boleto Bancário";
		
		/// <summary>
		/// Reference value used to calculate total order value with interest.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="referenceValue")]
		public System.Nullable<System.Int32> ReferenceValue { get; set; }
		
		/// <summary>
		/// Total value assigned to this payment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Int32> Value { get; set; }
	}
	
	public class AddShippingAddressPostBody
	{
		
		/// <summary>
		/// This field should be sent as `false` to prevent the address information from being filled in automatically based on the `postalCode` information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clearAddressIfPostalCodeNotFound")]
		public System.Nullable<System.Boolean> ClearAddressIfPostalCodeNotFound { get; set; }
		
		/// <summary>
		/// Array with logistics information on each item of the `items` array in the `orderForm`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logisticsInfo")]
		public AddShippingAddressPostBodyLogisticsInfo[] AddShippingAddressPostBodyLogisticsInfo { get; set; }
		
		/// <summary>
		/// List of objects with addresses information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selectedAddresses")]
		public AddShippingAddressPostBodySelectedAddresses[] AddShippingAddressPostBodySelectedAddresses { get; set; }
	}
	
	public class AddShippingAddressPostBodyLogisticsInfo
	{
		
		/// <summary>
		/// Index of item in items array
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemIndex")]
		public System.Nullable<System.Int32> ItemIndex { get; set; }
		
		/// <summary>
		/// Delivery channel selected by the customer. For example, `"delivery"` or `"pickup-in-point"`.
		/// </summary>
		[System.ComponentModel.DefaultValue("delivery")]
		[System.Runtime.Serialization.DataMember(Name="selectedDeliveryChannel")]
		public string SelectedDeliveryChannel { get; set; } = "delivery";
		
		/// <summary>
		/// Selected SLA. For example, `"normal"` or `"express"`.
		/// </summary>
		[System.ComponentModel.DefaultValue("normal")]
		[System.Runtime.Serialization.DataMember(Name="selectedSla")]
		public string SelectedSla { get; set; } = "normal";
	}
	
	public class AddShippingAddressPostBodySelectedAddresses
	{
		
		/// <summary>
		/// Type of address. For example, `Residential` or `Pickup`, among others.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addressType")]
		public string AddressType { get; set; }
		
		/// <summary>
		/// City of the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		/// <summary>
		/// Complement to the shipping address in case it applies.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="complement")]
		public string Complement { get; set; }
		
		/// <summary>
		/// Three letter ISO code of the country of the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// Array containing two floats with geocoordinates, first longitude, then latitude.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="geoCoordinates")]
		public double[] GeoCoordinates { get; set; }
		
		/// <summary>
		/// Neighborhood of the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="neighborhood")]
		public string Neighborhood { get; set; }
		
		/// <summary>
		/// Number of the building, house or apartment in the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="number")]
		public string Number { get; set; }
		
		/// <summary>
		/// Postal Code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postalCode")]
		public string PostalCode { get; set; }
		
		/// <summary>
		/// Name of the person who is going to receive the order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="receiverName")]
		public string ReceiverName { get; set; }
		
		/// <summary>
		/// Complement that might help locate the shipping address more precisely in case of delivery.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reference")]
		public string Reference { get; set; }
		
		/// <summary>
		/// State of the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		/// <summary>
		/// Street of the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="street")]
		public string Street { get; set; }
	}
	
	public class AddCouponsPostBody
	{
		
		/// <summary>
		/// Sending an existing coupon code in this field will return the corresponding discount in the purchase. Use the [cart simulation](https://developers.vtex.com/vtex-rest-api/reference/orderform#orderformsimulation) request to check which coupons might apply before placing the order.
		/// </summary>
		[System.ComponentModel.DefaultValue("freeshipping")]
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; } = "freeshipping";
	}
	
	public class AddCouponsReturn
	{
		
		/// <summary>
		/// Permission to modify item price manually.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowManualPrice")]
		public System.Nullable<System.Boolean> AllowManualPrice { get; set; }
		
		/// <summary>
		/// Available accounts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availableAccounts")]
		public string[] AvailableAccounts { get; set; }
		
		/// <summary>
		/// Information on each available address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availableAddresses")]
		public AddCouponsReturnAvailableAddresses[] AddCouponsReturnAvailableAddresses { get; set; }
		
		/// <summary>
		/// Data can be edited.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canEditData")]
		public System.Nullable<System.Boolean> CanEditData { get; set; }
		
		/// <summary>
		/// Object containing preferences from the client who placed the order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientPreferencesData")]
		public AddCouponsReturnClientPreferencesData ClientPreferencesData { get; set; }
		
		/// <summary>
		/// Customer's profile information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientProfileData")]
		public AddCouponsReturnClientProfileData ClientProfileData { get; set; }
		
		/// <summary>
		/// Object containing commercial condition information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="commercialConditionData")]
		public string CommercialConditionData { get; set; }
		
		/// <summary>
		/// Customer additional information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customData")]
		public string CustomData { get; set; }
		
		/// <summary>
		/// Gift registry list information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="giftRegistryData")]
		public string GiftRegistryData { get; set; }
		
		/// <summary>
		/// Hooks information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hooksData")]
		public string HooksData { get; set; }
		
		/// <summary>
		/// Ignore customer profile data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ignoreProfileData")]
		public System.Nullable<System.Boolean> IgnoreProfileData { get; set; }
		
		/// <summary>
		/// Object containing information pertinent to the order's invoice.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="invoiceData")]
		public string InvoiceData { get; set; }
		
		/// <summary>
		/// Indicates whether order is checked in.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isCheckedIn")]
		public System.Nullable<System.Boolean> IsCheckedIn { get; set; }
		
		/// <summary>
		/// Item metadata.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemMetadata")]
		public AddCouponsReturnItemMetadata ItemMetadata { get; set; }
		
		/// <summary>
		/// Information on each item in the order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public AddCouponsReturnItems[] AddCouponsReturnItems { get; set; }
		
		/// <summary>
		/// Object containing information about the ordering of items within the orderForm.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemsOrdination")]
		public AddCouponsReturnItemsOrdination ItemsOrdination { get; set; }
		
		/// <summary>
		/// Indicates whether the user is logged into the store.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="loggedIn")]
		public System.Nullable<System.Boolean> LoggedIn { get; set; }
		
		/// <summary>
		/// Object containIng promotion data such as coupon tracking information and internal or external UTMs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="marketingData")]
		public AddCouponsReturnMarketingData MarketingData { get; set; }
		
		/// <summary>
		/// Array containing an object for each message generated by our servers while processing the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="messages")]
		public string[] Messages { get; set; }
		
		/// <summary>
		/// Optional field meant to hold additional information about the order. We recommend using this field for text, not data formats such as `JSON` even if escaped. For that purpose, see [Creating customizable fields](https://developers.vtex.com/vtex-rest-api/docs/creating-customizable-fields-in-the-cart-with-checkout-api-1)
		/// </summary>
		[System.ComponentModel.DefaultValue("open-text-example")]
		[System.Runtime.Serialization.DataMember(Name="openTextField")]
		public string OpenTextField { get; set; } = "open-text-example";
		
		/// <summary>
		/// ID of the orderForm corresponding to a specific cart.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orderFormId")]
		public string OrderFormId { get; set; }
		
		/// <summary>
		/// Information on the order's payment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paymentData")]
		public AddCouponsReturnPaymentData PaymentData { get; set; }
		
		/// <summary>
		/// Profile provider.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="profileProvider")]
		public string ProfileProvider { get; set; }
		
		/// <summary>
		/// Information on rates and benefits that apply to the order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ratesAndBenefitsData")]
		public AddCouponsReturnRatesAndBenefitsData RatesAndBenefitsData { get; set; }
		
		/// <summary>
		/// Attribute created by the seller, in their VTEX store configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="salesChannel")]
		public string SalesChannel { get; set; }
		
		/// <summary>
		/// Array containing the data of the item selected as a gift.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selectableGifts")]
		public string[] SelectableGifts { get; set; }
		
		/// <summary>
		/// Information on each seller.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sellers")]
		public AddCouponsReturnSellers[] AddCouponsReturnSellers { get; set; }
		
		/// <summary>
		/// Shipping information pertinent to the order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shippingData")]
		public AddCouponsReturnShippingData ShippingData { get; set; }
		
		/// <summary>
		/// ID of the store.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storeId")]
		public string StoreId { get; set; }
		
		/// <summary>
		/// Object containing data from the store's configuration (stored in VTEX's License Manager).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storePreferencesData")]
		public string StorePreferencesData { get; set; }
		
		/// <summary>
		/// Subscription information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subscriptionData")]
		public string SubscriptionData { get; set; }
		
		/// <summary>
		/// Array containing an object for each totalizer for the purchase. Totalizers contain the sum of values for a specific part of the order (e.g. Total item value, Total shipping value).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalizers")]
		public string[] Totalizers { get; set; }
		
		/// <summary>
		/// Unique ID associated with the customer profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userProfileId")]
		public string UserProfileId { get; set; }
		
		/// <summary>
		/// User type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userType")]
		public string UserType { get; set; }
		
		/// <summary>
		/// Total value of the order without separating cents. For example, $24.99 is represented `2499`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Int32> Value { get; set; }
	}
	
	public class AddCouponsReturnAvailableAddresses
	{
		
		/// <summary>
		/// Address ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addressId")]
		public string AddressId { get; set; }
		
		/// <summary>
		/// Address type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addressType")]
		public string AddressType { get; set; }
		
		/// <summary>
		/// City of the address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		/// <summary>
		/// Complement to the address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="complement")]
		public string Complement { get; set; }
		
		/// <summary>
		/// Country of the address. ISO three-letter code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// Array containing two floats with geocoordinates, first longitude, then latitude.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="geoCoordinates")]
		public double[] GeoCoordinates { get; set; }
		
		/// <summary>
		/// Indicates whether address is disposable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isDisposable")]
		public System.Nullable<System.Boolean> IsDisposable { get; set; }
		
		/// <summary>
		/// Neighborhood of the address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="neighborhood")]
		public string Neighborhood { get; set; }
		
		/// <summary>
		/// Number of the address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="number")]
		public string Number { get; set; }
		
		/// <summary>
		/// Name of the receiver.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="receiverName")]
		public string ReceiverName { get; set; }
		
		/// <summary>
		/// Reference that may help in the location of the address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reference")]
		public string Reference { get; set; }
		
		/// <summary>
		/// State of the address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		/// <summary>
		/// Street of the address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="street")]
		public string Street { get; set; }
	}
	
	public class AddCouponsReturnClientPreferencesData
	{
		
		/// <summary>
		/// Client's locale. Examples: `pt-BR` and `en-US`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locale")]
		public string Locale { get; set; }
		
		/// <summary>
		/// `true` if the client opted to receive newsletter from the store.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="optinNewsLetter")]
		public System.Nullable<System.Boolean> OptinNewsLetter { get; set; }
	}
	
	public class AddCouponsReturnClientProfileData
	{
		
		/// <summary>
		/// Corporate document, if the customer is a legal entity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="corporateDocument")]
		public string CorporateDocument { get; set; }
		
		/// <summary>
		/// Company name, if the customer is a legal entity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="corporateName")]
		public string CorporateName { get; set; }
		
		/// <summary>
		/// Corporate phone number, if the customer is a legal entity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="corporatePhone")]
		public string CorporatePhone { get; set; }
		
		/// <summary>
		/// Customer class.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customerClass")]
		public string CustomerClass { get; set; }
		
		/// <summary>
		/// Document informed by the customer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="document")]
		public string Document { get; set; }
		
		/// <summary>
		/// Type of the document informed by the customer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="documentType")]
		public string DocumentType { get; set; }
		
		/// <summary>
		/// Email address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// First name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firstName")]
		public string FirstName { get; set; }
		
		/// <summary>
		/// Indicates whether the customer is a legal entity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isCorporate")]
		public System.Nullable<System.Boolean> IsCorporate { get; set; }
		
		/// <summary>
		/// Last name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastName")]
		public string LastName { get; set; }
		
		/// <summary>
		/// Phone number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phone")]
		public string Phone { get; set; }
		
		/// <summary>
		/// Indicates whether profile is complete on loading.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="profileCompleteOnLoading")]
		public System.Nullable<System.Boolean> ProfileCompleteOnLoading { get; set; }
		
		/// <summary>
		/// Indicates whether profile presents error on loading.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="profileErrorOnLoading")]
		public System.Nullable<System.Boolean> ProfileErrorOnLoading { get; set; }
		
		/// <summary>
		/// State inscription, if the customer is a legal entity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stateInscription")]
		public string StateInscription { get; set; }
		
		/// <summary>
		/// Trade name, if the customer is a legal entity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tradeName")]
		public string TradeName { get; set; }
	}
	
	public class AddCouponsReturnItemMetadata
	{
		
		/// <summary>
		/// List of objects containing metadata on each item in the order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public AddCouponsReturnItemMetadataItems[] AddCouponsReturnItemMetadataItems { get; set; }
	}
	
	public class AddCouponsReturnItemMetadataItems
	{
		
		/// <summary>
		/// Detail URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="detailUrl")]
		public string DetailUrl { get; set; }
		
		/// <summary>
		/// European Article Number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ean")]
		public string Ean { get; set; }
		
		/// <summary>
		/// Item ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Image URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageUrl")]
		public string ImageUrl { get; set; }
		
		/// <summary>
		/// Product name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Product ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productId")]
		public string ProductId { get; set; }
		
		/// <summary>
		/// Ref ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refId")]
		public string RefId { get; set; }
		
		/// <summary>
		/// Seller.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="seller")]
		public string Seller { get; set; }
		
		/// <summary>
		/// SKU name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="skuName")]
		public string SkuName { get; set; }
	}
	
	public class AddCouponsReturnItems
	{
		
		/// <summary>
		/// Additional information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additionalInfo")]
		public AddCouponsReturnItemsAdditionalInfo AdditionalInfo { get; set; }
		
		/// <summary>
		/// Array containing information on attachments.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attachments")]
		public string[] Attachments { get; set; }
		
		/// <summary>
		/// Availability
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availability")]
		public string Availability { get; set; }
		
		/// <summary>
		/// Information on services sold along with the SKU. Example: a gift package.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bundleItems")]
		public AddCouponsReturnItemsBundleItems[] AddCouponsReturnItemsBundleItems { get; set; }
		
		/// <summary>
		/// Detail URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="detailUrl")]
		public string DetailUrl { get; set; }
		
		/// <summary>
		/// European Article Number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ean")]
		public string Ean { get; set; }
		
		/// <summary>
		/// ID of the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Image URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageUrl")]
		public string ImageUrl { get; set; }
		
		/// <summary>
		/// Indicates whether item is a gift.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isGift")]
		public System.Nullable<System.Boolean> IsGift { get; set; }
		
		/// <summary>
		/// List price in cents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="listPrice")]
		public System.Nullable<System.Int32> ListPrice { get; set; }
		
		/// <summary>
		/// Manual price in cents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="manualPrice")]
		public System.Nullable<System.Int32> ManualPrice { get; set; }
		
		/// <summary>
		/// User that applied the manual price, if that is the case.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="manualPriceAppliedBy")]
		public string ManualPriceAppliedBy { get; set; }
		
		/// <summary>
		/// Manufacturer code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="manufacturerCode")]
		public string ManufacturerCode { get; set; }
		
		/// <summary>
		/// Measurement unit
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="measurementUnit")]
		public string MeasurementUnit { get; set; }
		
		/// <summary>
		/// Modal type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modalType")]
		public string ModalType { get; set; }
		
		/// <summary>
		/// Product name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Parent assembly binding.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parentAssemblyBinding")]
		public string ParentAssemblyBinding { get; set; }
		
		/// <summary>
		/// Parent item index.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parentItemIndex")]
		public System.Nullable<System.Int32> ParentItemIndex { get; set; }
		
		/// <summary>
		/// Presale date.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="preSaleDate")]
		public string PreSaleDate { get; set; }
		
		/// <summary>
		/// Price in cents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="price")]
		public System.Nullable<System.Int32> Price { get; set; }
		
		/// <summary>
		/// Price information for all units of a specific item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priceDefinition")]
		public AddCouponsReturnItemsPriceDefinition PriceDefinition { get; set; }
		
		/// <summary>
		/// Array of price tags, each of which, modifies the price in some way, like discounts or rates that apply to the item in the context of the order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priceTags")]
		public AddCouponsReturnItemsPriceTags[] AddCouponsReturnItemsPriceTags { get; set; }
		
		/// <summary>
		/// Price expiration date and time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priceValidUntil")]
		public string PriceValidUntil { get; set; }
		
		/// <summary>
		/// Object, where each field is an ID from `productCategoryIds`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productCategories")]
		public AddCouponsReturnItemsProductCategories ProductCategories { get; set; }
		
		/// <summary>
		/// Product category IDs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productCategoryIds")]
		public string ProductCategoryIds { get; set; }
		
		/// <summary>
		/// Product ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productId")]
		public string ProductId { get; set; }
		
		/// <summary>
		/// Product Ref ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productRefId")]
		public string ProductRefId { get; set; }
		
		/// <summary>
		/// Quantity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public System.Nullable<System.Int32> Quantity { get; set; }
		
		/// <summary>
		/// Ref ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refId")]
		public string RefId { get; set; }
		
		/// <summary>
		/// Reward value in cents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rewardValue")]
		public System.Nullable<System.Int32> RewardValue { get; set; }
		
		/// <summary>
		/// Seller.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="seller")]
		public string Seller { get; set; }
		
		/// <summary>
		/// Sellers involved in the chain. The list should contain only one seller, unless it is a [Multilevel Omnichannel Inventory](https://help.vtex.com/en/tutorial/multilevel-omnichannel-inventory--7M1xyCZWUyCB7PcjNtOyw4) order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sellerChain")]
		public string[] SellerChain { get; set; }
		
		/// <summary>
		/// Selling price in cents. Note that this field may be subject to rounding discrepancies. We recommend retrieving data from the `priceDefinition` data structure instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sellingPrice")]
		public System.Nullable<System.Int32> SellingPrice { get; set; }
		
		/// <summary>
		/// SKU name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="skuName")]
		public string SkuName { get; set; }
		
		/// <summary>
		/// Tax value in cents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tax")]
		public System.Nullable<System.Int32> Tax { get; set; }
		
		/// <summary>
		/// Unique ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uniqueId")]
		public string UniqueId { get; set; }
		
		/// <summary>
		/// Unit multiplier
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unitMultiplier")]
		public System.Nullable<System.Int32> UnitMultiplier { get; set; }
	}
	
	public class AddCouponsReturnItemsAdditionalInfo
	{
		
		/// <summary>
		/// Brand ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="brandId")]
		public string BrandId { get; set; }
		
		/// <summary>
		/// Brand name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="brandName")]
		public string BrandName { get; set; }
		
		/// <summary>
		/// Dimension.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimension")]
		public string Dimension { get; set; }
		
		/// <summary>
		/// Offering information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offeringInfo")]
		public string OfferingInfo { get; set; }
		
		/// <summary>
		/// Offering type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offeringType")]
		public string OfferingType { get; set; }
		
		/// <summary>
		/// Offering type ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offeringTypeId")]
		public string OfferingTypeId { get; set; }
	}
	
	public class AddCouponsReturnItemsBundleItems
	{
		
		/// <summary>
		/// Service identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Service name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Service price in cents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="price")]
		public System.Nullable<System.Int32> Price { get; set; }
		
		/// <summary>
		/// Service type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class AddCouponsReturnItemsPriceDefinition
	{
		
		/// <summary>
		/// Item's calculated unitary selling price in cents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="calculatedSellingPrice")]
		public System.Nullable<System.Int32> CalculatedSellingPrice { get; set; }
		
		/// <summary>
		/// Array of objects, each containing value (in cents) and quantity for the different rounding instances that can be combined to form the correctly rounded total.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sellingPrices")]
		public AddCouponsReturnItemsPriceDefinitionSellingPrices[] AddCouponsReturnItemsPriceDefinitionSellingPrices { get; set; }
		
		/// <summary>
		/// Total value for all units of the item in cents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Int32> Total { get; set; }
	}
	
	public class AddCouponsReturnItemsPriceDefinitionSellingPrices
	{
		
		/// <summary>
		/// Rounding quantity, meaning how many items are rounded to this value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public System.Nullable<System.Int32> Quantity { get; set; }
		
		/// <summary>
		/// Value in cents for that specific rounding.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Int32> Value { get; set; }
	}
	
	public class AddCouponsReturnItemsPriceTags
	{
		
		/// <summary>
		/// Price tag identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="identifier")]
		public string Identifier { get; set; }
		
		/// <summary>
		/// Indicates whether price tag value is applied through a percentage.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isPercentual")]
		public System.Nullable<System.Boolean> IsPercentual { get; set; }
		
		/// <summary>
		/// Price tag name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Price tag raw value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rawValue")]
		public System.Nullable<System.Int32> RawValue { get; set; }
		
		/// <summary>
		/// Price tag value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Int32> Value { get; set; }
	}
	
	public class AddCouponsReturnItemsProductCategories
	{
		
		/// <summary>
		/// Product category corresponding to the ID in the field key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="{ID}")]
		public string ID { get; set; }
	}
	
	public class AddCouponsReturnItemsOrdination
	{
		
		/// <summary>
		/// Indicates whether the ordering is ascending.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ascending")]
		public System.Nullable<System.Boolean> Ascending { get; set; }
		
		/// <summary>
		/// Criteria adopted to order the items in the list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="criteria")]
		public string Criteria { get; set; }
	}
	
	public class AddCouponsReturnMarketingData
	{
		
		/// <summary>
		/// Sending an existing coupon code in this field will return the corresponding discount in the purchase. Use the [cart simulation](https://developers.vtex.com/vtex-rest-api/reference/orderform#orderformsimulation) request to check which coupons might apply before placing the order.
		/// </summary>
		[System.ComponentModel.DefaultValue("free-shipping")]
		[System.Runtime.Serialization.DataMember(Name="coupon")]
		public string Coupon { get; set; } = "free-shipping";
		
		/// <summary>
		/// UTM campaign.
		/// </summary>
		[System.ComponentModel.DefaultValue("Black friday")]
		[System.Runtime.Serialization.DataMember(Name="utmCampaign")]
		public string UtmCampaign { get; set; } = "Black friday";
		
		/// <summary>
		/// UTM medium.
		/// </summary>
		[System.ComponentModel.DefaultValue("CPC")]
		[System.Runtime.Serialization.DataMember(Name="utmMedium")]
		public string UtmMedium { get; set; } = "CPC";
		
		/// <summary>
		/// UTM source.
		/// </summary>
		[System.ComponentModel.DefaultValue("Facebook")]
		[System.Runtime.Serialization.DataMember(Name="utmSource")]
		public string UtmSource { get; set; } = "Facebook";
		
		/// <summary>
		/// utmi_campaign (internal utm).
		/// </summary>
		[System.ComponentModel.DefaultValue("utmi_campaign-exmaple")]
		[System.Runtime.Serialization.DataMember(Name="utmiCampaign")]
		public string UtmiCampaign { get; set; } = "utmi_campaign-exmaple";
		
		/// <summary>
		/// utmi_page (internal utm).
		/// </summary>
		[System.ComponentModel.DefaultValue("utmi_page-example")]
		[System.Runtime.Serialization.DataMember(Name="utmiPage")]
		public string UtmiPage { get; set; } = "utmi_page-example";
		
		/// <summary>
		/// utmi_part (internal utm).
		/// </summary>
		[System.ComponentModel.DefaultValue("utmi_part-exmaple")]
		[System.Runtime.Serialization.DataMember(Name="utmiPart")]
		public string UtmiPart { get; set; } = "utmi_part-exmaple";
	}
	
	public class AddCouponsReturnPaymentData
	{
		
		/// <summary>
		/// Gift card information, if it applies to the order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="giftCards")]
		public AddCouponsReturnPaymentDataGiftCards[] AddCouponsReturnPaymentDataGiftCards { get; set; }
		
		/// <summary>
		/// Information on each transaction pertinent to the order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transactions")]
		public AddCouponsReturnPaymentDataTransactions[] AddCouponsReturnPaymentDataTransactions { get; set; }
	}
	
	public class AddCouponsReturnPaymentDataGiftCards
	{
		
		/// <summary>
		/// Gift card balance in cents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="balance")]
		public System.Nullable<System.Int32> Balance { get; set; }
		
		/// <summary>
		/// Gift card ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Indicates whether gift card is in use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inUse")]
		public System.Nullable<System.Boolean> InUse { get; set; }
		
		/// <summary>
		/// Indicates whether gift card is special.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isSpecialCard")]
		public System.Nullable<System.Boolean> IsSpecialCard { get; set; }
		
		/// <summary>
		/// Gift card name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Gift card redemption code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="redemptionCode")]
		public string RedemptionCode { get; set; }
		
		/// <summary>
		/// Gift card value in cents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Int32> Value { get; set; }
	}
	
	public class AddCouponsReturnPaymentDataTransactions
	{
		
		/// <summary>
		/// Indicates whether transaction is active.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public System.Nullable<System.Boolean> IsActive { get; set; }
		
		/// <summary>
		/// Merchant name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="merchantName")]
		public string MerchantName { get; set; }
		
		/// <summary>
		/// Information on each payment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payments")]
		public AddCouponsReturnPaymentDataTransactionsPayments[] AddCouponsReturnPaymentDataTransactionsPayments { get; set; }
		
		/// <summary>
		/// Indicates whather transaction is shared.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sharedTransaction")]
		public System.Nullable<System.Boolean> SharedTransaction { get; set; }
		
		/// <summary>
		/// Transaction ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transactionId")]
		public string TransactionId { get; set; }
	}
	
	public class AddCouponsReturnPaymentDataTransactionsPayments
	{
		
		/// <summary>
		/// Account ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
		
		/// <summary>
		/// Bin.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bin")]
		public string Bin { get; set; }
		
		/// <summary>
		/// Number of installments.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="installments")]
		public System.Nullable<System.Int32> Installments { get; set; }
		
		/// <summary>
		/// Payment system.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paymentSystem")]
		public string PaymentSystem { get; set; }
		
		/// <summary>
		/// Reference value for calculating interest rates, in case it applies. Displayed in cents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="referenceValue")]
		public System.Nullable<System.Int32> ReferenceValue { get; set; }
		
		/// <summary>
		/// Value including interest, in case it applies. Displayed in cents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Int32> Value { get; set; }
	}
	
	public class AddCouponsReturnRatesAndBenefitsData
	{
		
		/// <summary>
		/// List with rates and benefits identifiers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rateAndBenefitsIdentifiers")]
		public string[] RateAndBenefitsIdentifiers { get; set; }
		
		/// <summary>
		/// List with rates and benefits teasers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="teaser")]
		public string[] Teaser { get; set; }
	}
	
	public class AddCouponsReturnSellers
	{
		
		/// <summary>
		/// Seller ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Seller logo.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logo")]
		public string Logo { get; set; }
		
		/// <summary>
		/// Seller name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	public class AddCouponsReturnShippingData
	{
		
		/// <summary>
		/// Address information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address")]
		public AddCouponsReturnShippingDataAddress Address { get; set; }
		
		/// <summary>
		/// Array with information on the available addresses for the order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availableAddresses")]
		public AddCouponsReturnShippingDataAvailableAddresses[] AddCouponsReturnShippingDataAvailableAddresses { get; set; }
		
		/// <summary>
		/// Array with logistics information. Each object in this array corresponds to an object in the `items` array, based on the respective `itemIndex`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logisticsInfo")]
		public AddCouponsReturnShippingDataLogisticsInfo[] AddCouponsReturnShippingDataLogisticsInfo { get; set; }
		
		/// <summary>
		/// Array with information on the selected addresses for the order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selectedAddresses")]
		public AddCouponsReturnShippingDataSelectedAddresses[] AddCouponsReturnShippingDataSelectedAddresses { get; set; }
	}
	
	public class AddCouponsReturnShippingDataAddress
	{
		
		/// <summary>
		/// Address ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addressId")]
		public string AddressId { get; set; }
		
		/// <summary>
		/// Type of address. For example, `Residential` or `Pickup`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addressType")]
		public string AddressType { get; set; }
		
		/// <summary>
		/// City of the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		/// <summary>
		/// Complement to the shipping address, in case it applies.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="complement")]
		public string Complement { get; set; }
		
		/// <summary>
		/// Three letter ISO code of the country of the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// Array containing two floats with geocoordinates, first longitude, then latitude.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="geoCoordinates")]
		public double[] GeoCoordinates { get; set; }
		
		/// <summary>
		/// Indicates whether address is disposable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isDisposable")]
		public System.Nullable<System.Boolean> IsDisposable { get; set; }
		
		/// <summary>
		/// Neighborhood of the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="neighborhood")]
		public string Neighborhood { get; set; }
		
		/// <summary>
		/// Number of the building, house or apartment in the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="number")]
		public string Number { get; set; }
		
		/// <summary>
		/// Postal code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postalCode")]
		public string PostalCode { get; set; }
		
		/// <summary>
		/// Name of the person who is going to receive the order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="receiverName")]
		public string ReceiverName { get; set; }
		
		/// <summary>
		/// Complement that might help locate the shipping address more precisely in case of delivery.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reference")]
		public string Reference { get; set; }
		
		/// <summary>
		/// State of the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		/// <summary>
		/// Street of the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="street")]
		public string Street { get; set; }
	}
	
	public class AddCouponsReturnShippingDataAvailableAddresses
	{
		
		/// <summary>
		/// Address ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addressId")]
		public string AddressId { get; set; }
		
		/// <summary>
		/// Type of address. For example, `Residential` or `Pickup`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addressType")]
		public string AddressType { get; set; }
		
		/// <summary>
		/// City of the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		/// <summary>
		/// Complement to the shipping address, in case it applies.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="complement")]
		public string Complement { get; set; }
		
		/// <summary>
		/// Three letter ISO code of the country of the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// Array containing two floats with geocoordinates, first longitude, then latitude.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="geoCoordinates")]
		public double[] GeoCoordinates { get; set; }
		
		/// <summary>
		/// Indicates whether address is disposable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isDisposable")]
		public System.Nullable<System.Boolean> IsDisposable { get; set; }
		
		/// <summary>
		/// Neighborhood of the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="neighborhood")]
		public string Neighborhood { get; set; }
		
		/// <summary>
		/// Number of the building, house or apartment in the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="number")]
		public string Number { get; set; }
		
		/// <summary>
		/// Postal code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postalCode")]
		public string PostalCode { get; set; }
		
		/// <summary>
		/// Name of the person who is going to receive the order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="receiverName")]
		public string ReceiverName { get; set; }
		
		/// <summary>
		/// Complement that might help locate the shipping address more precisely in case of delivery.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reference")]
		public string Reference { get; set; }
		
		/// <summary>
		/// State of the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		/// <summary>
		/// Street of the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="street")]
		public string Street { get; set; }
	}
	
	public class AddCouponsReturnShippingDataLogisticsInfo
	{
		
		/// <summary>
		/// Address ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addressId")]
		public string AddressId { get; set; }
		
		/// <summary>
		/// List of available delivery channels.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deliveryChannels")]
		public AddCouponsReturnShippingDataLogisticsInfoDeliveryChannels[] AddCouponsReturnShippingDataLogisticsInfoDeliveryChannels { get; set; }
		
		/// <summary>
		/// Item ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemId")]
		public string ItemId { get; set; }
		
		/// <summary>
		/// Index corresponding to the position of the object in the `items` array.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemIndex")]
		public System.Nullable<System.Int32> ItemIndex { get; set; }
		
		/// <summary>
		/// Delivery channel selected by the customer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selectedDeliveryChannel")]
		public string SelectedDeliveryChannel { get; set; }
		
		/// <summary>
		/// SLA selected by the customer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selectedSla")]
		public string SelectedSla { get; set; }
		
		/// <summary>
		/// List of countries that the item may be shipped to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shipsTo")]
		public string[] ShipsTo { get; set; }
		
		/// <summary>
		/// Information on available SLAs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="slas")]
		public AddCouponsReturnShippingDataLogisticsInfoSlas[] AddCouponsReturnShippingDataLogisticsInfoSlas { get; set; }
	}
	
	public class AddCouponsReturnShippingDataLogisticsInfoDeliveryChannels
	{
		
		/// <summary>
		/// Delivery channel ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	public class AddCouponsReturnShippingDataLogisticsInfoSlas
	{
		
		/// <summary>
		/// Delivery channel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deliveryChannel")]
		public string DeliveryChannel { get; set; }
		
		/// <summary>
		/// Information on each delivery ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deliveryIds")]
		public AddCouponsReturnShippingDataLogisticsInfoSlasDeliveryIds[] AddCouponsReturnShippingDataLogisticsInfoSlasDeliveryIds { get; set; }
		
		/// <summary>
		/// SLA ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// List price in cents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="listPrice")]
		public System.Nullable<System.Int32> ListPrice { get; set; }
		
		/// <summary>
		/// Estimate date of delivery.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lockTTL")]
		public string LockTTL { get; set; }
		
		/// <summary>
		/// SLA name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Pickup point distance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pickupDistance")]
		public System.Nullable<System.Int32> PickupDistance { get; set; }
		
		/// <summary>
		/// Pickup point ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pickupPointId")]
		public string PickupPointId { get; set; }
		
		/// <summary>
		/// Information on the pickup store.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pickupStoreInfo")]
		public AddCouponsReturnShippingDataLogisticsInfoSlasPickupStoreInfo PickupStoreInfo { get; set; }
		
		/// <summary>
		/// Polygon name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="polygonName")]
		public string PolygonName { get; set; }
		
		/// <summary>
		/// Price in cents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="price")]
		public System.Nullable<System.Int32> Price { get; set; }
		
		/// <summary>
		/// Shipping estimate. For instance, Three business days will be represented `3bd`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shippingEstimate")]
		public string ShippingEstimate { get; set; }
		
		/// <summary>
		/// Shipping estimate date.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shippingEstimateDate")]
		public string ShippingEstimateDate { get; set; }
		
		/// <summary>
		/// Tax in cents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tax")]
		public System.Nullable<System.Int32> Tax { get; set; }
		
		/// <summary>
		/// Transit time. For instance, "three business days" is represented `3bd`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transitTime")]
		public string TransitTime { get; set; }
	}
	
	public class AddCouponsReturnShippingDataLogisticsInfoSlasDeliveryIds
	{
		
		/// <summary>
		/// Courier ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="courierId")]
		public string CourierId { get; set; }
		
		/// <summary>
		/// Courier name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="courierName")]
		public string CourierName { get; set; }
		
		/// <summary>
		/// Warehouse ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dockId")]
		public string DockId { get; set; }
		
		/// <summary>
		/// Quantity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public System.Nullable<System.Int32> Quantity { get; set; }
		
		/// <summary>
		/// Warehouse ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="warehouseId")]
		public string WarehouseId { get; set; }
	}
	
	public class AddCouponsReturnShippingDataLogisticsInfoSlasPickupStoreInfo
	{
		
		/// <summary>
		/// Additional information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additionalInfo")]
		public string AdditionalInfo { get; set; }
		
		/// <summary>
		/// Address information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address")]
		public AddCouponsReturnShippingDataLogisticsInfoSlasPickupStoreInfoAddress Address { get; set; }
		
		/// <summary>
		/// Corresponding dock ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dockId")]
		public string DockId { get; set; }
		
		/// <summary>
		/// Friendly name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="friendlyName")]
		public string FriendlyName { get; set; }
		
		/// <summary>
		/// Indicates whether it is the pickup store.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isPickupStore")]
		public System.Nullable<System.Boolean> IsPickupStore { get; set; }
	}
	
	public class AddCouponsReturnShippingDataLogisticsInfoSlasPickupStoreInfoAddress
	{
		
		/// <summary>
		/// Type of address. For example, `Residential` or `Pickup`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addressType")]
		public string AddressType { get; set; }
		
		/// <summary>
		/// City of the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		/// <summary>
		/// Complement to the shipping address, in case it applies.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="complement")]
		public string Complement { get; set; }
		
		/// <summary>
		/// Three letter ISO code of the country of the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// Array containing two floats with geocoordinates, first longitude, then latitude.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="geoCoordinates")]
		public double[] GeoCoordinates { get; set; }
		
		/// <summary>
		/// Neighborhood of the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="neighborhood")]
		public string Neighborhood { get; set; }
		
		/// <summary>
		/// Number of the building, house or apartment in the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="number")]
		public string Number { get; set; }
		
		/// <summary>
		/// Postal code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postalCode")]
		public string PostalCode { get; set; }
		
		/// <summary>
		/// Complement that might help locate the shipping address more precisely in case of delivery.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reference")]
		public string Reference { get; set; }
		
		/// <summary>
		/// State of the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		/// <summary>
		/// Street of the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="street")]
		public string Street { get; set; }
	}
	
	public class AddCouponsReturnShippingDataSelectedAddresses
	{
		
		/// <summary>
		/// Address ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addressId")]
		public string AddressId { get; set; }
		
		/// <summary>
		/// Type of address. For example, `Residential` or `Pickup`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addressType")]
		public string AddressType { get; set; }
		
		/// <summary>
		/// City of the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		/// <summary>
		/// Complement to the shipping address, in case it applies.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="complement")]
		public string Complement { get; set; }
		
		/// <summary>
		/// Three letter ISO code of the country of the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// Array containing two floats with geocoordinates, first longitude, then latitude.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="geoCoordinates")]
		public double[] GeoCoordinates { get; set; }
		
		/// <summary>
		/// Indicates whether address is disposable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isDisposable")]
		public System.Nullable<System.Boolean> IsDisposable { get; set; }
		
		/// <summary>
		/// Neighborhood of the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="neighborhood")]
		public string Neighborhood { get; set; }
		
		/// <summary>
		/// Number of the building, house or apartment in the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="number")]
		public string Number { get; set; }
		
		/// <summary>
		/// Postal code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postalCode")]
		public string PostalCode { get; set; }
		
		/// <summary>
		/// Name of the person who is going to receive the order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="receiverName")]
		public string ReceiverName { get; set; }
		
		/// <summary>
		/// Complement that might help locate the shipping address more precisely in case of delivery.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reference")]
		public string Reference { get; set; }
		
		/// <summary>
		/// State of the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		/// <summary>
		/// Street of the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="street")]
		public string Street { get; set; }
	}
	
	public class ItemsPostBody
	{
		
		/// <summary>
		/// Array containing the cart items. Each object inside this array corresponds to a different item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orderItems")]
		public ItemsPostBodyOrderItems[] ItemsPostBodyOrderItems { get; set; }
	}
	
	public class ItemsPostBodyOrderItems
	{
		
		/// <summary>
		/// The ID of the SKU in VTEX platform.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The position of the item in the array.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="index")]
		public int Index { get; set; }
		
		/// <summary>
		/// Price of the item in cents. Send this value in case you want to make a bulk price change.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="price")]
		public System.Nullable<System.Int32> Price { get; set; }
		
		/// <summary>
		/// The quantity of the item (SKU) in the cart.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public int Quantity { get; set; }
		
		/// <summary>
		/// The seller responsible for the SKU.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="seller")]
		public string Seller { get; set; }
	}
	
	public class ItemsReturn
	{
		
		/// <summary>
		/// Permission to modify item price manually.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowManualPrice")]
		public System.Nullable<System.Boolean> AllowManualPrice { get; set; }
		
		/// <summary>
		/// Available accounts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availableAccounts")]
		public string[] AvailableAccounts { get; set; }
		
		/// <summary>
		/// Information on each available address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availableAddresses")]
		public ItemsReturnAvailableAddresses[] ItemsReturnAvailableAddresses { get; set; }
		
		/// <summary>
		/// Data can be edited.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canEditData")]
		public System.Nullable<System.Boolean> CanEditData { get; set; }
		
		/// <summary>
		/// Object containing preferences from the client who placed the order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientPreferencesData")]
		public ItemsReturnClientPreferencesData ClientPreferencesData { get; set; }
		
		/// <summary>
		/// Customer's profile information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientProfileData")]
		public ItemsReturnClientProfileData ClientProfileData { get; set; }
		
		/// <summary>
		/// Object containing commercial condition information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="commercialConditionData")]
		public string CommercialConditionData { get; set; }
		
		/// <summary>
		/// Customer additional information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customData")]
		public string CustomData { get; set; }
		
		/// <summary>
		/// Gift registry list information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="giftRegistryData")]
		public string GiftRegistryData { get; set; }
		
		/// <summary>
		/// Hooks information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hooksData")]
		public string HooksData { get; set; }
		
		/// <summary>
		/// Ignore customer profile data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ignoreProfileData")]
		public System.Nullable<System.Boolean> IgnoreProfileData { get; set; }
		
		/// <summary>
		/// Object containing information pertinent to the order's invoice.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="invoiceData")]
		public string InvoiceData { get; set; }
		
		/// <summary>
		/// Indicates whether order is checked in.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isCheckedIn")]
		public System.Nullable<System.Boolean> IsCheckedIn { get; set; }
		
		/// <summary>
		/// Item metadata.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemMetadata")]
		public ItemsReturnItemMetadata ItemMetadata { get; set; }
		
		/// <summary>
		/// Information on each item in the order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public ItemsReturnItems[] ItemsReturnItems { get; set; }
		
		/// <summary>
		/// Object containing information about the ordering of items within the orderForm.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemsOrdination")]
		public ItemsReturnItemsOrdination ItemsOrdination { get; set; }
		
		/// <summary>
		/// Indicates whether the user is logged into the store.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="loggedIn")]
		public System.Nullable<System.Boolean> LoggedIn { get; set; }
		
		/// <summary>
		/// Object containing promotion data such as coupon tracking information and internal or external UTMs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="marketingData")]
		public ItemsReturnMarketingData MarketingData { get; set; }
		
		/// <summary>
		/// Array containing an object for each message generated by our servers while processing the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="messages")]
		public string[] Messages { get; set; }
		
		/// <summary>
		/// Optional field meant to hold additional information about the order. We recommend using this field for text, not data formats such as `JSON` even if escaped. For that purpose, see [Creating customizable fields](https://developers.vtex.com/vtex-rest-api/docs/creating-customizable-fields-in-the-cart-with-checkout-api-1).
		/// </summary>
		[System.ComponentModel.DefaultValue("open-text-example")]
		[System.Runtime.Serialization.DataMember(Name="openTextField")]
		public string OpenTextField { get; set; } = "open-text-example";
		
		/// <summary>
		/// ID of the orderForm corresponding to a specific cart.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orderFormId")]
		public string OrderFormId { get; set; }
		
		/// <summary>
		/// Information on the order's payment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paymentData")]
		public ItemsReturnPaymentData PaymentData { get; set; }
		
		/// <summary>
		/// Profile provider.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="profileProvider")]
		public string ProfileProvider { get; set; }
		
		/// <summary>
		/// Information on rates and benefits that apply to the order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ratesAndBenefitsData")]
		public ItemsReturnRatesAndBenefitsData RatesAndBenefitsData { get; set; }
		
		/// <summary>
		/// Attribute created by the seller, in their VTEX store configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="salesChannel")]
		public string SalesChannel { get; set; }
		
		/// <summary>
		/// Array containing the data of the item selected as a gift.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selectableGifts")]
		public string[] SelectableGifts { get; set; }
		
		/// <summary>
		/// Information on each seller.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sellers")]
		public ItemsReturnSellers[] ItemsReturnSellers { get; set; }
		
		/// <summary>
		/// Shipping information pertinent to the order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shippingData")]
		public ItemsReturnShippingData ShippingData { get; set; }
		
		/// <summary>
		/// ID of the store.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storeId")]
		public string StoreId { get; set; }
		
		/// <summary>
		/// Object containing data from the store's configuration (stored in VTEX's License Manager).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storePreferencesData")]
		public string StorePreferencesData { get; set; }
		
		/// <summary>
		/// Subscription information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subscriptionData")]
		public string SubscriptionData { get; set; }
		
		/// <summary>
		/// Array containing an object for each totalizer for the purchase. Totalizers contain the sum of values for a specific part of the order (e.g. Total item value, Total shipping value).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalizers")]
		public string[] Totalizers { get; set; }
		
		/// <summary>
		/// Unique ID associated with the customer profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userProfileId")]
		public string UserProfileId { get; set; }
		
		/// <summary>
		/// User type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userType")]
		public string UserType { get; set; }
		
		/// <summary>
		/// Total value of the order without separating cents. For example, $24.99 is represented `2499`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Int32> Value { get; set; }
	}
	
	public class ItemsReturnAvailableAddresses
	{
		
		/// <summary>
		/// Address ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addressId")]
		public string AddressId { get; set; }
		
		/// <summary>
		/// Address type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addressType")]
		public string AddressType { get; set; }
		
		/// <summary>
		/// City of the address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		/// <summary>
		/// Complement to the address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="complement")]
		public string Complement { get; set; }
		
		/// <summary>
		/// Country of the address. ISO three-letter code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// Array containing two floats with geocoordinates, first longitude, then latitude.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="geoCoordinates")]
		public double[] GeoCoordinates { get; set; }
		
		/// <summary>
		/// Indicates whether address is disposable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isDisposable")]
		public System.Nullable<System.Boolean> IsDisposable { get; set; }
		
		/// <summary>
		/// Neighborhood of the address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="neighborhood")]
		public string Neighborhood { get; set; }
		
		/// <summary>
		/// Number of the address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="number")]
		public string Number { get; set; }
		
		/// <summary>
		/// Name of the receiver.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="receiverName")]
		public string ReceiverName { get; set; }
		
		/// <summary>
		/// Reference that may help in the location of the address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reference")]
		public string Reference { get; set; }
		
		/// <summary>
		/// State of the address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		/// <summary>
		/// Street of the address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="street")]
		public string Street { get; set; }
	}
	
	public class ItemsReturnClientPreferencesData
	{
		
		/// <summary>
		/// Client's locale. Examples: `pt-BR` and `en-US`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locale")]
		public string Locale { get; set; }
		
		/// <summary>
		/// `true` if the client opted to receive newsletter from the store.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="optinNewsLetter")]
		public System.Nullable<System.Boolean> OptinNewsLetter { get; set; }
	}
	
	public class ItemsReturnClientProfileData
	{
		
		/// <summary>
		/// Corporate document, if the customer is a legal entity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="corporateDocument")]
		public string CorporateDocument { get; set; }
		
		/// <summary>
		/// Company name, if the customer is a legal entity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="corporateName")]
		public string CorporateName { get; set; }
		
		/// <summary>
		/// Corporate phone number, if the customer is a legal entity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="corporatePhone")]
		public string CorporatePhone { get; set; }
		
		/// <summary>
		/// Customer class.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customerClass")]
		public string CustomerClass { get; set; }
		
		/// <summary>
		/// Document informed by the customer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="document")]
		public string Document { get; set; }
		
		/// <summary>
		/// Type of the document informed by the customer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="documentType")]
		public string DocumentType { get; set; }
		
		/// <summary>
		/// Email address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// First name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firstName")]
		public string FirstName { get; set; }
		
		/// <summary>
		/// Indicates whether the customer is a legal entity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isCorporate")]
		public System.Nullable<System.Boolean> IsCorporate { get; set; }
		
		/// <summary>
		/// Last name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastName")]
		public string LastName { get; set; }
		
		/// <summary>
		/// Phone number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phone")]
		public string Phone { get; set; }
		
		/// <summary>
		/// Indicates whether profile is complete on loading.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="profileCompleteOnLoading")]
		public System.Nullable<System.Boolean> ProfileCompleteOnLoading { get; set; }
		
		/// <summary>
		/// Indicates whether profile presents error on loading.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="profileErrorOnLoading")]
		public System.Nullable<System.Boolean> ProfileErrorOnLoading { get; set; }
		
		/// <summary>
		/// State inscription, if the customer is a legal entity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stateInscription")]
		public string StateInscription { get; set; }
		
		/// <summary>
		/// Trade name, if the customer is a legal entity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tradeName")]
		public string TradeName { get; set; }
	}
	
	public class ItemsReturnItemMetadata
	{
		
		/// <summary>
		/// List of objects containing metadata on each item in the order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public ItemsReturnItemMetadataItems[] ItemsReturnItemMetadataItems { get; set; }
	}
	
	public class ItemsReturnItemMetadataItems
	{
		
		/// <summary>
		/// Detail URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="detailUrl")]
		public string DetailUrl { get; set; }
		
		/// <summary>
		/// European Article Number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ean")]
		public string Ean { get; set; }
		
		/// <summary>
		/// Item ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Image URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageUrl")]
		public string ImageUrl { get; set; }
		
		/// <summary>
		/// Product name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Product ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productId")]
		public string ProductId { get; set; }
		
		/// <summary>
		/// Ref ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refId")]
		public string RefId { get; set; }
		
		/// <summary>
		/// Seller.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="seller")]
		public string Seller { get; set; }
		
		/// <summary>
		/// SKU name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="skuName")]
		public string SkuName { get; set; }
	}
	
	public class ItemsReturnItems
	{
		
		/// <summary>
		/// Additional information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additionalInfo")]
		public ItemsReturnItemsAdditionalInfo AdditionalInfo { get; set; }
		
		/// <summary>
		/// Array containing information on attachments.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attachments")]
		public string[] Attachments { get; set; }
		
		/// <summary>
		/// Availability.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availability")]
		public string Availability { get; set; }
		
		/// <summary>
		/// Information on services sold along with the SKU. Example: a gift package.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bundleItems")]
		public ItemsReturnItemsBundleItems[] ItemsReturnItemsBundleItems { get; set; }
		
		/// <summary>
		/// Detail URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="detailUrl")]
		public string DetailUrl { get; set; }
		
		/// <summary>
		/// European Article Number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ean")]
		public string Ean { get; set; }
		
		/// <summary>
		/// ID of the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Image URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageUrl")]
		public string ImageUrl { get; set; }
		
		/// <summary>
		/// Indicates whether item is a gift.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isGift")]
		public System.Nullable<System.Boolean> IsGift { get; set; }
		
		/// <summary>
		/// List price in cents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="listPrice")]
		public System.Nullable<System.Int32> ListPrice { get; set; }
		
		/// <summary>
		/// Manual price in cents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="manualPrice")]
		public System.Nullable<System.Int32> ManualPrice { get; set; }
		
		/// <summary>
		/// User that applied the manual price, if that is the case.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="manualPriceAppliedBy")]
		public string ManualPriceAppliedBy { get; set; }
		
		/// <summary>
		/// Manufacturer code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="manufacturerCode")]
		public string ManufacturerCode { get; set; }
		
		/// <summary>
		/// Measurement unit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="measurementUnit")]
		public string MeasurementUnit { get; set; }
		
		/// <summary>
		/// Modal type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modalType")]
		public string ModalType { get; set; }
		
		/// <summary>
		/// Product name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Parent assembly binding.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parentAssemblyBinding")]
		public string ParentAssemblyBinding { get; set; }
		
		/// <summary>
		/// Parent item index.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parentItemIndex")]
		public System.Nullable<System.Int32> ParentItemIndex { get; set; }
		
		/// <summary>
		/// Presale date.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="preSaleDate")]
		public string PreSaleDate { get; set; }
		
		/// <summary>
		/// Price in cents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="price")]
		public System.Nullable<System.Int32> Price { get; set; }
		
		/// <summary>
		/// Price information for all units of a specific item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priceDefinition")]
		public ItemsReturnItemsPriceDefinition PriceDefinition { get; set; }
		
		/// <summary>
		/// Array of price tags, each of which, modifies the price in some way, like discounts or rates that apply to the item in the context of the order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priceTags")]
		public ItemsReturnItemsPriceTags[] ItemsReturnItemsPriceTags { get; set; }
		
		/// <summary>
		/// Price expiration date and time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priceValidUntil")]
		public string PriceValidUntil { get; set; }
		
		/// <summary>
		/// Object, where each field is an ID from `productCategoryIds`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productCategories")]
		public ItemsReturnItemsProductCategories ProductCategories { get; set; }
		
		/// <summary>
		/// Product category IDs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productCategoryIds")]
		public string ProductCategoryIds { get; set; }
		
		/// <summary>
		/// Product ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productId")]
		public string ProductId { get; set; }
		
		/// <summary>
		/// Product Ref ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productRefId")]
		public string ProductRefId { get; set; }
		
		/// <summary>
		/// Quantity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public System.Nullable<System.Int32> Quantity { get; set; }
		
		/// <summary>
		/// Ref ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refId")]
		public string RefId { get; set; }
		
		/// <summary>
		/// Reward value in cents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rewardValue")]
		public System.Nullable<System.Int32> RewardValue { get; set; }
		
		/// <summary>
		/// Seller.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="seller")]
		public string Seller { get; set; }
		
		/// <summary>
		/// Sellers involved in the chain. The list should contain only one seller, unless it is a [Multilevel Omnichannel Inventory](https://help.vtex.com/en/tutorial/multilevel-omnichannel-inventory--7M1xyCZWUyCB7PcjNtOyw4) order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sellerChain")]
		public string[] SellerChain { get; set; }
		
		/// <summary>
		/// Selling price in cents. Note that this field may be subject to rounding discrepancies. We recommend retrieving data from the `priceDefinition` data structure instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sellingPrice")]
		public System.Nullable<System.Int32> SellingPrice { get; set; }
		
		/// <summary>
		/// SKU name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="skuName")]
		public string SkuName { get; set; }
		
		/// <summary>
		/// Tax value in cents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tax")]
		public System.Nullable<System.Int32> Tax { get; set; }
		
		/// <summary>
		/// Unique ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uniqueId")]
		public string UniqueId { get; set; }
		
		/// <summary>
		/// Unit multiplier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unitMultiplier")]
		public System.Nullable<System.Int32> UnitMultiplier { get; set; }
	}
	
	public class ItemsReturnItemsAdditionalInfo
	{
		
		/// <summary>
		/// Brand ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="brandId")]
		public string BrandId { get; set; }
		
		/// <summary>
		/// Brand name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="brandName")]
		public string BrandName { get; set; }
		
		/// <summary>
		/// Dimension.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimension")]
		public string Dimension { get; set; }
		
		/// <summary>
		/// Offering information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offeringInfo")]
		public string OfferingInfo { get; set; }
		
		/// <summary>
		/// Offering type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offeringType")]
		public string OfferingType { get; set; }
		
		/// <summary>
		/// Offering type ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offeringTypeId")]
		public string OfferingTypeId { get; set; }
	}
	
	public class ItemsReturnItemsBundleItems
	{
		
		/// <summary>
		/// Service identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Service name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Service price in cents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="price")]
		public System.Nullable<System.Int32> Price { get; set; }
		
		/// <summary>
		/// Service type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class ItemsReturnItemsPriceDefinition
	{
		
		/// <summary>
		/// Item's calculated unitary selling price in cents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="calculatedSellingPrice")]
		public System.Nullable<System.Int32> CalculatedSellingPrice { get; set; }
		
		/// <summary>
		/// Array of objects, each containing value (in cents) and quantity for the different rounding instances that can be combined to form the correctly rounded total.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sellingPrices")]
		public ItemsReturnItemsPriceDefinitionSellingPrices[] ItemsReturnItemsPriceDefinitionSellingPrices { get; set; }
		
		/// <summary>
		/// Total value for all units of the item in cents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Int32> Total { get; set; }
	}
	
	public class ItemsReturnItemsPriceDefinitionSellingPrices
	{
		
		/// <summary>
		/// Rounding quantity, meaning how many items are rounded to this value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public System.Nullable<System.Int32> Quantity { get; set; }
		
		/// <summary>
		/// Value in cents for that specific rounding.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Int32> Value { get; set; }
	}
	
	public class ItemsReturnItemsPriceTags
	{
		
		/// <summary>
		/// Price tag identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="identifier")]
		public string Identifier { get; set; }
		
		/// <summary>
		/// Indicates whether price tag value is applied through a percentage.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isPercentual")]
		public System.Nullable<System.Boolean> IsPercentual { get; set; }
		
		/// <summary>
		/// Price tag name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Price tag raw value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rawValue")]
		public System.Nullable<System.Int32> RawValue { get; set; }
		
		/// <summary>
		/// Price tag value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Int32> Value { get; set; }
	}
	
	public class ItemsReturnItemsProductCategories
	{
		
		/// <summary>
		/// Product category corresponding to the ID in the field key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="{ID}")]
		public string ID { get; set; }
	}
	
	public class ItemsReturnItemsOrdination
	{
		
		/// <summary>
		/// Indicates whether the ordering is ascending.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ascending")]
		public System.Nullable<System.Boolean> Ascending { get; set; }
		
		/// <summary>
		/// Criteria adopted to order the items in the list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="criteria")]
		public string Criteria { get; set; }
	}
	
	public class ItemsReturnMarketingData
	{
		
		/// <summary>
		/// Sending an existing coupon code in this field will return the corresponding discount in the purchase. Use the [cart simulation](https://developers.vtex.com/vtex-rest-api/reference/orderform#orderformsimulation) request to check which coupons might apply before placing the order.
		/// </summary>
		[System.ComponentModel.DefaultValue("free-shipping")]
		[System.Runtime.Serialization.DataMember(Name="coupon")]
		public string Coupon { get; set; } = "free-shipping";
		
		/// <summary>
		/// UTM campaign
		/// </summary>
		[System.ComponentModel.DefaultValue("Black friday")]
		[System.Runtime.Serialization.DataMember(Name="utmCampaign")]
		public string UtmCampaign { get; set; } = "Black friday";
		
		/// <summary>
		/// UTM medium.
		/// </summary>
		[System.ComponentModel.DefaultValue("CPC")]
		[System.Runtime.Serialization.DataMember(Name="utmMedium")]
		public string UtmMedium { get; set; } = "CPC";
		
		/// <summary>
		/// UTM source.
		/// </summary>
		[System.ComponentModel.DefaultValue("Facebook")]
		[System.Runtime.Serialization.DataMember(Name="utmSource")]
		public string UtmSource { get; set; } = "Facebook";
		
		/// <summary>
		/// utmi_campaign (internal utm).
		/// </summary>
		[System.ComponentModel.DefaultValue("utmi_campaign-example")]
		[System.Runtime.Serialization.DataMember(Name="utmiCampaign")]
		public string UtmiCampaign { get; set; } = "utmi_campaign-example";
		
		/// <summary>
		/// utmi_page (internal utm).
		/// </summary>
		[System.ComponentModel.DefaultValue("utmi_page-example")]
		[System.Runtime.Serialization.DataMember(Name="utmiPage")]
		public string UtmiPage { get; set; } = "utmi_page-example";
		
		/// <summary>
		/// utmi_part (internal utm).
		/// </summary>
		[System.ComponentModel.DefaultValue("utmi_part-example")]
		[System.Runtime.Serialization.DataMember(Name="utmiPart")]
		public string UtmiPart { get; set; } = "utmi_part-example";
	}
	
	public class ItemsReturnPaymentData
	{
		
		/// <summary>
		/// Gift card information, if it applies to the order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="giftCards")]
		public ItemsReturnPaymentDataGiftCards[] ItemsReturnPaymentDataGiftCards { get; set; }
		
		/// <summary>
		/// Information on each transaction pertinent to the order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transactions")]
		public ItemsReturnPaymentDataTransactions[] ItemsReturnPaymentDataTransactions { get; set; }
	}
	
	public class ItemsReturnPaymentDataGiftCards
	{
		
		/// <summary>
		/// Gift card balance in cents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="balance")]
		public System.Nullable<System.Int32> Balance { get; set; }
		
		/// <summary>
		/// Gift card ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Indicates whether gift card is in use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inUse")]
		public System.Nullable<System.Boolean> InUse { get; set; }
		
		/// <summary>
		/// Indicates whether gift card is special.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isSpecialCard")]
		public System.Nullable<System.Boolean> IsSpecialCard { get; set; }
		
		/// <summary>
		/// Gift card name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Gift card redemption code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="redemptionCode")]
		public string RedemptionCode { get; set; }
		
		/// <summary>
		/// Gift card value in cents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Int32> Value { get; set; }
	}
	
	public class ItemsReturnPaymentDataTransactions
	{
		
		/// <summary>
		/// Indicates whether transaction is active.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public System.Nullable<System.Boolean> IsActive { get; set; }
		
		/// <summary>
		/// Merchant name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="merchantName")]
		public string MerchantName { get; set; }
		
		/// <summary>
		/// Information on each payment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payments")]
		public ItemsReturnPaymentDataTransactionsPayments[] ItemsReturnPaymentDataTransactionsPayments { get; set; }
		
		/// <summary>
		/// Indicates whather transaction is shared.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sharedTransaction")]
		public System.Nullable<System.Boolean> SharedTransaction { get; set; }
		
		/// <summary>
		/// Transaction ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transactionId")]
		public string TransactionId { get; set; }
	}
	
	public class ItemsReturnPaymentDataTransactionsPayments
	{
		
		/// <summary>
		/// Account ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
		
		/// <summary>
		/// Bin.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bin")]
		public string Bin { get; set; }
		
		/// <summary>
		/// Number of installments.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="installments")]
		public System.Nullable<System.Int32> Installments { get; set; }
		
		/// <summary>
		/// Payment system.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paymentSystem")]
		public string PaymentSystem { get; set; }
		
		/// <summary>
		/// Reference value for calculating interest rates, in case it applies. Displayed in cents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="referenceValue")]
		public System.Nullable<System.Int32> ReferenceValue { get; set; }
		
		/// <summary>
		/// Value including interest, in case it applies. Displayed in cents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Int32> Value { get; set; }
	}
	
	public class ItemsReturnRatesAndBenefitsData
	{
		
		/// <summary>
		/// List with rates and benefits identifiers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rateAndBenefitsIdentifiers")]
		public string[] RateAndBenefitsIdentifiers { get; set; }
		
		/// <summary>
		/// List with rates and benefits teasers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="teaser")]
		public string[] Teaser { get; set; }
	}
	
	public class ItemsReturnSellers
	{
		
		/// <summary>
		/// Seller ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Seller logo.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logo")]
		public string Logo { get; set; }
		
		/// <summary>
		/// Seller name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	public class ItemsReturnShippingData
	{
		
		/// <summary>
		/// Address information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address")]
		public ItemsReturnShippingDataAddress Address { get; set; }
		
		/// <summary>
		/// Array with information on the available addresses for the order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availableAddresses")]
		public ItemsReturnShippingDataAvailableAddresses[] ItemsReturnShippingDataAvailableAddresses { get; set; }
		
		/// <summary>
		/// Array with logistics information. Each object in this array corresponds to an object in the `items` array, based on the respective `itemIndex`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logisticsInfo")]
		public ItemsReturnShippingDataLogisticsInfo[] ItemsReturnShippingDataLogisticsInfo { get; set; }
		
		/// <summary>
		/// Array with information on the selected addresses for the order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selectedAddresses")]
		public ItemsReturnShippingDataSelectedAddresses[] ItemsReturnShippingDataSelectedAddresses { get; set; }
	}
	
	public class ItemsReturnShippingDataAddress
	{
		
		/// <summary>
		/// Address ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addressId")]
		public string AddressId { get; set; }
		
		/// <summary>
		/// Type of address. For example, `Residential` or `Pickup`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addressType")]
		public string AddressType { get; set; }
		
		/// <summary>
		/// City of the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		/// <summary>
		/// Complement to the shipping address, in case it applies.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="complement")]
		public string Complement { get; set; }
		
		/// <summary>
		/// Three letter ISO code of the country of the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// Array containing two floats with geocoordinates, first longitude, then latitude.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="geoCoordinates")]
		public double[] GeoCoordinates { get; set; }
		
		/// <summary>
		/// Indicates whether address is disposable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isDisposable")]
		public System.Nullable<System.Boolean> IsDisposable { get; set; }
		
		/// <summary>
		/// Neighborhood of the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="neighborhood")]
		public string Neighborhood { get; set; }
		
		/// <summary>
		/// Number of the building, house or apartment in the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="number")]
		public string Number { get; set; }
		
		/// <summary>
		/// Postal code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postalCode")]
		public string PostalCode { get; set; }
		
		/// <summary>
		/// Name of the person who is going to receive the order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="receiverName")]
		public string ReceiverName { get; set; }
		
		/// <summary>
		/// Complement that might help locate the shipping address more precisely in case of delivery.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reference")]
		public string Reference { get; set; }
		
		/// <summary>
		/// State of the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		/// <summary>
		/// Street of the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="street")]
		public string Street { get; set; }
	}
	
	public class ItemsReturnShippingDataAvailableAddresses
	{
		
		/// <summary>
		/// Address ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addressId")]
		public string AddressId { get; set; }
		
		/// <summary>
		/// Type of address. For example, `Residential` or `Pickup`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addressType")]
		public string AddressType { get; set; }
		
		/// <summary>
		/// City of the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		/// <summary>
		/// Complement to the shipping address, in case it applies.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="complement")]
		public string Complement { get; set; }
		
		/// <summary>
		/// Three letter ISO code of the country of the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// Array containing two floats with geocoordinates, first longitude, then latitude.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="geoCoordinates")]
		public double[] GeoCoordinates { get; set; }
		
		/// <summary>
		/// Indicates whether address is disposable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isDisposable")]
		public System.Nullable<System.Boolean> IsDisposable { get; set; }
		
		/// <summary>
		/// Neighborhood of the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="neighborhood")]
		public string Neighborhood { get; set; }
		
		/// <summary>
		/// Number of the building, house or apartment in the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="number")]
		public string Number { get; set; }
		
		/// <summary>
		/// Postal code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postalCode")]
		public string PostalCode { get; set; }
		
		/// <summary>
		/// Name of the person who is going to receive the order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="receiverName")]
		public string ReceiverName { get; set; }
		
		/// <summary>
		/// Complement that might help locate the shipping address more precisely in case of delivery.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reference")]
		public string Reference { get; set; }
		
		/// <summary>
		/// State of the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		/// <summary>
		/// Street of the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="street")]
		public string Street { get; set; }
	}
	
	public class ItemsReturnShippingDataLogisticsInfo
	{
		
		/// <summary>
		/// Address ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addressId")]
		public string AddressId { get; set; }
		
		/// <summary>
		/// List of available delivery channels.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deliveryChannels")]
		public ItemsReturnShippingDataLogisticsInfoDeliveryChannels[] ItemsReturnShippingDataLogisticsInfoDeliveryChannels { get; set; }
		
		/// <summary>
		/// Item ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemId")]
		public string ItemId { get; set; }
		
		/// <summary>
		/// Index corresponding to the position of the object in the `items` array.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemIndex")]
		public System.Nullable<System.Int32> ItemIndex { get; set; }
		
		/// <summary>
		/// Delivery channel selected by the customer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selectedDeliveryChannel")]
		public string SelectedDeliveryChannel { get; set; }
		
		/// <summary>
		/// SLA selected by the customer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selectedSla")]
		public string SelectedSla { get; set; }
		
		/// <summary>
		/// List of countries that the item may be shipped to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shipsTo")]
		public string[] ShipsTo { get; set; }
		
		/// <summary>
		/// Information on available SLAs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="slas")]
		public ItemsReturnShippingDataLogisticsInfoSlas[] ItemsReturnShippingDataLogisticsInfoSlas { get; set; }
	}
	
	public class ItemsReturnShippingDataLogisticsInfoDeliveryChannels
	{
		
		/// <summary>
		/// Delivery channel ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	public class ItemsReturnShippingDataLogisticsInfoSlas
	{
		
		/// <summary>
		/// Delivery channel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deliveryChannel")]
		public string DeliveryChannel { get; set; }
		
		/// <summary>
		/// Information on each delivery ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deliveryIds")]
		public ItemsReturnShippingDataLogisticsInfoSlasDeliveryIds[] ItemsReturnShippingDataLogisticsInfoSlasDeliveryIds { get; set; }
		
		/// <summary>
		/// SLA ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// List price in cents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="listPrice")]
		public System.Nullable<System.Int32> ListPrice { get; set; }
		
		/// <summary>
		/// Estimate date of delivery.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lockTTL")]
		public string LockTTL { get; set; }
		
		/// <summary>
		/// SLA name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Pickup point distance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pickupDistance")]
		public System.Nullable<System.Int32> PickupDistance { get; set; }
		
		/// <summary>
		/// Pickup point ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pickupPointId")]
		public string PickupPointId { get; set; }
		
		/// <summary>
		/// Information on the pickup store.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pickupStoreInfo")]
		public ItemsReturnShippingDataLogisticsInfoSlasPickupStoreInfo PickupStoreInfo { get; set; }
		
		/// <summary>
		/// Polygon name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="polygonName")]
		public string PolygonName { get; set; }
		
		/// <summary>
		/// Price in cents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="price")]
		public System.Nullable<System.Int32> Price { get; set; }
		
		/// <summary>
		/// Shipping estimate. For instance, Three business days will be represented `3bd`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shippingEstimate")]
		public string ShippingEstimate { get; set; }
		
		/// <summary>
		/// Shipping estimate date.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shippingEstimateDate")]
		public string ShippingEstimateDate { get; set; }
		
		/// <summary>
		/// Tax in cents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tax")]
		public System.Nullable<System.Int32> Tax { get; set; }
		
		/// <summary>
		/// Transit time. For instance, "three business days" is represented `3bd`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transitTime")]
		public string TransitTime { get; set; }
	}
	
	public class ItemsReturnShippingDataLogisticsInfoSlasDeliveryIds
	{
		
		/// <summary>
		/// Courier ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="courierId")]
		public string CourierId { get; set; }
		
		/// <summary>
		/// Courier name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="courierName")]
		public string CourierName { get; set; }
		
		/// <summary>
		/// Warehouse ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dockId")]
		public string DockId { get; set; }
		
		/// <summary>
		/// Quantity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public System.Nullable<System.Int32> Quantity { get; set; }
		
		/// <summary>
		/// Warehouse ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="warehouseId")]
		public string WarehouseId { get; set; }
	}
	
	public class ItemsReturnShippingDataLogisticsInfoSlasPickupStoreInfo
	{
		
		/// <summary>
		/// Additional information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additionalInfo")]
		public string AdditionalInfo { get; set; }
		
		/// <summary>
		/// Address information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address")]
		public ItemsReturnShippingDataLogisticsInfoSlasPickupStoreInfoAddress Address { get; set; }
		
		/// <summary>
		/// Corresponding dock ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dockId")]
		public string DockId { get; set; }
		
		/// <summary>
		/// Friendly name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="friendlyName")]
		public string FriendlyName { get; set; }
		
		/// <summary>
		/// Indicates whether it is the pickup store.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isPickupStore")]
		public System.Nullable<System.Boolean> IsPickupStore { get; set; }
	}
	
	public class ItemsReturnShippingDataLogisticsInfoSlasPickupStoreInfoAddress
	{
		
		/// <summary>
		/// Type of address. For example, `Residential` or `Pickup`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addressType")]
		public string AddressType { get; set; }
		
		/// <summary>
		/// City of the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		/// <summary>
		/// Complement to the shipping address, in case it applies.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="complement")]
		public string Complement { get; set; }
		
		/// <summary>
		/// Three letter ISO code of the country of the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// Array containing two floats with geocoordinates, first longitude, then latitude.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="geoCoordinates")]
		public double[] GeoCoordinates { get; set; }
		
		/// <summary>
		/// Neighborhood of the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="neighborhood")]
		public string Neighborhood { get; set; }
		
		/// <summary>
		/// Number of the building, house or apartment in the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="number")]
		public string Number { get; set; }
		
		/// <summary>
		/// Postal code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postalCode")]
		public string PostalCode { get; set; }
		
		/// <summary>
		/// Complement that might help locate the shipping address more precisely in case of delivery.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reference")]
		public string Reference { get; set; }
		
		/// <summary>
		/// State of the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		/// <summary>
		/// Street of the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="street")]
		public string Street { get; set; }
	}
	
	public class ItemsReturnShippingDataSelectedAddresses
	{
		
		/// <summary>
		/// Address ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addressId")]
		public string AddressId { get; set; }
		
		/// <summary>
		/// Type of address. For example, `Residential` or `Pickup`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addressType")]
		public string AddressType { get; set; }
		
		/// <summary>
		/// City of the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		/// <summary>
		/// Complement to the shipping address, in case it applies.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="complement")]
		public string Complement { get; set; }
		
		/// <summary>
		/// Three letter ISO code of the country of the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// Array containing two floats with geocoordinates, first longitude, then latitude.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="geoCoordinates")]
		public double[] GeoCoordinates { get; set; }
		
		/// <summary>
		/// Indicates whether address is disposable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isDisposable")]
		public System.Nullable<System.Boolean> IsDisposable { get; set; }
		
		/// <summary>
		/// Neighborhood of the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="neighborhood")]
		public string Neighborhood { get; set; }
		
		/// <summary>
		/// Number of the building, house or apartment in the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="number")]
		public string Number { get; set; }
		
		/// <summary>
		/// Postal code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postalCode")]
		public string PostalCode { get; set; }
		
		/// <summary>
		/// Name of the person who is going to receive the order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="receiverName")]
		public string ReceiverName { get; set; }
		
		/// <summary>
		/// Complement that might help locate the shipping address more precisely in case of delivery.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reference")]
		public string Reference { get; set; }
		
		/// <summary>
		/// State of the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		/// <summary>
		/// Street of the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="street")]
		public string Street { get; set; }
	}
	
	public class ItemsUpdatePostBody
	{
		
		/// <summary>
		/// Array containing the cart items. Each object inside this array corresponds to a different item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orderItems")]
		public ItemsUpdatePostBodyOrderItems[] ItemsUpdatePostBodyOrderItems { get; set; }
	}
	
	public class ItemsUpdatePostBodyOrderItems
	{
		
		/// <summary>
		/// The position of the item in the array.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="index")]
		public int Index { get; set; }
		
		/// <summary>
		/// The quantity of the item in the cart.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public int Quantity { get; set; }
	}
	
	public class ItemsUpdateReturn
	{
		
		/// <summary>
		/// Permission to modify item price manually.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowManualPrice")]
		public System.Nullable<System.Boolean> AllowManualPrice { get; set; }
		
		/// <summary>
		/// Available accounts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availableAccounts")]
		public string[] AvailableAccounts { get; set; }
		
		/// <summary>
		/// Information on each available address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availableAddresses")]
		public ItemsUpdateReturnAvailableAddresses[] ItemsUpdateReturnAvailableAddresses { get; set; }
		
		/// <summary>
		/// Data can be edited.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canEditData")]
		public System.Nullable<System.Boolean> CanEditData { get; set; }
		
		/// <summary>
		/// Object containing preferences from the client who placed the order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientPreferencesData")]
		public ItemsUpdateReturnClientPreferencesData ClientPreferencesData { get; set; }
		
		/// <summary>
		/// Customer's profile information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientProfileData")]
		public ItemsUpdateReturnClientProfileData ClientProfileData { get; set; }
		
		/// <summary>
		/// Object containing commercial condition information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="commercialConditionData")]
		public string CommercialConditionData { get; set; }
		
		/// <summary>
		/// Customer additional information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customData")]
		public string CustomData { get; set; }
		
		/// <summary>
		/// Gift registry list information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="giftRegistryData")]
		public string GiftRegistryData { get; set; }
		
		/// <summary>
		/// Hooks information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hooksData")]
		public string HooksData { get; set; }
		
		/// <summary>
		/// Ignore customer profile data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ignoreProfileData")]
		public System.Nullable<System.Boolean> IgnoreProfileData { get; set; }
		
		/// <summary>
		/// Object containing information pertinent to the order's invoice.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="invoiceData")]
		public string InvoiceData { get; set; }
		
		/// <summary>
		/// Indicates whether order is checked in.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isCheckedIn")]
		public System.Nullable<System.Boolean> IsCheckedIn { get; set; }
		
		/// <summary>
		/// Item metadata.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemMetadata")]
		public ItemsUpdateReturnItemMetadata ItemMetadata { get; set; }
		
		/// <summary>
		/// Information on each item in the order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public ItemsUpdateReturnItems[] ItemsUpdateReturnItems { get; set; }
		
		/// <summary>
		/// Object containing information about the ordering of items within the `orderForm`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemsOrdination")]
		public ItemsUpdateReturnItemsOrdination ItemsOrdination { get; set; }
		
		/// <summary>
		/// Indicates whether the user is logged into the store.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="loggedIn")]
		public System.Nullable<System.Boolean> LoggedIn { get; set; }
		
		/// <summary>
		/// Object containing promotion data such as coupon tracking information and internal or external UTMs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="marketingData")]
		public ItemsUpdateReturnMarketingData MarketingData { get; set; }
		
		/// <summary>
		/// Array containing an object for each message generated by our servers while processing the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="messages")]
		public string[] Messages { get; set; }
		
		/// <summary>
		/// Optional field meant to hold additional information about the order. We recommend using this field for text, not data formats such as `JSON` even if escaped. For that purpose, see [Creating customizable fields](https://developers.vtex.com/vtex-rest-api/docs/creating-customizable-fields-in-the-cart-with-checkout-api-1).
		/// </summary>
		[System.ComponentModel.DefaultValue("open-text-example")]
		[System.Runtime.Serialization.DataMember(Name="openTextField")]
		public string OpenTextField { get; set; } = "open-text-example";
		
		/// <summary>
		/// ID of the orderForm corresponding to a specific cart.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orderFormId")]
		public string OrderFormId { get; set; }
		
		/// <summary>
		/// Information on the order's payment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paymentData")]
		public ItemsUpdateReturnPaymentData PaymentData { get; set; }
		
		/// <summary>
		/// Profile provider.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="profileProvider")]
		public string ProfileProvider { get; set; }
		
		/// <summary>
		/// Information on rates and benefits that apply to the order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ratesAndBenefitsData")]
		public ItemsUpdateReturnRatesAndBenefitsData RatesAndBenefitsData { get; set; }
		
		/// <summary>
		/// Attribute created by the seller, in their VTEX store configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="salesChannel")]
		public string SalesChannel { get; set; }
		
		/// <summary>
		/// Array containing the data of the item selected as a gift.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selectableGifts")]
		public string[] SelectableGifts { get; set; }
		
		/// <summary>
		/// Information on each seller.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sellers")]
		public ItemsUpdateReturnSellers[] ItemsUpdateReturnSellers { get; set; }
		
		/// <summary>
		/// Shipping information pertinent to the order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shippingData")]
		public ItemsUpdateReturnShippingData ShippingData { get; set; }
		
		/// <summary>
		/// ID of the store.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storeId")]
		public string StoreId { get; set; }
		
		/// <summary>
		/// Object containing data from the store's configuration (stored in VTEX's License Manager).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storePreferencesData")]
		public string StorePreferencesData { get; set; }
		
		/// <summary>
		/// Subscription information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subscriptionData")]
		public string SubscriptionData { get; set; }
		
		/// <summary>
		/// Array containing an object for each totalizer for the purchase. Totalizers contain the sum of values for a specific part of the order (e.g. Total item value, Total shipping value).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalizers")]
		public string[] Totalizers { get; set; }
		
		/// <summary>
		/// Unique ID associated with the customer profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userProfileId")]
		public string UserProfileId { get; set; }
		
		/// <summary>
		/// User type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userType")]
		public string UserType { get; set; }
		
		/// <summary>
		/// Total value of the order without separating cents. For example, $24.99 is represented as `2499`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Int32> Value { get; set; }
	}
	
	public class ItemsUpdateReturnAvailableAddresses
	{
		
		/// <summary>
		/// Address ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addressId")]
		public string AddressId { get; set; }
		
		/// <summary>
		/// Address type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addressType")]
		public string AddressType { get; set; }
		
		/// <summary>
		/// City of the address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		/// <summary>
		/// Complement to the address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="complement")]
		public string Complement { get; set; }
		
		/// <summary>
		/// Country of the address. ISO three-letter code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// List with the two geocoordinates.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="geoCoordinates")]
		public string[] GeoCoordinates { get; set; }
		
		/// <summary>
		/// Indicates whether address is disposable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isDisposable")]
		public System.Nullable<System.Boolean> IsDisposable { get; set; }
		
		/// <summary>
		/// Neighborhood of the address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="neighborhood")]
		public string Neighborhood { get; set; }
		
		/// <summary>
		/// Number of the address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="number")]
		public string Number { get; set; }
		
		/// <summary>
		/// Name of the receiver.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="receiverName")]
		public string ReceiverName { get; set; }
		
		/// <summary>
		/// Reference that may help in the location of the address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reference")]
		public string Reference { get; set; }
		
		/// <summary>
		/// State of the address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		/// <summary>
		/// Street of the address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="street")]
		public string Street { get; set; }
	}
	
	public class ItemsUpdateReturnClientPreferencesData
	{
		
		/// <summary>
		/// Client's locale. Examples: `pt-BR` and `en-US`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locale")]
		public string Locale { get; set; }
		
		/// <summary>
		/// `true` if the client opted to receive newsletter from the store.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="optinNewsLetter")]
		public System.Nullable<System.Boolean> OptinNewsLetter { get; set; }
	}
	
	public class ItemsUpdateReturnClientProfileData
	{
		
		/// <summary>
		/// Corporate document, if the customer is a legal entity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="corporateDocument")]
		public string CorporateDocument { get; set; }
		
		/// <summary>
		/// Company name, if the customer is a legal entity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="corporateName")]
		public string CorporateName { get; set; }
		
		/// <summary>
		/// Corporate phone number, if the customer is a legal entity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="corporatePhone")]
		public string CorporatePhone { get; set; }
		
		/// <summary>
		/// Customer class.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customerClass")]
		public string CustomerClass { get; set; }
		
		/// <summary>
		/// Document informed by the customer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="document")]
		public string Document { get; set; }
		
		/// <summary>
		/// Type of the document informed by the customer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="documentType")]
		public string DocumentType { get; set; }
		
		/// <summary>
		/// Email address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// First name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firstName")]
		public string FirstName { get; set; }
		
		/// <summary>
		/// Indicates whether the customer is a legal entity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isCorporate")]
		public System.Nullable<System.Boolean> IsCorporate { get; set; }
		
		/// <summary>
		/// Last name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastName")]
		public string LastName { get; set; }
		
		/// <summary>
		/// Phone number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phone")]
		public string Phone { get; set; }
		
		/// <summary>
		/// Indicates whether profile is complete on loading.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="profileCompleteOnLoading")]
		public System.Nullable<System.Boolean> ProfileCompleteOnLoading { get; set; }
		
		/// <summary>
		/// Indicates whether profile presents error on loading.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="profileErrorOnLoading")]
		public System.Nullable<System.Boolean> ProfileErrorOnLoading { get; set; }
		
		/// <summary>
		/// State inscription, if the customer is a legal entity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stateInscription")]
		public string StateInscription { get; set; }
		
		/// <summary>
		/// Trade name, if the customer is a legal entity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tradeName")]
		public string TradeName { get; set; }
	}
	
	public class ItemsUpdateReturnItemMetadata
	{
		
		/// <summary>
		/// List of objects containing metadata on each item in the order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public ItemsUpdateReturnItemMetadataItems[] ItemsUpdateReturnItemMetadataItems { get; set; }
	}
	
	public class ItemsUpdateReturnItemMetadataItems
	{
		
		/// <summary>
		/// Detail URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="detailUrl")]
		public string DetailUrl { get; set; }
		
		/// <summary>
		/// European Article Number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ean")]
		public string Ean { get; set; }
		
		/// <summary>
		/// Item ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Image URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageUrl")]
		public string ImageUrl { get; set; }
		
		/// <summary>
		/// Product name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Product ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productId")]
		public string ProductId { get; set; }
		
		/// <summary>
		/// Ref ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refId")]
		public string RefId { get; set; }
		
		/// <summary>
		/// Seller.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="seller")]
		public string Seller { get; set; }
		
		/// <summary>
		/// SKU name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="skuName")]
		public string SkuName { get; set; }
	}
	
	public class ItemsUpdateReturnItems
	{
		
		/// <summary>
		/// Additional information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additionalInfo")]
		public ItemsUpdateReturnItemsAdditionalInfo AdditionalInfo { get; set; }
		
		/// <summary>
		/// Array containing information on attachments.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attachments")]
		public string[] Attachments { get; set; }
		
		/// <summary>
		/// Availability.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availability")]
		public string Availability { get; set; }
		
		/// <summary>
		/// Information on services sold along with the SKU. Example: a gift package.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bundleItems")]
		public ItemsUpdateReturnItemsBundleItems[] ItemsUpdateReturnItemsBundleItems { get; set; }
		
		/// <summary>
		/// Detail URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="detailUrl")]
		public string DetailUrl { get; set; }
		
		/// <summary>
		/// European Article Number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ean")]
		public string Ean { get; set; }
		
		/// <summary>
		/// ID of the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Image URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageUrl")]
		public string ImageUrl { get; set; }
		
		/// <summary>
		/// Indicates whether item is a gift.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isGift")]
		public System.Nullable<System.Boolean> IsGift { get; set; }
		
		/// <summary>
		/// List price in cents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="listPrice")]
		public System.Nullable<System.Int32> ListPrice { get; set; }
		
		/// <summary>
		/// Manual price in cents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="manualPrice")]
		public System.Nullable<System.Int32> ManualPrice { get; set; }
		
		/// <summary>
		/// User that applied the manual price, if that is the case.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="manualPriceAppliedBy")]
		public string ManualPriceAppliedBy { get; set; }
		
		/// <summary>
		/// Manufacturer code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="manufacturerCode")]
		public string ManufacturerCode { get; set; }
		
		/// <summary>
		/// Measurement unit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="measurementUnit")]
		public string MeasurementUnit { get; set; }
		
		/// <summary>
		/// Modal type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modalType")]
		public string ModalType { get; set; }
		
		/// <summary>
		/// Product name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Parent assembly binding.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parentAssemblyBinding")]
		public string ParentAssemblyBinding { get; set; }
		
		/// <summary>
		/// Parent item index.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parentItemIndex")]
		public System.Nullable<System.Int32> ParentItemIndex { get; set; }
		
		/// <summary>
		/// Presale date.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="preSaleDate")]
		public string PreSaleDate { get; set; }
		
		/// <summary>
		/// Price in cents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="price")]
		public System.Nullable<System.Int32> Price { get; set; }
		
		/// <summary>
		/// Price information for all units of a specific item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priceDefinition")]
		public ItemsUpdateReturnItemsPriceDefinition PriceDefinition { get; set; }
		
		/// <summary>
		/// Array of price tags, each of which, modifies the price in some way, like discounts or rates that apply to the item in the context of the order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priceTags")]
		public ItemsUpdateReturnItemsPriceTags[] ItemsUpdateReturnItemsPriceTags { get; set; }
		
		/// <summary>
		/// Price expiration date and time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priceValidUntil")]
		public string PriceValidUntil { get; set; }
		
		/// <summary>
		/// Object, where each field is an ID from `productCategoryIds`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productCategories")]
		public ItemsUpdateReturnItemsProductCategories ProductCategories { get; set; }
		
		/// <summary>
		/// Product category IDs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productCategoryIds")]
		public string ProductCategoryIds { get; set; }
		
		/// <summary>
		/// Product ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productId")]
		public string ProductId { get; set; }
		
		/// <summary>
		/// Product Ref ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productRefId")]
		public string ProductRefId { get; set; }
		
		/// <summary>
		/// Quantity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public System.Nullable<System.Int32> Quantity { get; set; }
		
		/// <summary>
		/// Ref ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refId")]
		public string RefId { get; set; }
		
		/// <summary>
		/// Reward value in cents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rewardValue")]
		public System.Nullable<System.Int32> RewardValue { get; set; }
		
		/// <summary>
		/// Seller.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="seller")]
		public string Seller { get; set; }
		
		/// <summary>
		/// Sellers involved in the chain. The list should contain only one seller, unless it is a [Multilevel Omnichannel Inventory](https://help.vtex.com/en/tutorial/multilevel-omnichannel-inventory--7M1xyCZWUyCB7PcjNtOyw4) order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sellerChain")]
		public string[] SellerChain { get; set; }
		
		/// <summary>
		/// Selling price in cents. Note that this field may be subject to rounding discrepancies. We recommend retrieving data from the `priceDefinition` data structure instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sellingPrice")]
		public System.Nullable<System.Int32> SellingPrice { get; set; }
		
		/// <summary>
		/// SKU name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="skuName")]
		public string SkuName { get; set; }
		
		/// <summary>
		/// Tax value in cents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tax")]
		public System.Nullable<System.Int32> Tax { get; set; }
		
		/// <summary>
		/// Unique ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uniqueId")]
		public string UniqueId { get; set; }
		
		/// <summary>
		/// Unit multiplier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unitMultiplier")]
		public System.Nullable<System.Int32> UnitMultiplier { get; set; }
	}
	
	public class ItemsUpdateReturnItemsAdditionalInfo
	{
		
		/// <summary>
		/// Brand ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="brandId")]
		public string BrandId { get; set; }
		
		/// <summary>
		/// Brand name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="brandName")]
		public string BrandName { get; set; }
		
		/// <summary>
		/// Dimension.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimension")]
		public string Dimension { get; set; }
		
		/// <summary>
		/// Offering information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offeringInfo")]
		public string OfferingInfo { get; set; }
		
		/// <summary>
		/// Offering type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offeringType")]
		public string OfferingType { get; set; }
		
		/// <summary>
		/// Offering type ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offeringTypeId")]
		public string OfferingTypeId { get; set; }
	}
	
	public class ItemsUpdateReturnItemsBundleItems
	{
		
		/// <summary>
		/// Service identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Service name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Service price in cents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="price")]
		public System.Nullable<System.Int32> Price { get; set; }
		
		/// <summary>
		/// Service type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class ItemsUpdateReturnItemsPriceDefinition
	{
		
		/// <summary>
		/// Item's calculated unitary selling price in cents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="calculatedSellingPrice")]
		public System.Nullable<System.Int32> CalculatedSellingPrice { get; set; }
		
		/// <summary>
		/// Array of objects, each containing value (in cents) and quantity for the different rounding instances that can be combined to form the correctly rounded total.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sellingPrices")]
		public ItemsUpdateReturnItemsPriceDefinitionSellingPrices[] ItemsUpdateReturnItemsPriceDefinitionSellingPrices { get; set; }
		
		/// <summary>
		/// Total value for all units of the item in cents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Int32> Total { get; set; }
	}
	
	public class ItemsUpdateReturnItemsPriceDefinitionSellingPrices
	{
		
		/// <summary>
		/// Rounding quantity, meaning how many items are rounded to this value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public System.Nullable<System.Int32> Quantity { get; set; }
		
		/// <summary>
		/// Value in cents for that specific rounding.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Int32> Value { get; set; }
	}
	
	public class ItemsUpdateReturnItemsPriceTags
	{
		
		/// <summary>
		/// Price tag identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="identifier")]
		public string Identifier { get; set; }
		
		/// <summary>
		/// Indicates whether price tag value is applied through a percentage.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isPercentual")]
		public System.Nullable<System.Boolean> IsPercentual { get; set; }
		
		/// <summary>
		/// Price tag name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Price tag raw value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rawValue")]
		public System.Nullable<System.Int32> RawValue { get; set; }
		
		/// <summary>
		/// Price tag value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Int32> Value { get; set; }
	}
	
	public class ItemsUpdateReturnItemsProductCategories
	{
		
		/// <summary>
		/// Product category corresponding to the ID in the field key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="{ID}")]
		public string ID { get; set; }
	}
	
	public class ItemsUpdateReturnItemsOrdination
	{
		
		/// <summary>
		/// Indicates whether the ordering is ascending.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ascending")]
		public System.Nullable<System.Boolean> Ascending { get; set; }
		
		/// <summary>
		/// Criteria adopted to order the items in the list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="criteria")]
		public string Criteria { get; set; }
	}
	
	public class ItemsUpdateReturnMarketingData
	{
		
		/// <summary>
		/// Sending an existing coupon code in this field will return the corresponding discount in the purchase. Use the [cart simulation](https://developers.vtex.com/vtex-rest-api/reference/orderform#orderformsimulation) request to check which coupons might apply before placing the order.
		/// </summary>
		[System.ComponentModel.DefaultValue("free-shipping")]
		[System.Runtime.Serialization.DataMember(Name="coupon")]
		public string Coupon { get; set; } = "free-shipping";
		
		/// <summary>
		/// UTM campaign
		/// </summary>
		[System.ComponentModel.DefaultValue("Black friday")]
		[System.Runtime.Serialization.DataMember(Name="utmCampaign")]
		public string UtmCampaign { get; set; } = "Black friday";
		
		/// <summary>
		/// UTM medium.
		/// </summary>
		[System.ComponentModel.DefaultValue("CPC")]
		[System.Runtime.Serialization.DataMember(Name="utmMedium")]
		public string UtmMedium { get; set; } = "CPC";
		
		/// <summary>
		/// UTM source.
		/// </summary>
		[System.ComponentModel.DefaultValue("Facebook")]
		[System.Runtime.Serialization.DataMember(Name="utmSource")]
		public string UtmSource { get; set; } = "Facebook";
		
		/// <summary>
		/// utmi_campaign (internal utm).
		/// </summary>
		[System.ComponentModel.DefaultValue("utmi_campaign-example")]
		[System.Runtime.Serialization.DataMember(Name="utmiCampaign")]
		public string UtmiCampaign { get; set; } = "utmi_campaign-example";
		
		/// <summary>
		/// utmi_page (internal utm).
		/// </summary>
		[System.ComponentModel.DefaultValue("utmi_page-example")]
		[System.Runtime.Serialization.DataMember(Name="utmiPage")]
		public string UtmiPage { get; set; } = "utmi_page-example";
		
		/// <summary>
		/// utmi_part (internal utm).
		/// </summary>
		[System.ComponentModel.DefaultValue("utmi_part-example")]
		[System.Runtime.Serialization.DataMember(Name="utmiPart")]
		public string UtmiPart { get; set; } = "utmi_part-example";
	}
	
	public class ItemsUpdateReturnPaymentData
	{
		
		/// <summary>
		/// Gift card information, if it applies to the order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="giftCards")]
		public ItemsUpdateReturnPaymentDataGiftCards[] ItemsUpdateReturnPaymentDataGiftCards { get; set; }
		
		/// <summary>
		/// Information on each transaction pertinent to the order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transactions")]
		public ItemsUpdateReturnPaymentDataTransactions[] ItemsUpdateReturnPaymentDataTransactions { get; set; }
	}
	
	public class ItemsUpdateReturnPaymentDataGiftCards
	{
		
		/// <summary>
		/// Gift card balance in cents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="balance")]
		public System.Nullable<System.Int32> Balance { get; set; }
		
		/// <summary>
		/// Gift card ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Indicates whether gift card is in use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inUse")]
		public System.Nullable<System.Boolean> InUse { get; set; }
		
		/// <summary>
		/// Indicates whether gift card is special.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isSpecialCard")]
		public System.Nullable<System.Boolean> IsSpecialCard { get; set; }
		
		/// <summary>
		/// Gift card name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Gift card redemption code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="redemptionCode")]
		public string RedemptionCode { get; set; }
		
		/// <summary>
		/// Gift card value in cents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Int32> Value { get; set; }
	}
	
	public class ItemsUpdateReturnPaymentDataTransactions
	{
		
		/// <summary>
		/// Indicates whether transaction is active.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public System.Nullable<System.Boolean> IsActive { get; set; }
		
		/// <summary>
		/// Merchant name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="merchantName")]
		public string MerchantName { get; set; }
		
		/// <summary>
		/// Information on each payment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payments")]
		public ItemsUpdateReturnPaymentDataTransactionsPayments[] ItemsUpdateReturnPaymentDataTransactionsPayments { get; set; }
		
		/// <summary>
		/// Indicates whather transaction is shared.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sharedTransaction")]
		public System.Nullable<System.Boolean> SharedTransaction { get; set; }
		
		/// <summary>
		/// Transaction ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transactionId")]
		public string TransactionId { get; set; }
	}
	
	public class ItemsUpdateReturnPaymentDataTransactionsPayments
	{
		
		/// <summary>
		/// Account ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
		
		/// <summary>
		/// Bin.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bin")]
		public string Bin { get; set; }
		
		/// <summary>
		/// Number of installments.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="installments")]
		public System.Nullable<System.Int32> Installments { get; set; }
		
		/// <summary>
		/// Payment system.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paymentSystem")]
		public string PaymentSystem { get; set; }
		
		/// <summary>
		/// Reference value for calculating interest rates, in case it applies. Displayed in cents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="referenceValue")]
		public System.Nullable<System.Int32> ReferenceValue { get; set; }
		
		/// <summary>
		/// Value including interest, in case it applies. Displayed in cents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Int32> Value { get; set; }
	}
	
	public class ItemsUpdateReturnRatesAndBenefitsData
	{
		
		/// <summary>
		/// List with rates and benefits identifiers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rateAndBenefitsIdentifiers")]
		public string[] RateAndBenefitsIdentifiers { get; set; }
		
		/// <summary>
		/// List with rates and benefits teasers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="teaser")]
		public string[] Teaser { get; set; }
	}
	
	public class ItemsUpdateReturnSellers
	{
		
		/// <summary>
		/// Seller ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Seller logo.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logo")]
		public string Logo { get; set; }
		
		/// <summary>
		/// Seller name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	public class ItemsUpdateReturnShippingData
	{
		
		/// <summary>
		/// Address information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address")]
		public ItemsUpdateReturnShippingDataAddress Address { get; set; }
		
		/// <summary>
		/// Array with information on the available addresses for the order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availableAddresses")]
		public ItemsUpdateReturnShippingDataAvailableAddresses[] ItemsUpdateReturnShippingDataAvailableAddresses { get; set; }
		
		/// <summary>
		/// Array with logistics information. Each object in this array corresponds to an object in the `items` array, based on the respective `itemIndex`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logisticsInfo")]
		public ItemsUpdateReturnShippingDataLogisticsInfo[] ItemsUpdateReturnShippingDataLogisticsInfo { get; set; }
		
		/// <summary>
		/// Array with information on the selected addresses for the order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selectedAddresses")]
		public ItemsUpdateReturnShippingDataSelectedAddresses[] ItemsUpdateReturnShippingDataSelectedAddresses { get; set; }
	}
	
	public class ItemsUpdateReturnShippingDataAddress
	{
		
		/// <summary>
		/// Address ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addressId")]
		public string AddressId { get; set; }
		
		/// <summary>
		/// Type of address. For example, `Residential` or `Pickup`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addressType")]
		public string AddressType { get; set; }
		
		/// <summary>
		/// City of the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		/// <summary>
		/// Complement to the shipping address, in case it applies.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="complement")]
		public string Complement { get; set; }
		
		/// <summary>
		/// Three letter ISO code of the country of the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// Array with two strings with geocoordinates, first latitude, then longitude.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="geoCoordinates")]
		public string[] GeoCoordinates { get; set; }
		
		/// <summary>
		/// Indicates whether address is disposable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isDisposable")]
		public System.Nullable<System.Boolean> IsDisposable { get; set; }
		
		/// <summary>
		/// Neighborhood of the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="neighborhood")]
		public string Neighborhood { get; set; }
		
		/// <summary>
		/// Number of the building, house or apartment in the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="number")]
		public string Number { get; set; }
		
		/// <summary>
		/// Postal code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postalCode")]
		public string PostalCode { get; set; }
		
		/// <summary>
		/// Name of the person who is going to receive the order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="receiverName")]
		public string ReceiverName { get; set; }
		
		/// <summary>
		/// Complement that might help locate the shipping address more precisely in case of delivery.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reference")]
		public string Reference { get; set; }
		
		/// <summary>
		/// State of the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		/// <summary>
		/// Street of the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="street")]
		public string Street { get; set; }
	}
	
	public class ItemsUpdateReturnShippingDataAvailableAddresses
	{
		
		/// <summary>
		/// Address ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addressId")]
		public string AddressId { get; set; }
		
		/// <summary>
		/// Type of address. For example, `Residential` or `Pickup`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addressType")]
		public string AddressType { get; set; }
		
		/// <summary>
		/// City of the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		/// <summary>
		/// Complement to the shipping address, in case it applies.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="complement")]
		public string Complement { get; set; }
		
		/// <summary>
		/// Three letter ISO code of the country of the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// Array with two strings with geocoordinates, first latitude, then longitude.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="geoCoordinates")]
		public string[] GeoCoordinates { get; set; }
		
		/// <summary>
		/// Indicates whether address is disposable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isDisposable")]
		public System.Nullable<System.Boolean> IsDisposable { get; set; }
		
		/// <summary>
		/// Neighborhood of the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="neighborhood")]
		public string Neighborhood { get; set; }
		
		/// <summary>
		/// Number of the building, house or apartment in the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="number")]
		public string Number { get; set; }
		
		/// <summary>
		/// Postal code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postalCode")]
		public string PostalCode { get; set; }
		
		/// <summary>
		/// Name of the person who is going to receive the order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="receiverName")]
		public string ReceiverName { get; set; }
		
		/// <summary>
		/// Complement that might help locate the shipping address more precisely in case of delivery.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reference")]
		public string Reference { get; set; }
		
		/// <summary>
		/// State of the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		/// <summary>
		/// Street of the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="street")]
		public string Street { get; set; }
	}
	
	public class ItemsUpdateReturnShippingDataLogisticsInfo
	{
		
		/// <summary>
		/// Address ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addressId")]
		public string AddressId { get; set; }
		
		/// <summary>
		/// List of available delivery channels.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deliveryChannels")]
		public ItemsUpdateReturnShippingDataLogisticsInfoDeliveryChannels[] ItemsUpdateReturnShippingDataLogisticsInfoDeliveryChannels { get; set; }
		
		/// <summary>
		/// Item ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemId")]
		public string ItemId { get; set; }
		
		/// <summary>
		/// Index corresponding to the position of the object in the `items` array.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemIndex")]
		public System.Nullable<System.Int32> ItemIndex { get; set; }
		
		/// <summary>
		/// Delivery channel selected by the customer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selectedDeliveryChannel")]
		public string SelectedDeliveryChannel { get; set; }
		
		/// <summary>
		/// SLA selected by the customer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selectedSla")]
		public string SelectedSla { get; set; }
		
		/// <summary>
		/// List of countries that the item may be shipped to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shipsTo")]
		public string[] ShipsTo { get; set; }
		
		/// <summary>
		/// Information on available SLAs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="slas")]
		public ItemsUpdateReturnShippingDataLogisticsInfoSlas[] ItemsUpdateReturnShippingDataLogisticsInfoSlas { get; set; }
	}
	
	public class ItemsUpdateReturnShippingDataLogisticsInfoDeliveryChannels
	{
		
		/// <summary>
		/// Delivery channel ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	public class ItemsUpdateReturnShippingDataLogisticsInfoSlas
	{
		
		/// <summary>
		/// Delivery channel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deliveryChannel")]
		public string DeliveryChannel { get; set; }
		
		/// <summary>
		/// Information on each delivery ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deliveryIds")]
		public ItemsUpdateReturnShippingDataLogisticsInfoSlasDeliveryIds[] ItemsUpdateReturnShippingDataLogisticsInfoSlasDeliveryIds { get; set; }
		
		/// <summary>
		/// SLA ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// List price in cents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="listPrice")]
		public System.Nullable<System.Int32> ListPrice { get; set; }
		
		/// <summary>
		/// Estimate date of delivery.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lockTTL")]
		public string LockTTL { get; set; }
		
		/// <summary>
		/// SLA name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Pickup point distance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pickupDistance")]
		public System.Nullable<System.Int32> PickupDistance { get; set; }
		
		/// <summary>
		/// Pickup point ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pickupPointId")]
		public string PickupPointId { get; set; }
		
		/// <summary>
		/// Information on the pickup store.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pickupStoreInfo")]
		public ItemsUpdateReturnShippingDataLogisticsInfoSlasPickupStoreInfo PickupStoreInfo { get; set; }
		
		/// <summary>
		/// Polygon name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="polygonName")]
		public string PolygonName { get; set; }
		
		/// <summary>
		/// Price in cents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="price")]
		public System.Nullable<System.Int32> Price { get; set; }
		
		/// <summary>
		/// Shipping estimate. For instance, "three business days" will be represented as `3bd`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shippingEstimate")]
		public string ShippingEstimate { get; set; }
		
		/// <summary>
		/// Shipping estimate date.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shippingEstimateDate")]
		public string ShippingEstimateDate { get; set; }
		
		/// <summary>
		/// Tax in cents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tax")]
		public System.Nullable<System.Int32> Tax { get; set; }
		
		/// <summary>
		/// Transit time. For instance, "three business days" is represented as `3bd`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transitTime")]
		public string TransitTime { get; set; }
	}
	
	public class ItemsUpdateReturnShippingDataLogisticsInfoSlasDeliveryIds
	{
		
		/// <summary>
		/// Courier ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="courierId")]
		public string CourierId { get; set; }
		
		/// <summary>
		/// Courier name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="courierName")]
		public string CourierName { get; set; }
		
		/// <summary>
		/// Warehouse ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dockId")]
		public string DockId { get; set; }
		
		/// <summary>
		/// Quantity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public System.Nullable<System.Int32> Quantity { get; set; }
		
		/// <summary>
		/// Warehouse ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="warehouseId")]
		public string WarehouseId { get; set; }
	}
	
	public class ItemsUpdateReturnShippingDataLogisticsInfoSlasPickupStoreInfo
	{
		
		/// <summary>
		/// Additional information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additionalInfo")]
		public string AdditionalInfo { get; set; }
		
		/// <summary>
		/// Address information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address")]
		public ItemsUpdateReturnShippingDataLogisticsInfoSlasPickupStoreInfoAddress Address { get; set; }
		
		/// <summary>
		/// Corresponding dock ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dockId")]
		public string DockId { get; set; }
		
		/// <summary>
		/// Friendly name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="friendlyName")]
		public string FriendlyName { get; set; }
		
		/// <summary>
		/// Indicates whether it is the pickup store.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isPickupStore")]
		public System.Nullable<System.Boolean> IsPickupStore { get; set; }
	}
	
	public class ItemsUpdateReturnShippingDataLogisticsInfoSlasPickupStoreInfoAddress
	{
		
		/// <summary>
		/// Type of address. For example, `Residential` or `Pickup`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addressType")]
		public string AddressType { get; set; }
		
		/// <summary>
		/// City of the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		/// <summary>
		/// Complement to the shipping address, in case it applies.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="complement")]
		public string Complement { get; set; }
		
		/// <summary>
		/// Three letter ISO code of the country of the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// Array with two strings with geocoordinates, first latitude, then longitude.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="geoCoordinates")]
		public string[] GeoCoordinates { get; set; }
		
		/// <summary>
		/// Neighborhood of the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="neighborhood")]
		public string Neighborhood { get; set; }
		
		/// <summary>
		/// Number of the building, house or apartment in the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="number")]
		public string Number { get; set; }
		
		/// <summary>
		/// Postal code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postalCode")]
		public string PostalCode { get; set; }
		
		/// <summary>
		/// Complement that might help locate the shipping address more precisely in case of delivery.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reference")]
		public string Reference { get; set; }
		
		/// <summary>
		/// State of the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		/// <summary>
		/// Street of the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="street")]
		public string Street { get; set; }
	}
	
	public class ItemsUpdateReturnShippingDataSelectedAddresses
	{
		
		/// <summary>
		/// Address ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addressId")]
		public string AddressId { get; set; }
		
		/// <summary>
		/// Type of address. For example, `Residential` or `Pickup`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addressType")]
		public string AddressType { get; set; }
		
		/// <summary>
		/// City of the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		/// <summary>
		/// Complement to the shipping address, in case it applies.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="complement")]
		public string Complement { get; set; }
		
		/// <summary>
		/// Three letter ISO code of the country of the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// Array with two strings with geocoordinates, first latitude, then longitude.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="geoCoordinates")]
		public string[] GeoCoordinates { get; set; }
		
		/// <summary>
		/// Indicates whether address is disposable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isDisposable")]
		public System.Nullable<System.Boolean> IsDisposable { get; set; }
		
		/// <summary>
		/// Neighborhood of the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="neighborhood")]
		public string Neighborhood { get; set; }
		
		/// <summary>
		/// Number of the building, house or apartment in the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="number")]
		public string Number { get; set; }
		
		/// <summary>
		/// Postal code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postalCode")]
		public string PostalCode { get; set; }
		
		/// <summary>
		/// Name of the person who is going to receive the order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="receiverName")]
		public string ReceiverName { get; set; }
		
		/// <summary>
		/// Complement that might help locate the shipping address more precisely in case of delivery.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reference")]
		public string Reference { get; set; }
		
		/// <summary>
		/// State of the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		/// <summary>
		/// Street of the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="street")]
		public string Street { get; set; }
	}
	
	public class ClearorderFormMessagesReturn
	{
		
		/// <summary>
		/// Permission to modify item price manually.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowManualPrice")]
		public System.Nullable<System.Boolean> AllowManualPrice { get; set; }
		
		/// <summary>
		/// Available accounts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availableAccounts")]
		public string[] AvailableAccounts { get; set; }
		
		/// <summary>
		/// Information on each available address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availableAddresses")]
		public ClearorderFormMessagesReturnAvailableAddresses[] ClearorderFormMessagesReturnAvailableAddresses { get; set; }
		
		/// <summary>
		/// Data can be edited.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canEditData")]
		public System.Nullable<System.Boolean> CanEditData { get; set; }
		
		/// <summary>
		/// Object containing preferences from the client who placed the order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientPreferencesData")]
		public ClearorderFormMessagesReturnClientPreferencesData ClientPreferencesData { get; set; }
		
		/// <summary>
		/// Customer's profile information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientProfileData")]
		public ClearorderFormMessagesReturnClientProfileData ClientProfileData { get; set; }
		
		/// <summary>
		/// Object containing commercial condition information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="commercialConditionData")]
		public string CommercialConditionData { get; set; }
		
		/// <summary>
		/// Customer additional information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customData")]
		public string CustomData { get; set; }
		
		/// <summary>
		/// Gift registry list information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="giftRegistryData")]
		public string GiftRegistryData { get; set; }
		
		/// <summary>
		/// Hooks information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hooksData")]
		public string HooksData { get; set; }
		
		/// <summary>
		/// Ignore customer profile data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ignoreProfileData")]
		public System.Nullable<System.Boolean> IgnoreProfileData { get; set; }
		
		/// <summary>
		/// Object containing information pertinent to the order's invoice.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="invoiceData")]
		public string InvoiceData { get; set; }
		
		/// <summary>
		/// Indicates whether order is checked in.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isCheckedIn")]
		public System.Nullable<System.Boolean> IsCheckedIn { get; set; }
		
		/// <summary>
		/// Item metadata.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemMetadata")]
		public ClearorderFormMessagesReturnItemMetadata ItemMetadata { get; set; }
		
		/// <summary>
		/// Information on each item in the order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public ClearorderFormMessagesReturnItems[] ClearorderFormMessagesReturnItems { get; set; }
		
		/// <summary>
		/// Object containing information about the ordering of items within the orderForm.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemsOrdination")]
		public ClearorderFormMessagesReturnItemsOrdination ItemsOrdination { get; set; }
		
		/// <summary>
		/// Indicates whether the user is logged into the store.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="loggedIn")]
		public System.Nullable<System.Boolean> LoggedIn { get; set; }
		
		/// <summary>
		/// Object containing promotion data such as coupon tracking information and internal or external UTMs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="marketingData")]
		public ClearorderFormMessagesReturnMarketingData MarketingData { get; set; }
		
		/// <summary>
		/// Array containing an object for each message generated by our servers while processing the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="messages")]
		public string[] Messages { get; set; }
		
		/// <summary>
		/// Optional field meant to hold additional information about the order. We recommend using this field for text, not data formats such as `JSON` even if escaped. For that purpose, see [Creating customizable fields](https://developers.vtex.com/vtex-rest-api/docs/creating-customizable-fields-in-the-cart-with-checkout-api-1).
		/// </summary>
		[System.ComponentModel.DefaultValue("open-text-example")]
		[System.Runtime.Serialization.DataMember(Name="openTextField")]
		public string OpenTextField { get; set; } = "open-text-example";
		
		/// <summary>
		/// ID of the orderForm corresponding to a specific cart.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orderFormId")]
		public string OrderFormId { get; set; }
		
		/// <summary>
		/// Information on the order's payment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paymentData")]
		public ClearorderFormMessagesReturnPaymentData PaymentData { get; set; }
		
		/// <summary>
		/// Profile provider.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="profileProvider")]
		public string ProfileProvider { get; set; }
		
		/// <summary>
		/// Information on rates and benefits that apply to the order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ratesAndBenefitsData")]
		public ClearorderFormMessagesReturnRatesAndBenefitsData RatesAndBenefitsData { get; set; }
		
		/// <summary>
		/// Attribute created by the seller, in their VTEX store configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="salesChannel")]
		public string SalesChannel { get; set; }
		
		/// <summary>
		/// Array containing the data of the item selected as a gift.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selectableGifts")]
		public string[] SelectableGifts { get; set; }
		
		/// <summary>
		/// Information on each seller.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sellers")]
		public ClearorderFormMessagesReturnSellers[] ClearorderFormMessagesReturnSellers { get; set; }
		
		/// <summary>
		/// Shipping information pertinent to the order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shippingData")]
		public ClearorderFormMessagesReturnShippingData ShippingData { get; set; }
		
		/// <summary>
		/// ID of the store.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storeId")]
		public string StoreId { get; set; }
		
		/// <summary>
		/// Object containing data from the store's configuration (stored in VTEX's License Manager).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storePreferencesData")]
		public string StorePreferencesData { get; set; }
		
		/// <summary>
		/// Subscription information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subscriptionData")]
		public string SubscriptionData { get; set; }
		
		/// <summary>
		/// Array containing an object for each totalizer for the purchase. Totalizers contain the sum of values for a specific part of the order (e.g. Total item value, Total shipping value).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalizers")]
		public string[] Totalizers { get; set; }
		
		/// <summary>
		/// Unique ID associated with the customer profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userProfileId")]
		public string UserProfileId { get; set; }
		
		/// <summary>
		/// User type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userType")]
		public string UserType { get; set; }
		
		/// <summary>
		/// Total value of the order without separating cents. For example, $24.99 is represented `2499`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Int32> Value { get; set; }
	}
	
	public class ClearorderFormMessagesReturnAvailableAddresses
	{
		
		/// <summary>
		/// Address ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addressId")]
		public string AddressId { get; set; }
		
		/// <summary>
		/// Address type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addressType")]
		public string AddressType { get; set; }
		
		/// <summary>
		/// City of the address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		/// <summary>
		/// Complement to the address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="complement")]
		public string Complement { get; set; }
		
		/// <summary>
		/// Country of the address. ISO three-letter code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// Array containing two floats with geocoordinates, first longitude, then latitude.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="geoCoordinates")]
		public double[] GeoCoordinates { get; set; }
		
		/// <summary>
		/// Indicates whether address is disposable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isDisposable")]
		public System.Nullable<System.Boolean> IsDisposable { get; set; }
		
		/// <summary>
		/// Neighborhood of the address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="neighborhood")]
		public string Neighborhood { get; set; }
		
		/// <summary>
		/// Number of the address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="number")]
		public string Number { get; set; }
		
		/// <summary>
		/// Name of the receiver.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="receiverName")]
		public string ReceiverName { get; set; }
		
		/// <summary>
		/// Reference that may help in the location of the address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reference")]
		public string Reference { get; set; }
		
		/// <summary>
		/// State of the address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		/// <summary>
		/// Street of the address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="street")]
		public string Street { get; set; }
	}
	
	public class ClearorderFormMessagesReturnClientPreferencesData
	{
		
		/// <summary>
		/// Client's locale. Examples: `pt-BR` and `en-US`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locale")]
		public string Locale { get; set; }
		
		/// <summary>
		/// `true` if the client opted to receive newsletter from the store.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="optinNewsLetter")]
		public System.Nullable<System.Boolean> OptinNewsLetter { get; set; }
	}
	
	public class ClearorderFormMessagesReturnClientProfileData
	{
		
		/// <summary>
		/// Corporate document, if the customer is a legal entity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="corporateDocument")]
		public string CorporateDocument { get; set; }
		
		/// <summary>
		/// Company name, if the customer is a legal entity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="corporateName")]
		public string CorporateName { get; set; }
		
		/// <summary>
		/// Corporate phone number, if the customer is a legal entity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="corporatePhone")]
		public string CorporatePhone { get; set; }
		
		/// <summary>
		/// Customer class.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customerClass")]
		public string CustomerClass { get; set; }
		
		/// <summary>
		/// Document informed by the customer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="document")]
		public string Document { get; set; }
		
		/// <summary>
		/// Type of the document informed by the customer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="documentType")]
		public string DocumentType { get; set; }
		
		/// <summary>
		/// Email address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// First name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firstName")]
		public string FirstName { get; set; }
		
		/// <summary>
		/// Indicates whether the customer is a legal entity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isCorporate")]
		public System.Nullable<System.Boolean> IsCorporate { get; set; }
		
		/// <summary>
		/// Last name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastName")]
		public string LastName { get; set; }
		
		/// <summary>
		/// Phone number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phone")]
		public string Phone { get; set; }
		
		/// <summary>
		/// Indicates whether profile is complete on loading.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="profileCompleteOnLoading")]
		public System.Nullable<System.Boolean> ProfileCompleteOnLoading { get; set; }
		
		/// <summary>
		/// Indicates whether profile presents error on loading.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="profileErrorOnLoading")]
		public System.Nullable<System.Boolean> ProfileErrorOnLoading { get; set; }
		
		/// <summary>
		/// State inscription, if the customer is a legal entity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stateInscription")]
		public string StateInscription { get; set; }
		
		/// <summary>
		/// Trade name, if the customer is a legal entity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tradeName")]
		public string TradeName { get; set; }
	}
	
	public class ClearorderFormMessagesReturnItemMetadata
	{
		
		/// <summary>
		/// List of objects containing metadata on each item in the order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public ClearorderFormMessagesReturnItemMetadataItems[] ClearorderFormMessagesReturnItemMetadataItems { get; set; }
	}
	
	public class ClearorderFormMessagesReturnItemMetadataItems
	{
		
		/// <summary>
		/// Detail URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="detailUrl")]
		public string DetailUrl { get; set; }
		
		/// <summary>
		/// European Article Number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ean")]
		public string Ean { get; set; }
		
		/// <summary>
		/// Item ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Image URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageUrl")]
		public string ImageUrl { get; set; }
		
		/// <summary>
		/// Product name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Product ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productId")]
		public string ProductId { get; set; }
		
		/// <summary>
		/// Ref ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refId")]
		public string RefId { get; set; }
		
		/// <summary>
		/// Seller.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="seller")]
		public string Seller { get; set; }
		
		/// <summary>
		/// SKU name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="skuName")]
		public string SkuName { get; set; }
	}
	
	public class ClearorderFormMessagesReturnItems
	{
		
		/// <summary>
		/// Additional information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additionalInfo")]
		public ClearorderFormMessagesReturnItemsAdditionalInfo AdditionalInfo { get; set; }
		
		/// <summary>
		/// Array containing information on attachments.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attachments")]
		public string[] Attachments { get; set; }
		
		/// <summary>
		/// Availability.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availability")]
		public string Availability { get; set; }
		
		/// <summary>
		/// Information on services sold along with the SKU. Example: a gift package.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bundleItems")]
		public ClearorderFormMessagesReturnItemsBundleItems[] ClearorderFormMessagesReturnItemsBundleItems { get; set; }
		
		/// <summary>
		/// Detail URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="detailUrl")]
		public string DetailUrl { get; set; }
		
		/// <summary>
		/// European Article Number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ean")]
		public string Ean { get; set; }
		
		/// <summary>
		/// ID of the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Image URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageUrl")]
		public string ImageUrl { get; set; }
		
		/// <summary>
		/// Indicates whether item is a gift.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isGift")]
		public System.Nullable<System.Boolean> IsGift { get; set; }
		
		/// <summary>
		/// List price in cents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="listPrice")]
		public System.Nullable<System.Int32> ListPrice { get; set; }
		
		/// <summary>
		/// Manual price in cents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="manualPrice")]
		public System.Nullable<System.Int32> ManualPrice { get; set; }
		
		/// <summary>
		/// User that applied the manual price, if that is the case.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="manualPriceAppliedBy")]
		public string ManualPriceAppliedBy { get; set; }
		
		/// <summary>
		/// Manufacturer code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="manufacturerCode")]
		public string ManufacturerCode { get; set; }
		
		/// <summary>
		/// Measurement unit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="measurementUnit")]
		public string MeasurementUnit { get; set; }
		
		/// <summary>
		/// Modal type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modalType")]
		public string ModalType { get; set; }
		
		/// <summary>
		/// Product name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Parent assembly binding.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parentAssemblyBinding")]
		public string ParentAssemblyBinding { get; set; }
		
		/// <summary>
		/// Parent item index.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parentItemIndex")]
		public System.Nullable<System.Int32> ParentItemIndex { get; set; }
		
		/// <summary>
		/// Presale date.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="preSaleDate")]
		public string PreSaleDate { get; set; }
		
		/// <summary>
		/// Price in cents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="price")]
		public System.Nullable<System.Int32> Price { get; set; }
		
		/// <summary>
		/// Price information for all units of a specific item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priceDefinition")]
		public ClearorderFormMessagesReturnItemsPriceDefinition PriceDefinition { get; set; }
		
		/// <summary>
		/// Array of price tags, each of which, modifies the price in some way, like discounts or rates that apply to the item in the context of the order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priceTags")]
		public ClearorderFormMessagesReturnItemsPriceTags[] ClearorderFormMessagesReturnItemsPriceTags { get; set; }
		
		/// <summary>
		/// Price expiration date and time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priceValidUntil")]
		public string PriceValidUntil { get; set; }
		
		/// <summary>
		/// Object, where each field is an ID from `productCategoryIds`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productCategories")]
		public ClearorderFormMessagesReturnItemsProductCategories ProductCategories { get; set; }
		
		/// <summary>
		/// Product category IDs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productCategoryIds")]
		public string ProductCategoryIds { get; set; }
		
		/// <summary>
		/// Product ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productId")]
		public string ProductId { get; set; }
		
		/// <summary>
		/// Product Ref ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productRefId")]
		public string ProductRefId { get; set; }
		
		/// <summary>
		/// Quantity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public System.Nullable<System.Int32> Quantity { get; set; }
		
		/// <summary>
		/// Ref ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refId")]
		public string RefId { get; set; }
		
		/// <summary>
		/// Reward value in cents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rewardValue")]
		public System.Nullable<System.Int32> RewardValue { get; set; }
		
		/// <summary>
		/// Seller.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="seller")]
		public string Seller { get; set; }
		
		/// <summary>
		/// Sellers involved in the chain. The list should contain only one seller, unless it is a [Multilevel Omnichannel Inventory](https://help.vtex.com/en/tutorial/multilevel-omnichannel-inventory--7M1xyCZWUyCB7PcjNtOyw4) order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sellerChain")]
		public string[] SellerChain { get; set; }
		
		/// <summary>
		/// Selling price in cents. Note that this field may be subject to rounding discrepancies. We recommend retrieving data from the `priceDefinition` data structure instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sellingPrice")]
		public System.Nullable<System.Int32> SellingPrice { get; set; }
		
		/// <summary>
		/// SKU name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="skuName")]
		public string SkuName { get; set; }
		
		/// <summary>
		/// Tax value in cents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tax")]
		public System.Nullable<System.Int32> Tax { get; set; }
		
		/// <summary>
		/// Unique ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uniqueId")]
		public string UniqueId { get; set; }
		
		/// <summary>
		/// Unit multiplier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unitMultiplier")]
		public System.Nullable<System.Int32> UnitMultiplier { get; set; }
	}
	
	public class ClearorderFormMessagesReturnItemsAdditionalInfo
	{
		
		/// <summary>
		/// Brand ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="brandId")]
		public string BrandId { get; set; }
		
		/// <summary>
		/// Brand name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="brandName")]
		public string BrandName { get; set; }
		
		/// <summary>
		/// Dimension.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimension")]
		public string Dimension { get; set; }
		
		/// <summary>
		/// Offering information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offeringInfo")]
		public string OfferingInfo { get; set; }
		
		/// <summary>
		/// Offering type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offeringType")]
		public string OfferingType { get; set; }
		
		/// <summary>
		/// Offering type ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offeringTypeId")]
		public string OfferingTypeId { get; set; }
	}
	
	public class ClearorderFormMessagesReturnItemsBundleItems
	{
		
		/// <summary>
		/// Service identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Service name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Service price in cents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="price")]
		public System.Nullable<System.Int32> Price { get; set; }
		
		/// <summary>
		/// Service type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class ClearorderFormMessagesReturnItemsPriceDefinition
	{
		
		/// <summary>
		/// Item's calculated unitary selling price in cents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="calculatedSellingPrice")]
		public System.Nullable<System.Int32> CalculatedSellingPrice { get; set; }
		
		/// <summary>
		/// Array of objects, each containing value (in cents) and quantity for the different rounding instances that can be combined to form the correctly rounded total.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sellingPrices")]
		public ClearorderFormMessagesReturnItemsPriceDefinitionSellingPrices[] ClearorderFormMessagesReturnItemsPriceDefinitionSellingPrices { get; set; }
		
		/// <summary>
		/// Total value for all units of the item in cents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Int32> Total { get; set; }
	}
	
	public class ClearorderFormMessagesReturnItemsPriceDefinitionSellingPrices
	{
		
		/// <summary>
		/// Rounding quantity, meaning how many items are rounded to this value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public System.Nullable<System.Int32> Quantity { get; set; }
		
		/// <summary>
		/// Value in cents for that specific rounding.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Int32> Value { get; set; }
	}
	
	public class ClearorderFormMessagesReturnItemsPriceTags
	{
		
		/// <summary>
		/// Price tag identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="identifier")]
		public string Identifier { get; set; }
		
		/// <summary>
		/// Indicates whether price tag value is applied through a percentage.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isPercentual")]
		public System.Nullable<System.Boolean> IsPercentual { get; set; }
		
		/// <summary>
		/// Price tag name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Price tag raw value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rawValue")]
		public System.Nullable<System.Int32> RawValue { get; set; }
		
		/// <summary>
		/// Price tag value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Int32> Value { get; set; }
	}
	
	public class ClearorderFormMessagesReturnItemsProductCategories
	{
		
		/// <summary>
		/// Product category corresponding to the ID in the field key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="{ID}")]
		public string ID { get; set; }
	}
	
	public class ClearorderFormMessagesReturnItemsOrdination
	{
		
		/// <summary>
		/// Indicates whether the ordering is ascending.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ascending")]
		public System.Nullable<System.Boolean> Ascending { get; set; }
		
		/// <summary>
		/// Criteria adopted to order the items in the list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="criteria")]
		public string Criteria { get; set; }
	}
	
	public class ClearorderFormMessagesReturnMarketingData
	{
		
		/// <summary>
		/// Sending an existing coupon code in this field will return the corresponding discount in the purchase. Use the [cart simulation](https://developers.vtex.com/vtex-rest-api/reference/orderform#orderformsimulation) request to check which coupons might apply before placing the order.
		/// </summary>
		[System.ComponentModel.DefaultValue("free-shipping")]
		[System.Runtime.Serialization.DataMember(Name="coupon")]
		public string Coupon { get; set; } = "free-shipping";
		
		/// <summary>
		/// UTM campaign
		/// </summary>
		[System.ComponentModel.DefaultValue("Black friday")]
		[System.Runtime.Serialization.DataMember(Name="utmCampaign")]
		public string UtmCampaign { get; set; } = "Black friday";
		
		/// <summary>
		/// UTM medium.
		/// </summary>
		[System.ComponentModel.DefaultValue("CPC")]
		[System.Runtime.Serialization.DataMember(Name="utmMedium")]
		public string UtmMedium { get; set; } = "CPC";
		
		/// <summary>
		/// UTM source.
		/// </summary>
		[System.ComponentModel.DefaultValue("Facebook")]
		[System.Runtime.Serialization.DataMember(Name="utmSource")]
		public string UtmSource { get; set; } = "Facebook";
		
		/// <summary>
		/// utmi_campaign (internal utm).
		/// </summary>
		[System.ComponentModel.DefaultValue("utmi_campaign-example")]
		[System.Runtime.Serialization.DataMember(Name="utmiCampaign")]
		public string UtmiCampaign { get; set; } = "utmi_campaign-example";
		
		/// <summary>
		/// utmi_page (internal utm)
		/// </summary>
		[System.ComponentModel.DefaultValue("utmi_page-example")]
		[System.Runtime.Serialization.DataMember(Name="utmiPage")]
		public string UtmiPage { get; set; } = "utmi_page-example";
		
		/// <summary>
		/// utmi_part (internal utm).
		/// </summary>
		[System.ComponentModel.DefaultValue("utmi_part-example")]
		[System.Runtime.Serialization.DataMember(Name="utmiPart")]
		public string UtmiPart { get; set; } = "utmi_part-example";
	}
	
	public class ClearorderFormMessagesReturnPaymentData
	{
		
		/// <summary>
		/// Gift card information, if it applies to the order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="giftCards")]
		public ClearorderFormMessagesReturnPaymentDataGiftCards[] ClearorderFormMessagesReturnPaymentDataGiftCards { get; set; }
		
		/// <summary>
		/// Information on each transaction pertinent to the order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transactions")]
		public ClearorderFormMessagesReturnPaymentDataTransactions[] ClearorderFormMessagesReturnPaymentDataTransactions { get; set; }
	}
	
	public class ClearorderFormMessagesReturnPaymentDataGiftCards
	{
		
		/// <summary>
		/// Gift card balance in cents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="balance")]
		public System.Nullable<System.Int32> Balance { get; set; }
		
		/// <summary>
		/// Gift card ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Indicates whether gift card is in use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inUse")]
		public System.Nullable<System.Boolean> InUse { get; set; }
		
		/// <summary>
		/// Indicates whether gift card is special.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isSpecialCard")]
		public System.Nullable<System.Boolean> IsSpecialCard { get; set; }
		
		/// <summary>
		/// Gift card name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Gift card redemption code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="redemptionCode")]
		public string RedemptionCode { get; set; }
		
		/// <summary>
		/// Gift card value in cents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Int32> Value { get; set; }
	}
	
	public class ClearorderFormMessagesReturnPaymentDataTransactions
	{
		
		/// <summary>
		/// Indicates whether transaction is active.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public System.Nullable<System.Boolean> IsActive { get; set; }
		
		/// <summary>
		/// Merchant name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="merchantName")]
		public string MerchantName { get; set; }
		
		/// <summary>
		/// Information on each payment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payments")]
		public ClearorderFormMessagesReturnPaymentDataTransactionsPayments[] ClearorderFormMessagesReturnPaymentDataTransactionsPayments { get; set; }
		
		/// <summary>
		/// Indicates whather transaction is shared.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sharedTransaction")]
		public System.Nullable<System.Boolean> SharedTransaction { get; set; }
		
		/// <summary>
		/// Transaction ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transactionId")]
		public string TransactionId { get; set; }
	}
	
	public class ClearorderFormMessagesReturnPaymentDataTransactionsPayments
	{
		
		/// <summary>
		/// Account ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
		
		/// <summary>
		/// Bin.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bin")]
		public string Bin { get; set; }
		
		/// <summary>
		/// Number of installments.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="installments")]
		public System.Nullable<System.Int32> Installments { get; set; }
		
		/// <summary>
		/// Payment system.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paymentSystem")]
		public string PaymentSystem { get; set; }
		
		/// <summary>
		/// Reference value for calculating interest rates, in case it applies. Displayed in cents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="referenceValue")]
		public System.Nullable<System.Int32> ReferenceValue { get; set; }
		
		/// <summary>
		/// Value including interest, in case it applies. Displayed in cents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Int32> Value { get; set; }
	}
	
	public class ClearorderFormMessagesReturnRatesAndBenefitsData
	{
		
		/// <summary>
		/// List with rates and benefits identifiers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rateAndBenefitsIdentifiers")]
		public string[] RateAndBenefitsIdentifiers { get; set; }
		
		/// <summary>
		/// List with rates and benefits teasers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="teaser")]
		public string[] Teaser { get; set; }
	}
	
	public class ClearorderFormMessagesReturnSellers
	{
		
		/// <summary>
		/// Seller ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Seller logo.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logo")]
		public string Logo { get; set; }
		
		/// <summary>
		/// Seller name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	public class ClearorderFormMessagesReturnShippingData
	{
		
		/// <summary>
		/// Address information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address")]
		public ClearorderFormMessagesReturnShippingDataAddress Address { get; set; }
		
		/// <summary>
		/// Array with information on the available addresses for the order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availableAddresses")]
		public ClearorderFormMessagesReturnShippingDataAvailableAddresses[] ClearorderFormMessagesReturnShippingDataAvailableAddresses { get; set; }
		
		/// <summary>
		/// Array with logistics information. Each object in this array corresponds to an object in the `items` array, based on the respective `itemIndex`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logisticsInfo")]
		public ClearorderFormMessagesReturnShippingDataLogisticsInfo[] ClearorderFormMessagesReturnShippingDataLogisticsInfo { get; set; }
		
		/// <summary>
		/// Array with information on the selected addresses for the order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selectedAddresses")]
		public ClearorderFormMessagesReturnShippingDataSelectedAddresses[] ClearorderFormMessagesReturnShippingDataSelectedAddresses { get; set; }
	}
	
	public class ClearorderFormMessagesReturnShippingDataAddress
	{
		
		/// <summary>
		/// Address ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addressId")]
		public string AddressId { get; set; }
		
		/// <summary>
		/// Type of address. For example, `Residential` or `Pickup`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addressType")]
		public string AddressType { get; set; }
		
		/// <summary>
		/// City of the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		/// <summary>
		/// Complement to the shipping address, in case it applies.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="complement")]
		public string Complement { get; set; }
		
		/// <summary>
		/// Three letter ISO code of the country of the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// Array containing two floats with geocoordinates, first longitude, then latitude.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="geoCoordinates")]
		public double[] GeoCoordinates { get; set; }
		
		/// <summary>
		/// Indicates whether address is disposable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isDisposable")]
		public System.Nullable<System.Boolean> IsDisposable { get; set; }
		
		/// <summary>
		/// Neighborhood of the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="neighborhood")]
		public string Neighborhood { get; set; }
		
		/// <summary>
		/// Number of the building, house or apartment in the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="number")]
		public string Number { get; set; }
		
		/// <summary>
		/// Postal code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postalCode")]
		public string PostalCode { get; set; }
		
		/// <summary>
		/// Name of the person who is going to receive the order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="receiverName")]
		public string ReceiverName { get; set; }
		
		/// <summary>
		/// Complement that might help locate the shipping address more precisely in case of delivery.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reference")]
		public string Reference { get; set; }
		
		/// <summary>
		/// State of the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		/// <summary>
		/// Street of the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="street")]
		public string Street { get; set; }
	}
	
	public class ClearorderFormMessagesReturnShippingDataAvailableAddresses
	{
		
		/// <summary>
		/// Address ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addressId")]
		public string AddressId { get; set; }
		
		/// <summary>
		/// Type of address. For example, `Residential` or `Pickup`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addressType")]
		public string AddressType { get; set; }
		
		/// <summary>
		/// City of the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		/// <summary>
		/// Complement to the shipping address, in case it applies.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="complement")]
		public string Complement { get; set; }
		
		/// <summary>
		/// Three letter ISO code of the country of the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// Array containing two floats with geocoordinates, first longitude, then latitude.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="geoCoordinates")]
		public double[] GeoCoordinates { get; set; }
		
		/// <summary>
		/// Indicates whether address is disposable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isDisposable")]
		public System.Nullable<System.Boolean> IsDisposable { get; set; }
		
		/// <summary>
		/// Neighborhood of the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="neighborhood")]
		public string Neighborhood { get; set; }
		
		/// <summary>
		/// Number of the building, house or apartment in the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="number")]
		public string Number { get; set; }
		
		/// <summary>
		/// Postal code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postalCode")]
		public string PostalCode { get; set; }
		
		/// <summary>
		/// Name of the person who is going to receive the order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="receiverName")]
		public string ReceiverName { get; set; }
		
		/// <summary>
		/// Complement that might help locate the shipping address more precisely in case of delivery.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reference")]
		public string Reference { get; set; }
		
		/// <summary>
		/// State of the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		/// <summary>
		/// Street of the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="street")]
		public string Street { get; set; }
	}
	
	public class ClearorderFormMessagesReturnShippingDataLogisticsInfo
	{
		
		/// <summary>
		/// Address ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addressId")]
		public string AddressId { get; set; }
		
		/// <summary>
		/// List of available delivery channels.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deliveryChannels")]
		public ClearorderFormMessagesReturnShippingDataLogisticsInfoDeliveryChannels[] ClearorderFormMessagesReturnShippingDataLogisticsInfoDeliveryChannels { get; set; }
		
		/// <summary>
		/// Item ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemId")]
		public string ItemId { get; set; }
		
		/// <summary>
		/// Index corresponding to the position of the object in the `items` array.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemIndex")]
		public System.Nullable<System.Int32> ItemIndex { get; set; }
		
		/// <summary>
		/// Delivery channel selected by the customer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selectedDeliveryChannel")]
		public string SelectedDeliveryChannel { get; set; }
		
		/// <summary>
		/// SLA selected by the customer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selectedSla")]
		public string SelectedSla { get; set; }
		
		/// <summary>
		/// List of countries that the item may be shipped to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shipsTo")]
		public string[] ShipsTo { get; set; }
		
		/// <summary>
		/// Information on available SLAs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="slas")]
		public ClearorderFormMessagesReturnShippingDataLogisticsInfoSlas[] ClearorderFormMessagesReturnShippingDataLogisticsInfoSlas { get; set; }
	}
	
	public class ClearorderFormMessagesReturnShippingDataLogisticsInfoDeliveryChannels
	{
		
		/// <summary>
		/// Delivery channel ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	public class ClearorderFormMessagesReturnShippingDataLogisticsInfoSlas
	{
		
		/// <summary>
		/// Delivery channel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deliveryChannel")]
		public string DeliveryChannel { get; set; }
		
		/// <summary>
		/// Information on each delivery ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deliveryIds")]
		public ClearorderFormMessagesReturnShippingDataLogisticsInfoSlasDeliveryIds[] ClearorderFormMessagesReturnShippingDataLogisticsInfoSlasDeliveryIds { get; set; }
		
		/// <summary>
		/// SLA ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// List price in cents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="listPrice")]
		public System.Nullable<System.Int32> ListPrice { get; set; }
		
		/// <summary>
		/// Estimate date of delivery.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lockTTL")]
		public string LockTTL { get; set; }
		
		/// <summary>
		/// SLA name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Pickup point distance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pickupDistance")]
		public System.Nullable<System.Int32> PickupDistance { get; set; }
		
		/// <summary>
		/// Pickup point ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pickupPointId")]
		public string PickupPointId { get; set; }
		
		/// <summary>
		/// Information on the pickup store.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pickupStoreInfo")]
		public ClearorderFormMessagesReturnShippingDataLogisticsInfoSlasPickupStoreInfo PickupStoreInfo { get; set; }
		
		/// <summary>
		/// Polygon name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="polygonName")]
		public string PolygonName { get; set; }
		
		/// <summary>
		/// Price in cents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="price")]
		public System.Nullable<System.Int32> Price { get; set; }
		
		/// <summary>
		/// Shipping estimate. For instance, Three business days will be represented `3bd`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shippingEstimate")]
		public string ShippingEstimate { get; set; }
		
		/// <summary>
		/// Shipping estimate date.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shippingEstimateDate")]
		public string ShippingEstimateDate { get; set; }
		
		/// <summary>
		/// Tax in cents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tax")]
		public System.Nullable<System.Int32> Tax { get; set; }
		
		/// <summary>
		/// Transit time. For instance, "three business days" is represented `3bd`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transitTime")]
		public string TransitTime { get; set; }
	}
	
	public class ClearorderFormMessagesReturnShippingDataLogisticsInfoSlasDeliveryIds
	{
		
		/// <summary>
		/// Courier ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="courierId")]
		public string CourierId { get; set; }
		
		/// <summary>
		/// Courier name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="courierName")]
		public string CourierName { get; set; }
		
		/// <summary>
		/// Warehouse ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dockId")]
		public string DockId { get; set; }
		
		/// <summary>
		/// Quantity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public System.Nullable<System.Int32> Quantity { get; set; }
		
		/// <summary>
		/// Warehouse ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="warehouseId")]
		public string WarehouseId { get; set; }
	}
	
	public class ClearorderFormMessagesReturnShippingDataLogisticsInfoSlasPickupStoreInfo
	{
		
		/// <summary>
		/// Additional information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additionalInfo")]
		public string AdditionalInfo { get; set; }
		
		/// <summary>
		/// Address information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address")]
		public ClearorderFormMessagesReturnShippingDataLogisticsInfoSlasPickupStoreInfoAddress Address { get; set; }
		
		/// <summary>
		/// Corresponding dock ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dockId")]
		public string DockId { get; set; }
		
		/// <summary>
		/// Friendly name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="friendlyName")]
		public string FriendlyName { get; set; }
		
		/// <summary>
		/// Indicates whether it is the pickup store.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isPickupStore")]
		public System.Nullable<System.Boolean> IsPickupStore { get; set; }
	}
	
	public class ClearorderFormMessagesReturnShippingDataLogisticsInfoSlasPickupStoreInfoAddress
	{
		
		/// <summary>
		/// Type of address. For example, `Residential` or `Pickup`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addressType")]
		public string AddressType { get; set; }
		
		/// <summary>
		/// City of the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		/// <summary>
		/// Complement to the shipping address, in case it applies.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="complement")]
		public string Complement { get; set; }
		
		/// <summary>
		/// Three letter ISO code of the country of the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// Array containing two floats with geocoordinates, first longitude, then latitude.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="geoCoordinates")]
		public double[] GeoCoordinates { get; set; }
		
		/// <summary>
		/// Neighborhood of the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="neighborhood")]
		public string Neighborhood { get; set; }
		
		/// <summary>
		/// Number of the building, house or apartment in the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="number")]
		public string Number { get; set; }
		
		/// <summary>
		/// Postal code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postalCode")]
		public string PostalCode { get; set; }
		
		/// <summary>
		/// Complement that might help locate the shipping address more precisely in case of delivery.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reference")]
		public string Reference { get; set; }
		
		/// <summary>
		/// State of the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		/// <summary>
		/// Street of the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="street")]
		public string Street { get; set; }
	}
	
	public class ClearorderFormMessagesReturnShippingDataSelectedAddresses
	{
		
		/// <summary>
		/// Address ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addressId")]
		public string AddressId { get; set; }
		
		/// <summary>
		/// Type of address. For example, `Residential` or `Pickup`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addressType")]
		public string AddressType { get; set; }
		
		/// <summary>
		/// City of the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		/// <summary>
		/// Complement to the shipping address, in case it applies.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="complement")]
		public string Complement { get; set; }
		
		/// <summary>
		/// Three letter ISO code of the country of the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// Array containing two floats with geocoordinates, first longitude, then latitude.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="geoCoordinates")]
		public double[] GeoCoordinates { get; set; }
		
		/// <summary>
		/// Indicates whether address is disposable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isDisposable")]
		public System.Nullable<System.Boolean> IsDisposable { get; set; }
		
		/// <summary>
		/// Neighborhood of the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="neighborhood")]
		public string Neighborhood { get; set; }
		
		/// <summary>
		/// Number of the building, house or apartment in the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="number")]
		public string Number { get; set; }
		
		/// <summary>
		/// Postal code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postalCode")]
		public string PostalCode { get; set; }
		
		/// <summary>
		/// Name of the person who is going to receive the order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="receiverName")]
		public string ReceiverName { get; set; }
		
		/// <summary>
		/// Complement that might help locate the shipping address more precisely in case of delivery.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reference")]
		public string Reference { get; set; }
		
		/// <summary>
		/// State of the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		/// <summary>
		/// Street of the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="street")]
		public string Street { get; set; }
	}
	
	public class IgnoreProfileDataPatchBody
	{
		
		/// <summary>
		/// Indicates whether profile data should be ignored.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ignoreProfileData")]
		public System.Nullable<System.Boolean> IgnoreProfileData { get; set; }
	}
	
	public class PlaceOrderFromExistingOrderFormPostBody
	{
		
		/// <summary>
		/// Interest rate to be used in case it applies.
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(0)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="interestValue")]
		public int InterestValue { get; set; } = 0;
		
		/// <summary>
		/// True if the shopper opted to receive the newsletter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="optinNewsLetter")]
		public System.Nullable<System.Boolean> OptinNewsLetter { get; set; }
		
		/// <summary>
		/// ID of the `orderForm` corresponding to the cart from which to place the order. This is the same as the `orderFormId` parameter.
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue("41a22925298a4ddca95318131a25b000")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="referenceId")]
		public string ReferenceId { get; set; } = "41a22925298a4ddca95318131a25b000";
		
		/// <summary>
		/// Reference value of the order for calculating interest if that is the case. Can be equal to the total value and does not separate cents. For example, $24.99 is represented `2499`.
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(6800)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="referenceValue")]
		public int ReferenceValue { get; set; } = 6800;
		
		/// <summary>
		/// `true` if the shopper's data provided during checkout should be saved for future reference.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="savePersonalData")]
		public System.Nullable<System.Boolean> SavePersonalData { get; set; }
		
		/// <summary>
		/// Total value of the order without separating cents. For example, $24.99 is represented `2499`.
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(6800)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public int Value { get; set; } = 6800;
	}
	
	public class CartSimulationPostBody
	{
		
		/// <summary>
		/// Three letter ISO code of the country of the shipping address. This value must be sent along with the `postalCode` or `geoCoordinates` values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// Array containing two floats with geocoordinates, first longitude, then latitude.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="geoCoordinates")]
		public double[] GeoCoordinates { get; set; }
		
		/// <summary>
		/// Array containing information about the SKUs inside the cart to be simulated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public CartSimulationPostBodyItems[] CartSimulationPostBodyItems { get; set; }
		
		/// <summary>
		/// Postal code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postalCode")]
		public string PostalCode { get; set; }
	}
	
	public class CartSimulationPostBodyItems
	{
		
		/// <summary>
		/// The SKU ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The quantity of items of this specific SKU in the cart to be simulated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public System.Nullable<System.Int32> Quantity { get; set; }
		
		/// <summary>
		/// The ID of the seller responsible for this SKU. This ID can be found in your VTEX Admin.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="seller")]
		public string Seller { get; set; }
	}
	
	public class CartSimulationReturn
	{
		
		/// <summary>
		/// Three letter ISO code of the country of the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// Information on each item in the cart.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public CartSimulationReturnItems[] CartSimulationReturnItems { get; set; }
		
		/// <summary>
		/// Array with logistics information on each item of the `items` array in the `orderForm`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logisticsInfo")]
		public CartSimulationReturnLogisticsInfo[] CartSimulationReturnLogisticsInfo { get; set; }
		
		/// <summary>
		/// Object containing promotion data such as coupon tracking information and internal or external UTMs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="marketingData")]
		public string MarketingData { get; set; }
		
		/// <summary>
		/// Payment data information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paymentData")]
		public CartSimulationReturnPaymentData PaymentData { get; set; }
		
		/// <summary>
		/// Postal Code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postalCode")]
		public string PostalCode { get; set; }
		
		/// <summary>
		/// Information on rates and benefits that apply to the order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ratesAndBenefitsData")]
		public CartSimulationReturnRatesAndBenefitsData RatesAndBenefitsData { get; set; }
		
		/// <summary>
		/// Array containing the data of the item selected as a gift.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selectableGifts")]
		public string[] SelectableGifts { get; set; }
	}
	
	public class CartSimulationReturnItems
	{
		
		/// <summary>
		/// Availability.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availability")]
		public string Availability { get; set; }
		
		/// <summary>
		/// ID of the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// List price in cents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="listPrice")]
		public System.Nullable<System.Int32> ListPrice { get; set; }
		
		/// <summary>
		/// Measurement unit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="measurementUnit")]
		public string MeasurementUnit { get; set; }
		
		/// <summary>
		/// Array containing offering information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offerings")]
		public string[] Offerings { get; set; }
		
		/// <summary>
		/// Parent assembly binding.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parentAssemblyBinding")]
		public string ParentAssemblyBinding { get; set; }
		
		/// <summary>
		/// Parent item index.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parentItemIndex")]
		public System.Nullable<System.Int32> ParentItemIndex { get; set; }
		
		/// <summary>
		/// Price in cents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="price")]
		public System.Nullable<System.Int32> Price { get; set; }
		
		/// <summary>
		/// Price information for all units of a specific item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priceDefinition")]
		public CartSimulationReturnItemsPriceDefinition PriceDefinition { get; set; }
		
		/// <summary>
		/// Array of price tags, each of which, modifies the price in some way, like discounts or rates that apply to the item in the context of the order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priceTags")]
		public CartSimulationReturnItemsPriceTags[] CartSimulationReturnItemsPriceTags { get; set; }
		
		/// <summary>
		/// Price expiration date and time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priceValidUntil")]
		public string PriceValidUntil { get; set; }
		
		/// <summary>
		/// The quantity of the item the cart.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public System.Nullable<System.Int32> Quantity { get; set; }
		
		/// <summary>
		/// Request index information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestIndex")]
		public System.Nullable<System.Int32> RequestIndex { get; set; }
		
		/// <summary>
		/// Reward value in cents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rewardValue")]
		public System.Nullable<System.Int32> RewardValue { get; set; }
		
		/// <summary>
		/// The seller responsible for the SKU.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="seller")]
		public string Seller { get; set; }
		
		/// <summary>
		/// Sellers involved in the chain. The list should contain only one seller, unless it is a [Multilevel Omnichannel Inventory](https://help.vtex.com/en/tutorial/multilevel-omnichannel-inventory--7M1xyCZWUyCB7PcjNtOyw4) order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sellerChain")]
		public string[] SellerChain { get; set; }
		
		/// <summary>
		/// Selling price in cents. Note that this field may be subject to rounding discrepancies. We recommend retrieving data from the `priceDefinition` data structure instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sellingPrice")]
		public System.Nullable<System.Int32> SellingPrice { get; set; }
		
		/// <summary>
		/// Tax value in cents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tax")]
		public System.Nullable<System.Int32> Tax { get; set; }
		
		/// <summary>
		/// Unit multiplier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unitMultiplier")]
		public System.Nullable<System.Int32> UnitMultiplier { get; set; }
	}
	
	public class CartSimulationReturnItemsPriceDefinition
	{
		
		/// <summary>
		/// Item's calculated unitary selling price in cents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="calculatedSellingPrice")]
		public System.Nullable<System.Int32> CalculatedSellingPrice { get; set; }
		
		/// <summary>
		/// Array of objects, each containing value (in cents) and quantity for the different rounding instances that can be combined to form the correctly rounded total.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sellingPrices")]
		public CartSimulationReturnItemsPriceDefinitionSellingPrices[] CartSimulationReturnItemsPriceDefinitionSellingPrices { get; set; }
		
		/// <summary>
		/// Total value for all units of the item in cents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Int32> Total { get; set; }
	}
	
	public class CartSimulationReturnItemsPriceDefinitionSellingPrices
	{
		
		/// <summary>
		/// Rounding quantity, meaning how many items are rounded to this value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public System.Nullable<System.Int32> Quantity { get; set; }
		
		/// <summary>
		/// Value in cents for that specific rounding.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Int32> Value { get; set; }
	}
	
	public class CartSimulationReturnItemsPriceTags
	{
		
		/// <summary>
		/// Price tag identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="identifier")]
		public string Identifier { get; set; }
		
		/// <summary>
		/// Indicates whether price tag value is applied through a percentage.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isPercentual")]
		public System.Nullable<System.Boolean> IsPercentual { get; set; }
		
		/// <summary>
		/// Price tag name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Identification of the responsible for the price tag.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="owner")]
		public string Owner { get; set; }
		
		/// <summary>
		/// Price tag raw value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rawValue")]
		public System.Nullable<System.Int32> RawValue { get; set; }
		
		/// <summary>
		/// Price tag value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Int32> Value { get; set; }
	}
	
	public class CartSimulationReturnLogisticsInfo
	{
		
		/// <summary>
		/// Address ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addressId")]
		public string AddressId { get; set; }
		
		/// <summary>
		/// List of available delivery channels.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deliveryChannels")]
		public CartSimulationReturnLogisticsInfoDeliveryChannels[] CartSimulationReturnLogisticsInfoDeliveryChannels { get; set; }
		
		/// <summary>
		/// Index of item in items array.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemIndex")]
		public System.Nullable<System.Int32> ItemIndex { get; set; }
		
		/// <summary>
		/// Item metadata.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemMetadata")]
		public CartSimulationReturnLogisticsInfoItemMetadata ItemMetadata { get; set; }
		
		/// <summary>
		/// Array containing an object for each message generated by our servers while processing the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="messages")]
		public string[] Messages { get; set; }
		
		/// <summary>
		/// Array containing pickup points information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pickupPoints")]
		public string[] PickupPoints { get; set; }
		
		/// <summary>
		/// Purchase conditions information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="purchaseConditions")]
		public CartSimulationReturnLogisticsInfoPurchaseConditions PurchaseConditions { get; set; }
		
		/// <summary>
		/// Quantity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public System.Nullable<System.Int32> Quantity { get; set; }
		
		/// <summary>
		/// Delivery channel selected by the customer. For example, `"delivery"` or `"pickup-in-point"`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selectedDeliveryChannel")]
		public string SelectedDeliveryChannel { get; set; }
		
		/// <summary>
		/// Selected SLA. For example, `"normal"` or `"express"`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selectedSla")]
		public string SelectedSla { get; set; }
		
		/// <summary>
		/// List of countries that the item may be shipped to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shipsTo")]
		public string[] ShipsTo { get; set; }
		
		/// <summary>
		/// Information on available SLAs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="slas")]
		public CartSimulationReturnLogisticsInfoSlas[] CartSimulationReturnLogisticsInfoSlas { get; set; }
		
		/// <summary>
		/// Subscription information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subscriptionData")]
		public string SubscriptionData { get; set; }
		
		/// <summary>
		/// Information on order totals.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totals")]
		public CartSimulationReturnLogisticsInfoTotals[] CartSimulationReturnLogisticsInfoTotals { get; set; }
	}
	
	public class CartSimulationReturnLogisticsInfoDeliveryChannels
	{
		
		/// <summary>
		/// Delivery channel ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	public class CartSimulationReturnLogisticsInfoItemMetadata
	{
		
		/// <summary>
		/// List of objects containing metadata on each item in the order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public CartSimulationReturnLogisticsInfoItemMetadataItems[] CartSimulationReturnLogisticsInfoItemMetadataItems { get; set; }
	}
	
	public class CartSimulationReturnLogisticsInfoItemMetadataItems
	{
		
		/// <summary>
		/// Assembly options information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="assemblyOptions")]
		public string[] AssemblyOptions { get; set; }
		
		/// <summary>
		/// Item ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Seller.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="seller")]
		public string Seller { get; set; }
	}
	
	public class CartSimulationReturnLogisticsInfoPurchaseConditions
	{
		
		/// <summary>
		/// List of objects containing purchase condition information on each item in the order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemPurchaseConditions")]
		public CartSimulationReturnLogisticsInfoPurchaseConditionsItemPurchaseConditions[] CartSimulationReturnLogisticsInfoPurchaseConditionsItemPurchaseConditions { get; set; }
	}
	
	public class CartSimulationReturnLogisticsInfoPurchaseConditionsItemPurchaseConditions
	{
		
		/// <summary>
		/// Item ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// List price in cents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="listPrice")]
		public System.Nullable<System.Int32> ListPrice { get; set; }
		
		/// <summary>
		/// Price in cents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="price")]
		public System.Nullable<System.Int32> Price { get; set; }
		
		/// <summary>
		/// Seller.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="seller")]
		public string Seller { get; set; }
		
		/// <summary>
		/// Sellers involved in the chain. The list should contain only one seller, unless it is a [Multilevel Omnichannel Inventory](https://help.vtex.com/en/tutorial/multilevel-omnichannel-inventory--7M1xyCZWUyCB7PcjNtOyw4) order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sellerChain")]
		public string[] SellerChain { get; set; }
		
		/// <summary>
		/// Information on available SLAs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="slas")]
		public CartSimulationReturnLogisticsInfoPurchaseConditionsItemPurchaseConditionsSlas[] CartSimulationReturnLogisticsInfoPurchaseConditionsItemPurchaseConditionsSlas { get; set; }
	}
	
	public class CartSimulationReturnLogisticsInfoPurchaseConditionsItemPurchaseConditionsSlas
	{
		
		/// <summary>
		/// This object contains information about the delivery window available to the shopper.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availableDeliveryWindows")]
		public CartSimulationReturnLogisticsInfoPurchaseConditionsItemPurchaseConditionsSlasAvailableDeliveryWindows AvailableDeliveryWindows { get; set; }
		
		/// <summary>
		/// Delivery channel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deliveryChannel")]
		public string DeliveryChannel { get; set; }
		
		/// <summary>
		/// Information on each delivery ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deliveryIds")]
		public CartSimulationReturnLogisticsInfoPurchaseConditionsItemPurchaseConditionsSlasDeliveryIds[] CartSimulationReturnLogisticsInfoPurchaseConditionsItemPurchaseConditionsSlasDeliveryIds { get; set; }
		
		/// <summary>
		/// In case of scheduled delivery, this object will contain information on the delivery window selected by the shopper.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deliveryWindow")]
		public CartSimulationReturnLogisticsInfoPurchaseConditionsItemPurchaseConditionsSlasDeliveryWindow DeliveryWindow { get; set; }
		
		/// <summary>
		/// SLA ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// List price in cents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="listPrice")]
		public System.Nullable<System.Int32> ListPrice { get; set; }
		
		/// <summary>
		/// Estimate date of delivery.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lockTTL")]
		public string LockTTL { get; set; }
		
		/// <summary>
		/// SLA name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Pickup point distance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pickupDistance")]
		public System.Nullable<System.Int32> PickupDistance { get; set; }
		
		/// <summary>
		/// Pickup point ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pickupPointId")]
		public string PickupPointId { get; set; }
		
		/// <summary>
		/// Information on the pickup store.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pickupStoreInfo")]
		public CartSimulationReturnLogisticsInfoPurchaseConditionsItemPurchaseConditionsSlasPickupStoreInfo PickupStoreInfo { get; set; }
		
		/// <summary>
		/// Polygon name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="polygonName")]
		public string PolygonName { get; set; }
		
		/// <summary>
		/// Price in cents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="price")]
		public System.Nullable<System.Int32> Price { get; set; }
		
		/// <summary>
		/// Shipping estimate. For instance, "three business days" will be represented as `3bd`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shippingEstimate")]
		public string ShippingEstimate { get; set; }
		
		/// <summary>
		/// Shipping estimate date.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shippingEstimateDate")]
		public string ShippingEstimateDate { get; set; }
		
		/// <summary>
		/// Tax in cents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tax")]
		public System.Nullable<System.Int32> Tax { get; set; }
		
		/// <summary>
		/// Transit time. For instance, "three business days" is represented as `3bd`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transitTime")]
		public string TransitTime { get; set; }
	}
	
	public class CartSimulationReturnLogisticsInfoPurchaseConditionsItemPurchaseConditionsSlasAvailableDeliveryWindows
	{
		
		/// <summary>
		/// Delivery window ending day and time in UTC.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endDateUtc")]
		public string EndDateUtc { get; set; }
		
		/// <summary>
		/// Delivery window list price.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lisPrice")]
		public System.Nullable<System.Int32> LisPrice { get; set; }
		
		/// <summary>
		/// Delivery window price.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="price")]
		public System.Nullable<System.Int32> Price { get; set; }
		
		/// <summary>
		/// Delivery window starting day and time in UTC.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startDateUtc")]
		public string StartDateUtc { get; set; }
		
		/// <summary>
		/// Delivery window tax.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tax")]
		public System.Nullable<System.Int32> Tax { get; set; }
	}
	
	public class CartSimulationReturnLogisticsInfoPurchaseConditionsItemPurchaseConditionsSlasDeliveryIds
	{
		
		/// <summary>
		/// Courier ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="courierId")]
		public string CourierId { get; set; }
		
		/// <summary>
		/// Courier name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="courierName")]
		public string CourierName { get; set; }
		
		/// <summary>
		/// Warehouse ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dockId")]
		public string DockId { get; set; }
		
		/// <summary>
		/// Quantity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public System.Nullable<System.Int32> Quantity { get; set; }
		
		/// <summary>
		/// Warehouse ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="warehouseId")]
		public string WarehouseId { get; set; }
	}
	
	public class CartSimulationReturnLogisticsInfoPurchaseConditionsItemPurchaseConditionsSlasDeliveryWindow
	{
		
		/// <summary>
		/// Delivery window ending day and time in UTC.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endDateUtc")]
		public string EndDateUtc { get; set; }
		
		/// <summary>
		/// Delivery window list price.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lisPrice")]
		public System.Nullable<System.Int32> LisPrice { get; set; }
		
		/// <summary>
		/// Delivery window price.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="price")]
		public System.Nullable<System.Int32> Price { get; set; }
		
		/// <summary>
		/// Delivery window starting day and time in UTC.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startDateUtc")]
		public string StartDateUtc { get; set; }
		
		/// <summary>
		/// Delivery window tax.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tax")]
		public System.Nullable<System.Int32> Tax { get; set; }
	}
	
	public class CartSimulationReturnLogisticsInfoPurchaseConditionsItemPurchaseConditionsSlasPickupStoreInfo
	{
		
		/// <summary>
		/// Additional information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additionalInfo")]
		public string AdditionalInfo { get; set; }
		
		/// <summary>
		/// Address information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address")]
		public string Address { get; set; }
		
		/// <summary>
		/// Corresponding dock ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dockId")]
		public string DockId { get; set; }
		
		/// <summary>
		/// Friendly name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="friendlyName")]
		public string FriendlyName { get; set; }
		
		/// <summary>
		/// Indicates whether it is the pickup store.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isPickupStore")]
		public System.Nullable<System.Boolean> IsPickupStore { get; set; }
	}
	
	public class CartSimulationReturnLogisticsInfoSlas
	{
		
		/// <summary>
		/// This object contains information about the delivery window available to the shopper.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availableDeliveryWindows")]
		public CartSimulationReturnLogisticsInfoSlasAvailableDeliveryWindows AvailableDeliveryWindows { get; set; }
		
		/// <summary>
		/// Delivery channel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deliveryChannel")]
		public string DeliveryChannel { get; set; }
		
		/// <summary>
		/// Information on each delivery ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deliveryIds")]
		public CartSimulationReturnLogisticsInfoSlasDeliveryIds[] CartSimulationReturnLogisticsInfoSlasDeliveryIds { get; set; }
		
		/// <summary>
		/// In case of scheduled delivery, this object will contain information on the delivery window selected by the shopper.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deliveryWindow")]
		public CartSimulationReturnLogisticsInfoSlasDeliveryWindow DeliveryWindow { get; set; }
		
		/// <summary>
		/// SLA ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// List price in cents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="listPrice")]
		public System.Nullable<System.Int32> ListPrice { get; set; }
		
		/// <summary>
		/// Estimate date of delivery.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lockTTL")]
		public string LockTTL { get; set; }
		
		/// <summary>
		/// SLA name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Pickup point distance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pickupDistance")]
		public System.Nullable<System.Int32> PickupDistance { get; set; }
		
		/// <summary>
		/// Pickup point ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pickupPointId")]
		public string PickupPointId { get; set; }
		
		/// <summary>
		/// Information on the pickup store.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pickupStoreInfo")]
		public CartSimulationReturnLogisticsInfoSlasPickupStoreInfo PickupStoreInfo { get; set; }
		
		/// <summary>
		/// Polygon name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="polygonName")]
		public string PolygonName { get; set; }
		
		/// <summary>
		/// Price in cents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="price")]
		public System.Nullable<System.Int32> Price { get; set; }
		
		/// <summary>
		/// Shipping estimate. For instance, "three business days" will be represented as `3bd`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shippingEstimate")]
		public string ShippingEstimate { get; set; }
		
		/// <summary>
		/// Shipping estimate date.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shippingEstimateDate")]
		public string ShippingEstimateDate { get; set; }
		
		/// <summary>
		/// Tax in cents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tax")]
		public System.Nullable<System.Int32> Tax { get; set; }
		
		/// <summary>
		/// Transit time. For instance, "three business days" is represented as `3bd`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transitTime")]
		public string TransitTime { get; set; }
	}
	
	public class CartSimulationReturnLogisticsInfoSlasAvailableDeliveryWindows
	{
		
		/// <summary>
		/// Delivery window ending day and time in UTC.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endDateUtc")]
		public string EndDateUtc { get; set; }
		
		/// <summary>
		/// Delivery window list price.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lisPrice")]
		public System.Nullable<System.Int32> LisPrice { get; set; }
		
		/// <summary>
		/// Delivery window price.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="price")]
		public System.Nullable<System.Int32> Price { get; set; }
		
		/// <summary>
		/// Delivery window starting day and time in UTC.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startDateUtc")]
		public string StartDateUtc { get; set; }
		
		/// <summary>
		/// Delivery window tax.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tax")]
		public System.Nullable<System.Int32> Tax { get; set; }
	}
	
	public class CartSimulationReturnLogisticsInfoSlasDeliveryIds
	{
		
		/// <summary>
		/// Courier ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="courierId")]
		public string CourierId { get; set; }
		
		/// <summary>
		/// Courier name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="courierName")]
		public string CourierName { get; set; }
		
		/// <summary>
		/// Warehouse ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dockId")]
		public string DockId { get; set; }
		
		/// <summary>
		/// Quantity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public System.Nullable<System.Int32> Quantity { get; set; }
		
		/// <summary>
		/// Warehouse ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="warehouseId")]
		public string WarehouseId { get; set; }
	}
	
	public class CartSimulationReturnLogisticsInfoSlasDeliveryWindow
	{
		
		/// <summary>
		/// Delivery window ending day and time in UTC.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endDateUtc")]
		public string EndDateUtc { get; set; }
		
		/// <summary>
		/// Delivery window list price.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lisPrice")]
		public System.Nullable<System.Int32> LisPrice { get; set; }
		
		/// <summary>
		/// Delivery window price.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="price")]
		public System.Nullable<System.Int32> Price { get; set; }
		
		/// <summary>
		/// Delivery window starting day and time in UTC.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startDateUtc")]
		public string StartDateUtc { get; set; }
		
		/// <summary>
		/// Delivery window tax.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tax")]
		public System.Nullable<System.Int32> Tax { get; set; }
	}
	
	public class CartSimulationReturnLogisticsInfoSlasPickupStoreInfo
	{
		
		/// <summary>
		/// Additional information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additionalInfo")]
		public string AdditionalInfo { get; set; }
		
		/// <summary>
		/// Address information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address")]
		public string Address { get; set; }
		
		/// <summary>
		/// Corresponding dock ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dockId")]
		public string DockId { get; set; }
		
		/// <summary>
		/// Friendly name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="friendlyName")]
		public string FriendlyName { get; set; }
		
		/// <summary>
		/// Indicates whether it is the pickup store.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isPickupStore")]
		public System.Nullable<System.Boolean> IsPickupStore { get; set; }
	}
	
	public class CartSimulationReturnLogisticsInfoTotals
	{
		
		/// <summary>
		/// Total ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Total name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Total value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Int32> Value { get; set; }
	}
	
	public class CartSimulationReturnPaymentData
	{
		
		/// <summary>
		/// Available accounts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availableAccounts")]
		public string[] AvailableAccounts { get; set; }
		
		/// <summary>
		/// Available associations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availableAssociations")]
		public string AvailableAssociations { get; set; }
		
		/// <summary>
		/// Available tokens.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availableTokens")]
		public string[] AvailableTokens { get; set; }
		
		/// <summary>
		/// Array of gift card messages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="giftCardMessages")]
		public string[] GiftCardMessages { get; set; }
		
		/// <summary>
		/// Gift card information, if it applies to the order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="giftCards")]
		public string[] GiftCards { get; set; }
		
		/// <summary>
		/// Installment options information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="installmentOptions")]
		public string[] InstallmentOptions { get; set; }
		
		/// <summary>
		/// Information on payment systems.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paymentSystems")]
		public CartSimulationReturnPaymentDataPaymentSystems[] CartSimulationReturnPaymentDataPaymentSystems { get; set; }
		
		/// <summary>
		/// Information on each payment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payments")]
		public string[] Payments { get; set; }
	}
	
	public class CartSimulationReturnPaymentDataPaymentSystems
	{
		
		/// <summary>
		/// Availability of payment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availablePayments")]
		public string AvailablePayments { get; set; }
		
		/// <summary>
		/// Description.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Indicates whether a document is shown.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayDocument")]
		public System.Nullable<System.Boolean> DisplayDocument { get; set; }
		
		/// <summary>
		/// Payment due date.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dueDate")]
		public string DueDate { get; set; }
		
		/// <summary>
		/// Payment group name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="groupName")]
		public string GroupName { get; set; }
		
		/// <summary>
		/// Payment system ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Indicates whether it is custom.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isCustom")]
		public System.Nullable<System.Boolean> IsCustom { get; set; }
		
		/// <summary>
		/// Payment system name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Indicates whether a authentication is required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requiresAuthentication")]
		public System.Nullable<System.Boolean> RequiresAuthentication { get; set; }
		
		/// <summary>
		/// Indicates whether a document is required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requiresDocument")]
		public System.Nullable<System.Boolean> RequiresDocument { get; set; }
		
		/// <summary>
		/// String ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stringId")]
		public string StringId { get; set; }
		
		/// <summary>
		/// Template.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="template")]
		public string Template { get; set; }
		
		/// <summary>
		/// Payment system validator.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="validator")]
		public string Validator { get; set; }
	}
	
	public class CartSimulationReturnRatesAndBenefitsData
	{
		
		/// <summary>
		/// List with rates and benefits identifiers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rateAndBenefitsIdentifiers")]
		public string[] RateAndBenefitsIdentifiers { get; set; }
		
		/// <summary>
		/// List with rates and benefits teasers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="teaser")]
		public string[] Teaser { get; set; }
	}
	
	public class PlaceOrderPutBody
	{
		
		/// <summary>
		/// Customer's profile information. The `email` functions as a customer's ID.
		///
		///		///For customers already in your database, sending only the email address is enough to register the order to the shopper’s existing account.
		///
		///		///> If the shopper exists in you database but is not logged in, sending other profile information along with the email will cause the platform to fail placing the order. This happens because this action is interpreted as an attempt to edit profile data, which is not possible unless the customer is logged in to the store.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clientProfileData")]
		public PlaceOrderPutBodyClientProfileData ClientProfileData { get; set; }
		
		/// <summary>
		/// Array of objects containing information on each of the order's items.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="items")]
		public PlaceOrderPutBodyItems[] PlaceOrderPutBodyItems { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="marketingData")]
		public PlaceOrderPutBodyMarketingData MarketingData { get; set; }
		
		/// <summary>
		/// Optional field meant to hold additional information about the order. We recommend using this field for text, not data formats such as `JSON` even if escaped. For that purpose, see [Creating customizable fields](https://developers.vtex.com/vtex-rest-api/docs/creating-customizable-fields-in-the-cart-with-checkout-api-1)
		/// </summary>
		[System.ComponentModel.DefaultValue("open-text-example")]
		[System.Runtime.Serialization.DataMember(Name="openTextField")]
		public string OpenTextField { get; set; } = "open-text-example";
		
		/// <summary>
		/// Payment infomation.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="paymentData")]
		public PlaceOrderPutBodyPaymentData PaymentData { get; set; }
		
		/// <summary>
		/// Sales Associate information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="salesAssociateData")]
		public PlaceOrderPutBodySalesAssociateData SalesAssociateData { get; set; }
		
		/// <summary>
		/// Shipping information.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="shippingData")]
		public PlaceOrderPutBodyShippingData ShippingData { get; set; }
	}
	
	public class PlaceOrderPutBodyClientProfileData
	{
		
		/// <summary>
		/// Corporate document, if the customer is a legal entity.
		/// </summary>
		[System.ComponentModel.DefaultValue("12345678000100")]
		[System.Runtime.Serialization.DataMember(Name="corporateDocument")]
		public string CorporateDocument { get; set; } = "12345678000100";
		
		/// <summary>
		/// Company name, if the customer is a legal entity.
		/// </summary>
		[System.ComponentModel.DefaultValue("company-name")]
		[System.Runtime.Serialization.DataMember(Name="corporateName")]
		public string CorporateName { get; set; } = "company-name";
		
		/// <summary>
		/// Corporate phone number, if the customer is a legal entity.
		/// </summary>
		[System.ComponentModel.DefaultValue("+551100988887777")]
		[System.Runtime.Serialization.DataMember(Name="corporatePhone")]
		public string CorporatePhone { get; set; } = "+551100988887777";
		
		/// <summary>
		/// Document number informed by the customer.
		/// </summary>
		[System.ComponentModel.DefaultValue("123456789")]
		[System.Runtime.Serialization.DataMember(Name="document")]
		public string Document { get; set; } = "123456789";
		
		/// <summary>
		/// Type of the document informed by the customer.
		/// </summary>
		[System.ComponentModel.DefaultValue("cpf")]
		[System.Runtime.Serialization.DataMember(Name="documentType")]
		public string DocumentType { get; set; } = "cpf";
		
		/// <summary>
		/// Customer's email address.
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue("customer@examplemail.com")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; } = "customer@examplemail.com";
		
		/// <summary>
		/// Customer's first name.
		/// </summary>
		[System.ComponentModel.DefaultValue("first-name")]
		[System.Runtime.Serialization.DataMember(Name="firstName")]
		public string FirstName { get; set; } = "first-name";
		
		/// <summary>
		/// `true` if the customer is a legal entity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isCorporate")]
		public System.Nullable<System.Boolean> IsCorporate { get; set; }
		
		/// <summary>
		/// Customer's last name.
		/// </summary>
		[System.ComponentModel.DefaultValue("last-name")]
		[System.Runtime.Serialization.DataMember(Name="lastName")]
		public string LastName { get; set; } = "last-name";
		
		/// <summary>
		/// Customer's phone number.
		/// </summary>
		[System.ComponentModel.DefaultValue("+55110988887777")]
		[System.Runtime.Serialization.DataMember(Name="phone")]
		public string Phone { get; set; } = "+55110988887777";
		
		/// <summary>
		/// State inscription, if the customer is a legal entity.
		/// </summary>
		[System.ComponentModel.DefaultValue("12345678")]
		[System.Runtime.Serialization.DataMember(Name="stateInscription")]
		public string StateInscription { get; set; } = "12345678";
		
		/// <summary>
		/// Trade name, if the customer is a legal entity.
		/// </summary>
		[System.ComponentModel.DefaultValue("trade-name")]
		[System.Runtime.Serialization.DataMember(Name="tradeName")]
		public string TradeName { get; set; } = "trade-name";
	}
	
	public class PlaceOrderPutBodyItems
	{
		
		/// <summary>
		/// Array containing information on attachments.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attachments")]
		public string[] Attachments { get; set; }
		
		/// <summary>
		/// Information on services sold along with the SKU. Example: a gift package.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bundleItems")]
		public PlaceOrderPutBodyItemsBundleItems[] PlaceOrderPutBodyItemsBundleItems { get; set; }
		
		/// <summary>
		/// Comission.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="commission")]
		public System.Nullable<System.Int32> Commission { get; set; }
		
		/// <summary>
		/// Freight comission
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="freightCommission")]
		public System.Nullable<System.Int32> FreightCommission { get; set; }
		
		/// <summary>
		/// The SKU ID.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Indicates whether the order is a gift.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isGift")]
		public System.Nullable<System.Boolean> IsGift { get; set; }
		
		/// <summary>
		/// Item attachment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemAttachment")]
		public PlaceOrderPutBodyItemsItemAttachment ItemAttachment { get; set; }
		
		/// <summary>
		/// SKU measurement unit.
		/// </summary>
		[System.ComponentModel.DefaultValue("g")]
		[System.Runtime.Serialization.DataMember(Name="measurementUnit")]
		public string MeasurementUnit { get; set; } = "g";
		
		/// <summary>
		/// Item price within the context of the order without separating cents. For example, $24.99 is represented `2499`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="price")]
		public System.Nullable<System.Int32> Price { get; set; }
		
		/// <summary>
		/// Array of price tags, each of which, modifies the price in some way, like discounts or rates that apply to the item in the context of the order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priceTags")]
		public PlaceOrderPutBodyItemsPriceTags[] PlaceOrderPutBodyItemsPriceTags { get; set; }
		
		/// <summary>
		/// The quantity of items of this specific SKU in the cart to be simulated.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public int Quantity { get; set; }
		
		/// <summary>
		/// The ID of the seller responsible for this SKU. This ID can be found in your VTEX Admin.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="seller")]
		public string Seller { get; set; }
		
		/// <summary>
		/// SKU unit multiplier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unitMultiplier")]
		public System.Nullable<System.Int32> UnitMultiplier { get; set; }
	}
	
	public class PlaceOrderPutBodyItemsBundleItems
	{
		
		/// <summary>
		/// Service identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Service name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Service price. The last two digits are the cents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="price")]
		public System.Nullable<System.Int32> Price { get; set; }
		
		/// <summary>
		/// Service type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class PlaceOrderPutBodyItemsItemAttachment
	{
		
		/// <summary>
		/// Content referring to the customization requested by the customer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="content")]
		public string Content { get; set; }
		
		/// <summary>
		/// Attachment name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	public class PlaceOrderPutBodyItemsPriceTags
	{
		
		/// <summary>
		/// Price tag identifier.
		/// </summary>
		[System.ComponentModel.DefaultValue("1234abc-5678b-1234c")]
		[System.Runtime.Serialization.DataMember(Name="identifier")]
		public string Identifier { get; set; } = "1234abc-5678b-1234c";
		
		/// <summary>
		/// `true` if price tag value is applied through a percentage.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isPercentual")]
		public System.Nullable<System.Boolean> IsPercentual { get; set; }
		
		/// <summary>
		/// Price tag name.
		/// </summary>
		[System.ComponentModel.DefaultValue("discount@name-1234abc-5678b-1234c")]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; } = "discount@name-1234abc-5678b-1234c";
		
		/// <summary>
		/// Price tag raw value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rawValue")]
		public System.Nullable<System.Int32> RawValue { get; set; }
		
		/// <summary>
		/// Price tag value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Int32> Value { get; set; }
	}
	
	public class PlaceOrderPutBodyMarketingData
	{
		
		/// <summary>
		/// Sending an existing coupon code in this field will return the corresponding discount in the purchase. Use the [cart simulation](https://developers.vtex.com/vtex-rest-api/reference/orderform#orderformsimulation) request to check which coupons might apply before placing the order.
		/// </summary>
		[System.ComponentModel.DefaultValue("free-shipping")]
		[System.Runtime.Serialization.DataMember(Name="coupon")]
		public string Coupon { get; set; } = "free-shipping";
		
		/// <summary>
		/// UTM campaign
		/// </summary>
		[System.ComponentModel.DefaultValue("Black friday")]
		[System.Runtime.Serialization.DataMember(Name="utmCampaign")]
		public string UtmCampaign { get; set; } = "Black friday";
		
		/// <summary>
		/// UTM medium.
		/// </summary>
		[System.ComponentModel.DefaultValue("CPC")]
		[System.Runtime.Serialization.DataMember(Name="utmMedium")]
		public string UtmMedium { get; set; } = "CPC";
		
		/// <summary>
		/// UTM source.
		/// </summary>
		[System.ComponentModel.DefaultValue("Facebook")]
		[System.Runtime.Serialization.DataMember(Name="utmSource")]
		public string UtmSource { get; set; } = "Facebook";
		
		/// <summary>
		/// utmi_campaign (internal utm)
		/// </summary>
		[System.ComponentModel.DefaultValue("utmi_campaign-exmaple")]
		[System.Runtime.Serialization.DataMember(Name="utmiCampaign")]
		public string UtmiCampaign { get; set; } = "utmi_campaign-exmaple";
		
		/// <summary>
		/// utmi_page (internal utm)
		/// </summary>
		[System.ComponentModel.DefaultValue("utmi_page-example")]
		[System.Runtime.Serialization.DataMember(Name="utmiPage")]
		public string UtmiPage { get; set; } = "utmi_page-example";
		
		/// <summary>
		/// utmi_part (internal utm)
		/// </summary>
		[System.ComponentModel.DefaultValue("utmi_part-exmaple")]
		[System.Runtime.Serialization.DataMember(Name="utmiPart")]
		public string UtmiPart { get; set; } = "utmi_part-exmaple";
	}
	
	public class PlaceOrderPutBodyPaymentData
	{
		
		/// <summary>
		/// Array of gift card messages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="giftCardMessages")]
		public string[] GiftCardMessages { get; set; }
		
		/// <summary>
		/// Gift card information, if it applies to the order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="giftCards")]
		public PlaceOrderPutBodyPaymentDataGiftCards[] PlaceOrderPutBodyPaymentDataGiftCards { get; set; }
		
		/// <summary>
		/// Information on payment systems.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paymentSystems")]
		public PlaceOrderPutBodyPaymentDataPaymentSystems[] PlaceOrderPutBodyPaymentDataPaymentSystems { get; set; }
		
		/// <summary>
		/// Payment information.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="payments")]
		public PlaceOrderPutBodyPaymentDataPayments[] PlaceOrderPutBodyPaymentDataPayments { get; set; }
		
		/// <summary>
		/// Indicates whether this object's information is up to date according to the order's items. An order can not be placed if `"outdated"`
		/// </summary>
		[System.ComponentModel.DefaultValue("updated")]
		[System.Runtime.Serialization.DataMember(Name="updateStatus")]
		public string UpdateStatus { get; set; } = "updated";
	}
	
	public class PlaceOrderPutBodyPaymentDataGiftCards
	{
		
		/// <summary>
		/// Gift card balance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="balance")]
		public System.Nullable<System.Int32> Balance { get; set; }
		
		/// <summary>
		/// Gift card ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Indicates whether gift card is in use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inUse")]
		public System.Nullable<System.Boolean> InUse { get; set; }
		
		/// <summary>
		/// Indicates whether gift card is special.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isSpecialCard")]
		public System.Nullable<System.Boolean> IsSpecialCard { get; set; }
		
		/// <summary>
		/// Gift card name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Gift card redemption code.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="redemptionCode")]
		public string RedemptionCode { get; set; }
		
		/// <summary>
		/// Gift card value.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public int Value { get; set; }
	}
	
	public class PlaceOrderPutBodyPaymentDataPaymentSystems
	{
		
		/// <summary>
		/// Description.
		/// </summary>
		[System.ComponentModel.DefaultValue("description-example")]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; } = "description-example";
		
		/// <summary>
		/// Payment group name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="groupName")]
		public string GroupName { get; set; }
		
		/// <summary>
		/// Payment system ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Indicates whether it is custom.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isCustom")]
		public System.Nullable<System.Boolean> IsCustom { get; set; }
		
		/// <summary>
		/// Payment system name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Indicates whether a document is required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requiresDocument")]
		public System.Nullable<System.Boolean> RequiresDocument { get; set; }
		
		/// <summary>
		/// Indicates whether this payment system has been selected.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selected")]
		public System.Nullable<System.Boolean> Selected { get; set; }
		
		/// <summary>
		/// String ID.
		/// </summary>
		[System.ComponentModel.DefaultValue("12345abc")]
		[System.Runtime.Serialization.DataMember(Name="stringId")]
		public string StringId { get; set; } = "12345abc";
		
		/// <summary>
		/// Template.
		/// </summary>
		[System.ComponentModel.DefaultValue("creditCardPaymentGroup-template")]
		[System.Runtime.Serialization.DataMember(Name="template")]
		public string Template { get; set; } = "creditCardPaymentGroup-template";
		
		/// <summary>
		/// Payment system validator.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="validator")]
		public PlaceOrderPutBodyPaymentDataPaymentSystemsValidator Validator { get; set; }
	}
	
	public class PlaceOrderPutBodyPaymentDataPaymentSystemsValidator
	{
		
		/// <summary>
		/// Card code mask.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cardCodeMask")]
		public string CardCodeMask { get; set; }
		
		/// <summary>
		/// Card code regular expression.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cardCodeRegex")]
		public string CardCodeRegex { get; set; }
		
		/// <summary>
		/// Validator mask.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mask")]
		public string Mask { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="regex")]
		public string Regex { get; set; }
		
		/// <summary>
		/// Weights.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="weights")]
		public int[] Weights { get; set; }
	}
	
	public class PlaceOrderPutBodyPaymentDataPayments
	{
		
		/// <summary>
		/// Account ID.
		/// </summary>
		[System.ComponentModel.DefaultValue("accountID-example")]
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; } = "accountID-example";
		
		/// <summary>
		/// Payment bin.
		/// </summary>
		[System.ComponentModel.DefaultValue("2")]
		[System.Runtime.Serialization.DataMember(Name="bin")]
		public string Bin { get; set; } = "2";
		
		/// <summary>
		/// Number of installments.
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(2)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="installments")]
		public int Installments { get; set; } = 2;
		
		/// <summary>
		/// Payment system.
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue("12")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="paymentSystem")]
		public string PaymentSystem { get; set; } = "12";
		
		/// <summary>
		/// Reference value for calculating interest rates, in case it applies.
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(16175)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="referenceValue")]
		public int ReferenceValue { get; set; } = 16175;
		
		/// <summary>
		/// Value including interest, in case it applies.
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(16175)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public int Value { get; set; } = 16175;
	}
	
	public class PlaceOrderPutBodySalesAssociateData
	{
		
		/// <summary>
		/// Sales Associate (Seller) identification code. All information should be registered by the merchant. Maximum of 100 characters.
		/// </summary>
		[System.ComponentModel.DefaultValue("seller123")]
		[System.Runtime.Serialization.DataMember(Name="salesAssociateId")]
		public string SalesAssociateId { get; set; } = "seller123";
	}
	
	public class PlaceOrderPutBodyShippingData
	{
		
		/// <summary>
		/// Shipping address.
		///
		///		///For customers already in your data base, it is enough to send this object only with an `addressId`, which you may obtain from a [Cart simulation request](https://developers.vtex.com/vtex-rest-api/reference/shopping-cart#cartsimulation), for example.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address")]
		public PlaceOrderPutBodyShippingDataAddress Address { get; set; }
		
		/// <summary>
		/// Array of objects containing logistics information of each item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logisticsInfo")]
		public PlaceOrderPutBodyShippingDataLogisticsInfo[] PlaceOrderPutBodyShippingDataLogisticsInfo { get; set; }
		
		/// <summary>
		/// Indicate whether this object's information is up to date according to the order's items. An order can not be placed if `"outdated"`
		/// </summary>
		[System.ComponentModel.DefaultValue("updated")]
		[System.Runtime.Serialization.DataMember(Name="updateStatus")]
		public string UpdateStatus { get; set; } = "updated";
	}
	
	public class PlaceOrderPutBodyShippingDataAddress
	{
		
		/// <summary>
		/// Address ID.
		/// </summary>
		[System.ComponentModel.DefaultValue("Home")]
		[System.Runtime.Serialization.DataMember(Name="addressId")]
		public string AddressId { get; set; } = "Home";
		
		/// <summary>
		/// Type of address. For example, `Residential` or `Pickup`, among others.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addressType")]
		public string AddressType { get; set; }
		
		/// <summary>
		/// City of the shipping address.
		/// </summary>
		[System.ComponentModel.DefaultValue("Rio de Janeiro")]
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; } = "Rio de Janeiro";
		
		/// <summary>
		/// Complement to the shipping address in case it applies.
		/// </summary>
		[System.ComponentModel.DefaultValue("3rd floor")]
		[System.Runtime.Serialization.DataMember(Name="complement")]
		public string Complement { get; set; } = "3rd floor";
		
		/// <summary>
		/// Three letter ISO code of the country of the shipping address.
		/// </summary>
		[System.ComponentModel.DefaultValue("BRA")]
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; } = "BRA";
		
		/// <summary>
		/// Array containing two floats with geocoordinates, first longitude, then latitude.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="geoCoordinates")]
		public double[] GeoCoordinates { get; set; }
		
		/// <summary>
		/// Neighborhood of the shipping address.
		/// </summary>
		[System.ComponentModel.DefaultValue("Botafogo")]
		[System.Runtime.Serialization.DataMember(Name="neighborhood")]
		public string Neighborhood { get; set; } = "Botafogo";
		
		/// <summary>
		/// Number of the building, house or apartment in the shipping address.
		/// </summary>
		[System.ComponentModel.DefaultValue("300")]
		[System.Runtime.Serialization.DataMember(Name="number")]
		public string Number { get; set; } = "300";
		
		/// <summary>
		/// Postal Code.
		/// </summary>
		[System.ComponentModel.DefaultValue("12345-000")]
		[System.Runtime.Serialization.DataMember(Name="postalCode")]
		public string PostalCode { get; set; } = "12345-000";
		
		/// <summary>
		/// Name of the person who is going to receive the order.
		/// </summary>
		[System.ComponentModel.DefaultValue("receiver-name")]
		[System.Runtime.Serialization.DataMember(Name="receiverName")]
		public string ReceiverName { get; set; } = "receiver-name";
		
		/// <summary>
		/// Complement that might help locate the shipping address more precisely in case of delivery.
		/// </summary>
		[System.ComponentModel.DefaultValue("Grey building")]
		[System.Runtime.Serialization.DataMember(Name="reference")]
		public string Reference { get; set; } = "Grey building";
		
		/// <summary>
		/// State of the shipping address.
		/// </summary>
		[System.ComponentModel.DefaultValue("Rio de Janeiro")]
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; } = "Rio de Janeiro";
		
		/// <summary>
		/// Street of the shipping address.
		/// </summary>
		[System.ComponentModel.DefaultValue("Praia de Botafogo")]
		[System.Runtime.Serialization.DataMember(Name="street")]
		public string Street { get; set; } = "Praia de Botafogo";
	}
	
	public class PlaceOrderPutBodyShippingDataLogisticsInfo
	{
		
		/// <summary>
		/// In case of scheduled delivery, this object will contain information on the delivery window selected by the shopper.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deliveryWindow")]
		public PlaceOrderPutBodyShippingDataLogisticsInfoDeliveryWindow DeliveryWindow { get; set; }
		
		/// <summary>
		/// Index of the item in the `items` array, starting from 0.
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(0)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="itemIndex")]
		public int ItemIndex { get; set; } = 0;
		
		/// <summary>
		/// Logistics reservation waiting time.
		/// </summary>
		[System.ComponentModel.DefaultValue("8d")]
		[System.Runtime.Serialization.DataMember(Name="lockTTL")]
		public string LockTTL { get; set; } = "8d";
		
		/// <summary>
		/// Shipping price for the item. Does not account for the whole order's shipping price.
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(1099)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="price")]
		public int Price { get; set; } = 1099;
		
		/// <summary>
		/// Selected shipping option
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue("Express")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="selectedSla")]
		public string SelectedSla { get; set; } = "Express";
		
		/// <summary>
		/// Estimated time until delivery for the item.
		/// </summary>
		[System.ComponentModel.DefaultValue("7d")]
		[System.Runtime.Serialization.DataMember(Name="shippingEstimate")]
		public string ShippingEstimate { get; set; } = "7d";
	}
	
	public class PlaceOrderPutBodyShippingDataLogisticsInfoDeliveryWindow
	{
		
		/// <summary>
		/// Delivery window ending day and time in UTC.
		/// </summary>
		[System.ComponentModel.DefaultValue("2021-07-13T23:59:59+00:00")]
		[System.Runtime.Serialization.DataMember(Name="endDateUtc")]
		public string EndDateUtc { get; set; } = "2021-07-13T23:59:59+00:00";
		
		/// <summary>
		/// Delivery window list price.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lisPrice")]
		public System.Nullable<System.Int32> LisPrice { get; set; }
		
		/// <summary>
		/// Delivery window price.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="price")]
		public System.Nullable<System.Int32> Price { get; set; }
		
		/// <summary>
		/// Delivery window starting day and time in UTC.
		/// </summary>
		[System.ComponentModel.DefaultValue("2021-07-13T00:00:00+00:00")]
		[System.Runtime.Serialization.DataMember(Name="startDateUtc")]
		public string StartDateUtc { get; set; } = "2021-07-13T00:00:00+00:00";
		
		/// <summary>
		/// Delivery window tax.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tax")]
		public System.Nullable<System.Int32> Tax { get; set; }
	}
	
	public class PlaceOrderReturn
	{
		
		/// <summary>
		/// This is `null` since this request does not depend on any previously existing orderForm information in the platform.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orderForm")]
		public string OrderForm { get; set; }
		
		/// <summary>
		/// Information on each of the orders created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orders")]
		public PlaceOrderReturnOrders[] PlaceOrderReturnOrders { get; set; }
		
		/// <summary>
		/// Information on each transaction pertinent to the order placed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transactionData")]
		public PlaceOrderReturnTransactionData TransactionData { get; set; }
	}
	
	public class PlaceOrderReturnOrders
	{
		
		/// <summary>
		/// Indicates whether cancelation is allowed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowCancelation")]
		public System.Nullable<System.Boolean> AllowCancelation { get; set; }
		
		/// <summary>
		/// Indicates whether seller changing is allowed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowChangeSeller")]
		public System.Nullable<System.Boolean> AllowChangeSeller { get; set; }
		
		/// <summary>
		/// Indicates whether edition is allowed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowEdition")]
		public System.Nullable<System.Boolean> AllowEdition { get; set; }
		
		/// <summary>
		/// Checked in pickuppoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="checkedInPickupPointId")]
		public string CheckedInPickupPointId { get; set; }
		
		/// <summary>
		/// Customer's profile information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientProfileData")]
		public PlaceOrderReturnOrdersClientProfileData ClientProfileData { get; set; }
		
		/// <summary>
		/// Creation date.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creationDate")]
		public string CreationDate { get; set; }
		
		/// <summary>
		/// Follow up email address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="followUpEmail")]
		public string FollowUpEmail { get; set; }
		
		/// <summary>
		/// Host name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hostName")]
		public string HostName { get; set; }
		
		/// <summary>
		/// Indicates whether order is checked in.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isCheckedIn")]
		public System.Nullable<System.Boolean> IsCheckedIn { get; set; }
		
		/// <summary>
		/// Indicates whether order is completed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isCompleted")]
		public System.Nullable<System.Boolean> IsCompleted { get; set; }
		
		/// <summary>
		/// Indicates whether user data is visible.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isUserDataVisible")]
		public System.Nullable<System.Boolean> IsUserDataVisible { get; set; }
		
		/// <summary>
		/// Item metadata.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemMetadata")]
		public PlaceOrderReturnOrdersItemMetadata ItemMetadata { get; set; }
		
		/// <summary>
		/// Information on each item in the order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public PlaceOrderReturnOrdersItems[] PlaceOrderReturnOrdersItems { get; set; }
		
		/// <summary>
		/// Last change.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastChange")]
		public string LastChange { get; set; }
		
		/// <summary>
		/// Merchant name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="merchantName")]
		public string MerchantName { get; set; }
		
		/// <summary>
		/// `orderForm` creation date.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orderFormCreationDate")]
		public string OrderFormCreationDate { get; set; }
		
		/// <summary>
		/// Order group. Orders that involve different sellers are split into different orders of a same order group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orderGroup")]
		public string OrderGroup { get; set; }
		
		/// <summary>
		/// ID of the order in the Order Management System (OMS).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orderId")]
		public string OrderId { get; set; }
		
		/// <summary>
		/// Information on the order's payment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paymentData")]
		public PlaceOrderReturnOrdersPaymentData PaymentData { get; set; }
		
		/// <summary>
		/// Information on rates and benefits that apply to the order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ratesAndBenefitsData")]
		public PlaceOrderReturnOrdersRatesAndBenefitsData RatesAndBenefitsData { get; set; }
		
		/// <summary>
		/// Rounding error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="roundingError")]
		public System.Nullable<System.Int32> RoundingError { get; set; }
		
		/// <summary>
		/// Sales Associate (Seller) identification code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="salesAssociateId")]
		public string SalesAssociateId { get; set; }
		
		/// <summary>
		/// Sales channel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="salesChannel")]
		public string SalesChannel { get; set; }
		
		/// <summary>
		/// ID of the order in the seller.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sellerOrderId")]
		public string SellerOrderId { get; set; }
		
		/// <summary>
		/// Information on each seller.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sellers")]
		public PlaceOrderReturnOrdersSellers[] PlaceOrderReturnOrdersSellers { get; set; }
		
		/// <summary>
		/// Shipping information pertinent to the order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shippingData")]
		public PlaceOrderReturnOrdersShippingData ShippingData { get; set; }
		
		/// <summary>
		/// State.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		/// <summary>
		/// Store ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storeId")]
		public string StoreId { get; set; }
		
		/// <summary>
		/// Time zone creation date.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeZoneCreationDate")]
		public string TimeZoneCreationDate { get; set; }
		
		/// <summary>
		/// Time zone last change.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeZoneLastChange")]
		public string TimeZoneLastChange { get; set; }
		
		/// <summary>
		/// Information on order totals.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totals")]
		public PlaceOrderReturnOrdersTotals[] PlaceOrderReturnOrdersTotals { get; set; }
		
		/// <summary>
		/// User type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userType")]
		public string UserType { get; set; }
		
		/// <summary>
		/// Value of the order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Int32> Value { get; set; }
	}
	
	public class PlaceOrderReturnOrdersClientProfileData
	{
		
		/// <summary>
		/// Corporate document, if the customer is a legal entity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="corporateDocument")]
		public string CorporateDocument { get; set; }
		
		/// <summary>
		/// Company name, if the customer is a legal entity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="corporateName")]
		public string CorporateName { get; set; }
		
		/// <summary>
		/// Corporate phone number, if the customer is a legal entity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="corporatePhone")]
		public string CorporatePhone { get; set; }
		
		/// <summary>
		/// Customer class.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customerClass")]
		public string CustomerClass { get; set; }
		
		/// <summary>
		/// Document informed by the customer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="document")]
		public string Document { get; set; }
		
		/// <summary>
		/// Type of the document informed by the customer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="documentType")]
		public string DocumentType { get; set; }
		
		/// <summary>
		/// Email address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// First name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firstName")]
		public string FirstName { get; set; }
		
		/// <summary>
		/// Indicates whether the customer is a legal entity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isCorporate")]
		public System.Nullable<System.Boolean> IsCorporate { get; set; }
		
		/// <summary>
		/// Last name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastName")]
		public string LastName { get; set; }
		
		/// <summary>
		/// Phone number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phone")]
		public string Phone { get; set; }
		
		/// <summary>
		/// Indicates whether profile is complete on loading.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="profileCompleteOnLoading")]
		public System.Nullable<System.Boolean> ProfileCompleteOnLoading { get; set; }
		
		/// <summary>
		/// Indicates whether profile presents error on loading.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="profileErrorOnLoading")]
		public System.Nullable<System.Boolean> ProfileErrorOnLoading { get; set; }
		
		/// <summary>
		/// State inscription, if the customer is a legal entity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stateInscription")]
		public string StateInscription { get; set; }
		
		/// <summary>
		/// Trade name, if the customer is a legal entity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tradeName")]
		public string TradeName { get; set; }
	}
	
	public class PlaceOrderReturnOrdersItemMetadata
	{
		
		/// <summary>
		/// List of objects containing metadata on each item in the order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public PlaceOrderReturnOrdersItemMetadataItems[] PlaceOrderReturnOrdersItemMetadataItems { get; set; }
	}
	
	public class PlaceOrderReturnOrdersItemMetadataItems
	{
		
		/// <summary>
		/// Detail URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="detailUrl")]
		public string DetailUrl { get; set; }
		
		/// <summary>
		/// European Article Number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ean")]
		public string Ean { get; set; }
		
		/// <summary>
		/// Item ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Image URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageUrl")]
		public string ImageUrl { get; set; }
		
		/// <summary>
		/// Product name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Product ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productId")]
		public string ProductId { get; set; }
		
		/// <summary>
		/// Ref ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refId")]
		public string RefId { get; set; }
		
		/// <summary>
		/// Seller.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="seller")]
		public string Seller { get; set; }
		
		/// <summary>
		/// SKU name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="skuName")]
		public string SkuName { get; set; }
	}
	
	public class PlaceOrderReturnOrdersItems
	{
		
		/// <summary>
		/// Additional information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additionalInfo")]
		public PlaceOrderReturnOrdersItemsAdditionalInfo AdditionalInfo { get; set; }
		
		/// <summary>
		/// Array containing information on attachments.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attachments")]
		public string[] Attachments { get; set; }
		
		/// <summary>
		/// Availability
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availability")]
		public string Availability { get; set; }
		
		/// <summary>
		/// Information on services sold along with the SKU. Example: a gift package.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bundleItems")]
		public PlaceOrderReturnOrdersItemsBundleItems[] PlaceOrderReturnOrdersItemsBundleItems { get; set; }
		
		/// <summary>
		/// Detail URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="detailUrl")]
		public string DetailUrl { get; set; }
		
		/// <summary>
		/// European Article Number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ean")]
		public string Ean { get; set; }
		
		/// <summary>
		/// ID of the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Image URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageUrl")]
		public string ImageUrl { get; set; }
		
		/// <summary>
		/// Indicates whether item is a gift.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isGift")]
		public System.Nullable<System.Boolean> IsGift { get; set; }
		
		/// <summary>
		/// List price in cents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="listPrice")]
		public System.Nullable<System.Int32> ListPrice { get; set; }
		
		/// <summary>
		/// Manual price in cents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="manualPrice")]
		public System.Nullable<System.Int32> ManualPrice { get; set; }
		
		/// <summary>
		/// User that applied the manual price, if that is the case.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="manualPriceAppliedBy")]
		public string ManualPriceAppliedBy { get; set; }
		
		/// <summary>
		/// Manufacturer code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="manufacturerCode")]
		public string ManufacturerCode { get; set; }
		
		/// <summary>
		/// Measurement unit
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="measurementUnit")]
		public string MeasurementUnit { get; set; }
		
		/// <summary>
		/// Modal type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modalType")]
		public string ModalType { get; set; }
		
		/// <summary>
		/// Product name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Parent assembly binding.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parentAssemblyBinding")]
		public string ParentAssemblyBinding { get; set; }
		
		/// <summary>
		/// Parent item index.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parentItemIndex")]
		public System.Nullable<System.Int32> ParentItemIndex { get; set; }
		
		/// <summary>
		/// Presale date.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="preSaleDate")]
		public string PreSaleDate { get; set; }
		
		/// <summary>
		/// Price in cents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="price")]
		public System.Nullable<System.Int32> Price { get; set; }
		
		/// <summary>
		/// Price information for all units of a specific item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priceDefinition")]
		public PlaceOrderReturnOrdersItemsPriceDefinition PriceDefinition { get; set; }
		
		/// <summary>
		/// Array of price tags, each of which, modifies the price in some way, like discounts or rates that apply to the item in the context of the order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priceTags")]
		public PlaceOrderReturnOrdersItemsPriceTags[] PlaceOrderReturnOrdersItemsPriceTags { get; set; }
		
		/// <summary>
		/// Price expiration date and time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priceValidUntil")]
		public string PriceValidUntil { get; set; }
		
		/// <summary>
		/// Object, where each field is an ID from `productCategoryIds`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productCategories")]
		public PlaceOrderReturnOrdersItemsProductCategories ProductCategories { get; set; }
		
		/// <summary>
		/// Product category IDs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productCategoryIds")]
		public string ProductCategoryIds { get; set; }
		
		/// <summary>
		/// Product ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productId")]
		public string ProductId { get; set; }
		
		/// <summary>
		/// Product Ref ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productRefId")]
		public string ProductRefId { get; set; }
		
		/// <summary>
		/// Quantity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public System.Nullable<System.Int32> Quantity { get; set; }
		
		/// <summary>
		/// Ref ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refId")]
		public string RefId { get; set; }
		
		/// <summary>
		/// Reward value in cents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rewardValue")]
		public System.Nullable<System.Int32> RewardValue { get; set; }
		
		/// <summary>
		/// Seller.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="seller")]
		public string Seller { get; set; }
		
		/// <summary>
		/// Sellers involved in the chain. The list should contain only one seller, unless it is a [Multilevel Omnichannel Inventory](https://help.vtex.com/pt/tutorial/multilevel-omnichannel-inventory--7M1xyCZWUyCB7PcjNtOyw4) order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sellerChain")]
		public string[] SellerChain { get; set; }
		
		/// <summary>
		/// Selling price in cents. Note that this field may be subject to rounding discrepancies. We recommend retrieving data from the `priceDefinition` data structure instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sellingPrice")]
		public System.Nullable<System.Int32> SellingPrice { get; set; }
		
		/// <summary>
		/// SKU name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="skuName")]
		public string SkuName { get; set; }
		
		/// <summary>
		/// Tax value in cents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tax")]
		public System.Nullable<System.Int32> Tax { get; set; }
		
		/// <summary>
		/// Unique ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uniqueId")]
		public string UniqueId { get; set; }
		
		/// <summary>
		/// Unit multiplier
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unitMultiplier")]
		public System.Nullable<System.Int32> UnitMultiplier { get; set; }
	}
	
	public class PlaceOrderReturnOrdersItemsAdditionalInfo
	{
		
		/// <summary>
		/// Brand ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="brandId")]
		public string BrandId { get; set; }
		
		/// <summary>
		/// Brand name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="brandName")]
		public string BrandName { get; set; }
		
		/// <summary>
		/// Dimension.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimension")]
		public string Dimension { get; set; }
		
		/// <summary>
		/// Offering information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offeringInfo")]
		public string OfferingInfo { get; set; }
		
		/// <summary>
		/// Offering type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offeringType")]
		public string OfferingType { get; set; }
		
		/// <summary>
		/// Offering type ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offeringTypeId")]
		public string OfferingTypeId { get; set; }
	}
	
	public class PlaceOrderReturnOrdersItemsBundleItems
	{
		
		/// <summary>
		/// Service identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Service name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Service price in cents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="price")]
		public System.Nullable<System.Int32> Price { get; set; }
		
		/// <summary>
		/// Service type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class PlaceOrderReturnOrdersItemsPriceDefinition
	{
		
		/// <summary>
		/// Item's calculated unitary selling price in cents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="calculatedSellingPrice")]
		public System.Nullable<System.Int32> CalculatedSellingPrice { get; set; }
		
		/// <summary>
		/// Array of objects, each containing value (in cents) and quantity for the different rounding instances that can be combined to form the correctly rounded total.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sellingPrices")]
		public PlaceOrderReturnOrdersItemsPriceDefinitionSellingPrices[] PlaceOrderReturnOrdersItemsPriceDefinitionSellingPrices { get; set; }
		
		/// <summary>
		/// Total value for all units of the item in cents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Int32> Total { get; set; }
	}
	
	public class PlaceOrderReturnOrdersItemsPriceDefinitionSellingPrices
	{
		
		/// <summary>
		/// Rounding quantity, meaning how many items are rounded to this value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public System.Nullable<System.Int32> Quantity { get; set; }
		
		/// <summary>
		/// Value in cents for that specific rounding.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Int32> Value { get; set; }
	}
	
	public class PlaceOrderReturnOrdersItemsPriceTags
	{
		
		/// <summary>
		/// Price tag identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="identifier")]
		public string Identifier { get; set; }
		
		/// <summary>
		/// Indicates whether price tag value is applied through a percentage.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isPercentual")]
		public System.Nullable<System.Boolean> IsPercentual { get; set; }
		
		/// <summary>
		/// Price tag name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Price tag raw value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rawValue")]
		public System.Nullable<System.Int32> RawValue { get; set; }
		
		/// <summary>
		/// Price tag value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Int32> Value { get; set; }
	}
	
	public class PlaceOrderReturnOrdersItemsProductCategories
	{
		
		/// <summary>
		/// Product category corresponding to the ID in the field key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="{ID}")]
		public string ID { get; set; }
	}
	
	public class PlaceOrderReturnOrdersPaymentData
	{
		
		/// <summary>
		/// Gift card information, if it applies to the order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="giftCards")]
		public PlaceOrderReturnOrdersPaymentDataGiftCards[] PlaceOrderReturnOrdersPaymentDataGiftCards { get; set; }
		
		/// <summary>
		/// Information on each transaction pertinent to the order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transactions")]
		public PlaceOrderReturnOrdersPaymentDataTransactions[] PlaceOrderReturnOrdersPaymentDataTransactions { get; set; }
	}
	
	public class PlaceOrderReturnOrdersPaymentDataGiftCards
	{
		
		/// <summary>
		/// Gift card balance in cents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="balance")]
		public System.Nullable<System.Int32> Balance { get; set; }
		
		/// <summary>
		/// Gift card ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Indicates whether gift card is in use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inUse")]
		public System.Nullable<System.Boolean> InUse { get; set; }
		
		/// <summary>
		/// Indicates whether gift card is special.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isSpecialCard")]
		public System.Nullable<System.Boolean> IsSpecialCard { get; set; }
		
		/// <summary>
		/// Gift card name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Gift card redemption code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="redemptionCode")]
		public string RedemptionCode { get; set; }
		
		/// <summary>
		/// Gift card value in cents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Int32> Value { get; set; }
	}
	
	public class PlaceOrderReturnOrdersPaymentDataTransactions
	{
		
		/// <summary>
		/// Indicates whether transaction is active.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public System.Nullable<System.Boolean> IsActive { get; set; }
		
		/// <summary>
		/// Merchant name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="merchantName")]
		public string MerchantName { get; set; }
		
		/// <summary>
		/// Information on each payment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payments")]
		public PlaceOrderReturnOrdersPaymentDataTransactionsPayments[] PlaceOrderReturnOrdersPaymentDataTransactionsPayments { get; set; }
		
		/// <summary>
		/// Indicates whather transaction is shared.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sharedTransaction")]
		public System.Nullable<System.Boolean> SharedTransaction { get; set; }
		
		/// <summary>
		/// Transaction ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transactionId")]
		public string TransactionId { get; set; }
	}
	
	public class PlaceOrderReturnOrdersPaymentDataTransactionsPayments
	{
		
		/// <summary>
		/// Account ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
		
		/// <summary>
		/// Bin.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bin")]
		public string Bin { get; set; }
		
		/// <summary>
		/// Number of installments.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="installments")]
		public System.Nullable<System.Int32> Installments { get; set; }
		
		/// <summary>
		/// Payment system.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paymentSystem")]
		public string PaymentSystem { get; set; }
		
		/// <summary>
		/// Reference value for calculating interest rates, in case it applies. Displayed in cents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="referenceValue")]
		public System.Nullable<System.Int32> ReferenceValue { get; set; }
		
		/// <summary>
		/// Value including interest, in case it applies. Displayed in cents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Int32> Value { get; set; }
	}
	
	public class PlaceOrderReturnOrdersRatesAndBenefitsData
	{
		
		/// <summary>
		/// List with rates and benefits identifiers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rateAndBenefitsIdentifiers")]
		public string[] RateAndBenefitsIdentifiers { get; set; }
		
		/// <summary>
		/// List with rates and benefits teasers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="teaser")]
		public string[] Teaser { get; set; }
	}
	
	public class PlaceOrderReturnOrdersSellers
	{
		
		/// <summary>
		/// Seller ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Seller logo.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logo")]
		public string Logo { get; set; }
		
		/// <summary>
		/// Seller name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	public class PlaceOrderReturnOrdersShippingData
	{
		
		/// <summary>
		/// Address information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address")]
		public PlaceOrderReturnOrdersShippingDataAddress Address { get; set; }
		
		/// <summary>
		/// Array with information on the available addresses for the order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availableAddresses")]
		public PlaceOrderReturnOrdersShippingDataAvailableAddresses[] PlaceOrderReturnOrdersShippingDataAvailableAddresses { get; set; }
		
		/// <summary>
		/// Array with logistics information. Each object in this array corresponds to an object in the `items` array, based on the respective `itemIndex`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logisticsInfo")]
		public PlaceOrderReturnOrdersShippingDataLogisticsInfo[] PlaceOrderReturnOrdersShippingDataLogisticsInfo { get; set; }
		
		/// <summary>
		/// Array with information on the selected addresses for the order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selectedAddresses")]
		public PlaceOrderReturnOrdersShippingDataSelectedAddresses[] PlaceOrderReturnOrdersShippingDataSelectedAddresses { get; set; }
	}
	
	public class PlaceOrderReturnOrdersShippingDataAddress
	{
		
		/// <summary>
		/// Address ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addressId")]
		public string AddressId { get; set; }
		
		/// <summary>
		/// Type of address. For example, `Residential` or `Pickup`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addressType")]
		public string AddressType { get; set; }
		
		/// <summary>
		/// City of the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		/// <summary>
		/// Complement to the shipping address, in case it applies.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="complement")]
		public string Complement { get; set; }
		
		/// <summary>
		/// Three letter ISO code of the country of the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// Array containing two floats with geocoordinates, first longitude, then latitude.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="geoCoordinates")]
		public double[] GeoCoordinates { get; set; }
		
		/// <summary>
		/// Indicates whether address is disposable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isDisposable")]
		public System.Nullable<System.Boolean> IsDisposable { get; set; }
		
		/// <summary>
		/// Neighborhood of the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="neighborhood")]
		public string Neighborhood { get; set; }
		
		/// <summary>
		/// Number of the building, house or apartment in the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="number")]
		public string Number { get; set; }
		
		/// <summary>
		/// Postal code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postalCode")]
		public string PostalCode { get; set; }
		
		/// <summary>
		/// Name of the person who is going to receive the order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="receiverName")]
		public string ReceiverName { get; set; }
		
		/// <summary>
		/// Complement that might help locate the shipping address more precisely in case of delivery.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reference")]
		public string Reference { get; set; }
		
		/// <summary>
		/// State of the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		/// <summary>
		/// Street of the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="street")]
		public string Street { get; set; }
	}
	
	public class PlaceOrderReturnOrdersShippingDataAvailableAddresses
	{
		
		/// <summary>
		/// Address ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addressId")]
		public string AddressId { get; set; }
		
		/// <summary>
		/// Type of address. For example, `Residential` or `Pickup`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addressType")]
		public string AddressType { get; set; }
		
		/// <summary>
		/// City of the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		/// <summary>
		/// Complement to the shipping address, in case it applies.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="complement")]
		public string Complement { get; set; }
		
		/// <summary>
		/// Three letter ISO code of the country of the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// Array containing two floats with geocoordinates, first longitude, then latitude.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="geoCoordinates")]
		public double[] GeoCoordinates { get; set; }
		
		/// <summary>
		/// Indicates whether address is disposable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isDisposable")]
		public System.Nullable<System.Boolean> IsDisposable { get; set; }
		
		/// <summary>
		/// Neighborhood of the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="neighborhood")]
		public string Neighborhood { get; set; }
		
		/// <summary>
		/// Number of the building, house or apartment in the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="number")]
		public string Number { get; set; }
		
		/// <summary>
		/// Postal code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postalCode")]
		public string PostalCode { get; set; }
		
		/// <summary>
		/// Name of the person who is going to receive the order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="receiverName")]
		public string ReceiverName { get; set; }
		
		/// <summary>
		/// Complement that might help locate the shipping address more precisely in case of delivery.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reference")]
		public string Reference { get; set; }
		
		/// <summary>
		/// State of the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		/// <summary>
		/// Street of the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="street")]
		public string Street { get; set; }
	}
	
	public class PlaceOrderReturnOrdersShippingDataLogisticsInfo
	{
		
		/// <summary>
		/// Address ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addressId")]
		public string AddressId { get; set; }
		
		/// <summary>
		/// List of available delivery channels.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deliveryChannels")]
		public PlaceOrderReturnOrdersShippingDataLogisticsInfoDeliveryChannels[] PlaceOrderReturnOrdersShippingDataLogisticsInfoDeliveryChannels { get; set; }
		
		/// <summary>
		/// Item ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemId")]
		public string ItemId { get; set; }
		
		/// <summary>
		/// Index corresponding to the position of the object in the `items` array.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemIndex")]
		public System.Nullable<System.Int32> ItemIndex { get; set; }
		
		/// <summary>
		/// Delivery channel selected by the customer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selectedDeliveryChannel")]
		public string SelectedDeliveryChannel { get; set; }
		
		/// <summary>
		/// SLA selected by the customer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selectedSla")]
		public string SelectedSla { get; set; }
		
		/// <summary>
		/// List of countries that the item may be shipped to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shipsTo")]
		public string[] ShipsTo { get; set; }
		
		/// <summary>
		/// Information on available SLAs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="slas")]
		public PlaceOrderReturnOrdersShippingDataLogisticsInfoSlas[] PlaceOrderReturnOrdersShippingDataLogisticsInfoSlas { get; set; }
	}
	
	public class PlaceOrderReturnOrdersShippingDataLogisticsInfoDeliveryChannels
	{
		
		/// <summary>
		/// Delivery channel ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	public class PlaceOrderReturnOrdersShippingDataLogisticsInfoSlas
	{
		
		/// <summary>
		/// Delivery channel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deliveryChannel")]
		public string DeliveryChannel { get; set; }
		
		/// <summary>
		/// Information on each delivery ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deliveryIds")]
		public PlaceOrderReturnOrdersShippingDataLogisticsInfoSlasDeliveryIds[] PlaceOrderReturnOrdersShippingDataLogisticsInfoSlasDeliveryIds { get; set; }
		
		/// <summary>
		/// SLA ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// List price in cents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="listPrice")]
		public System.Nullable<System.Int32> ListPrice { get; set; }
		
		/// <summary>
		/// Estimate date of delivery.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lockTTL")]
		public string LockTTL { get; set; }
		
		/// <summary>
		/// SLA name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Pickup point distance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pickupDistance")]
		public System.Nullable<System.Int32> PickupDistance { get; set; }
		
		/// <summary>
		/// Pickup point ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pickupPointId")]
		public string PickupPointId { get; set; }
		
		/// <summary>
		/// Information on the pickup store.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pickupStoreInfo")]
		public PlaceOrderReturnOrdersShippingDataLogisticsInfoSlasPickupStoreInfo PickupStoreInfo { get; set; }
		
		/// <summary>
		/// Polygon name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="polygonName")]
		public string PolygonName { get; set; }
		
		/// <summary>
		/// Price in cents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="price")]
		public System.Nullable<System.Int32> Price { get; set; }
		
		/// <summary>
		/// Shipping estimate. For instance, Three business days will be represented `3bd`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shippingEstimate")]
		public string ShippingEstimate { get; set; }
		
		/// <summary>
		/// Shipping estimate date.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shippingEstimateDate")]
		public string ShippingEstimateDate { get; set; }
		
		/// <summary>
		/// Tax in cents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tax")]
		public System.Nullable<System.Int32> Tax { get; set; }
		
		/// <summary>
		/// Transit time. For instance, "three business days" is represented `3bd`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transitTime")]
		public string TransitTime { get; set; }
	}
	
	public class PlaceOrderReturnOrdersShippingDataLogisticsInfoSlasDeliveryIds
	{
		
		/// <summary>
		/// Courier ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="courierId")]
		public string CourierId { get; set; }
		
		/// <summary>
		/// Courier name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="courierName")]
		public string CourierName { get; set; }
		
		/// <summary>
		/// Warehouse ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dockId")]
		public string DockId { get; set; }
		
		/// <summary>
		/// Quantity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public System.Nullable<System.Int32> Quantity { get; set; }
		
		/// <summary>
		/// Warehouse ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="warehouseId")]
		public string WarehouseId { get; set; }
	}
	
	public class PlaceOrderReturnOrdersShippingDataLogisticsInfoSlasPickupStoreInfo
	{
		
		/// <summary>
		/// Additional information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additionalInfo")]
		public string AdditionalInfo { get; set; }
		
		/// <summary>
		/// Address information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address")]
		public PlaceOrderReturnOrdersShippingDataLogisticsInfoSlasPickupStoreInfoAddress Address { get; set; }
		
		/// <summary>
		/// Corresponding dock ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dockId")]
		public string DockId { get; set; }
		
		/// <summary>
		/// Friendly name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="friendlyName")]
		public string FriendlyName { get; set; }
		
		/// <summary>
		/// Indicates whether it is the pickup store.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isPickupStore")]
		public System.Nullable<System.Boolean> IsPickupStore { get; set; }
	}
	
	public class PlaceOrderReturnOrdersShippingDataLogisticsInfoSlasPickupStoreInfoAddress
	{
		
		/// <summary>
		/// Type of address. For example, `Residential` or `Pickup`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addressType")]
		public string AddressType { get; set; }
		
		/// <summary>
		/// City of the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		/// <summary>
		/// Complement to the shipping address, in case it applies.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="complement")]
		public string Complement { get; set; }
		
		/// <summary>
		/// Three letter ISO code of the country of the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// Array containing two floats with geocoordinates, first longitude, then latitude.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="geoCoordinates")]
		public double[] GeoCoordinates { get; set; }
		
		/// <summary>
		/// Neighborhood of the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="neighborhood")]
		public string Neighborhood { get; set; }
		
		/// <summary>
		/// Number of the building, house or apartment in the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="number")]
		public string Number { get; set; }
		
		/// <summary>
		/// Postal code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postalCode")]
		public string PostalCode { get; set; }
		
		/// <summary>
		/// Complement that might help locate the shipping address more precisely in case of delivery.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reference")]
		public string Reference { get; set; }
		
		/// <summary>
		/// State of the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		/// <summary>
		/// Street of the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="street")]
		public string Street { get; set; }
	}
	
	public class PlaceOrderReturnOrdersShippingDataSelectedAddresses
	{
		
		/// <summary>
		/// Address ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addressId")]
		public string AddressId { get; set; }
		
		/// <summary>
		/// Type of address. For example, `Residential` or `Pickup`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addressType")]
		public string AddressType { get; set; }
		
		/// <summary>
		/// City of the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		/// <summary>
		/// Complement to the shipping address, in case it applies.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="complement")]
		public string Complement { get; set; }
		
		/// <summary>
		/// Three letter ISO code of the country of the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// Array containing two floats with geocoordinates, first longitude, then latitude.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="geoCoordinates")]
		public double[] GeoCoordinates { get; set; }
		
		/// <summary>
		/// Indicates whether address is disposable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isDisposable")]
		public System.Nullable<System.Boolean> IsDisposable { get; set; }
		
		/// <summary>
		/// Neighborhood of the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="neighborhood")]
		public string Neighborhood { get; set; }
		
		/// <summary>
		/// Number of the building, house or apartment in the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="number")]
		public string Number { get; set; }
		
		/// <summary>
		/// Postal code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postalCode")]
		public string PostalCode { get; set; }
		
		/// <summary>
		/// Name of the person who is going to receive the order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="receiverName")]
		public string ReceiverName { get; set; }
		
		/// <summary>
		/// Complement that might help locate the shipping address more precisely in case of delivery.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reference")]
		public string Reference { get; set; }
		
		/// <summary>
		/// State of the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		/// <summary>
		/// Street of the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="street")]
		public string Street { get; set; }
	}
	
	public class PlaceOrderReturnOrdersTotals
	{
		
		/// <summary>
		/// Total ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Total name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Total value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Int32> Value { get; set; }
	}
	
	public class PlaceOrderReturnTransactionData
	{
		
		/// <summary>
		/// Template of the gateway callback path, which may later be used to send information about the transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gatewayCallbackTemplatePath")]
		public string GatewayCallbackTemplatePath { get; set; }
		
		/// <summary>
		/// Information on each merchant transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="merchantTransactions")]
		public PlaceOrderReturnTransactionDataMerchantTransactions[] PlaceOrderReturnTransactionDataMerchantTransactions { get; set; }
		
		/// <summary>
		/// Receiver URI.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="receiverUri")]
		public string ReceiverUri { get; set; }
	}
	
	public class PlaceOrderReturnTransactionDataMerchantTransactions
	{
		
		/// <summary>
		/// ID of the seller.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Name of the merchant responsible for the sale.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="merchantName")]
		public string MerchantName { get; set; }
		
		/// <summary>
		/// Information on each payment pertinent to the transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payments")]
		public PlaceOrderReturnTransactionDataMerchantTransactionsPayments[] PlaceOrderReturnTransactionDataMerchantTransactionsPayments { get; set; }
		
		/// <summary>
		/// ID of the transaction in the platform.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transactionId")]
		public string TransactionId { get; set; }
	}
	
	public class PlaceOrderReturnTransactionDataMerchantTransactionsPayments
	{
		
		/// <summary>
		/// Account ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
		
		/// <summary>
		/// Payment bin.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bin")]
		public string Bin { get; set; }
		
		/// <summary>
		/// Gift card ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="giftCardId")]
		public string GiftCardId { get; set; }
		
		/// <summary>
		/// Gift card provider.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="giftCardProvider")]
		public string GiftCardProvider { get; set; }
		
		/// <summary>
		/// Gift card redemption code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="giftCardRedemptionCode")]
		public string GiftCardRedemptionCode { get; set; }
		
		/// <summary>
		/// Payment system.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paymentSystem")]
		public string PaymentSystem { get; set; }
		
		/// <summary>
		/// Reference value over which interests may be applied.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="referenceValue")]
		public System.Nullable<System.Int32> ReferenceValue { get; set; }
		
		/// <summary>
		/// Token ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tokenId")]
		public string TokenId { get; set; }
		
		/// <summary>
		/// Total value to be paid in this payment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Int32> Value { get; set; }
	}
	
	public class GetClientProfileByEmailReturn
	{
		
		/// <summary>
		/// Available accounts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availableAccounts")]
		public string[] AvailableAccounts { get; set; }
		
		/// <summary>
		/// Information on each available address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availableAddresses")]
		public GetClientProfileByEmailReturnAvailableAddresses[] GetClientProfileByEmailReturnAvailableAddresses { get; set; }
		
		/// <summary>
		/// Indicates whether customer profile is complete.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isComplete")]
		public System.Nullable<System.Boolean> IsComplete { get; set; }
		
		/// <summary>
		/// Profile provider.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="profileProvider")]
		public string ProfileProvider { get; set; }
		
		/// <summary>
		/// Customer profile information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userProfile")]
		public GetClientProfileByEmailReturnUserProfile UserProfile { get; set; }
		
		/// <summary>
		/// Unique ID associated with the customer profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userProfileId")]
		public string UserProfileId { get; set; }
	}
	
	public class GetClientProfileByEmailReturnAvailableAddresses
	{
		
		/// <summary>
		/// Address ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addressId")]
		public string AddressId { get; set; }
		
		/// <summary>
		/// Address type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addressType")]
		public string AddressType { get; set; }
		
		/// <summary>
		/// City of the address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		/// <summary>
		/// Complement to the address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="complement")]
		public string Complement { get; set; }
		
		/// <summary>
		/// Country of the address. ISO three-letter code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// Array containing two floats with geocoordinates, first longitude, then latitude.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="geoCoordinates")]
		public double[] GeoCoordinates { get; set; }
		
		/// <summary>
		/// Indicates whether address is disposable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isDisposable")]
		public System.Nullable<System.Boolean> IsDisposable { get; set; }
		
		/// <summary>
		/// Neighborhood of the address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="neighborhood")]
		public string Neighborhood { get; set; }
		
		/// <summary>
		/// Number of the address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="number")]
		public string Number { get; set; }
		
		/// <summary>
		/// Name of the receiver.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="receiverName")]
		public string ReceiverName { get; set; }
		
		/// <summary>
		/// Reference that may help in the location of the address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reference")]
		public string Reference { get; set; }
		
		/// <summary>
		/// State of the address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		/// <summary>
		/// Street of the address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="street")]
		public string Street { get; set; }
	}
	
	public class GetClientProfileByEmailReturnUserProfile
	{
		
		/// <summary>
		/// Document. Used for corporate clients.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="corporateDocument")]
		public string CorporateDocument { get; set; }
		
		/// <summary>
		/// Name of the company. Used for corporate clients.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="corporateName")]
		public string CorporateName { get; set; }
		
		/// <summary>
		/// Telephone number. Used for corporate clients.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="corporatePhone")]
		public string CorporatePhone { get; set; }
		
		/// <summary>
		/// Customer class.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customerClass")]
		public string CustomerClass { get; set; }
		
		/// <summary>
		/// Document.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="document")]
		public string Document { get; set; }
		
		/// <summary>
		/// Document type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="documentType")]
		public string DocumentType { get; set; }
		
		/// <summary>
		/// Email address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// First name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firstName")]
		public string FirstName { get; set; }
		
		/// <summary>
		/// Indicates whether client is corporate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isCorporate")]
		public System.Nullable<System.Boolean> IsCorporate { get; set; }
		
		/// <summary>
		/// Last name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastName")]
		public string LastName { get; set; }
		
		/// <summary>
		/// Telephone number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phone")]
		public string Phone { get; set; }
		
		/// <summary>
		/// Profile complete when loading.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="profileCompleteOnLoading")]
		public string ProfileCompleteOnLoading { get; set; }
		
		/// <summary>
		/// Profile error when loading.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="profileErrorOnLoading")]
		public string ProfileErrorOnLoading { get; set; }
		
		/// <summary>
		/// State inscription. Used for corporate clients.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stateInscription")]
		public string StateInscription { get; set; }
		
		/// <summary>
		/// Trade name. Used for corporate clients.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tradeName")]
		public string TradeName { get; set; }
	}
	
	public class GetSellersByRegionReturn
	{
		
		/// <summary>
		/// Region ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Array with information on each seller retrieved for the given region.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sellers")]
		public GetSellersByRegionReturnSellers[] GetSellersByRegionReturnSellers { get; set; }
	}
	
	public class GetSellersByRegionReturnSellers
	{
		
		/// <summary>
		/// Seller ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Seller logo.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logo")]
		public string Logo { get; set; }
		
		/// <summary>
		/// Seller name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
