//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApiUsage
	{
		
		[System.Runtime.Serialization.DataMember(Name="endsAt")]
		public System.Nullable<System.DateTimeOffset> EndsAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="licenseId")]
		public string LicenseId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="organizationId")]
		public string OrganizationId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="planData")]
		public PlanData[] PlanData { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="predictionsMax")]
		public System.Nullable<System.Int64> PredictionsMax { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="predictionsUsed")]
		public System.Nullable<System.Int64> PredictionsUsed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startsAt")]
		public System.Nullable<System.DateTimeOffset> StartsAt { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PlanData
	{
		
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public System.Nullable<System.Int32> Amount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="plan")]
		public System.Nullable<PlanDataPlan> Plan { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source")]
		public System.Nullable<PlanDataSource> Source { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PlanDataPlan
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STARTER = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SFDC_1M_EDITION = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BRONZE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SILVER = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GOLD = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATASET_DOWNLOAD = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PlanDataSource
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SALESFORCE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HEROKU = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SF_AUTO_PROVISION = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SF_AUTO_PROVISION_BOUND = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApiUsageList
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ApiUsage[] Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
	}
	
	/// <summary>
	/// Contains additional attributes related to the task parameter. If the task parameter is table, the row and column IDs for the detected text are returned. If the task parameter is contact, the detected entity tags will be returned.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Attributes
	{
		
		[System.Runtime.Serialization.DataMember(Name="cellLocation")]
		public CellLocation CellLocation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="language")]
		public string Language { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pageNumber")]
		public string PageNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tag")]
		public string Tag { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public EntityObject Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CellLocation
	{
		
		/// <summary>
		/// Index of the column that contains the detected text.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="colIndex")]
		public System.Nullable<System.Int32> ColIndex { get; set; }
		
		/// <summary>
		/// Index of the row that contains the detected text.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rowIndex")]
		public System.Nullable<System.Int32> RowIndex { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EntityObject
	{
		
		[System.Runtime.Serialization.DataMember(Name="boundingBox")]
		public BoundingBox BoundingBox { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="entity")]
		public string Entity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BoundingBox
	{
		
		/// <summary>
		/// X-coordinate of the left side of the bounding box. The origin of the coordinate system is the top-left of the image. Number of pixels from the left edge of the image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxX")]
		public System.Nullable<System.Int32> MaxX { get; set; }
		
		/// <summary>
		/// Y-coordinate of the top of the bounding box. Number of pixels from the top edge of the image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxY")]
		public System.Nullable<System.Int32> MaxY { get; set; }
		
		/// <summary>
		/// X-coordinate of the right side of the bounding box. Number of pixels from the left edge of the image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minX")]
		public System.Nullable<System.Int32> MinX { get; set; }
		
		/// <summary>
		/// Y-coordinate of the bottom of the bounding box. Number of pixels from the top edge of the image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minY")]
		public System.Nullable<System.Int32> MinY { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Dataset
	{
		
		[System.Runtime.Serialization.DataMember(Name="available")]
		public System.Nullable<System.Boolean> Available { get; set; }
		
		/// <summary>
		/// Date and time that the dataset was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public long Id { get; set; }
		
		/// <summary>
		/// Contains the labels array that contains all the labels for the dataset.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labelSummary")]
		public LabelSummary LabelSummary { get; set; }
		
		/// <summary>
		/// Dataset language.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="language")]
		public string Language { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Number of duplicate images. This number includes duplicates in the .zip file from which the dataset was created plus the number of duplicate images from subsequent PUT calls to add images to the dataset.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numOfDuplicates")]
		public System.Nullable<System.Int32> NumOfDuplicates { get; set; }
		
		/// <summary>
		/// Object returned; in this case, dataset.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statusMsg")]
		public string StatusMsg { get; set; }
		
		/// <summary>
		/// Total number of examples in the dataset.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalExamples")]
		public System.Nullable<System.Int32> TotalExamples { get; set; }
		
		/// <summary>
		/// Total number of labels in the dataset.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalLabels")]
		public System.Nullable<System.Int32> TotalLabels { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updatedAt")]
		public System.Nullable<System.DateTimeOffset> UpdatedAt { get; set; }
	}
	
	/// <summary>
	/// Contains the labels array that contains all the labels for the dataset.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LabelSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public Label[] Labels { get; set; }
	}
	
	/// <summary>
	/// Contains information about the label with which the example is associated.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Label
	{
		
		/// <summary>
		/// ID of the dataset that the label belongs to.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="datasetId")]
		public long DatasetId { get; set; }
		
		/// <summary>
		/// ID of the label.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		/// <summary>
		/// Name of the label.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Number of examples that have the label.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numExamples")]
		public System.Nullable<System.Int64> NumExamples { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DatasetList
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Dataset[] Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeletionResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="deletedObjectId")]
		public string DeletedObjectId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="organizationId")]
		public string OrganizationId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="progress")]
		public System.Nullable<System.Double> Progress { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<DeletionResponseStatus> Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<DeletionResponseType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DeletionResponseStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUEUED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUNNING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCEEDED_WAITING_FOR_CACHE_REMOVAL = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCEEDED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KILLED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RETRY = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DeletionResponseType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATASET = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MODEL = 1,
	}
	
	/// <summary>
	/// label
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DetectionResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="boundingBox")]
		public BoundingBox BoundingBox { get; set; }
		
		/// <summary>
		/// Probability lable for the input. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
		
		/// <summary>
		/// Probability value for the input. Values are between 0�1.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="probability")]
		public System.Nullable<System.Single> Probability { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Example
	{
		
		/// <summary>
		/// Date and time that the example was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// ID of the example.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public long Id { get; set; }
		
		/// <summary>
		/// Contains information about the label with which the example is associated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="label")]
		public Label Label { get; set; }
		
		/// <summary>
		/// URL of the image in the dataset. This is a temporary URL that expires in 30 minutes. This URL can be used to display images that were uploaded to a dataset in a UI.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Name of the example.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Object returned; in this case, example.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ExampleList
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Example[] Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GenerateAccessTokenResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="access_token")]
		public string Access_token { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="expires_in")]
		public string Expires_in { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="refresh_token")]
		public string Refresh_token { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="token_type")]
		public string Token_type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ImageClassificationRequest
	{
		
		/// <summary>
		/// ID of the model that makes the prediction.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="modelId")]
		public string ModelId { get; set; }
		
		/// <summary>
		/// Number of probabilities to return.
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numResults")]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> NumResults { get; set; }
		
		/// <summary>
		/// The image contained in a base64 string.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sampleBase64Content")]
		public string SampleBase64Content { get; set; }
		
		/// <summary>
		/// String that you can pass in to tag the prediction. Optional. Can be any value, and is returned in the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sampleId")]
		public string SampleId { get; set; }
		
		/// <summary>
		/// URL of the image file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sampleLocation")]
		public string SampleLocation { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ImageClassificationResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="probabilities")]
		public LabelResult[] Probabilities { get; set; }
		
		/// <summary>
		/// Value passed in when the prediction call was made. Returned only if the sampleId request parameter is provided.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sampleId")]
		public string SampleId { get; set; }
	}
	
	/// <summary>
	/// label
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LabelResult
	{
		
		/// <summary>
		/// Probability lable for the input. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
		
		/// <summary>
		/// Probability value for the input. Values are between 0�1.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="probability")]
		public System.Nullable<System.Single> Probability { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IntentPredictRequest
	{
		
		/// <summary>
		/// Text for which you want to return an intent prediction.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="document")]
		public string Document { get; set; }
		
		/// <summary>
		/// ID of the model that makes the prediction. The model must have been created from a dataset with a type of text-sentiment.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="modelId")]
		public string ModelId { get; set; }
		
		/// <summary>
		/// Number of probabilities to return. 
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numResults")]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> NumResults { get; set; }
		
		/// <summary>
		/// String that you can pass in to tag the prediction. Optional. Can be any value, and is returned in the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sampleId")]
		public string SampleId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IntentPredictResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="probabilities")]
		public LabelResult[] Probabilities { get; set; }
		
		/// <summary>
		/// Value passed in when the prediction call was made. Returned only if the sampleId request parameter is provided.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sampleId")]
		public string SampleId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LearningCurve
	{
		
		/// <summary>
		/// Epoch to which the metrics correspond.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="epoch")]
		public string Epoch { get; set; }
		
		/// <summary>
		/// Prediction results for the set of data used to test the model during training.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="epochResults")]
		public string EpochResults { get; set; }
		
		/// <summary>
		/// Model metrics values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metricsData")]
		public string MetricsData { get; set; }
		
		/// <summary>
		/// Object returned; in this case, learningcurve.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LearningCurveList
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public LearningCurve[] Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Metrics
	{
		
		[System.Runtime.Serialization.DataMember(Name="algorithm")]
		public string Algorithm { get; set; }
		
		/// <summary>
		/// Date and time that the model was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// Model Id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="language")]
		public string Language { get; set; }
		
		/// <summary>
		/// Model metrics values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metricsData")]
		public string MetricsData { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Model
	{
		
		/// <summary>
		/// Algorithm used to create the model. Returned only when the modelType is image-detection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="algorithm")]
		public string Algorithm { get; set; }
		
		/// <summary>
		/// Date and time that the model was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// ID of the dataset trained to create the model.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="datasetId")]
		public long DatasetId { get; set; }
		
		/// <summary>
		/// Not available yet
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="datasetVersionId")]
		public long DatasetVersionId { get; set; }
		
		/// <summary>
		/// Reason the dataset training failed. Returned only if the training status is FAILED.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="failureMsg")]
		public string FailureMsg { get; set; }
		
		/// <summary>
		/// Model language inherited from the dataset language. For image datasets, default is N/A. For text datasets, default is en_US.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="language")]
		public string Language { get; set; }
		
		/// <summary>
		/// ID of the model. Contains letters and numbers.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="modelId")]
		public string ModelId { get; set; }
		
		/// <summary>
		/// Type of data from which the model was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modelType")]
		public string ModelType { get; set; }
		
		/// <summary>
		/// Name of the model.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Object returned; in this case, model.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
		
		/// <summary>
		/// How far the dataset training has progressed. Values are between 0�1.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="progress")]
		public double Progress { get; set; }
		
		/// <summary>
		/// Status of the model.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ModelStatus Status { get; set; }
		
		/// <summary>
		/// Date and time that the model was last updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updatedAt")]
		public System.Nullable<System.DateTimeOffset> UpdatedAt { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ModelStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUEUED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUNNING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCEEDED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KILLED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED_WITH_RETRIES = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ModelList
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Model[] Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OCRPredictResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="probabilities")]
		public OCRResult[] Probabilities { get; set; }
		
		/// <summary>
		/// Same value as request parameter. Returned only if the sampleId request parameter is provided.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sampleId")]
		public string SampleId { get; set; }
		
		/// <summary>
		/// Same value as request parameter. Returns text if the request parameter isn't supplied.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="task")]
		public string Task { get; set; }
	}
	
	/// <summary>
	/// Array of probabilities for the prediction.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OCRResult
	{
		
		/// <summary>
		/// Contains additional attributes related to the task parameter. If the task parameter is table, the row and column IDs for the detected text are returned. If the task parameter is contact, the detected entity tags will be returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public Attributes Attributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="boundingBox")]
		public BoundingBox BoundingBox { get; set; }
		
		/// <summary>
		/// Content of the detected text.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
		
		/// <summary>
		/// Probability value for the input. Values are between 0�1.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="probability")]
		public System.Nullable<System.Single> Probability { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ObjectDetectionRequest
	{
		
		/// <summary>
		/// ID of the model that makes the detection.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="modelId")]
		public string ModelId { get; set; }
		
		/// <summary>
		/// The image contained in a base64 string.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sampleBase64Content")]
		public string SampleBase64Content { get; set; }
		
		/// <summary>
		/// String that you can pass in to tag the prediction. Optional. Can be any value, and is returned in the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sampleId")]
		public string SampleId { get; set; }
		
		/// <summary>
		/// URL of the image file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sampleLocation")]
		public string SampleLocation { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ObjectDetectionResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="probabilities")]
		public DetectionResult[] Probabilities { get; set; }
		
		/// <summary>
		/// Value passed in when the prediction call was made. Returned only if the sampleId request parameter is provided.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sampleId")]
		public string SampleId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PredictionErrorResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SentimentPredictRequest
	{
		
		/// <summary>
		/// Text for which you want to return a sentiment prediction.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="document")]
		public string Document { get; set; }
		
		/// <summary>
		/// ID of the model that makes the prediction. The model must have been created from a dataset with a type of text-sentiment.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="modelId")]
		public string ModelId { get; set; }
		
		/// <summary>
		/// Number of probabilities to return. 
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numResults")]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> NumResults { get; set; }
		
		/// <summary>
		/// String that you can pass in to tag the prediction. Optional. Can be any value, and is returned in the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sampleId")]
		public string SampleId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SentimentPredictResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="probabilities")]
		public LabelResult[] Probabilities { get; set; }
		
		/// <summary>
		/// Value passed in when the prediction call was made. Returned only if the sampleId request parameter is provided.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sampleId")]
		public string SampleId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TrainResponse
	{
		
		/// <summary>
		/// Algorithm used to create the model. Returned only when the modelType is image-detection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="algorithm")]
		public string Algorithm { get; set; }
		
		/// <summary>
		/// Date and time that the model was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// ID of the dataset trained to create the model.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="datasetId")]
		public long DatasetId { get; set; }
		
		/// <summary>
		/// Not available yet
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="datasetVersionId")]
		public long DatasetVersionId { get; set; }
		
		/// <summary>
		/// Number of epochs used during training.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="epochs")]
		public System.Nullable<System.Int32> Epochs { get; set; }
		
		/// <summary>
		/// Reason the dataset training failed. Returned only if the training status is FAILED.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="failureMsg")]
		public string FailureMsg { get; set; }
		
		/// <summary>
		/// Model language inherited from the dataset language. For image datasets, default is N/A. For text datasets, default is en_US.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="language")]
		public string Language { get; set; }
		
		/// <summary>
		/// Learning rate used during training.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="learningRate")]
		public System.Nullable<System.Double> LearningRate { get; set; }
		
		/// <summary>
		/// ID of the model. Contains letters and numbers.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="modelId")]
		public string ModelId { get; set; }
		
		/// <summary>
		/// Type of data from which the model was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modelType")]
		public string ModelType { get; set; }
		
		/// <summary>
		/// Name of the model.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Object returned; in this case, training.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
		
		/// <summary>
		/// How far the dataset training has progressed. Values are between 0�1.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="progress")]
		public double Progress { get; set; }
		
		/// <summary>
		/// Where the training job is in the queue. This field appears in the response only if the status is QUEUED.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="queuePosition")]
		public System.Nullable<System.Int32> QueuePosition { get; set; }
		
		/// <summary>
		/// Status of the model.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ModelStatus Status { get; set; }
		
		/// <summary>
		/// Training parameters passed into the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trainParams")]
		public string TrainParams { get; set; }
		
		/// <summary>
		/// Returns null when you train a dataset. Training statistics are returned when the status is SUCCEEDED or FAILED.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trainStats")]
		public string TrainStats { get; set; }
		
		/// <summary>
		/// Date and time that the model was last updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updatedAt")]
		public System.Nullable<System.DateTimeOffset> UpdatedAt { get; set; }
	}
	
	/// <summary>
	/// JSON that contains parameters that specify how the model is created
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class V2LanguageTrainParams
	{
		
		/// <summary>
		/// Lets you specify the ratio of data used to train the dataset and the data used to test the model.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trainSplitRatio")]
		public System.Nullable<System.Single> TrainSplitRatio { get; set; }
		
		/// <summary>
		/// Lets you specify that feedback examples are included in the data to be trained to create the model.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="withFeedback")]
		public System.Nullable<System.Boolean> WithFeedback { get; set; }
		
		/// <summary>
		/// Lets you specify that a global dataset is used in addition to the specified dataset to create the model.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="withGlobalDatasetId")]
		public System.Nullable<System.Int64> WithGlobalDatasetId { get; set; }
	}
	
	/// <summary>
	/// JSON that contains parameters that specify how the model is created
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class V2VisionTrainParams
	{
		
		/// <summary>
		/// Lets you specify the ratio of data used to train the dataset and the data used to test the model.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trainSplitRatio")]
		public System.Nullable<System.Single> TrainSplitRatio { get; set; }
		
		/// <summary>
		/// Lets you specify that feedback examples are included in the data to be trained to create the model.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="withFeedback")]
		public System.Nullable<System.Boolean> WithFeedback { get; set; }
		
		/// <summary>
		/// Lets you specify that a global dataset is used in addition to the specified dataset to create the model.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="withGlobalDatasetId")]
		public System.Nullable<System.Int64> WithGlobalDatasetId { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Get API Isage
		/// Returns prediction usage on a monthly basis for the current calendar month and future months. Each apiusage object in the response corresponds to a calendar month in your plan.
		/// GetApiUsagePlansV2 v2/apiusage
		/// </summary>
		/// <returns>api usage</returns>
		public async Task<ApiUsageList> GetApiUsagePlansV2Async(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/apiusage";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ApiUsageList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get All Datasets
		/// Returns a list of datasets and their labels that were created by the current user. The response is sorted by dataset ID.
		/// ListDatasets v2/language/datasets
		/// </summary>
		/// <param name="offset">Index of the dataset from which you want to start paging</param>
		/// <param name="count">Number of datsets to return. Maximum valid value is 25. If you specify a number greater than 25, the call returns 25 datasets.</param>
		/// <param name="global">If true, returns all global datasets. Global datasets are public datasets that Salesforce provides.</param>
		/// <returns>Success</returns>
		public async Task<DatasetList> ListDatasetsAsync(string offset, string count, bool global, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/language/datasets?offset=" + (offset==null? "" : System.Uri.EscapeDataString(offset))+"&count=" + (count==null? "" : System.Uri.EscapeDataString(count))+"&global="+global;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DatasetList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a Dataset
		/// Deletes the specified dataset and associated labels and examples.
		/// DeleteDataset v2/language/datasets/{datasetId}
		/// </summary>
		/// <param name="datasetId">Dataset Id</param>
		/// <returns>Success</returns>
		public async Task<DeletionResponse> DeleteDatasetAsync(string datasetId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/language/datasets/"+ (datasetId==null? "" : System.Uri.EscapeDataString(datasetId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeletionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a Dataset
		/// Returns a single dataset.
		/// GetDataset v2/language/datasets/{datasetId}
		/// </summary>
		/// <param name="datasetId">Dataset Id</param>
		/// <returns>Success</returns>
		public async Task<Dataset> GetDatasetAsync(string datasetId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/language/datasets/"+ (datasetId==null? "" : System.Uri.EscapeDataString(datasetId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Dataset>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get All Examples
		/// Returns all the examples for the specified dataset,
		/// GetExamples v2/language/datasets/{datasetId}/examples
		/// </summary>
		/// <param name="datasetId">Dataset Id</param>
		/// <param name="offset">Index of the example from which you want to start paging.</param>
		/// <param name="count">Number of examples to return.</param>
		/// <param name="source">return examples that were created in the dataset as feedback</param>
		/// <returns>Success</returns>
		public async Task<ExampleList> GetExamplesAsync(string datasetId, string offset, string count, GetExamplesSource source, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/language/datasets/"+ (datasetId==null? "" : System.Uri.EscapeDataString(datasetId))+"/examples&offset=" + (offset==null? "" : System.Uri.EscapeDataString(offset))+"&count=" + (count==null? "" : System.Uri.EscapeDataString(count))+"&source=" + source;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ExampleList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get All Models
		/// Returns all models for the specified dataset.
		/// GetTrainedModels v2/language/datasets/{datasetId}/models
		/// </summary>
		/// <param name="offset">Index of the model from which you want to start paging.</param>
		/// <param name="count">Number of models to return.</param>
		/// <param name="datasetId">Dataset Id</param>
		/// <returns>Success</returns>
		public async Task<ModelList> GetTrainedModelsAsync(string offset, string count, string datasetId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/language/datasets/"+ (datasetId==null? "" : System.Uri.EscapeDataString(datasetId))+"/models?offset=" + (offset==null? "" : System.Uri.EscapeDataString(offset))+"&count=" + (count==null? "" : System.Uri.EscapeDataString(count));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ModelList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Deletion Status
		/// Returns the status of a language dataset or model deletion. When you delete a dataset or model, the deletion may not occur immediately. Use this call to find out when the deletion is complete.
		/// Get v2/language/deletion/{id}
		/// </summary>
		/// <param name="id">Deletion Id</param>
		/// <returns>deletion status</returns>
		public async Task<DeletionResponse> GetAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/language/deletion/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeletionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get All Examples for Label
		/// Returns all the examples for the specified label. Returns both uploaded examples and feedback examples.
		/// GetExamplesByLabel v2/language/examples
		/// </summary>
		/// <param name="labelId">Label Id</param>
		/// <param name="offset">Index of the example from which you want to start paging.</param>
		/// <param name="count">Number of examples to return.</param>
		/// <returns>Success</returns>
		public async Task<ExampleList> GetExamplesByLabelAsync(string labelId, string offset, string count, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/language/examples?labelId=" + (labelId==null? "" : System.Uri.EscapeDataString(labelId))+"&offset=" + (offset==null? "" : System.Uri.EscapeDataString(offset))+"&count=" + (count==null? "" : System.Uri.EscapeDataString(count));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ExampleList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Prediction for Intent
		/// Returns an intent prediction for the given string.
		/// IntentMultipart v2/language/intent
		/// </summary>
		/// <returns>Prediction Result</returns>
		public async Task<IntentPredictResponse> IntentMultipartAsync(IntentPredictRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/language/intent";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<IntentPredictResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a Model
		/// Deletes the specified model.
		/// DeleteModel v2/language/models/{modelId}
		/// </summary>
		/// <param name="modelId">Model Id</param>
		public async Task DeleteModelAsync(string modelId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/language/models/"+ (modelId==null? "" : System.Uri.EscapeDataString(modelId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Model Metrics
		/// Returns the metrics for a model
		/// GetTrainedModelMetrics v2/language/models/{modelId}
		/// </summary>
		/// <param name="modelId">Model Id</param>
		/// <returns>Model Metrics</returns>
		public async Task<Metrics> GetTrainedModelMetricsAsync(string modelId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/language/models/"+ (modelId==null? "" : System.Uri.EscapeDataString(modelId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Metrics>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Model Learning Curve
		/// Returns the metrics for each epoch in a model.
		/// GetTrainedModelLearningCurve v2/language/models/{modelId}/lc
		/// </summary>
		/// <param name="modelId">Model Id</param>
		/// <param name="offset">Index of the epoch from which you want to start paging</param>
		/// <param name="count">Number of epoch to return. Maximum valid value is 25.</param>
		/// <returns>Learning Curve</returns>
		public async Task<LearningCurveList> GetTrainedModelLearningCurveAsync(string modelId, string offset, string count, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/language/models/"+ (modelId==null? "" : System.Uri.EscapeDataString(modelId))+"/lc&offset=" + (offset==null? "" : System.Uri.EscapeDataString(offset))+"&count=" + (count==null? "" : System.Uri.EscapeDataString(count));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LearningCurveList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Prediction for Sentiment
		/// Returns a sentiment prediction for the given string.
		/// SentimentMultipart v2/language/sentiment
		/// </summary>
		/// <returns>Prediction Result</returns>
		public async Task<SentimentPredictResponse> SentimentMultipartAsync(SentimentPredictRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/language/sentiment";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SentimentPredictResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get Training Status
		/// Returns the status of a model's training process. Use the progress field to determine how far the training has progressed. When training completes successfully, the status is SUCCEEDED and the progress is 1.
		/// GetTrainStatusAndProgress v2/language/train/{modelId}
		/// </summary>
		/// <param name="modelId">Model Id</param>
		/// <returns>Training Status</returns>
		public async Task<TrainResponse> GetTrainStatusAndProgressAsync(string modelId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/language/train/"+ (modelId==null? "" : System.Uri.EscapeDataString(modelId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TrainResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a Refresh Token
		/// RevokeRefreshTokenV2 v2/oauth2/tokens/{token}
		/// </summary>
		/// <param name="token">the token to revoke</param>
		public async Task RevokeRefreshTokenV2Async(string token, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/oauth2/tokens/"+ (token==null? "" : System.Uri.EscapeDataString(token));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get All Datasets
		/// Returns a list of datasets and their labels that were created by the current user. The response is sorted by dataset ID.
		/// ListDatasets_1 v2/vision/datasets
		/// </summary>
		/// <param name="offset">Index of the dataset from which you want to start paging</param>
		/// <param name="count">Number of datsets to return. Maximum valid value is 25. If you specify a number greater than 25, the call returns 25 datasets.</param>
		/// <param name="global">If true, returns all global datasets. Global datasets are public datasets that Salesforce provides.</param>
		/// <returns>Success</returns>
		public async Task<DatasetList> ListDatasets_1Async(string offset, string count, bool global, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/vision/datasets?offset=" + (offset==null? "" : System.Uri.EscapeDataString(offset))+"&count=" + (count==null? "" : System.Uri.EscapeDataString(count))+"&global="+global;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DatasetList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a Dataset
		/// Deletes the specified dataset and associated labels and examples.
		/// DeleteDataset_1 v2/vision/datasets/{datasetId}
		/// </summary>
		/// <param name="datasetId">Dataset Id</param>
		public async Task DeleteDataset_1Async(string datasetId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/vision/datasets/"+ (datasetId==null? "" : System.Uri.EscapeDataString(datasetId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a Dataset
		/// Returns a single dataset.
		/// GetDataset_1 v2/vision/datasets/{datasetId}
		/// </summary>
		/// <param name="datasetId">Dataset Id</param>
		/// <returns>Success</returns>
		public async Task<Dataset> GetDataset_1Async(string datasetId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/vision/datasets/"+ (datasetId==null? "" : System.Uri.EscapeDataString(datasetId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Dataset>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get All Examples
		/// Returns all the examples for the specified dataset. By default, returns examples created by uploading them from a .zip file.
		/// GetExamples_1 v2/vision/datasets/{datasetId}/examples
		/// </summary>
		/// <param name="datasetId">Dataset Id</param>
		/// <param name="offset">Index of the example from which you want to start paging.</param>
		/// <param name="count">Number of examples to return.</param>
		/// <param name="source">return examples that were created in the dataset as feedback</param>
		/// <returns>Success</returns>
		public async Task<ExampleList> GetExamples_1Async(string datasetId, string offset, string count, GetExamplesSource source, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/vision/datasets/"+ (datasetId==null? "" : System.Uri.EscapeDataString(datasetId))+"/examples&offset=" + (offset==null? "" : System.Uri.EscapeDataString(offset))+"&count=" + (count==null? "" : System.Uri.EscapeDataString(count))+"&source=" + source;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ExampleList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get All Models
		/// Returns all models for the specified dataset.
		/// GetTrainedModels_1 v2/vision/datasets/{datasetId}/models
		/// </summary>
		/// <param name="offset">Index of the model from which you want to start paging.</param>
		/// <param name="count">Number of models to return.</param>
		/// <param name="datasetId">Dataset Id</param>
		/// <returns>Success</returns>
		public async Task<ModelList> GetTrainedModels_1Async(string offset, string count, string datasetId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/vision/datasets/"+ (datasetId==null? "" : System.Uri.EscapeDataString(datasetId))+"/models?offset=" + (offset==null? "" : System.Uri.EscapeDataString(offset))+"&count=" + (count==null? "" : System.Uri.EscapeDataString(count));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ModelList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Deletion Status
		/// Returns the status of an image dataset or model deletion. When you delete a dataset or model, the deletion may not occur immediately. Use this call to find out when the deletion is complete.
		/// Get_1 v2/vision/deletion/{id}
		/// </summary>
		/// <param name="id">Deletion Id</param>
		/// <returns>deletion status</returns>
		public async Task<DeletionResponse> Get_1Async(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/vision/deletion/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeletionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Detection with Image File
		/// Returns labels, probabilities, and bounding box coordinates for items detected in the specified local image file.
		/// DetectMultipart v2/vision/detect
		/// </summary>
		/// <returns>Detection Result</returns>
		public async Task<ObjectDetectionResponse> DetectMultipartAsync(ObjectDetectionRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/vision/detect";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ObjectDetectionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get All Examples for Label
		/// Returns all the examples for the specified label. Returns both uploaded examples and feedback examples.
		/// GetExamplesByLabel_1 v2/vision/examples
		/// </summary>
		/// <param name="labelId">Label Id</param>
		/// <param name="offset">Index of the example from which you want to start paging.</param>
		/// <param name="count">Number of examples to return.</param>
		/// <returns>Success</returns>
		public async Task<ExampleList> GetExamplesByLabel_1Async(string labelId, string offset, string count, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/vision/examples?labelId=" + (labelId==null? "" : System.Uri.EscapeDataString(labelId))+"&offset=" + (offset==null? "" : System.Uri.EscapeDataString(offset))+"&count=" + (count==null? "" : System.Uri.EscapeDataString(count));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ExampleList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a Model
		/// Deletes the specified model.
		/// DeleteModel_1 v2/vision/models/{modelId}
		/// </summary>
		public async Task DeleteModel_1Async(string modelId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/vision/models/"+ (modelId==null? "" : System.Uri.EscapeDataString(modelId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Model Metrics
		/// Returns the metrics for a model
		/// GetTrainedModelMetrics_1 v2/vision/models/{modelId}
		/// </summary>
		/// <returns>Model Metrics</returns>
		public async Task<Metrics> GetTrainedModelMetrics_1Async(string modelId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/vision/models/"+ (modelId==null? "" : System.Uri.EscapeDataString(modelId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Metrics>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Model Learning Curve
		/// Returns the metrics for each epoch in a model.
		/// GetTrainedModelLearningCurve_1 v2/vision/models/{modelId}/lc
		/// </summary>
		/// <param name="offset">Index of the epoch from which you want to start paging</param>
		/// <param name="count">Number of epoch to return. Maximum valid value is 25.</param>
		/// <returns>Learning Curve</returns>
		public async Task<LearningCurveList> GetTrainedModelLearningCurve_1Async(string modelId, string offset, string count, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/vision/models/"+ (modelId==null? "" : System.Uri.EscapeDataString(modelId))+"/lc&offset=" + (offset==null? "" : System.Uri.EscapeDataString(offset))+"&count=" + (count==null? "" : System.Uri.EscapeDataString(count));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LearningCurveList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Make Prediction
		/// Returns a prediction from an image or multi-label model for the specified image.
		/// PredictMultipart v2/vision/predict
		/// </summary>
		/// <returns>Prediction Result</returns>
		public async Task<ImageClassificationResponse> PredictMultipartAsync(ImageClassificationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/vision/predict";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ImageClassificationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get Training Status
		/// Returns the status of a model's training process. Use the progress field to determine how far the training has progressed. When training completes successfully, the status is SUCCEEDED and the progress is 1.
		/// GetTrainStatusAndProgress_1 v2/vision/train/{modelId}
		/// </summary>
		/// <returns>Training Status</returns>
		public async Task<TrainResponse> GetTrainStatusAndProgress_1Async(string modelId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/vision/train/"+ (modelId==null? "" : System.Uri.EscapeDataString(modelId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TrainResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum GetExamplesSource
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		all = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		feedback = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		upload = 2,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
