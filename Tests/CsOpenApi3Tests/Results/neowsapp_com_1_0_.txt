//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CloseApproachData
	{
		
		[System.Runtime.Serialization.DataMember(Name="close_approach_date")]
		public string Close_approach_date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="close_approach_date_full")]
		public string Close_approach_date_full { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="epoch_date_close_approach")]
		public System.Nullable<System.Int64> Epoch_date_close_approach { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="miss_distance")]
		public MissDistance Miss_distance { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="orbiting_body")]
		public string Orbiting_body { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="relative_velocity")]
		public RelVelocity Relative_velocity { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MissDistance
	{
		
		[System.Runtime.Serialization.DataMember(Name="astronomical")]
		public string Astronomical { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="kilometers")]
		public string Kilometers { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lunar")]
		public string Lunar { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="miles")]
		public string Miles { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RelVelocity
	{
		
		[System.Runtime.Serialization.DataMember(Name="kilometers_per_hour")]
		public string Kilometers_per_hour { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="miles_per_hour")]
		public string Miles_per_hour { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EstimatedDiameter
	{
		
		/// <summary>
		/// An estimate of the maximum size of the Asteroid - bases on the abosolute magnitude
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="estimated_diameter_max")]
		public System.Nullable<System.Double> Estimated_diameter_max { get; set; }
		
		/// <summary>
		/// An estimate of the minimum size of the Asteroid - bases on the abosolute magnitude
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="estimated_diameter_min")]
		public System.Nullable<System.Double> Estimated_diameter_min { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EstimatedDiameterContainer
	{
		
		[System.Runtime.Serialization.DataMember(Name="feet")]
		public EstimatedDiameter Feet { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="kilometers")]
		public EstimatedDiameter Kilometers { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meters")]
		public EstimatedDiameter Meters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="miles")]
		public EstimatedDiameter Miles { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class HashMap_string_List_NearEarthObject_
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NearEarthObject
	{
		
		/// <summary>
		/// Is a measure of an asteroids brightness
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="absolute_magnitude_h")]
		public System.Nullable<System.Double> Absolute_magnitude_h { get; set; }
		
		/// <summary>
		/// Close approach information of the Asteroid
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="close_approach_data")]
		public CloseApproachData[] Close_approach_data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="designation")]
		public string Designation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="estimated_diameter")]
		public EstimatedDiameterContainer Estimated_diameter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="is_potentially_hazardous_asteroid")]
		public System.Nullable<System.Boolean> Is_potentially_hazardous_asteroid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="is_sentry_object")]
		public System.Nullable<System.Boolean> Is_sentry_object { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name_limited")]
		public string Name_limited { get; set; }
		
		/// <summary>
		/// A Link to the NASA JPL Small-Body Database website
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nasa_jpl_url")]
		public string Nasa_jpl_url { get; set; }
		
		/// <summary>
		/// The reference ID of the Asteroid - This correlates to the SPK ID for the JPL NEO data
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="neo_reference_id")]
		public string Neo_reference_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="orbital_data")]
		public OrbitalData Orbital_data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sentry_data")]
		public string Sentry_data { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrbitalData
	{
		
		[System.Runtime.Serialization.DataMember(Name="aphelion_distance")]
		public string Aphelion_distance { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ascending_node_longitude")]
		public string Ascending_node_longitude { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data_arc_in_days")]
		public System.Nullable<System.Int64> Data_arc_in_days { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="eccentricity")]
		public string Eccentricity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="epoch_osculation")]
		public string Epoch_osculation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="equinox")]
		public string Equinox { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="first_observation_date")]
		public string First_observation_date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="inclination")]
		public string Inclination { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="jupiter_tisserand_invariant")]
		public string Jupiter_tisserand_invariant { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_observation_date")]
		public string Last_observation_date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mean_anomaly")]
		public string Mean_anomaly { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mean_motion")]
		public string Mean_motion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="minimum_orbit_intersection")]
		public string Minimum_orbit_intersection { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="observations_used")]
		public System.Nullable<System.Int64> Observations_used { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="orbit_class")]
		public OrbitClass Orbit_class { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="orbit_determination_date")]
		public string Orbit_determination_date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="orbit_id")]
		public string Orbit_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="orbit_uncertainty")]
		public string Orbit_uncertainty { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="orbital_period")]
		public string Orbital_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="perihelion_argument")]
		public string Perihelion_argument { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="perihelion_distance")]
		public string Perihelion_distance { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="perihelion_time")]
		public string Perihelion_time { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="semi_major_axis")]
		public string Semi_major_axis { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrbitClass
	{
		
		[System.Runtime.Serialization.DataMember(Name="orbit_class_description")]
		public string Orbit_class_description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="orbit_class_range")]
		public string Orbit_class_range { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="orbit_class_type")]
		public System.Nullable<OrbitClassOrbit_class_type> Orbit_class_type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OrbitClassOrbit_class_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IEO = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ATE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APO = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AMO = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MCA = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IMB = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MBA = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OMB = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TJN = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CEN = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TNO = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PAA = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HYA = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HYP = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PAR = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COM = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JFC = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HTC = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ETC = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CTC = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JFc = 20,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NearEarthObjectList
	{
		
		/// <summary>
		/// Number of NEOs in list
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="element_count")]
		public System.Nullable<System.Int32> Element_count { get; set; }
		
		/// <summary>
		/// Hypermedia links to collection
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="links")]
		public string Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="near_earth_objects")]
		public HashMap_string_List_NearEarthObject_ Near_earth_objects { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PageMetaData
	{
		
		[System.Runtime.Serialization.DataMember(Name="number")]
		public System.Nullable<System.Int64> Number { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="size")]
		public System.Nullable<System.Int64> Size { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_elements")]
		public System.Nullable<System.Int64> Total_elements { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_pages")]
		public System.Nullable<System.Int64> Total_pages { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SentryImpactRiskObject
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Palermo_scale_max { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="absolute_magnitude")]
		public string Absolute_magnitude { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="average_lunar_distance")]
		public System.Nullable<System.Double> Average_lunar_distance { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="designation")]
		public string Designation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="estimated_diameter")]
		public string Estimated_diameter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fullname")]
		public string Fullname { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="impact_probability")]
		public string Impact_probability { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="is_active_sentry_object")]
		public System.Nullable<System.Boolean> Is_active_sentry_object { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_obs")]
		public string Last_obs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_obs_jd")]
		public string Last_obs_jd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="palermo_scale_ave")]
		public string Palermo_scale_ave { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="potential_impacts")]
		public string Potential_impacts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="removal_date")]
		public string Removal_date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sentryId")]
		public string SentryId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="torino_scale")]
		public string Torino_scale { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="v_infinity")]
		public string V_infinity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="year_range_max")]
		public string Year_range_max { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="year_range_min")]
		public string Year_range_min { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SentryObjectPagingDto
	{
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public string Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page")]
		public PageMetaData Page { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sentry_objects")]
		public SentryImpactRiskObject[] Sentry_objects { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Statistics
	{
		
		/// <summary>
		/// Number of Close Approach listings across all NEOs listed in NeoWs
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="close_approach_count")]
		public System.Nullable<System.Int64> Close_approach_count { get; set; }
		
		/// <summary>
		/// TimeStamp the last time the DB was updated
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="last_updated")]
		public string Last_updated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nasa_jpl_url")]
		public URL Nasa_jpl_url { get; set; }
		
		/// <summary>
		/// Number of NearEarthObjects listed in NeoWs
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="near_earth_object_count")]
		public System.Nullable<System.Int64> Near_earth_object_count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string Source { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class URL
	{
		
		[System.Runtime.Serialization.DataMember(Name="authority")]
		public string Authority { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="content")]
		public string Content { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultPort")]
		public System.Nullable<System.Int32> DefaultPort { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="file")]
		public string File { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="host")]
		public string Host { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="path")]
		public string Path { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="port")]
		public System.Nullable<System.Int32> Port { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="protocol")]
		public string Protocol { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="query")]
		public string Query { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ref")]
		public string Ref { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userInfo")]
		public string UserInfo { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Find Near Earth Objects by date
		/// Get a list of Near Earth Objects within a date range, The max range in one query is 7 days
		/// RetrieveNearEarthObjectFeed rest/v1/feed
		/// </summary>
		/// <param name="start_date">Start of date range search, format: yyyy-MM-dd - (ex: 2015-04-28)</param>
		/// <param name="end_date">End of date range search, format: yyyy-MM-dd - (ex: 2015-04-28). If left off search will extends 7 days from start_date</param>
		/// <param name="detailed">detailed</param>
		/// <returns>OK</returns>
		public async Task<NearEarthObjectList> RetrieveNearEarthObjectFeedAsync(string start_date, string end_date, bool detailed, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "rest/v1/feed?start_date=" + (start_date==null? "" : System.Uri.EscapeDataString(start_date))+"&end_date=" + (end_date==null? "" : System.Uri.EscapeDataString(end_date))+"&detailed="+detailed;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<NearEarthObjectList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Find Near Earth Objects for today
		/// Get a list of Near Earth Objects for today
		/// RetrieveNEOFeedToday rest/v1/feed/today
		/// </summary>
		/// <param name="detailed">detailed</param>
		/// <returns>OK</returns>
		public async Task<NearEarthObjectList> RetrieveNEOFeedTodayAsync(bool detailed, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "rest/v1/feed/today?detailed="+detailed;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<NearEarthObjectList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Browse the Near Earth Objects service
		/// Retieve a paginated list of Near Earth Objects
		/// BrowseNearEarthObjects rest/v1/neo/browse
		/// </summary>
		/// <param name="page">page</param>
		/// <param name="size">size</param>
		/// <returns>OK</returns>
		public async Task<NearEarthObject> BrowseNearEarthObjectsAsync(int page, int size, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "rest/v1/neo/browse?page="+page+"&size="+size;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<NearEarthObject>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve Sentry (Impact Risk ) Near Earth Objects
		/// Retrieves Near Earth Objects listed in the NASA sentry data set
		/// RetrieveSentryRiskData rest/v1/neo/sentry
		/// </summary>
		/// <param name="is_active">show current list of Sentry objects, or show removed Sentry objects</param>
		/// <param name="page">page</param>
		/// <param name="size">size</param>
		/// <returns>OK</returns>
		public async Task<SentryObjectPagingDto> RetrieveSentryRiskDataAsync(bool is_active, int page, int size, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "rest/v1/neo/sentry?is_active="+is_active+"&page="+page+"&size="+size;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SentryObjectPagingDto>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve Sentry (Impact Risk ) Near Earth Objectby ID
		/// Retrieves Sentry Near Earth Object by ID
		/// RetrieveSentryRiskDataById rest/v1/neo/sentry/{asteroid_id}
		/// </summary>
		/// <param name="asteroid_id">ID of NearEarth object.  ID can be SPK_ID, Asteroid des (designation) or Sentry ID</param>
		/// <returns>OK</returns>
		public async Task<SentryImpactRiskObject> RetrieveSentryRiskDataByIdAsync(string asteroid_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "rest/v1/neo/sentry/"+ (asteroid_id==null? "" : System.Uri.EscapeDataString(asteroid_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SentryImpactRiskObject>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Find Near Earth Objects by id
		/// Retrieve a Near Earth Objects with a given id
		/// RetrieveNearEarthObjectById rest/v1/neo/{asteroid_id}
		/// </summary>
		/// <param name="asteroid_id">ID of Near Earth Object - (ex: 3729835)</param>
		/// <returns>OK</returns>
		public async Task<NearEarthObject> RetrieveNearEarthObjectByIdAsync(string asteroid_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "rest/v1/neo/"+ (asteroid_id==null? "" : System.Uri.EscapeDataString(asteroid_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<NearEarthObject>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the Near Earth Object data set totals
		/// retrieveCurrentNeoStatistics
		/// RetrieveCurrentNeoStatistics rest/v1/stats
		/// </summary>
		/// <returns>OK</returns>
		public async Task<Statistics> RetrieveCurrentNeoStatisticsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "rest/v1/stats";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Statistics>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
