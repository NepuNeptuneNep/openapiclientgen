//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AssociateExternalConnectionResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="repository")]
		public RepositoryDescription Repository { get; set; }
	}
	
	/// <summary>
	///  The details of a repository stored in CodeArtifact. A CodeArtifact repository contains a set of package versions, each of which maps to a set of assets. Repositories are polyglotâ€”a single repository can contain packages of any supported type. Each repository exposes endpoints for fetching and publishing packages using tools like the <code>npm</code> CLI, the Maven CLI (<code>mvn</code>), and <code>pip</code>. You can create up to 100 repositories per Amazon Web Services account. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RepositoryDescription
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="administratorAccount")]
		public string AdministratorAccount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="domainName")]
		public string DomainName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="domainOwner")]
		public string DomainOwner { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="upstreams")]
		public UpstreamRepositoryInfo[] Upstreams { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="externalConnections")]
		public RepositoryExternalConnectionInfo[] ExternalConnections { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdTime")]
		public System.DateTimeOffset CreatedTime { get; set; }
	}
	
	/// <summary>
	///  Information about an upstream repository. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpstreamRepositoryInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="repositoryName")]
		public string RepositoryName { get; set; }
	}
	
	/// <summary>
	///  Contains information about the external connection of a repository. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RepositoryExternalConnectionInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="externalConnectionName")]
		public string ExternalConnectionName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="packageFormat")]
		public PackageFormat PackageFormat { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ExternalConnectionStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PackageFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		npm = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pypi = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		maven = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		nuget = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		generic = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ExternalConnectionStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Available = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccessDeniedException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConflictException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InternalServerException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResourceNotFoundException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ServiceQuotaExceededException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ThrottlingException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ValidationException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CopyPackageVersionsResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="successfulVersions")]
		public SuccessfulPackageVersionInfoMap SuccessfulVersions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="failedVersions")]
		public PackageVersionErrorMap FailedVersions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SuccessfulPackageVersionInfoMap
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PackageVersionErrorMap
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateDomainResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="domain")]
		public DomainDescription Domain { get; set; }
	}
	
	/// <summary>
	///  Information about a domain. A domain is a container for repositories. When you create a domain, it is empty until you add one or more repositories. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DomainDescription
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="owner")]
		public string Owner { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public DomainStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdTime")]
		public System.DateTimeOffset CreatedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="encryptionKey")]
		public string EncryptionKey { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="repositoryCount")]
		public System.Nullable<System.Int32> RepositoryCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="assetSizeBytes")]
		public System.Nullable<System.Int32> AssetSizeBytes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="s3BucketArn")]
		public string S3BucketArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DomainStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Active = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleted = 1,
	}
	
	/// <summary>
	/// A tag is a key-value pair that can be used to manage, search for, or filter resources in CodeArtifact.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Tag
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateRepositoryResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="repository")]
		public RepositoryDescription Repository { get; set; }
	}
	
	/// <summary>
	///  Information about an upstream repository. A list of <code>UpstreamRepository</code> objects is an input parameter to <a href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_CreateRepository.html">CreateRepository</a> and <a href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_UpdateRepository.html">UpdateRepository</a>. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpstreamRepository
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="repositoryName")]
		public string RepositoryName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteDomainResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="domain")]
		public DomainDescription Domain { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteDomainPermissionsPolicyResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="policy")]
		public ResourcePolicy Policy { get; set; }
	}
	
	/// <summary>
	///  An CodeArtifact resource policy that contains a resource ARN, document details, and a revision. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResourcePolicy
	{
		
		[System.Runtime.Serialization.DataMember(Name="resourceArn")]
		public string ResourceArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="revision")]
		public string Revision { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="document")]
		public string Document { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeletePackageResult
	{
		
		/// <summary>
		///  Details about a package, including its format, namespace, and name. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deletedPackage")]
		public PackageSummary DeletedPackage { get; set; }
	}
	
	/// <summary>
	///  Details about a package, including its format, namespace, and name. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PackageSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="format")]
		public PackageFormat Format { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="namespace")]
		public string Namespace { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="package")]
		public string Package { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="originConfiguration")]
		public PackageOriginConfiguration OriginConfiguration { get; set; }
	}
	
	/// <summary>
	/// Details about the package origin configuration of a package.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PackageOriginConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="restrictions")]
		public PackageOriginRestrictions Restrictions { get; set; }
	}
	
	/// <summary>
	/// Details about the origin restrictions set on the package. The package origin restrictions determine how new versions of a package can be added to a specific repository.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PackageOriginRestrictions
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="publish")]
		public AllowPublish Publish { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="upstream")]
		public AllowPublish Upstream { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AllowPublish
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALLOW = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BLOCK = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeletePackageVersionsResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="successfulVersions")]
		public SuccessfulPackageVersionInfoMap SuccessfulVersions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="failedVersions")]
		public PackageVersionErrorMap FailedVersions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteRepositoryResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="repository")]
		public RepositoryDescription Repository { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteRepositoryPermissionsPolicyResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="policy")]
		public ResourcePolicy Policy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeDomainResult
	{
		
		/// <summary>
		///  Information about a domain. A domain is a container for repositories. When you create a domain, it is empty until you add one or more repositories. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="domain")]
		public DomainDescription Domain { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribePackageResult
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="package")]
		public PackageDescription Package { get; set; }
	}
	
	/// <summary>
	/// Details about a package.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PackageDescription
	{
		
		[System.Runtime.Serialization.DataMember(Name="format")]
		public PackageFormat Format { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="namespace")]
		public string Namespace { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="originConfiguration")]
		public PackageOriginConfiguration OriginConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribePackageVersionResult
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="packageVersion")]
		public PackageVersionDescription PackageVersion { get; set; }
	}
	
	/// <summary>
	///  Details about a package version. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PackageVersionDescription
	{
		
		[System.Runtime.Serialization.DataMember(Name="format")]
		public PackageFormat Format { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="namespace")]
		public string Namespace { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="packageName")]
		public string PackageName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="summary")]
		public string Summary { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="homePage")]
		public string HomePage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceCodeRepository")]
		public string SourceCodeRepository { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="publishedTime")]
		public System.DateTimeOffset PublishedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="licenses")]
		public LicenseInfo[] Licenses { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="revision")]
		public string Revision { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public PackageVersionStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="origin")]
		public PackageVersionOrigin Origin { get; set; }
	}
	
	/// <summary>
	///  Details of the license data. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LicenseInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PackageVersionStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Published = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unfinished = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unlisted = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Archived = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disposed = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleted = 5,
	}
	
	/// <summary>
	/// Information about how a package version was added to a repository.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PackageVersionOrigin
	{
		
		[System.Runtime.Serialization.DataMember(Name="domainEntryPoint")]
		public DomainEntryPoint DomainEntryPoint { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="originType")]
		public PackageVersionOriginType OriginType { get; set; }
	}
	
	/// <summary>
	/// Information about how a package originally entered the CodeArtifact domain. For packages published directly to CodeArtifact, the entry point is the repository it was published to. For packages ingested from an external repository, the entry point is the external connection that it was ingested from. An external connection is a CodeArtifact repository that is connected to an external repository such as the npm registry or NuGet gallery.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DomainEntryPoint
	{
		
		[System.Runtime.Serialization.DataMember(Name="repositoryName")]
		public string RepositoryName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="externalConnectionName")]
		public string ExternalConnectionName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PackageVersionOriginType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERNAL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXTERNAL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeRepositoryResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="repository")]
		public RepositoryDescription Repository { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DisassociateExternalConnectionResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="repository")]
		public RepositoryDescription Repository { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DisposePackageVersionsResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="successfulVersions")]
		public SuccessfulPackageVersionInfoMap SuccessfulVersions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="failedVersions")]
		public PackageVersionErrorMap FailedVersions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetAuthorizationTokenResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="authorizationToken")]
		public string AuthorizationToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="expiration")]
		public System.DateTimeOffset Expiration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetDomainPermissionsPolicyResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="policy")]
		public ResourcePolicy Policy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetPackageVersionAssetResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="asset")]
		public string Asset { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetPackageVersionReadmeResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="format")]
		public PackageFormat Format { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="namespace")]
		public string Namespace { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="package")]
		public string Package { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="versionRevision")]
		public string VersionRevision { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="readme")]
		public string Readme { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetRepositoryEndpointResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="repositoryEndpoint")]
		public string RepositoryEndpoint { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetRepositoryPermissionsPolicyResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="policy")]
		public ResourcePolicy Policy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListDomainsResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="domains")]
		public DomainSummary[] Domains { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	///  Information about a domain, including its name, Amazon Resource Name (ARN), and status. The <a href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_ListDomains.html">ListDomains</a> operation returns a list of <code>DomainSummary</code> objects. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DomainSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="owner")]
		public string Owner { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public DomainStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdTime")]
		public System.DateTimeOffset CreatedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="encryptionKey")]
		public string EncryptionKey { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListPackageVersionAssetsResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="format")]
		public PackageFormat Format { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="namespace")]
		public string Namespace { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="package")]
		public string Package { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="versionRevision")]
		public string VersionRevision { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="assets")]
		public AssetSummary[] Assets { get; set; }
	}
	
	/// <summary>
	///  Contains details about a package version asset. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AssetSummary
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="size")]
		public System.Nullable<System.Int32> Size { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hashes")]
		public AssetHashes Hashes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AssetHashes
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListPackageVersionDependenciesResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="format")]
		public PackageFormat Format { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="namespace")]
		public string Namespace { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="package")]
		public string Package { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="versionRevision")]
		public string VersionRevision { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dependencies")]
		public PackageDependency[] Dependencies { get; set; }
	}
	
	/// <summary>
	///  Details about a package dependency. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PackageDependency
	{
		
		[System.Runtime.Serialization.DataMember(Name="namespace")]
		public string Namespace { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="package")]
		public string Package { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dependencyType")]
		public string DependencyType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="versionRequirement")]
		public string VersionRequirement { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListPackageVersionsResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="defaultDisplayVersion")]
		public string DefaultDisplayVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="format")]
		public PackageFormat Format { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="namespace")]
		public string Namespace { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="package")]
		public string Package { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="versions")]
		public PackageVersionSummary[] Versions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	///  Details about a package version, including its status, version, and revision. The <a href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_ListPackageVersions.html">ListPackageVersions</a> operation returns a list of <code>PackageVersionSummary</code> objects. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PackageVersionSummary
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="revision")]
		public string Revision { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public PackageVersionStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="origin")]
		public PackageVersionOrigin Origin { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListPackagesResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="packages")]
		public PackageSummary[] Packages { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListRepositoriesResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="repositories")]
		public RepositorySummary[] Repositories { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	///  Details about a repository, including its Amazon Resource Name (ARN), description, and domain information. The <a href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_ListRepositories.html">ListRepositories</a> operation returns a list of <code>RepositorySummary</code> objects. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RepositorySummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="administratorAccount")]
		public string AdministratorAccount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="domainName")]
		public string DomainName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="domainOwner")]
		public string DomainOwner { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdTime")]
		public System.DateTimeOffset CreatedTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListRepositoriesInDomainResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="repositories")]
		public RepositorySummary[] Repositories { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTagsForResourceResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PublishPackageVersionResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="format")]
		public PackageFormat Format { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="namespace")]
		public string Namespace { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="package")]
		public string Package { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="versionRevision")]
		public string VersionRevision { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public PackageVersionStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="asset")]
		public AssetSummary Asset { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PutDomainPermissionsPolicyResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="policy")]
		public ResourcePolicy Policy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PutPackageOriginConfigurationResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="originConfiguration")]
		public PackageOriginConfiguration OriginConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AllowUpstream
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALLOW = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BLOCK = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PutRepositoryPermissionsPolicyResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="policy")]
		public ResourcePolicy Policy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TagResourceResult
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UntagResourceResult
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdatePackageVersionsStatusResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="successfulVersions")]
		public SuccessfulPackageVersionInfoMap SuccessfulVersions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="failedVersions")]
		public PackageVersionErrorMap FailedVersions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateRepositoryResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="repository")]
		public RepositoryDescription Repository { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AssociateExternalConnectionRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PackageVersionRevisionMap
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CopyPackageVersionsRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="versions")]
		public string[] Versions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="versionRevisions")]
		public PackageVersionRevisionMap VersionRevisions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="allowOverwrite")]
		public System.Nullable<System.Boolean> AllowOverwrite { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="includeFromUpstream")]
		public System.Nullable<System.Boolean> IncludeFromUpstream { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateDomainRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="encryptionKey")]
		public string EncryptionKey { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateRepositoryRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="upstreams")]
		public UpstreamRepository[] Upstreams { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteDomainPermissionsPolicyRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteDomainRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeletePackageRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeletePackageVersionsRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="versions")]
		public string[] Versions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="expectedStatus")]
		public PackageVersionStatus ExpectedStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteRepositoryPermissionsPolicyRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteRepositoryRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeDomainRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribePackageRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribePackageVersionRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeRepositoryRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DisassociateExternalConnectionRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DisposePackageVersionsRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="versions")]
		public string[] Versions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="versionRevisions")]
		public PackageVersionRevisionMap VersionRevisions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="expectedStatus")]
		public PackageVersionStatus ExpectedStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetAuthorizationTokenRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetDomainPermissionsPolicyRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetPackageVersionAssetRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetPackageVersionReadmeRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetRepositoryEndpointRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetRepositoryPermissionsPolicyRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum HashAlgorithm
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MD5 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SHA-1")]
		SHAMinus1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SHA-256")]
		SHAMinus256 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SHA-512")]
		SHAMinus512 = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListDomainsRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListPackageVersionAssetsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListPackageVersionDependenciesRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PackageVersionSortType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PUBLISHED_TIME = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListPackageVersionsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListPackagesRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListRepositoriesInDomainRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListRepositoriesRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTagsForResourceRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PackageVersionErrorCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALREADY_EXISTS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MISMATCHED_REVISION = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MISMATCHED_STATUS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_ALLOWED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_FOUND = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SKIPPED = 5,
	}
	
	/// <summary>
	/// l An error associated with package. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PackageVersionError
	{
		
		[System.Runtime.Serialization.DataMember(Name="errorCode")]
		public PackageVersionErrorCode ErrorCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errorMessage")]
		public string ErrorMessage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PublishPackageVersionRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="assetContent")]
		public string AssetContent { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PutDomainPermissionsPolicyRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="domain")]
		public string Domain { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="domainOwner")]
		public string DomainOwner { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="policyRevision")]
		public string PolicyRevision { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="policyDocument")]
		public string PolicyDocument { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PutPackageOriginConfigurationRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="restrictions")]
		public PackageOriginRestrictions Restrictions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PutRepositoryPermissionsPolicyRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="policyRevision")]
		public string PolicyRevision { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="policyDocument")]
		public string PolicyDocument { get; set; }
	}
	
	/// <summary>
	///  Contains the revision and status of a package version. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SuccessfulPackageVersionInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="revision")]
		public string Revision { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public PackageVersionStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TagResourceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UntagResourceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tagKeys")]
		public string[] TagKeys { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdatePackageVersionsStatusRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="versions")]
		public string[] Versions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="versionRevisions")]
		public PackageVersionRevisionMap VersionRevisions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="expectedStatus")]
		public PackageVersionStatus ExpectedStatus { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="targetStatus")]
		public PackageVersionStatus TargetStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateRepositoryRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="upstreams")]
		public UpstreamRepository[] Upstreams { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// <p>Adds an existing external connection to a repository. One external connection is allowed per repository.</p> <note> <p>A repository can have one or more upstream repositories, or an external connection.</p> </note>
		/// AssociateExternalConnection v1/repository/external-connection#domain&repository&external-connection
		/// </summary>
		/// <param name="domain">The name of the domain that contains the repository.
		/// Min length: 2
		/// Max length: 50
		// </param>
		/// <param name="domain_owner"> The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include dashes or spaces. 
		/// Min length: 12
		/// Max length: 12
		// </param>
		/// <param name="repository"> The name of the repository to which the external connection is added. 
		/// Min length: 2
		/// Max length: 100
		// </param>
		/// <param name="external_connection"><p> The name of the external connection to add to the repository. The following values are supported: </p> <ul> <li> <p> <code>public:npmjs</code> - for the npm public repository. </p> </li> <li> <p> <code>public:nuget-org</code> - for the NuGet Gallery. </p> </li> <li> <p> <code>public:pypi</code> - for the Python Package Index. </p> </li> <li> <p> <code>public:maven-central</code> - for Maven Central. </p> </li> <li> <p> <code>public:maven-googleandroid</code> - for the Google Android repository. </p> </li> <li> <p> <code>public:maven-gradleplugins</code> - for the Gradle plugins repository. </p> </li> <li> <p> <code>public:maven-commonsware</code> - for the CommonsWare Android repository. </p> </li> <li> <p> <code>public:maven-clojars</code> - for the Clojars repository. </p> </li> </ul>
		/// Min length: 2
		/// Max length: 100
		// </param>
		/// <returns>Success</returns>
		public async Task<AssociateExternalConnectionResult> AssociateExternalConnectionAsync(string domain, string domain_owner, string repository, string external_connection, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/repository/external-connection#domain&repository&external-connection?domain=" + (domain==null? "" : System.Uri.EscapeDataString(domain))+"&domain-owner=" + (domain_owner==null? "" : System.Uri.EscapeDataString(domain_owner))+"&repository=" + (repository==null? "" : System.Uri.EscapeDataString(repository))+"&external-connection=" + (external_connection==null? "" : System.Uri.EscapeDataString(external_connection));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AssociateExternalConnectionResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Removes an existing external connection from a repository.
		/// DisassociateExternalConnection v1/repository/external-connection#domain&repository&external-connection
		/// </summary>
		/// <param name="domain">The name of the domain that contains the repository from which to remove the external repository. 
		/// Min length: 2
		/// Max length: 50
		// </param>
		/// <param name="domain_owner"> The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include dashes or spaces. 
		/// Min length: 12
		/// Max length: 12
		// </param>
		/// <param name="repository">The name of the repository from which the external connection will be removed. 
		/// Min length: 2
		/// Max length: 100
		// </param>
		/// <param name="external_connection">The name of the external connection to be removed from the repository. 
		/// Min length: 2
		/// Max length: 100
		// </param>
		/// <returns>Success</returns>
		public async Task<DisassociateExternalConnectionResult> DisassociateExternalConnectionAsync(string domain, string domain_owner, string repository, string external_connection, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/repository/external-connection#domain&repository&external-connection?domain=" + (domain==null? "" : System.Uri.EscapeDataString(domain))+"&domain-owner=" + (domain_owner==null? "" : System.Uri.EscapeDataString(domain_owner))+"&repository=" + (repository==null? "" : System.Uri.EscapeDataString(repository))+"&external-connection=" + (external_connection==null? "" : System.Uri.EscapeDataString(external_connection));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DisassociateExternalConnectionResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p> Copies package versions from one repository to another repository in the same domain. </p> <note> <p> You must specify <code>versions</code> or <code>versionRevisions</code>. You cannot specify both. </p> </note>
		/// CopyPackageVersions v1/package/versions/copy#domain&source-repository&destination-repository&format&package
		/// </summary>
		/// <param name="domain"> The name of the domain that contains the source and destination repositories. 
		/// Min length: 2
		/// Max length: 50
		// </param>
		/// <param name="domain_owner"> The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include dashes or spaces. 
		/// Min length: 12
		/// Max length: 12
		// </param>
		/// <param name="source_repository"> The name of the repository that contains the package versions to be copied. 
		/// Min length: 2
		/// Max length: 100
		// </param>
		/// <param name="destination_repository"> The name of the repository into which package versions are copied. 
		/// Min length: 2
		/// Max length: 100
		// </param>
		/// <param name="format"> The format of the package versions to be copied. </param>
		/// <param name="_namespace"><p>The namespace of the package versions to be copied. The package version component that specifies its namespace depends on its type. For example:</p> <ul> <li> <p> The namespace of a Maven package version is its <code>groupId</code>. The namespace is required when copying Maven package versions. </p> </li> <li> <p> The namespace of an npm package version is its <code>scope</code>. </p> </li> <li> <p> Python and NuGet package versions do not contain a corresponding component, package versions of those formats do not have a namespace. </p> </li> <li> <p> The namespace of a generic package is its <code>namespace</code>. </p> </li> </ul>
		/// Min length: 1
		/// Max length: 255
		// </param>
		/// <param name="package"> The name of the package that contains the versions to be copied. 
		/// Min length: 1
		/// Max length: 255
		// </param>
		/// <returns>Success</returns>
		public async Task<CopyPackageVersionsResult> CopyPackageVersionsAsync(string domain, string domain_owner, string source_repository, string destination_repository, PackageFormat format, string _namespace, string package, CopyPackageVersionsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/package/versions/copy#domain&source-repository&destination-repository&format&package?domain=" + (domain==null? "" : System.Uri.EscapeDataString(domain))+"&domain-owner=" + (domain_owner==null? "" : System.Uri.EscapeDataString(domain_owner))+"&source-repository=" + (source_repository==null? "" : System.Uri.EscapeDataString(source_repository))+"&destination-repository=" + (destination_repository==null? "" : System.Uri.EscapeDataString(destination_repository))+"&format=" + format+"&namespace=" + (_namespace==null? "" : System.Uri.EscapeDataString(_namespace))+"&package=" + (package==null? "" : System.Uri.EscapeDataString(package));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CopyPackageVersionsResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p> Creates a domain. CodeArtifact <i>domains</i> make it easier to manage multiple repositories across an organization. You can use a domain to apply permissions across many repositories owned by different Amazon Web Services accounts. An asset is stored only once in a domain, even if it's in multiple repositories. </p> <p>Although you can have multiple domains, we recommend a single production domain that contains all published artifacts so that your development teams can find and share packages. You can use a second pre-production domain to test changes to the production domain configuration. </p>
		/// CreateDomain v1/domain#domain
		/// </summary>
		/// <param name="domain"> The name of the domain to create. All domain names in an Amazon Web Services Region that are in the same Amazon Web Services account must be unique. The domain name is used as the prefix in DNS hostnames. Do not use sensitive information in a domain name because it is publicly discoverable. 
		/// Min length: 2
		/// Max length: 50
		// </param>
		/// <returns>Success</returns>
		public async Task<CreateDomainResult> CreateDomainAsync(string domain, CreateDomainPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/domain#domain?domain=" + (domain==null? "" : System.Uri.EscapeDataString(domain));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CreateDomainResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a domain. You cannot delete a domain that contains repositories. If you want to delete a domain with repositories, first delete its repositories.
		/// DeleteDomain v1/domain#domain
		/// </summary>
		/// <param name="domain"> The name of the domain to delete. 
		/// Min length: 2
		/// Max length: 50
		// </param>
		/// <param name="domain_owner"> The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include dashes or spaces. 
		/// Min length: 12
		/// Max length: 12
		// </param>
		/// <returns>Success</returns>
		public async Task<DeleteDomainResult> DeleteDomainAsync(string domain, string domain_owner, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/domain#domain?domain=" + (domain==null? "" : System.Uri.EscapeDataString(domain))+"&domain-owner=" + (domain_owner==null? "" : System.Uri.EscapeDataString(domain_owner));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DeleteDomainResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a <a href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_DomainDescription.html">DomainDescription</a> object that contains information about the requested domain.
		/// DescribeDomain v1/domain#domain
		/// </summary>
		/// <param name="domain"> A string that specifies the name of the requested domain. 
		/// Min length: 2
		/// Max length: 50
		// </param>
		/// <param name="domain_owner"> The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include dashes or spaces. 
		/// Min length: 12
		/// Max length: 12
		// </param>
		/// <returns>Success</returns>
		public async Task<DescribeDomainResult> DescribeDomainAsync(string domain, string domain_owner, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/domain#domain?domain=" + (domain==null? "" : System.Uri.EscapeDataString(domain))+"&domain-owner=" + (domain_owner==null? "" : System.Uri.EscapeDataString(domain_owner));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DescribeDomainResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a repository.
		/// CreateRepository v1/repository#domain&repository
		/// </summary>
		/// <param name="domain"> The name of the domain that contains the created repository. 
		/// Min length: 2
		/// Max length: 50
		// </param>
		/// <param name="domain_owner"> The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include dashes or spaces. 
		/// Min length: 12
		/// Max length: 12
		// </param>
		/// <param name="repository"> The name of the repository to create. 
		/// Min length: 2
		/// Max length: 100
		// </param>
		/// <returns>Success</returns>
		public async Task<CreateRepositoryResult> CreateRepositoryAsync(string domain, string domain_owner, string repository, CreateRepositoryPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/repository#domain&repository?domain=" + (domain==null? "" : System.Uri.EscapeDataString(domain))+"&domain-owner=" + (domain_owner==null? "" : System.Uri.EscapeDataString(domain_owner))+"&repository=" + (repository==null? "" : System.Uri.EscapeDataString(repository));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CreateRepositoryResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a repository.
		/// DeleteRepository v1/repository#domain&repository
		/// </summary>
		/// <param name="domain"> The name of the domain that contains the repository to delete. 
		/// Min length: 2
		/// Max length: 50
		// </param>
		/// <param name="domain_owner"> The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include dashes or spaces. 
		/// Min length: 12
		/// Max length: 12
		// </param>
		/// <param name="repository"> The name of the repository to delete. 
		/// Min length: 2
		/// Max length: 100
		// </param>
		/// <returns>Success</returns>
		public async Task<DeleteRepositoryResult> DeleteRepositoryAsync(string domain, string domain_owner, string repository, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/repository#domain&repository?domain=" + (domain==null? "" : System.Uri.EscapeDataString(domain))+"&domain-owner=" + (domain_owner==null? "" : System.Uri.EscapeDataString(domain_owner))+"&repository=" + (repository==null? "" : System.Uri.EscapeDataString(repository));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DeleteRepositoryResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a <code>RepositoryDescription</code> object that contains detailed information about the requested repository.
		/// DescribeRepository v1/repository#domain&repository
		/// </summary>
		/// <param name="domain"> The name of the domain that contains the repository to describe. 
		/// Min length: 2
		/// Max length: 50
		// </param>
		/// <param name="domain_owner"> The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include dashes or spaces. 
		/// Min length: 12
		/// Max length: 12
		// </param>
		/// <param name="repository"> A string that specifies the name of the requested repository. 
		/// Min length: 2
		/// Max length: 100
		// </param>
		/// <returns>Success</returns>
		public async Task<DescribeRepositoryResult> DescribeRepositoryAsync(string domain, string domain_owner, string repository, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/repository#domain&repository?domain=" + (domain==null? "" : System.Uri.EscapeDataString(domain))+"&domain-owner=" + (domain_owner==null? "" : System.Uri.EscapeDataString(domain_owner))+"&repository=" + (repository==null? "" : System.Uri.EscapeDataString(repository));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DescribeRepositoryResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update the properties of a repository.
		/// UpdateRepository v1/repository#domain&repository
		/// </summary>
		/// <param name="domain"> The name of the domain associated with the repository to update. 
		/// Min length: 2
		/// Max length: 50
		// </param>
		/// <param name="domain_owner"> The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include dashes or spaces. 
		/// Min length: 12
		/// Max length: 12
		// </param>
		/// <param name="repository"> The name of the repository to update. 
		/// Min length: 2
		/// Max length: 100
		// </param>
		/// <returns>Success</returns>
		public async Task<UpdateRepositoryResult> UpdateRepositoryAsync(string domain, string domain_owner, string repository, UpdateRepositoryPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/repository#domain&repository?domain=" + (domain==null? "" : System.Uri.EscapeDataString(domain))+"&domain-owner=" + (domain_owner==null? "" : System.Uri.EscapeDataString(domain_owner))+"&repository=" + (repository==null? "" : System.Uri.EscapeDataString(repository));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<UpdateRepositoryResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the resource policy set on a domain.
		/// DeleteDomainPermissionsPolicy v1/domain/permissions/policy#domain
		/// </summary>
		/// <param name="domain"> The name of the domain associated with the resource policy to be deleted. 
		/// Min length: 2
		/// Max length: 50
		// </param>
		/// <param name="domain_owner"> The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include dashes or spaces. 
		/// Min length: 12
		/// Max length: 12
		// </param>
		/// <param name="policy_revision"> The current revision of the resource policy to be deleted. This revision is used for optimistic locking, which prevents others from overwriting your changes to the domain's resource policy. 
		/// Min length: 1
		/// Max length: 100
		// </param>
		/// <returns>Success</returns>
		public async Task<DeleteDomainPermissionsPolicyResult> DeleteDomainPermissionsPolicyAsync(string domain, string domain_owner, string policy_revision, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/domain/permissions/policy#domain?domain=" + (domain==null? "" : System.Uri.EscapeDataString(domain))+"&domain-owner=" + (domain_owner==null? "" : System.Uri.EscapeDataString(domain_owner))+"&policy-revision=" + (policy_revision==null? "" : System.Uri.EscapeDataString(policy_revision));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DeleteDomainPermissionsPolicyResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p> Returns the resource policy attached to the specified domain. </p> <note> <p> The policy is a resource-based policy, not an identity-based policy. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_identity-vs-resource.html">Identity-based policies and resource-based policies </a> in the <i>IAM User Guide</i>. </p> </note>
		/// GetDomainPermissionsPolicy v1/domain/permissions/policy#domain
		/// </summary>
		/// <param name="domain"> The name of the domain to which the resource policy is attached. 
		/// Min length: 2
		/// Max length: 50
		// </param>
		/// <param name="domain_owner"> The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include dashes or spaces. 
		/// Min length: 12
		/// Max length: 12
		// </param>
		/// <returns>Success</returns>
		public async Task<GetDomainPermissionsPolicyResult> GetDomainPermissionsPolicyAsync(string domain, string domain_owner, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/domain/permissions/policy#domain?domain=" + (domain==null? "" : System.Uri.EscapeDataString(domain))+"&domain-owner=" + (domain_owner==null? "" : System.Uri.EscapeDataString(domain_owner));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetDomainPermissionsPolicyResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a package and all associated package versions. A deleted package cannot be restored. To delete one or more package versions, use the <a href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_DeletePackageVersions.html">DeletePackageVersions</a> API.
		/// DeletePackage v1/package#domain&repository&format&package
		/// </summary>
		/// <param name="domain">The name of the domain that contains the package to delete.
		/// Min length: 2
		/// Max length: 50
		// </param>
		/// <param name="domain_owner"> The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include dashes or spaces. 
		/// Min length: 12
		/// Max length: 12
		// </param>
		/// <param name="repository">The name of the repository that contains the package to delete.
		/// Min length: 2
		/// Max length: 100
		// </param>
		/// <param name="format">The format of the requested package to delete.</param>
		/// <param name="_namespace"><p>The namespace of the package to delete. The package component that specifies its namespace depends on its type. For example:</p> <ul> <li> <p> The namespace of a Maven package is its <code>groupId</code>. The namespace is required when deleting Maven package versions. </p> </li> <li> <p> The namespace of an npm package is its <code>scope</code>.</p> </li> <li> <p> Python and NuGet packages do not contain corresponding components, packages of those formats do not have a namespace. </p> </li> <li> <p> The namespace of a generic package is its <code>namespace</code>. </p> </li> </ul>
		/// Min length: 1
		/// Max length: 255
		// </param>
		/// <param name="package">The name of the package to delete.
		/// Min length: 1
		/// Max length: 255
		// </param>
		/// <returns>Success</returns>
		public async Task<DeletePackageResult> DeletePackageAsync(string domain, string domain_owner, string repository, PackageFormat format, string _namespace, string package, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/package#domain&repository&format&package?domain=" + (domain==null? "" : System.Uri.EscapeDataString(domain))+"&domain-owner=" + (domain_owner==null? "" : System.Uri.EscapeDataString(domain_owner))+"&repository=" + (repository==null? "" : System.Uri.EscapeDataString(repository))+"&format=" + format+"&namespace=" + (_namespace==null? "" : System.Uri.EscapeDataString(_namespace))+"&package=" + (package==null? "" : System.Uri.EscapeDataString(package));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DeletePackageResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a <a href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_PackageDescription.html">PackageDescription</a> object that contains information about the requested package.
		/// DescribePackage v1/package#domain&repository&format&package
		/// </summary>
		/// <param name="domain">The name of the domain that contains the repository that contains the package.
		/// Min length: 2
		/// Max length: 50
		// </param>
		/// <param name="domain_owner"> The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include dashes or spaces. 
		/// Min length: 12
		/// Max length: 12
		// </param>
		/// <param name="repository">The name of the repository that contains the requested package. 
		/// Min length: 2
		/// Max length: 100
		// </param>
		/// <param name="format">A format that specifies the type of the requested package.</param>
		/// <param name="_namespace"><p>The namespace of the requested package. The package component that specifies its namespace depends on its type. For example:</p> <ul> <li> <p> The namespace of a Maven package is its <code>groupId</code>. The namespace is required when requesting Maven packages. </p> </li> <li> <p> The namespace of an npm package is its <code>scope</code>. </p> </li> <li> <p> Python and NuGet packages do not contain a corresponding component, packages of those formats do not have a namespace. </p> </li> <li> <p> The namespace of a generic package is its <code>namespace</code>. </p> </li> </ul>
		/// Min length: 1
		/// Max length: 255
		// </param>
		/// <param name="package">The name of the requested package.
		/// Min length: 1
		/// Max length: 255
		// </param>
		/// <returns>Success</returns>
		public async Task<DescribePackageResult> DescribePackageAsync(string domain, string domain_owner, string repository, PackageFormat format, string _namespace, string package, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/package#domain&repository&format&package?domain=" + (domain==null? "" : System.Uri.EscapeDataString(domain))+"&domain-owner=" + (domain_owner==null? "" : System.Uri.EscapeDataString(domain_owner))+"&repository=" + (repository==null? "" : System.Uri.EscapeDataString(repository))+"&format=" + format+"&namespace=" + (_namespace==null? "" : System.Uri.EscapeDataString(_namespace))+"&package=" + (package==null? "" : System.Uri.EscapeDataString(package));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DescribePackageResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Sets the package origin configuration for a package.</p> <p>The package origin configuration determines how new versions of a package can be added to a repository. You can allow or block direct publishing of new package versions, or ingestion and retaining of new package versions from an external connection or upstream source. For more information about package origin controls and configuration, see <a href="https://docs.aws.amazon.com/codeartifact/latest/ug/package-origin-controls.html">Editing package origin controls</a> in the <i>CodeArtifact User Guide</i>.</p> <p> <code>PutPackageOriginConfiguration</code> can be called on a package that doesn't yet exist in the repository. When called on a package that does not exist, a package is created in the repository with no versions and the requested restrictions are set on the package. This can be used to preemptively block ingesting or retaining any versions from external connections or upstream repositories, or to block publishing any versions of the package into the repository before connecting any package managers or publishers to the repository.</p>
		/// PutPackageOriginConfiguration v1/package#domain&repository&format&package
		/// </summary>
		/// <param name="domain">The name of the domain that contains the repository that contains the package.
		/// Min length: 2
		/// Max length: 50
		// </param>
		/// <param name="domain_owner"> The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include dashes or spaces. 
		/// Min length: 12
		/// Max length: 12
		// </param>
		/// <param name="repository">The name of the repository that contains the package.
		/// Min length: 2
		/// Max length: 100
		// </param>
		/// <param name="format">A format that specifies the type of the package to be updated.</param>
		/// <param name="_namespace"><p>The namespace of the package to be updated. The package component that specifies its namespace depends on its type. For example:</p> <ul> <li> <p> The namespace of a Maven package is its <code>groupId</code>. </p> </li> <li> <p> The namespace of an npm package is its <code>scope</code>. </p> </li> <li> <p> Python and NuGet packages do not contain a corresponding component, packages of those formats do not have a namespace. </p> </li> <li> <p> The namespace of a generic package is its <code>namespace</code>. </p> </li> </ul>
		/// Min length: 1
		/// Max length: 255
		// </param>
		/// <param name="package">The name of the package to be updated.
		/// Min length: 1
		/// Max length: 255
		// </param>
		/// <returns>Success</returns>
		public async Task<PutPackageOriginConfigurationResult> PutPackageOriginConfigurationAsync(string domain, string domain_owner, string repository, PackageFormat format, string _namespace, string package, PutPackageOriginConfigurationPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/package#domain&repository&format&package?domain=" + (domain==null? "" : System.Uri.EscapeDataString(domain))+"&domain-owner=" + (domain_owner==null? "" : System.Uri.EscapeDataString(domain_owner))+"&repository=" + (repository==null? "" : System.Uri.EscapeDataString(repository))+"&format=" + format+"&namespace=" + (_namespace==null? "" : System.Uri.EscapeDataString(_namespace))+"&package=" + (package==null? "" : System.Uri.EscapeDataString(package));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PutPackageOriginConfigurationResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes one or more versions of a package. A deleted package version cannot be restored in your repository. If you want to remove a package version from your repository and be able to restore it later, set its status to <code>Archived</code>. Archived packages cannot be downloaded from a repository and don't show up with list package APIs (for example, <a href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_ListPackageVersions.html">ListPackageVersions</a>), but you can restore them using <a href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_UpdatePackageVersionsStatus.html">UpdatePackageVersionsStatus</a>.
		/// DeletePackageVersions v1/package/versions/delete#domain&repository&format&package
		/// </summary>
		/// <param name="domain"> The name of the domain that contains the package to delete. 
		/// Min length: 2
		/// Max length: 50
		// </param>
		/// <param name="domain_owner"> The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include dashes or spaces. 
		/// Min length: 12
		/// Max length: 12
		// </param>
		/// <param name="repository"> The name of the repository that contains the package versions to delete. 
		/// Min length: 2
		/// Max length: 100
		// </param>
		/// <param name="format"> The format of the package versions to delete. </param>
		/// <param name="_namespace"><p>The namespace of the package versions to be deleted. The package version component that specifies its namespace depends on its type. For example:</p> <ul> <li> <p> The namespace of a Maven package version is its <code>groupId</code>. The namespace is required when deleting Maven package versions. </p> </li> <li> <p> The namespace of an npm package version is its <code>scope</code>. </p> </li> <li> <p> Python and NuGet package versions do not contain a corresponding component, package versions of those formats do not have a namespace. </p> </li> <li> <p> The namespace of a generic package is its <code>namespace</code>. </p> </li> </ul>
		/// Min length: 1
		/// Max length: 255
		// </param>
		/// <param name="package"> The name of the package with the versions to delete. 
		/// Min length: 1
		/// Max length: 255
		// </param>
		/// <returns>Success</returns>
		public async Task<DeletePackageVersionsResult> DeletePackageVersionsAsync(string domain, string domain_owner, string repository, PackageFormat format, string _namespace, string package, DeletePackageVersionsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/package/versions/delete#domain&repository&format&package?domain=" + (domain==null? "" : System.Uri.EscapeDataString(domain))+"&domain-owner=" + (domain_owner==null? "" : System.Uri.EscapeDataString(domain_owner))+"&repository=" + (repository==null? "" : System.Uri.EscapeDataString(repository))+"&format=" + format+"&namespace=" + (_namespace==null? "" : System.Uri.EscapeDataString(_namespace))+"&package=" + (package==null? "" : System.Uri.EscapeDataString(package));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DeletePackageVersionsResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p> Deletes the resource policy that is set on a repository. After a resource policy is deleted, the permissions allowed and denied by the deleted policy are removed. The effect of deleting a resource policy might not be immediate. </p> <important> <p> Use <code>DeleteRepositoryPermissionsPolicy</code> with caution. After a policy is deleted, Amazon Web Services users, roles, and accounts lose permissions to perform the repository actions granted by the deleted policy. </p> </important>
		/// DeleteRepositoryPermissionsPolicy v1/repository/permissions/policies#domain&repository
		/// </summary>
		/// <param name="domain"> The name of the domain that contains the repository associated with the resource policy to be deleted. 
		/// Min length: 2
		/// Max length: 50
		// </param>
		/// <param name="domain_owner"> The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include dashes or spaces. 
		/// Min length: 12
		/// Max length: 12
		// </param>
		/// <param name="repository"> The name of the repository that is associated with the resource policy to be deleted 
		/// Min length: 2
		/// Max length: 100
		// </param>
		/// <param name="policy_revision"> The revision of the repository's resource policy to be deleted. This revision is used for optimistic locking, which prevents others from accidentally overwriting your changes to the repository's resource policy. 
		/// Min length: 1
		/// Max length: 100
		// </param>
		/// <returns>Success</returns>
		public async Task<DeleteRepositoryPermissionsPolicyResult> DeleteRepositoryPermissionsPolicyAsync(string domain, string domain_owner, string repository, string policy_revision, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/repository/permissions/policies#domain&repository?domain=" + (domain==null? "" : System.Uri.EscapeDataString(domain))+"&domain-owner=" + (domain_owner==null? "" : System.Uri.EscapeDataString(domain_owner))+"&repository=" + (repository==null? "" : System.Uri.EscapeDataString(repository))+"&policy-revision=" + (policy_revision==null? "" : System.Uri.EscapeDataString(policy_revision));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DeleteRepositoryPermissionsPolicyResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a <a href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_PackageVersionDescription.html">PackageVersionDescription</a> object that contains information about the requested package version.
		/// DescribePackageVersion v1/package/version#domain&repository&format&package&version
		/// </summary>
		/// <param name="domain"> The name of the domain that contains the repository that contains the package version. 
		/// Min length: 2
		/// Max length: 50
		// </param>
		/// <param name="domain_owner"> The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include dashes or spaces. 
		/// Min length: 12
		/// Max length: 12
		// </param>
		/// <param name="repository"> The name of the repository that contains the package version. 
		/// Min length: 2
		/// Max length: 100
		// </param>
		/// <param name="format"> A format that specifies the type of the requested package version. </param>
		/// <param name="_namespace"><p>The namespace of the requested package version. The package version component that specifies its namespace depends on its type. For example:</p> <ul> <li> <p> The namespace of a Maven package version is its <code>groupId</code>. </p> </li> <li> <p> The namespace of an npm package version is its <code>scope</code>. </p> </li> <li> <p> Python and NuGet package versions do not contain a corresponding component, package versions of those formats do not have a namespace. </p> </li> <li> <p> The namespace of a generic package is its <code>namespace</code>. </p> </li> </ul>
		/// Min length: 1
		/// Max length: 255
		// </param>
		/// <param name="package"> The name of the requested package version. 
		/// Min length: 1
		/// Max length: 255
		// </param>
		/// <param name="version"> A string that contains the package version (for example, <code>3.5.2</code>). 
		/// Min length: 1
		/// Max length: 255
		// </param>
		/// <returns>Success</returns>
		public async Task<DescribePackageVersionResult> DescribePackageVersionAsync(string domain, string domain_owner, string repository, PackageFormat format, string _namespace, string package, string version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/package/version#domain&repository&format&package&version?domain=" + (domain==null? "" : System.Uri.EscapeDataString(domain))+"&domain-owner=" + (domain_owner==null? "" : System.Uri.EscapeDataString(domain_owner))+"&repository=" + (repository==null? "" : System.Uri.EscapeDataString(repository))+"&format=" + format+"&namespace=" + (_namespace==null? "" : System.Uri.EscapeDataString(_namespace))+"&package=" + (package==null? "" : System.Uri.EscapeDataString(package))+"&version=" + (version==null? "" : System.Uri.EscapeDataString(version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DescribePackageVersionResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p> Deletes the assets in package versions and sets the package versions' status to <code>Disposed</code>. A disposed package version cannot be restored in your repository because its assets are deleted. </p> <p> To view all disposed package versions in a repository, use <a href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_ListPackageVersions.html">ListPackageVersions</a> and set the <a href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_ListPackageVersions.html#API_ListPackageVersions_RequestSyntax">status</a> parameter to <code>Disposed</code>. </p> <p> To view information about a disposed package version, use <a href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_DescribePackageVersion.html">DescribePackageVersion</a>. </p>
		/// DisposePackageVersions v1/package/versions/dispose#domain&repository&format&package
		/// </summary>
		/// <param name="domain"> The name of the domain that contains the repository you want to dispose. 
		/// Min length: 2
		/// Max length: 50
		// </param>
		/// <param name="domain_owner"> The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include dashes or spaces. 
		/// Min length: 12
		/// Max length: 12
		// </param>
		/// <param name="repository"> The name of the repository that contains the package versions you want to dispose. 
		/// Min length: 2
		/// Max length: 100
		// </param>
		/// <param name="format"> A format that specifies the type of package versions you want to dispose. </param>
		/// <param name="_namespace"><p>The namespace of the package versions to be disposed. The package version component that specifies its namespace depends on its type. For example:</p> <ul> <li> <p> The namespace of a Maven package version is its <code>groupId</code>. </p> </li> <li> <p> The namespace of an npm package version is its <code>scope</code>. </p> </li> <li> <p> Python and NuGet package versions do not contain a corresponding component, package versions of those formats do not have a namespace. </p> </li> <li> <p> The namespace of a generic package is its <code>namespace</code>. </p> </li> </ul>
		/// Min length: 1
		/// Max length: 255
		// </param>
		/// <param name="package"> The name of the package with the versions you want to dispose. 
		/// Min length: 1
		/// Max length: 255
		// </param>
		/// <returns>Success</returns>
		public async Task<DisposePackageVersionsResult> DisposePackageVersionsAsync(string domain, string domain_owner, string repository, PackageFormat format, string _namespace, string package, DisposePackageVersionsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/package/versions/dispose#domain&repository&format&package?domain=" + (domain==null? "" : System.Uri.EscapeDataString(domain))+"&domain-owner=" + (domain_owner==null? "" : System.Uri.EscapeDataString(domain_owner))+"&repository=" + (repository==null? "" : System.Uri.EscapeDataString(repository))+"&format=" + format+"&namespace=" + (_namespace==null? "" : System.Uri.EscapeDataString(_namespace))+"&package=" + (package==null? "" : System.Uri.EscapeDataString(package));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DisposePackageVersionsResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p> Generates a temporary authorization token for accessing repositories in the domain. This API requires the <code>codeartifact:GetAuthorizationToken</code> and <code>sts:GetServiceBearerToken</code> permissions. For more information about authorization tokens, see <a href="https://docs.aws.amazon.com/codeartifact/latest/ug/tokens-authentication.html">CodeArtifact authentication and tokens</a>. </p> <note> <p>CodeArtifact authorization tokens are valid for a period of 12 hours when created with the <code>login</code> command. You can call <code>login</code> periodically to refresh the token. When you create an authorization token with the <code>GetAuthorizationToken</code> API, you can set a custom authorization period, up to a maximum of 12 hours, with the <code>durationSeconds</code> parameter.</p> <p>The authorization period begins after <code>login</code> or <code>GetAuthorizationToken</code> is called. If <code>login</code> or <code>GetAuthorizationToken</code> is called while assuming a role, the token lifetime is independent of the maximum session duration of the role. For example, if you call <code>sts assume-role</code> and specify a session duration of 15 minutes, then generate a CodeArtifact authorization token, the token will be valid for the full authorization period even though this is longer than the 15-minute session duration.</p> <p>See <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html">Using IAM Roles</a> for more information on controlling session duration. </p> </note>
		/// GetAuthorizationToken v1/authorization-token#domain
		/// </summary>
		/// <param name="domain"> The name of the domain that is in scope for the generated authorization token. 
		/// Min length: 2
		/// Max length: 50
		// </param>
		/// <param name="domain_owner"> The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include dashes or spaces. 
		/// Min length: 12
		/// Max length: 12
		// </param>
		/// <param name="duration">The time, in seconds, that the generated authorization token is valid. Valid values are <code>0</code> and any number between <code>900</code> (15 minutes) and <code>43200</code> (12 hours). A value of <code>0</code> will set the expiration of the authorization token to the same expiration of the user's role's temporary credentials.
		/// Minimum: 0
		/// Maximum: 43200
		// </param>
		/// <returns>Success</returns>
		public async Task<GetAuthorizationTokenResult> GetAuthorizationTokenAsync(string domain, string domain_owner, int duration, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/authorization-token#domain?domain=" + (domain==null? "" : System.Uri.EscapeDataString(domain))+"&domain-owner=" + (domain_owner==null? "" : System.Uri.EscapeDataString(domain_owner))+"&duration="+duration;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetAuthorizationTokenResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns an asset (or file) that is in a package. For example, for a Maven package version, use <code>GetPackageVersionAsset</code> to download a <code>JAR</code> file, a <code>POM</code> file, or any other assets in the package version.
		/// GetPackageVersionAsset v1/package/version/asset#domain&repository&format&package&version&asset
		/// </summary>
		/// <param name="domain"> The name of the domain that contains the repository that contains the package version with the requested asset. 
		/// Min length: 2
		/// Max length: 50
		// </param>
		/// <param name="domain_owner"> The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include dashes or spaces. 
		/// Min length: 12
		/// Max length: 12
		// </param>
		/// <param name="repository"> The repository that contains the package version with the requested asset. 
		/// Min length: 2
		/// Max length: 100
		// </param>
		/// <param name="format"> A format that specifies the type of the package version with the requested asset file. </param>
		/// <param name="_namespace"><p>The namespace of the package version with the requested asset file. The package version component that specifies its namespace depends on its type. For example:</p> <ul> <li> <p> The namespace of a Maven package version is its <code>groupId</code>. </p> </li> <li> <p> The namespace of an npm package version is its <code>scope</code>. </p> </li> <li> <p> Python and NuGet package versions do not contain a corresponding component, package versions of those formats do not have a namespace. </p> </li> <li> <p> The namespace of a generic package is its <code>namespace</code>. </p> </li> </ul>
		/// Min length: 1
		/// Max length: 255
		// </param>
		/// <param name="package"> The name of the package that contains the requested asset. 
		/// Min length: 1
		/// Max length: 255
		// </param>
		/// <param name="version"> A string that contains the package version (for example, <code>3.5.2</code>). 
		/// Min length: 1
		/// Max length: 255
		// </param>
		/// <param name="asset"> The name of the requested asset. 
		/// Min length: 1
		/// Max length: 255
		// </param>
		/// <param name="revision"> The name of the package version revision that contains the requested asset. 
		/// Min length: 1
		/// Max length: 50
		// </param>
		/// <returns>Success</returns>
		public async Task<GetPackageVersionAssetResult> GetPackageVersionAssetAsync(string domain, string domain_owner, string repository, PackageFormat format, string _namespace, string package, string version, string asset, string revision, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/package/version/asset#domain&repository&format&package&version&asset?domain=" + (domain==null? "" : System.Uri.EscapeDataString(domain))+"&domain-owner=" + (domain_owner==null? "" : System.Uri.EscapeDataString(domain_owner))+"&repository=" + (repository==null? "" : System.Uri.EscapeDataString(repository))+"&format=" + format+"&namespace=" + (_namespace==null? "" : System.Uri.EscapeDataString(_namespace))+"&package=" + (package==null? "" : System.Uri.EscapeDataString(package))+"&version=" + (version==null? "" : System.Uri.EscapeDataString(version))+"&asset=" + (asset==null? "" : System.Uri.EscapeDataString(asset))+"&revision=" + (revision==null? "" : System.Uri.EscapeDataString(revision));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetPackageVersionAssetResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p> Gets the readme file or descriptive text for a package version. </p> <p> The returned text might contain formatting. For example, it might contain formatting for Markdown or reStructuredText. </p>
		/// GetPackageVersionReadme v1/package/version/readme#domain&repository&format&package&version
		/// </summary>
		/// <param name="domain"> The name of the domain that contains the repository that contains the package version with the requested readme file. 
		/// Min length: 2
		/// Max length: 50
		// </param>
		/// <param name="domain_owner"> The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include dashes or spaces. 
		/// Min length: 12
		/// Max length: 12
		// </param>
		/// <param name="repository"> The repository that contains the package with the requested readme file. 
		/// Min length: 2
		/// Max length: 100
		// </param>
		/// <param name="format"> A format that specifies the type of the package version with the requested readme file. </param>
		/// <param name="_namespace"><p>The namespace of the package version with the requested readme file. The package version component that specifies its namespace depends on its type. For example:</p> <ul> <li> <p> The namespace of an npm package version is its <code>scope</code>. </p> </li> <li> <p> Python and NuGet package versions do not contain a corresponding component, package versions of those formats do not have a namespace. </p> </li> </ul>
		/// Min length: 1
		/// Max length: 255
		// </param>
		/// <param name="package"> The name of the package version that contains the requested readme file. 
		/// Min length: 1
		/// Max length: 255
		// </param>
		/// <param name="version"> A string that contains the package version (for example, <code>3.5.2</code>). 
		/// Min length: 1
		/// Max length: 255
		// </param>
		/// <returns>Success</returns>
		public async Task<GetPackageVersionReadmeResult> GetPackageVersionReadmeAsync(string domain, string domain_owner, string repository, PackageFormat format, string _namespace, string package, string version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/package/version/readme#domain&repository&format&package&version?domain=" + (domain==null? "" : System.Uri.EscapeDataString(domain))+"&domain-owner=" + (domain_owner==null? "" : System.Uri.EscapeDataString(domain_owner))+"&repository=" + (repository==null? "" : System.Uri.EscapeDataString(repository))+"&format=" + format+"&namespace=" + (_namespace==null? "" : System.Uri.EscapeDataString(_namespace))+"&package=" + (package==null? "" : System.Uri.EscapeDataString(package))+"&version=" + (version==null? "" : System.Uri.EscapeDataString(version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetPackageVersionReadmeResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p> Returns the endpoint of a repository for a specific package format. A repository has one endpoint for each package format: </p> <ul> <li> <p> <code>maven</code> </p> </li> <li> <p> <code>npm</code> </p> </li> <li> <p> <code>nuget</code> </p> </li> <li> <p> <code>pypi</code> </p> </li> </ul>
		/// GetRepositoryEndpoint v1/repository/endpoint#domain&repository&format
		/// </summary>
		/// <param name="domain"> The name of the domain that contains the repository. 
		/// Min length: 2
		/// Max length: 50
		// </param>
		/// <param name="domain_owner"> The 12-digit account number of the Amazon Web Services account that owns the domain that contains the repository. It does not include dashes or spaces. 
		/// Min length: 12
		/// Max length: 12
		// </param>
		/// <param name="repository"> The name of the repository. 
		/// Min length: 2
		/// Max length: 100
		// </param>
		/// <param name="format"> Returns which endpoint of a repository to return. A repository has one endpoint for each package format. </param>
		/// <returns>Success</returns>
		public async Task<GetRepositoryEndpointResult> GetRepositoryEndpointAsync(string domain, string domain_owner, string repository, PackageFormat format, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/repository/endpoint#domain&repository&format?domain=" + (domain==null? "" : System.Uri.EscapeDataString(domain))+"&domain-owner=" + (domain_owner==null? "" : System.Uri.EscapeDataString(domain_owner))+"&repository=" + (repository==null? "" : System.Uri.EscapeDataString(repository))+"&format=" + format;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetRepositoryEndpointResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the resource policy that is set on a repository.
		/// GetRepositoryPermissionsPolicy v1/repository/permissions/policy#domain&repository
		/// </summary>
		/// <param name="domain"> The name of the domain containing the repository whose associated resource policy is to be retrieved. 
		/// Min length: 2
		/// Max length: 50
		// </param>
		/// <param name="domain_owner"> The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include dashes or spaces. 
		/// Min length: 12
		/// Max length: 12
		// </param>
		/// <param name="repository"> The name of the repository whose associated resource policy is to be retrieved. 
		/// Min length: 2
		/// Max length: 100
		// </param>
		/// <returns>Success</returns>
		public async Task<GetRepositoryPermissionsPolicyResult> GetRepositoryPermissionsPolicyAsync(string domain, string domain_owner, string repository, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/repository/permissions/policy#domain&repository?domain=" + (domain==null? "" : System.Uri.EscapeDataString(domain))+"&domain-owner=" + (domain_owner==null? "" : System.Uri.EscapeDataString(domain_owner))+"&repository=" + (repository==null? "" : System.Uri.EscapeDataString(repository));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetRepositoryPermissionsPolicyResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p> Sets the resource policy on a repository that specifies permissions to access it. </p> <p> When you call <code>PutRepositoryPermissionsPolicy</code>, the resource policy on the repository is ignored when evaluting permissions. This ensures that the owner of a repository cannot lock themselves out of the repository, which would prevent them from being able to update the resource policy. </p>
		/// PutRepositoryPermissionsPolicy v1/repository/permissions/policy#domain&repository
		/// </summary>
		/// <param name="domain"> The name of the domain containing the repository to set the resource policy on. 
		/// Min length: 2
		/// Max length: 50
		// </param>
		/// <param name="domain_owner"> The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include dashes or spaces. 
		/// Min length: 12
		/// Max length: 12
		// </param>
		/// <param name="repository"> The name of the repository to set the resource policy on. 
		/// Min length: 2
		/// Max length: 100
		// </param>
		/// <returns>Success</returns>
		public async Task<PutRepositoryPermissionsPolicyResult> PutRepositoryPermissionsPolicyAsync(string domain, string domain_owner, string repository, PutRepositoryPermissionsPolicyPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/repository/permissions/policy#domain&repository?domain=" + (domain==null? "" : System.Uri.EscapeDataString(domain))+"&domain-owner=" + (domain_owner==null? "" : System.Uri.EscapeDataString(domain_owner))+"&repository=" + (repository==null? "" : System.Uri.EscapeDataString(repository));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PutRepositoryPermissionsPolicyResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of <a href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_PackageVersionDescription.html">DomainSummary</a> objects for all domains owned by the Amazon Web Services account that makes this call. Each returned <code>DomainSummary</code> object contains information about a domain.
		/// ListDomains v1/domains
		/// </summary>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListDomainsResult> ListDomainsAsync(string maxResults, string nextToken, ListDomainsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/domains?maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListDomainsResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of <a href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_AssetSummary.html">AssetSummary</a> objects for assets in a package version.
		/// ListPackageVersionAssets v1/package/version/assets#domain&repository&format&package&version
		/// </summary>
		/// <param name="domain"> The name of the domain that contains the repository associated with the package version assets. 
		/// Min length: 2
		/// Max length: 50
		// </param>
		/// <param name="domain_owner"> The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include dashes or spaces. 
		/// Min length: 12
		/// Max length: 12
		// </param>
		/// <param name="repository"> The name of the repository that contains the package that contains the requested package version assets. 
		/// Min length: 2
		/// Max length: 100
		// </param>
		/// <param name="format"> The format of the package that contains the requested package version assets. </param>
		/// <param name="_namespace"><p>The namespace of the package version that contains the requested package version assets. The package version component that specifies its namespace depends on its type. For example:</p> <ul> <li> <p> The namespace of a Maven package version is its <code>groupId</code>. </p> </li> <li> <p> The namespace of an npm package version is its <code>scope</code>. </p> </li> <li> <p> Python and NuGet package versions do not contain a corresponding component, package versions of those formats do not have a namespace. </p> </li> <li> <p> The namespace of a generic package is its <code>namespace</code>. </p> </li> </ul>
		/// Min length: 1
		/// Max length: 255
		// </param>
		/// <param name="package"> The name of the package that contains the requested package version assets. 
		/// Min length: 1
		/// Max length: 255
		// </param>
		/// <param name="version"> A string that contains the package version (for example, <code>3.5.2</code>). 
		/// Min length: 1
		/// Max length: 255
		// </param>
		/// <param name="max_results"> The maximum number of results to return per page. 
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="next_token"> The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results. 
		/// Min length: 1
		/// Max length: 2000
		// </param>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListPackageVersionAssetsResult> ListPackageVersionAssetsAsync(string domain, string domain_owner, string repository, PackageFormat format, string _namespace, string package, string version, int max_results, string next_token, string maxResults, string nextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/package/version/assets#domain&repository&format&package&version?domain=" + (domain==null? "" : System.Uri.EscapeDataString(domain))+"&domain-owner=" + (domain_owner==null? "" : System.Uri.EscapeDataString(domain_owner))+"&repository=" + (repository==null? "" : System.Uri.EscapeDataString(repository))+"&format=" + format+"&namespace=" + (_namespace==null? "" : System.Uri.EscapeDataString(_namespace))+"&package=" + (package==null? "" : System.Uri.EscapeDataString(package))+"&version=" + (version==null? "" : System.Uri.EscapeDataString(version))+"&max-results="+max_results+"&next-token=" + (next_token==null? "" : System.Uri.EscapeDataString(next_token))+"&maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListPackageVersionAssetsResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the direct dependencies for a package version. The dependencies are returned as <a href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_PackageDependency.html">PackageDependency</a> objects. CodeArtifact extracts the dependencies for a package version from the metadata file for the package format (for example, the <code>package.json</code> file for npm packages and the <code>pom.xml</code> file for Maven). Any package version dependencies that are not listed in the configuration file are not returned.
		/// ListPackageVersionDependencies v1/package/version/dependencies#domain&repository&format&package&version
		/// </summary>
		/// <param name="domain"> The name of the domain that contains the repository that contains the requested package version dependencies. 
		/// Min length: 2
		/// Max length: 50
		// </param>
		/// <param name="domain_owner"> The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include dashes or spaces. 
		/// Min length: 12
		/// Max length: 12
		// </param>
		/// <param name="repository"> The name of the repository that contains the requested package version. 
		/// Min length: 2
		/// Max length: 100
		// </param>
		/// <param name="format"> The format of the package with the requested dependencies. </param>
		/// <param name="_namespace"><p>The namespace of the package version with the requested dependencies. The package version component that specifies its namespace depends on its type. For example:</p> <ul> <li> <p> The namespace of a Maven package version is its <code>groupId</code>. </p> </li> <li> <p> The namespace of an npm package version is its <code>scope</code>. </p> </li> <li> <p> Python and NuGet package versions do not contain a corresponding component, package versions of those formats do not have a namespace. </p> </li> <li> <p> The namespace of a generic package is its <code>namespace</code>. </p> </li> </ul>
		/// Min length: 1
		/// Max length: 255
		// </param>
		/// <param name="package"> The name of the package versions' package. 
		/// Min length: 1
		/// Max length: 255
		// </param>
		/// <param name="version"> A string that contains the package version (for example, <code>3.5.2</code>). 
		/// Min length: 1
		/// Max length: 255
		// </param>
		/// <param name="next_token"> The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results. 
		/// Min length: 1
		/// Max length: 2000
		// </param>
		/// <returns>Success</returns>
		public async Task<ListPackageVersionDependenciesResult> ListPackageVersionDependenciesAsync(string domain, string domain_owner, string repository, PackageFormat format, string _namespace, string package, string version, string next_token, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/package/version/dependencies#domain&repository&format&package&version?domain=" + (domain==null? "" : System.Uri.EscapeDataString(domain))+"&domain-owner=" + (domain_owner==null? "" : System.Uri.EscapeDataString(domain_owner))+"&repository=" + (repository==null? "" : System.Uri.EscapeDataString(repository))+"&format=" + format+"&namespace=" + (_namespace==null? "" : System.Uri.EscapeDataString(_namespace))+"&package=" + (package==null? "" : System.Uri.EscapeDataString(package))+"&version=" + (version==null? "" : System.Uri.EscapeDataString(version))+"&next-token=" + (next_token==null? "" : System.Uri.EscapeDataString(next_token));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListPackageVersionDependenciesResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of <a href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_PackageVersionSummary.html">PackageVersionSummary</a> objects for package versions in a repository that match the request parameters. Package versions of all statuses will be returned by default when calling <code>list-package-versions</code> with no <code>--status</code> parameter.
		/// ListPackageVersions v1/package/versions#domain&repository&format&package
		/// </summary>
		/// <param name="domain"> The name of the domain that contains the repository that contains the requested package versions. 
		/// Min length: 2
		/// Max length: 50
		// </param>
		/// <param name="domain_owner"> The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include dashes or spaces. 
		/// Min length: 12
		/// Max length: 12
		// </param>
		/// <param name="repository"> The name of the repository that contains the requested package versions. 
		/// Min length: 2
		/// Max length: 100
		// </param>
		/// <param name="format"> The format of the package versions you want to list. </param>
		/// <param name="_namespace"><p>The namespace of the package that contains the requested package versions. The package component that specifies its namespace depends on its type. For example:</p> <ul> <li> <p> The namespace of a Maven package is its <code>groupId</code>. </p> </li> <li> <p> The namespace of an npm package is its <code>scope</code>. </p> </li> <li> <p> Python and NuGet packages do not contain a corresponding component, packages of those formats do not have a namespace. </p> </li> <li> <p> The namespace of a generic package is its <code>namespace</code>. </p> </li> </ul>
		/// Min length: 1
		/// Max length: 255
		// </param>
		/// <param name="package"> The name of the package for which you want to request package versions. 
		/// Min length: 1
		/// Max length: 255
		// </param>
		/// <param name="status"> A string that filters the requested package versions by status. </param>
		/// <param name="sortBy"> How to sort the requested list of package versions. </param>
		/// <param name="max_results"> The maximum number of results to return per page. 
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="next_token"> The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results. 
		/// Min length: 1
		/// Max length: 2000
		// </param>
		/// <param name="originType">The <code>originType</code> used to filter package versions. Only package versions with the provided <code>originType</code> will be returned.</param>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListPackageVersionsResult> ListPackageVersionsAsync(string domain, string domain_owner, string repository, PackageFormat format, string _namespace, string package, PackageVersionStatus status, PackageVersionSortType sortBy, int max_results, string next_token, PackageVersionOriginType originType, string maxResults, string nextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/package/versions#domain&repository&format&package?domain=" + (domain==null? "" : System.Uri.EscapeDataString(domain))+"&domain-owner=" + (domain_owner==null? "" : System.Uri.EscapeDataString(domain_owner))+"&repository=" + (repository==null? "" : System.Uri.EscapeDataString(repository))+"&format=" + format+"&namespace=" + (_namespace==null? "" : System.Uri.EscapeDataString(_namespace))+"&package=" + (package==null? "" : System.Uri.EscapeDataString(package))+"&status=" + status+"&sortBy=" + sortBy+"&max-results="+max_results+"&next-token=" + (next_token==null? "" : System.Uri.EscapeDataString(next_token))+"&originType=" + originType+"&maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListPackageVersionsResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of <a href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_PackageSummary.html">PackageSummary</a> objects for packages in a repository that match the request parameters.
		/// ListPackages v1/packages#domain&repository
		/// </summary>
		/// <param name="domain"> The name of the domain that contains the repository that contains the requested packages. 
		/// Min length: 2
		/// Max length: 50
		// </param>
		/// <param name="domain_owner"> The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include dashes or spaces. 
		/// Min length: 12
		/// Max length: 12
		// </param>
		/// <param name="repository"> The name of the repository that contains the requested packages. 
		/// Min length: 2
		/// Max length: 100
		// </param>
		/// <param name="format">The format used to filter requested packages. Only packages from the provided format will be returned.</param>
		/// <param name="_namespace"><p>The namespace prefix used to filter requested packages. Only packages with a namespace that starts with the provided string value are returned. Note that although this option is called <code>--namespace</code> and not <code>--namespace-prefix</code>, it has prefix-matching behavior.</p> <p>Each package format uses namespace as follows:</p> <ul> <li> <p> The namespace of a Maven package is its <code>groupId</code>. </p> </li> <li> <p> The namespace of an npm package is its <code>scope</code>. </p> </li> <li> <p> Python and NuGet packages do not contain a corresponding component, packages of those formats do not have a namespace. </p> </li> <li> <p> The namespace of a generic package is its <code>namespace</code>. </p> </li> </ul>
		/// Min length: 1
		/// Max length: 255
		// </param>
		/// <param name="package_prefix"> A prefix used to filter requested packages. Only packages with names that start with <code>packagePrefix</code> are returned. 
		/// Min length: 1
		/// Max length: 255
		// </param>
		/// <param name="max_results"> The maximum number of results to return per page. 
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="next_token"> The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results. 
		/// Min length: 1
		/// Max length: 2000
		// </param>
		/// <param name="publish">The value of the <code>Publish</code> package origin control restriction used to filter requested packages. Only packages with the provided restriction are returned. For more information, see <a href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_PackageOriginRestrictions.html">PackageOriginRestrictions</a>.</param>
		/// <param name="upstream">The value of the <code>Upstream</code> package origin control restriction used to filter requested packages. Only packages with the provided restriction are returned. For more information, see <a href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_PackageOriginRestrictions.html">PackageOriginRestrictions</a>.</param>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListPackagesResult> ListPackagesAsync(string domain, string domain_owner, string repository, PackageFormat format, string _namespace, string package_prefix, int max_results, string next_token, AllowPublish publish, AllowPublish upstream, string maxResults, string nextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/packages#domain&repository?domain=" + (domain==null? "" : System.Uri.EscapeDataString(domain))+"&domain-owner=" + (domain_owner==null? "" : System.Uri.EscapeDataString(domain_owner))+"&repository=" + (repository==null? "" : System.Uri.EscapeDataString(repository))+"&format=" + format+"&namespace=" + (_namespace==null? "" : System.Uri.EscapeDataString(_namespace))+"&package-prefix=" + (package_prefix==null? "" : System.Uri.EscapeDataString(package_prefix))+"&max-results="+max_results+"&next-token=" + (next_token==null? "" : System.Uri.EscapeDataString(next_token))+"&publish=" + publish+"&upstream=" + upstream+"&maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListPackagesResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of <a href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_RepositorySummary.html">RepositorySummary</a> objects. Each <code>RepositorySummary</code> contains information about a repository in the specified Amazon Web Services account and that matches the input parameters.
		/// ListRepositories v1/repositories
		/// </summary>
		/// <param name="repository_prefix"> A prefix used to filter returned repositories. Only repositories with names that start with <code>repositoryPrefix</code> are returned.
		/// Min length: 2
		/// Max length: 100
		// </param>
		/// <param name="max_results"> The maximum number of results to return per page. 
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="next_token"> The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results. 
		/// Min length: 1
		/// Max length: 2000
		// </param>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListRepositoriesResult> ListRepositoriesAsync(string repository_prefix, int max_results, string next_token, string maxResults, string nextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/repositories?repository-prefix=" + (repository_prefix==null? "" : System.Uri.EscapeDataString(repository_prefix))+"&max-results="+max_results+"&next-token=" + (next_token==null? "" : System.Uri.EscapeDataString(next_token))+"&maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListRepositoriesResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of <a href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_RepositorySummary.html">RepositorySummary</a> objects. Each <code>RepositorySummary</code> contains information about a repository in the specified domain and that matches the input parameters.
		/// ListRepositoriesInDomain v1/domain/repositories#domain
		/// </summary>
		/// <param name="domain"> The name of the domain that contains the returned list of repositories. 
		/// Min length: 2
		/// Max length: 50
		// </param>
		/// <param name="domain_owner"> The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include dashes or spaces. 
		/// Min length: 12
		/// Max length: 12
		// </param>
		/// <param name="administrator_account"> Filter the list of repositories to only include those that are managed by the Amazon Web Services account ID. 
		/// Min length: 12
		/// Max length: 12
		// </param>
		/// <param name="repository_prefix"> A prefix used to filter returned repositories. Only repositories with names that start with <code>repositoryPrefix</code> are returned. 
		/// Min length: 2
		/// Max length: 100
		// </param>
		/// <param name="max_results"> The maximum number of results to return per page. 
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="next_token"> The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results. 
		/// Min length: 1
		/// Max length: 2000
		// </param>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListRepositoriesInDomainResult> ListRepositoriesInDomainAsync(string domain, string domain_owner, string administrator_account, string repository_prefix, int max_results, string next_token, string maxResults, string nextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/domain/repositories#domain?domain=" + (domain==null? "" : System.Uri.EscapeDataString(domain))+"&domain-owner=" + (domain_owner==null? "" : System.Uri.EscapeDataString(domain_owner))+"&administrator-account=" + (administrator_account==null? "" : System.Uri.EscapeDataString(administrator_account))+"&repository-prefix=" + (repository_prefix==null? "" : System.Uri.EscapeDataString(repository_prefix))+"&max-results="+max_results+"&next-token=" + (next_token==null? "" : System.Uri.EscapeDataString(next_token))+"&maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListRepositoriesInDomainResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about Amazon Web Services tags for a specified Amazon Resource Name (ARN) in CodeArtifact.
		/// ListTagsForResource v1/tags#resourceArn
		/// </summary>
		/// <param name="resourceArn">The Amazon Resource Name (ARN) of the resource to get tags for.
		/// Min length: 1
		/// Max length: 1011
		// </param>
		/// <returns>Success</returns>
		public async Task<ListTagsForResourceResult> ListTagsForResourceAsync(string resourceArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/tags#resourceArn?resourceArn=" + (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListTagsForResourceResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a new package version containing one or more assets (or files).</p> <p>The <code>unfinished</code> flag can be used to keep the package version in the <code>Unfinished</code> state until all of its assets have been uploaded (see <a href="https://docs.aws.amazon.com/codeartifact/latest/ug/packages-overview.html#package-version-status.html#package-version-status">Package version status</a> in the <i>CodeArtifact user guide</i>). To set the package versionâ€™s status to <code>Published</code>, omit the <code>unfinished</code> flag when uploading the final asset, or set the status using <a href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_UpdatePackageVersionsStatus.html">UpdatePackageVersionStatus</a>. Once a package versionâ€™s status is set to <code>Published</code>, it cannot change back to <code>Unfinished</code>.</p> <note> <p>Only generic packages can be published using this API. For more information, see <a href="https://docs.aws.amazon.com/codeartifact/latest/ug/using-generic.html">Using generic packages</a> in the <i>CodeArtifact User Guide</i>.</p> </note>
		/// PublishPackageVersion v1/package/version/publish#domain&repository&format&package&version&asset&x-amz-content-sha256
		/// </summary>
		/// <param name="domain">The name of the domain that contains the repository that contains the package version to publish.
		/// Min length: 2
		/// Max length: 50
		// </param>
		/// <param name="domain_owner">The 12-digit account number of the AWS account that owns the domain. It does not include dashes or spaces.
		/// Min length: 12
		/// Max length: 12
		// </param>
		/// <param name="repository">The name of the repository that the package version will be published to.
		/// Min length: 2
		/// Max length: 100
		// </param>
		/// <param name="format"><p>A format that specifies the type of the package version with the requested asset file.</p> <p>The only supported value is <code>generic</code>.</p></param>
		/// <param name="_namespace">The namespace of the package version to publish.
		/// Min length: 1
		/// Max length: 255
		// </param>
		/// <param name="package">The name of the package version to publish.
		/// Min length: 1
		/// Max length: 255
		// </param>
		/// <param name="version">The package version to publish (for example, <code>3.5.2</code>).
		/// Min length: 1
		/// Max length: 255
		// </param>
		/// <param name="asset">The name of the asset to publish. Asset names can include Unicode letters and numbers, and the following special characters: <code>~ ! @ ^ &amp; ( ) - ` _ + [ ] { } ; , . `</code> 
		/// Min length: 1
		/// Max length: 255
		// </param>
		/// <param name="unfinished"><p>Specifies whether the package version should remain in the <code>unfinished</code> state. If omitted, the package version status will be set to <code>Published</code> (see <a href="https://docs.aws.amazon.com/codeartifact/latest/ug/packages-overview.html#package-version-status">Package version status</a> in the <i>CodeArtifact User Guide</i>).</p> <p>Valid values: <code>unfinished</code> </p></param>
		/// <returns>Success</returns>
		public async Task<PublishPackageVersionResult> PublishPackageVersionAsync(string domain, string domain_owner, string repository, PackageFormat format, string _namespace, string package, string version, string asset, bool unfinished, PublishPackageVersionPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/package/version/publish#domain&repository&format&package&version&asset&x-amz-content-sha256?domain=" + (domain==null? "" : System.Uri.EscapeDataString(domain))+"&domain-owner=" + (domain_owner==null? "" : System.Uri.EscapeDataString(domain_owner))+"&repository=" + (repository==null? "" : System.Uri.EscapeDataString(repository))+"&format=" + format+"&namespace=" + (_namespace==null? "" : System.Uri.EscapeDataString(_namespace))+"&package=" + (package==null? "" : System.Uri.EscapeDataString(package))+"&version=" + (version==null? "" : System.Uri.EscapeDataString(version))+"&asset=" + (asset==null? "" : System.Uri.EscapeDataString(asset))+"&unfinished="+unfinished;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PublishPackageVersionResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p> Sets a resource policy on a domain that specifies permissions to access it. </p> <p> When you call <code>PutDomainPermissionsPolicy</code>, the resource policy on the domain is ignored when evaluting permissions. This ensures that the owner of a domain cannot lock themselves out of the domain, which would prevent them from being able to update the resource policy. </p>
		/// PutDomainPermissionsPolicy v1/domain/permissions/policy
		/// </summary>
		/// <returns>Success</returns>
		public async Task<PutDomainPermissionsPolicyResult> PutDomainPermissionsPolicyAsync(PutDomainPermissionsPolicyPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/domain/permissions/policy";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PutDomainPermissionsPolicyResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Adds or updates tags for a resource in CodeArtifact.
		/// TagResource v1/tag#resourceArn
		/// </summary>
		/// <param name="resourceArn">The Amazon Resource Name (ARN) of the resource that you want to add or update tags for.
		/// Min length: 1
		/// Max length: 1011
		// </param>
		/// <returns>Success</returns>
		public async Task<TagResourceResult> TagResourceAsync(string resourceArn, TagResourcePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/tag#resourceArn?resourceArn=" + (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TagResourceResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Removes tags from a resource in CodeArtifact.
		/// UntagResource v1/untag#resourceArn
		/// </summary>
		/// <param name="resourceArn">The Amazon Resource Name (ARN) of the resource that you want to remove tags from.
		/// Min length: 1
		/// Max length: 1011
		// </param>
		/// <returns>Success</returns>
		public async Task<UntagResourceResult> UntagResourceAsync(string resourceArn, UntagResourcePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/untag#resourceArn?resourceArn=" + (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<UntagResourceResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the status of one or more versions of a package. Using <code>UpdatePackageVersionsStatus</code>, you can update the status of package versions to <code>Archived</code>, <code>Published</code>, or <code>Unlisted</code>. To set the status of a package version to <code>Disposed</code>, use <a href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_DisposePackageVersions.html">DisposePackageVersions</a>.
		/// UpdatePackageVersionsStatus v1/package/versions/update_status#domain&repository&format&package
		/// </summary>
		/// <param name="domain"> The name of the domain that contains the repository that contains the package versions with a status to be updated. 
		/// Min length: 2
		/// Max length: 50
		// </param>
		/// <param name="domain_owner"> The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include dashes or spaces. 
		/// Min length: 12
		/// Max length: 12
		// </param>
		/// <param name="repository"> The repository that contains the package versions with the status you want to update. 
		/// Min length: 2
		/// Max length: 100
		// </param>
		/// <param name="format"> A format that specifies the type of the package with the statuses to update. </param>
		/// <param name="_namespace"><p>The namespace of the package version to be updated. The package version component that specifies its namespace depends on its type. For example:</p> <ul> <li> <p> The namespace of a Maven package version is its <code>groupId</code>. </p> </li> <li> <p> The namespace of an npm package version is its <code>scope</code>. </p> </li> <li> <p> Python and NuGet package versions do not contain a corresponding component, package versions of those formats do not have a namespace. </p> </li> <li> <p> The namespace of a generic package is its <code>namespace</code>. </p> </li> </ul>
		/// Min length: 1
		/// Max length: 255
		// </param>
		/// <param name="package"> The name of the package with the version statuses to update. 
		/// Min length: 1
		/// Max length: 255
		// </param>
		/// <returns>Success</returns>
		public async Task<UpdatePackageVersionsStatusResult> UpdatePackageVersionsStatusAsync(string domain, string domain_owner, string repository, PackageFormat format, string _namespace, string package, UpdatePackageVersionsStatusPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/package/versions/update_status#domain&repository&format&package?domain=" + (domain==null? "" : System.Uri.EscapeDataString(domain))+"&domain-owner=" + (domain_owner==null? "" : System.Uri.EscapeDataString(domain_owner))+"&repository=" + (repository==null? "" : System.Uri.EscapeDataString(repository))+"&format=" + format+"&namespace=" + (_namespace==null? "" : System.Uri.EscapeDataString(_namespace))+"&package=" + (package==null? "" : System.Uri.EscapeDataString(package));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<UpdatePackageVersionsStatusResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public class CopyPackageVersionsPostBody
	{
		
		/// <summary>
		/// <p> The versions of the package to be copied. </p> <note> <p> You must specify <code>versions</code> or <code>versionRevisions</code>. You cannot specify both. </p> </note>
		/// Maximum items: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="versions")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string[] Versions { get; set; }
		
		/// <summary>
		/// <p> A list of key-value pairs. The keys are package versions and the values are package version revisions. A <code>CopyPackageVersion</code> operation succeeds if the specified versions in the source repository match the specified package version revision. </p> <note> <p> You must specify <code>versions</code> or <code>versionRevisions</code>. You cannot specify both. </p> </note>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="versionRevisions")]
		public System.Collections.Generic.Dictionary<string, string> VersionRevisions { get; set; }
		
		/// <summary>
		///  Set to true to overwrite a package version that already exists in the destination repository. If set to false and the package version already exists in the destination repository, the package version is returned in the <code>failedVersions</code> field of the response with an <code>ALREADY_EXISTS</code> error code. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowOverwrite")]
		public System.Nullable<System.Boolean> AllowOverwrite { get; set; }
		
		/// <summary>
		///  Set to true to copy packages from repositories that are upstream from the source repository to the destination repository. The default setting is false. For more information, see <a href="https://docs.aws.amazon.com/codeartifact/latest/ug/repos-upstream.html">Working with upstream repositories</a>. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="includeFromUpstream")]
		public System.Nullable<System.Boolean> IncludeFromUpstream { get; set; }
	}
	
	public class CreateDomainPostBody
	{
		
		/// <summary>
		/// <p> The encryption key for the domain. This is used to encrypt content stored in a domain. An encryption key can be a key ID, a key Amazon Resource Name (ARN), a key alias, or a key alias ARN. To specify an <code>encryptionKey</code>, your IAM role must have <code>kms:DescribeKey</code> and <code>kms:CreateGrant</code> permissions on the encryption key that is used. For more information, see <a href="https://docs.aws.amazon.com/kms/latest/APIReference/API_DescribeKey.html#API_DescribeKey_RequestSyntax">DescribeKey</a> in the <i>Key Management Service API Reference</i> and <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">Key Management Service API Permissions Reference</a> in the <i>Key Management Service Developer Guide</i>. </p> <important> <p> CodeArtifact supports only symmetric CMKs. Do not associate an asymmetric CMK with your domain. For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html">Using symmetric and asymmetric keys</a> in the <i>Key Management Service Developer Guide</i>. </p> </important>
		/// Min length: 1
		/// Max length: 1011
		/// Pattern: \S+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="encryptionKey")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1011)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"\S+")]
		public string EncryptionKey { get; set; }
		
		/// <summary>
		/// One or more tag key-value pairs for the domain.
		/// Minimum items: 0
		/// Maximum items: 200
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public Tag[] Tags { get; set; }
	}
	
	public class CreateRepositoryPostBody
	{
		
		/// <summary>
		///  A description of the created repository. 
		/// Max length: 1000
		/// Pattern: \P{C}*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"\P{C}*")]
		public string Description { get; set; }
		
		/// <summary>
		///  A list of upstream repositories to associate with the repository. The order of the upstream repositories in the list determines their priority order when CodeArtifact looks for a requested package version. For more information, see <a href="https://docs.aws.amazon.com/codeartifact/latest/ug/repos-upstream.html">Working with upstream repositories</a>. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="upstreams")]
		public UpstreamRepository[] Upstreams { get; set; }
		
		/// <summary>
		/// One or more tag key-value pairs for the repository.
		/// Minimum items: 0
		/// Maximum items: 200
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public Tag[] Tags { get; set; }
	}
	
	public class UpdateRepositoryPutBody
	{
		
		/// <summary>
		///  An updated repository description. 
		/// Max length: 1000
		/// Pattern: \P{C}*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"\P{C}*")]
		public string Description { get; set; }
		
		/// <summary>
		///  A list of upstream repositories to associate with the repository. The order of the upstream repositories in the list determines their priority order when CodeArtifact looks for a requested package version. For more information, see <a href="https://docs.aws.amazon.com/codeartifact/latest/ug/repos-upstream.html">Working with upstream repositories</a>. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="upstreams")]
		public UpstreamRepository[] Upstreams { get; set; }
	}
	
	public class PutPackageOriginConfigurationPostBody
	{
		
		/// <summary>
		/// Details about the origin restrictions set on the package. The package origin restrictions determine how new versions of a package can be added to a specific repository.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="restrictions")]
		public PutPackageOriginConfigurationPostBodyRestrictions Restrictions { get; set; }
	}
	
	public class PutPackageOriginConfigurationPostBodyRestrictions
	{
		
		[System.Runtime.Serialization.DataMember(Name="publish")]
		public AllowPublish Publish { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="upstream")]
		public AllowPublish Upstream { get; set; }
	}
	
	public class DeletePackageVersionsPostBody
	{
		
		/// <summary>
		///  An array of strings that specify the versions of the package to delete. 
		/// Required
		/// Maximum items: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="versions")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string[] Versions { get; set; }
		
		/// <summary>
		///  The expected status of the package version to delete. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expectedStatus")]
		public PackageVersionStatus ExpectedStatus { get; set; }
	}
	
	public class DisposePackageVersionsPostBody
	{
		
		/// <summary>
		///  The versions of the package you want to dispose. 
		/// Required
		/// Maximum items: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="versions")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string[] Versions { get; set; }
		
		/// <summary>
		///  The revisions of the package versions you want to dispose. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="versionRevisions")]
		public System.Collections.Generic.Dictionary<string, string> VersionRevisions { get; set; }
		
		/// <summary>
		///  The expected status of the package version to dispose. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expectedStatus")]
		public PackageVersionStatus ExpectedStatus { get; set; }
	}
	
	public class PutRepositoryPermissionsPolicyPutBody
	{
		
		/// <summary>
		///  Sets the revision of the resource policy that specifies permissions to access the repository. This revision is used for optimistic locking, which prevents others from overwriting your changes to the repository's resource policy. 
		/// Min length: 1
		/// Max length: 100
		/// Pattern: \S+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="policyRevision")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"\S+")]
		public string PolicyRevision { get; set; }
		
		/// <summary>
		///  A valid displayable JSON Aspen policy string to be set as the access control resource policy on the provided repository. 
		/// Required
		/// Min length: 1
		/// Max length: 7168
		/// Pattern: [\P{C}\s]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="policyDocument")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(7168)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\P{C}\s]+")]
		public string PolicyDocument { get; set; }
	}
	
	public class ListDomainsPostBody
	{
		
		/// <summary>
		///  The maximum number of results to return per page. 
		/// Minimum: 1
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		[System.ComponentModel.DataAnnotations.Range(1, 1000)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		///  The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results. 
		/// Min length: 1
		/// Max length: 2000
		/// Pattern: \S+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2000)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"\S+")]
		public string NextToken { get; set; }
	}
	
	public class PublishPackageVersionPostBody
	{
		
		/// <summary>
		/// The content of the asset to publish.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="assetContent")]
		public string AssetContent { get; set; }
	}
	
	public class PutDomainPermissionsPolicyPutBody
	{
		
		/// <summary>
		///  The name of the domain on which to set the resource policy. 
		/// Required
		/// Min length: 2
		/// Max length: 50
		/// Pattern: [a-z][a-z0-9\-]{0,48}[a-z0-9]
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="domain")]
		[System.ComponentModel.DataAnnotations.MinLength(2)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[a-z][a-z0-9\-]{0,48}[a-z0-9]")]
		public string Domain { get; set; }
		
		/// <summary>
		///  The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include dashes or spaces. 
		/// Min length: 12
		/// Max length: 12
		/// Pattern: [0-9]{12}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="domainOwner")]
		[System.ComponentModel.DataAnnotations.MinLength(12)]
		[System.ComponentModel.DataAnnotations.MaxLength(12)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[0-9]{12}")]
		public string DomainOwner { get; set; }
		
		/// <summary>
		///  The current revision of the resource policy to be set. This revision is used for optimistic locking, which prevents others from overwriting your changes to the domain's resource policy. 
		/// Min length: 1
		/// Max length: 100
		/// Pattern: \S+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="policyRevision")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"\S+")]
		public string PolicyRevision { get; set; }
		
		/// <summary>
		///  A valid displayable JSON Aspen policy string to be set as the access control resource policy on the provided domain. 
		/// Required
		/// Min length: 1
		/// Max length: 7168
		/// Pattern: [\P{C}\s]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="policyDocument")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(7168)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\P{C}\s]+")]
		public string PolicyDocument { get; set; }
	}
	
	public class TagResourcePostBody
	{
		
		/// <summary>
		/// The tags you want to modify or add to the resource.
		/// Required
		/// Minimum items: 0
		/// Maximum items: 200
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tags")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public Tag[] Tags { get; set; }
	}
	
	public class UntagResourcePostBody
	{
		
		/// <summary>
		/// The tag key for each tag that you want to remove from the resource.
		/// Required
		/// Minimum items: 0
		/// Maximum items: 200
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tagKeys")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string[] TagKeys { get; set; }
	}
	
	public class UpdatePackageVersionsStatusPostBody
	{
		
		/// <summary>
		///  An array of strings that specify the versions of the package with the statuses to update. 
		/// Required
		/// Maximum items: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="versions")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string[] Versions { get; set; }
		
		/// <summary>
		///  A map of package versions and package version revisions. The map <code>key</code> is the package version (for example, <code>3.5.2</code>), and the map <code>value</code> is the package version revision. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="versionRevisions")]
		public System.Collections.Generic.Dictionary<string, string> VersionRevisions { get; set; }
		
		/// <summary>
		///  The package versionâ€™s expected status before it is updated. If <code>expectedStatus</code> is provided, the package version's status is updated only if its status at the time <code>UpdatePackageVersionsStatus</code> is called matches <code>expectedStatus</code>. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expectedStatus")]
		public PackageVersionStatus ExpectedStatus { get; set; }
		
		/// <summary>
		///  The status you want to change the package version status to. 
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="targetStatus")]
		public PackageVersionStatus TargetStatus { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
