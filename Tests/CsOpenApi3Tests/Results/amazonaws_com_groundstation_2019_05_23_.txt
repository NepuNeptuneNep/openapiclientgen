//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContactIdResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="contactId")]
		public string ContactId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidParameterException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DependencyException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceNotFoundException
	{
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConfigIdResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="configArn")]
		public string ConfigArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="configId")]
		public string ConfigId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="configType")]
		public ConfigCapabilityType ConfigType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ConfigCapabilityType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="antenna-downlink")]
		antennaMinusdownlink = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="antenna-downlink-demod-decode")]
		antennaMinusdownlinkMinusdemodMinusdecode = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="antenna-uplink")]
		antennaMinusuplink = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="dataflow-endpoint")]
		dataflowMinusendpoint = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="tracking")]
		tracking = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="uplink-echo")]
		uplinkMinusecho = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="s3-recording")]
		s3Minusrecording = 6,
	}
	
	/// <summary>
	/// Information about how AWS Ground Station should configure an antenna for downlink during a contact.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AntennaDownlinkConfig
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="spectrumConfig")]
		public SpectrumConfig SpectrumConfig { get; set; }
	}
	
	/// <summary>
	/// Object that describes a spectral <code>Config</code>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SpectrumConfig
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="bandwidth")]
		public FrequencyBandwidth Bandwidth { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="centerFrequency")]
		public Frequency CenterFrequency { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="polarization")]
		public Polarization Polarization { get; set; }
	}
	
	/// <summary>
	/// Object that describes the frequency bandwidth. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FrequencyBandwidth
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="units")]
		public BandwidthUnits Units { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public double Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum BandwidthUnits
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GHz")]
		GHz = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MHz")]
		MHz = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="kHz")]
		kHz = 2,
	}
	
	/// <summary>
	/// Object that describes the frequency.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Frequency
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="units")]
		public BandwidthUnits Units { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public double Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Polarization
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LEFT_HAND")]
		LEFT_HAND = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NONE")]
		NONE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RIGHT_HAND")]
		RIGHT_HAND = 2,
	}
	
	/// <summary>
	/// Information about how AWS Ground Station should conÔ¨Ågure an antenna for downlink demod decode during a contact.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AntennaDownlinkDemodDecodeConfig
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="decodeConfig")]
		public DecodeConfig DecodeConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="demodulationConfig")]
		public DemodulationConfig DemodulationConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="spectrumConfig")]
		public SpectrumConfig SpectrumConfig { get; set; }
	}
	
	/// <summary>
	/// Information about the decode <code>Config</code>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DecodeConfig
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="unvalidatedJSON")]
		public string UnvalidatedJSON { get; set; }
	}
	
	/// <summary>
	/// Information about the demodulation <code>Config</code>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DemodulationConfig
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="unvalidatedJSON")]
		public string UnvalidatedJSON { get; set; }
	}
	
	/// <summary>
	/// Information about the uplink <code>Config</code> of an antenna.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AntennaUplinkConfig
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="spectrumConfig")]
		public UplinkSpectrumConfig SpectrumConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="targetEirp")]
		public Eirp TargetEirp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transmitDisabled")]
		public System.Nullable<System.Boolean> TransmitDisabled { get; set; }
	}
	
	/// <summary>
	/// Information about the uplink spectral <code>Config</code>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UplinkSpectrumConfig
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="centerFrequency")]
		public Frequency CenterFrequency { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="polarization")]
		public Polarization Polarization { get; set; }
	}
	
	/// <summary>
	/// Object that represents EIRP.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Eirp
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="units")]
		public EirpUnits Units { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public double Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum EirpUnits
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="dBW")]
		dBW = 0,
	}
	
	/// <summary>
	/// Information about the dataflow endpoint <code>Config</code>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DataflowEndpointConfig
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dataflowEndpointName")]
		public string DataflowEndpointName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dataflowEndpointRegion")]
		public string DataflowEndpointRegion { get; set; }
	}
	
	/// <summary>
	/// Information about an S3 recording <code>Config</code>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class S3RecordingConfig
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="bucketArn")]
		public string BucketArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="prefix")]
		public string Prefix { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		public string RoleArn { get; set; }
	}
	
	/// <summary>
	/// Object that determines whether tracking should be used during a contact executed with this <code>Config</code> in the mission profile.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TrackingConfig
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="autotrack")]
		public Criticality Autotrack { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Criticality
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PREFERRED")]
		PREFERRED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="REMOVED")]
		REMOVED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="REQUIRED")]
		REQUIRED = 2,
	}
	
	/// <summary>
	/// <p>Information about an uplink echo <code>Config</code>.</p> <p>Parameters from the <code>AntennaUplinkConfig</code>, corresponding to the specified <code>AntennaUplinkConfigArn</code>, are used when this <code>UplinkEchoConfig</code> is used in a contact.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UplinkEchoConfig
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="antennaUplinkConfigArn")]
		public string AntennaUplinkConfigArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public bool Enabled { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceLimitExceededException
	{
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DataflowEndpointGroupIdResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="dataflowEndpointGroupId")]
		public string DataflowEndpointGroupId { get; set; }
	}
	
	/// <summary>
	/// Information about the endpoint details.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EndpointDetails
	{
		
		[System.Runtime.Serialization.DataMember(Name="awsGroundStationAgentEndpoint")]
		public AwsGroundStationAgentEndpoint AwsGroundStationAgentEndpoint { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endpoint")]
		public DataflowEndpoint Endpoint { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="healthReasons")]
		public CapabilityHealthReason[] HealthReasons { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="healthStatus")]
		public CapabilityHealth HealthStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="securityDetails")]
		public SecurityDetails SecurityDetails { get; set; }
	}
	
	/// <summary>
	/// Information about AwsGroundStationAgentEndpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AwsGroundStationAgentEndpoint
	{
		
		[System.Runtime.Serialization.DataMember(Name="agentStatus")]
		public AgentStatus AgentStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="auditResults")]
		public AuditResults AuditResults { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="egressAddress")]
		public ConnectionDetails EgressAddress { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ingressAddress")]
		public RangedConnectionDetails IngressAddress { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AgentStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SUCCESS")]
		SUCCESS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FAILED")]
		FAILED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ACTIVE")]
		ACTIVE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INACTIVE")]
		INACTIVE = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AuditResults
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HEALTHY")]
		HEALTHY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNHEALTHY")]
		UNHEALTHY = 1,
	}
	
	/// <summary>
	/// Egress address of AgentEndpoint with an optional mtu.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConnectionDetails
	{
		
		[System.Runtime.Serialization.DataMember(Name="mtu")]
		public System.Nullable<System.Int32> Mtu { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="socketAddress")]
		public SocketAddress SocketAddress { get; set; }
	}
	
	/// <summary>
	/// Information about the socket address.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SocketAddress
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="port")]
		public int Port { get; set; }
	}
	
	/// <summary>
	/// Ingress address of AgentEndpoint with a port range and an optional mtu.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RangedConnectionDetails
	{
		
		[System.Runtime.Serialization.DataMember(Name="mtu")]
		public System.Nullable<System.Int32> Mtu { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="socketAddress")]
		public RangedSocketAddress SocketAddress { get; set; }
	}
	
	/// <summary>
	/// A socket address with a port range.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RangedSocketAddress
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="portRange")]
		public IntegerRange PortRange { get; set; }
	}
	
	/// <summary>
	/// An integer range that has a minimum and maximum value.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class IntegerRange
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="maximum")]
		public int Maximum { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="minimum")]
		public int Minimum { get; set; }
	}
	
	/// <summary>
	/// Information about a dataflow endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DataflowEndpoint
	{
		
		[System.Runtime.Serialization.DataMember(Name="address")]
		public SocketAddress Address { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mtu")]
		public System.Nullable<System.Int32> Mtu { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public EndpointStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum EndpointStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="created")]
		created = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="creating")]
		creating = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="deleted")]
		deleted = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="deleting")]
		deleting = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="failed")]
		failed = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CapabilityHealthReason
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NO_REGISTERED_AGENT")]
		NO_REGISTERED_AGENT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INVALID_IP_OWNERSHIP")]
		INVALID_IP_OWNERSHIP = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NOT_AUTHORIZED_TO_CREATE_SLR")]
		NOT_AUTHORIZED_TO_CREATE_SLR = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNVERIFIED_IP_OWNERSHIP")]
		UNVERIFIED_IP_OWNERSHIP = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INITIALIZING_DATAPLANE")]
		INITIALIZING_DATAPLANE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DATAPLANE_FAILURE")]
		DATAPLANE_FAILURE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HEALTHY")]
		HEALTHY = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CapabilityHealth
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNHEALTHY")]
		UNHEALTHY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HEALTHY")]
		HEALTHY = 1,
	}
	
	/// <summary>
	/// Information about endpoints.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SecurityDetails
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="securityGroupIds")]
		public string[] SecurityGroupIds { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="subnetIds")]
		public string[] SubnetIds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EphemerisIdResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="ephemerisId")]
		public string EphemerisId { get; set; }
	}
	
	/// <summary>
	/// Ephemeris data in Orbit Ephemeris Message (OEM) format.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OEMEphemeris
	{
		
		[System.Runtime.Serialization.DataMember(Name="oemData")]
		public string OemData { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="s3Object")]
		public S3Object S3Object { get; set; }
	}
	
	/// <summary>
	/// Object stored in S3 containing ephemeris data.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class S3Object
	{
		
		[System.Runtime.Serialization.DataMember(Name="bucket")]
		public string Bucket { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	/// <summary>
	/// Two-line element set (TLE) ephemeris.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TLEEphemeris
	{
		
		[System.Runtime.Serialization.DataMember(Name="s3Object")]
		public S3Object S3Object { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tleData")]
		public TLEData[] TleData { get; set; }
	}
	
	/// <summary>
	/// Two-line element set (TLE) data.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TLEData
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tleLine1")]
		public string TleLine1 { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tleLine2")]
		public string TleLine2 { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="validTimeRange")]
		public TimeRange ValidTimeRange { get; set; }
	}
	
	/// <summary>
	/// A time range with a start and end time.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TimeRange
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.DateTimeOffset EndTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.DateTimeOffset StartTime { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MissionProfileIdResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="missionProfileId")]
		public string MissionProfileId { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeContactResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="contactId")]
		public string ContactId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contactStatus")]
		public ContactStatus ContactStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dataflowList")]
		public DataflowDetail[] DataflowList { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.DateTimeOffset EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errorMessage")]
		public string ErrorMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="groundStation")]
		public string GroundStation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maximumElevation")]
		public Elevation MaximumElevation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="missionProfileArn")]
		public string MissionProfileArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="postPassEndTime")]
		public System.DateTimeOffset PostPassEndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="prePassStartTime")]
		public System.DateTimeOffset PrePassStartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="region")]
		public string Region { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="satelliteArn")]
		public string SatelliteArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.DateTimeOffset StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagsMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ContactStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AVAILABLE")]
		AVAILABLE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS_CANCELLED")]
		AWS_CANCELLED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS_FAILED")]
		AWS_FAILED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CANCELLED")]
		CANCELLED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CANCELLING")]
		CANCELLING = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="COMPLETED")]
		COMPLETED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FAILED")]
		FAILED = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FAILED_TO_SCHEDULE")]
		FAILED_TO_SCHEDULE = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PASS")]
		PASS = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="POSTPASS")]
		POSTPASS = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PREPASS")]
		PREPASS = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SCHEDULED")]
		SCHEDULED = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SCHEDULING")]
		SCHEDULING = 12,
	}
	
	/// <summary>
	/// Information about a dataflow edge used in a contact.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DataflowDetail
	{
		
		/// <summary>
		/// Dataflow details for the destination side.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destination")]
		public Destination Destination { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errorMessage")]
		public string ErrorMessage { get; set; }
		
		/// <summary>
		/// Dataflow details for the source side.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source")]
		public Source Source { get; set; }
	}
	
	/// <summary>
	/// Dataflow details for the destination side.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Destination
	{
		
		[System.Runtime.Serialization.DataMember(Name="configDetails")]
		public ConfigDetails ConfigDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="configId")]
		public string ConfigId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="configType")]
		public ConfigCapabilityType ConfigType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dataflowDestinationRegion")]
		public string DataflowDestinationRegion { get; set; }
	}
	
	/// <summary>
	/// Details for certain <code>Config</code> object types in a contact.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConfigDetails
	{
		
		[System.Runtime.Serialization.DataMember(Name="antennaDemodDecodeDetails")]
		public AntennaDemodDecodeDetails AntennaDemodDecodeDetails { get; set; }
		
		/// <summary>
		/// Information about the endpoint details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endpointDetails")]
		public EndpointDetails EndpointDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="s3RecordingDetails")]
		public S3RecordingDetails S3RecordingDetails { get; set; }
	}
	
	/// <summary>
	/// Details about an antenna demod decode <code>Config</code> used in a contact.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AntennaDemodDecodeDetails
	{
		
		[System.Runtime.Serialization.DataMember(Name="outputNode")]
		public string OutputNode { get; set; }
	}
	
	/// <summary>
	/// Details about an S3 recording <code>Config</code> used in a contact.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class S3RecordingDetails
	{
		
		[System.Runtime.Serialization.DataMember(Name="bucketArn")]
		public string BucketArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="keyTemplate")]
		public string KeyTemplate { get; set; }
	}
	
	/// <summary>
	/// Dataflow details for the source side.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Source
	{
		
		[System.Runtime.Serialization.DataMember(Name="configDetails")]
		public ConfigDetails ConfigDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="configId")]
		public string ConfigId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="configType")]
		public ConfigCapabilityType ConfigType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dataflowSourceRegion")]
		public string DataflowSourceRegion { get; set; }
	}
	
	/// <summary>
	/// Elevation angle of the satellite in the sky during a contact.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Elevation
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public AngleUnits Unit { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public double Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AngleUnits
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DEGREE_ANGLE")]
		DEGREE_ANGLE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RADIAN")]
		RADIAN = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TagsMap
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeEphemerisResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ephemerisId")]
		public string EphemerisId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="invalidReason")]
		public EphemerisInvalidReason InvalidReason { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="priority")]
		public System.Nullable<System.Int32> Priority { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="satelliteId")]
		public string SatelliteId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public EphemerisStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="suppliedData")]
		public EphemerisTypeDescription SuppliedData { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagsMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum EphemerisInvalidReason
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="METADATA_INVALID")]
		METADATA_INVALID = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TIME_RANGE_INVALID")]
		TIME_RANGE_INVALID = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TRAJECTORY_INVALID")]
		TRAJECTORY_INVALID = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="KMS_KEY_INVALID")]
		KMS_KEY_INVALID = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VALIDATION_ERROR")]
		VALIDATION_ERROR = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum EphemerisStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VALIDATING")]
		VALIDATING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INVALID")]
		INVALID = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ERROR")]
		ERROR = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ENABLED")]
		ENABLED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DISABLED")]
		DISABLED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EXPIRED")]
		EXPIRED = 5,
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EphemerisTypeDescription
	{
		
		/// <summary>
		/// Description of ephemeris.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oem")]
		public EphemerisDescription Oem { get; set; }
		
		/// <summary>
		/// Description of ephemeris.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tle")]
		public EphemerisDescription Tle { get; set; }
	}
	
	/// <summary>
	/// Description of ephemeris.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EphemerisDescription
	{
		
		[System.Runtime.Serialization.DataMember(Name="ephemerisData")]
		public string EphemerisData { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceS3Object")]
		public S3Object SourceS3Object { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetAgentConfigurationResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="agentId")]
		public string AgentId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="taskingDocument")]
		public string TaskingDocument { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetConfigResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="configArn")]
		public string ConfigArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="configData")]
		public ConfigTypeData ConfigData { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="configId")]
		public string ConfigId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="configType")]
		public ConfigCapabilityType ConfigType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagsMap Tags { get; set; }
	}
	
	/// <summary>
	/// <p>Object containing the parameters of a <code>Config</code>.</p> <p>See the subtype definitions for what each type of <code>Config</code> contains.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConfigTypeData
	{
		
		[System.Runtime.Serialization.DataMember(Name="antennaDownlinkConfig")]
		public AntennaDownlinkConfig AntennaDownlinkConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="antennaDownlinkDemodDecodeConfig")]
		public AntennaDownlinkDemodDecodeConfig AntennaDownlinkDemodDecodeConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="antennaUplinkConfig")]
		public AntennaUplinkConfig AntennaUplinkConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dataflowEndpointConfig")]
		public DataflowEndpointConfig DataflowEndpointConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="s3RecordingConfig")]
		public S3RecordingConfig S3RecordingConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="trackingConfig")]
		public TrackingConfig TrackingConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="uplinkEchoConfig")]
		public UplinkEchoConfig UplinkEchoConfig { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetDataflowEndpointGroupResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="contactPostPassDurationSeconds")]
		public System.Nullable<System.Int32> ContactPostPassDurationSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contactPrePassDurationSeconds")]
		public System.Nullable<System.Int32> ContactPrePassDurationSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dataflowEndpointGroupArn")]
		public string DataflowEndpointGroupArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dataflowEndpointGroupId")]
		public string DataflowEndpointGroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endpointsDetails")]
		public EndpointDetails[] EndpointsDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagsMap Tags { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetMinuteUsageResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="estimatedMinutesRemaining")]
		public System.Nullable<System.Int32> EstimatedMinutesRemaining { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isReservedMinutesCustomer")]
		public System.Nullable<System.Boolean> IsReservedMinutesCustomer { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalReservedMinuteAllocation")]
		public System.Nullable<System.Int32> TotalReservedMinuteAllocation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalScheduledMinutes")]
		public System.Nullable<System.Int32> TotalScheduledMinutes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="upcomingMinutesScheduled")]
		public System.Nullable<System.Int32> UpcomingMinutesScheduled { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetMissionProfileResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="contactPostPassDurationSeconds")]
		public System.Nullable<System.Int32> ContactPostPassDurationSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contactPrePassDurationSeconds")]
		public System.Nullable<System.Int32> ContactPrePassDurationSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dataflowEdges")]
		public string[][] DataflowEdges { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="minimumViableContactDurationSeconds")]
		public System.Nullable<System.Int32> MinimumViableContactDurationSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="missionProfileArn")]
		public string MissionProfileArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="missionProfileId")]
		public string MissionProfileId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="region")]
		public string Region { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="streamsKmsKey")]
		public KmsKey StreamsKmsKey { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="streamsKmsRole")]
		public string StreamsKmsRole { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagsMap Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="trackingConfigArn")]
		public string TrackingConfigArn { get; set; }
	}
	
	/// <summary>
	/// AWS Key Management Service (KMS) Key.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class KmsKey
	{
		
		[System.Runtime.Serialization.DataMember(Name="kmsAliasArn")]
		public string KmsAliasArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="kmsKeyArn")]
		public string KmsKeyArn { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetSatelliteResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="currentEphemeris")]
		public EphemerisMetaData CurrentEphemeris { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="groundStations")]
		public string[] GroundStations { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="noradSatelliteID")]
		public System.Nullable<System.Int32> NoradSatelliteID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="satelliteArn")]
		public string SatelliteArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="satelliteId")]
		public string SatelliteId { get; set; }
	}
	
	/// <summary>
	/// Metadata describing a particular ephemeris.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EphemerisMetaData
	{
		
		[System.Runtime.Serialization.DataMember(Name="ephemerisId")]
		public string EphemerisId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="epoch")]
		public System.DateTimeOffset Epoch { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="source")]
		public EphemerisSource Source { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum EphemerisSource
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CUSTOMER_PROVIDED")]
		CUSTOMER_PROVIDED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SPACE_TRACK")]
		SPACE_TRACK = 1,
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListConfigsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="configList")]
		public ConfigListItem[] ConfigList { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// An item in a list of <code>Config</code> objects.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConfigListItem
	{
		
		[System.Runtime.Serialization.DataMember(Name="configArn")]
		public string ConfigArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="configId")]
		public string ConfigId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="configType")]
		public ConfigCapabilityType ConfigType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListContactsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="contactList")]
		public ContactData[] ContactList { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Data describing a contact.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContactData
	{
		
		[System.Runtime.Serialization.DataMember(Name="contactId")]
		public string ContactId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contactStatus")]
		public ContactStatus ContactStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.DateTimeOffset EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errorMessage")]
		public string ErrorMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="groundStation")]
		public string GroundStation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maximumElevation")]
		public Elevation MaximumElevation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="missionProfileArn")]
		public string MissionProfileArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="postPassEndTime")]
		public System.DateTimeOffset PostPassEndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="prePassStartTime")]
		public System.DateTimeOffset PrePassStartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="region")]
		public string Region { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="satelliteArn")]
		public string SatelliteArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.DateTimeOffset StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagsMap Tags { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListDataflowEndpointGroupsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="dataflowEndpointGroupList")]
		public DataflowEndpointListItem[] DataflowEndpointGroupList { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Item in a list of <code>DataflowEndpoint</code> groups.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DataflowEndpointListItem
	{
		
		[System.Runtime.Serialization.DataMember(Name="dataflowEndpointGroupArn")]
		public string DataflowEndpointGroupArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dataflowEndpointGroupId")]
		public string DataflowEndpointGroupId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListEphemeridesResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="ephemerides")]
		public EphemerisItem[] Ephemerides { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Ephemeris item.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EphemerisItem
	{
		
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ephemerisId")]
		public string EphemerisId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="priority")]
		public System.Nullable<System.Int32> Priority { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceS3Object")]
		public S3Object SourceS3Object { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public EphemerisStatus Status { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListGroundStationsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="groundStationList")]
		public GroundStationData[] GroundStationList { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Information about the ground station data.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GroundStationData
	{
		
		[System.Runtime.Serialization.DataMember(Name="groundStationId")]
		public string GroundStationId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="groundStationName")]
		public string GroundStationName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="region")]
		public string Region { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListMissionProfilesResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="missionProfileList")]
		public MissionProfileListItem[] MissionProfileList { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Item in a list of mission profiles.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MissionProfileListItem
	{
		
		[System.Runtime.Serialization.DataMember(Name="missionProfileArn")]
		public string MissionProfileArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="missionProfileId")]
		public string MissionProfileId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="region")]
		public string Region { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListSatellitesResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="satellites")]
		public SatelliteListItem[] Satellites { get; set; }
	}
	
	/// <summary>
	/// Item in a list of satellites.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SatelliteListItem
	{
		
		[System.Runtime.Serialization.DataMember(Name="currentEphemeris")]
		public EphemerisMetaData CurrentEphemeris { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="groundStations")]
		public string[] GroundStations { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="noradSatelliteID")]
		public System.Nullable<System.Int32> NoradSatelliteID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="satelliteArn")]
		public string SatelliteArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="satelliteId")]
		public string SatelliteId { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListTagsForResourceResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagsMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RegisterAgentResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="agentId")]
		public string AgentId { get; set; }
	}
	
	/// <summary>
	/// Version information for agent components.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ComponentVersion
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="componentType")]
		public string ComponentType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="versions")]
		public string[] Versions { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TagResourceResponse
	{
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UntagResourceResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateAgentStatusResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="agentId")]
		public string AgentId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SignatureMap
	{
	}
	
	/// <summary>
	/// Data on the status of agent components.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ComponentStatusData
	{
		
		[System.Runtime.Serialization.DataMember(Name="bytesReceived")]
		public System.Nullable<System.Int32> BytesReceived { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bytesSent")]
		public System.Nullable<System.Int32> BytesSent { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="capabilityArn")]
		public string CapabilityArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="componentType")]
		public string ComponentType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dataflowId")]
		public string DataflowId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="packetsDropped")]
		public System.Nullable<System.Int32> PacketsDropped { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public AgentStatus Status { get; set; }
	}
	
	/// <summary>
	/// Detailed information about the agent.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AgentDetails
	{
		
		[System.Runtime.Serialization.DataMember(Name="agentCpuCores")]
		public System.Nullable<System.Int32> AgentCpuCores { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="agentVersion")]
		public string AgentVersion { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="componentVersions")]
		public ComponentVersion[] ComponentVersions { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="instanceId")]
		public string InstanceId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="instanceType")]
		public string InstanceType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reservedCpuCores")]
		public System.Nullable<System.Int32> ReservedCpuCores { get; set; }
	}
	
	/// <summary>
	/// Aggregate status of Agent components.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AggregateStatus
	{
		
		[System.Runtime.Serialization.DataMember(Name="signatureMap")]
		public SignatureMap SignatureMap { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public AgentStatus Status { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CancelContactRequest
	{
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateConfigRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="configData")]
		public ConfigTypeData ConfigData { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagsMap Tags { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateDataflowEndpointGroupRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="contactPostPassDurationSeconds")]
		public System.Nullable<System.Int32> ContactPostPassDurationSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contactPrePassDurationSeconds")]
		public System.Nullable<System.Int32> ContactPrePassDurationSeconds { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="endpointDetails")]
		public EndpointDetails[] EndpointDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagsMap Tags { get; set; }
	}
	
	/// <summary>
	/// Ephemeris data.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EphemerisData
	{
		
		/// <summary>
		/// Ephemeris data in Orbit Ephemeris Message (OEM) format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oem")]
		public OEMEphemeris Oem { get; set; }
		
		/// <summary>
		/// Two-line element set (TLE) ephemeris.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tle")]
		public TLEEphemeris Tle { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateEphemerisRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ephemeris")]
		public EphemerisData Ephemeris { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="expirationTime")]
		public System.DateTimeOffset ExpirationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="kmsKeyArn")]
		public string KmsKeyArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="priority")]
		public System.Nullable<System.Int32> Priority { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="satelliteId")]
		public string SatelliteId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagsMap Tags { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateMissionProfileRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="contactPostPassDurationSeconds")]
		public System.Nullable<System.Int32> ContactPostPassDurationSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contactPrePassDurationSeconds")]
		public System.Nullable<System.Int32> ContactPrePassDurationSeconds { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dataflowEdges")]
		public string[][] DataflowEdges { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="minimumViableContactDurationSeconds")]
		public int MinimumViableContactDurationSeconds { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="streamsKmsKey")]
		public KmsKey StreamsKmsKey { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="streamsKmsRole")]
		public string StreamsKmsRole { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagsMap Tags { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="trackingConfigArn")]
		public string TrackingConfigArn { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteConfigRequest
	{
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteDataflowEndpointGroupRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteEphemerisRequest
	{
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteMissionProfileRequest
	{
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeContactRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeEphemerisRequest
	{
	}
	
	/// <summary>
	/// Data for agent discovery.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DiscoveryData
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="capabilityArns")]
		public string[] CapabilityArns { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="privateIpAddresses")]
		public string[] PrivateIpAddresses { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="publicIpAddresses")]
		public string[] PublicIpAddresses { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum FrequencyUnits
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GHz")]
		GHz = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MHz")]
		MHz = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="kHz")]
		kHz = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetAgentConfigurationRequest
	{
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetConfigRequest
	{
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetDataflowEndpointGroupRequest
	{
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetMinuteUsageRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="month")]
		public int Month { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="year")]
		public int Year { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetMissionProfileRequest
	{
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetSatelliteRequest
	{
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListConfigsRequest
	{
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListContactsRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.DateTimeOffset EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="groundStation")]
		public string GroundStation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="missionProfileArn")]
		public string MissionProfileArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="satelliteArn")]
		public string SatelliteArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.DateTimeOffset StartTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="statusList")]
		public ContactStatus[] StatusList { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListDataflowEndpointGroupsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListEphemeridesRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.DateTimeOffset EndTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="satelliteId")]
		public string SatelliteId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.DateTimeOffset StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statusList")]
		public EphemerisStatus[] StatusList { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListGroundStationsRequest
	{
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListMissionProfilesRequest
	{
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListSatellitesRequest
	{
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListTagsForResourceRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RegisterAgentRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="agentDetails")]
		public AgentDetails AgentDetails { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="discoveryData")]
		public DiscoveryData DiscoveryData { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReserveContactRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.DateTimeOffset EndTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="groundStation")]
		public string GroundStation { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="missionProfileArn")]
		public string MissionProfileArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="satelliteArn")]
		public string SatelliteArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.DateTimeOffset StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagsMap Tags { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TagResourceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagsMap Tags { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UntagResourceRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateAgentStatusRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="aggregateStatus")]
		public AggregateStatus AggregateStatus { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="componentStatuses")]
		public ComponentStatusData[] ComponentStatuses { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="taskId")]
		public string TaskId { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateConfigRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="configData")]
		public ConfigTypeData ConfigData { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateEphemerisRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public bool Enabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="priority")]
		public System.Nullable<System.Int32> Priority { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateMissionProfileRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="contactPostPassDurationSeconds")]
		public System.Nullable<System.Int32> ContactPostPassDurationSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contactPrePassDurationSeconds")]
		public System.Nullable<System.Int32> ContactPrePassDurationSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dataflowEdges")]
		public string[][] DataflowEdges { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="minimumViableContactDurationSeconds")]
		public System.Nullable<System.Int32> MinimumViableContactDurationSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="streamsKmsKey")]
		public KmsKey StreamsKmsKey { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="streamsKmsRole")]
		public string StreamsKmsRole { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="trackingConfigArn")]
		public string TrackingConfigArn { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Cancels a contact with a specified contact ID.
		/// CancelContact contact/{contactId}
		/// </summary>
		/// <param name="contactId">UUID of a contact.
		/// Max length: 128
		/// Min length: 1
		// </param>
		/// <returns>Success</returns>
		public async Task<ContactIdResponse> CancelContactAsync(string contactId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "contact/"+ (contactId==null? "" : System.Uri.EscapeDataString(contactId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ContactIdResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes an existing contact.
		/// DescribeContact contact/{contactId}
		/// </summary>
		/// <param name="contactId">UUID of a contact.
		/// Max length: 128
		/// Min length: 1
		// </param>
		/// <returns>Success</returns>
		public async Task<DescribeContactResponse> DescribeContactAsync(string contactId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "contact/"+ (contactId==null? "" : System.Uri.EscapeDataString(contactId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeContactResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a <code>Config</code> with the specified <code>configData</code> parameters.</p> <p>Only one type of <code>configData</code> can be specified.</p>
		/// CreateConfig config
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ConfigIdResponse> CreateConfigAsync(CreateConfigPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "config";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ConfigIdResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of <code>Config</code> objects.
		/// ListConfigs config
		/// </summary>
		/// <param name="maxResults">Maximum number of <code>Configs</code> returned.
		/// Minimum: 0
		/// Maximum: 100
		// </param>
		/// <param name="nextToken">Next token returned in the request of a previous <code>ListConfigs</code> call. Used to get the next page of results.
		/// Max length: 1000
		/// Min length: 3
		// </param>
		/// <returns>Success</returns>
		public async Task<ListConfigsResponse> ListConfigsAsync(int maxResults, string nextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "config?maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListConfigsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a <code>DataflowEndpoint</code> group containing the specified list of <code>DataflowEndpoint</code> objects.</p> <p>The <code>name</code> field in each endpoint is used in your mission profile <code>DataflowEndpointConfig</code> to specify which endpoints to use during a contact.</p> <p>When a contact uses multiple <code>DataflowEndpointConfig</code> objects, each <code>Config</code> must match a <code>DataflowEndpoint</code> in the same group.</p>
		/// CreateDataflowEndpointGroup dataflowEndpointGroup
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DataflowEndpointGroupIdResponse> CreateDataflowEndpointGroupAsync(CreateDataflowEndpointGroupPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "dataflowEndpointGroup";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DataflowEndpointGroupIdResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of <code>DataflowEndpoint</code> groups.
		/// ListDataflowEndpointGroups dataflowEndpointGroup
		/// </summary>
		/// <param name="maxResults">Maximum number of dataflow endpoint groups returned.
		/// Minimum: 0
		/// Maximum: 100
		// </param>
		/// <param name="nextToken">Next token returned in the request of a previous <code>ListDataflowEndpointGroups</code> call. Used to get the next page of results.
		/// Max length: 1000
		/// Min length: 3
		// </param>
		/// <returns>Success</returns>
		public async Task<ListDataflowEndpointGroupsResponse> ListDataflowEndpointGroupsAsync(int maxResults, string nextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "dataflowEndpointGroup?maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListDataflowEndpointGroupsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates an Ephemeris with the specified <code>EphemerisData</code>.
		/// CreateEphemeris ephemeris
		/// </summary>
		/// <returns>Success</returns>
		public async Task<EphemerisIdResponse> CreateEphemerisAsync(CreateEphemerisPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ephemeris";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<EphemerisIdResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a mission profile.</p> <p> <code>dataflowEdges</code> is a list of lists of strings. Each lower level list of strings has two elements: a <i>from</i> ARN and a <i>to</i> ARN.</p>
		/// CreateMissionProfile missionprofile
		/// </summary>
		/// <returns>Success</returns>
		public async Task<MissionProfileIdResponse> CreateMissionProfileAsync(CreateMissionProfilePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "missionprofile";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<MissionProfileIdResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of mission profiles.
		/// ListMissionProfiles missionprofile
		/// </summary>
		/// <param name="maxResults">Maximum number of mission profiles returned.
		/// Minimum: 0
		/// Maximum: 100
		// </param>
		/// <param name="nextToken">Next token returned in the request of a previous <code>ListMissionProfiles</code> call. Used to get the next page of results.
		/// Max length: 1000
		/// Min length: 3
		// </param>
		/// <returns>Success</returns>
		public async Task<ListMissionProfilesResponse> ListMissionProfilesAsync(int maxResults, string nextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "missionprofile?maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListMissionProfilesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a <code>Config</code>.
		/// DeleteConfig config/{configType}/{configId}
		/// </summary>
		/// <param name="configId">UUID of a <code>Config</code>.
		/// Max length: 128
		/// Min length: 1
		// </param>
		/// <param name="configType">Type of a <code>Config</code>.</param>
		/// <returns>Success</returns>
		public async Task<ConfigIdResponse> DeleteConfigAsync(string configId, DeleteConfigConfigType configType, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "config/"+configType+"/"+ (configId==null? "" : System.Uri.EscapeDataString(configId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ConfigIdResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Returns <code>Config</code> information.</p> <p>Only one <code>Config</code> response can be returned.</p>
		/// GetConfig config/{configType}/{configId}
		/// </summary>
		/// <param name="configId">UUID of a <code>Config</code>.
		/// Max length: 128
		/// Min length: 1
		// </param>
		/// <param name="configType">Type of a <code>Config</code>.</param>
		/// <returns>Success</returns>
		public async Task<GetConfigResponse> GetConfigAsync(string configId, GetConfigConfigType configType, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "config/"+configType+"/"+ (configId==null? "" : System.Uri.EscapeDataString(configId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetConfigResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Updates the <code>Config</code> used when scheduling contacts.</p> <p>Updating a <code>Config</code> will not update the execution parameters for existing future contacts scheduled with this <code>Config</code>.</p>
		/// UpdateConfig config/{configType}/{configId}
		/// </summary>
		/// <param name="configId">UUID of a <code>Config</code>.
		/// Max length: 128
		/// Min length: 1
		// </param>
		/// <param name="configType">Type of a <code>Config</code>.</param>
		/// <returns>Success</returns>
		public async Task<ConfigIdResponse> UpdateConfigAsync(string configId, UpdateConfigConfigType configType, UpdateConfigPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "config/"+configType+"/"+ (configId==null? "" : System.Uri.EscapeDataString(configId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ConfigIdResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a dataflow endpoint group.
		/// DeleteDataflowEndpointGroup dataflowEndpointGroup/{dataflowEndpointGroupId}
		/// </summary>
		/// <param name="dataflowEndpointGroupId">UUID of a dataflow endpoint group.
		/// Max length: 128
		/// Min length: 1
		// </param>
		/// <returns>Success</returns>
		public async Task<DataflowEndpointGroupIdResponse> DeleteDataflowEndpointGroupAsync(string dataflowEndpointGroupId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "dataflowEndpointGroup/"+ (dataflowEndpointGroupId==null? "" : System.Uri.EscapeDataString(dataflowEndpointGroupId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DataflowEndpointGroupIdResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the dataflow endpoint group.
		/// GetDataflowEndpointGroup dataflowEndpointGroup/{dataflowEndpointGroupId}
		/// </summary>
		/// <param name="dataflowEndpointGroupId">UUID of a dataflow endpoint group.
		/// Max length: 128
		/// Min length: 1
		// </param>
		/// <returns>Success</returns>
		public async Task<GetDataflowEndpointGroupResponse> GetDataflowEndpointGroupAsync(string dataflowEndpointGroupId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "dataflowEndpointGroup/"+ (dataflowEndpointGroupId==null? "" : System.Uri.EscapeDataString(dataflowEndpointGroupId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetDataflowEndpointGroupResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes an ephemeris
		/// DeleteEphemeris ephemeris/{ephemerisId}
		/// </summary>
		/// <param name="ephemerisId">The AWS Ground Station ephemeris ID.
		/// Max length: 128
		/// Min length: 1
		// </param>
		/// <returns>Success</returns>
		public async Task<EphemerisIdResponse> DeleteEphemerisAsync(string ephemerisId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ephemeris/"+ (ephemerisId==null? "" : System.Uri.EscapeDataString(ephemerisId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<EphemerisIdResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes an existing ephemeris.
		/// DescribeEphemeris ephemeris/{ephemerisId}
		/// </summary>
		/// <param name="ephemerisId">The AWS Ground Station ephemeris ID.
		/// Max length: 128
		/// Min length: 1
		// </param>
		/// <returns>Success</returns>
		public async Task<DescribeEphemerisResponse> DescribeEphemerisAsync(string ephemerisId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ephemeris/"+ (ephemerisId==null? "" : System.Uri.EscapeDataString(ephemerisId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeEphemerisResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing ephemeris
		/// UpdateEphemeris ephemeris/{ephemerisId}
		/// </summary>
		/// <param name="ephemerisId">The AWS Ground Station ephemeris ID.
		/// Max length: 128
		/// Min length: 1
		// </param>
		/// <returns>Success</returns>
		public async Task<EphemerisIdResponse> UpdateEphemerisAsync(string ephemerisId, UpdateEphemerisPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ephemeris/"+ (ephemerisId==null? "" : System.Uri.EscapeDataString(ephemerisId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<EphemerisIdResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a mission profile.
		/// DeleteMissionProfile missionprofile/{missionProfileId}
		/// </summary>
		/// <param name="missionProfileId">UUID of a mission profile.
		/// Max length: 128
		/// Min length: 1
		// </param>
		/// <returns>Success</returns>
		public async Task<MissionProfileIdResponse> DeleteMissionProfileAsync(string missionProfileId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "missionprofile/"+ (missionProfileId==null? "" : System.Uri.EscapeDataString(missionProfileId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<MissionProfileIdResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a mission profile.
		/// GetMissionProfile missionprofile/{missionProfileId}
		/// </summary>
		/// <param name="missionProfileId">UUID of a mission profile.
		/// Max length: 128
		/// Min length: 1
		// </param>
		/// <returns>Success</returns>
		public async Task<GetMissionProfileResponse> GetMissionProfileAsync(string missionProfileId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "missionprofile/"+ (missionProfileId==null? "" : System.Uri.EscapeDataString(missionProfileId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetMissionProfileResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Updates a mission profile.</p> <p>Updating a mission profile will not update the execution parameters for existing future contacts.</p>
		/// UpdateMissionProfile missionprofile/{missionProfileId}
		/// </summary>
		/// <param name="missionProfileId">UUID of a mission profile.
		/// Max length: 128
		/// Min length: 1
		// </param>
		/// <returns>Success</returns>
		public async Task<MissionProfileIdResponse> UpdateMissionProfileAsync(string missionProfileId, UpdateMissionProfilePutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "missionprofile/"+ (missionProfileId==null? "" : System.Uri.EscapeDataString(missionProfileId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<MissionProfileIdResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <note> <p> For use by AWS Ground Station Agent and shouldn't be called directly.</p> </note> <p>Gets the latest configuration information for a registered agent.</p>
		/// GetAgentConfiguration agent/{agentId}/configuration
		/// </summary>
		/// <param name="agentId">UUID of agent to get configuration information for.
		/// Max length: 128
		/// Min length: 1
		// </param>
		/// <returns>Success</returns>
		public async Task<GetAgentConfigurationResponse> GetAgentConfigurationAsync(string agentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "agent/"+ (agentId==null? "" : System.Uri.EscapeDataString(agentId))+"/configuration";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetAgentConfigurationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the number of reserved minutes used by account.
		/// GetMinuteUsage minute-usage
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetMinuteUsageResponse> GetMinuteUsageAsync(GetMinuteUsagePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "minute-usage";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetMinuteUsageResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a satellite.
		/// GetSatellite satellite/{satelliteId}
		/// </summary>
		/// <param name="satelliteId">UUID of a satellite.
		/// Max length: 128
		/// Min length: 1
		// </param>
		/// <returns>Success</returns>
		public async Task<GetSatelliteResponse> GetSatelliteAsync(string satelliteId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "satellite/"+ (satelliteId==null? "" : System.Uri.EscapeDataString(satelliteId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetSatelliteResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Returns a list of contacts.</p> <p>If <code>statusList</code> contains AVAILABLE, the request must include <code>groundStation</code>, <code>missionprofileArn</code>, and <code>satelliteArn</code>. </p>
		/// ListContacts contacts
		/// </summary>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListContactsResponse> ListContactsAsync(string maxResults, string nextToken, ListContactsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "contacts?maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListContactsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List existing ephemerides.
		/// ListEphemerides ephemerides
		/// </summary>
		/// <param name="maxResults">Maximum number of ephemerides to return.
		/// Minimum: 0
		/// Maximum: 100
		// </param>
		/// <param name="nextToken">Pagination token.
		/// Max length: 1000
		/// Min length: 3
		// </param>
		/// <returns>Success</returns>
		public async Task<ListEphemeridesResponse> ListEphemeridesAsync(int maxResults, string nextToken, ListEphemeridesPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ephemerides?maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListEphemeridesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of ground stations.
		/// ListGroundStations groundstation
		/// </summary>
		/// <param name="maxResults">Maximum number of ground stations returned.
		/// Minimum: 0
		/// Maximum: 100
		// </param>
		/// <param name="nextToken">Next token that can be supplied in the next call to get the next page of ground stations.
		/// Max length: 1000
		/// Min length: 3
		// </param>
		/// <param name="satelliteId">Satellite ID to retrieve on-boarded ground stations.
		/// Max length: 128
		/// Min length: 1
		// </param>
		/// <returns>Success</returns>
		public async Task<ListGroundStationsResponse> ListGroundStationsAsync(int maxResults, string nextToken, string satelliteId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "groundstation?maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&satelliteId=" + (satelliteId==null? "" : System.Uri.EscapeDataString(satelliteId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListGroundStationsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of satellites.
		/// ListSatellites satellite
		/// </summary>
		/// <param name="maxResults">Maximum number of satellites returned.
		/// Minimum: 0
		/// Maximum: 100
		// </param>
		/// <param name="nextToken">Next token that can be supplied in the next call to get the next page of satellites.
		/// Max length: 1000
		/// Min length: 3
		// </param>
		/// <returns>Success</returns>
		public async Task<ListSatellitesResponse> ListSatellitesAsync(int maxResults, string nextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "satellite?maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListSatellitesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of tags for a specified resource.
		/// ListTagsForResource tags/{resourceArn}
		/// </summary>
		/// <param name="resourceArn">ARN of a resource.
		/// Max length: 1024
		/// Min length: 5
		// </param>
		/// <returns>Success</returns>
		public async Task<ListTagsForResourceResponse> ListTagsForResourceAsync(string resourceArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+ (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListTagsForResourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Assigns a tag to a resource.
		/// TagResource tags/{resourceArn}
		/// </summary>
		/// <param name="resourceArn">ARN of a resource tag.
		/// Max length: 1024
		/// Min length: 5
		// </param>
		/// <returns>Success</returns>
		public async Task<TagResourceResponse> TagResourceAsync(string resourceArn, TagResourcePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+ (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TagResourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <note> <p> For use by AWS Ground Station Agent and shouldn't be called directly.</p> </note> <p> Registers a new agent with AWS Ground Station. </p>
		/// RegisterAgent agent
		/// </summary>
		/// <returns>Success</returns>
		public async Task<RegisterAgentResponse> RegisterAgentAsync(RegisterAgentPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "agent";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RegisterAgentResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Reserves a contact using specified parameters.
		/// ReserveContact contact
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ContactIdResponse> ReserveContactAsync(ReserveContactPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "contact";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ContactIdResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deassigns a resource tag.
		/// UntagResource tags/{resourceArn}#tagKeys
		/// </summary>
		/// <param name="resourceArn">ARN of a resource.
		/// Max length: 1024
		/// Min length: 5
		// </param>
		/// <param name="tagKeys">Keys of a resource tag.
		/// Minimum items: 0
		/// Maximum items: 500
		// </param>
		/// <returns>Success</returns>
		public async Task<UntagResourceResponse> UntagResourceAsync(string resourceArn, string[] tagKeys, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+ (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn))+"#tagKeys&"+string.Join("&", tagKeys.Select(z => $"tagKeys={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UntagResourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <note> <p> For use by AWS Ground Station Agent and shouldn't be called directly.</p> </note> <p>Update the status of the agent.</p>
		/// UpdateAgentStatus agent/{agentId}
		/// </summary>
		/// <param name="agentId">UUID of agent to update.
		/// Max length: 128
		/// Min length: 1
		// </param>
		/// <returns>Success</returns>
		public async Task<UpdateAgentStatusResponse> UpdateAgentStatusAsync(string agentId, UpdateAgentStatusPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "agent/"+ (agentId==null? "" : System.Uri.EscapeDataString(agentId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateAgentStatusResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
	
	public class CreateConfigPostBody
	{
		
		/// <summary>
		/// <p>Object containing the parameters of a <code>Config</code>.</p> <p>See the subtype definitions for what each type of <code>Config</code> contains.</p>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="configData")]
		public CreateConfigPostBodyConfigData ConfigData { get; set; }
		
		/// <summary>
		/// Name of a <code>Config</code>.
		/// Required
		/// Max length: 256
		/// Min length: 1
		/// Pattern: ^[ a-zA-Z0-9_:-]{1,256}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[ a-zA-Z0-9_:-]{1,256}$")]
		public string Name { get; set; }
		
		/// <summary>
		/// Tags assigned to a <code>Config</code>.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public class CreateConfigPostBodyConfigData
	{
		
		[System.Runtime.Serialization.DataMember(Name="antennaDownlinkConfig")]
		public AntennaDownlinkConfig AntennaDownlinkConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="antennaDownlinkDemodDecodeConfig")]
		public AntennaDownlinkDemodDecodeConfig AntennaDownlinkDemodDecodeConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="antennaUplinkConfig")]
		public AntennaUplinkConfig AntennaUplinkConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dataflowEndpointConfig")]
		public DataflowEndpointConfig DataflowEndpointConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="s3RecordingConfig")]
		public S3RecordingConfig S3RecordingConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="trackingConfig")]
		public TrackingConfig TrackingConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="uplinkEchoConfig")]
		public UplinkEchoConfig UplinkEchoConfig { get; set; }
	}
	
	public class CreateDataflowEndpointGroupPostBody
	{
		
		/// <summary>
		/// Amount of time, in seconds, after a contact ends that the Ground Station Dataflow Endpoint Group will be in a <code>POSTPASS</code> state. A Ground Station Dataflow Endpoint Group State Change event will be emitted when the Dataflow Endpoint Group enters and exits the <code>POSTPASS</code> state.
		/// Minimum: 120
		/// Maximum: 480
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contactPostPassDurationSeconds")]
		[System.ComponentModel.DataAnnotations.Range(120, 480)]
		public System.Nullable<System.Int32> ContactPostPassDurationSeconds { get; set; }
		
		/// <summary>
		/// Amount of time, in seconds, before a contact starts that the Ground Station Dataflow Endpoint Group will be in a <code>PREPASS</code> state. A Ground Station Dataflow Endpoint Group State Change event will be emitted when the Dataflow Endpoint Group enters and exits the <code>PREPASS</code> state.
		/// Minimum: 120
		/// Maximum: 480
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contactPrePassDurationSeconds")]
		[System.ComponentModel.DataAnnotations.Range(120, 480)]
		public System.Nullable<System.Int32> ContactPrePassDurationSeconds { get; set; }
		
		/// <summary>
		/// Endpoint details of each endpoint in the dataflow endpoint group.
		/// Required
		/// Minimum items: 0
		/// Maximum items: 500
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="endpointDetails")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public EndpointDetails[] EndpointDetails { get; set; }
		
		/// <summary>
		/// Tags of a dataflow endpoint group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public class CreateEphemerisPostBody
	{
		
		/// <summary>
		/// <p>Whether to set the ephemeris status to <code>ENABLED</code> after validation.</p> <p>Setting this to false will set the ephemeris status to <code>DISABLED</code> after validation.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		/// <summary>
		/// Ephemeris data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ephemeris")]
		public CreateEphemerisPostBodyEphemeris Ephemeris { get; set; }
		
		/// <summary>
		/// An overall expiration time for the ephemeris in UTC, after which it will become <code>EXPIRED</code>.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expirationTime")]
		public System.Nullable<System.DateTimeOffset> ExpirationTime { get; set; }
		
		/// <summary>
		/// The ARN of a KMS key used to encrypt the ephemeris in Ground Station.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kmsKeyArn")]
		public string KmsKeyArn { get; set; }
		
		/// <summary>
		/// A name string associated with the ephemeris. Used as a human-readable identifier for the ephemeris.
		/// Required
		/// Max length: 256
		/// Min length: 1
		/// Pattern: ^[ a-zA-Z0-9_:-]{1,256}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[ a-zA-Z0-9_:-]{1,256}$")]
		public string Name { get; set; }
		
		/// <summary>
		/// <p>Customer-provided priority score to establish the order in which overlapping ephemerides should be used.</p> <p>The default for customer-provided ephemeris priority is 1, and higher numbers take precedence.</p> <p>Priority must be 1 or greater</p>
		/// Minimum: 1
		/// Maximum: 99999
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priority")]
		[System.ComponentModel.DataAnnotations.Range(1, 99999)]
		public System.Nullable<System.Int32> Priority { get; set; }
		
		/// <summary>
		/// AWS Ground Station satellite ID for this ephemeris.
		/// Required
		/// Max length: 128
		/// Min length: 1
		/// Pattern: ^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="satelliteId")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$")]
		public string SatelliteId { get; set; }
		
		/// <summary>
		/// Tags assigned to an ephemeris.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public class CreateEphemerisPostBodyEphemeris
	{
		
		/// <summary>
		/// Ephemeris data in Orbit Ephemeris Message (OEM) format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oem")]
		public OEMEphemeris Oem { get; set; }
		
		/// <summary>
		/// Two-line element set (TLE) ephemeris.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tle")]
		public TLEEphemeris Tle { get; set; }
	}
	
	public class CreateMissionProfilePostBody
	{
		
		/// <summary>
		/// Amount of time after a contact ends that you‚Äôd like to receive a CloudWatch event indicating the pass has finished.
		/// Minimum: 0
		/// Maximum: 21600
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contactPostPassDurationSeconds")]
		[System.ComponentModel.DataAnnotations.Range(0, 21600)]
		public System.Nullable<System.Int32> ContactPostPassDurationSeconds { get; set; }
		
		/// <summary>
		/// Amount of time prior to contact start you‚Äôd like to receive a CloudWatch event indicating an upcoming pass.
		/// Minimum: 0
		/// Maximum: 21600
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contactPrePassDurationSeconds")]
		[System.ComponentModel.DataAnnotations.Range(0, 21600)]
		public System.Nullable<System.Int32> ContactPrePassDurationSeconds { get; set; }
		
		/// <summary>
		/// A list of lists of ARNs. Each list of ARNs is an edge, with a <i>from</i> <code>Config</code> and a <i>to</i> <code>Config</code>.
		/// Required
		/// Minimum items: 0
		/// Maximum items: 500
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dataflowEdges")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public string[][] DataflowEdges { get; set; }
		
		/// <summary>
		/// Smallest amount of time in seconds that you‚Äôd like to see for an available contact. AWS Ground Station will not present you with contacts shorter than this duration.
		/// Required
		/// Minimum: 1
		/// Maximum: 21600
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="minimumViableContactDurationSeconds")]
		[System.ComponentModel.DataAnnotations.Range(1, 21600)]
		public int MinimumViableContactDurationSeconds { get; set; }
		
		/// <summary>
		/// Name of a mission profile.
		/// Required
		/// Max length: 256
		/// Min length: 1
		/// Pattern: ^[ a-zA-Z0-9_:-]{1,256}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[ a-zA-Z0-9_:-]{1,256}$")]
		public string Name { get; set; }
		
		/// <summary>
		/// AWS Key Management Service (KMS) Key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="streamsKmsKey")]
		public CreateMissionProfilePostBodyStreamsKmsKey StreamsKmsKey { get; set; }
		
		/// <summary>
		/// Role to use for encrypting streams with KMS key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="streamsKmsRole")]
		public string StreamsKmsRole { get; set; }
		
		/// <summary>
		/// Tags assigned to a mission profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
		
		/// <summary>
		/// ARN of a tracking <code>Config</code>.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="trackingConfigArn")]
		public string TrackingConfigArn { get; set; }
	}
	
	public class CreateMissionProfilePostBodyStreamsKmsKey
	{
		
		[System.Runtime.Serialization.DataMember(Name="kmsAliasArn")]
		public string KmsAliasArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="kmsKeyArn")]
		public string KmsKeyArn { get; set; }
	}
	
	public enum DeleteConfigConfigType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="antenna-downlink")]
		antennaMinusdownlink = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="antenna-downlink-demod-decode")]
		antennaMinusdownlinkMinusdemodMinusdecode = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="antenna-uplink")]
		antennaMinusuplink = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="dataflow-endpoint")]
		dataflowMinusendpoint = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="tracking")]
		tracking = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="uplink-echo")]
		uplinkMinusecho = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="s3-recording")]
		s3Minusrecording = 6,
	}
	
	public enum GetConfigConfigType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="antenna-downlink")]
		antennaMinusdownlink = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="antenna-downlink-demod-decode")]
		antennaMinusdownlinkMinusdemodMinusdecode = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="antenna-uplink")]
		antennaMinusuplink = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="dataflow-endpoint")]
		dataflowMinusendpoint = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="tracking")]
		tracking = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="uplink-echo")]
		uplinkMinusecho = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="s3-recording")]
		s3Minusrecording = 6,
	}
	
	public enum UpdateConfigConfigType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="antenna-downlink")]
		antennaMinusdownlink = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="antenna-downlink-demod-decode")]
		antennaMinusdownlinkMinusdemodMinusdecode = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="antenna-uplink")]
		antennaMinusuplink = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="dataflow-endpoint")]
		dataflowMinusendpoint = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="tracking")]
		tracking = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="uplink-echo")]
		uplinkMinusecho = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="s3-recording")]
		s3Minusrecording = 6,
	}
	
	public class UpdateConfigPutBody
	{
		
		/// <summary>
		/// <p>Object containing the parameters of a <code>Config</code>.</p> <p>See the subtype definitions for what each type of <code>Config</code> contains.</p>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="configData")]
		public UpdateConfigPutBodyConfigData ConfigData { get; set; }
		
		/// <summary>
		/// Name of a <code>Config</code>.
		/// Required
		/// Max length: 256
		/// Min length: 1
		/// Pattern: ^[ a-zA-Z0-9_:-]{1,256}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[ a-zA-Z0-9_:-]{1,256}$")]
		public string Name { get; set; }
	}
	
	public class UpdateConfigPutBodyConfigData
	{
		
		[System.Runtime.Serialization.DataMember(Name="antennaDownlinkConfig")]
		public AntennaDownlinkConfig AntennaDownlinkConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="antennaDownlinkDemodDecodeConfig")]
		public AntennaDownlinkDemodDecodeConfig AntennaDownlinkDemodDecodeConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="antennaUplinkConfig")]
		public AntennaUplinkConfig AntennaUplinkConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dataflowEndpointConfig")]
		public DataflowEndpointConfig DataflowEndpointConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="s3RecordingConfig")]
		public S3RecordingConfig S3RecordingConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="trackingConfig")]
		public TrackingConfig TrackingConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="uplinkEchoConfig")]
		public UplinkEchoConfig UplinkEchoConfig { get; set; }
	}
	
	public class UpdateEphemerisPutBody
	{
		
		/// <summary>
		/// Whether the ephemeris is enabled or not. Changing this value will not require the ephemeris to be re-validated.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public bool Enabled { get; set; }
		
		/// <summary>
		/// A name string associated with the ephemeris. Used as a human-readable identifier for the ephemeris.
		/// Max length: 256
		/// Min length: 1
		/// Pattern: ^[ a-zA-Z0-9_:-]{1,256}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[ a-zA-Z0-9_:-]{1,256}$")]
		public string Name { get; set; }
		
		/// <summary>
		/// <p>Customer-provided priority score to establish the order in which overlapping ephemerides should be used.</p> <p>The default for customer-provided ephemeris priority is 1, and higher numbers take precedence.</p> <p>Priority must be 1 or greater</p>
		/// Minimum: 0
		/// Maximum: 99999
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priority")]
		[System.ComponentModel.DataAnnotations.Range(0, 99999)]
		public System.Nullable<System.Int32> Priority { get; set; }
	}
	
	public class UpdateMissionProfilePutBody
	{
		
		/// <summary>
		/// Amount of time after a contact ends that you‚Äôd like to receive a CloudWatch event indicating the pass has finished.
		/// Minimum: 0
		/// Maximum: 21600
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contactPostPassDurationSeconds")]
		[System.ComponentModel.DataAnnotations.Range(0, 21600)]
		public System.Nullable<System.Int32> ContactPostPassDurationSeconds { get; set; }
		
		/// <summary>
		/// Amount of time after a contact ends that you‚Äôd like to receive a CloudWatch event indicating the pass has finished.
		/// Minimum: 0
		/// Maximum: 21600
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contactPrePassDurationSeconds")]
		[System.ComponentModel.DataAnnotations.Range(0, 21600)]
		public System.Nullable<System.Int32> ContactPrePassDurationSeconds { get; set; }
		
		/// <summary>
		/// A list of lists of ARNs. Each list of ARNs is an edge, with a <i>from</i> <code>Config</code> and a <i>to</i> <code>Config</code>.
		/// Minimum items: 0
		/// Maximum items: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataflowEdges")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public string[][] DataflowEdges { get; set; }
		
		/// <summary>
		/// Smallest amount of time in seconds that you‚Äôd like to see for an available contact. AWS Ground Station will not present you with contacts shorter than this duration.
		/// Minimum: 1
		/// Maximum: 21600
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minimumViableContactDurationSeconds")]
		[System.ComponentModel.DataAnnotations.Range(1, 21600)]
		public System.Nullable<System.Int32> MinimumViableContactDurationSeconds { get; set; }
		
		/// <summary>
		/// Name of a mission profile.
		/// Max length: 256
		/// Min length: 1
		/// Pattern: ^[ a-zA-Z0-9_:-]{1,256}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[ a-zA-Z0-9_:-]{1,256}$")]
		public string Name { get; set; }
		
		/// <summary>
		/// AWS Key Management Service (KMS) Key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="streamsKmsKey")]
		public UpdateMissionProfilePutBodyStreamsKmsKey StreamsKmsKey { get; set; }
		
		/// <summary>
		/// Role to use for encrypting streams with KMS key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="streamsKmsRole")]
		public string StreamsKmsRole { get; set; }
		
		/// <summary>
		/// ARN of a tracking <code>Config</code>.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trackingConfigArn")]
		public string TrackingConfigArn { get; set; }
	}
	
	public class UpdateMissionProfilePutBodyStreamsKmsKey
	{
		
		[System.Runtime.Serialization.DataMember(Name="kmsAliasArn")]
		public string KmsAliasArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="kmsKeyArn")]
		public string KmsKeyArn { get; set; }
	}
	
	public class GetMinuteUsagePostBody
	{
		
		/// <summary>
		/// The month being requested, with a value of 1-12.
		/// Required
		/// Minimum: 1
		/// Maximum: 12
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="month")]
		[System.ComponentModel.DataAnnotations.Range(1, 12)]
		public int Month { get; set; }
		
		/// <summary>
		/// The year being requested, in the format of YYYY.
		/// Required
		/// Minimum: 2018
		/// Maximum: 3000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="year")]
		[System.ComponentModel.DataAnnotations.Range(2018, 3000)]
		public int Year { get; set; }
	}
	
	public class ListContactsPostBody
	{
		
		/// <summary>
		/// End time of a contact in UTC.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.DateTimeOffset EndTime { get; set; }
		
		/// <summary>
		/// Name of a ground station.
		/// Max length: 500
		/// Min length: 4
		/// Pattern: ^[ a-zA-Z0-9-._:=]{4,256}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="groundStation")]
		[System.ComponentModel.DataAnnotations.MinLength(4)]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[ a-zA-Z0-9-._:=]{4,256}$")]
		public string GroundStation { get; set; }
		
		/// <summary>
		/// Maximum number of contacts returned.
		/// Minimum: 0
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		[System.ComponentModel.DataAnnotations.Range(0, 100)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// ARN of a mission profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="missionProfileArn")]
		public string MissionProfileArn { get; set; }
		
		/// <summary>
		/// Next token returned in the request of a previous <code>ListContacts</code> call. Used to get the next page of results.
		/// Max length: 1000
		/// Min length: 3
		/// Pattern: ^[A-Za-z0-9-/+_.=]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Za-z0-9-/+_.=]+$")]
		public string NextToken { get; set; }
		
		/// <summary>
		/// ARN of a satellite.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="satelliteArn")]
		public string SatelliteArn { get; set; }
		
		/// <summary>
		/// Start time of a contact in UTC.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.DateTimeOffset StartTime { get; set; }
		
		/// <summary>
		/// Status of a contact reservation.
		/// Required
		/// Minimum items: 0
		/// Maximum items: 500
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="statusList")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public ContactStatus[] StatusList { get; set; }
	}
	
	public class ListEphemeridesPostBody
	{
		
		/// <summary>
		/// The end time to list in UTC. The operation will return an ephemeris if its expiration time is within the time range defined by the <code>startTime</code> and <code>endTime</code>.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.DateTimeOffset EndTime { get; set; }
		
		/// <summary>
		/// The AWS Ground Station satellite ID to list ephemeris for.
		/// Required
		/// Max length: 128
		/// Min length: 1
		/// Pattern: ^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="satelliteId")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$")]
		public string SatelliteId { get; set; }
		
		/// <summary>
		/// The start time to list in UTC. The operation will return an ephemeris if its expiration time is within the time range defined by the <code>startTime</code> and <code>endTime</code>.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.DateTimeOffset StartTime { get; set; }
		
		/// <summary>
		/// The list of ephemeris status to return.
		/// Minimum items: 0
		/// Maximum items: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statusList")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public EphemerisStatus[] StatusList { get; set; }
	}
	
	public class TagResourcePostBody
	{
		
		/// <summary>
		/// Tags assigned to a resource.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public class RegisterAgentPostBody
	{
		
		/// <summary>
		/// Detailed information about the agent.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="agentDetails")]
		public RegisterAgentPostBodyAgentDetails AgentDetails { get; set; }
		
		/// <summary>
		/// Data for agent discovery.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="discoveryData")]
		public RegisterAgentPostBodyDiscoveryData DiscoveryData { get; set; }
	}
	
	public class RegisterAgentPostBodyAgentDetails
	{
		
		[System.Runtime.Serialization.DataMember(Name="agentCpuCores")]
		public System.Nullable<System.Int32> AgentCpuCores { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="agentVersion")]
		public string AgentVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="componentVersions")]
		public ComponentVersion[] ComponentVersions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="instanceId")]
		public string InstanceId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="instanceType")]
		public string InstanceType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reservedCpuCores")]
		public System.Nullable<System.Int32> ReservedCpuCores { get; set; }
	}
	
	public class RegisterAgentPostBodyDiscoveryData
	{
		
		[System.Runtime.Serialization.DataMember(Name="capabilityArns")]
		public string[] CapabilityArns { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="privateIpAddresses")]
		public string[] PrivateIpAddresses { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="publicIpAddresses")]
		public string[] PublicIpAddresses { get; set; }
	}
	
	public class ReserveContactPostBody
	{
		
		/// <summary>
		/// End time of a contact in UTC.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.DateTimeOffset EndTime { get; set; }
		
		/// <summary>
		/// Name of a ground station.
		/// Required
		/// Max length: 500
		/// Min length: 4
		/// Pattern: ^[ a-zA-Z0-9-._:=]{4,256}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="groundStation")]
		[System.ComponentModel.DataAnnotations.MinLength(4)]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[ a-zA-Z0-9-._:=]{4,256}$")]
		public string GroundStation { get; set; }
		
		/// <summary>
		/// ARN of a mission profile.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="missionProfileArn")]
		public string MissionProfileArn { get; set; }
		
		/// <summary>
		/// ARN of a satellite
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="satelliteArn")]
		public string SatelliteArn { get; set; }
		
		/// <summary>
		/// Start time of a contact in UTC.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.DateTimeOffset StartTime { get; set; }
		
		/// <summary>
		/// Tags assigned to a contact.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public class UpdateAgentStatusPutBody
	{
		
		/// <summary>
		/// Aggregate status of Agent components.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="aggregateStatus")]
		public UpdateAgentStatusPutBodyAggregateStatus AggregateStatus { get; set; }
		
		/// <summary>
		/// List of component statuses for agent.
		/// Required
		/// Minimum items: 0
		/// Maximum items: 20
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="componentStatuses")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(20)]
		public ComponentStatusData[] ComponentStatuses { get; set; }
		
		/// <summary>
		/// GUID of agent task.
		/// Required
		/// Max length: 128
		/// Min length: 1
		/// Pattern: ^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="taskId")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$")]
		public string TaskId { get; set; }
	}
	
	public class UpdateAgentStatusPutBodyAggregateStatus
	{
		
		[System.Runtime.Serialization.DataMember(Name="signatureMap")]
		public SignatureMap SignatureMap { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public AgentStatus Status { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
