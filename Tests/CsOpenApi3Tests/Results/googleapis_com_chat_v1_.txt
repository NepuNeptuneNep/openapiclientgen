//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// List of string parameters to supply when the action method is invoked. For example, consider three snooze buttons: snooze now, snooze one day, snooze next week. You might use `action method = snooze()`, passing the snooze type and snooze time in the list of string parameters.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ActionParameter
	{
		
		/// <summary>
		/// The name of the parameter for the action script.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		/// <summary>
		/// The value of the parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// Parameters that a Chat app can use to configure how its response is posted.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ActionResponse
	{
		
		/// <summary>
		/// Contains a [dialog](https://developers.google.com/chat/how-tos/dialogs) and request status code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dialogAction")]
		public DialogAction DialogAction { get; set; }
		
		/// <summary>
		/// Input only. The type of Chat app response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<ActionResponseType> Type { get; set; }
		
		/// <summary>
		/// The response of the updated widget. Used to provide autocomplete options for a widget.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updatedWidget")]
		public UpdatedWidget UpdatedWidget { get; set; }
		
		/// <summary>
		/// Input only. URL for users to authenticate or configure. (Only for `REQUEST_CONFIG` response types.)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	/// <summary>
	/// Contains a [dialog](https://developers.google.com/chat/how-tos/dialogs) and request status code.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DialogAction
	{
		
		/// <summary>
		/// Represents the status for a request to either invoke or submit a [dialog](https://developers.google.com/chat/how-tos/dialogs).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="actionStatus")]
		public ActionStatus ActionStatus { get; set; }
		
		/// <summary>
		/// Wrapper around the card body of the dialog.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dialog")]
		public Dialog Dialog { get; set; }
	}
	
	/// <summary>
	/// Represents the status for a request to either invoke or submit a [dialog](https://developers.google.com/chat/how-tos/dialogs).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ActionStatus
	{
		
		/// <summary>
		/// The status code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statusCode")]
		public System.Nullable<ActionStatusStatusCode> StatusCode { get; set; }
		
		/// <summary>
		/// The message to send users about the status of their request. If unset, a generic message based on the `status_code` is sent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userFacingMessage")]
		public string UserFacingMessage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ActionStatusStatusCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OK = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELLED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_ARGUMENT = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEADLINE_EXCEEDED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_FOUND = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALREADY_EXISTS = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PERMISSION_DENIED = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNAUTHENTICATED = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESOURCE_EXHAUSTED = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED_PRECONDITION = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ABORTED = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OUT_OF_RANGE = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNIMPLEMENTED = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERNAL = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNAVAILABLE = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATA_LOSS = 16,
	}
	
	/// <summary>
	/// Wrapper around the card body of the dialog.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Dialog
	{
		
		/// <summary>
		/// A card interface displayed in a Google Chat message or Google Workspace Add-on. Cards support a defined layout, interactive UI elements like buttons, and rich media like images. Use cards to present detailed information, gather information from users, and guide users to take a next step. [Card builder](https://addons.gsuite.google.com/uikit/builder) To learn how to build cards, see the following documentation: * For Google Chat apps, see [Design dynamic, interactive, and consistent UIs with cards](https://developers.google.com/chat/ui). * For Google Workspace Add-ons, see [Card-based interfaces](https://developers.google.com/apps-script/add-ons/concepts/cards). **Example: Card message for a Google Chat app** ![Example contact card](https://developers.google.com/chat/images/card_api_reference.png) To create the sample card message in Google Chat, use the following JSON: ``` { "cardsV2": [ { "cardId": "unique-card-id", "card": { "header": { "title": "Sasha", "subtitle": "Software Engineer", "imageUrl": "https://developers.google.com/chat/images/quickstart-app-avatar.png", "imageType": "CIRCLE", "imageAltText": "Avatar for Sasha", }, "sections": [ { "header": "Contact Info", "collapsible": true, "uncollapsibleWidgetsCount": 1, "widgets": [ { "decoratedText": { "startIcon": { "knownIcon": "EMAIL", }, "text": "sasha@example.com", } }, { "decoratedText": { "startIcon": { "knownIcon": "PERSON", }, "text": "Online", }, }, { "decoratedText": { "startIcon": { "knownIcon": "PHONE", }, "text": "+1 (555) 555-1234", } }, { "buttonList": { "buttons": [ { "text": "Share", "onClick": { "openLink": { "url": "https://example.com/share", } } }, { "text": "Edit", "onClick": { "action": { "function": "goToView", "parameters": [ { "key": "viewType", "value": "EDIT", } ], } } }, ], } }, ], }, ], }, } ], } ```
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="body")]
		public GoogleAppsCardV1Card Body { get; set; }
	}
	
	/// <summary>
	/// A card interface displayed in a Google Chat message or Google Workspace Add-on. Cards support a defined layout, interactive UI elements like buttons, and rich media like images. Use cards to present detailed information, gather information from users, and guide users to take a next step. [Card builder](https://addons.gsuite.google.com/uikit/builder) To learn how to build cards, see the following documentation: * For Google Chat apps, see [Design dynamic, interactive, and consistent UIs with cards](https://developers.google.com/chat/ui). * For Google Workspace Add-ons, see [Card-based interfaces](https://developers.google.com/apps-script/add-ons/concepts/cards). **Example: Card message for a Google Chat app** ![Example contact card](https://developers.google.com/chat/images/card_api_reference.png) To create the sample card message in Google Chat, use the following JSON: ``` { "cardsV2": [ { "cardId": "unique-card-id", "card": { "header": { "title": "Sasha", "subtitle": "Software Engineer", "imageUrl": "https://developers.google.com/chat/images/quickstart-app-avatar.png", "imageType": "CIRCLE", "imageAltText": "Avatar for Sasha", }, "sections": [ { "header": "Contact Info", "collapsible": true, "uncollapsibleWidgetsCount": 1, "widgets": [ { "decoratedText": { "startIcon": { "knownIcon": "EMAIL", }, "text": "sasha@example.com", } }, { "decoratedText": { "startIcon": { "knownIcon": "PERSON", }, "text": "Online", }, }, { "decoratedText": { "startIcon": { "knownIcon": "PHONE", }, "text": "+1 (555) 555-1234", } }, { "buttonList": { "buttons": [ { "text": "Share", "onClick": { "openLink": { "url": "https://example.com/share", } } }, { "text": "Edit", "onClick": { "action": { "function": "goToView", "parameters": [ { "key": "viewType", "value": "EDIT", } ], } } }, ], } }, ], }, ], }, } ], } ```
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleAppsCardV1Card
	{
		
		/// <summary>
		/// The card's actions. Actions are added to the card's toolbar menu. Because Chat app cards have no toolbar, `cardActions[]` isn't supported by Chat apps. For example, the following JSON constructs a card action menu with `Settings` and `Send Feedback` options: ``` "card_actions": [ { "actionLabel": "Settings", "onClick": { "action": { "functionName": "goToView", "parameters": [ { "key": "viewType", "value": "SETTING" } ], "loadIndicator": "LoadIndicator.SPINNER" } } }, { "actionLabel": "Send Feedback", "onClick": { "openLink": { "url": "https://example.com/feedback" } } } ] ```
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cardActions")]
		public GoogleAppsCardV1CardAction[] CardActions { get; set; }
		
		/// <summary>
		/// In Google Workspace add-ons, sets the display properties of the `peekCardHeader`. Not supported by Chat apps.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayStyle")]
		public System.Nullable<GoogleAppsCardV1CardDisplayStyle> DisplayStyle { get; set; }
		
		/// <summary>
		/// A persistent (sticky) footer that that appears at the bottom of the card. For an example in Google Chat apps, see [Card footer](https://developers.google.com/chat/ui/widgets/card-fixed-footer). Setting `fixedFooter` without specifying a `primaryButton` or a `secondaryButton` causes an error. [Google Workspace Add-ons and Chat apps](https://developers.google.com/workspace/extend): For Chat apps, you can use fixed footers in [dialogs](https://developers.google.com/chat/how-tos/dialogs), but not [card messages](https://developers.google.com/chat/api/guides/v1/messages/create#create).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fixedFooter")]
		public GoogleAppsCardV1CardFixedFooter FixedFooter { get; set; }
		
		/// <summary>
		/// Represents a card header. For an example in Google Chat apps, see [Card header](https://developers.google.com/chat/ui/widgets/card-header).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="header")]
		public GoogleAppsCardV1CardHeader Header { get; set; }
		
		/// <summary>
		/// Name of the card. Used as a card identifier in card navigation. Because Chat apps don't support card navigation, they ignore this field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Represents a card header. For an example in Google Chat apps, see [Card header](https://developers.google.com/chat/ui/widgets/card-header).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="peekCardHeader")]
		public GoogleAppsCardV1CardHeader PeekCardHeader { get; set; }
		
		/// <summary>
		/// The divider style between sections.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sectionDividerStyle")]
		public System.Nullable<GoogleAppsCardV1CardSectionDividerStyle> SectionDividerStyle { get; set; }
		
		/// <summary>
		/// Contains a collection of widgets. Each section has its own, optional header. Sections are visually separated by a line divider. For an example in Google Chat apps, see [Card section](https://developers.google.com/chat/ui/widgets/card-section).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sections")]
		public GoogleAppsCardV1Section[] Sections { get; set; }
	}
	
	/// <summary>
	/// A card action is the action associated with the card. For example, an invoice card might include actions such as delete invoice, email invoice, or open the invoice in a browser. [Google Workspace Add-ons](https://developers.google.com/workspace/add-ons):
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleAppsCardV1CardAction
	{
		
		/// <summary>
		/// The label that displays as the action menu item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="actionLabel")]
		public string ActionLabel { get; set; }
		
		/// <summary>
		/// Represents how to respond when users click an interactive element on a card, such as a button.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="onClick")]
		public GoogleAppsCardV1OnClick OnClick { get; set; }
	}
	
	/// <summary>
	/// Represents how to respond when users click an interactive element on a card, such as a button.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleAppsCardV1OnClick
	{
		
		/// <summary>
		/// An action that describes the behavior when the form is submitted. For example, you can invoke an Apps Script script to handle the form. If the action is triggered, the form values are sent to the server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="action")]
		public GoogleAppsCardV1Action Action { get; set; }
		
		/// <summary>
		/// A card interface displayed in a Google Chat message or Google Workspace Add-on. Cards support a defined layout, interactive UI elements like buttons, and rich media like images. Use cards to present detailed information, gather information from users, and guide users to take a next step. [Card builder](https://addons.gsuite.google.com/uikit/builder) To learn how to build cards, see the following documentation: * For Google Chat apps, see [Design dynamic, interactive, and consistent UIs with cards](https://developers.google.com/chat/ui). * For Google Workspace Add-ons, see [Card-based interfaces](https://developers.google.com/apps-script/add-ons/concepts/cards). **Example: Card message for a Google Chat app** ![Example contact card](https://developers.google.com/chat/images/card_api_reference.png) To create the sample card message in Google Chat, use the following JSON: ``` { "cardsV2": [ { "cardId": "unique-card-id", "card": { "header": { "title": "Sasha", "subtitle": "Software Engineer", "imageUrl": "https://developers.google.com/chat/images/quickstart-app-avatar.png", "imageType": "CIRCLE", "imageAltText": "Avatar for Sasha", }, "sections": [ { "header": "Contact Info", "collapsible": true, "uncollapsibleWidgetsCount": 1, "widgets": [ { "decoratedText": { "startIcon": { "knownIcon": "EMAIL", }, "text": "sasha@example.com", } }, { "decoratedText": { "startIcon": { "knownIcon": "PERSON", }, "text": "Online", }, }, { "decoratedText": { "startIcon": { "knownIcon": "PHONE", }, "text": "+1 (555) 555-1234", } }, { "buttonList": { "buttons": [ { "text": "Share", "onClick": { "openLink": { "url": "https://example.com/share", } } }, { "text": "Edit", "onClick": { "action": { "function": "goToView", "parameters": [ { "key": "viewType", "value": "EDIT", } ], } } }, ], } }, ], }, ], }, } ], } ```
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="card")]
		public GoogleAppsCardV1Card Card { get; set; }
		
		/// <summary>
		/// An action that describes the behavior when the form is submitted. For example, you can invoke an Apps Script script to handle the form. If the action is triggered, the form values are sent to the server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="openDynamicLinkAction")]
		public GoogleAppsCardV1Action OpenDynamicLinkAction { get; set; }
		
		/// <summary>
		/// Represents an `onClick` event that opens a hyperlink.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="openLink")]
		public GoogleAppsCardV1OpenLink OpenLink { get; set; }
	}
	
	/// <summary>
	/// An action that describes the behavior when the form is submitted. For example, you can invoke an Apps Script script to handle the form. If the action is triggered, the form values are sent to the server.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleAppsCardV1Action
	{
		
		/// <summary>
		/// A custom function to invoke when the containing element is clicked or othrwise activated. For example usage, see [Create interactive cards](https://developers.google.com/chat/how-tos/cards-onclick).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="function")]
		public string Function { get; set; }
		
		/// <summary>
		/// Optional. Required when opening a [dialog](https://developers.google.com/chat/how-tos/dialogs). What to do in response to an interaction with a user, such as a user clicking a button in a card message. If unspecified, the app responds by executing an `action`—like opening a link or running a function—as normal. By specifying an `interaction`, the app can respond in special interactive ways. For example, by setting `interaction` to `OPEN_DIALOG`, the app can open a [dialog](https://developers.google.com/chat/how-tos/dialogs). When specified, a loading indicator isn't shown. Supported by Chat apps, but not Google Workspace Add-ons. If specified for an add-on, the entire card is stripped and nothing is shown in the client.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="interaction")]
		public System.Nullable<GoogleAppsCardV1ActionInteraction> Interaction { get; set; }
		
		/// <summary>
		/// Specifies the loading indicator that the action displays while making the call to the action.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="loadIndicator")]
		public System.Nullable<GoogleAppsCardV1ActionLoadIndicator> LoadIndicator { get; set; }
		
		/// <summary>
		/// List of action parameters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public GoogleAppsCardV1ActionParameter[] Parameters { get; set; }
		
		/// <summary>
		/// Indicates whether form values persist after the action. The default value is `false`. If `true`, form values remain after the action is triggered. To let the user make changes while the action is being processed, set [`LoadIndicator`](https://developers.google.com/workspace/add-ons/reference/rpc/google.apps.card.v1#loadindicator) to `NONE`. For [card messages](https://developers.google.com/chat/api/guides/v1/messages/create#create) in Chat apps, you must also set the action's [`ResponseType`](https://developers.google.com/chat/api/reference/rest/v1/spaces.messages#responsetype) to `UPDATE_MESSAGE` and use the same [`card_id`](https://developers.google.com/chat/api/reference/rest/v1/spaces.messages#CardWithId) from the card that contained the action. If `false`, the form values are cleared when the action is triggered. To prevent the user from making changes while the action is being processed, set [`LoadIndicator`](https://developers.google.com/workspace/add-ons/reference/rpc/google.apps.card.v1#loadindicator) to `SPINNER`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="persistValues")]
		public System.Nullable<System.Boolean> PersistValues { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GoogleAppsCardV1ActionInteraction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERACTION_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPEN_DIALOG = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GoogleAppsCardV1ActionLoadIndicator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPINNER = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 1,
	}
	
	/// <summary>
	/// List of string parameters to supply when the action method is invoked. For example, consider three snooze buttons: snooze now, snooze one day, or snooze next week. You might use `action method = snooze()`, passing the snooze type and snooze time in the list of string parameters. To learn more, see [`CommonEventObject`](https://developers.google.com/chat/api/reference/rest/v1/Event#commoneventobject).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleAppsCardV1ActionParameter
	{
		
		/// <summary>
		/// The name of the parameter for the action script.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		/// <summary>
		/// The value of the parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// Represents an `onClick` event that opens a hyperlink.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleAppsCardV1OpenLink
	{
		
		/// <summary>
		/// Whether the client forgets about a link after opening it, or observes it until the window closes. Not supported by Chat apps.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="onClose")]
		public System.Nullable<GoogleAppsCardV1OpenLinkOnClose> OnClose { get; set; }
		
		/// <summary>
		/// How to open a link. Not supported by Chat apps.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="openAs")]
		public System.Nullable<GoogleAppsCardV1OpenLinkOpenAs> OpenAs { get; set; }
		
		/// <summary>
		/// The URL to open.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GoogleAppsCardV1OpenLinkOnClose
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOTHING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RELOAD = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GoogleAppsCardV1OpenLinkOpenAs
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FULL_SIZE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OVERLAY = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GoogleAppsCardV1CardDisplayStyle
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISPLAY_STYLE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PEEK = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REPLACE = 2,
	}
	
	/// <summary>
	/// A persistent (sticky) footer that that appears at the bottom of the card. For an example in Google Chat apps, see [Card footer](https://developers.google.com/chat/ui/widgets/card-fixed-footer). Setting `fixedFooter` without specifying a `primaryButton` or a `secondaryButton` causes an error. [Google Workspace Add-ons and Chat apps](https://developers.google.com/workspace/extend): For Chat apps, you can use fixed footers in [dialogs](https://developers.google.com/chat/how-tos/dialogs), but not [card messages](https://developers.google.com/chat/api/guides/v1/messages/create#create).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleAppsCardV1CardFixedFooter
	{
		
		/// <summary>
		/// A text, icon, or text and icon button that users can click. For an example in Google Chat apps, see [Button list](https://developers.google.com/chat/ui/widgets/button-list). To make an image a clickable button, specify an `Image` (not an `ImageComponent`) and set an `onClick` action.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primaryButton")]
		public GoogleAppsCardV1Button PrimaryButton { get; set; }
		
		/// <summary>
		/// A text, icon, or text and icon button that users can click. For an example in Google Chat apps, see [Button list](https://developers.google.com/chat/ui/widgets/button-list). To make an image a clickable button, specify an `Image` (not an `ImageComponent`) and set an `onClick` action.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secondaryButton")]
		public GoogleAppsCardV1Button SecondaryButton { get; set; }
	}
	
	/// <summary>
	/// A text, icon, or text and icon button that users can click. For an example in Google Chat apps, see [Button list](https://developers.google.com/chat/ui/widgets/button-list). To make an image a clickable button, specify an `Image` (not an `ImageComponent`) and set an `onClick` action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleAppsCardV1Button
	{
		
		/// <summary>
		/// The alternative text that's used for accessibility. Set descriptive text that lets users know what the button does. For example, if a button opens a hyperlink, you might write: "Opens a new browser tab and navigates to the Google Chat developer documentation at https://developers.google.com/chat".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="altText")]
		public string AltText { get; set; }
		
		/// <summary>
		/// Represents a color in the RGBA color space. This representation is designed for simplicity of conversion to and from color representations in various languages over compactness. For example, the fields of this representation can be trivially provided to the constructor of `java.awt.Color` in Java; it can also be trivially provided to UIColor's `+colorWithRed:green:blue:alpha` method in iOS; and, with just a little work, it can be easily formatted into a CSS `rgba()` string in JavaScript. This reference page doesn't have information about the absolute color space that should be used to interpret the RGB value—for example, sRGB, Adobe RGB, DCI-P3, and BT.2020. By default, applications should assume the sRGB color space. When color equality needs to be decided, implementations, unless documented otherwise, treat two colors as equal if all their red, green, blue, and alpha values each differ by at most `1e-5`. Example (Java): import com.google.type.Color; // ... public static java.awt.Color fromProto(Color protocolor) { float alpha = protocolor.hasAlpha() ? protocolor.getAlpha().getValue() : 1.0; return new java.awt.Color( protocolor.getRed(), protocolor.getGreen(), protocolor.getBlue(), alpha); } public static Color toProto(java.awt.Color color) { float red = (float) color.getRed(); float green = (float) color.getGreen(); float blue = (float) color.getBlue(); float denominator = 255.0; Color.Builder resultBuilder = Color .newBuilder() .setRed(red / denominator) .setGreen(green / denominator) .setBlue(blue / denominator); int alpha = color.getAlpha(); if (alpha != 255) { result.setAlpha( FloatValue .newBuilder() .setValue(((float) alpha) / denominator) .build()); } return resultBuilder.build(); } // ... Example (iOS / Obj-C): // ... static UIColor* fromProto(Color* protocolor) { float red = [protocolor red]; float green = [protocolor green]; float blue = [protocolor blue]; FloatValue* alpha_wrapper = [protocolor alpha]; float alpha = 1.0; if (alpha_wrapper != nil) { alpha = [alpha_wrapper value]; } return [UIColor colorWithRed:red green:green blue:blue alpha:alpha]; } static Color* toProto(UIColor* color) { CGFloat red, green, blue, alpha; if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) { return nil; } Color* result = [[Color alloc] init]; [result setRed:red]; [result setGreen:green]; [result setBlue:blue]; if (alpha <= 0.9999) { [result setAlpha:floatWrapperWithValue(alpha)]; } [result autorelease]; return result; } // ... Example (JavaScript): // ... var protoToCssColor = function(rgb_color) { var redFrac = rgb_color.red || 0.0; var greenFrac = rgb_color.green || 0.0; var blueFrac = rgb_color.blue || 0.0; var red = Math.floor(redFrac * 255); var green = Math.floor(greenFrac * 255); var blue = Math.floor(blueFrac * 255); if (!('alpha' in rgb_color)) { return rgbToCssColor(red, green, blue); } var alphaFrac = rgb_color.alpha.value || 0.0; var rgbParams = [red, green, blue].join(','); return ['rgba(', rgbParams, ',', alphaFrac, ')'].join(''); }; var rgbToCssColor = function(red, green, blue) { var rgbNumber = new Number((red << 16) | (green << 8) | blue); var hexString = rgbNumber.toString(16); var missingZeros = 6 - hexString.length; var resultBuilder = ['#']; for (var i = 0; i < missingZeros; i++) { resultBuilder.push('0'); } resultBuilder.push(hexString); return resultBuilder.join(''); }; // ...
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="color")]
		public Color Color { get; set; }
		
		/// <summary>
		/// If `true`, the button is displayed in an inactive state and doesn't respond to user actions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		/// <summary>
		/// An icon displayed in a widget on a card. For an example in Google Chat apps, see [Icon](https://developers.google.com/chat/ui/widgets/icon). Supports [built-in](https://developers.google.com/chat/format-messages#builtinicons) and [custom](https://developers.google.com/chat/format-messages#customicons) icons.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="icon")]
		public GoogleAppsCardV1Icon Icon { get; set; }
		
		/// <summary>
		/// Represents how to respond when users click an interactive element on a card, such as a button.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="onClick")]
		public GoogleAppsCardV1OnClick OnClick { get; set; }
		
		/// <summary>
		/// The text displayed inside the button.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
	}
	
	/// <summary>
	/// Represents a color in the RGBA color space. This representation is designed for simplicity of conversion to and from color representations in various languages over compactness. For example, the fields of this representation can be trivially provided to the constructor of `java.awt.Color` in Java; it can also be trivially provided to UIColor's `+colorWithRed:green:blue:alpha` method in iOS; and, with just a little work, it can be easily formatted into a CSS `rgba()` string in JavaScript. This reference page doesn't have information about the absolute color space that should be used to interpret the RGB value—for example, sRGB, Adobe RGB, DCI-P3, and BT.2020. By default, applications should assume the sRGB color space. When color equality needs to be decided, implementations, unless documented otherwise, treat two colors as equal if all their red, green, blue, and alpha values each differ by at most `1e-5`. Example (Java): import com.google.type.Color; // ... public static java.awt.Color fromProto(Color protocolor) { float alpha = protocolor.hasAlpha() ? protocolor.getAlpha().getValue() : 1.0; return new java.awt.Color( protocolor.getRed(), protocolor.getGreen(), protocolor.getBlue(), alpha); } public static Color toProto(java.awt.Color color) { float red = (float) color.getRed(); float green = (float) color.getGreen(); float blue = (float) color.getBlue(); float denominator = 255.0; Color.Builder resultBuilder = Color .newBuilder() .setRed(red / denominator) .setGreen(green / denominator) .setBlue(blue / denominator); int alpha = color.getAlpha(); if (alpha != 255) { result.setAlpha( FloatValue .newBuilder() .setValue(((float) alpha) / denominator) .build()); } return resultBuilder.build(); } // ... Example (iOS / Obj-C): // ... static UIColor* fromProto(Color* protocolor) { float red = [protocolor red]; float green = [protocolor green]; float blue = [protocolor blue]; FloatValue* alpha_wrapper = [protocolor alpha]; float alpha = 1.0; if (alpha_wrapper != nil) { alpha = [alpha_wrapper value]; } return [UIColor colorWithRed:red green:green blue:blue alpha:alpha]; } static Color* toProto(UIColor* color) { CGFloat red, green, blue, alpha; if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) { return nil; } Color* result = [[Color alloc] init]; [result setRed:red]; [result setGreen:green]; [result setBlue:blue]; if (alpha <= 0.9999) { [result setAlpha:floatWrapperWithValue(alpha)]; } [result autorelease]; return result; } // ... Example (JavaScript): // ... var protoToCssColor = function(rgb_color) { var redFrac = rgb_color.red || 0.0; var greenFrac = rgb_color.green || 0.0; var blueFrac = rgb_color.blue || 0.0; var red = Math.floor(redFrac * 255); var green = Math.floor(greenFrac * 255); var blue = Math.floor(blueFrac * 255); if (!('alpha' in rgb_color)) { return rgbToCssColor(red, green, blue); } var alphaFrac = rgb_color.alpha.value || 0.0; var rgbParams = [red, green, blue].join(','); return ['rgba(', rgbParams, ',', alphaFrac, ')'].join(''); }; var rgbToCssColor = function(red, green, blue) { var rgbNumber = new Number((red << 16) | (green << 8) | blue); var hexString = rgbNumber.toString(16); var missingZeros = 6 - hexString.length; var resultBuilder = ['#']; for (var i = 0; i < missingZeros; i++) { resultBuilder.push('0'); } resultBuilder.push(hexString); return resultBuilder.join(''); }; // ...
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Color
	{
		
		/// <summary>
		/// The fraction of this color that should be applied to the pixel. That is, the final pixel color is defined by the equation: `pixel color = alpha * (this color) + (1.0 - alpha) * (background color)` This means that a value of 1.0 corresponds to a solid color, whereas a value of 0.0 corresponds to a completely transparent color. This uses a wrapper message rather than a simple float scalar so that it is possible to distinguish between a default value and the value being unset. If omitted, this color object is rendered as a solid color (as if the alpha value had been explicitly given a value of 1.0).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alpha")]
		public System.Nullable<System.Single> Alpha { get; set; }
		
		/// <summary>
		/// The amount of blue in the color as a value in the interval [0, 1].
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="blue")]
		public System.Nullable<System.Single> Blue { get; set; }
		
		/// <summary>
		/// The amount of green in the color as a value in the interval [0, 1].
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="green")]
		public System.Nullable<System.Single> Green { get; set; }
		
		/// <summary>
		/// The amount of red in the color as a value in the interval [0, 1].
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="red")]
		public System.Nullable<System.Single> Red { get; set; }
	}
	
	/// <summary>
	/// An icon displayed in a widget on a card. For an example in Google Chat apps, see [Icon](https://developers.google.com/chat/ui/widgets/icon). Supports [built-in](https://developers.google.com/chat/format-messages#builtinicons) and [custom](https://developers.google.com/chat/format-messages#customicons) icons.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleAppsCardV1Icon
	{
		
		/// <summary>
		/// Optional. A description of the icon used for accessibility. If unspecified, the default value `Button` is provided. As a best practice, you should set a helpful description for what the icon displays, and if applicable, what it does. For example, `A user's account portrait`, or `Opens a new browser tab and navigates to the Google Chat developer documentation at https://developers.google.com/chat`. If the icon is set in a `Button`, the `altText` appears as helper text when the user hovers over the button. However, if the button also sets `text`, the icon's `altText` is ignored.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="altText")]
		public string AltText { get; set; }
		
		/// <summary>
		/// Display a custom icon hosted at an HTTPS URL. For example: ``` "iconUrl": "https://developers.google.com/chat/images/quickstart-app-avatar.png" ``` Supported file types include `.png` and `.jpg`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="iconUrl")]
		public string IconUrl { get; set; }
		
		/// <summary>
		/// The crop style applied to the image. In some cases, applying a `CIRCLE` crop causes the image to be drawn larger than a built-in icon.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageType")]
		public System.Nullable<GoogleAppsCardV1IconImageType> ImageType { get; set; }
		
		/// <summary>
		/// Display one of the built-in icons provided by Google Workspace. For example, to display an airplane icon, specify `AIRPLANE`. For a bus, specify `BUS`. For a full list of supported icons, see [built-in icons](https://developers.google.com/chat/format-messages#builtinicons).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="knownIcon")]
		public string KnownIcon { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GoogleAppsCardV1IconImageType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SQUARE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CIRCLE = 1,
	}
	
	/// <summary>
	/// Represents a card header. For an example in Google Chat apps, see [Card header](https://developers.google.com/chat/ui/widgets/card-header).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleAppsCardV1CardHeader
	{
		
		/// <summary>
		/// The alternative text of this image that's used for accessibility.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageAltText")]
		public string ImageAltText { get; set; }
		
		/// <summary>
		/// The shape used to crop the image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageType")]
		public GoogleAppsCardV1IconImageType ImageType { get; set; }
		
		/// <summary>
		/// The HTTPS URL of the image in the card header.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageUrl")]
		public string ImageUrl { get; set; }
		
		/// <summary>
		/// The subtitle of the card header. If specified, appears on its own line below the `title`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subtitle")]
		public string Subtitle { get; set; }
		
		/// <summary>
		/// Required. The title of the card header. The header has a fixed height: if both a title and subtitle are specified, each takes up one line. If only the title is specified, it takes up both lines.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GoogleAppsCardV1CardSectionDividerStyle
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DIVIDER_STYLE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SOLID_DIVIDER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_DIVIDER = 2,
	}
	
	/// <summary>
	/// A section contains a collection of widgets that are rendered vertically in the order that they're specified.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleAppsCardV1Section
	{
		
		/// <summary>
		/// Indicates whether this section is collapsible. Collapsible sections hide some or all widgets, but users can expand the section to reveal the hidden widgets by clicking **Show more**. Users can hide the widgets again by clicking **Show less**. To determine which widgets are hidden, specify `uncollapsibleWidgetsCount`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="collapsible")]
		public System.Nullable<System.Boolean> Collapsible { get; set; }
		
		/// <summary>
		/// Text that appears at the top of a section. Supports simple HTML formatted text. For more information about formatting text, see [Formatting text in Google Chat apps](https://developers.google.com/chat/format-messages#card-formatting) and [Formatting text in Google Workspace Add-ons](https://developers.google.com/apps-script/add-ons/concepts/widgets#text_formatting).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="header")]
		public string Header { get; set; }
		
		/// <summary>
		/// The number of uncollapsible widgets which remain visible even when a section is collapsed. For example, when a section contains five widgets and the `uncollapsibleWidgetsCount` is set to `2`, the first two widgets are always shown and the last three are collapsed by default. The `uncollapsibleWidgetsCount` is taken into account only when `collapsible` is `true`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uncollapsibleWidgetsCount")]
		public System.Nullable<System.Int32> UncollapsibleWidgetsCount { get; set; }
		
		/// <summary>
		/// All the widgets in the section. Must contain at least one widget.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="widgets")]
		public GoogleAppsCardV1Widget[] Widgets { get; set; }
	}
	
	/// <summary>
	/// Each card is made up of widgets. A widget is a composite object that can represent one of text, images, buttons, and other object types.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleAppsCardV1Widget
	{
		
		/// <summary>
		/// A list of buttons layed out horizontally. For an example in Google Chat apps, see [Button list](https://developers.google.com/chat/ui/widgets/button-list).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buttonList")]
		public GoogleAppsCardV1ButtonList ButtonList { get; set; }
		
		/// <summary>
		/// The `Columns` widget displays up to 2 columns in a card message or dialog. You can add widgets to each column; the widgets appear in the order that they are specified. For an example in Google Chat apps, see [Columns](https://developers.google.com/chat/ui/widgets/columns). The height of each column is determined by the taller column. For example, if the first column is taller than the second column, both columns have the height of the first column. Because each column can contain a different number of widgets, you can't define rows or align widgets between the columns. Columns are displayed side-by-side. You can customize the width of each column using the `HorizontalSizeStyle` field. If the user's screen width is too narrow, the second column wraps below the first: * On web, the second column wraps if the screen width is less than or equal to 480 pixels. * On iOS devices, the second column wraps if the screen width is less than or equal to 300 pt. * On Android devices, the second column wraps if the screen width is less than or equal to 320 dp. To include more than 2 columns, or to use rows, use the `Grid` widget. Supported by Chat apps, but not Google Workspace Add-ons.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="columns")]
		public GoogleAppsCardV1Columns Columns { get; set; }
		
		/// <summary>
		/// Lets users input a date, a time, or both a date and a time. For an example in Google Chat apps, see [Date time picker](https://developers.google.com/chat/ui/widgets/date-time-picker). Users can input text or use the picker to select dates and times. If users input an invalid date or time, the picker shows an error that prompts users to input the information correctly.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dateTimePicker")]
		public GoogleAppsCardV1DateTimePicker DateTimePicker { get; set; }
		
		/// <summary>
		/// A widget that displays text with optional decorations such as a label above or below the text, an icon in front of the text, a selection widget, or a button after the text. For an example in Google Chat apps, see [Decorated text](https://developers.google.com/chat/ui/widgets/decorated-text).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="decoratedText")]
		public GoogleAppsCardV1DecoratedText DecoratedText { get; set; }
		
		/// <summary>
		/// Displays a divider between widgets as a horizontal line. For an example in Google Chat apps, see [Divider](https://developers.google.com/chat/ui/widgets/divider). For example, the following JSON creates a divider: ``` "divider": {} ```
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="divider")]
		public GoogleAppsCardV1Divider Divider { get; set; }
		
		/// <summary>
		/// Displays a grid with a collection of items. Items can only include text or images. For responsive columns, or to include more than text or images, use `Columns`. For an example in Google Chat apps, see [Grid](https://developers.google.com/chat/ui/widgets/grid). A grid supports any number of columns and items. The number of rows is determined by items divided by columns. A grid with 10 items and 2 columns has 5 rows. A grid with 11 items and 2 columns has 6 rows. For example, the following JSON creates a 2 column grid with a single item: ``` "grid": { "title": "A fine collection of items", "columnCount": 2, "borderStyle": { "type": "STROKE", "cornerRadius": 4 }, "items": [ { "image": { "imageUri": "https://www.example.com/image.png", "cropStyle": { "type": "SQUARE" }, "borderStyle": { "type": "STROKE" } }, "title": "An item", "textAlignment": "CENTER" } ], "onClick": { "openLink": { "url": "https://www.example.com" } } } ```
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="grid")]
		public GoogleAppsCardV1Grid Grid { get; set; }
		
		/// <summary>
		/// Specifies whether widgets align to the left, right, or center of a column.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="horizontalAlignment")]
		public GoogleAppsCardV1ColumnHorizontalAlignment HorizontalAlignment { get; set; }
		
		/// <summary>
		/// An image that is specified by a URL and can have an `onClick` action. For an example, see [Image](https://developers.google.com/chat/ui/widgets/image).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="image")]
		public GoogleAppsCardV1Image Image { get; set; }
		
		/// <summary>
		/// A widget that creates one or more UI items that users can select. For example, a dropdown menu or checkboxes. You can use this widget to collect data that can be predicted or enumerated. For an example in Google Chat apps, see [Selection input](https://developers.google.com/chat/ui/widgets/selection-input). Chat apps can process the value of items that users select or input. For details about working with form inputs, see [Receive form data](https://developers.google.com/chat/ui/read-form-data). To collect undefined or abstract data from users, use the TextInput widget.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selectionInput")]
		public GoogleAppsCardV1SelectionInput SelectionInput { get; set; }
		
		/// <summary>
		/// A field in which users can enter text. Supports suggestions and on-change actions. For an example in Google Chat apps, see [Text input](https://developers.google.com/chat/ui/widgets/text-input). Chat apps receive and can process the value of entered text during form input events. For details about working with form inputs, see [Receive form data](https://developers.google.com/chat/ui/read-form-data). When you need to collect undefined or abstract data from users, use a text input. To collect defined or enumerated data from users, use the SelectionInput widget.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="textInput")]
		public GoogleAppsCardV1TextInput TextInput { get; set; }
		
		/// <summary>
		/// A paragraph of text that supports formatting. For an example in Google Chat apps, see [Text paragraph](https://developers.google.com/chat/ui/widgets/text-paragraph). For more information about formatting text, see [Formatting text in Google Chat apps](https://developers.google.com/chat/format-messages#card-formatting) and [Formatting text in Google Workspace Add-ons](https://developers.google.com/apps-script/add-ons/concepts/widgets#text_formatting).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="textParagraph")]
		public GoogleAppsCardV1TextParagraph TextParagraph { get; set; }
	}
	
	/// <summary>
	/// A list of buttons layed out horizontally. For an example in Google Chat apps, see [Button list](https://developers.google.com/chat/ui/widgets/button-list).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleAppsCardV1ButtonList
	{
		
		/// <summary>
		/// An array of buttons.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buttons")]
		public GoogleAppsCardV1Button[] Buttons { get; set; }
	}
	
	/// <summary>
	/// The `Columns` widget displays up to 2 columns in a card message or dialog. You can add widgets to each column; the widgets appear in the order that they are specified. For an example in Google Chat apps, see [Columns](https://developers.google.com/chat/ui/widgets/columns). The height of each column is determined by the taller column. For example, if the first column is taller than the second column, both columns have the height of the first column. Because each column can contain a different number of widgets, you can't define rows or align widgets between the columns. Columns are displayed side-by-side. You can customize the width of each column using the `HorizontalSizeStyle` field. If the user's screen width is too narrow, the second column wraps below the first: * On web, the second column wraps if the screen width is less than or equal to 480 pixels. * On iOS devices, the second column wraps if the screen width is less than or equal to 300 pt. * On Android devices, the second column wraps if the screen width is less than or equal to 320 dp. To include more than 2 columns, or to use rows, use the `Grid` widget. Supported by Chat apps, but not Google Workspace Add-ons.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleAppsCardV1Columns
	{
		
		/// <summary>
		/// An array of columns. You can include up to 2 columns in a card or dialog.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="columnItems")]
		public GoogleAppsCardV1Column[] ColumnItems { get; set; }
	}
	
	/// <summary>
	/// A column.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleAppsCardV1Column
	{
		
		/// <summary>
		/// Specifies whether widgets align to the left, right, or center of a column.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="horizontalAlignment")]
		public System.Nullable<GoogleAppsCardV1ColumnHorizontalAlignment> HorizontalAlignment { get; set; }
		
		/// <summary>
		/// Specifies how a column fills the width of the card.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="horizontalSizeStyle")]
		public System.Nullable<GoogleAppsCardV1ColumnHorizontalSizeStyle> HorizontalSizeStyle { get; set; }
		
		/// <summary>
		/// Specifies whether widgets align to the top, bottom, or center of a column.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verticalAlignment")]
		public System.Nullable<GoogleAppsCardV1ColumnVerticalAlignment> VerticalAlignment { get; set; }
		
		/// <summary>
		/// An array of widgets included in a column. Widgets appear in the order that they are specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="widgets")]
		public GoogleAppsCardV1Widgets[] Widgets { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GoogleAppsCardV1ColumnHorizontalAlignment
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HORIZONTAL_ALIGNMENT_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		START = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CENTER = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		END = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GoogleAppsCardV1ColumnHorizontalSizeStyle
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HORIZONTAL_SIZE_STYLE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FILL_AVAILABLE_SPACE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FILL_MINIMUM_SPACE = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GoogleAppsCardV1ColumnVerticalAlignment
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VERTICAL_ALIGNMENT_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CENTER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TOP = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BOTTOM = 3,
	}
	
	/// <summary>
	/// The supported widgets that you can include in a column.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleAppsCardV1Widgets
	{
		
		/// <summary>
		/// A list of buttons layed out horizontally. For an example in Google Chat apps, see [Button list](https://developers.google.com/chat/ui/widgets/button-list).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buttonList")]
		public GoogleAppsCardV1ButtonList ButtonList { get; set; }
		
		/// <summary>
		/// Lets users input a date, a time, or both a date and a time. For an example in Google Chat apps, see [Date time picker](https://developers.google.com/chat/ui/widgets/date-time-picker). Users can input text or use the picker to select dates and times. If users input an invalid date or time, the picker shows an error that prompts users to input the information correctly.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dateTimePicker")]
		public GoogleAppsCardV1DateTimePicker DateTimePicker { get; set; }
		
		/// <summary>
		/// A widget that displays text with optional decorations such as a label above or below the text, an icon in front of the text, a selection widget, or a button after the text. For an example in Google Chat apps, see [Decorated text](https://developers.google.com/chat/ui/widgets/decorated-text).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="decoratedText")]
		public GoogleAppsCardV1DecoratedText DecoratedText { get; set; }
		
		/// <summary>
		/// An image that is specified by a URL and can have an `onClick` action. For an example, see [Image](https://developers.google.com/chat/ui/widgets/image).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="image")]
		public GoogleAppsCardV1Image Image { get; set; }
		
		/// <summary>
		/// A widget that creates one or more UI items that users can select. For example, a dropdown menu or checkboxes. You can use this widget to collect data that can be predicted or enumerated. For an example in Google Chat apps, see [Selection input](https://developers.google.com/chat/ui/widgets/selection-input). Chat apps can process the value of items that users select or input. For details about working with form inputs, see [Receive form data](https://developers.google.com/chat/ui/read-form-data). To collect undefined or abstract data from users, use the TextInput widget.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selectionInput")]
		public GoogleAppsCardV1SelectionInput SelectionInput { get; set; }
		
		/// <summary>
		/// A field in which users can enter text. Supports suggestions and on-change actions. For an example in Google Chat apps, see [Text input](https://developers.google.com/chat/ui/widgets/text-input). Chat apps receive and can process the value of entered text during form input events. For details about working with form inputs, see [Receive form data](https://developers.google.com/chat/ui/read-form-data). When you need to collect undefined or abstract data from users, use a text input. To collect defined or enumerated data from users, use the SelectionInput widget.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="textInput")]
		public GoogleAppsCardV1TextInput TextInput { get; set; }
		
		/// <summary>
		/// A paragraph of text that supports formatting. For an example in Google Chat apps, see [Text paragraph](https://developers.google.com/chat/ui/widgets/text-paragraph). For more information about formatting text, see [Formatting text in Google Chat apps](https://developers.google.com/chat/format-messages#card-formatting) and [Formatting text in Google Workspace Add-ons](https://developers.google.com/apps-script/add-ons/concepts/widgets#text_formatting).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="textParagraph")]
		public GoogleAppsCardV1TextParagraph TextParagraph { get; set; }
	}
	
	/// <summary>
	/// Lets users input a date, a time, or both a date and a time. For an example in Google Chat apps, see [Date time picker](https://developers.google.com/chat/ui/widgets/date-time-picker). Users can input text or use the picker to select dates and times. If users input an invalid date or time, the picker shows an error that prompts users to input the information correctly.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleAppsCardV1DateTimePicker
	{
		
		/// <summary>
		/// The text that prompts users to input a date, a time, or a date and time. For example, if users are scheduling an appointment, use a label such as `Appointment date` or `Appointment date and time`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
		
		/// <summary>
		/// The name by which the `DateTimePicker` is identified in a form input event. For details about working with form inputs, see [Receive form data](https://developers.google.com/chat/ui/read-form-data).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// An action that describes the behavior when the form is submitted. For example, you can invoke an Apps Script script to handle the form. If the action is triggered, the form values are sent to the server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="onChangeAction")]
		public GoogleAppsCardV1Action OnChangeAction { get; set; }
		
		/// <summary>
		/// The number representing the time zone offset from UTC, in minutes. If set, the `value_ms_epoch` is displayed in the specified time zone. If unset, the value defaults to the user's time zone setting.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timezoneOffsetDate")]
		public System.Nullable<System.Int32> TimezoneOffsetDate { get; set; }
		
		/// <summary>
		/// Whether the widget supports inputting a date, a time, or the date and time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<GoogleAppsCardV1DateTimePickerType> Type { get; set; }
		
		/// <summary>
		/// The default value displayed in the widget, in milliseconds since [Unix epoch time](https://en.wikipedia.org/wiki/Unix_time). Specify the value based on the type of picker (`DateTimePickerType`): * `DATE_AND_TIME`: a calendar date and time in UTC. For example, to represent January 1, 2023 at 12:00 PM UTC, use `1672574400000`. * `DATE_ONLY`: a calendar date at 00:00:00 UTC. For example, to represent January 1, 2023, use `1672531200000`. * `TIME_ONLY`: a time in UTC. For example, to represent 12:00 PM, use `43200000` (or `12 * 60 * 60 * 1000`).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="valueMsEpoch")]
		public string ValueMsEpoch { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GoogleAppsCardV1DateTimePickerType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATE_AND_TIME = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATE_ONLY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIME_ONLY = 2,
	}
	
	/// <summary>
	/// A widget that displays text with optional decorations such as a label above or below the text, an icon in front of the text, a selection widget, or a button after the text. For an example in Google Chat apps, see [Decorated text](https://developers.google.com/chat/ui/widgets/decorated-text).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleAppsCardV1DecoratedText
	{
		
		/// <summary>
		/// The text that appears below `text`. Always wraps.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bottomLabel")]
		public string BottomLabel { get; set; }
		
		/// <summary>
		/// A text, icon, or text and icon button that users can click. For an example in Google Chat apps, see [Button list](https://developers.google.com/chat/ui/widgets/button-list). To make an image a clickable button, specify an `Image` (not an `ImageComponent`) and set an `onClick` action.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="button")]
		public GoogleAppsCardV1Button Button { get; set; }
		
		/// <summary>
		/// An icon displayed in a widget on a card. For an example in Google Chat apps, see [Icon](https://developers.google.com/chat/ui/widgets/icon). Supports [built-in](https://developers.google.com/chat/format-messages#builtinicons) and [custom](https://developers.google.com/chat/format-messages#customicons) icons.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endIcon")]
		public GoogleAppsCardV1Icon EndIcon { get; set; }
		
		/// <summary>
		/// An icon displayed in a widget on a card. For an example in Google Chat apps, see [Icon](https://developers.google.com/chat/ui/widgets/icon). Supports [built-in](https://developers.google.com/chat/format-messages#builtinicons) and [custom](https://developers.google.com/chat/format-messages#customicons) icons.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="icon")]
		public GoogleAppsCardV1Icon Icon { get; set; }
		
		/// <summary>
		/// Represents how to respond when users click an interactive element on a card, such as a button.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="onClick")]
		public GoogleAppsCardV1OnClick OnClick { get; set; }
		
		/// <summary>
		/// An icon displayed in a widget on a card. For an example in Google Chat apps, see [Icon](https://developers.google.com/chat/ui/widgets/icon). Supports [built-in](https://developers.google.com/chat/format-messages#builtinicons) and [custom](https://developers.google.com/chat/format-messages#customicons) icons.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startIcon")]
		public GoogleAppsCardV1Icon StartIcon { get; set; }
		
		/// <summary>
		/// Either a toggle-style switch or a checkbox inside a `decoratedText` widget. Only supported in the `decoratedText` widget.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="switchControl")]
		public GoogleAppsCardV1SwitchControl SwitchControl { get; set; }
		
		/// <summary>
		/// Required. The primary text. Supports simple formatting. For more information about formatting text, see [Formatting text in Google Chat apps](https://developers.google.com/chat/format-messages#card-formatting) and [Formatting text in Google Workspace Add-ons](https://developers.google.com/apps-script/add-ons/concepts/widgets#text_formatting).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
		
		/// <summary>
		/// The text that appears above `text`. Always truncates.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="topLabel")]
		public string TopLabel { get; set; }
		
		/// <summary>
		/// The wrap text setting. If `true`, the text wraps and displays on multiple lines. Otherwise, the text is truncated. Only applies to `text`, not `topLabel` and `bottomLabel`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="wrapText")]
		public System.Nullable<System.Boolean> WrapText { get; set; }
	}
	
	/// <summary>
	/// Either a toggle-style switch or a checkbox inside a `decoratedText` widget. Only supported in the `decoratedText` widget.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleAppsCardV1SwitchControl
	{
		
		/// <summary>
		/// How the switch appears in the user interface.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="controlType")]
		public System.Nullable<GoogleAppsCardV1SwitchControlControlType> ControlType { get; set; }
		
		/// <summary>
		/// The name by which the switch widget is identified in a form input event. For details about working with form inputs, see [Receive form data](https://developers.google.com/chat/ui/read-form-data).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// An action that describes the behavior when the form is submitted. For example, you can invoke an Apps Script script to handle the form. If the action is triggered, the form values are sent to the server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="onChangeAction")]
		public GoogleAppsCardV1Action OnChangeAction { get; set; }
		
		/// <summary>
		/// When `true`, the switch is selected.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selected")]
		public System.Nullable<System.Boolean> Selected { get; set; }
		
		/// <summary>
		/// The value entered by a user, returned as part of a form input event. For details about working with form inputs, see [Receive form data](https://developers.google.com/chat/ui/read-form-data).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GoogleAppsCardV1SwitchControlControlType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SWITCH = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHECKBOX = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHECK_BOX = 2,
	}
	
	/// <summary>
	/// An image that is specified by a URL and can have an `onClick` action. For an example, see [Image](https://developers.google.com/chat/ui/widgets/image).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleAppsCardV1Image
	{
		
		/// <summary>
		/// The alternative text of this image that's used for accessibility.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="altText")]
		public string AltText { get; set; }
		
		/// <summary>
		/// The HTTPS URL that hosts the image. For example: ``` https://developers.google.com/chat/images/quickstart-app-avatar.png ```
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageUrl")]
		public string ImageUrl { get; set; }
		
		/// <summary>
		/// Represents how to respond when users click an interactive element on a card, such as a button.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="onClick")]
		public GoogleAppsCardV1OnClick OnClick { get; set; }
	}
	
	/// <summary>
	/// A widget that creates one or more UI items that users can select. For example, a dropdown menu or checkboxes. You can use this widget to collect data that can be predicted or enumerated. For an example in Google Chat apps, see [Selection input](https://developers.google.com/chat/ui/widgets/selection-input). Chat apps can process the value of items that users select or input. For details about working with form inputs, see [Receive form data](https://developers.google.com/chat/ui/read-form-data). To collect undefined or abstract data from users, use the TextInput widget.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleAppsCardV1SelectionInput
	{
		
		/// <summary>
		/// An action that describes the behavior when the form is submitted. For example, you can invoke an Apps Script script to handle the form. If the action is triggered, the form values are sent to the server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="externalDataSource")]
		public GoogleAppsCardV1Action ExternalDataSource { get; set; }
		
		/// <summary>
		/// An array of selectable items. For example, an array of radio buttons or checkboxes. Supports up to 100 items.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public GoogleAppsCardV1SelectionItem[] Items { get; set; }
		
		/// <summary>
		/// The text that appears above the selection input field in the user interface. Specify text that helps the user enter the information your app needs. For example, if users are selecting the urgency of a work ticket from a drop-down menu, the label might be "Urgency" or "Select urgency".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
		
		/// <summary>
		/// For multiselect menus, the maximum number of items that a user can select. Minimum value is 1 item. If unspecified, defaults to 3 items.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="multiSelectMaxSelectedItems")]
		public System.Nullable<System.Int32> MultiSelectMaxSelectedItems { get; set; }
		
		/// <summary>
		/// For multiselect menus, the number of text characters that a user inputs before the Chat app queries autocomplete and displays suggested items in the menu. If unspecified, defaults to 0 characters for static data sources and 3 characters for external data sources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="multiSelectMinQueryLength")]
		public System.Nullable<System.Int32> MultiSelectMinQueryLength { get; set; }
		
		/// <summary>
		/// The name that identifies the selection input in a form input event. For details about working with form inputs, see [Receive form data](https://developers.google.com/chat/ui/read-form-data).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// An action that describes the behavior when the form is submitted. For example, you can invoke an Apps Script script to handle the form. If the action is triggered, the form values are sent to the server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="onChangeAction")]
		public GoogleAppsCardV1Action OnChangeAction { get; set; }
		
		/// <summary>
		/// Chat apps only. For a `SelectionInput` widget that uses a multiselect menu, a data source from Google Workspace. Used to populate items in a multiselect menu.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="platformDataSource")]
		public GoogleAppsCardV1PlatformDataSource PlatformDataSource { get; set; }
		
		/// <summary>
		/// The type of items that are displayed to users in a `SelectionInput` widget. Selection types support different types of interactions. For example, users can select one or more checkboxes, but they can only select one value from a dropdown menu.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<GoogleAppsCardV1SelectionInputType> Type { get; set; }
	}
	
	/// <summary>
	/// An item that users can select in a selection input, such as a checkbox or switch.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleAppsCardV1SelectionItem
	{
		
		/// <summary>
		/// For multiselect menus, a text description or label that's displayed below the item's `text` field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bottomText")]
		public string BottomText { get; set; }
		
		/// <summary>
		/// Whether the item is selected by default. If the selection input only accepts one value (such as for radio buttons or a dropdown menu), only set this field for one item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selected")]
		public System.Nullable<System.Boolean> Selected { get; set; }
		
		/// <summary>
		/// For multiselect menus, the URL for the icon displayed next to the item's `text` field. Supports PNG and JPEG files. Must be an `HTTPS` URL. For example, `https://developers.google.com/chat/images/quickstart-app-avatar.png`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startIconUri")]
		public string StartIconUri { get; set; }
		
		/// <summary>
		/// The text that identifies or describes the item to users.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
		
		/// <summary>
		/// The value associated with this item. The client should use this as a form input value. For details about working with form inputs, see [Receive form data](https://developers.google.com/chat/ui/read-form-data).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// Chat apps only. For a `SelectionInput` widget that uses a multiselect menu, a data source from Google Workspace. Used to populate items in a multiselect menu.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleAppsCardV1PlatformDataSource
	{
		
		/// <summary>
		/// A data source shared by all Google Workspace applications, such as users in a Google Workspace organization.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="commonDataSource")]
		public System.Nullable<GoogleAppsCardV1PlatformDataSourceCommonDataSource> CommonDataSource { get; set; }
		
		/// <summary>
		/// Chat apps only. For a `SelectionInput` widget that uses a multiselect menu, a data source from a Google Workspace application. The data source populates selection items for the multiselect menu.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hostAppDataSource")]
		public HostAppDataSourceMarkup HostAppDataSource { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GoogleAppsCardV1PlatformDataSourceCommonDataSource
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USER = 1,
	}
	
	/// <summary>
	/// Chat apps only. For a `SelectionInput` widget that uses a multiselect menu, a data source from a Google Workspace application. The data source populates selection items for the multiselect menu.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class HostAppDataSourceMarkup
	{
		
		/// <summary>
		/// Chat apps only. For a `SelectionInput` widget that uses a multiselect menu, a data source from Google Chat. The data source populates selection items for the multiselect menu. For example, a user can select Google Chat spaces that they're a member of.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="chatDataSource")]
		public ChatClientDataSourceMarkup ChatDataSource { get; set; }
	}
	
	/// <summary>
	/// Chat apps only. For a `SelectionInput` widget that uses a multiselect menu, a data source from Google Chat. The data source populates selection items for the multiselect menu. For example, a user can select Google Chat spaces that they're a member of.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ChatClientDataSourceMarkup
	{
		
		/// <summary>
		/// A data source that populates Google Chat spaces as selection items for a multiselect menu. Only populates spaces that the user is a member of.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="spaceDataSource")]
		public SpaceDataSource SpaceDataSource { get; set; }
	}
	
	/// <summary>
	/// A data source that populates Google Chat spaces as selection items for a multiselect menu. Only populates spaces that the user is a member of.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SpaceDataSource
	{
		
		/// <summary>
		/// If set to `true`, the multiselect menu selects the current Google Chat space as an item by default.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultToCurrentSpace")]
		public System.Nullable<System.Boolean> DefaultToCurrentSpace { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GoogleAppsCardV1SelectionInputType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHECK_BOX = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RADIO_BUTTON = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SWITCH = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DROPDOWN = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MULTI_SELECT = 4,
	}
	
	/// <summary>
	/// A field in which users can enter text. Supports suggestions and on-change actions. For an example in Google Chat apps, see [Text input](https://developers.google.com/chat/ui/widgets/text-input). Chat apps receive and can process the value of entered text during form input events. For details about working with form inputs, see [Receive form data](https://developers.google.com/chat/ui/read-form-data). When you need to collect undefined or abstract data from users, use a text input. To collect defined or enumerated data from users, use the SelectionInput widget.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleAppsCardV1TextInput
	{
		
		/// <summary>
		/// An action that describes the behavior when the form is submitted. For example, you can invoke an Apps Script script to handle the form. If the action is triggered, the form values are sent to the server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoCompleteAction")]
		public GoogleAppsCardV1Action AutoCompleteAction { get; set; }
		
		/// <summary>
		/// Text that appears below the text input field meant to assist users by prompting them to enter a certain value. This text is always visible. Required if `label` is unspecified. Otherwise, optional.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hintText")]
		public string HintText { get; set; }
		
		/// <summary>
		/// Suggested values that users can enter. These values appear when users click inside the text input field. As users type, the suggested values dynamically filter to match what the users have typed. For example, a text input field for programming language might suggest Java, JavaScript, Python, and C++. When users start typing `Jav`, the list of suggestions filters to show `Java` and `JavaScript`. Suggested values help guide users to enter values that your app can make sense of. When referring to JavaScript, some users might enter `javascript` and others `java script`. Suggesting `JavaScript` can standardize how users interact with your app. When specified, `TextInput.type` is always `SINGLE_LINE`, even if it's set to `MULTIPLE_LINE`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="initialSuggestions")]
		public GoogleAppsCardV1Suggestions InitialSuggestions { get; set; }
		
		/// <summary>
		/// The text that appears above the text input field in the user interface. Specify text that helps the user enter the information your app needs. For example, if you are asking someone's name, but specifically need their surname, write `surname` instead of `name`. Required if `hintText` is unspecified. Otherwise, optional.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
		
		/// <summary>
		/// The name by which the text input is identified in a form input event. For details about working with form inputs, see [Receive form data](https://developers.google.com/chat/ui/read-form-data).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// An action that describes the behavior when the form is submitted. For example, you can invoke an Apps Script script to handle the form. If the action is triggered, the form values are sent to the server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="onChangeAction")]
		public GoogleAppsCardV1Action OnChangeAction { get; set; }
		
		/// <summary>
		/// Text that appears in the text input field when the field is empty. Use this text to prompt users to enter a value. For example, `Enter a number from 0 to 100`. [Google Chat apps](https://developers.google.com/chat):
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="placeholderText")]
		public string PlaceholderText { get; set; }
		
		/// <summary>
		/// How a text input field appears in the user interface. For example, whether the field is single or multi-line.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<GoogleAppsCardV1TextInputType> Type { get; set; }
		
		/// <summary>
		/// The value entered by a user, returned as part of a form input event. For details about working with form inputs, see [Receive form data](https://developers.google.com/chat/ui/read-form-data).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// Suggested values that users can enter. These values appear when users click inside the text input field. As users type, the suggested values dynamically filter to match what the users have typed. For example, a text input field for programming language might suggest Java, JavaScript, Python, and C++. When users start typing `Jav`, the list of suggestions filters to show `Java` and `JavaScript`. Suggested values help guide users to enter values that your app can make sense of. When referring to JavaScript, some users might enter `javascript` and others `java script`. Suggesting `JavaScript` can standardize how users interact with your app. When specified, `TextInput.type` is always `SINGLE_LINE`, even if it's set to `MULTIPLE_LINE`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleAppsCardV1Suggestions
	{
		
		/// <summary>
		/// A list of suggestions used for autocomplete recommendations in text input fields.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public GoogleAppsCardV1SuggestionItem[] Items { get; set; }
	}
	
	/// <summary>
	/// One suggested value that users can enter in a text input field.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleAppsCardV1SuggestionItem
	{
		
		/// <summary>
		/// The value of a suggested input to a text input field. This is equivalent to what users enter themselves.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GoogleAppsCardV1TextInputType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SINGLE_LINE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MULTIPLE_LINE = 1,
	}
	
	/// <summary>
	/// A paragraph of text that supports formatting. For an example in Google Chat apps, see [Text paragraph](https://developers.google.com/chat/ui/widgets/text-paragraph). For more information about formatting text, see [Formatting text in Google Chat apps](https://developers.google.com/chat/format-messages#card-formatting) and [Formatting text in Google Workspace Add-ons](https://developers.google.com/apps-script/add-ons/concepts/widgets#text_formatting).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleAppsCardV1TextParagraph
	{
		
		/// <summary>
		/// The text that's shown in the widget.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
	}
	
	/// <summary>
	/// Displays a divider between widgets as a horizontal line. For an example in Google Chat apps, see [Divider](https://developers.google.com/chat/ui/widgets/divider). For example, the following JSON creates a divider: ``` "divider": {} ```
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleAppsCardV1Divider
	{
	}
	
	/// <summary>
	/// Displays a grid with a collection of items. Items can only include text or images. For responsive columns, or to include more than text or images, use `Columns`. For an example in Google Chat apps, see [Grid](https://developers.google.com/chat/ui/widgets/grid). A grid supports any number of columns and items. The number of rows is determined by items divided by columns. A grid with 10 items and 2 columns has 5 rows. A grid with 11 items and 2 columns has 6 rows. For example, the following JSON creates a 2 column grid with a single item: ``` "grid": { "title": "A fine collection of items", "columnCount": 2, "borderStyle": { "type": "STROKE", "cornerRadius": 4 }, "items": [ { "image": { "imageUri": "https://www.example.com/image.png", "cropStyle": { "type": "SQUARE" }, "borderStyle": { "type": "STROKE" } }, "title": "An item", "textAlignment": "CENTER" } ], "onClick": { "openLink": { "url": "https://www.example.com" } } } ```
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleAppsCardV1Grid
	{
		
		/// <summary>
		/// The style options for the border of a card or widget, including the border type and color.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="borderStyle")]
		public GoogleAppsCardV1BorderStyle BorderStyle { get; set; }
		
		/// <summary>
		/// The number of columns to display in the grid. A default value is used if this field isn't specified, and that default value is different depending on where the grid is shown (dialog versus companion).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="columnCount")]
		public System.Nullable<System.Int32> ColumnCount { get; set; }
		
		/// <summary>
		/// The items to display in the grid.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public GoogleAppsCardV1GridItem[] Items { get; set; }
		
		/// <summary>
		/// Represents how to respond when users click an interactive element on a card, such as a button.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="onClick")]
		public GoogleAppsCardV1OnClick OnClick { get; set; }
		
		/// <summary>
		/// The text that displays in the grid header.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	/// <summary>
	/// The style options for the border of a card or widget, including the border type and color.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleAppsCardV1BorderStyle
	{
		
		/// <summary>
		/// The corner radius for the border.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cornerRadius")]
		public System.Nullable<System.Int32> CornerRadius { get; set; }
		
		/// <summary>
		/// Represents a color in the RGBA color space. This representation is designed for simplicity of conversion to and from color representations in various languages over compactness. For example, the fields of this representation can be trivially provided to the constructor of `java.awt.Color` in Java; it can also be trivially provided to UIColor's `+colorWithRed:green:blue:alpha` method in iOS; and, with just a little work, it can be easily formatted into a CSS `rgba()` string in JavaScript. This reference page doesn't have information about the absolute color space that should be used to interpret the RGB value—for example, sRGB, Adobe RGB, DCI-P3, and BT.2020. By default, applications should assume the sRGB color space. When color equality needs to be decided, implementations, unless documented otherwise, treat two colors as equal if all their red, green, blue, and alpha values each differ by at most `1e-5`. Example (Java): import com.google.type.Color; // ... public static java.awt.Color fromProto(Color protocolor) { float alpha = protocolor.hasAlpha() ? protocolor.getAlpha().getValue() : 1.0; return new java.awt.Color( protocolor.getRed(), protocolor.getGreen(), protocolor.getBlue(), alpha); } public static Color toProto(java.awt.Color color) { float red = (float) color.getRed(); float green = (float) color.getGreen(); float blue = (float) color.getBlue(); float denominator = 255.0; Color.Builder resultBuilder = Color .newBuilder() .setRed(red / denominator) .setGreen(green / denominator) .setBlue(blue / denominator); int alpha = color.getAlpha(); if (alpha != 255) { result.setAlpha( FloatValue .newBuilder() .setValue(((float) alpha) / denominator) .build()); } return resultBuilder.build(); } // ... Example (iOS / Obj-C): // ... static UIColor* fromProto(Color* protocolor) { float red = [protocolor red]; float green = [protocolor green]; float blue = [protocolor blue]; FloatValue* alpha_wrapper = [protocolor alpha]; float alpha = 1.0; if (alpha_wrapper != nil) { alpha = [alpha_wrapper value]; } return [UIColor colorWithRed:red green:green blue:blue alpha:alpha]; } static Color* toProto(UIColor* color) { CGFloat red, green, blue, alpha; if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) { return nil; } Color* result = [[Color alloc] init]; [result setRed:red]; [result setGreen:green]; [result setBlue:blue]; if (alpha <= 0.9999) { [result setAlpha:floatWrapperWithValue(alpha)]; } [result autorelease]; return result; } // ... Example (JavaScript): // ... var protoToCssColor = function(rgb_color) { var redFrac = rgb_color.red || 0.0; var greenFrac = rgb_color.green || 0.0; var blueFrac = rgb_color.blue || 0.0; var red = Math.floor(redFrac * 255); var green = Math.floor(greenFrac * 255); var blue = Math.floor(blueFrac * 255); if (!('alpha' in rgb_color)) { return rgbToCssColor(red, green, blue); } var alphaFrac = rgb_color.alpha.value || 0.0; var rgbParams = [red, green, blue].join(','); return ['rgba(', rgbParams, ',', alphaFrac, ')'].join(''); }; var rgbToCssColor = function(red, green, blue) { var rgbNumber = new Number((red << 16) | (green << 8) | blue); var hexString = rgbNumber.toString(16); var missingZeros = 6 - hexString.length; var resultBuilder = ['#']; for (var i = 0; i < missingZeros; i++) { resultBuilder.push('0'); } resultBuilder.push(hexString); return resultBuilder.join(''); }; // ...
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="strokeColor")]
		public Color StrokeColor { get; set; }
		
		/// <summary>
		/// The border type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<GoogleAppsCardV1BorderStyleType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GoogleAppsCardV1BorderStyleType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BORDER_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_BORDER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STROKE = 2,
	}
	
	/// <summary>
	/// Represents an item in a grid layout. Items can contain text, an image, or both text and an image.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleAppsCardV1GridItem
	{
		
		/// <summary>
		/// A user-specified identifier for this grid item. This identifier is returned in the parent grid's `onClick` callback parameters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Represents an image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="image")]
		public GoogleAppsCardV1ImageComponent Image { get; set; }
		
		/// <summary>
		/// The layout to use for the grid item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="layout")]
		public System.Nullable<GoogleAppsCardV1GridItemLayout> Layout { get; set; }
		
		/// <summary>
		/// The grid item's subtitle.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subtitle")]
		public string Subtitle { get; set; }
		
		/// <summary>
		/// The grid item's title.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	/// <summary>
	/// Represents an image.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleAppsCardV1ImageComponent
	{
		
		/// <summary>
		/// The accessibility label for the image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="altText")]
		public string AltText { get; set; }
		
		/// <summary>
		/// The style options for the border of a card or widget, including the border type and color.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="borderStyle")]
		public GoogleAppsCardV1BorderStyle BorderStyle { get; set; }
		
		/// <summary>
		/// Represents the crop style applied to an image. For example, here's how to apply a 16:9 aspect ratio: ``` cropStyle { "type": "RECTANGLE_CUSTOM", "aspectRatio": 16/9 } ```
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cropStyle")]
		public GoogleAppsCardV1ImageCropStyle CropStyle { get; set; }
		
		/// <summary>
		/// The image URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageUri")]
		public string ImageUri { get; set; }
	}
	
	/// <summary>
	/// Represents the crop style applied to an image. For example, here's how to apply a 16:9 aspect ratio: ``` cropStyle { "type": "RECTANGLE_CUSTOM", "aspectRatio": 16/9 } ```
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleAppsCardV1ImageCropStyle
	{
		
		/// <summary>
		/// The aspect ratio to use if the crop type is `RECTANGLE_CUSTOM`. For example, here's how to apply a 16:9 aspect ratio: ``` cropStyle { "type": "RECTANGLE_CUSTOM", "aspectRatio": 16/9 } ```
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="aspectRatio")]
		public System.Nullable<System.Double> AspectRatio { get; set; }
		
		/// <summary>
		/// The crop type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<GoogleAppsCardV1ImageCropStyleType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GoogleAppsCardV1ImageCropStyleType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IMAGE_CROP_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SQUARE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CIRCLE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RECTANGLE_CUSTOM = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RECTANGLE_4_3 = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GoogleAppsCardV1GridItemLayout
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GRID_ITEM_LAYOUT_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEXT_BELOW = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEXT_ABOVE = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ActionResponseType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NEW_MESSAGE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_MESSAGE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_USER_MESSAGE_CARDS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REQUEST_CONFIG = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DIALOG = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_WIDGET = 6,
	}
	
	/// <summary>
	/// The response of the updated widget. Used to provide autocomplete options for a widget.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdatedWidget
	{
		
		/// <summary>
		/// List of widget autocomplete results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suggestions")]
		public SelectionItems Suggestions { get; set; }
		
		/// <summary>
		/// The ID of the updated widget. The ID must match the one for the widget that triggered the update request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="widget")]
		public string Widget { get; set; }
	}
	
	/// <summary>
	/// List of widget autocomplete results.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SelectionItems
	{
		
		/// <summary>
		/// An array of the SelectionItem objects.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public GoogleAppsCardV1SelectionItem[] Items { get; set; }
	}
	
	/// <summary>
	/// Output only. Annotations associated with the plain-text body of the message. To add basic formatting to a text message, see [Format text messages](https://developers.google.com/chat/format-messages). Example plain-text message body: ``` Hello @FooBot how are you!" ``` The corresponding annotations metadata: ``` "annotations":[{ "type":"USER_MENTION", "startIndex":6, "length":7, "userMention": { "user": { "name":"users/{user}", "displayName":"FooBot", "avatarUrl":"https://goo.gl/aeDtrS", "type":"BOT" }, "type":"MENTION" } }] ```
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Annotation
	{
		
		/// <summary>
		/// Length of the substring in the plain-text message body this annotation corresponds to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="length")]
		public System.Nullable<System.Int32> Length { get; set; }
		
		/// <summary>
		/// Annotation metadata for slash commands (/).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="slashCommand")]
		public SlashCommandMetadata SlashCommand { get; set; }
		
		/// <summary>
		/// Start index (0-based, inclusive) in the plain-text message body this annotation corresponds to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startIndex")]
		public System.Nullable<System.Int32> StartIndex { get; set; }
		
		/// <summary>
		/// The type of this annotation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<AnnotationType> Type { get; set; }
		
		/// <summary>
		/// Annotation metadata for user mentions (@).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userMention")]
		public UserMentionMetadata UserMention { get; set; }
	}
	
	/// <summary>
	/// Annotation metadata for slash commands (/).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SlashCommandMetadata
	{
		
		/// <summary>
		/// A user in Google Chat. When returned as an output from a request, if your Chat app [authenticates as a user](https://developers.google.com/chat/api/guides/auth/users), the output for a `User` resource only populates the user's `name` and `type`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bot")]
		public User Bot { get; set; }
		
		/// <summary>
		/// The command ID of the invoked slash command.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="commandId")]
		public string CommandId { get; set; }
		
		/// <summary>
		/// The name of the invoked slash command.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="commandName")]
		public string CommandName { get; set; }
		
		/// <summary>
		/// Indicates whether the slash command is for a dialog.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="triggersDialog")]
		public System.Nullable<System.Boolean> TriggersDialog { get; set; }
		
		/// <summary>
		/// The type of slash command.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<SlashCommandMetadataType> Type { get; set; }
	}
	
	/// <summary>
	/// A user in Google Chat. When returned as an output from a request, if your Chat app [authenticates as a user](https://developers.google.com/chat/api/guides/auth/users), the output for a `User` resource only populates the user's `name` and `type`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class User
	{
		
		/// <summary>
		/// Output only. The user's display name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Unique identifier of the user's Google Workspace domain.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="domainId")]
		public string DomainId { get; set; }
		
		/// <summary>
		/// Output only. When `true`, the user is deleted or their profile is not visible.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isAnonymous")]
		public System.Nullable<System.Boolean> IsAnonymous { get; set; }
		
		/// <summary>
		/// Resource name for a Google Chat user. Format: `users/{user}`. `users/app` can be used as an alias for the calling app bot user. For human users, `{user}` is the same user identifier as: - the `id` for the [Person](https://developers.google.com/people/api/rest/v1/people) in the People API. For example, `users/123456789` in Chat API represents the same person as the `123456789` Person profile ID in People API. - the `id` for a [user](https://developers.google.com/admin-sdk/directory/reference/rest/v1/users) in the Admin SDK Directory API. - the user's email address can be used as an alias for `{user}` in API requests. For example, if the People API Person profile ID for `user@example.com` is `123456789`, you can use `users/user@example.com` as an alias to reference `users/123456789`. Only the canonical resource name (for example `users/123456789`) will be returned from the API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// User type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<UserType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum UserType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HUMAN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BOT = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SlashCommandMetadataType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADD = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVOKE = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AnnotationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ANNOTATION_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USER_MENTION = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SLASH_COMMAND = 2,
	}
	
	/// <summary>
	/// Annotation metadata for user mentions (@).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UserMentionMetadata
	{
		
		/// <summary>
		/// The type of user mention.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<UserMentionMetadataType> Type { get; set; }
		
		/// <summary>
		/// A user in Google Chat. When returned as an output from a request, if your Chat app [authenticates as a user](https://developers.google.com/chat/api/guides/auth/users), the output for a `User` resource only populates the user's `name` and `type`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="user")]
		public User User { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum UserMentionMetadataType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADD = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MENTION = 2,
	}
	
	/// <summary>
	/// A GIF image that's specified by a URL.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AttachedGif
	{
		
		/// <summary>
		/// Output only. The URL that hosts the GIF image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	/// <summary>
	/// An attachment in Google Chat.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Attachment
	{
		
		[System.Runtime.Serialization.DataMember(Name="attachmentDataRef")]
		public AttachmentDataRef AttachmentDataRef { get; set; }
		
		/// <summary>
		/// Output only. The original file name for the content, not the full path.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentName")]
		public string ContentName { get; set; }
		
		/// <summary>
		/// Output only. The content type (MIME type) of the file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentType")]
		public string ContentType { get; set; }
		
		/// <summary>
		/// Output only. The download URL which should be used to allow a human user to download the attachment. Chat apps shouldn't use this URL to download attachment content.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="downloadUri")]
		public string DownloadUri { get; set; }
		
		/// <summary>
		/// A reference to the data of a drive attachment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="driveDataRef")]
		public DriveDataRef DriveDataRef { get; set; }
		
		/// <summary>
		/// Resource name of the attachment, in the form `spaces/*/messages/*/attachments/*`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Output only. The source of the attachment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source")]
		public System.Nullable<AttachmentSource> Source { get; set; }
		
		/// <summary>
		/// Output only. The thumbnail URL which should be used to preview the attachment to a human user. Chat apps shouldn't use this URL to download attachment content.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thumbnailUri")]
		public string ThumbnailUri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AttachmentDataRef
	{
		
		/// <summary>
		/// Opaque token containing a reference to an uploaded attachment. Treated by clients as an opaque string and used to create or update Chat messages with attachments.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attachmentUploadToken")]
		public string AttachmentUploadToken { get; set; }
		
		/// <summary>
		/// The resource name of the attachment data. This field is used with the media API to download the attachment data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceName")]
		public string ResourceName { get; set; }
	}
	
	/// <summary>
	/// A reference to the data of a drive attachment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DriveDataRef
	{
		
		/// <summary>
		/// The ID for the drive file. Use with the Drive API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="driveFileId")]
		public string DriveFileId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AttachmentSource
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SOURCE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DRIVE_FILE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPLOADED_CONTENT = 2,
	}
	
	/// <summary>
	/// A button. Can be a text button or an image button.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Button
	{
		
		/// <summary>
		/// An image button with an `onclick` action.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageButton")]
		public ImageButton ImageButton { get; set; }
		
		/// <summary>
		/// A button with text and `onclick` action.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="textButton")]
		public TextButton TextButton { get; set; }
	}
	
	/// <summary>
	/// An image button with an `onclick` action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ImageButton
	{
		
		/// <summary>
		/// The icon specified by an `enum` that indices to an icon provided by Chat API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="icon")]
		public System.Nullable<ImageButtonIcon> Icon { get; set; }
		
		/// <summary>
		/// The icon specified by a URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="iconUrl")]
		public string IconUrl { get; set; }
		
		/// <summary>
		/// The name of this `image_button` that's used for accessibility. Default value is provided if this name isn't specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// An `onclick` action (for example, open a link).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="onClick")]
		public OnClick OnClick { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ImageButtonIcon
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ICON_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AIRPLANE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BOOKMARK = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BUS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CAR = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLOCK = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONFIRMATION_NUMBER_ICON = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DOLLAR = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DESCRIPTION = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EMAIL = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EVENT_PERFORMER = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EVENT_SEAT = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FLIGHT_ARRIVAL = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FLIGHT_DEPARTURE = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HOTEL = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HOTEL_ROOM_TYPE = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVITE = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAP_PIN = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEMBERSHIP = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MULTIPLE_PEOPLE = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OFFER = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PERSON = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PHONE = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESTAURANT_ICON = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SHOPPING_CART = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STAR = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STORE = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TICKET = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TRAIN = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIDEO_CAMERA = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIDEO_PLAY = 30,
	}
	
	/// <summary>
	/// An `onclick` action (for example, open a link).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OnClick
	{
		
		/// <summary>
		/// A form action describes the behavior when the form is submitted. For example, you can invoke Apps Script to handle the form.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="action")]
		public FormAction Action { get; set; }
		
		/// <summary>
		/// A link that opens a new window.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="openLink")]
		public OpenLink OpenLink { get; set; }
	}
	
	/// <summary>
	/// A form action describes the behavior when the form is submitted. For example, you can invoke Apps Script to handle the form.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FormAction
	{
		
		/// <summary>
		/// The method name is used to identify which part of the form triggered the form submission. This information is echoed back to the Chat app as part of the card click event. You can use the same method name for several elements that trigger a common behavior.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="actionMethodName")]
		public string ActionMethodName { get; set; }
		
		/// <summary>
		/// List of action parameters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public ActionParameter[] Parameters { get; set; }
	}
	
	/// <summary>
	/// A link that opens a new window.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OpenLink
	{
		
		/// <summary>
		/// The URL to open.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	/// <summary>
	/// A button with text and `onclick` action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TextButton
	{
		
		/// <summary>
		/// An `onclick` action (for example, open a link).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="onClick")]
		public OnClick OnClick { get; set; }
		
		/// <summary>
		/// The text of the button.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
	}
	
	/// <summary>
	/// A card is a UI element that can contain UI widgets such as text and images.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Card
	{
		
		/// <summary>
		/// The actions of this card.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cardActions")]
		public CardAction[] CardActions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="header")]
		public CardHeader Header { get; set; }
		
		/// <summary>
		/// Name of the card.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Sections are separated by a line divider.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sections")]
		public Section[] Sections { get; set; }
	}
	
	/// <summary>
	/// A card action is the action associated with the card. For an invoice card, a typical action would be: delete invoice, email invoice or open the invoice in browser. Not supported by Google Chat apps.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CardAction
	{
		
		/// <summary>
		/// The label used to be displayed in the action menu item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="actionLabel")]
		public string ActionLabel { get; set; }
		
		/// <summary>
		/// An `onclick` action (for example, open a link).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="onClick")]
		public OnClick OnClick { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CardHeader
	{
		
		/// <summary>
		/// The image's type (for example, square border or circular border).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageStyle")]
		public System.Nullable<CardHeaderImageStyle> ImageStyle { get; set; }
		
		/// <summary>
		/// The URL of the image in the card header.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageUrl")]
		public string ImageUrl { get; set; }
		
		/// <summary>
		/// The subtitle of the card header.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subtitle")]
		public string Subtitle { get; set; }
		
		/// <summary>
		/// The title must be specified. The header has a fixed height: if both a title and subtitle is specified, each takes up one line. If only the title is specified, it takes up both lines.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CardHeaderImageStyle
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IMAGE_STYLE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IMAGE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AVATAR = 2,
	}
	
	/// <summary>
	/// A section contains a collection of widgets that are rendered (vertically) in the order that they are specified. Across all platforms, cards have a narrow fixed width, so there's currently no need for layout properties (for example, float).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Section
	{
		
		/// <summary>
		/// The header of the section. Formatted text is supported. For more information about formatting text, see [Formatting text in Google Chat apps](https://developers.google.com/chat/format-messages#card-formatting) and [Formatting text in Google Workspace Add-ons](https://developers.google.com/apps-script/add-ons/concepts/widgets#text_formatting).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="header")]
		public string Header { get; set; }
		
		/// <summary>
		/// A section must contain at least one widget.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="widgets")]
		public WidgetMarkup[] Widgets { get; set; }
	}
	
	/// <summary>
	/// A widget is a UI element that presents text and images.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WidgetMarkup
	{
		
		/// <summary>
		/// A list of buttons. Buttons is also `oneof data` and only one of these fields should be set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buttons")]
		public Button[] Buttons { get; set; }
		
		/// <summary>
		/// An image that's specified by a URL and can have an `onclick` action.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="image")]
		public Image Image { get; set; }
		
		/// <summary>
		/// A UI element contains a key (label) and a value (content). This element can also contain some actions such as `onclick` button.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keyValue")]
		public KeyValue KeyValue { get; set; }
		
		/// <summary>
		/// A paragraph of text. Formatted text supported. For more information about formatting text, see [Formatting text in Google Chat apps](https://developers.google.com/chat/format-messages#card-formatting) and [Formatting text in Google Workspace Add-ons](https://developers.google.com/apps-script/add-ons/concepts/widgets#text_formatting).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="textParagraph")]
		public TextParagraph TextParagraph { get; set; }
	}
	
	/// <summary>
	/// An image that's specified by a URL and can have an `onclick` action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Image
	{
		
		/// <summary>
		/// The aspect ratio of this image (width and height). This field lets you reserve the right height for the image while waiting for it to load. It's not meant to override the built-in aspect ratio of the image. If unset, the server fills it by prefetching the image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="aspectRatio")]
		public System.Nullable<System.Double> AspectRatio { get; set; }
		
		/// <summary>
		/// The URL of the image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageUrl")]
		public string ImageUrl { get; set; }
		
		/// <summary>
		/// An `onclick` action (for example, open a link).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="onClick")]
		public OnClick OnClick { get; set; }
	}
	
	/// <summary>
	/// A UI element contains a key (label) and a value (content). This element can also contain some actions such as `onclick` button.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class KeyValue
	{
		
		/// <summary>
		/// The text of the bottom label. Formatted text supported. For more information about formatting text, see [Formatting text in Google Chat apps](https://developers.google.com/chat/format-messages#card-formatting) and [Formatting text in Google Workspace Add-ons](https://developers.google.com/apps-script/add-ons/concepts/widgets#text_formatting).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bottomLabel")]
		public string BottomLabel { get; set; }
		
		/// <summary>
		/// A button. Can be a text button or an image button.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="button")]
		public Button Button { get; set; }
		
		/// <summary>
		/// The text of the content. Formatted text supported and always required. For more information about formatting text, see [Formatting text in Google Chat apps](https://developers.google.com/chat/format-messages#card-formatting) and [Formatting text in Google Workspace Add-ons](https://developers.google.com/apps-script/add-ons/concepts/widgets#text_formatting).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="content")]
		public string Content { get; set; }
		
		/// <summary>
		/// If the content should be multiline.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentMultiline")]
		public System.Nullable<System.Boolean> ContentMultiline { get; set; }
		
		/// <summary>
		/// An enum value that's replaced by the Chat API with the corresponding icon image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="icon")]
		public ImageButtonIcon Icon { get; set; }
		
		/// <summary>
		/// The icon specified by a URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="iconUrl")]
		public string IconUrl { get; set; }
		
		/// <summary>
		/// An `onclick` action (for example, open a link).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="onClick")]
		public OnClick OnClick { get; set; }
		
		/// <summary>
		/// The text of the top label. Formatted text supported. For more information about formatting text, see [Formatting text in Google Chat apps](https://developers.google.com/chat/format-messages#card-formatting) and [Formatting text in Google Workspace Add-ons](https://developers.google.com/apps-script/add-ons/concepts/widgets#text_formatting).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="topLabel")]
		public string TopLabel { get; set; }
	}
	
	/// <summary>
	/// A paragraph of text. Formatted text supported. For more information about formatting text, see [Formatting text in Google Chat apps](https://developers.google.com/chat/format-messages#card-formatting) and [Formatting text in Google Workspace Add-ons](https://developers.google.com/apps-script/add-ons/concepts/widgets#text_formatting).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TextParagraph
	{
		
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
	}
	
	/// <summary>
	/// A [card](https://developers.google.com/chat/api/reference/rest/v1/cards) in a Google Chat message. Only Chat apps can create cards. If your Chat app [authenticates as a user](https://developers.google.com/chat/api/guides/auth/users), the message can't contain cards. [Card builder](https://addons.gsuite.google.com/uikit/builder)
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CardWithId
	{
		
		/// <summary>
		/// A card interface displayed in a Google Chat message or Google Workspace Add-on. Cards support a defined layout, interactive UI elements like buttons, and rich media like images. Use cards to present detailed information, gather information from users, and guide users to take a next step. [Card builder](https://addons.gsuite.google.com/uikit/builder) To learn how to build cards, see the following documentation: * For Google Chat apps, see [Design dynamic, interactive, and consistent UIs with cards](https://developers.google.com/chat/ui). * For Google Workspace Add-ons, see [Card-based interfaces](https://developers.google.com/apps-script/add-ons/concepts/cards). **Example: Card message for a Google Chat app** ![Example contact card](https://developers.google.com/chat/images/card_api_reference.png) To create the sample card message in Google Chat, use the following JSON: ``` { "cardsV2": [ { "cardId": "unique-card-id", "card": { "header": { "title": "Sasha", "subtitle": "Software Engineer", "imageUrl": "https://developers.google.com/chat/images/quickstart-app-avatar.png", "imageType": "CIRCLE", "imageAltText": "Avatar for Sasha", }, "sections": [ { "header": "Contact Info", "collapsible": true, "uncollapsibleWidgetsCount": 1, "widgets": [ { "decoratedText": { "startIcon": { "knownIcon": "EMAIL", }, "text": "sasha@example.com", } }, { "decoratedText": { "startIcon": { "knownIcon": "PERSON", }, "text": "Online", }, }, { "decoratedText": { "startIcon": { "knownIcon": "PHONE", }, "text": "+1 (555) 555-1234", } }, { "buttonList": { "buttons": [ { "text": "Share", "onClick": { "openLink": { "url": "https://example.com/share", } } }, { "text": "Edit", "onClick": { "action": { "function": "goToView", "parameters": [ { "key": "viewType", "value": "EDIT", } ], } } }, ], } }, ], }, ], }, } ], } ```
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="card")]
		public GoogleAppsCardV1Card Card { get; set; }
		
		/// <summary>
		/// Required if the message contains multiple cards. A unique identifier for a card in a message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cardId")]
		public string CardId { get; set; }
	}
	
	/// <summary>
	/// JSON payload of error messages. If the Cloud Logging API is enabled, these error messages are logged to [Google Cloud Logging](https://cloud.google.com/logging/docs).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ChatAppLogEntry
	{
		
		/// <summary>
		/// The deployment that caused the error. For Chat apps built in Apps Script, this is the deployment ID defined by Apps Script.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deployment")]
		public string Deployment { get; set; }
		
		/// <summary>
		/// The unencrypted `callback_method` name that was running when the error was encountered.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deploymentFunction")]
		public string DeploymentFunction { get; set; }
		
		/// <summary>
		/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public Status Error { get; set; }
	}
	
	/// <summary>
	/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Status
	{
		
		/// <summary>
		/// The status code, which should be an enum value of google.rpc.Code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		/// <summary>
		/// A list of messages that carry the error details. There is a common set of message types for APIs to use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string[] Details { get; set; }
		
		/// <summary>
		/// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// Represents information about the user's client, such as locale, host app, and platform. For Chat apps, `CommonEventObject` includes data submitted by users interacting with cards, like data entered in [dialogs](https://developers.google.com/chat/how-tos/dialogs).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CommonEventObject
	{
		
		/// <summary>
		/// A map containing the current values of the widgets in a card. The map keys are the string IDs assigned to each widget, and the values represent inputs to the widget. Depending on the input data type, a different object represents each input: For single-value widgets, `StringInput`. For multi-value widgets, an array of `StringInput` objects. For a date-time picker, a `DateTimeInput`. For a date-only picker, a `DateInput`. For a time-only picker, a `TimeInput`. Corresponds with the data entered by a user on a card in a [dialog](https://developers.google.com/chat/how-tos/dialogs).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="formInputs")]
		public System.Collections.Generic.Dictionary<string, Inputs> FormInputs { get; set; }
		
		/// <summary>
		/// The hostApp enum which indicates the app the add-on is invoked from. Always `CHAT` for Chat apps.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hostApp")]
		public System.Nullable<CommonEventObjectHostApp> HostApp { get; set; }
		
		/// <summary>
		/// Name of the invoked function associated with the widget. Only set for Chat apps.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="invokedFunction")]
		public string InvokedFunction { get; set; }
		
		/// <summary>
		/// Custom [parameters](/chat/api/reference/rest/v1/cards#ActionParameter) passed to the invoked function. Both keys and values must be strings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public System.Collections.Generic.Dictionary<string, string> Parameters { get; set; }
		
		/// <summary>
		/// The platform enum which indicates the platform where the event originates (`WEB`, `IOS`, or `ANDROID`). Not supported by Chat apps.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="platform")]
		public System.Nullable<CommonEventObjectPlatform> Platform { get; set; }
		
		/// <summary>
		/// The timezone ID and offset from Coordinated Universal Time (UTC). Only supported for the event types [`CARD_CLICKED`](https://developers.google.com/chat/api/reference/rest/v1/EventType#ENUM_VALUES.CARD_CLICKED) and [`SUBMIT_DIALOG`](https://developers.google.com/chat/api/reference/rest/v1/DialogEventType#ENUM_VALUES.SUBMIT_DIALOG).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeZone")]
		public TimeZone TimeZone { get; set; }
		
		/// <summary>
		/// The full `locale.displayName` in the format of [ISO 639 language code]-[ISO 3166 country/region code] such as "en-US".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userLocale")]
		public string UserLocale { get; set; }
	}
	
	/// <summary>
	/// Types of data that users can enter on cards or dialogs. To learn how to process information from users, see [Read form data input by users on cards](https://developers.google.com/chat/ui/read-form-data).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Inputs
	{
		
		/// <summary>
		/// Date input values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dateInput")]
		public DateInput DateInput { get; set; }
		
		/// <summary>
		/// Date and time input values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dateTimeInput")]
		public DateTimeInput DateTimeInput { get; set; }
		
		/// <summary>
		/// Input parameter for regular widgets. For single-valued widgets, it is a single value list. For multi-valued widgets, such as checkbox, all the values are presented.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stringInputs")]
		public StringInputs StringInputs { get; set; }
		
		/// <summary>
		/// Time input values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeInput")]
		public TimeInput TimeInput { get; set; }
	}
	
	/// <summary>
	/// Date input values.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DateInput
	{
		
		/// <summary>
		/// Time since epoch time, in milliseconds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="msSinceEpoch")]
		public string MsSinceEpoch { get; set; }
	}
	
	/// <summary>
	/// Date and time input values.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DateTimeInput
	{
		
		/// <summary>
		/// Whether the `datetime` input includes a calendar date.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hasDate")]
		public System.Nullable<System.Boolean> HasDate { get; set; }
		
		/// <summary>
		/// Whether the `datetime` input includes a timestamp.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hasTime")]
		public System.Nullable<System.Boolean> HasTime { get; set; }
		
		/// <summary>
		/// Time since epoch time, in milliseconds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="msSinceEpoch")]
		public string MsSinceEpoch { get; set; }
	}
	
	/// <summary>
	/// Input parameter for regular widgets. For single-valued widgets, it is a single value list. For multi-valued widgets, such as checkbox, all the values are presented.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StringInputs
	{
		
		/// <summary>
		/// An array of strings entered by the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string[] Value { get; set; }
	}
	
	/// <summary>
	/// Time input values.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TimeInput
	{
		
		/// <summary>
		/// The hour on a 24-hour clock.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hours")]
		public System.Nullable<System.Int32> Hours { get; set; }
		
		/// <summary>
		/// The number of minutes past the hour. Valid values are 0 to 59.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minutes")]
		public System.Nullable<System.Int32> Minutes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CommonEventObjectHostApp
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNSPECIFIED_HOST_APP = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GMAIL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CALENDAR = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DRIVE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEMO = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DOCS = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEET = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SHEETS = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SLIDES = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DRAWINGS = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHAT = 10,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CommonEventObjectPlatform
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN_PLATFORM = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WEB = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IOS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ANDROID = 3,
	}
	
	/// <summary>
	/// The timezone ID and offset from Coordinated Universal Time (UTC). Only supported for the event types [`CARD_CLICKED`](https://developers.google.com/chat/api/reference/rest/v1/EventType#ENUM_VALUES.CARD_CLICKED) and [`SUBMIT_DIALOG`](https://developers.google.com/chat/api/reference/rest/v1/DialogEventType#ENUM_VALUES.SUBMIT_DIALOG).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TimeZone
	{
		
		/// <summary>
		/// The [IANA TZ](https://www.iana.org/time-zones) time zone database code, such as "America/Toronto".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The user timezone offset, in milliseconds, from Coordinated Universal Time (UTC).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offset")]
		public System.Nullable<System.Int32> Offset { get; set; }
	}
	
	/// <summary>
	/// Request message for completing the import process for a space.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CompleteImportSpaceRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CompleteImportSpaceResponse
	{
		
		/// <summary>
		/// A space in Google Chat. Spaces are conversations between two or more users or 1:1 messages between a user and a Chat app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="space")]
		public Space Space { get; set; }
	}
	
	/// <summary>
	/// A space in Google Chat. Spaces are conversations between two or more users or 1:1 messages between a user and a Chat app.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Space
	{
		
		/// <summary>
		/// Output only. Whether the Chat app was installed by a Google Workspace administrator. Administrators can install a Chat app for their domain, organizational unit, or a group of users. Administrators can only install Chat apps for direct messaging between users and the app. To support admin install, your app must feature direct messaging.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adminInstalled")]
		public System.Nullable<System.Boolean> AdminInstalled { get; set; }
		
		/// <summary>
		/// Optional. Immutable. For spaces created in Chat, the time the space was created. This field is output only, except when used in import mode spaces. For import mode spaces, set this field to the historical timestamp at which the space was created in the source in order to preserve the original creation time. Only populated in the output when `spaceType` is `GROUP_CHAT` or `SPACE`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// The space's display name. Required when [creating a space](https://developers.google.com/chat/api/reference/rest/v1/spaces/create). If you receive the error message `ALREADY_EXISTS` when creating a space or updating the `displayName`, try a different `displayName`. An existing space within the Google Workspace organization might already use this display name. For direct messages, this field might be empty. Supports up to 128 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Immutable. Whether this space permits any Google Chat user as a member. Input when creating a space in a Google Workspace organization. Omit this field when creating spaces in the following conditions: * The authenticated user uses a Google Account. By default, the space permits any Google Chat user. * The space is used to [import data to Google Chat] (https://developers.google.com/chat/api/guides/import-data-overview). Import mode spaces must only permit members from the same Google Workspace organization. For existing spaces, this field is output only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="externalUserAllowed")]
		public System.Nullable<System.Boolean> ExternalUserAllowed { get; set; }
		
		/// <summary>
		/// Optional. Whether this space is created in `Import Mode` as part of a data migration into Google Workspace. While spaces are being imported, they aren't visible to users until the import is complete.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="importMode")]
		public System.Nullable<System.Boolean> ImportMode { get; set; }
		
		/// <summary>
		/// Resource name of the space. Format: `spaces/{space}`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Optional. Whether the space is a DM between a Chat app and a single human.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="singleUserBotDm")]
		public System.Nullable<System.Boolean> SingleUserBotDm { get; set; }
		
		/// <summary>
		/// Details about the space including description and rules.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="spaceDetails")]
		public SpaceDetails SpaceDetails { get; set; }
		
		/// <summary>
		/// The message history state for messages and threads in this space.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="spaceHistoryState")]
		public System.Nullable<SpaceSpaceHistoryState> SpaceHistoryState { get; set; }
		
		/// <summary>
		/// Output only. The threading state in the Chat space.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="spaceThreadingState")]
		public System.Nullable<SpaceSpaceThreadingState> SpaceThreadingState { get; set; }
		
		/// <summary>
		/// The type of space. Required when creating a space or updating the space type of a space. Output only for other usage.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="spaceType")]
		public System.Nullable<SpaceSpaceType> SpaceType { get; set; }
		
		/// <summary>
		/// Output only. Deprecated: Use `spaceThreadingState` instead. Whether messages are threaded in this space.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="threaded")]
		public System.Nullable<System.Boolean> Threaded { get; set; }
		
		/// <summary>
		/// Output only. Deprecated: Use `space_type` instead. The type of a space.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<SpaceType> Type { get; set; }
	}
	
	/// <summary>
	/// Details about the space including description and rules.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SpaceDetails
	{
		
		/// <summary>
		/// Optional. A description of the space. For example, describe the space's discussion topic, functional purpose, or participants. Supports up to 150 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Optional. The space's rules, expectations, and etiquette. Supports up to 5,000 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="guidelines")]
		public string Guidelines { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SpaceSpaceHistoryState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HISTORY_STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HISTORY_OFF = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HISTORY_ON = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SpaceSpaceThreadingState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPACE_THREADING_STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		THREADED_MESSAGES = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GROUPED_MESSAGES = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNTHREADED_MESSAGES = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SpaceSpaceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPACE_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPACE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GROUP_CHAT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DIRECT_MESSAGE = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SpaceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ROOM = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DM = 2,
	}
	
	/// <summary>
	/// Represents a custom emoji.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CustomEmoji
	{
		
		/// <summary>
		/// Unique key for the custom emoji resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uid")]
		public string Uid { get; set; }
	}
	
	/// <summary>
	/// Information about a deleted message. A message is deleted when `delete_time` is set.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeletionMetadata
	{
		
		/// <summary>
		/// Indicates who deleted the message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deletionType")]
		public System.Nullable<DeletionMetadataDeletionType> DeletionType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DeletionMetadataDeletionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETION_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATOR = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPACE_OWNER = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADMIN = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APP_MESSAGE_EXPIRY = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATOR_VIA_APP = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPACE_OWNER_VIA_APP = 6,
	}
	
	/// <summary>
	/// A Google Chat app interaction event. To learn about interaction events, see [Receive and respond to interactions with your Google Chat app](https://developers.google.com/chat/api/guides/message-formats). To learn about event types and for example event payloads, see [Types of Google Chat app interaction events](https://developers.google.com/chat/api/guides/message-formats/events).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeprecatedEvent
	{
		
		/// <summary>
		/// A form action describes the behavior when the form is submitted. For example, you can invoke Apps Script to handle the form.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="action")]
		public FormAction Action { get; set; }
		
		/// <summary>
		/// Represents information about the user's client, such as locale, host app, and platform. For Chat apps, `CommonEventObject` includes data submitted by users interacting with cards, like data entered in [dialogs](https://developers.google.com/chat/how-tos/dialogs).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="common")]
		public CommonEventObject Common { get; set; }
		
		/// <summary>
		/// The URL the Chat app should redirect the user to after they have completed an authorization or configuration flow outside of Google Chat. For more information, see [Connect a Chat app with other services & tools](https://developers.google.com/chat/how-tos/connect-web-services-tools).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="configCompleteRedirectUrl")]
		public string ConfigCompleteRedirectUrl { get; set; }
		
		/// <summary>
		/// The type of [dialog](https://developers.google.com/chat/how-tos/dialogs) interaction event received.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dialogEventType")]
		public System.Nullable<DeprecatedEventDialogEventType> DialogEventType { get; set; }
		
		/// <summary>
		/// The timestamp indicating when the interaction event occurred.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventTime")]
		public string EventTime { get; set; }
		
		/// <summary>
		/// For `CARD_CLICKED` interaction events, whether the user interacted with a [dialog](https://developers.google.com/chat/how-tos/dialogs).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isDialogEvent")]
		public System.Nullable<System.Boolean> IsDialogEvent { get; set; }
		
		/// <summary>
		/// A message in a Google Chat space.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public Message Message { get; set; }
		
		/// <summary>
		/// A space in Google Chat. Spaces are conversations between two or more users or 1:1 messages between a user and a Chat app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="space")]
		public Space Space { get; set; }
		
		/// <summary>
		/// The Chat app-defined key for the thread related to the interaction event. See [`spaces.messages.thread.threadKey`](/chat/api/reference/rest/v1/spaces.messages#Thread.FIELDS.thread_key) for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="threadKey")]
		public string ThreadKey { get; set; }
		
		/// <summary>
		/// A secret value that legacy Chat apps can use to verify if a request is from Google. Google randomly generates the token, and its value remains static. You can obtain, revoke, or regenerate the token from the [Chat API configuration page](https://console.cloud.google.com/apis/api/chat.googleapis.com/hangouts-chat) in the Google Cloud Console. Modern Chat apps don't use this field. It is absent from API responses and the [Chat API configuration page](https://console.cloud.google.com/apis/api/chat.googleapis.com/hangouts-chat).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="token")]
		public string Token { get; set; }
		
		/// <summary>
		/// The type of interaction event. For details, see [Types of Google Chat app interaction events](https://developers.google.com/chat/api/guides/message-formats/events).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<DeprecatedEventType> Type { get; set; }
		
		/// <summary>
		/// A user in Google Chat. When returned as an output from a request, if your Chat app [authenticates as a user](https://developers.google.com/chat/api/guides/auth/users), the output for a `User` resource only populates the user's `name` and `type`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="user")]
		public User User { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DeprecatedEventDialogEventType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REQUEST_DIALOG = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUBMIT_DIALOG = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCEL_DIALOG = 3,
	}
	
	/// <summary>
	/// A message in a Google Chat space.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Message
	{
		
		/// <summary>
		/// Parameters that a Chat app can use to configure how its response is posted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="actionResponse")]
		public ActionResponse ActionResponse { get; set; }
		
		/// <summary>
		/// Output only. Annotations associated with the `text` in this message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="annotations")]
		public Annotation[] Annotations { get; set; }
		
		/// <summary>
		/// Output only. Plain-text body of the message with all Chat app mentions stripped out.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="argumentText")]
		public string ArgumentText { get; set; }
		
		/// <summary>
		/// Output only. GIF images that are attached to the message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attachedGifs")]
		public AttachedGif[] AttachedGifs { get; set; }
		
		/// <summary>
		/// User-uploaded attachment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attachment")]
		public Attachment[] Attachment { get; set; }
		
		/// <summary>
		/// Deprecated: Use `cards_v2` instead. Rich, formatted, and interactive cards that you can use to display UI elements such as: formatted texts, buttons, and clickable images. Cards are normally displayed below the plain-text body of the message. `cards` and `cards_v2` can have a maximum size of 32 KB.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cards")]
		public Card[] Cards { get; set; }
		
		/// <summary>
		/// An array of [cards](https://developers.google.com/chat/api/reference/rest/v1/cards). Only Chat apps can create cards. If your Chat app [authenticates as a user](https://developers.google.com/chat/api/guides/auth/users), the messages can't contain cards. To learn about cards and how to create them, see [Design dynamic, interactive, and consistent UIs with cards](https://developers.google.com/chat/ui). [Card builder](https://addons.gsuite.google.com/uikit/builder)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cardsV2")]
		public CardWithId[] CardsV2 { get; set; }
		
		/// <summary>
		/// A custom name for a Chat message assigned at creation. Must start with `client-` and contain only lowercase letters, numbers, and hyphens up to 63 characters in length. Specify this field to get, update, or delete the message with the specified value. Assigning a custom name lets a Chat app recall the message without saving the message `name` from the [response body](/chat/api/reference/rest/v1/spaces.messages/get#response-body) returned when creating the message. Assigning a custom name doesn't replace the generated `name` field, the message's resource name. Instead, it sets the custom name as the `clientAssignedMessageId` field, which you can reference while processing later operations, like updating or deleting the message. For example usage, see [Name a created message](https://developers.google.com/chat/api/guides/v1/messages/create#name_a_created_message).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientAssignedMessageId")]
		public string ClientAssignedMessageId { get; set; }
		
		/// <summary>
		/// Optional. Immutable. For spaces created in Chat, the time at which the message was created. This field is output only, except when used in import mode spaces. For import mode spaces, set this field to the historical timestamp at which the message was created in the source in order to preserve the original creation time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// Output only. The time at which the message was deleted in Google Chat. If the message is never deleted, this field is empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deleteTime")]
		public string DeleteTime { get; set; }
		
		/// <summary>
		/// Information about a deleted message. A message is deleted when `delete_time` is set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deletionMetadata")]
		public DeletionMetadata DeletionMetadata { get; set; }
		
		/// <summary>
		/// Output only. The list of emoji reaction summaries on the message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="emojiReactionSummaries")]
		public EmojiReactionSummary[] EmojiReactionSummaries { get; set; }
		
		/// <summary>
		/// A plain-text description of the message's cards, used when the actual cards can't be displayed—for example, mobile notifications.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fallbackText")]
		public string FallbackText { get; set; }
		
		/// <summary>
		/// Output only. Contains the message `text` with markups added to communicate formatting. This field might not capture all formatting visible in the UI, but includes the following: * [Markup syntax](https://developers.google.com/chat/format-messages) for bold, italic, strikethrough, monospace, and monospace block. * [User mentions](https://developers.google.com/chat/format-messages#messages-@mention) using the format ``. * Custom hyperlinks using the format `<{url}|{rendered_text}>` where the first string is the URL and the second is the rendered text—for example, ``. * Custom emoji using the format `:{emoji_name}:`—for example, `:smile:`. This doesn't apply to Unicode emoji, such as `U+1F600` for a grinning face emoji. For more information, see [View text formatting sent in a message](https://developers.google.com/chat/format-messages#view_text_formatting_sent_in_a_message)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="formattedText")]
		public string FormattedText { get; set; }
		
		/// <summary>
		/// Output only. The time at which the message was last edited by a user. If the message has never been edited, this field is empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastUpdateTime")]
		public string LastUpdateTime { get; set; }
		
		/// <summary>
		/// A matched URL in a Chat message. Chat apps can preview matched URLs. For more information, see [Preview links](https://developers.google.com/chat/how-tos/preview-links).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="matchedUrl")]
		public MatchedUrl MatchedUrl { get; set; }
		
		/// <summary>
		/// Resource name in the form `spaces/*/messages/*`. Example: `spaces/AAAAAAAAAAA/messages/BBBBBBBBBBB.BBBBBBBBBBB`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// A user in Google Chat. When returned as an output from a request, if your Chat app [authenticates as a user](https://developers.google.com/chat/api/guides/auth/users), the output for a `User` resource only populates the user's `name` and `type`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="privateMessageViewer")]
		public User PrivateMessageViewer { get; set; }
		
		/// <summary>
		/// Information about a quoted message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quotedMessageMetadata")]
		public QuotedMessageMetadata QuotedMessageMetadata { get; set; }
		
		/// <summary>
		/// A user in Google Chat. When returned as an output from a request, if your Chat app [authenticates as a user](https://developers.google.com/chat/api/guides/auth/users), the output for a `User` resource only populates the user's `name` and `type`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sender")]
		public User Sender { get; set; }
		
		/// <summary>
		/// A [slash command](https://developers.google.com/chat/how-tos/slash-commands) in Google Chat.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="slashCommand")]
		public SlashCommand SlashCommand { get; set; }
		
		/// <summary>
		/// A space in Google Chat. Spaces are conversations between two or more users or 1:1 messages between a user and a Chat app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="space")]
		public Space Space { get; set; }
		
		/// <summary>
		/// Plain-text body of the message. The first link to an image, video, or web page generates a [preview chip](https://developers.google.com/chat/how-tos/preview-links). You can also [@mention a Google Chat user](https://developers.google.com/chat/format-messages#messages-@mention), or everyone in the space. To learn about creating text messages, see [Send a text message](https://developers.google.com/chat/api/guides/v1/messages/create#create-text-messages).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
		
		/// <summary>
		/// A thread in a Google Chat space. For example usage, see [Start or reply to a message thread](https://developers.google.com/chat/api/guides/v1/messages/create#create-message-thread). If you specify a thread when creating a message, you can set the [`messageReplyOption`](https://developers.google.com/chat/api/reference/rest/v1/spaces.messages/create#messagereplyoption) field to determine what happens if no matching thread is found.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thread")]
		public Thread Thread { get; set; }
		
		/// <summary>
		/// Output only. When `true`, the message is a response in a reply thread. When `false`, the message is visible in the space's top-level conversation as either the first message of a thread or a message with no threaded replies. If the space doesn't support reply in threads, this field is always `false`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="threadReply")]
		public System.Nullable<System.Boolean> ThreadReply { get; set; }
	}
	
	/// <summary>
	/// The number of people who reacted to a message with a specific emoji.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EmojiReactionSummary
	{
		
		/// <summary>
		/// An emoji that is used as a reaction to a message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="emoji")]
		public Emoji Emoji { get; set; }
		
		/// <summary>
		/// The total number of reactions using the associated emoji.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reactionCount")]
		public System.Nullable<System.Int32> ReactionCount { get; set; }
	}
	
	/// <summary>
	/// An emoji that is used as a reaction to a message.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Emoji
	{
		
		/// <summary>
		/// Represents a custom emoji.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customEmoji")]
		public CustomEmoji CustomEmoji { get; set; }
		
		/// <summary>
		/// A basic emoji represented by a unicode string.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unicode")]
		public string Unicode { get; set; }
	}
	
	/// <summary>
	/// A matched URL in a Chat message. Chat apps can preview matched URLs. For more information, see [Preview links](https://developers.google.com/chat/how-tos/preview-links).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MatchedUrl
	{
		
		/// <summary>
		/// Output only. The URL that was matched.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	/// <summary>
	/// Information about a quoted message.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class QuotedMessageMetadata
	{
		
		/// <summary>
		/// Output only. The timestamp when the quoted message was created or when the quoted message was last updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastUpdateTime")]
		public string LastUpdateTime { get; set; }
		
		/// <summary>
		/// Output only. Resource name of the quoted message. Format: `spaces/{space}/messages/{message}`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// A [slash command](https://developers.google.com/chat/how-tos/slash-commands) in Google Chat.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SlashCommand
	{
		
		/// <summary>
		/// The ID of the slash command invoked.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="commandId")]
		public string CommandId { get; set; }
	}
	
	/// <summary>
	/// A thread in a Google Chat space. For example usage, see [Start or reply to a message thread](https://developers.google.com/chat/api/guides/v1/messages/create#create-message-thread). If you specify a thread when creating a message, you can set the [`messageReplyOption`](https://developers.google.com/chat/api/reference/rest/v1/spaces.messages/create#messagereplyoption) field to determine what happens if no matching thread is found.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Thread
	{
		
		/// <summary>
		/// Output only. Resource name of the thread. Example: `spaces/{space}/threads/{thread}`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Optional. Input for creating or updating a thread. Otherwise, output only. ID for the thread. Supports up to 4000 characters. This ID is unique to the Chat app that sets it. For example, if multiple Chat apps create a message using the same thread key, the messages are posted in different threads. To reply in a thread created by a person or another Chat app, specify the thread `name` field instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="threadKey")]
		public string ThreadKey { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DeprecatedEventType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MESSAGE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADDED_TO_SPACE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REMOVED_FROM_SPACE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CARD_CLICKED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WIDGET_UPDATED = 5,
	}
	
	/// <summary>
	/// A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Empty
	{
	}
	
	/// <summary>
	/// A Google Group in Google Chat.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Group
	{
		
		/// <summary>
		/// Resource name for a Google Group. Represents a [group](https://cloud.google.com/identity/docs/reference/rest/v1/groups) in Cloud Identity Groups API. Format: groups/{group}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListMembershipsResponse
	{
		
		/// <summary>
		/// Unordered list. List of memberships in the requested (or first) page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="memberships")]
		public Membership[] Memberships { get; set; }
		
		/// <summary>
		/// A token that you can send as `pageToken` to retrieve the next page of results. If empty, there are no subsequent pages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Represents a membership relation in Google Chat, such as whether a user or Chat app is invited to, part of, or absent from a space.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Membership
	{
		
		/// <summary>
		/// Optional. Immutable. The creation time of the membership, such as when a member joined or was invited to join a space. This field is output only, except when used to import historical memberships in import mode spaces.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// Optional. Immutable. The deletion time of the membership, such as when a member left or was removed from a space. This field is output only, except when used to import historical memberships in import mode spaces.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deleteTime")]
		public string DeleteTime { get; set; }
		
		/// <summary>
		/// A Google Group in Google Chat.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="groupMember")]
		public Group GroupMember { get; set; }
		
		/// <summary>
		/// A user in Google Chat. When returned as an output from a request, if your Chat app [authenticates as a user](https://developers.google.com/chat/api/guides/auth/users), the output for a `User` resource only populates the user's `name` and `type`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="member")]
		public User Member { get; set; }
		
		/// <summary>
		/// Resource name of the membership, assigned by the server. Format: `spaces/{space}/members/{member}`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Optional. User's role within a Chat space, which determines their permitted actions in the space. [Developer Preview](https://developers.google.com/workspace/preview): This field can only be used as input in `UpdateMembership`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="role")]
		public System.Nullable<MembershipRole> Role { get; set; }
		
		/// <summary>
		/// Output only. State of the membership.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<MembershipState> State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum MembershipRole
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEMBERSHIP_ROLE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ROLE_MEMBER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ROLE_MANAGER = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum MembershipState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEMBERSHIP_STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JOINED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVITED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_A_MEMBER = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListMessagesResponse
	{
		
		/// <summary>
		/// List of messages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="messages")]
		public Message[] Messages { get; set; }
		
		/// <summary>
		/// You can send a token as `pageToken` to retrieve the next page of results. If empty, there are no subsequent pages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListReactionsResponse
	{
		
		/// <summary>
		/// Continuation token to retrieve the next page of results. It's empty for the last page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// List of reactions in the requested (or first) page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reactions")]
		public Reaction[] Reactions { get; set; }
	}
	
	/// <summary>
	/// A reaction to a message.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Reaction
	{
		
		/// <summary>
		/// An emoji that is used as a reaction to a message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="emoji")]
		public Emoji Emoji { get; set; }
		
		/// <summary>
		/// The resource name of the reaction. Format: `spaces/{space}/messages/{message}/reactions/{reaction}`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// A user in Google Chat. When returned as an output from a request, if your Chat app [authenticates as a user](https://developers.google.com/chat/api/guides/auth/users), the output for a `User` resource only populates the user's `name` and `type`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="user")]
		public User User { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListSpacesResponse
	{
		
		/// <summary>
		/// You can send a token as `pageToken` to retrieve the next page of results. If empty, there are no subsequent pages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// List of spaces in the requested (or first) page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="spaces")]
		public Space[] Spaces { get; set; }
	}
	
	/// <summary>
	/// Media resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Media
	{
		
		/// <summary>
		/// Name of the media resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceName")]
		public string ResourceName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SetUpSpaceRequest
	{
		
		/// <summary>
		/// Optional. The Google Chat users to invite to join the space. Omit the calling user, as they are added automatically. The set currently allows up to 20 memberships (in addition to the caller). The `Membership.member` field must contain a `user` with `name` populated (format: `users/{user}`) and `type` set to `User.Type.HUMAN`. You can only add human users when setting up a space (adding Chat apps is only supported for direct message setup with the calling app). You can also add members using the user's email as an alias for {user}. For example, the `user.name` can be `users/example@gmail.com`." To invite Gmail users or users from external Google Workspace domains, user's email must be used for `{user}`. Optional when setting `Space.spaceType` to `SPACE`. Required when setting `Space.spaceType` to `GROUP_CHAT`, along with at least two memberships. Required when setting `Space.spaceType` to `DIRECT_MESSAGE` with a human user, along with exactly one membership. Must be empty when creating a 1:1 conversation between a human and the calling Chat app (when setting `Space.spaceType` to `DIRECT_MESSAGE` and `Space.singleUserBotDm` to `true`).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="memberships")]
		public Membership[] Memberships { get; set; }
		
		/// <summary>
		/// Optional. A unique identifier for this request. A random UUID is recommended. Specifying an existing request ID returns the space created with that ID instead of creating a new space. Specifying an existing request ID from the same Chat app with a different authenticated user returns an error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
		
		/// <summary>
		/// A space in Google Chat. Spaces are conversations between two or more users or 1:1 messages between a user and a Chat app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="space")]
		public Space Space { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UploadAttachmentRequest
	{
		
		/// <summary>
		/// Required. The filename of the attachment, including the file extension.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filename")]
		public string Filename { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UploadAttachmentResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="attachmentDataRef")]
		public AttachmentDataRef AttachmentDataRef { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Downloads media. Download is supported on the URI `/v1/media/{+name}?alt=media`.
		/// Chat_media_download v1/media/{resourceName}
		/// </summary>
		/// <param name="resourceName">Name of the media that is being downloaded. See ReadRequest.resource_name.</param>
		/// <returns>Successful response</returns>
		public async Task<Media> Chat_media_downloadAsync(string resourceName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/media/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Media>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists spaces the caller is a member of. Group chats and DMs aren't listed until the first message is sent. For an example, see [List spaces](https://developers.google.com/chat/api/guides/v1/spaces/list). Requires [authentication](https://developers.google.com/chat/api/guides/auth). Supports [app authentication](https://developers.google.com/chat/api/guides/auth/service-accounts) and [user authentication](https://developers.google.com/chat/api/guides/auth/users). Lists spaces visible to the caller or authenticated user. Group chats and DMs aren't listed until the first message is sent.
		/// Chat_spaces_list v1/spaces
		/// </summary>
		/// <param name="filter">Optional. A query filter. You can filter spaces by the space type ([`space_type`](https://developers.google.com/chat/api/reference/rest/v1/spaces#spacetype)). To filter by space type, you must specify valid enum value, such as `SPACE` or `GROUP_CHAT` (the `space_type` can't be `SPACE_TYPE_UNSPECIFIED`). To query for multiple space types, use the `OR` operator. For example, the following queries are valid: ``` space_type = "SPACE" spaceType = "GROUP_CHAT" OR spaceType = "DIRECT_MESSAGE" ``` Invalid queries are rejected by the server with an `INVALID_ARGUMENT` error.</param>
		/// <param name="pageSize">Optional. The maximum number of spaces to return. The service might return fewer than this value. If unspecified, at most 100 spaces are returned. The maximum value is 1,000. If you use a value more than 1,000, it's automatically changed to 1,000. Negative values return an `INVALID_ARGUMENT` error.</param>
		/// <param name="pageToken">Optional. A page token, received from a previous list spaces call. Provide this parameter to retrieve the subsequent page. When paginating, the filter value should match the call that provided the page token. Passing a different value may lead to unexpected results.</param>
		/// <returns>Successful response</returns>
		public async Task<ListSpacesResponse> Chat_spaces_listAsync(string filter, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/spaces?filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListSpacesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a named space. Spaces grouped by topics aren't supported. For an example, see [Create a space](https://developers.google.com/chat/api/guides/v1/spaces/create). If you receive the error message `ALREADY_EXISTS` when creating a space, try a different `displayName`. An existing space within the Google Workspace organization might already use this display name. Requires [user authentication](https://developers.google.com/chat/api/guides/auth/users).
		/// Chat_spaces_create v1/spaces
		/// </summary>
		/// <param name="requestId">Optional. A unique identifier for this request. A random UUID is recommended. Specifying an existing request ID returns the space created with that ID instead of creating a new space. Specifying an existing request ID from the same Chat app with a different authenticated user returns an error.</param>
		/// <returns>Successful response</returns>
		public async Task<Space> Chat_spaces_createAsync(string requestId, Space requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/spaces?requestId=" + (requestId==null? "" : System.Uri.EscapeDataString(requestId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Space>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the existing direct message with the specified user. If no direct message space is found, returns a `404 NOT_FOUND` error. For an example, see [Find a direct message](/chat/api/guides/v1/spaces/find-direct-message). With [user authentication](https://developers.google.com/chat/api/guides/auth/users), returns the direct message space between the specified user and the authenticated user. With [app authentication](https://developers.google.com/chat/api/guides/auth/service-accounts), returns the direct message space between the specified user and the calling Chat app. Requires [user authentication](https://developers.google.com/chat/api/guides/auth/users) or [app authentication](https://developers.google.com/chat/api/guides/auth/service-accounts).
		/// Chat_spaces_findDirectMessage v1/spaces:findDirectMessage
		/// </summary>
		/// <param name="name">Required. Resource name of the user to find direct message with. Format: `users/{user}`, where `{user}` is either the `id` for the [person](https://developers.google.com/people/api/rest/v1/people) from the People API, or the `id` for the [user](https://developers.google.com/admin-sdk/directory/reference/rest/v1/users) in the Directory API. For example, if the People API profile ID is `123456789`, you can find a direct message with that person by using `users/123456789` as the `name`. When [authenticated as a user](https://developers.google.com/chat/api/guides/auth/users), you can use the email as an alias for `{user}`. For example, `users/example@gmail.com` where `example@gmail.com` is the email of the Google Chat user.</param>
		/// <returns>Successful response</returns>
		public async Task<Space> Chat_spaces_findDirectMessageAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/spaces:findDirectMessage?name=" + (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Space>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a space and adds specified users to it. The calling user is automatically added to the space, and shouldn't be specified as a membership in the request. For an example, see [Set up a space](https://developers.google.com/chat/api/guides/v1/spaces/set-up). To specify the human members to add, add memberships with the appropriate `member.name` in the `SetUpSpaceRequest`. To add a human user, use `users/{user}`, where `{user}` can be the email address for the user. For users in the same Workspace organization `{user}` can also be the `id` for the person from the People API, or the `id` for the user in the Directory API. For example, if the People API Person profile ID for `user@example.com` is `123456789`, you can add the user to the space by setting the `membership.member.name` to `users/user@example.com` or `users/123456789`. For a space or group chat, if the caller blocks or is blocked by some members, then those members aren't added to the created space. To create a direct message (DM) between the calling user and another human user, specify exactly one membership to represent the human user. If one user blocks the other, the request fails and the DM isn't created. To create a DM between the calling user and the calling app, set `Space.singleUserBotDm` to `true` and don't specify any memberships. You can only use this method to set up a DM with the calling app. To add the calling app as a member of a space or an existing DM between two human users, see [create a membership](https://developers.google.com/chat/api/guides/v1/members/create). If a DM already exists between two users, even when one user blocks the other at the time a request is made, then the existing DM is returned. Spaces with threaded replies aren't supported. If you receive the error message `ALREADY_EXISTS` when setting up a space, try a different `displayName`. An existing space within the Google Workspace organization might already use this display name. Requires [user authentication](https://developers.google.com/chat/api/guides/auth/users).
		/// Chat_spaces_setup v1/spaces:setup
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<Space> Chat_spaces_setupAsync(SetUpSpaceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/spaces:setup";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Space>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a reaction to a message. For an example, see [Delete a reaction](https://developers.google.com/chat/api/guides/v1/reactions/delete). Requires [user authentication](https://developers.google.com/chat/api/guides/auth/users).
		/// Chat_spaces_messages_reactions_delete v1/{name}
		/// </summary>
		/// <param name="name">Required. Name of the reaction to delete. Format: `spaces/{space}/messages/{message}/reactions/{reaction}`</param>
		/// <param name="force">When `true`, deleting a message also deletes its threaded replies. When `false`, if a message has threaded replies, deletion fails. Only applies when [authenticating as a user](https://developers.google.com/chat/api/guides/auth/users). Has no effect when [authenticating as a Chat app] (https://developers.google.com/chat/api/guides/auth/service-accounts).</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Chat_spaces_messages_reactions_deleteAsync(string name, bool force, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&force="+force;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Empty>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the metadata of a message attachment. The attachment data is fetched using the [media API](https://developers.google.com/chat/api/reference/rest/v1/media/download). For an example, see [Get a message attachment](https://developers.google.com/chat/api/guides/v1/media-and-attachments/get). Requires [app authentication](https://developers.google.com/chat/api/guides/auth/service-accounts).
		/// Chat_spaces_messages_attachments_get v1/{name}
		/// </summary>
		/// <param name="name">Required. Resource name of the attachment, in the form `spaces/*/messages/*/attachments/*`.</param>
		/// <returns>Successful response</returns>
		public async Task<Attachment> Chat_spaces_messages_attachments_getAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Attachment>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a message. There's a difference between the `patch` and `update` methods. The `patch` method uses a `patch` request while the `update` method uses a `put` request. We recommend using the `patch` method. For an example, see [Update a message](https://developers.google.com/chat/api/guides/v1/messages/update). Requires [authentication](https://developers.google.com/chat/api/guides/auth). Supports [app authentication](https://developers.google.com/chat/api/guides/auth/service-accounts) and [user authentication](https://developers.google.com/chat/api/guides/auth/users). When using app authentication, requests can only update messages created by the calling Chat app.
		/// Chat_spaces_messages_patch v1/{name}
		/// </summary>
		/// <param name="name">Resource name in the form `spaces/*/messages/*`. Example: `spaces/AAAAAAAAAAA/messages/BBBBBBBBBBB.BBBBBBBBBBB`</param>
		/// <param name="allowMissing">Optional. If `true` and the message isn't found, a new message is created and `updateMask` is ignored. The specified message ID must be [client-assigned](https://developers.google.com/chat/api/guides/v1/messages/create#name_a_created_message) or the request fails.</param>
		/// <param name="updateMask">Required. The field paths to update. Separate multiple values with commas. Currently supported field paths: - `text` - `attachment` - `cards` (Requires [app authentication](/chat/api/guides/auth/service-accounts).) - `cards_v2` (Requires [app authentication](/chat/api/guides/auth/service-accounts).)</param>
		/// <returns>Successful response</returns>
		public async Task<Message> Chat_spaces_messages_patchAsync(string name, bool allowMissing, string updateMask, Message requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&allowMissing="+allowMissing+"&updateMask=" + (updateMask==null? "" : System.Uri.EscapeDataString(updateMask));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Message>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a message. There's a difference between the `patch` and `update` methods. The `patch` method uses a `patch` request while the `update` method uses a `put` request. We recommend using the `patch` method. For an example, see [Update a message](https://developers.google.com/chat/api/guides/v1/messages/update). Requires [authentication](https://developers.google.com/chat/api/guides/auth). Supports [app authentication](https://developers.google.com/chat/api/guides/auth/service-accounts) and [user authentication](https://developers.google.com/chat/api/guides/auth/users). When using app authentication, requests can only update messages created by the calling Chat app.
		/// Chat_spaces_messages_update v1/{name}
		/// </summary>
		/// <param name="name">Resource name in the form `spaces/*/messages/*`. Example: `spaces/AAAAAAAAAAA/messages/BBBBBBBBBBB.BBBBBBBBBBB`</param>
		/// <param name="allowMissing">Optional. If `true` and the message isn't found, a new message is created and `updateMask` is ignored. The specified message ID must be [client-assigned](https://developers.google.com/chat/api/guides/v1/messages/create#name_a_created_message) or the request fails.</param>
		/// <param name="updateMask">Required. The field paths to update. Separate multiple values with commas. Currently supported field paths: - `text` - `attachment` - `cards` (Requires [app authentication](/chat/api/guides/auth/service-accounts).) - `cards_v2` (Requires [app authentication](/chat/api/guides/auth/service-accounts).)</param>
		/// <returns>Successful response</returns>
		public async Task<Message> Chat_spaces_messages_updateAsync(string name, bool allowMissing, string updateMask, Message requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&allowMissing="+allowMissing+"&updateMask=" + (updateMask==null? "" : System.Uri.EscapeDataString(updateMask));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Message>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Completes the [import process](https://developers.google.com/chat/api/guides/import-data) for the specified space and makes it visible to users. Requires app authentication and domain-wide delegation. For more information, see [Authorize Google Chat apps to import data](https://developers.google.com/chat/api/guides/authorize-import).
		/// Chat_spaces_completeImport v1/{name}:completeImport
		/// </summary>
		/// <param name="name">Required. Resource name of the import mode space. Format: `spaces/{space}`</param>
		/// <returns>Successful response</returns>
		public async Task<CompleteImportSpaceResponse> Chat_spaces_completeImportAsync(string name, CompleteImportSpaceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":completeImport";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CompleteImportSpaceResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists memberships in a space. For an example, see [List memberships](https://developers.google.com/chat/api/guides/v1/members/list). Listing memberships with [app authentication](https://developers.google.com/chat/api/guides/auth/service-accounts) lists memberships in spaces that the Chat app has access to, but excludes Chat app memberships, including its own. Listing memberships with [User authentication](https://developers.google.com/chat/api/guides/auth/users) lists memberships in spaces that the authenticated user has access to. Requires [authentication](https://developers.google.com/chat/api/guides/auth). Supports [app authentication](https://developers.google.com/chat/api/guides/auth/service-accounts) and [user authentication](https://developers.google.com/chat/api/guides/auth/users).
		/// Chat_spaces_members_list v1/{parent}/members
		/// </summary>
		/// <param name="parent">Required. The resource name of the space for which to fetch a membership list. Format: spaces/{space}</param>
		/// <param name="filter">Optional. A query filter. You can filter memberships by a member's role ([`role`](https://developers.google.com/chat/api/reference/rest/v1/spaces.members#membershiprole)) and type ([`member.type`](https://developers.google.com/chat/api/reference/rest/v1/User#type)). To filter by role, set `role` to `ROLE_MEMBER` or `ROLE_MANAGER`. To filter by type, set `member.type` to `HUMAN` or `BOT`. To filter by both role and type, use the `AND` operator. To filter by either role or type, use the `OR` operator. For example, the following queries are valid: ``` role = "ROLE_MANAGER" OR role = "ROLE_MEMBER" member.type = "HUMAN" AND role = "ROLE_MANAGER" ``` The following queries are invalid: ``` member.type = "HUMAN" AND member.type = "BOT" role = "ROLE_MANAGER" AND role = "ROLE_MEMBER" ``` Invalid queries are rejected by the server with an `INVALID_ARGUMENT` error.</param>
		/// <param name="pageSize">Optional. The maximum number of memberships to return. The service might return fewer than this value. If unspecified, at most 100 memberships are returned. The maximum value is 1,000. If you use a value more than 1,000, it's automatically changed to 1,000. Negative values return an `INVALID_ARGUMENT` error.</param>
		/// <param name="pageToken">Optional. A page token, received from a previous call to list memberships. Provide this parameter to retrieve the subsequent page. When paginating, all other parameters provided should match the call that provided the page token. Passing different values to the other parameters might lead to unexpected results.</param>
		/// <param name="showGroups">Optional. When `true`, also returns memberships associated with a Google Group, in addition to other types of memberships. If a filter is set, Google Group memberships that don't match the filter criteria aren't returned.</param>
		/// <param name="showInvited">Optional. When `true`, also returns memberships associated with invited members, in addition to other types of memberships. If a filter is set, invited memberships that don't match the filter criteria aren't returned. Currently requires [user authentication](https://developers.google.com/chat/api/guides/auth/users).</param>
		/// <returns>Successful response</returns>
		public async Task<ListMembershipsResponse> Chat_spaces_members_listAsync(string parent, string filter, int pageSize, string pageToken, bool showGroups, bool showInvited, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/members&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&showGroups="+showGroups+"&showInvited="+showInvited;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListMembershipsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a human membership or app membership for the calling app. Creating memberships for other apps isn't supported. For an example, see [ Create a membership](https://developers.google.com/chat/api/guides/v1/members/create). When creating a membership, if the specified member has their auto-accept policy turned off, then they're invited, and must accept the space invitation before joining. Otherwise, creating a membership adds the member directly to the specified space. Requires [user authentication](https://developers.google.com/chat/api/guides/auth/users). To specify the member to add, set the `membership.member.name` in the `CreateMembershipRequest`: - To add the calling app to a space or a direct message between two human users, use `users/app`. Unable to add other apps to the space. - To add a human user, use `users/{user}`, where `{user}` can be the email address for the user. For users in the same Workspace organization `{user}` can also be the `id` for the person from the People API, or the `id` for the user in the Directory API. For example, if the People API Person profile ID for `user@example.com` is `123456789`, you can add the user to the space by setting the `membership.member.name` to `users/user@example.com` or `users/123456789`.
		/// Chat_spaces_members_create v1/{parent}/members
		/// </summary>
		/// <param name="parent">Required. The resource name of the space for which to create the membership. Format: spaces/{space}</param>
		/// <returns>Successful response</returns>
		public async Task<Membership> Chat_spaces_members_createAsync(string parent, Membership requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/members";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Membership>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists messages in a space that the caller is a member of, including messages from blocked members and spaces. For an example, see [List messages](/chat/api/guides/v1/messages/list). Requires [user authentication](https://developers.google.com/chat/api/guides/auth/users).
		/// Chat_spaces_messages_list v1/{parent}/messages
		/// </summary>
		/// <param name="parent">Required. The resource name of the space to list messages from. Format: `spaces/{space}`</param>
		/// <param name="filter">A query filter. You can filter messages by date (`create_time`) and thread (`thread.name`). To filter messages by the date they were created, specify the `create_time` with a timestamp in [RFC-3339](https://www.rfc-editor.org/rfc/rfc3339) format and double quotation marks. For example, `"2023-04-21T11:30:00-04:00"`. You can use the greater than operator `>` to list messages that were created after a timestamp, or the less than operator `<` to list messages that were created before a timestamp. To filter messages within a time interval, use the `AND` operator between two timestamps. To filter by thread, specify the `thread.name`, formatted as `spaces/{space}/threads/{thread}`. You can only specify one `thread.name` per query. To filter by both thread and date, use the `AND` operator in your query. For example, the following queries are valid: ``` create_time > "2012-04-21T11:30:00-04:00" create_time > "2012-04-21T11:30:00-04:00" AND thread.name = spaces/AAAAAAAAAAA/threads/123 create_time > "2012-04-21T11:30:00+00:00" AND create_time < "2013-01-01T00:00:00+00:00" AND thread.name = spaces/AAAAAAAAAAA/threads/123 thread.name = spaces/AAAAAAAAAAA/threads/123 ``` Invalid queries are rejected by the server with an `INVALID_ARGUMENT` error.</param>
		/// <param name="orderBy">Optional, if resuming from a previous query. How the list of messages is ordered. Specify a value to order by an ordering operation. Valid ordering operation values are as follows: - `ASC` for ascending. - `DESC` for descending. The default ordering is `create_time ASC`.</param>
		/// <param name="pageSize">The maximum number of messages returned. The service might return fewer messages than this value. If unspecified, at most 25 are returned. The maximum value is 1,000. If you use a value more than 1,000, it's automatically changed to 1,000. Negative values return an `INVALID_ARGUMENT` error.</param>
		/// <param name="pageToken">Optional, if resuming from a previous query. A page token received from a previous list messages call. Provide this parameter to retrieve the subsequent page. When paginating, all other parameters provided should match the call that provided the page token. Passing different values to the other parameters might lead to unexpected results.</param>
		/// <param name="showDeleted">Whether to include deleted messages. Deleted messages include deleted time and metadata about their deletion, but message content is unavailable.</param>
		/// <returns>Successful response</returns>
		public async Task<ListMessagesResponse> Chat_spaces_messages_listAsync(string parent, string filter, string orderBy, int pageSize, string pageToken, bool showDeleted, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/messages&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&orderBy=" + (orderBy==null? "" : System.Uri.EscapeDataString(orderBy))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&showDeleted="+showDeleted;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListMessagesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a message in a Google Chat space. For an example, see [Create a message](https://developers.google.com/chat/api/guides/v1/messages/create). Calling this method requires [authentication](https://developers.google.com/chat/api/guides/auth) and supports the following authentication types: - For text messages, user authentication or app authentication are supported. - For card messages, only app authentication is supported. (Only Chat apps can create card messages.)
		/// Chat_spaces_messages_create v1/{parent}/messages
		/// </summary>
		/// <param name="parent">Required. The resource name of the space in which to create a message. Format: `spaces/{space}`</param>
		/// <param name="messageId">Optional. A custom name for a Chat message assigned at creation. Must start with `client-` and contain only lowercase letters, numbers, and hyphens up to 63 characters in length. Specify this field to get, update, or delete the message with the specified value. Assigning a custom name lets a a Chat app recall the message without saving the message `name` from the [response body](/chat/api/reference/rest/v1/spaces.messages/get#response-body) returned when creating the message. Assigning a custom name doesn't replace the generated `name` field, the message's resource name. Instead, it sets the custom name as the `clientAssignedMessageId` field, which you can reference while processing later operations, like updating or deleting the message. For example usage, see [Name a created message](https://developers.google.com/chat/api/guides/v1/messages/create#name_a_created_message).</param>
		/// <param name="messageReplyOption">Optional. Specifies whether a message starts a thread or replies to one. Only supported in named spaces.</param>
		/// <param name="requestId">Optional. A unique request ID for this message. Specifying an existing request ID returns the message created with that ID instead of creating a new message.</param>
		/// <param name="threadKey">Optional. Deprecated: Use thread.thread_key instead. ID for the thread. Supports up to 4000 characters. To start or add to a thread, create a message and specify a `threadKey` or the thread.name. For example usage, see [Start or reply to a message thread](https://developers.google.com/chat/api/guides/v1/messages/create#create-message-thread).</param>
		/// <returns>Successful response</returns>
		public async Task<Message> Chat_spaces_messages_createAsync(string parent, string messageId, Chat_spaces_messages_createMessageReplyOption messageReplyOption, string requestId, string threadKey, Message requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/messages&messageId=" + (messageId==null? "" : System.Uri.EscapeDataString(messageId))+"&messageReplyOption=" + messageReplyOption+"&requestId=" + (requestId==null? "" : System.Uri.EscapeDataString(requestId))+"&threadKey=" + (threadKey==null? "" : System.Uri.EscapeDataString(threadKey));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Message>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists reactions to a message. For an example, see [List reactions](https://developers.google.com/chat/api/guides/v1/reactions/list). Requires [user authentication](https://developers.google.com/chat/api/guides/auth/users).
		/// Chat_spaces_messages_reactions_list v1/{parent}/reactions
		/// </summary>
		/// <param name="parent">Required. The message users reacted to. Format: `spaces/{space}/messages/{message}`</param>
		/// <param name="filter">Optional. A query filter. You can filter reactions by [emoji](https://developers.google.com/chat/api/reference/rest/v1/Emoji) (either `emoji.unicode` or `emoji.custom_emoji.uid`) and [user](https://developers.google.com/chat/api/reference/rest/v1/User) (`user.name`). To filter reactions for multiple emojis or users, join similar fields with the `OR` operator, such as `emoji.unicode = "🙂" OR emoji.unicode = "👍"` and `user.name = "users/AAAAAA" OR user.name = "users/BBBBBB"`. To filter reactions by emoji and user, use the `AND` operator, such as `emoji.unicode = "🙂" AND user.name = "users/AAAAAA"`. If your query uses both `AND` and `OR`, group them with parentheses. For example, the following queries are valid: ``` user.name = "users/{user}" emoji.unicode = "🙂" emoji.custom_emoji.uid = "{uid}" emoji.unicode = "🙂" OR emoji.unicode = "👍" emoji.unicode = "🙂" OR emoji.custom_emoji.uid = "{uid}" emoji.unicode = "🙂" AND user.name = "users/{user}" (emoji.unicode = "🙂" OR emoji.custom_emoji.uid = "{uid}") AND user.name = "users/{user}" ``` The following queries are invalid: ``` emoji.unicode = "🙂" AND emoji.unicode = "👍" emoji.unicode = "🙂" AND emoji.custom_emoji.uid = "{uid}" emoji.unicode = "🙂" OR user.name = "users/{user}" emoji.unicode = "🙂" OR emoji.custom_emoji.uid = "{uid}" OR user.name = "users/{user}" emoji.unicode = "🙂" OR emoji.custom_emoji.uid = "{uid}" AND user.name = "users/{user}" ``` Invalid queries are rejected by the server with an `INVALID_ARGUMENT` error.</param>
		/// <param name="pageSize">Optional. The maximum number of reactions returned. The service can return fewer reactions than this value. If unspecified, the default value is 25. The maximum value is 200; values above 200 are changed to 200.</param>
		/// <param name="pageToken">Optional. (If resuming from a previous query.) A page token received from a previous list reactions call. Provide this to retrieve the subsequent page. When paginating, the filter value should match the call that provided the page token. Passing a different value might lead to unexpected results.</param>
		/// <returns>Successful response</returns>
		public async Task<ListReactionsResponse> Chat_spaces_messages_reactions_listAsync(string parent, string filter, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/reactions&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListReactionsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a reaction and adds it to a message. For an example, see [Create a reaction](https://developers.google.com/chat/api/guides/v1/reactions/create). Requires [user authentication](https://developers.google.com/chat/api/guides/auth/users). Only unicode emoji are supported.
		/// Chat_spaces_messages_reactions_create v1/{parent}/reactions
		/// </summary>
		/// <param name="parent">Required. The message where the reaction is created. Format: `spaces/{space}/messages/{message}`</param>
		/// <returns>Successful response</returns>
		public async Task<Reaction> Chat_spaces_messages_reactions_createAsync(string parent, Reaction requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/reactions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Reaction>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum Chat_spaces_messages_createMessageReplyOption
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MESSAGE_REPLY_OPTION_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REPLY_MESSAGE_FALLBACK_TO_NEW_THREAD = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REPLY_MESSAGE_OR_FAIL = 2,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
