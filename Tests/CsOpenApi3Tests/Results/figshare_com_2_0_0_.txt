//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Account
	{
		
		/// <summary>
		/// Account activity status
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="active")]
		public long Active { get; set; }
		
		/// <summary>
		/// Date when account was created
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="created_date")]
		public string Created_date { get; set; }
		
		/// <summary>
		/// User email
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// First Name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="first_name")]
		public string First_name { get; set; }
		
		/// <summary>
		/// Account group id
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="group_id")]
		public long Group_id { get; set; }
		
		/// <summary>
		/// Account id
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public long Id { get; set; }
		
		/// <summary>
		/// Account institution
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="institution_id")]
		public long Institution_id { get; set; }
		
		/// <summary>
		/// Account institution user id
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="institution_user_id")]
		public string Institution_user_id { get; set; }
		
		/// <summary>
		/// Last Name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="last_name")]
		public string Last_name { get; set; }
		
		/// <summary>
		/// Maximum upload size for account
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="maximum_file_size")]
		public long Maximum_file_size { get; set; }
		
		/// <summary>
		/// Date of last account modification
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="modified_date")]
		public string Modified_date { get; set; }
		
		/// <summary>
		/// True if a quota request is pending
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pending_quota_request")]
		public bool Pending_quota_request { get; set; }
		
		/// <summary>
		/// Account quota
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="quota")]
		public long Quota { get; set; }
		
		/// <summary>
		/// Account total used quota
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="used_quota")]
		public long Used_quota { get; set; }
		
		/// <summary>
		/// Account used private quota
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="used_quota_private")]
		public long Used_quota_private { get; set; }
		
		/// <summary>
		/// Account public used quota
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="used_quota_public")]
		public long Used_quota_public { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AccountCreate
	{
		
		/// <summary>
		/// Email of account
		/// Required
		/// Min length: 3
		/// Max length: 150
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="email")]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(150)]
		public string Email { get; set; }
		
		/// <summary>
		/// First Name
		/// Required
		/// Max length: 30
		/// </summary>
		[System.ComponentModel.DefaultValue("")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="first_name")]
		[System.ComponentModel.DataAnnotations.MaxLength(30)]
		public string First_name { get; set; } = "";
		
		/// <summary>
		/// Not applicable to regular users. This field is reserved to institutions/publishers with access to assign to specific groups
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="group_id")]
		public System.Nullable<System.Int64> Group_id { get; set; }
		
		/// <summary>
		/// Institution user id
		/// Max length: 50
		/// </summary>
		[System.ComponentModel.DefaultValue("")]
		[System.Runtime.Serialization.DataMember(Name="institution_user_id")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string Institution_user_id { get; set; } = "";
		
		/// <summary>
		/// Is account active
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="is_active")]
		public System.Nullable<System.Boolean> Is_active { get; set; }
		
		/// <summary>
		/// Last Name
		/// Max length: 30
		/// </summary>
		[System.ComponentModel.DefaultValue("")]
		[System.Runtime.Serialization.DataMember(Name="last_name")]
		[System.ComponentModel.DataAnnotations.MaxLength(30)]
		public string Last_name { get; set; } = "";
		
		/// <summary>
		/// Account quota
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quota")]
		public System.Nullable<System.Int64> Quota { get; set; }
		
		/// <summary>
		/// Symplectic user id
		/// Max length: 50
		/// </summary>
		[System.ComponentModel.DefaultValue("")]
		[System.Runtime.Serialization.DataMember(Name="symplectic_user_id")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string Symplectic_user_id { get; set; } = "";
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AccountGroupRoles
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AccountGroupRolesCreate
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AccountReport
	{
		
		/// <summary>
		/// The ID of the account which generated this report.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="account_id")]
		public long Account_id { get; set; }
		
		/// <summary>
		/// Date when the AccountReport was requested
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="created_date")]
		public string Created_date { get; set; }
		
		/// <summary>
		/// The download link for the generated XLSX
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="download_url")]
		public string Download_url { get; set; }
		
		/// <summary>
		/// The group ID that was used to filter the report, if any.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="group_id")]
		public long Group_id { get; set; }
		
		/// <summary>
		/// A unique ID for the AccountRecord
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public long Id { get; set; }
		
		/// <summary>
		/// Status of the report
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public AccountReportStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AccountReportStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="missing")]
		missing = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pending")]
		pending = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="done")]
		done = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AccountUpdate
	{
		
		/// <summary>
		/// Not applicable to regular users. This field is reserved to institutions/publishers with access to assign to specific groups
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="group_id")]
		public long Group_id { get; set; }
		
		/// <summary>
		/// Is account active
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="is_active")]
		public bool Is_active { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Article
	{
		
		/// <summary>
		/// Type of article identifier
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="defined_type")]
		public long Defined_type { get; set; }
		
		/// <summary>
		/// Name of the article type identifier
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="defined_type_name")]
		public string Defined_type_name { get; set; }
		
		/// <summary>
		/// DOI
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="doi")]
		public string Doi { get; set; }
		
		/// <summary>
		/// Group ID
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="group_id")]
		public System.Nullable<System.Double> Group_id { get; set; }
		
		/// <summary>
		/// Handle
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="handle")]
		public string Handle { get; set; }
		
		/// <summary>
		/// Unique identifier for article
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public long Id { get; set; }
		
		/// <summary>
		/// Posted date
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="published_date")]
		public string Published_date { get; set; }
		
		/// <summary>
		/// Thumbnail image
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="thumb")]
		public string Thumb { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="timeline")]
		public Timeline Timeline { get; set; }
		
		/// <summary>
		/// Title of article
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// Api endpoint for article
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		/// <summary>
		/// Private Api endpoint for article
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="url_private_api")]
		public string Url_private_api { get; set; }
		
		/// <summary>
		/// Private site endpoint for article
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="url_private_html")]
		public string Url_private_html { get; set; }
		
		/// <summary>
		/// Public Api endpoint for article
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="url_public_api")]
		public string Url_public_api { get; set; }
		
		/// <summary>
		/// Public site endpoint for article
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="url_public_html")]
		public string Url_public_html { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Timeline
	{
		
		/// <summary>
		/// Posted date
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="posted")]
		public string Posted { get; set; }
		
		/// <summary>
		/// Revision date from curation (if curated)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="revision")]
		public string Revision { get; set; }
		
		/// <summary>
		/// Submission date in curation (if curated)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="submission")]
		public string Submission { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ArticleComplete
	{
		
		/// <summary>
		/// List of article authors
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="authors")]
		public Author[] Authors { get; set; }
		
		/// <summary>
		/// List of custom fields values
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="custom_fields")]
		public CustomArticleField[] Custom_fields { get; set; }
		
		/// <summary>
		/// List of embargo options
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="embargo_options")]
		public GroupEmbargoOptions[] Embargo_options { get; set; }
		
		/// <summary>
		/// Article public url
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="figshare_url")]
		public string Figshare_url { get; set; }
		
		/// <summary>
		/// List of article files
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="files")]
		public PublicFile[] Files { get; set; }
		
		/// <summary>
		/// Article DOI
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resource_doi")]
		public string Resource_doi { get; set; }
		
		/// <summary>
		/// Article resource title
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resource_title")]
		public string Resource_title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Author
	{
		
		/// <summary>
		/// Author full name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="full_name")]
		public string Full_name { get; set; }
		
		/// <summary>
		/// Author id
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public long Id { get; set; }
		
		/// <summary>
		/// True if author has published items
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="is_active")]
		public bool Is_active { get; set; }
		
		/// <summary>
		/// Author Orcid
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="orcid_id")]
		public string Orcid_id { get; set; }
		
		/// <summary>
		/// Author url name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="url_name")]
		public string Url_name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomArticleField
	{
		
		/// <summary>
		/// True if field completion is mandatory
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="is_mandatory")]
		public System.Nullable<System.Boolean> Is_mandatory { get; set; }
		
		/// <summary>
		/// Custom  metadata name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Custom metadata value
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GroupEmbargoOptions
	{
		
		/// <summary>
		/// Embargo option id
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public long Id { get; set; }
		
		/// <summary>
		/// IP range name; value appears if type is ip_range
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ip_name")]
		public string Ip_name { get; set; }
		
		/// <summary>
		/// Embargo permission type
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public GroupEmbargoOptionsType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum GroupEmbargoOptionsType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="logged_in")]
		logged_in = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ip_range")]
		ip_range = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="administrator")]
		administrator = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PublicFile
	{
		
		/// <summary>
		/// File computed md5
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="computed_md5")]
		public string Computed_md5 { get; set; }
		
		/// <summary>
		/// Url for file download
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="download_url")]
		public string Download_url { get; set; }
		
		/// <summary>
		/// File id
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public long Id { get; set; }
		
		/// <summary>
		/// True if file is hosted somewhere else
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="is_link_only")]
		public bool Is_link_only { get; set; }
		
		/// <summary>
		/// File name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// File size
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="size")]
		public long Size { get; set; }
		
		/// <summary>
		/// File supplied md5
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="supplied_md5")]
		public string Supplied_md5 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ArticleCompletePrivate
	{
		
		/// <summary>
		/// ID of the account owning the article
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="account_id")]
		public long Account_id { get; set; }
		
		/// <summary>
		/// Group resource id
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="group_resource_id")]
		public string Group_resource_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ArticleConfidentiality
	{
		
		/// <summary>
		/// True if article is confidential
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="is_confidential")]
		public bool Is_confidential { get; set; }
		
		/// <summary>
		/// Reason for confidentiality
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ArticleCreate
	{
		
		/// <summary>
		/// List of authors to be associated with the article. The list can contain the following fields: id, name, first_name, last_name, email, orcid_id. If an id is supplied, it will take priority and everything else will be ignored. No more than 10 authors. For adding more authors use the specific authors endpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authors")]
		public string[] Authors { get; set; }
		
		/// <summary>
		/// List of category ids to be associated with the article(e.g [1, 23, 33, 66])
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="categories")]
		public int[] Categories { get; set; }
		
		/// <summary>
		/// List of category source ids to be associated with the article, supersedes the categories property
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="categories_by_source_id")]
		public string[] Categories_by_source_id { get; set; }
		
		/// <summary>
		/// List of key, values pairs to be associated with the article
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="custom_fields")]
		public string Custom_fields { get; set; }
		
		/// <summary>
		/// List of custom fields values, supersedes custom_fields parameter
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="custom_fields_list")]
		public CustomArticleFieldAdd[] Custom_fields_list { get; set; }
		
		/// <summary>
		/// <b>One of:</b> <code>figure</code> <code>online resource</code> <code>preprint</code> <code>book</code> <code>conference contribution</code> <code>media</code> <code>dataset</code> <code>poster</code> <code>journal contribution</code> <code>presentation</code> <code>thesis</code> <code>software</code>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defined_type")]
		public string Defined_type { get; set; }
		
		/// <summary>
		/// The article description. In a publisher case, usually this is the remote article description
		/// Max length: 10000
		/// </summary>
		[System.ComponentModel.DefaultValue("")]
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MaxLength(10000)]
		public string Description { get; set; } = "";
		
		/// <summary>
		/// Not applicable for regular users. In an institutional case, make sure your group supports setting DOIs. This setting is applied by figshare via opening a ticket through our support/helpdesk system.
		/// </summary>
		[System.ComponentModel.DefaultValue("")]
		[System.Runtime.Serialization.DataMember(Name="doi")]
		public string Doi { get; set; } = "";
		
		/// <summary>
		/// Grant number or funding authority
		/// </summary>
		[System.ComponentModel.DefaultValue("")]
		[System.Runtime.Serialization.DataMember(Name="funding")]
		public string Funding { get; set; } = "";
		
		/// <summary>
		/// Funding creation / update items
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="funding_list")]
		public FundingCreate[] Funding_list { get; set; }
		
		/// <summary>
		/// Not applicable to regular users. This field is reserved to institutions/publishers with access to assign to specific groups
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="group_id")]
		public System.Nullable<System.Int64> Group_id { get; set; }
		
		/// <summary>
		/// Not applicable for regular users. In an institutional case, make sure your group supports setting Handles. This setting is applied by figshare via opening a ticket through our support/helpdesk system.
		/// </summary>
		[System.ComponentModel.DefaultValue("")]
		[System.Runtime.Serialization.DataMember(Name="handle")]
		public string Handle { get; set; } = "";
		
		/// <summary>
		/// True if article has no files
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="is_metadata_record")]
		public System.Nullable<System.Boolean> Is_metadata_record { get; set; }
		
		/// <summary>
		/// List of tags to be associated with the article. Tags can be used instead
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keywords")]
		public string[] Keywords { get; set; }
		
		/// <summary>
		/// License id for this article.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="license")]
		public System.Nullable<System.Int64> License { get; set; }
		
		/// <summary>
		/// Article metadata reason
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata_reason")]
		public string Metadata_reason { get; set; }
		
		/// <summary>
		/// List of links to be associated with the article (e.g ["http://link1", "http://link2", "http://link3"])
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="references")]
		public string[] References { get; set; }
		
		/// <summary>
		/// Not applicable to regular users. In a publisher case, this is the publisher article DOI.
		/// </summary>
		[System.ComponentModel.DefaultValue("")]
		[System.Runtime.Serialization.DataMember(Name="resource_doi")]
		public string Resource_doi { get; set; } = "";
		
		/// <summary>
		/// Not applicable to regular users. In a publisher case, this is the publisher article title.
		/// </summary>
		[System.ComponentModel.DefaultValue("")]
		[System.Runtime.Serialization.DataMember(Name="resource_title")]
		public string Resource_title { get; set; } = "";
		
		/// <summary>
		/// List of tags to be associated with the article. Keywords can be used instead
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public string[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timeline")]
		public TimelineUpdate Timeline { get; set; }
		
		/// <summary>
		/// Title of article
		/// Required
		/// Min length: 3
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="title")]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomArticleFieldAdd
	{
		
		/// <summary>
		/// Custom  metadata name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Custom metadata value
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public object Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FundingCreate
	{
		
		/// <summary>
		/// A funding ID as returned by the Funding Search endpoint
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		/// <summary>
		/// The title of the new user created funding
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TimelineUpdate
	{
		
		/// <summary>
		/// Online posted date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firstOnline")]
		public string FirstOnline { get; set; }
		
		/// <summary>
		/// Date when the item was accepted for publication
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publisherAcceptance")]
		public string PublisherAcceptance { get; set; }
		
		/// <summary>
		/// Publish date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publisherPublication")]
		public string PublisherPublication { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ArticleDOI
	{
		
		/// <summary>
		/// Reserved DOI
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="doi")]
		public string Doi { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ArticleEmbargo
	{
		
		/// <summary>
		/// Date when embargo lifts
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="embargo_date")]
		public string Embargo_date { get; set; }
		
		/// <summary>
		/// List of embargo permissions that are associated with the article. If the type is logged_in and the group_ids list is empty, then the whole institution can see the article; if there are multiple group_ids, then only users that are under those groups can see the article.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="embargo_options")]
		public string[] Embargo_options { get; set; }
		
		/// <summary>
		/// Reason for embargo
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="embargo_reason")]
		public string Embargo_reason { get; set; }
		
		/// <summary>
		/// Title for embargo
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="embargo_title")]
		public string Embargo_title { get; set; }
		
		/// <summary>
		/// Embargo type
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="embargo_type")]
		public string Embargo_type { get; set; }
		
		/// <summary>
		/// True if embargoed
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="is_embargoed")]
		public bool Is_embargoed { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ArticleEmbargoUpdater
	{
		
		/// <summary>
		/// Date when the embargo expires and the article gets published, '0' value will set up permanent embargo
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="embargo_date")]
		public string Embargo_date { get; set; }
		
		/// <summary>
		/// List of embargo permissions to be associated with the article. The list must contain `id` and can also contain `group_ids`(a field that only applies to 'logged_in' permissions). The new list replaces old options in the database, and an empty list removes all permissions for this article. Administration permission has to be set up alone but logged in and IP range permissions can be set up together.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="embargo_options")]
		public string[] Embargo_options { get; set; }
		
		/// <summary>
		/// Reason for setting embargo
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="embargo_reason")]
		public string Embargo_reason { get; set; }
		
		/// <summary>
		/// Title for embargo
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="embargo_title")]
		public string Embargo_title { get; set; }
		
		/// <summary>
		/// Embargo can be enabled at the article or the file level. Possible values: article, file
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="embargo_type")]
		public ArticleEmbargoUpdaterEmbargo_type Embargo_type { get; set; }
		
		/// <summary>
		/// Embargo status
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="is_embargoed")]
		public bool Is_embargoed { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ArticleEmbargoUpdaterEmbargo_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="article")]
		article = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="file")]
		file = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ArticleHandle
	{
		
		/// <summary>
		/// Reserved Handle
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="handle")]
		public string Handle { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ArticleProjectCreate
	{
		
		/// <summary>
		/// List of authors to be associated with the article. The list can contain the following fields: id, name, first_name, last_name, email, orcid_id. If an id is supplied, it will take priority and everything else will be ignored. No more than 10 authors. For adding more authors use the specific authors endpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authors")]
		public string[] Authors { get; set; }
		
		/// <summary>
		/// List of category ids to be associated with the article(e.g [1, 23, 33, 66])
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="categories")]
		public int[] Categories { get; set; }
		
		/// <summary>
		/// List of category source ids to be associated with the article, supersedes the categories property
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="categories_by_source_id")]
		public string[] Categories_by_source_id { get; set; }
		
		/// <summary>
		/// List of key, values pairs to be associated with the article
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="custom_fields")]
		public string Custom_fields { get; set; }
		
		/// <summary>
		/// List of custom fields values, supersedes custom_fields parameter
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="custom_fields_list")]
		public CustomArticleFieldAdd[] Custom_fields_list { get; set; }
		
		/// <summary>
		/// <b>One of:</b> <code>figure</code> <code>online resource</code> <code>preprint</code> <code>book</code> <code>conference contribution</code> <code>media</code> <code>dataset</code> <code>poster</code> <code>journal contribution</code> <code>presentation</code> <code>thesis</code> <code>software</code>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defined_type")]
		public string Defined_type { get; set; }
		
		/// <summary>
		/// The article description. In a publisher case, usually this is the remote article description
		/// Max length: 10000
		/// </summary>
		[System.ComponentModel.DefaultValue("")]
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MaxLength(10000)]
		public string Description { get; set; } = "";
		
		/// <summary>
		/// Not applicable for regular users. In an institutional case, make sure your group supports setting DOIs. This setting is applied by figshare via opening a ticket through our support/helpdesk system.
		/// </summary>
		[System.ComponentModel.DefaultValue("")]
		[System.Runtime.Serialization.DataMember(Name="doi")]
		public string Doi { get; set; } = "";
		
		/// <summary>
		/// Grant number or funding authority
		/// </summary>
		[System.ComponentModel.DefaultValue("")]
		[System.Runtime.Serialization.DataMember(Name="funding")]
		public string Funding { get; set; } = "";
		
		/// <summary>
		/// Funding creation / update items
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="funding_list")]
		public FundingCreate[] Funding_list { get; set; }
		
		/// <summary>
		/// Not applicable for regular users. In an institutional case, make sure your group supports setting Handles. This setting is applied by figshare via opening a ticket through our support/helpdesk system.
		/// </summary>
		[System.ComponentModel.DefaultValue("")]
		[System.Runtime.Serialization.DataMember(Name="handle")]
		public string Handle { get; set; } = "";
		
		/// <summary>
		/// List of tags to be associated with the article. Tags can be used instead
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keywords")]
		public string[] Keywords { get; set; }
		
		/// <summary>
		/// License id for this article.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="license")]
		public System.Nullable<System.Int64> License { get; set; }
		
		/// <summary>
		/// List of links to be associated with the article (e.g ["http://link1", "http://link2", "http://link3"])
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="references")]
		public string[] References { get; set; }
		
		/// <summary>
		/// Not applicable to regular users. In a publisher case, this is the publisher article DOI.
		/// </summary>
		[System.ComponentModel.DefaultValue("")]
		[System.Runtime.Serialization.DataMember(Name="resource_doi")]
		public string Resource_doi { get; set; } = "";
		
		/// <summary>
		/// Not applicable to regular users. In a publisher case, this is the publisher article title.
		/// </summary>
		[System.ComponentModel.DefaultValue("")]
		[System.Runtime.Serialization.DataMember(Name="resource_title")]
		public string Resource_title { get; set; } = "";
		
		/// <summary>
		/// List of tags to be associated with the article. Keywords can be used instead
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public string[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timeline")]
		public TimelineUpdate Timeline { get; set; }
		
		/// <summary>
		/// Title of article
		/// Required
		/// Min length: 3
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="title")]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ArticleSearch
	{
		
		/// <summary>
		/// Only return articles with this doi
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="doi")]
		public string Doi { get; set; }
		
		/// <summary>
		/// Only return articles with this handle
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="handle")]
		public string Handle { get; set; }
		
		/// <summary>
		/// Only return articles with the respective type. Mapping for item_type is: 1 - Figure, 2 - Media, 3 - Dataset, 5 - Poster, 6 - Journal contribution, 7 - Presentation, 8 - Thesis, 9 - Software, 11 - Online resource, 12 - Preprint, 13 - Book, 14 - Conference contribution, 15 - Chapter, 16 - Peer review, 17 - Educational resource, 18 - Report, 19 - Standard, 20 - Composition, 21 - Funding, 22 - Physical object, 23 - Data management plan, 24 - Workflow, 25 - Monograph, 26 - Performance, 27 - Event, 28 - Service, 29 - Model
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="item_type")]
		public System.Nullable<System.Int64> Item_type { get; set; }
		
		/// <summary>
		/// The field by which to order
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order")]
		public System.Nullable<ArticleSearchOrder> Order { get; set; }
		
		/// <summary>
		/// Only return articles in this project
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="project_id")]
		public System.Nullable<System.Int64> Project_id { get; set; }
		
		/// <summary>
		/// Only return articles with this resource_doi
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resource_doi")]
		public string Resource_doi { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ArticleSearchOrder
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="published_date")]
		published_date = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="modified_date")]
		modified_date = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="views")]
		views = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="shares")]
		shares = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="downloads")]
		downloads = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cites")]
		cites = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ArticleUpdate
	{
		
		/// <summary>
		/// List of authors to be associated with the article. The list can contain the following fields: id, name, first_name, last_name, email, orcid_id. If an id is supplied, it will take priority and everything else will be ignored. No more than 10 authors. For adding more authors use the specific authors endpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authors")]
		public string[] Authors { get; set; }
		
		/// <summary>
		/// List of category ids to be associated with the article(e.g [1, 23, 33, 66])
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="categories")]
		public int[] Categories { get; set; }
		
		/// <summary>
		/// List of category source ids to be associated with the article, supersedes the categories property
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="categories_by_source_id")]
		public string[] Categories_by_source_id { get; set; }
		
		/// <summary>
		/// List of key, values pairs to be associated with the article
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="custom_fields")]
		public string Custom_fields { get; set; }
		
		/// <summary>
		/// List of custom fields values, supersedes custom_fields parameter
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="custom_fields_list")]
		public CustomArticleFieldAdd[] Custom_fields_list { get; set; }
		
		/// <summary>
		/// <b>One of:</b> <code>figure</code> <code>online resource</code> <code>preprint</code> <code>book</code> <code>conference contribution</code> <code>media</code> <code>dataset</code> <code>poster</code> <code>journal contribution</code> <code>presentation</code> <code>thesis</code> <code>software</code>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defined_type")]
		public string Defined_type { get; set; }
		
		/// <summary>
		/// The article description. In a publisher case, usually this is the remote article description
		/// Max length: 10000
		/// </summary>
		[System.ComponentModel.DefaultValue("")]
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MaxLength(10000)]
		public string Description { get; set; } = "";
		
		/// <summary>
		/// Not applicable for regular users. In an institutional case, make sure your group supports setting DOIs. This setting is applied by figshare via opening a ticket through our support/helpdesk system.
		/// </summary>
		[System.ComponentModel.DefaultValue("")]
		[System.Runtime.Serialization.DataMember(Name="doi")]
		public string Doi { get; set; } = "";
		
		/// <summary>
		/// Grant number or funding authority
		/// </summary>
		[System.ComponentModel.DefaultValue("")]
		[System.Runtime.Serialization.DataMember(Name="funding")]
		public string Funding { get; set; } = "";
		
		/// <summary>
		/// Funding creation / update items
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="funding_list")]
		public FundingCreate[] Funding_list { get; set; }
		
		/// <summary>
		/// Not applicable to regular users. This field is reserved to institutions/publishers with access to assign to specific groups
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="group_id")]
		public System.Nullable<System.Int64> Group_id { get; set; }
		
		/// <summary>
		/// Not applicable for regular users. In an institutional case, make sure your group supports setting Handles. This setting is applied by figshare via opening a ticket through our support/helpdesk system.
		/// </summary>
		[System.ComponentModel.DefaultValue("")]
		[System.Runtime.Serialization.DataMember(Name="handle")]
		public string Handle { get; set; } = "";
		
		/// <summary>
		/// True if article has no files
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="is_metadata_record")]
		public System.Nullable<System.Boolean> Is_metadata_record { get; set; }
		
		/// <summary>
		/// List of tags to be associated with the article. Tags can be used instead
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keywords")]
		public string[] Keywords { get; set; }
		
		/// <summary>
		/// License id for this article.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="license")]
		public System.Nullable<System.Int64> License { get; set; }
		
		/// <summary>
		/// Article metadata reason
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata_reason")]
		public string Metadata_reason { get; set; }
		
		/// <summary>
		/// List of links to be associated with the article (e.g ["http://link1", "http://link2", "http://link3"])
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="references")]
		public string[] References { get; set; }
		
		/// <summary>
		/// Not applicable to regular users. In a publisher case, this is the publisher article DOI.
		/// </summary>
		[System.ComponentModel.DefaultValue("")]
		[System.Runtime.Serialization.DataMember(Name="resource_doi")]
		public string Resource_doi { get; set; } = "";
		
		/// <summary>
		/// Not applicable to regular users. In a publisher case, this is the publisher article title.
		/// </summary>
		[System.ComponentModel.DefaultValue("")]
		[System.Runtime.Serialization.DataMember(Name="resource_title")]
		public string Resource_title { get; set; } = "";
		
		/// <summary>
		/// List of tags to be associated with the article. Keywords can be used instead
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public string[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timeline")]
		public TimelineUpdate Timeline { get; set; }
		
		/// <summary>
		/// Title of article
		/// Min length: 3
		/// Max length: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ArticleVersions
	{
		
		/// <summary>
		/// Api endpoint for the item version
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		/// <summary>
		/// Version number
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="version")]
		public long Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ArticleWithProject
	{
		
		/// <summary>
		/// Project id for this article.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="project_id")]
		public long Project_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ArticlesCreator
	{
		
		/// <summary>
		/// List of article ids
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="articles")]
		public int[] Articles { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AuthorComplete
	{
		
		/// <summary>
		/// First Name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="first_name")]
		public string First_name { get; set; }
		
		/// <summary>
		/// Group id
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="group_id")]
		public long Group_id { get; set; }
		
		/// <summary>
		/// Institution id
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="institution_id")]
		public long Institution_id { get; set; }
		
		/// <summary>
		/// if 1 then the author has published items
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="is_public")]
		public long Is_public { get; set; }
		
		/// <summary>
		/// Job title
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="job_title")]
		public string Job_title { get; set; }
		
		/// <summary>
		/// Last Name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="last_name")]
		public string Last_name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AuthorsCreator
	{
		
		/// <summary>
		/// List of authors to be associated with the article. The list can contain the following fields: id, name, first_name, last_name, email, orcid_id. If an id is supplied, it will take priority and everything else will be ignored. No more than 10 authors. For adding more authors use the specific authors endpoint.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="authors")]
		public string[] Authors { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CategoriesCreator
	{
		
		/// <summary>
		/// List of category ids
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="categories")]
		public int[] Categories { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Category
	{
		
		/// <summary>
		/// Category id
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public long Id { get; set; }
		
		/// <summary>
		/// Parent category
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="parent_id")]
		public long Parent_id { get; set; }
		
		/// <summary>
		/// Path to all ancestor ids
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="path")]
		public string Path { get; set; }
		
		/// <summary>
		/// ID in original standard taxonomy
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="source_id")]
		public string Source_id { get; set; }
		
		/// <summary>
		/// Internal id of taxonomy the category is part of
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="taxonomy_id")]
		public long Taxonomy_id { get; set; }
		
		/// <summary>
		/// Category title
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Collaborator
	{
		
		/// <summary>
		/// Collaborator name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Collaborator role
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="role_name")]
		public string Role_name { get; set; }
		
		/// <summary>
		/// Collaborator id
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="user_id")]
		public int User_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Collection
	{
		
		/// <summary>
		/// Collection DOI
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="doi")]
		public string Doi { get; set; }
		
		/// <summary>
		/// Collection Handle
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="handle")]
		public string Handle { get; set; }
		
		/// <summary>
		/// Collection id
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public long Id { get; set; }
		
		/// <summary>
		/// Date when collection was published 
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="published_date")]
		public string Published_date { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="timeline")]
		public Timeline Timeline { get; set; }
		
		/// <summary>
		/// Collection title
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// Api endpoint
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CollectionComplete
	{
		
		/// <summary>
		/// Number of articles in collection
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="articles_count")]
		public long Articles_count { get; set; }
		
		/// <summary>
		/// List of collection authors
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="authors")]
		public Author[] Authors { get; set; }
		
		/// <summary>
		/// List of collection categories
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="categories")]
		public Category[] Categories { get; set; }
		
		/// <summary>
		/// Collection citation
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="citation")]
		public string Citation { get; set; }
		
		/// <summary>
		/// Date when collection was created
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="created_date")]
		public string Created_date { get; set; }
		
		/// <summary>
		/// Collection custom fields
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="custom_fields")]
		public CustomArticleField[] Custom_fields { get; set; }
		
		/// <summary>
		/// Collection description
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Full Collection funding information
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="funding")]
		public FundingInformation[] Funding { get; set; }
		
		/// <summary>
		/// Collection group
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="group_id")]
		public long Group_id { get; set; }
		
		/// <summary>
		/// Collection group resource id
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="group_resource_id")]
		public string Group_resource_id { get; set; }
		
		/// <summary>
		/// Collection institution
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="institution_id")]
		public long Institution_id { get; set; }
		
		/// <summary>
		/// Date when collection was last modified
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="modified_date")]
		public string Modified_date { get; set; }
		
		/// <summary>
		/// True if collection is published
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="public")]
		public bool Public { get; set; }
		
		/// <summary>
		/// List of collection references
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="references")]
		public string[] References { get; set; }
		
		/// <summary>
		/// Collection resource doi
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resource_doi")]
		public string Resource_doi { get; set; }
		
		/// <summary>
		/// Collection resource id
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resource_id")]
		public string Resource_id { get; set; }
		
		/// <summary>
		/// Collection resource link
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resource_link")]
		public string Resource_link { get; set; }
		
		/// <summary>
		/// Collection resource title
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resource_title")]
		public string Resource_title { get; set; }
		
		/// <summary>
		/// Collection resource version
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resource_version")]
		public long Resource_version { get; set; }
		
		/// <summary>
		/// List of collection tags
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public string[] Tags { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="timeline")]
		public Timeline Timeline { get; set; }
		
		/// <summary>
		/// Collection version
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="version")]
		public long Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FundingInformation
	{
		
		/// <summary>
		/// Funder's name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="funder_name")]
		public string Funder_name { get; set; }
		
		/// <summary>
		/// The grant code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="grant_code")]
		public string Grant_code { get; set; }
		
		/// <summary>
		/// Funding id
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public long Id { get; set; }
		
		/// <summary>
		/// Return whether the grant has been introduced manually
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="is_user_defined")]
		public bool Is_user_defined { get; set; }
		
		/// <summary>
		/// The funding name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// The grant url
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CollectionCompletePrivate
	{
		
		/// <summary>
		/// ID of the account owning the collection
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="account_id")]
		public long Account_id { get; set; }
		
		/// <summary>
		/// Number of articles in collection
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="articles_count")]
		public long Articles_count { get; set; }
		
		/// <summary>
		/// List of collection authors
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="authors")]
		public Author[] Authors { get; set; }
		
		/// <summary>
		/// List of collection categories
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="categories")]
		public Category[] Categories { get; set; }
		
		/// <summary>
		/// Collection citation
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="citation")]
		public string Citation { get; set; }
		
		/// <summary>
		/// Date when collection was created
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="created_date")]
		public string Created_date { get; set; }
		
		/// <summary>
		/// Collection custom fields
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="custom_fields")]
		public CustomArticleField[] Custom_fields { get; set; }
		
		/// <summary>
		/// Collection description
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Full Collection funding information
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="funding")]
		public FundingInformation[] Funding { get; set; }
		
		/// <summary>
		/// Collection group
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="group_id")]
		public long Group_id { get; set; }
		
		/// <summary>
		/// Collection group resource id
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="group_resource_id")]
		public string Group_resource_id { get; set; }
		
		/// <summary>
		/// Collection institution
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="institution_id")]
		public long Institution_id { get; set; }
		
		/// <summary>
		/// Date when collection was last modified
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="modified_date")]
		public string Modified_date { get; set; }
		
		/// <summary>
		/// True if collection is published
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="public")]
		public bool Public { get; set; }
		
		/// <summary>
		/// List of collection references
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="references")]
		public string[] References { get; set; }
		
		/// <summary>
		/// Collection resource doi
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resource_doi")]
		public string Resource_doi { get; set; }
		
		/// <summary>
		/// Collection resource id
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resource_id")]
		public string Resource_id { get; set; }
		
		/// <summary>
		/// Collection resource link
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resource_link")]
		public string Resource_link { get; set; }
		
		/// <summary>
		/// Collection resource title
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resource_title")]
		public string Resource_title { get; set; }
		
		/// <summary>
		/// Collection resource version
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resource_version")]
		public long Resource_version { get; set; }
		
		/// <summary>
		/// List of collection tags
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public string[] Tags { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="timeline")]
		public Timeline Timeline { get; set; }
		
		/// <summary>
		/// Collection version
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="version")]
		public long Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CollectionCreate
	{
		
		/// <summary>
		/// List of articles to be associated with the collection
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="articles")]
		public int[] Articles { get; set; }
		
		/// <summary>
		/// List of authors to be associated with the collection. The list can contain the following fields: id, name, first_name, last_name, email, orcid_id. If an id is supplied, it will take priority and everything else will be ignored. No more than 10 authors. For adding more authors use the specific authors endpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authors")]
		public string[] Authors { get; set; }
		
		/// <summary>
		/// List of category ids to be associated with the collection(e.g [1, 23, 33, 66])
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="categories")]
		public int[] Categories { get; set; }
		
		/// <summary>
		/// List of category source ids to be associated with the collection, supersedes the categories property
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="categories_by_source_id")]
		public string[] Categories_by_source_id { get; set; }
		
		/// <summary>
		/// List of key, values pairs to be associated with the collection
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="custom_fields")]
		public string Custom_fields { get; set; }
		
		/// <summary>
		/// List of custom fields values, supersedes custom_fields parameter
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="custom_fields_list")]
		public CustomArticleFieldAdd[] Custom_fields_list { get; set; }
		
		/// <summary>
		/// The collection description. In a publisher case, usually this is the remote collection description
		/// Max length: 10000
		/// </summary>
		[System.ComponentModel.DefaultValue("")]
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MaxLength(10000)]
		public string Description { get; set; } = "";
		
		/// <summary>
		/// Not applicable for regular users. In an institutional case, make sure your group supports setting DOIs. This setting is applied by figshare via opening a ticket through our support/helpdesk system.
		/// </summary>
		[System.ComponentModel.DefaultValue("")]
		[System.Runtime.Serialization.DataMember(Name="doi")]
		public string Doi { get; set; } = "";
		
		/// <summary>
		/// Grant number or funding authority
		/// </summary>
		[System.ComponentModel.DefaultValue("")]
		[System.Runtime.Serialization.DataMember(Name="funding")]
		public string Funding { get; set; } = "";
		
		/// <summary>
		/// Funding creation / update items
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="funding_list")]
		public FundingCreate[] Funding_list { get; set; }
		
		/// <summary>
		/// Not applicable to regular users. This field is reserved to institutions/publishers with access to assign to specific groups
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="group_id")]
		public System.Nullable<System.Int64> Group_id { get; set; }
		
		/// <summary>
		/// Not applicable for regular users. In an institutional case, make sure your group supports setting Handles. This setting is applied by figshare via opening a ticket through our support/helpdesk system.
		/// </summary>
		[System.ComponentModel.DefaultValue("")]
		[System.Runtime.Serialization.DataMember(Name="handle")]
		public string Handle { get; set; } = "";
		
		/// <summary>
		/// List of tags to be associated with the collection. Tags can be used instead
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keywords")]
		public string[] Keywords { get; set; }
		
		/// <summary>
		/// List of links to be associated with the collection (e.g ["http://link1", "http://link2", "http://link3"])
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="references")]
		public string[] References { get; set; }
		
		/// <summary>
		/// Not applicable to regular users. In a publisher case, this is the publisher article DOI.
		/// </summary>
		[System.ComponentModel.DefaultValue("")]
		[System.Runtime.Serialization.DataMember(Name="resource_doi")]
		public string Resource_doi { get; set; } = "";
		
		/// <summary>
		/// Not applicable to regular users. In a publisher case, this is the publisher article id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resource_id")]
		public string Resource_id { get; set; }
		
		/// <summary>
		/// Not applicable to regular users. In a publisher case, this is the publisher article link
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resource_link")]
		public string Resource_link { get; set; }
		
		/// <summary>
		/// Not applicable to regular users. In a publisher case, this is the publisher article title.
		/// </summary>
		[System.ComponentModel.DefaultValue("")]
		[System.Runtime.Serialization.DataMember(Name="resource_title")]
		public string Resource_title { get; set; } = "";
		
		/// <summary>
		/// Not applicable to regular users. In a publisher case, this is the publisher article version
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resource_version")]
		public System.Nullable<System.Int32> Resource_version { get; set; }
		
		/// <summary>
		/// List of tags to be associated with the collection. Keywords can be used instead
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public string[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timeline")]
		public TimelineUpdate Timeline { get; set; }
		
		/// <summary>
		/// Title of collection
		/// Required
		/// Min length: 3
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="title")]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CollectionDOI
	{
		
		/// <summary>
		/// Reserved DOI
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="doi")]
		public string Doi { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CollectionHandle
	{
		
		/// <summary>
		/// Reserved Handle
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="handle")]
		public string Handle { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CollectionPrivateLinkCreator
	{
		
		/// <summary>
		/// Date when this private link should expire - optional. By default private links expire in 365 days.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expires_date")]
		public string Expires_date { get; set; }
		
		/// <summary>
		/// Optional, default true. Set to false to give private link users editing rights for this collection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="read_only")]
		public System.Nullable<System.Boolean> Read_only { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CollectionSearch
	{
		
		/// <summary>
		/// Only return collections with this doi
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="doi")]
		public string Doi { get; set; }
		
		/// <summary>
		/// Only return collections with this handle
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="handle")]
		public string Handle { get; set; }
		
		/// <summary>
		/// The field by which to order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order")]
		public System.Nullable<CollectionSearchOrder> Order { get; set; }
		
		/// <summary>
		/// Only return collections with this resource_doi
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resource_doi")]
		public string Resource_doi { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CollectionSearchOrder
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="published_date")]
		published_date = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="modified_date")]
		modified_date = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="views")]
		views = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="shares")]
		shares = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cites")]
		cites = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CollectionUpdate
	{
		
		/// <summary>
		/// List of articles to be associated with the collection
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="articles")]
		public int[] Articles { get; set; }
		
		/// <summary>
		/// List of authors to be associated with the collection. The list can contain the following fields: id, name, first_name, last_name, email, orcid_id. If an id is supplied, it will take priority and everything else will be ignored. No more than 10 authors. For adding more authors use the specific authors endpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authors")]
		public string[] Authors { get; set; }
		
		/// <summary>
		/// List of category ids to be associated with the collection (e.g [1, 23, 33, 66])
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="categories")]
		public int[] Categories { get; set; }
		
		/// <summary>
		/// List of category source ids to be associated with the article, supersedes the categories property
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="categories_by_source_id")]
		public string[] Categories_by_source_id { get; set; }
		
		/// <summary>
		/// List of key, values pairs to be associated with the collection
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="custom_fields")]
		public string Custom_fields { get; set; }
		
		/// <summary>
		/// List of custom fields values, supersedes custom_fields parameter
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="custom_fields_list")]
		public CustomArticleFieldAdd[] Custom_fields_list { get; set; }
		
		/// <summary>
		/// The collection description. In a publisher case, usually this is the remote collection description
		/// Max length: 10000
		/// </summary>
		[System.ComponentModel.DefaultValue("")]
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MaxLength(10000)]
		public string Description { get; set; } = "";
		
		/// <summary>
		/// Not applicable for regular users. In an institutional case, make sure your group supports setting DOIs. This setting is applied by figshare via opening a ticket through our support/helpdesk system.
		/// </summary>
		[System.ComponentModel.DefaultValue("")]
		[System.Runtime.Serialization.DataMember(Name="doi")]
		public string Doi { get; set; } = "";
		
		/// <summary>
		/// Grant number or funding authority
		/// </summary>
		[System.ComponentModel.DefaultValue("")]
		[System.Runtime.Serialization.DataMember(Name="funding")]
		public string Funding { get; set; } = "";
		
		/// <summary>
		/// Funding creation / update items
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="funding_list")]
		public FundingCreate[] Funding_list { get; set; }
		
		/// <summary>
		/// Not applicable to regular users. This field is reserved to institutions/publishers with access to assign to specific groups
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="group_id")]
		public System.Nullable<System.Int64> Group_id { get; set; }
		
		/// <summary>
		/// Not applicable for regular users. In an institutional case, make sure your group supports setting Handles. This setting is applied by figshare via opening a ticket through our support/helpdesk system.
		/// </summary>
		[System.ComponentModel.DefaultValue("")]
		[System.Runtime.Serialization.DataMember(Name="handle")]
		public string Handle { get; set; } = "";
		
		/// <summary>
		/// List of tags to be associated with the collection. Tags can be used instead
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keywords")]
		public string[] Keywords { get; set; }
		
		/// <summary>
		/// List of links to be associated with the collection (e.g ["http://link1", "http://link2", "http://link3"])
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="references")]
		public string[] References { get; set; }
		
		/// <summary>
		/// Not applicable to regular users. In a publisher case, this is the publisher article DOI.
		/// </summary>
		[System.ComponentModel.DefaultValue("")]
		[System.Runtime.Serialization.DataMember(Name="resource_doi")]
		public string Resource_doi { get; set; } = "";
		
		/// <summary>
		/// Not applicable to regular users. In a publisher case, this is the publisher article id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resource_id")]
		public string Resource_id { get; set; }
		
		/// <summary>
		/// Not applicable to regular users. In a publisher case, this is the publisher article link
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resource_link")]
		public string Resource_link { get; set; }
		
		/// <summary>
		/// Not applicable to regular users. In a publisher case, this is the publisher article title.
		/// </summary>
		[System.ComponentModel.DefaultValue("")]
		[System.Runtime.Serialization.DataMember(Name="resource_title")]
		public string Resource_title { get; set; } = "";
		
		/// <summary>
		/// Not applicable to regular users. In a publisher case, this is the publisher article version
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resource_version")]
		public System.Nullable<System.Int32> Resource_version { get; set; }
		
		/// <summary>
		/// List of tags to be associated with the collection. Keywords can be used instead
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public string[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timeline")]
		public TimelineUpdate Timeline { get; set; }
		
		/// <summary>
		/// Title of collection
		/// Min length: 3
		/// Max length: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CollectionVersions
	{
		
		/// <summary>
		/// Version number
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public long Id { get; set; }
		
		/// <summary>
		/// Api endpoint for the collection version
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CommonSearch
	{
		
		/// <summary>
		/// only return collections from this group
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="group")]
		public System.Nullable<System.Int32> Group { get; set; }
		
		/// <summary>
		/// only return collections from this institution
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="institution")]
		public System.Nullable<System.Int32> Institution { get; set; }
		
		/// <summary>
		/// Number of results included on a page. Used for pagination with query
		/// Minimum: 1
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limit")]
		[System.ComponentModel.DataAnnotations.Range(1, 1000)]
		public System.Nullable<System.Int64> Limit { get; set; }
		
		/// <summary>
		/// Filter by article modified date. Will only return articles published after the date. date(ISO 8601) YYYY-MM-DD
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modified_since")]
		public string Modified_since { get; set; }
		
		/// <summary>
		/// Where to start the listing(the offset of the first result). Used for pagination with limit
		/// Minimum: 0
		/// Maximum: 5000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offset")]
		[System.ComponentModel.DataAnnotations.Range(0, 5000)]
		public System.Nullable<System.Int64> Offset { get; set; }
		
		/// <summary>
		/// Direction of ordering
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order_direction")]
		public System.Nullable<CommonSearchOrder_direction> Order_direction { get; set; }
		
		/// <summary>
		/// Page number. Used for pagination with page_size
		/// Minimum: 1
		/// Maximum: 5000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="page")]
		[System.ComponentModel.DataAnnotations.Range(1, 5000)]
		public System.Nullable<System.Int64> Page { get; set; }
		
		/// <summary>
		/// The number of results included on a page. Used for pagination with page
		/// Minimum: 1
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="page_size")]
		[System.ComponentModel.DataAnnotations.Range(1, 1000)]
		public System.Nullable<System.Int64> Page_size { get; set; }
		
		/// <summary>
		/// Filter by article publishing date. Will only return articles published after the date. date(ISO 8601) YYYY-MM-DD
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="published_since")]
		public string Published_since { get; set; }
		
		/// <summary>
		/// Search term
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="search_for")]
		public string Search_for { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CommonSearchOrder_direction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="asc")]
		asc = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="desc")]
		desc = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConfidentialityCreator
	{
		
		/// <summary>
		/// Reason for confidentiality
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateProjectResponse
	{
		
		/// <summary>
		/// Figshare ID of the entity
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="entity_id")]
		public long Entity_id { get; set; }
		
		/// <summary>
		/// Url for entity
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Curation
	{
		
		/// <summary>
		/// The ID of the account of the owner of the article of this review.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="account_id")]
		public long Account_id { get; set; }
		
		/// <summary>
		/// The ID of the article of this review.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="article_id")]
		public long Article_id { get; set; }
		
		/// <summary>
		/// The ID of the account to which this review is assigned.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="assigned_to")]
		public long Assigned_to { get; set; }
		
		/// <summary>
		/// The number of comments in the review.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="comments_count")]
		public long Comments_count { get; set; }
		
		/// <summary>
		/// The creation date of the review.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="created_date")]
		public string Created_date { get; set; }
		
		/// <summary>
		/// The group in which the article is present.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="group_id")]
		public long Group_id { get; set; }
		
		/// <summary>
		/// The review id
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public long Id { get; set; }
		
		/// <summary>
		/// The date the review has been modified.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="modified_date")]
		public string Modified_date { get; set; }
		
		/// <summary>
		/// The last time a comment has been added to the review.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="review_date")]
		public string Review_date { get; set; }
		
		/// <summary>
		/// The status of the review.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public CurationStatus Status { get; set; }
		
		/// <summary>
		/// The Version number of the article in review.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="version")]
		public long Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CurationStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pending")]
		pending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="approved")]
		approved = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="rejected")]
		rejected = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="closed")]
		closed = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CurationComment
	{
		
		/// <summary>
		/// The ID of the account which generated this comment.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="account_id")]
		public long Account_id { get; set; }
		
		/// <summary>
		/// The ID of the comment.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public long Id { get; set; }
		
		/// <summary>
		/// The value/content of the comment.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
		
		/// <summary>
		/// The ID of the account which generated this comment.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public CurationCommentType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CurationCommentType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="comment")]
		comment = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="approved")]
		approved = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="rejected")]
		rejected = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="closed")]
		closed = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CurationCommentCreate
	{
		
		/// <summary>
		/// The contents/value of the comment
		/// Required
		/// Min length: 1
		/// Max length: 2000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="text")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2000)]
		public string Text { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CurationDetail
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="item")]
		public ArticleComplete Item { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ErrorMessage
	{
		
		/// <summary>
		/// A machine friendly error code, used by the dev team to identify the error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int64> Code { get; set; }
		
		/// <summary>
		/// A human friendly message explaining the error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FileCreator
	{
		
		/// <summary>
		/// Url for an existing file that will not be uploaded to Figshare
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="link")]
		public string Link { get; set; }
		
		/// <summary>
		/// MD5 sum pre-computed on client side.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="md5")]
		public string Md5 { get; set; }
		
		/// <summary>
		/// File name including the extension; can be omitted only for linked files.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// File size in bytes; can be omitted only for linked files.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="size")]
		public System.Nullable<System.Int64> Size { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FileId
	{
		
		/// <summary>
		/// File ID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="file_id")]
		public System.Nullable<System.Int64> File_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FundingSearch
	{
		
		/// <summary>
		/// Search term
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="search_for")]
		public string Search_for { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Group
	{
		
		/// <summary>
		/// HR code associated with group, if code exists
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="association_criteria")]
		public string Association_criteria { get; set; }
		
		/// <summary>
		/// Group id
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public long Id { get; set; }
		
		/// <summary>
		/// Group name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Parent group if any
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="parent_id")]
		public long Parent_id { get; set; }
		
		/// <summary>
		/// Group resource id
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resource_id")]
		public string Resource_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Institution
	{
		
		/// <summary>
		/// Institution domain
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="domain")]
		public string Domain { get; set; }
		
		/// <summary>
		/// Institution id
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public long Id { get; set; }
		
		/// <summary>
		/// Institution name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InstitutionAccountsSearch
	{
		
		/// <summary>
		/// filter by email
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// filter by institution_user_id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="institution_user_id")]
		public string Institution_user_id { get; set; }
		
		/// <summary>
		/// Filter by active status
		/// Minimum: 0
		/// Maximum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="is_active")]
		[System.ComponentModel.DataAnnotations.Range(0, 1)]
		public System.Nullable<System.Int64> Is_active { get; set; }
		
		/// <summary>
		/// Number of results included on a page. Used for pagination with query
		/// Minimum: 1
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limit")]
		[System.ComponentModel.DataAnnotations.Range(1, 1000)]
		public System.Nullable<System.Int64> Limit { get; set; }
		
		/// <summary>
		/// Where to start the listing(the offset of the first result). Used for pagination with limit
		/// Minimum: 0
		/// Maximum: 5000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offset")]
		[System.ComponentModel.DataAnnotations.Range(0, 5000)]
		public System.Nullable<System.Int64> Offset { get; set; }
		
		/// <summary>
		/// Page number. Used for pagination with page_size
		/// Minimum: 1
		/// Maximum: 5000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="page")]
		[System.ComponentModel.DataAnnotations.Range(1, 5000)]
		public System.Nullable<System.Int64> Page { get; set; }
		
		/// <summary>
		/// The number of results included on a page. Used for pagination with page
		/// Minimum: 1
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="page_size")]
		[System.ComponentModel.DataAnnotations.Range(1, 1000)]
		public System.Nullable<System.Int64> Page_size { get; set; }
		
		/// <summary>
		/// Search term
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="search_for")]
		public string Search_for { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ItemType
	{
		
		/// <summary>
		/// The string identifying the icon of the item type.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="icon")]
		public string Icon { get; set; }
		
		/// <summary>
		/// The ID of the item type.
		/// Required
		/// Minimum: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int64.MaxValue)]
		public long Id { get; set; }
		
		/// <summary>
		/// The selectable status
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="is_selectable")]
		public bool Is_selectable { get; set; }
		
		/// <summary>
		/// The name of the item type
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The description of the item type.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="public_description")]
		public string Public_description { get; set; }
		
		/// <summary>
		/// The string identifier of the item type.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="string_id")]
		public string String_id { get; set; }
		
		/// <summary>
		/// The URL name of the item type.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="url_name")]
		public string Url_name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class License
	{
		
		/// <summary>
		/// License name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// License url
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		/// <summary>
		/// License value
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public long Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Location
	{
		
		/// <summary>
		/// Url for item
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location1 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LocationWarnings
	{
		
		/// <summary>
		/// Figshare ID of the entity
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="entity_id")]
		public long Entity_id { get; set; }
		
		/// <summary>
		/// Url for entity
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Issues encountered during the operation
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="warnings")]
		public string[] Warnings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LocationWarningsUpdate
	{
		
		/// <summary>
		/// Url for entity
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Issues encountered during the operation
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="warnings")]
		public string[] Warnings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PrivateArticleSearch
	{
		
		/// <summary>
		/// only return collections with this resource_id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resource_id")]
		public string Resource_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PrivateAuthorsSearch
	{
		
		/// <summary>
		/// Return only authors in this group or subgroups of the group
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="group_id")]
		public System.Nullable<System.Int64> Group_id { get; set; }
		
		/// <summary>
		/// Return only authors associated to this institution
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="institution_id")]
		public System.Nullable<System.Int64> Institution_id { get; set; }
		
		/// <summary>
		/// Return only active authors if True
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="is_active")]
		public System.Nullable<System.Boolean> Is_active { get; set; }
		
		/// <summary>
		/// Return only authors that have published items if True
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="is_public")]
		public System.Nullable<System.Boolean> Is_public { get; set; }
		
		/// <summary>
		/// Number of results included on a page. Used for pagination with query
		/// Minimum: 1
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limit")]
		[System.ComponentModel.DataAnnotations.Range(1, 1000)]
		public System.Nullable<System.Int64> Limit { get; set; }
		
		/// <summary>
		/// Where to start the listing(the offset of the first result). Used for pagination with limit
		/// Minimum: 0
		/// Maximum: 5000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offset")]
		[System.ComponentModel.DataAnnotations.Range(0, 5000)]
		public System.Nullable<System.Int64> Offset { get; set; }
		
		/// <summary>
		/// Orcid of author
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orcid")]
		public string Orcid { get; set; }
		
		/// <summary>
		/// The field by which to order. Default varies by endpoint/resource.
		/// </summary>
		[System.ComponentModel.DefaultValue(ArticleSearchOrder.published_date)]
		[System.Runtime.Serialization.DataMember(Name="order")]
		public ArticleSearchOrder Order { get; set; } = ArticleSearchOrder.published_date;
		
		/// <summary>
		/// Direction of ordering
		/// </summary>
		[System.ComponentModel.DefaultValue(CommonSearchOrder_direction.desc)]
		[System.Runtime.Serialization.DataMember(Name="order_direction")]
		public CommonSearchOrder_direction Order_direction { get; set; } = CommonSearchOrder_direction.desc;
		
		/// <summary>
		/// Page number. Used for pagination with page_size
		/// Minimum: 1
		/// Maximum: 5000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="page")]
		[System.ComponentModel.DataAnnotations.Range(1, 5000)]
		public System.Nullable<System.Int64> Page { get; set; }
		
		/// <summary>
		/// The number of results included on a page. Used for pagination with page
		/// Minimum: 1
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="page_size")]
		[System.ComponentModel.DataAnnotations.Range(1, 1000)]
		public System.Nullable<System.Int64> Page_size { get; set; }
		
		/// <summary>
		/// Search term
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="search_for")]
		public string Search_for { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PrivateCollectionSearch
	{
		
		/// <summary>
		/// only return collections with this resource_id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resource_id")]
		public string Resource_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PrivateFile
	{
		
		/// <summary>
		/// True if the file is attached to a public item version
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="is_attached_to_public_version")]
		public bool Is_attached_to_public_version { get; set; }
		
		/// <summary>
		/// File preview state
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="preview_state")]
		public string Preview_state { get; set; }
		
		/// <summary>
		/// Status for file upload
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// Token for file upload
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="upload_token")]
		public string Upload_token { get; set; }
		
		/// <summary>
		/// Upload url for file
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="upload_url")]
		public string Upload_url { get; set; }
		
		/// <summary>
		/// File viewer type
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="viewer_type")]
		public string Viewer_type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PrivateLink
	{
		
		/// <summary>
		/// Date when link will expire
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="expires_date")]
		public string Expires_date { get; set; }
		
		/// <summary>
		/// HTML url for private link
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="html_location")]
		public string Html_location { get; set; }
		
		/// <summary>
		/// Private link id
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// True if private link is active
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="is_active")]
		public bool Is_active { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PrivateLinkCreator
	{
		
		/// <summary>
		/// Date when this private link should expire - optional. By default private links expire in 365 days.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expires_date")]
		public string Expires_date { get; set; }
		
		/// <summary>
		/// Optional, default true. Set to false to give private link users editing rights for this collection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="read_only")]
		public System.Nullable<System.Boolean> Read_only { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PrivateLinkResponse
	{
		
		/// <summary>
		/// HTML url for private link
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="html_location")]
		public string Html_location { get; set; }
		
		/// <summary>
		/// Url for private link
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Token for private link
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="token")]
		public string Token { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Project
	{
		
		/// <summary>
		/// Project id
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public long Id { get; set; }
		
		/// <summary>
		/// Date when project was published
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="published_date")]
		public string Published_date { get; set; }
		
		/// <summary>
		/// Project title
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// Api endpoint
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProjectArticle
	{
		
		/// <summary>
		/// List of categories selected for the article
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="categories")]
		public Category[] Categories { get; set; }
		
		/// <summary>
		/// Article citation
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="citation")]
		public string Citation { get; set; }
		
		/// <summary>
		/// Confidentiality reason
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="confidential_reason")]
		public string Confidential_reason { get; set; }
		
		/// <summary>
		/// Date when article was created
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="created_date")]
		public string Created_date { get; set; }
		
		/// <summary>
		/// Article description
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Date when embargo lifts
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="embargo_date")]
		public string Embargo_date { get; set; }
		
		/// <summary>
		/// Reason for embargo
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="embargo_reason")]
		public string Embargo_reason { get; set; }
		
		/// <summary>
		/// Title for embargo
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="embargo_title")]
		public string Embargo_title { get; set; }
		
		/// <summary>
		/// Article embargo
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="embargo_type")]
		public string Embargo_type { get; set; }
		
		/// <summary>
		/// Article funding
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="funding")]
		public string Funding { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="funding_list")]
		public int[] Funding_list { get; set; }
		
		/// <summary>
		/// True if any files are linked to the article
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="has_linked_file")]
		public bool Has_linked_file { get; set; }
		
		/// <summary>
		/// True if article is active
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="is_active")]
		public bool Is_active { get; set; }
		
		/// <summary>
		/// Article Confidentiality
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="is_confidential")]
		public bool Is_confidential { get; set; }
		
		/// <summary>
		/// True if article is embargoed
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="is_embargoed")]
		public bool Is_embargoed { get; set; }
		
		/// <summary>
		/// True if article has no files
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="is_metadata_record")]
		public bool Is_metadata_record { get; set; }
		
		/// <summary>
		/// True if article is published
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="is_public")]
		public bool Is_public { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="license")]
		public License License { get; set; }
		
		/// <summary>
		/// Article metadata reason
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="metadata_reason")]
		public string Metadata_reason { get; set; }
		
		/// <summary>
		/// Date when article was last modified
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="modified_date")]
		public string Modified_date { get; set; }
		
		/// <summary>
		/// List of references
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="references")]
		public string[] References { get; set; }
		
		/// <summary>
		/// Article size
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="size")]
		public long Size { get; set; }
		
		/// <summary>
		/// Article status
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// List of article tags
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public string[] Tags { get; set; }
		
		/// <summary>
		/// Article version
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="version")]
		public long Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProjectCollaborator
	{
		
		/// <summary>
		/// Collaborator name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Collaborator role
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="role_name")]
		public string Role_name { get; set; }
		
		/// <summary>
		/// Status of collaborator invitation
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// Collaborator id
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="user_id")]
		public int User_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProjectCollaboratorInvite
	{
		
		/// <summary>
		/// Text sent when inviting the user to the project
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="comment")]
		public string Comment { get; set; }
		
		/// <summary>
		/// Collaborator email
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// Role of the the collaborator inside the project
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="role_name")]
		public ProjectCollaboratorInviteRole_name Role_name { get; set; }
		
		/// <summary>
		/// User id of the collaborator
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="user_id")]
		public System.Nullable<System.Int64> User_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ProjectCollaboratorInviteRole_name
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="viewer")]
		viewer = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="collaborator")]
		collaborator = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProjectComplete
	{
		
		/// <summary>
		/// List of project collaborators
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="collaborators")]
		public Collaborator[] Collaborators { get; set; }
		
		/// <summary>
		/// Project description
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Project public url
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="figshare_url")]
		public string Figshare_url { get; set; }
		
		/// <summary>
		/// Project funding
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="funding")]
		public string Funding { get; set; }
		
		/// <summary>
		/// Full Project funding information
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="funding_list")]
		public FundingInformation[] Funding_list { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProjectCompletePrivate
	{
		
		/// <summary>
		/// ID of the account owning the project
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="account_id")]
		public long Account_id { get; set; }
		
		/// <summary>
		/// List of project collaborators
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="collaborators")]
		public Collaborator[] Collaborators { get; set; }
		
		/// <summary>
		/// Date when project was created
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="created_date")]
		public string Created_date { get; set; }
		
		/// <summary>
		/// Collection custom fields
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="custom_fields")]
		public CustomArticleField[] Custom_fields { get; set; }
		
		/// <summary>
		/// Project description
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Project public url
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="figshare_url")]
		public string Figshare_url { get; set; }
		
		/// <summary>
		/// Project funding
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="funding")]
		public string Funding { get; set; }
		
		/// <summary>
		/// Full Project funding information
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="funding_list")]
		public FundingInformation[] Funding_list { get; set; }
		
		/// <summary>
		/// Group of project if any
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="group_id")]
		public long Group_id { get; set; }
		
		/// <summary>
		/// Date when project was last modified
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="modified_date")]
		public string Modified_date { get; set; }
		
		/// <summary>
		/// Project quota
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="quota")]
		public long Quota { get; set; }
		
		/// <summary>
		/// Project used quota
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="used_quota")]
		public long Used_quota { get; set; }
		
		/// <summary>
		/// Project private quota used
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="used_quota_private")]
		public long Used_quota_private { get; set; }
		
		/// <summary>
		/// Project public quota used
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="used_quota_public")]
		public long Used_quota_public { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProjectCreate
	{
		
		/// <summary>
		/// List of key, values pairs to be associated with the project
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="custom_fields")]
		public string Custom_fields { get; set; }
		
		/// <summary>
		/// List of custom fields values, supersedes custom_fields parameter
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="custom_fields_list")]
		public CustomArticleFieldAdd[] Custom_fields_list { get; set; }
		
		/// <summary>
		/// Project description
		/// Max length: 10000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MaxLength(10000)]
		public string Description { get; set; }
		
		/// <summary>
		/// Grant number or organization(s) that funded this project. Up to 2000 characters permitted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="funding")]
		public string Funding { get; set; }
		
		/// <summary>
		/// Funding creation / update items
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="funding_list")]
		public FundingCreate[] Funding_list { get; set; }
		
		/// <summary>
		/// Only if project type is group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="group_id")]
		public System.Nullable<System.Int64> Group_id { get; set; }
		
		/// <summary>
		/// The title for this project - mandatory. 3 - 1000 characters.
		/// Required
		/// Min length: 3
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="title")]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProjectNote
	{
		
		/// <summary>
		/// Note Abstract - short/truncated content
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="abstract")]
		public string Abstract { get; set; }
		
		/// <summary>
		/// Date when note was created
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="created_date")]
		public string Created_date { get; set; }
		
		/// <summary>
		/// Project note id
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public long Id { get; set; }
		
		/// <summary>
		/// Date when note was last modified
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="modified_date")]
		public string Modified_date { get; set; }
		
		/// <summary>
		/// User who wrote the note
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="user_id")]
		public long User_id { get; set; }
		
		/// <summary>
		/// Username of the one who wrote the note
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="user_name")]
		public string User_name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProjectNoteCreate
	{
		
		/// <summary>
		/// Text of the note
		/// Required
		/// Min length: 3
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="text")]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		public string Text { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProjectNotePrivate
	{
		
		/// <summary>
		/// Full text of note
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProjectPrivate
	{
		
		/// <summary>
		/// Role inside this project
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="role")]
		public ProjectPrivateRole Role { get; set; }
		
		/// <summary>
		/// Project storage type
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="storage")]
		public ProjectPrivateStorage Storage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ProjectPrivateRole
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Owner")]
		Owner = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Collaborator")]
		Collaborator = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Viewer")]
		Viewer = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ProjectPrivateStorage
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="individual")]
		individual = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group")]
		group = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProjectUpdate
	{
		
		/// <summary>
		/// List of key, values pairs to be associated with the project
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="custom_fields")]
		public string Custom_fields { get; set; }
		
		/// <summary>
		/// List of custom fields values, supersedes custom_fields parameter
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="custom_fields_list")]
		public CustomArticleFieldAdd[] Custom_fields_list { get; set; }
		
		/// <summary>
		/// Project description
		/// Max length: 10000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MaxLength(10000)]
		public string Description { get; set; }
		
		/// <summary>
		/// Grant number or organization(s) that funded this project. Up to 2000 characters permitted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="funding")]
		public string Funding { get; set; }
		
		/// <summary>
		/// Funding creation / update items
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="funding_list")]
		public FundingCreate[] Funding_list { get; set; }
		
		/// <summary>
		/// The title for this project - mandatory. 3 - 1000 characters.
		/// Min length: 3
		/// Max length: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProjectsSearch
	{
		
		/// <summary>
		/// The field by which to order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order")]
		public System.Nullable<ProjectsSearchOrder> Order { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ProjectsSearchOrder
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="published_date")]
		published_date = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="modified_date")]
		modified_date = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="views")]
		views = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Resource
	{
		
		/// <summary>
		/// DOI of resource item
		/// </summary>
		[System.ComponentModel.DefaultValue("")]
		[System.Runtime.Serialization.DataMember(Name="doi")]
		public string Doi { get; set; } = "";
		
		/// <summary>
		/// ID of resource item
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DefaultValue("")]
		[System.Runtime.Serialization.DataMember(Name="id")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Id { get; set; } = "";
		
		/// <summary>
		/// Link of resource item
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DefaultValue("")]
		[System.Runtime.Serialization.DataMember(Name="link")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Link { get; set; } = "";
		
		/// <summary>
		/// Status of resource item
		/// Max length: 100
		/// </summary>
		[System.ComponentModel.DefaultValue("")]
		[System.Runtime.Serialization.DataMember(Name="status")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string Status { get; set; } = "";
		
		/// <summary>
		/// Title of resource item
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DefaultValue("")]
		[System.Runtime.Serialization.DataMember(Name="title")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string Title { get; set; } = "";
		
		/// <summary>
		/// Version of resource item
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<System.Int64> Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResponseMessage
	{
		
		/// <summary>
		/// Response message text
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Role
	{
		
		/// <summary>
		/// Role category
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="category")]
		public string Category { get; set; }
		
		/// <summary>
		/// Role description
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Role id
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public long Id { get; set; }
		
		/// <summary>
		/// Role name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ShortAccount
	{
		
		/// <summary>
		/// Account activity status
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="active")]
		public long Active { get; set; }
		
		/// <summary>
		/// User email
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// First Name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="first_name")]
		public string First_name { get; set; }
		
		/// <summary>
		/// Account id
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public long Id { get; set; }
		
		/// <summary>
		/// Account institution
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="institution_id")]
		public long Institution_id { get; set; }
		
		/// <summary>
		/// Account institution user id
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="institution_user_id")]
		public string Institution_user_id { get; set; }
		
		/// <summary>
		/// Last Name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="last_name")]
		public string Last_name { get; set; }
		
		/// <summary>
		/// ORCID iD associated to account
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="orcid_id")]
		public string Orcid_id { get; set; }
		
		/// <summary>
		/// Total storage available to account, in bytes
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="quota")]
		public long Quota { get; set; }
		
		/// <summary>
		/// Storage used by the account, in bytes
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="used_quota")]
		public long Used_quota { get; set; }
		
		/// <summary>
		/// User id associated with account, useful for example for adding the account as an author to an item
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="user_id")]
		public long User_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ShortCustomField
	{
		
		/// <summary>
		/// Custom field type
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="field_type")]
		public ShortCustomFieldField_type Field_type { get; set; }
		
		/// <summary>
		/// Custom field id
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public long Id { get; set; }
		
		/// <summary>
		/// Custom field name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ShortCustomFieldField_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="text")]
		text = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="textarea")]
		textarea = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="dropdown")]
		dropdown = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="url")]
		url = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="email")]
		email = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="date")]
		date = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="dropdown_large_list")]
		dropdown_large_list = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UploadFilePart
	{
		
		/// <summary>
		/// Indexes on byte range. zero-based and inclusive
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endOffset")]
		public System.Nullable<System.Int64> EndOffset { get; set; }
		
		/// <summary>
		/// When a part is being uploaded it is being locked, by setting the locked flag to true. No changes/uploads can happen on this part from other requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locked")]
		public System.Nullable<System.Boolean> Locked { get; set; }
		
		/// <summary>
		/// File part id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="partNo")]
		public System.Nullable<System.Int64> PartNo { get; set; }
		
		/// <summary>
		/// Indexes on byte range. zero-based and inclusive
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startOffset")]
		public System.Nullable<System.Int64> StartOffset { get; set; }
		
		/// <summary>
		/// part status
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<UploadFilePartStatus> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum UploadFilePartStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PENDING")]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="COMPLETE")]
		COMPLETE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UploadInfo
	{
		
		/// <summary>
		/// md5 provided on upload initialization
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="md5")]
		public string Md5 { get; set; }
		
		/// <summary>
		/// name of file on upload server
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Uploads parts
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parts")]
		public UploadFilePart[] Parts { get; set; }
		
		/// <summary>
		/// size of file in bytes
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="size")]
		public System.Nullable<System.Int64> Size { get; set; }
		
		/// <summary>
		/// Upload status
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<UploadInfoStatus> Status { get; set; }
		
		/// <summary>
		/// token received after initializing a file upload
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="token")]
		public string Token { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum UploadInfoStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PENDING")]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="COMPLETED")]
		COMPLETED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ABORTED")]
		ABORTED = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class User
	{
		
		/// <summary>
		/// First Name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="first_name")]
		public string First_name { get; set; }
		
		/// <summary>
		/// User id
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public long Id { get; set; }
		
		/// <summary>
		/// Account activity status
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="is_active")]
		public bool Is_active { get; set; }
		
		/// <summary>
		/// Account public status
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="is_public")]
		public bool Is_public { get; set; }
		
		/// <summary>
		/// User Job title
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="job_title")]
		public string Job_title { get; set; }
		
		/// <summary>
		/// Last Name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="last_name")]
		public string Last_name { get; set; }
		
		/// <summary>
		/// Full Name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Orcid associated to this User
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="orcid_id")]
		public string Orcid_id { get; set; }
		
		/// <summary>
		/// Name that appears in website url
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="url_name")]
		public string Url_name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AuthorsCreator2
	{
		
		/// <summary>
		/// List of authors to be associated with the article. The list can contain the following fields: id, name, first_name, last_name, email, orcid_id. If an id is supplied, it will take priority and everything else will be ignored. No more than 10 authors. For adding more authors use the specific authors endpoint.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="authors")]
		public string[] Authors { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CategoriesCreator2
	{
		
		/// <summary>
		/// List of category ids
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="categories")]
		public int[] Categories { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Private Account information
		/// Account information for token/personal token
		/// Private_account account
		/// </summary>
		/// <returns>OK. Account representation</returns>
		public async Task<Account> Private_accountAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Account>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Private Articles
		/// Get Own Articles
		/// Private_articles_list account/articles
		/// </summary>
		/// <param name="page">Page number. Used for pagination with page_size
		/// Minimum: 1
		/// Maximum: 5000
		// </param>
		/// <param name="page_size">The number of results included on a page. Used for pagination with page
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="limit">Number of results included on a page. Used for pagination with query
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="offset">Where to start the listing(the offset of the first result). Used for pagination with limit
		/// Minimum: 0
		/// Maximum: 5000
		// </param>
		/// <returns>OK. An array of articles belonging to the account</returns>
		public async Task<Article[]> Private_articles_listAsync(long page, long page_size, long limit, long offset, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/articles?page="+page+"&page_size="+page_size+"&limit="+limit+"&offset="+offset;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Article[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create new Article
		/// Create a new Article by sending article information
		/// Private_article_create account/articles
		/// </summary>
		/// <param name="requestBody">Article description</param>
		public async Task Private_article_createAsync(ArticleCreate requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/articles";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Account Article Report
		/// Return status on all reports generated for the account from the oauth credentials
		/// Account_article_report account/articles/export
		/// </summary>
		/// <param name="group_id">A group ID to filter by</param>
		/// <returns>OK. An array of account report entries</returns>
		public async Task<AccountReport[]> Account_article_reportAsync(long group_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/articles/export?group_id="+group_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AccountReport[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Initiate a new Report
		/// Initiate a new Article Report for this Account. There is a limit of 1 report per day.
		/// Account_article_report_generate account/articles/export
		/// </summary>
		/// <returns>OK. AccountReport created.</returns>
		public async Task<AccountReport> Account_article_report_generateAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/articles/export";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AccountReport>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Private Articles search
		/// Returns a list of private articles filtered by the search parameters
		/// Private_articles_search account/articles/search
		/// </summary>
		/// <param name="requestBody">Search Parameters</param>
		/// <returns>OK. An array of articles</returns>
		public async Task<ArticleWithProject[]> Private_articles_searchAsync(PrivateArticleSearch requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/articles/search";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ArticleWithProject[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete article
		/// Delete an article
		/// Private_article_delete account/articles/{article_id}
		/// </summary>
		public async Task Private_article_deleteAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/articles/{article_id}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Article details
		/// View a private article
		/// Private_article_details account/articles/{article_id}
		/// </summary>
		/// <returns>OK. Article representation</returns>
		public async Task<ArticleCompletePrivate> Private_article_detailsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/articles/{article_id}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ArticleCompletePrivate>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update article
		/// Updating an article by passing body parameters; request can also be made with the PATCH method.
		/// Private_article_update account/articles/{article_id}
		/// </summary>
		/// <param name="requestBody">Article description</param>
		public async Task Private_article_updateAsync(ArticleUpdate requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/articles/{article_id}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List article authors
		/// List article authors
		/// Private_article_authors_list account/articles/{article_id}/authors
		/// </summary>
		/// <returns>OK. Authors list for article</returns>
		public async Task<Author[]> Private_article_authors_listAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/articles/{article_id}/authors";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Author[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add article authors
		/// Associate new authors with the article. This will add new authors to the list of already associated authors
		/// Private_article_authors_add account/articles/{article_id}/authors
		/// </summary>
		/// <param name="requestBody">Authors description</param>
		public async Task Private_article_authors_addAsync(AuthorsCreator requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/articles/{article_id}/authors";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Replace article authors
		/// Associate new authors with the article. This will remove all already associated authors and add these new ones
		/// Private_article_authors_replace account/articles/{article_id}/authors
		/// </summary>
		/// <param name="requestBody">Authors description</param>
		public async Task Private_article_authors_replaceAsync(AuthorsCreator requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/articles/{article_id}/authors";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete article author
		/// De-associate author from article
		/// Private_article_author_delete account/articles/{article_id}/authors/{author_id}
		/// </summary>
		/// <param name="article_id">Article unique identifier
		/// Minimum: 1
		// </param>
		/// <param name="author_id">Article Author unique identifier
		/// Minimum: 1
		// </param>
		public async Task Private_article_author_deleteAsync(long article_id, long author_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/articles/"+article_id+"/authors/"+author_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List article categories
		/// List article categories
		/// Private_article_categories_list account/articles/{article_id}/categories
		/// </summary>
		/// <returns>OK. Article categories</returns>
		public async Task<Category[]> Private_article_categories_listAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/articles/{article_id}/categories";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Category[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add article categories
		/// Associate new categories with the article. This will add new categories to the list of already associated categories
		/// Private_article_categories_add account/articles/{article_id}/categories
		/// </summary>
		public async Task Private_article_categories_addAsync(CategoriesCreator requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/articles/{article_id}/categories";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Replace article categories
		/// Associate new categories with the article. This will remove all already associated categories and add these new ones
		/// Private_article_categories_replace account/articles/{article_id}/categories
		/// </summary>
		public async Task Private_article_categories_replaceAsync(CategoriesCreator requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/articles/{article_id}/categories";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete article category
		/// De-associate category from article
		/// Private_article_category_delete account/articles/{article_id}/categories/{category_id}
		/// </summary>
		/// <param name="article_id">Article unique identifier
		/// Minimum: 1
		// </param>
		/// <param name="category_id">Category unique identifier
		/// Minimum: 1
		// </param>
		public async Task Private_article_category_deleteAsync(long article_id, long category_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/articles/"+article_id+"/categories/"+category_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete article confidentiality
		/// Delete confidentiality settings. The confidentiality feature is now deprecated. This has been replaced by the new extended embargo functionality and all items that used to be confidential have now been migrated to items with a permanent embargo on files. All API endpoints related to this functionality will remain for backwards compatibility, but will now be attached to the new extended embargo workflows.
		/// Private_article_confidentiality_delete account/articles/{article_id}/confidentiality
		/// </summary>
		public async Task Private_article_confidentiality_deleteAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/articles/{article_id}/confidentiality";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Article confidentiality details
		/// View confidentiality settings. The confidentiality feature is now deprecated. This has been replaced by the new extended embargo functionality and all items that used to be confidential have now been migrated to items with a permanent embargo on files. All API endpoints related to this functionality will remain for backwards compatibility, but will now be attached to the new extended embargo workflows.
		/// Private_article_confidentiality_details account/articles/{article_id}/confidentiality
		/// </summary>
		/// <returns>OK. Article categories</returns>
		public async Task<ArticleConfidentiality> Private_article_confidentiality_detailsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/articles/{article_id}/confidentiality";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ArticleConfidentiality>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update article confidentiality
		/// Update confidentiality settings. The confidentiality feature is now deprecated. This has been replaced by the new extended embargo functionality and all items that used to be confidential have now been migrated to items with a permanent embargo on files. All API endpoints related to this functionality will remain for backwards compatibility, but will now be attached to the new extended embargo workflows.
		/// Private_article_confidentiality_update account/articles/{article_id}/confidentiality
		/// </summary>
		public async Task Private_article_confidentiality_updateAsync(ConfidentialityCreator requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/articles/{article_id}/confidentiality";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete Article Embargo
		/// Will lift the embargo for the specified article
		/// Private_article_embargo_delete account/articles/{article_id}/embargo
		/// </summary>
		public async Task Private_article_embargo_deleteAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/articles/{article_id}/embargo";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Article Embargo Details
		/// View a private article embargo details
		/// Private_article_embargo_details account/articles/{article_id}/embargo
		/// </summary>
		/// <returns>OK. Embargo for article</returns>
		public async Task<ArticleEmbargo> Private_article_embargo_detailsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/articles/{article_id}/embargo";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ArticleEmbargo>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update Article Embargo
		/// Note: setting an article under whole embargo does not imply that the article will be published when the embargo will expire. You must explicitly call the publish endpoint to enable this functionality.
		/// Private_article_embargo_update account/articles/{article_id}/embargo
		/// </summary>
		/// <param name="requestBody">Embargo description</param>
		public async Task Private_article_embargo_updateAsync(ArticleEmbargoUpdater requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/articles/{article_id}/embargo";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List article files
		/// List private files
		/// Private_article_files_list account/articles/{article_id}/files
		/// </summary>
		/// <returns>OK. Article files list</returns>
		public async Task<PrivateFile[]> Private_article_files_listAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/articles/{article_id}/files";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PrivateFile[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Initiate Upload
		/// Initiate a new file upload within the article. Either use the link property to point to an existing file that resides elsewhere and will not be uploaded to Figshare or use the other 3 parameters (md5, name, size).
		/// Private_article_upload_initiate account/articles/{article_id}/files
		/// </summary>
		public async Task Private_article_upload_initiateAsync(FileCreator requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/articles/{article_id}/files";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// File Delete
		/// Complete file upload
		/// Private_article_file_delete account/articles/{article_id}/files/{file_id}
		/// </summary>
		public async Task Private_article_file_deleteAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/articles/{article_id}/files/{file_id}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Single File
		/// View details of file for specified article
		/// Private_article_file account/articles/{article_id}/files/{file_id}
		/// </summary>
		/// <returns>OK. Article private file</returns>
		public async Task<PrivateFile> Private_article_fileAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/articles/{article_id}/files/{file_id}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PrivateFile>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Complete Upload
		/// Complete file upload
		/// Private_article_upload_complete account/articles/{article_id}/files/{file_id}
		/// </summary>
		public async Task Private_article_upload_completeAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/articles/{article_id}/files/{file_id}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List private links
		/// List private links
		/// Private_article_private_link account/articles/{article_id}/private_links
		/// </summary>
		/// <returns>OK. Article private links</returns>
		public async Task<PrivateLink[]> Private_article_private_linkAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/articles/{article_id}/private_links";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PrivateLink[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create private link
		/// Create new private link for this article
		/// Private_article_private_link_create account/articles/{article_id}/private_links
		/// </summary>
		public async Task Private_article_private_link_createAsync(PrivateLinkCreator requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/articles/{article_id}/private_links";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Disable private link
		/// Disable/delete private link for this article
		/// Private_article_private_link_delete account/articles/{article_id}/private_links/{link_id}
		/// </summary>
		public async Task Private_article_private_link_deleteAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/articles/{article_id}/private_links/{link_id}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update private link
		/// Update existing private link for this article
		/// Private_article_private_link_update account/articles/{article_id}/private_links/{link_id}
		/// </summary>
		public async Task Private_article_private_link_updateAsync(PrivateLinkCreator requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/articles/{article_id}/private_links/{link_id}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Private Article Publish
		/// - If the whole article is under embargo, it will not be published immediately, but when the embargo expires or is lifted.
		/// - When an article is published, a new public version will be generated. Any further updates to the article will affect the private article data. In order to make these changes publicly visible, an explicit publish operation is needed.
		/// Private_article_publish account/articles/{article_id}/publish
		/// </summary>
		/// <param name="article_id">Article unique identifier
		/// Minimum: 1
		// </param>
		public async Task Private_article_publishAsync(long article_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/articles/"+article_id+"/publish";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Private Article Reserve DOI
		/// Reserve DOI for article
		/// Private_article_reserve_doi account/articles/{article_id}/reserve_doi
		/// </summary>
		/// <param name="article_id">Article unique identifier
		/// Minimum: 1
		// </param>
		/// <returns>OK</returns>
		public async Task<ArticleDOI> Private_article_reserve_doiAsync(long article_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/articles/"+article_id+"/reserve_doi";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ArticleDOI>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Private Article Reserve Handle
		/// Reserve Handle for article
		/// Private_article_reserve_handle account/articles/{article_id}/reserve_handle
		/// </summary>
		/// <param name="article_id">Article unique identifier
		/// Minimum: 1
		// </param>
		/// <returns>OK</returns>
		public async Task<ArticleHandle> Private_article_reserve_handleAsync(long article_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/articles/"+article_id+"/reserve_handle";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ArticleHandle>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Private Article Resource
		/// Edit article resource data.
		/// Private_article_resource account/articles/{article_id}/resource
		/// </summary>
		/// <param name="article_id">Article unique identifier
		/// Minimum: 1
		// </param>
		/// <param name="requestBody">Resource data</param>
		public async Task Private_article_resourceAsync(long article_id, Resource requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/articles/"+article_id+"/resource";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update article version
		/// Updating an article version by passing body parameters; request can also be made with the PATCH method.
		/// Article_version_update account/articles/{article_id}/versions/{version_id}/
		/// </summary>
		/// <param name="article_id">Article unique identifier
		/// Minimum: 1
		// </param>
		/// <param name="version_id">Article version identifier
		/// Minimum: 1
		// </param>
		/// <param name="requestBody">Article description</param>
		public async Task Article_version_updateAsync(long article_id, long version_id, ArticleUpdate requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/articles/"+article_id+"/versions/"+version_id+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update article version thumbnail
		/// For a given public article version update the article thumbnail by choosing one of the associated files
		/// Article_version_update_thumb account/articles/{article_id}/versions/{version_id}/update_thumb
		/// </summary>
		/// <param name="article_id">Article unique identifier
		/// Minimum: 1
		// </param>
		/// <param name="version_id">Article version identifier
		/// Minimum: 1
		// </param>
		/// <param name="requestBody">File ID</param>
		public async Task Article_version_update_thumbAsync(long article_id, long version_id, FileId requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/articles/"+article_id+"/versions/"+version_id+"/update_thumb";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Search Authors
		/// Search for authors
		/// Private_authors_search account/authors/search
		/// </summary>
		/// <param name="requestBody">Search Parameters</param>
		/// <returns>OK. An array of authors</returns>
		public async Task<Author[]> Private_authors_searchAsync(PrivateAuthorsSearch requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/authors/search";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Author[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Author details
		/// View author details
		/// Private_author_details account/authors/{author_id}
		/// </summary>
		/// <returns>OK. Article representation</returns>
		public async Task<AuthorComplete> Private_author_detailsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/authors/{author_id}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AuthorComplete>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Private Account Categories
		/// List institution categories (including parent Categories)
		/// Private_categories_list account/categories
		/// </summary>
		/// <returns>OK. An array of categories</returns>
		public async Task<Category[]> Private_categories_listAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/categories";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Category[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Private Collections List
		/// List private collections
		/// Private_collections_list account/collections
		/// </summary>
		/// <param name="page">Page number. Used for pagination with page_size
		/// Minimum: 1
		/// Maximum: 5000
		// </param>
		/// <param name="page_size">The number of results included on a page. Used for pagination with page
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="limit">Number of results included on a page. Used for pagination with query
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="offset">Where to start the listing(the offset of the first result). Used for pagination with limit
		/// Minimum: 0
		/// Maximum: 5000
		// </param>
		/// <param name="order">The field by which to order. Default varies by endpoint/resource.</param>
		/// <returns>OK. An array of collections</returns>
		public async Task<Collection[]> Private_collections_listAsync(long page, long page_size, long limit, long offset, CollectionSearchOrder order, CommonSearchOrder_direction order_direction, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/collections?page="+page+"&page_size="+page_size+"&limit="+limit+"&offset="+offset+"&order=" + order+"&order_direction=" + order_direction;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Collection[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create collection
		/// Create a new Collection by sending collection information
		/// Private_collection_create account/collections
		/// </summary>
		/// <param name="requestBody">Collection description</param>
		public async Task Private_collection_createAsync(CollectionCreate requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/collections";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Private Collections Search
		/// Returns a list of private Collections
		/// Private_collections_search account/collections/search
		/// </summary>
		/// <param name="requestBody">Search Parameters</param>
		/// <returns>OK. An array of collections</returns>
		public async Task<Collection[]> Private_collections_searchAsync(PrivateCollectionSearch requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/collections/search";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Collection[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete collection
		/// Delete n collection
		/// Private_collection_delete account/collections/{collection_id}
		/// </summary>
		public async Task Private_collection_deleteAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/collections/{collection_id}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Collection details
		/// View a collection
		/// Private_collection_details account/collections/{collection_id}
		/// </summary>
		/// <returns>OK. Collection representation</returns>
		public async Task<CollectionCompletePrivate> Private_collection_detailsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/collections/{collection_id}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CollectionCompletePrivate>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update collection
		/// Update collection details; request can also be made with the PATCH method.
		/// Private_collection_update account/collections/{collection_id}
		/// </summary>
		/// <param name="requestBody">Collection description</param>
		public async Task Private_collection_updateAsync(CollectionUpdate requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/collections/{collection_id}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List collection articles
		/// List collection articles
		/// Private_collection_articles_list account/collections/{collection_id}/articles
		/// </summary>
		/// <param name="page">Page number. Used for pagination with page_size
		/// Minimum: 1
		/// Maximum: 5000
		// </param>
		/// <param name="page_size">The number of results included on a page. Used for pagination with page
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="limit">Number of results included on a page. Used for pagination with query
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="offset">Where to start the listing(the offset of the first result). Used for pagination with limit
		/// Minimum: 0
		/// Maximum: 5000
		// </param>
		/// <returns>OK. Articles List</returns>
		public async Task<Article[]> Private_collection_articles_listAsync(long page, long page_size, long limit, long offset, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/collections/{collection_id}/articles?page="+page+"&page_size="+page_size+"&limit="+limit+"&offset="+offset;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Article[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add collection articles
		/// Associate new articles with the collection. This will add new articles to the list of already associated articles
		/// Private_collection_articles_add account/collections/{collection_id}/articles
		/// </summary>
		/// <param name="requestBody">Articles list</param>
		public async Task Private_collection_articles_addAsync(ArticlesCreator requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/collections/{collection_id}/articles";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Replace collection articles
		/// Associate new articles with the collection. This will remove all already associated articles and add these new ones
		/// Private_collection_articles_replace account/collections/{collection_id}/articles
		/// </summary>
		/// <param name="requestBody">Articles List</param>
		public async Task Private_collection_articles_replaceAsync(ArticlesCreator requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/collections/{collection_id}/articles";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete collection article
		/// De-associate article from collection
		/// Private_collection_article_delete account/collections/{collection_id}/articles/{article_id}
		/// </summary>
		/// <param name="collection_id">Collection unique identifier
		/// Minimum: 1
		// </param>
		/// <param name="article_id">Collection article unique identifier
		/// Minimum: 1
		// </param>
		public async Task Private_collection_article_deleteAsync(long collection_id, long article_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/collections/"+collection_id+"/articles/"+article_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List collection authors
		/// List collection authors
		/// Private_collection_authors_list account/collections/{collection_id}/authors
		/// </summary>
		/// <returns>OK. Embargo for article</returns>
		public async Task<Author[]> Private_collection_authors_listAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/collections/{collection_id}/authors";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Author[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add collection authors
		/// Associate new authors with the collection. This will add new authors to the list of already associated authors
		/// Private_collection_authors_add account/collections/{collection_id}/authors
		/// </summary>
		/// <param name="requestBody">List of authors</param>
		public async Task Private_collection_authors_addAsync(AuthorsCreator2 requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/collections/{collection_id}/authors";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Replace collection authors
		/// Associate new authors with the collection. This will remove all already associated authors and add these new ones
		/// Private_collection_authors_replace account/collections/{collection_id}/authors
		/// </summary>
		/// <param name="requestBody">List of authors</param>
		public async Task Private_collection_authors_replaceAsync(AuthorsCreator2 requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/collections/{collection_id}/authors";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete collection author
		/// Delete collection author
		/// Private_collection_author_delete account/collections/{collection_id}/authors/{author_id}
		/// </summary>
		/// <param name="collection_id">Collection unique identifier
		/// Minimum: 1
		// </param>
		/// <param name="author_id">Collection Author unique identifier
		/// Minimum: 1
		// </param>
		public async Task Private_collection_author_deleteAsync(long collection_id, long author_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/collections/"+collection_id+"/authors/"+author_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List collection categories
		/// List collection categories
		/// Private_collection_categories_list account/collections/{collection_id}/categories
		/// </summary>
		/// <returns>OK. Categories list</returns>
		public async Task<Category[]> Private_collection_categories_listAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/collections/{collection_id}/categories";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Category[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add collection categories
		/// Associate new categories with the collection. This will add new categories to the list of already associated categories
		/// Private_collection_categories_add account/collections/{collection_id}/categories
		/// </summary>
		/// <param name="requestBody">Categories list</param>
		public async Task Private_collection_categories_addAsync(CategoriesCreator2 requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/collections/{collection_id}/categories";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Replace collection categories
		/// Associate new categories with the collection. This will remove all already associated categories and add these new ones
		/// Private_collection_categories_replace account/collections/{collection_id}/categories
		/// </summary>
		/// <param name="requestBody">Categories list</param>
		public async Task Private_collection_categories_replaceAsync(CategoriesCreator2 requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/collections/{collection_id}/categories";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete collection category
		/// De-associate category from collection
		/// Private_collection_category_delete account/collections/{collection_id}/categories/{category_id}
		/// </summary>
		/// <param name="collection_id">Collection unique identifier
		/// Minimum: 1
		// </param>
		/// <param name="category_id">Collection category unique identifier
		/// Minimum: 1
		// </param>
		public async Task Private_collection_category_deleteAsync(long collection_id, long category_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/collections/"+collection_id+"/categories/"+category_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List collection private links
		/// List article private links
		/// Private_collection_private_links_list account/collections/{collection_id}/private_links
		/// </summary>
		/// <returns>OK. Collection private links</returns>
		public async Task<PrivateLink[]> Private_collection_private_links_listAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/collections/{collection_id}/private_links";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PrivateLink[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create collection private link
		/// Create new private link
		/// Private_collection_private_link_create account/collections/{collection_id}/private_links
		/// </summary>
		public async Task Private_collection_private_link_createAsync(CollectionPrivateLinkCreator requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/collections/{collection_id}/private_links";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Disable private link
		/// Disable/delete private link for this collection
		/// Private_collection_private_link_delete account/collections/{collection_id}/private_links/{link_id}
		/// </summary>
		public async Task Private_collection_private_link_deleteAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/collections/{collection_id}/private_links/{link_id}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update collection private link
		/// Update existing private link for this collection
		/// Private_collection_private_link_update account/collections/{collection_id}/private_links/{link_id}
		/// </summary>
		public async Task Private_collection_private_link_updateAsync(CollectionPrivateLinkCreator requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/collections/{collection_id}/private_links/{link_id}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Private Collection Publish
		/// When a collection is published, a new public version will be generated. Any further updates to the collection will affect the private collection data. In order to make these changes publicly visible, an explicit publish operation is needed.
		/// Private_collection_publish account/collections/{collection_id}/publish
		/// </summary>
		/// <param name="collection_id">Collection Unique identifier
		/// Minimum: 1
		// </param>
		public async Task Private_collection_publishAsync(long collection_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/collections/"+collection_id+"/publish";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Private Collection Reserve DOI
		/// Reserve DOI for collection
		/// Private_collection_reserve_doi account/collections/{collection_id}/reserve_doi
		/// </summary>
		/// <param name="collection_id">Collection Unique identifier
		/// Minimum: 1
		// </param>
		/// <returns>OK</returns>
		public async Task<CollectionDOI> Private_collection_reserve_doiAsync(long collection_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/collections/"+collection_id+"/reserve_doi";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CollectionDOI>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Private Collection Reserve Handle
		/// Reserve Handle for collection
		/// Private_collection_reserve_handle account/collections/{collection_id}/reserve_handle
		/// </summary>
		/// <param name="collection_id">Collection Unique identifier
		/// Minimum: 1
		// </param>
		/// <returns>OK</returns>
		public async Task<CollectionHandle> Private_collection_reserve_handleAsync(long collection_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/collections/"+collection_id+"/reserve_handle";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CollectionHandle>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Private Collection Resource
		/// Edit collection resource data.
		/// Private_collection_resource account/collections/{collection_id}/resource
		/// </summary>
		/// <param name="collection_id">Collection unique identifier
		/// Minimum: 1
		// </param>
		/// <param name="requestBody">Resource data</param>
		public async Task Private_collection_resourceAsync(long collection_id, Resource requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/collections/"+collection_id+"/resource";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Search Funding
		/// Search for fundings
		/// Private_funding_search account/funding/search
		/// </summary>
		/// <param name="requestBody">Search Parameters</param>
		/// <returns>OK. An array of funding information</returns>
		public async Task<FundingInformation[]> Private_funding_searchAsync(FundingSearch requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/funding/search";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<FundingInformation[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Private Account Institutions
		/// Account institution details
		/// Private_institution_details account/institution
		/// </summary>
		/// <returns>OK. An array of institutions</returns>
		public async Task<Institution> Private_institution_detailsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/institution";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Institution>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Private Account Institution Accounts
		/// Returns the accounts for which the account has administrative privileges (assigned and inherited).
		/// Private_institution_accounts_list account/institution/accounts
		/// </summary>
		/// <param name="page">Page number. Used for pagination with page_size
		/// Minimum: 1
		/// Maximum: 5000
		// </param>
		/// <param name="page_size">The number of results included on a page. Used for pagination with page
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="limit">Number of results included on a page. Used for pagination with query
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="offset">Where to start the listing(the offset of the first result). Used for pagination with limit
		/// Minimum: 0
		/// Maximum: 5000
		// </param>
		/// <param name="is_active">Filter by active status
		/// Minimum: 0
		/// Maximum: 1
		// </param>
		/// <param name="institution_user_id">Filter by institution_user_id</param>
		/// <param name="email">Filter by email</param>
		/// <param name="id_lte">Retrieve accounts with an ID lower or equal to the specified value
		/// Minimum: 0
		// </param>
		/// <param name="id_gte">Retrieve accounts with an ID greater or equal to the specified value
		/// Minimum: 0
		// </param>
		/// <returns>OK. An array of Accounts</returns>
		public async Task<ShortAccount[]> Private_institution_accounts_listAsync(long page, long page_size, long limit, long offset, long is_active, string institution_user_id, string email, long id_lte, long id_gte, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/institution/accounts?page="+page+"&page_size="+page_size+"&limit="+limit+"&offset="+offset+"&is_active="+is_active+"&institution_user_id=" + (institution_user_id==null? "" : System.Uri.EscapeDataString(institution_user_id))+"&email=" + (email==null? "" : System.Uri.EscapeDataString(email))+"&id_lte="+id_lte+"&id_gte="+id_gte;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ShortAccount[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create new Institution Account
		/// Create a new Account by sending account information
		/// Private_institution_accounts_create account/institution/accounts
		/// </summary>
		/// <param name="requestBody">Account description</param>
		public async Task Private_institution_accounts_createAsync(AccountCreate requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/institution/accounts";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Private Account Institution Accounts Search
		/// Returns the accounts for which the account has administrative privileges (assigned and inherited).
		/// Private_institution_accounts_search account/institution/accounts/search
		/// </summary>
		/// <param name="requestBody">Search Parameters</param>
		/// <returns>OK. An array of Accounts</returns>
		public async Task<ShortAccount[]> Private_institution_accounts_searchAsync(InstitutionAccountsSearch requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/institution/accounts/search";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ShortAccount[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update Institution Account
		/// Update Institution Account
		/// Private_institution_accounts_update account/institution/accounts/{account_id}
		/// </summary>
		/// <param name="account_id">Account identifier the user is associated to
		/// Minimum: 1
		// </param>
		/// <param name="requestBody">Account description</param>
		public async Task Private_institution_accounts_updateAsync(long account_id, AccountUpdate requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/institution/accounts/"+account_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Private Institution Articles
		/// Get Articles from own institution. User must be administrator of the institution
		/// Private_institution_articles account/institution/articles
		/// </summary>
		/// <param name="page">Page number. Used for pagination with page_size
		/// Minimum: 1
		/// Maximum: 5000
		// </param>
		/// <param name="page_size">The number of results included on a page. Used for pagination with page
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="limit">Number of results included on a page. Used for pagination with query
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="offset">Where to start the listing(the offset of the first result). Used for pagination with limit
		/// Minimum: 0
		/// Maximum: 5000
		// </param>
		/// <param name="order">The field by which to order. Default varies by endpoint/resource.</param>
		/// <param name="published_since">Filter by article publishing date. Will only return articles published after the date. date(ISO 8601) YYYY-MM-DD</param>
		/// <param name="modified_since">Filter by article modified date. Will only return articles published after the date. date(ISO 8601) YYYY-MM-DD</param>
		/// <param name="status">only return collections with this status</param>
		/// <param name="resource_doi">only return collections with this resource_doi</param>
		/// <param name="item_type">Only return articles with the respective type. Mapping for item_type is: 1 - Figure, 2 - Media, 3 - Dataset, 5 - Poster, 6 - Journal contribution, 7 - Presentation, 8 - Thesis, 9 - Software, 11 - Online resource, 12 - Preprint, 13 - Book, 14 - Conference contribution, 15 - Chapter, 16 - Peer review, 17 - Educational resource, 18 - Report, 19 - Standard, 20 - Composition, 21 - Funding, 22 - Physical object, 23 - Data management plan, 24 - Workflow, 25 - Monograph, 26 - Performance, 27 - Event, 28 - Service, 29 - Model</param>
		/// <returns>OK. An array of articles belonging to the institution</returns>
		public async Task<Article[]> Private_institution_articlesAsync(long page, long page_size, long limit, long offset, ArticleSearchOrder order, CommonSearchOrder_direction order_direction, string published_since, string modified_since, long status, string resource_doi, long item_type, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/institution/articles?page="+page+"&page_size="+page_size+"&limit="+limit+"&offset="+offset+"&order=" + order+"&order_direction=" + order_direction+"&published_since=" + (published_since==null? "" : System.Uri.EscapeDataString(published_since))+"&modified_since=" + (modified_since==null? "" : System.Uri.EscapeDataString(modified_since))+"&status="+status+"&resource_doi=" + (resource_doi==null? "" : System.Uri.EscapeDataString(resource_doi))+"&item_type="+item_type;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Article[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Private account institution group custom fields
		/// Returns the custom fields in the group the user belongs to, or the ones in the group specified, if the user has access.
		/// Custom_fields_list account/institution/custom_fields
		/// </summary>
		/// <param name="group_id">Group_id</param>
		/// <returns>OK. An array of custom fields</returns>
		public async Task<ShortCustomField[]> Custom_fields_listAsync(long group_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/institution/custom_fields?group_id="+group_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ShortCustomField[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Private Account Institution embargo options
		/// Account institution embargo options details
		/// Private_institution_embargo_options_details account/institution/embargo_options
		/// </summary>
		/// <returns>OK. An array of embargo options</returns>
		public async Task<GroupEmbargoOptions[]> Private_institution_embargo_options_detailsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/institution/embargo_options";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GroupEmbargoOptions[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Private Account Institution Groups
		/// Returns the groups for which the account has administrative privileges (assigned and inherited).
		/// Private_institution_groups_list account/institution/groups
		/// </summary>
		/// <returns>OK. An array of Groups</returns>
		public async Task<Group[]> Private_institution_groups_listAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/institution/groups";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Group[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Private Account Institution Group Embargo Options
		/// Account institution group embargo options details
		/// Private_group_embargo_options_details account/institution/groups/{group_id}/embargo_options
		/// </summary>
		/// <param name="group_id">Group identifier
		/// Minimum: 1
		// </param>
		/// <returns>OK. An array of embargo options</returns>
		public async Task<GroupEmbargoOptions[]> Private_group_embargo_options_detailsAsync(long group_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/institution/groups/"+group_id+"/embargo_options";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GroupEmbargoOptions[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Institution Curation Review
		/// Retrieve a certain curation review by its ID
		/// Account_institution_curation account/institution/review/{curation_id}
		/// </summary>
		/// <returns>OK. A curation review.</returns>
		public async Task<CurationDetail> Account_institution_curationAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/institution/review/{curation_id}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CurationDetail>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Institution Curation Review Comments
		/// Retrieve a certain curation review's comments.
		/// Account_institution_curation_comments account/institution/review/{curation_id}/comments
		/// </summary>
		/// <param name="limit">Number of results included on a page. Used for pagination with query
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="offset">Where to start the listing(the offset of the first result). Used for pagination with limit
		/// Minimum: 0
		/// Maximum: 5000
		// </param>
		/// <returns>OK. A curation review's comments.</returns>
		public async Task<CurationComment> Account_institution_curation_commentsAsync(long limit, long offset, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/institution/review/{curation_id}/comments?limit="+limit+"&offset="+offset;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CurationComment>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// POST Institution Curation Review Comment
		/// Add a new comment to the review.
		/// InstitutionsPost account/institution/review/{curation_id}/comments
		/// </summary>
		/// <param name="requestBody">The content/value of the comment.</param>
		/// <returns>OK.</returns>
		public async Task InstitutionsPostAsync(CurationCommentCreate requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/institution/review/{curation_id}/comments";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Institution Curation Reviews
		/// Retrieve a list of curation reviews for this institution
		/// Account_institution_curations account/institution/reviews
		/// </summary>
		/// <param name="group_id">Filter by the group ID
		/// Minimum: 0
		// </param>
		/// <param name="article_id">Retrieve the reviews for this article
		/// Minimum: 0
		// </param>
		/// <param name="status">Filter by the status of the review</param>
		/// <param name="limit">Number of results included on a page. Used for pagination with query
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="offset">Where to start the listing(the offset of the first result). Used for pagination with limit
		/// Minimum: 0
		/// Maximum: 5000
		// </param>
		/// <returns>OK. A list of curation reviews.</returns>
		public async Task<Curation> Account_institution_curationsAsync(long group_id, long article_id, CurationStatus status, long limit, long offset, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/institution/reviews?group_id="+group_id+"&article_id="+article_id+"&status=" + status+"&limit="+limit+"&offset="+offset;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Curation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Private Account Institution Roles
		/// Returns the roles available for groups and the institution group.
		/// Private_institution_roles_list account/institution/roles
		/// </summary>
		/// <returns>OK. An array of Roles</returns>
		public async Task<Role[]> Private_institution_roles_listAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/institution/roles";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Role[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List Institution Account Group Roles
		/// List Institution Account Group Roles
		/// Private_institution_account_group_roles account/institution/roles/{account_id}
		/// </summary>
		/// <returns>OK. Account Group Roles</returns>
		public async Task<AccountGroupRoles> Private_institution_account_group_rolesAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/institution/roles/{account_id}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AccountGroupRoles>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add Institution Account Group Roles
		/// Add Institution Account Group Roles
		/// Private_institution_account_group_roles_create account/institution/roles/{account_id}
		/// </summary>
		/// <param name="requestBody">Account description</param>
		public async Task Private_institution_account_group_roles_createAsync(AccountGroupRolesCreate requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/institution/roles/{account_id}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete Institution Account Group Role
		/// Delete Institution Account Group Role
		/// Private_institution_account_group_role_delete account/institution/roles/{account_id}/{group_id}/{role_id}
		/// </summary>
		/// <param name="account_id">Account identifier for which to remove the role
		/// Minimum: 1
		// </param>
		/// <param name="group_id">Group identifier for which to remove the role
		/// Minimum: 1
		// </param>
		/// <param name="role_id">Role identifier
		/// Minimum: 1
		// </param>
		public async Task Private_institution_account_group_role_deleteAsync(long account_id, long group_id, long role_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/institution/roles/"+account_id+"/"+group_id+"/"+role_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Private Account Institution User
		/// Retrieve institution user information using the account_id
		/// Private_account_institution_user account/institution/users/{account_id}
		/// </summary>
		/// <param name="account_id">Account identifier the user is associated to
		/// Minimum: 1
		// </param>
		/// <returns>OK. User representation</returns>
		public async Task<User> Private_account_institution_userAsync(long account_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/institution/users/"+account_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<User>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Private Account Licenses
		/// This is a private endpoint that requires OAuth. It will return a list with figshare public licenses AND licenses defined for account's institution.
		/// Private_licenses_list account/licenses
		/// </summary>
		/// <returns>OK. An array of personal licenses</returns>
		public async Task<License[]> Private_licenses_listAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/licenses";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<License[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Private Projects
		/// List private projects
		/// Private_projects_list account/projects
		/// </summary>
		/// <param name="page">Page number. Used for pagination with page_size
		/// Minimum: 1
		/// Maximum: 5000
		// </param>
		/// <param name="page_size">The number of results included on a page. Used for pagination with page
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="limit">Number of results included on a page. Used for pagination with query
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="offset">Where to start the listing(the offset of the first result). Used for pagination with limit
		/// Minimum: 0
		/// Maximum: 5000
		// </param>
		/// <param name="order">The field by which to order.</param>
		/// <param name="storage">only return collections from this institution</param>
		/// <param name="roles">Any combination of owner, collaborator, viewer separated by comma. Examples: "owner" or "owner,collaborator".</param>
		/// <returns>OK. An array of projects</returns>
		public async Task<ProjectPrivate[]> Private_projects_listAsync(long page, long page_size, long limit, long offset, ProjectsSearchOrder order, CommonSearchOrder_direction order_direction, Private_projects_listStorage storage, string roles, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/projects?page="+page+"&page_size="+page_size+"&limit="+limit+"&offset="+offset+"&order=" + order+"&order_direction=" + order_direction+"&storage=" + storage+"&roles=" + (roles==null? "" : System.Uri.EscapeDataString(roles));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProjectPrivate[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create project
		/// Create a new project
		/// Private_project_create account/projects
		/// </summary>
		/// <param name="requestBody">Project  description</param>
		public async Task Private_project_createAsync(ProjectCreate requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/projects";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Private Projects search
		/// Search inside the private projects
		/// Private_projects_search account/projects/search
		/// </summary>
		/// <param name="requestBody">Search Parameters</param>
		/// <returns>OK. An array of projects</returns>
		public async Task<ProjectPrivate[]> Private_projects_searchAsync(ProjectsSearch requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/projects/search";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProjectPrivate[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete project
		/// A project can be deleted only if: - it is not public - it does not have public articles.
		/// 
		/// When an individual project is deleted, all the articles are moved to my data of each owner.
		/// 
		/// When a group project is deleted, all the articles and files are deleted as well. Only project owner, group admin and above can delete a project.
		/// 
		/// Private_project_delete account/projects/{project_id}
		/// </summary>
		public async Task Private_project_deleteAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/projects/{project_id}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// View project details
		/// View a private project
		/// Private_project_details account/projects/{project_id}
		/// </summary>
		/// <returns>OK. Project representation</returns>
		public async Task<ProjectCompletePrivate> Private_project_detailsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/projects/{project_id}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProjectCompletePrivate>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update project
		/// Updating an project by passing body parameters; request can also be made with the PATCH method.
		/// Private_project_update account/projects/{project_id}
		/// </summary>
		/// <param name="requestBody">Project description</param>
		public async Task Private_project_updateAsync(ProjectUpdate requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/projects/{project_id}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List project articles
		/// List project articles
		/// Private_project_articles_list account/projects/{project_id}/articles
		/// </summary>
		/// <returns>OK. List of articles</returns>
		public async Task<Article[]> Private_project_articles_listAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/projects/{project_id}/articles";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Article[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create project article
		/// Create a new Article and associate it with this project
		/// Private_project_articles_create account/projects/{project_id}/articles
		/// </summary>
		/// <param name="requestBody">Article description</param>
		public async Task Private_project_articles_createAsync(ArticleProjectCreate requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/projects/{project_id}/articles";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete project article
		/// Delete project article
		/// Private_project_article_delete account/projects/{project_id}/articles/{article_id}
		/// </summary>
		public async Task Private_project_article_deleteAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/projects/{project_id}/articles/{article_id}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Project article details
		/// Project article details
		/// Private_project_article_details account/projects/{project_id}/articles/{article_id}
		/// </summary>
		/// <returns>OK. Article representation</returns>
		public async Task<ProjectArticle> Private_project_article_detailsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/projects/{project_id}/articles/{article_id}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProjectArticle>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Project article list files
		/// List article files
		/// Private_project_article_files account/projects/{project_id}/articles/{article_id}/files
		/// </summary>
		/// <param name="project_id">Project unique identifier
		/// Minimum: 1
		// </param>
		/// <param name="article_id">Project Article unique identifier
		/// Minimum: 1
		// </param>
		/// <returns>OK. List of files</returns>
		public async Task<PrivateFile[]> Private_project_article_filesAsync(long project_id, long article_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/projects/"+project_id+"/articles/"+article_id+"/files";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PrivateFile[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Project article file details
		/// Project article file details
		/// Private_project_article_file account/projects/{project_id}/articles/{article_id}/files/{file_id}
		/// </summary>
		/// <param name="project_id">Project unique identifier
		/// Minimum: 1
		// </param>
		/// <param name="article_id">Project Article unique identifier
		/// Minimum: 1
		// </param>
		/// <param name="file_id">File unique identifier
		/// Minimum: 1
		// </param>
		/// <returns>OK. File representation</returns>
		public async Task<PrivateFile> Private_project_article_fileAsync(long project_id, long article_id, long file_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/projects/"+project_id+"/articles/"+article_id+"/files/"+file_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PrivateFile>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List project collaborators
		/// List Project collaborators and invited users
		/// Private_project_collaborators_list account/projects/{project_id}/collaborators
		/// </summary>
		/// <returns>OK. List of Collaborators</returns>
		public async Task<ProjectCollaborator[]> Private_project_collaborators_listAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/projects/{project_id}/collaborators";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProjectCollaborator[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Invite project collaborators
		/// Invite users to collaborate on project or view the project
		/// Private_project_collaborators_invite account/projects/{project_id}/collaborators
		/// </summary>
		/// <param name="requestBody">viewer or collaborator role. User user_id or email of user</param>
		public async Task Private_project_collaborators_inviteAsync(ProjectCollaboratorInvite requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/projects/{project_id}/collaborators";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Remove project collaborator
		/// Remove project collaborator
		/// Private_project_collaborator__Delete account/projects/{project_id}/collaborators/{user_id}
		/// </summary>
		/// <param name="project_id">Project unique identifier
		/// Minimum: 1
		// </param>
		/// <param name="user_id">User unique identifier
		/// Minimum: 1
		// </param>
		public async Task Private_project_collaborator__DeleteAsync(long project_id, long user_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/projects/"+project_id+"/collaborators/"+user_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Private Project Leave
		/// Please note: project's owner cannot leave the project.
		/// Private_project_leave account/projects/{project_id}/leave
		/// </summary>
		/// <param name="project_id">Project unique identifier
		/// Minimum: 1
		// </param>
		public async Task Private_project_leaveAsync(long project_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/projects/"+project_id+"/leave";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List project notes
		/// List project notes
		/// Private_project_notes_list account/projects/{project_id}/notes
		/// </summary>
		/// <param name="page">Page number. Used for pagination with page_size
		/// Minimum: 1
		/// Maximum: 5000
		// </param>
		/// <param name="page_size">The number of results included on a page. Used for pagination with page
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="limit">Number of results included on a page. Used for pagination with query
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="offset">Where to start the listing(the offset of the first result). Used for pagination with limit
		/// Minimum: 0
		/// Maximum: 5000
		// </param>
		/// <returns>OK. List of project notes</returns>
		public async Task<ProjectNote[]> Private_project_notes_listAsync(long page, long page_size, long limit, long offset, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/projects/{project_id}/notes?page="+page+"&page_size="+page_size+"&limit="+limit+"&offset="+offset;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProjectNote[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create project note
		/// Create a new project note
		/// Private_project_notes_create account/projects/{project_id}/notes
		/// </summary>
		/// <param name="requestBody">Note message</param>
		public async Task Private_project_notes_createAsync(ProjectNoteCreate requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/projects/{project_id}/notes";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete project note
		/// Private_project_note_delete account/projects/{project_id}/notes/{note_id}
		/// </summary>
		public async Task Private_project_note_deleteAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/projects/{project_id}/notes/{note_id}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Project note details
		/// Private_project_note account/projects/{project_id}/notes/{note_id}
		/// </summary>
		/// <returns>OK. Note representation</returns>
		public async Task<ProjectNotePrivate> Private_project_noteAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/projects/{project_id}/notes/{note_id}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProjectNotePrivate>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update project note
		/// Private_project_note_update account/projects/{project_id}/notes/{note_id}
		/// </summary>
		/// <param name="requestBody">Note message</param>
		public async Task Private_project_note_updateAsync(ProjectNoteCreate requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/projects/{project_id}/notes/{note_id}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Private Project Publish
		/// Publish a project. Possible after all items inside it are public
		/// Private_project_publish account/projects/{project_id}/publish
		/// </summary>
		/// <param name="project_id">Project unique identifier
		/// Minimum: 1
		// </param>
		/// <returns>OK</returns>
		public async Task<ResponseMessage> Private_project_publishAsync(long project_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/projects/"+project_id+"/publish";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ResponseMessage>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Public Articles
		/// Returns a list of public articles
		/// Articles_list articles
		/// </summary>
		/// <param name="page">Page number. Used for pagination with page_size
		/// Minimum: 1
		/// Maximum: 5000
		// </param>
		/// <param name="page_size">The number of results included on a page. Used for pagination with page
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="limit">Number of results included on a page. Used for pagination with query
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="offset">Where to start the listing(the offset of the first result). Used for pagination with limit
		/// Minimum: 0
		/// Maximum: 5000
		// </param>
		/// <param name="order">The field by which to order. Default varies by endpoint/resource.</param>
		/// <param name="institution">only return articles from this institution</param>
		/// <param name="published_since">Filter by article publishing date. Will only return articles published after the date. date(ISO 8601) YYYY-MM-DD</param>
		/// <param name="modified_since">Filter by article modified date. Will only return articles published after the date. date(ISO 8601) YYYY-MM-DD</param>
		/// <param name="group">only return articles from this group</param>
		/// <param name="resource_doi">only return articles with this resource_doi</param>
		/// <param name="item_type">Only return articles with the respective type. Mapping for item_type is: 1 - Figure, 2 - Media, 3 - Dataset, 5 - Poster, 6 - Journal contribution, 7 - Presentation, 8 - Thesis, 9 - Software, 11 - Online resource, 12 - Preprint, 13 - Book, 14 - Conference contribution, 15 - Chapter, 16 - Peer review, 17 - Educational resource, 18 - Report, 19 - Standard, 20 - Composition, 21 - Funding, 22 - Physical object, 23 - Data management plan, 24 - Workflow, 25 - Monograph, 26 - Performance, 27 - Event, 28 - Service, 29 - Model</param>
		/// <param name="doi">only return articles with this doi</param>
		/// <param name="handle">only return articles with this handle</param>
		/// <returns>OK. An array of articles</returns>
		public async Task<Article[]> Articles_listAsync(long page, long page_size, long limit, long offset, ArticleSearchOrder order, CommonSearchOrder_direction order_direction, long institution, string published_since, string modified_since, long group, string resource_doi, long item_type, string doi, string handle, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "articles?page="+page+"&page_size="+page_size+"&limit="+limit+"&offset="+offset+"&order=" + order+"&order_direction=" + order_direction+"&institution="+institution+"&published_since=" + (published_since==null? "" : System.Uri.EscapeDataString(published_since))+"&modified_since=" + (modified_since==null? "" : System.Uri.EscapeDataString(modified_since))+"&group="+group+"&resource_doi=" + (resource_doi==null? "" : System.Uri.EscapeDataString(resource_doi))+"&item_type="+item_type+"&doi=" + (doi==null? "" : System.Uri.EscapeDataString(doi))+"&handle=" + (handle==null? "" : System.Uri.EscapeDataString(handle));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Article[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Public Articles Search
		/// Returns a list of public articles, filtered by the search parameters
		/// Articles_search articles/search
		/// </summary>
		/// <param name="requestBody">Search Parameters</param>
		/// <returns>OK. An array of articles</returns>
		public async Task<ArticleWithProject[]> Articles_searchAsync(ArticleSearch requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "articles/search";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ArticleWithProject[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// View article details
		/// View an article
		/// Article_details articles/{article_id}
		/// </summary>
		/// <param name="article_id">Article Unique identifier
		/// Minimum: 1
		// </param>
		/// <returns>OK. Article representation</returns>
		public async Task<ArticleComplete> Article_detailsAsync(long article_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "articles/"+article_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ArticleComplete>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List article files
		/// Files list for article
		/// Article_files articles/{article_id}/files
		/// </summary>
		/// <param name="article_id">Article Unique identifier
		/// Minimum: 1
		// </param>
		/// <returns>OK. List of article files</returns>
		public async Task<PublicFile[]> Article_filesAsync(long article_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "articles/"+article_id+"/files";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PublicFile[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Article file details
		/// File by id
		/// Article_file_details articles/{article_id}/files/{file_id}
		/// </summary>
		/// <param name="article_id">Article Unique identifier
		/// Minimum: 1
		// </param>
		/// <param name="file_id">File Unique identifier
		/// Minimum: 1
		// </param>
		/// <returns>OK. File representation</returns>
		public async Task<PublicFile> Article_file_detailsAsync(long article_id, long file_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "articles/"+article_id+"/files/"+file_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PublicFile>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List article versions
		/// List public article versions
		/// Article_versions articles/{article_id}/versions
		/// </summary>
		/// <param name="article_id">Article Unique identifier
		/// Minimum: 1
		// </param>
		/// <returns>OK. Article version representations</returns>
		public async Task<ArticleVersions[]> Article_versionsAsync(long article_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "articles/"+article_id+"/versions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ArticleVersions[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Article details for version
		/// Article with specified version
		/// Article_version_details articles/{article_id}/versions/{v_number}
		/// </summary>
		/// <param name="article_id">Article Unique identifier
		/// Minimum: 1
		// </param>
		/// <param name="v_number">Article Version Number
		/// Minimum: 1
		// </param>
		/// <returns>OK. Article representation</returns>
		public async Task<ArticleComplete> Article_version_detailsAsync(long article_id, long v_number, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "articles/"+article_id+"/versions/"+v_number;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ArticleComplete>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Public Article Confidentiality for article version
		/// Confidentiality for article version. The confidentiality feature is now deprecated. This has been replaced by the new extended embargo functionality and all items that used to be confidential have now been migrated to items with a permanent embargo on files. All API endpoints related to this functionality will remain for backwards compatibility, but will now be attached to the new extended embargo workflows.
		/// Article_version_confidentiality articles/{article_id}/versions/{v_number}/confidentiality
		/// </summary>
		/// <param name="article_id">Article Unique identifier
		/// Minimum: 1
		// </param>
		/// <param name="v_number">Version Number
		/// Minimum: 1
		// </param>
		/// <returns>OK. Confidentiality representation</returns>
		public async Task<ArticleConfidentiality> Article_version_confidentialityAsync(long article_id, long v_number, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "articles/"+article_id+"/versions/"+v_number+"/confidentiality";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ArticleConfidentiality>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Public Article Embargo for article version
		/// Embargo for article version
		/// Article_version_embargo articles/{article_id}/versions/{v_number}/embargo
		/// </summary>
		/// <param name="article_id">Article Unique identifier
		/// Minimum: 1
		// </param>
		/// <param name="v_number">Version Number
		/// Minimum: 1
		// </param>
		/// <returns>OK. Embargo representation</returns>
		public async Task<ArticleEmbargo> Article_version_embargoAsync(long article_id, long v_number, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "articles/"+article_id+"/versions/"+v_number+"/embargo";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ArticleEmbargo>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Public Categories
		/// Returns a list of public categories
		/// Categories_list categories
		/// </summary>
		/// <returns>OK. An array of categories</returns>
		public async Task<Category[]> Categories_listAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "categories";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Category[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Public Collections
		/// Returns a list of public collections
		/// Collections_list collections
		/// </summary>
		/// <param name="page">Page number. Used for pagination with page_size
		/// Minimum: 1
		/// Maximum: 5000
		// </param>
		/// <param name="page_size">The number of results included on a page. Used for pagination with page
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="limit">Number of results included on a page. Used for pagination with query
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="offset">Where to start the listing(the offset of the first result). Used for pagination with limit
		/// Minimum: 0
		/// Maximum: 5000
		// </param>
		/// <param name="order">The field by which to order. Default varies by endpoint/resource.</param>
		/// <param name="institution">only return collections from this institution</param>
		/// <param name="published_since">Filter by collection publishing date. Will only return collections published after the date. date(ISO 8601) YYYY-MM-DD</param>
		/// <param name="modified_since">Filter by collection modified date. Will only return collections published after the date. date(ISO 8601) YYYY-MM-DD</param>
		/// <param name="group">only return collections from this group</param>
		/// <param name="resource_doi">only return collections with this resource_doi</param>
		/// <param name="doi">only return collections with this doi</param>
		/// <param name="handle">only return collections with this handle</param>
		/// <returns>OK. An array of collections</returns>
		public async Task<Collection[]> Collections_listAsync(long page, long page_size, long limit, long offset, CollectionSearchOrder order, CommonSearchOrder_direction order_direction, long institution, string published_since, string modified_since, long group, string resource_doi, string doi, string handle, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "collections?page="+page+"&page_size="+page_size+"&limit="+limit+"&offset="+offset+"&order=" + order+"&order_direction=" + order_direction+"&institution="+institution+"&published_since=" + (published_since==null? "" : System.Uri.EscapeDataString(published_since))+"&modified_since=" + (modified_since==null? "" : System.Uri.EscapeDataString(modified_since))+"&group="+group+"&resource_doi=" + (resource_doi==null? "" : System.Uri.EscapeDataString(resource_doi))+"&doi=" + (doi==null? "" : System.Uri.EscapeDataString(doi))+"&handle=" + (handle==null? "" : System.Uri.EscapeDataString(handle));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Collection[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Public Collections Search
		/// Returns a list of public collections
		/// Collections_search collections/search
		/// </summary>
		/// <param name="requestBody">Search Parameters</param>
		/// <returns>OK. An array of collections</returns>
		public async Task<Collection[]> Collections_searchAsync(CollectionSearch requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "collections/search";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Collection[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Collection details
		/// View a collection
		/// Collection_details collections/{collection_id}
		/// </summary>
		/// <param name="collection_id">Collection Unique identifier
		/// Minimum: 1
		// </param>
		/// <returns>OK. Collection representation</returns>
		public async Task<CollectionComplete> Collection_detailsAsync(long collection_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "collections/"+collection_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CollectionComplete>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Public Collection Articles
		/// Returns a list of public collection articles
		/// Collection_articles collections/{collection_id}/articles
		/// </summary>
		/// <param name="collection_id">Collection Unique identifier
		/// Minimum: 1
		// </param>
		/// <param name="page">Page number. Used for pagination with page_size
		/// Minimum: 1
		/// Maximum: 5000
		// </param>
		/// <param name="page_size">The number of results included on a page. Used for pagination with page
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="limit">Number of results included on a page. Used for pagination with query
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="offset">Where to start the listing(the offset of the first result). Used for pagination with limit
		/// Minimum: 0
		/// Maximum: 5000
		// </param>
		/// <returns>OK. An array of articles belonging to the collection</returns>
		public async Task<Article[]> Collection_articlesAsync(long collection_id, long page, long page_size, long limit, long offset, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "collections/"+collection_id+"/articles?page="+page+"&page_size="+page_size+"&limit="+limit+"&offset="+offset;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Article[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Collection Versions list
		/// Returns a list of public collection Versions
		/// Collection_versions collections/{collection_id}/versions
		/// </summary>
		/// <param name="collection_id">Collection Unique identifier
		/// Minimum: 1
		// </param>
		/// <returns>OK. An array of versions</returns>
		public async Task<CollectionVersions[]> Collection_versionsAsync(long collection_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "collections/"+collection_id+"/versions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CollectionVersions[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Collection Version details
		/// View details for a certain version of a collection
		/// Collection_version_details collections/{collection_id}/versions/{version_id}
		/// </summary>
		/// <param name="collection_id">Collection Unique identifier
		/// Minimum: 1
		// </param>
		/// <param name="version_id">Version Number
		/// Minimum: 1
		// </param>
		/// <returns>OK. Collection for that version</returns>
		public async Task<CollectionComplete> Collection_version_detailsAsync(long collection_id, long version_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "collections/"+collection_id+"/versions/"+version_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CollectionComplete>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Public File Download
		/// Starts the download of a file
		/// File_download file/download/{file_id}
		/// </summary>
		/// <param name="file_id">Minimum: 1</param>
		/// <returns>OK</returns>
		public async Task File_downloadAsync(long file_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "file/download/"+file_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Public Licenses
		/// Returns a list of articles belonging to the institution
		/// Institution_articles institutions/{institution_string_id}/articles/filter-by
		/// </summary>
		/// <returns>OK. An array of articles</returns>
		public async Task<Article[]> Institution_articlesAsync(string institution_string_id, string resource_id, string filename, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "institutions/"+ (institution_string_id==null? "" : System.Uri.EscapeDataString(institution_string_id))+"/articles/filter-by&resource_id=" + (resource_id==null? "" : System.Uri.EscapeDataString(resource_id))+"&filename=" + (filename==null? "" : System.Uri.EscapeDataString(filename));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Article[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Item Types
		/// Returns the list of Item Types of the requested group. If no user is authenticated, returns the item types available for Figshare.
		/// Item_types_list item_types
		/// </summary>
		/// <param name="group_id">Identifier of the group for which the item types are requested
		/// Minimum: 0
		// </param>
		/// <returns>OK. An array of item types</returns>
		public async Task<ItemType[]> Item_types_listAsync(long group_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "item_types?group_id="+group_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ItemType[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Public Licenses
		/// Returns a list of public licenses
		/// Licenses_list licenses
		/// </summary>
		/// <returns>OK. An array of licenses</returns>
		public async Task<License[]> Licenses_listAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "licenses";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<License[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Public Projects
		/// Returns a list of public projects
		/// Projects_list projects
		/// </summary>
		/// <param name="page">Page number. Used for pagination with page_size
		/// Minimum: 1
		/// Maximum: 5000
		// </param>
		/// <param name="page_size">The number of results included on a page. Used for pagination with page
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="limit">Number of results included on a page. Used for pagination with query
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="offset">Where to start the listing(the offset of the first result). Used for pagination with limit
		/// Minimum: 0
		/// Maximum: 5000
		// </param>
		/// <param name="order">The field by which to order. Default varies by endpoint/resource.</param>
		/// <param name="institution">only return collections from this institution</param>
		/// <param name="published_since">Filter by article publishing date. Will only return articles published after the date. date(ISO 8601) YYYY-MM-DD</param>
		/// <param name="group">only return collections from this group</param>
		/// <returns>OK. An array of projects</returns>
		public async Task<Project[]> Projects_listAsync(long page, long page_size, long limit, long offset, ProjectsSearchOrder order, CommonSearchOrder_direction order_direction, long institution, string published_since, long group, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects?page="+page+"&page_size="+page_size+"&limit="+limit+"&offset="+offset+"&order=" + order+"&order_direction=" + order_direction+"&institution="+institution+"&published_since=" + (published_since==null? "" : System.Uri.EscapeDataString(published_since))+"&group="+group;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Project[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Public Projects Search
		/// Returns a list of public articles
		/// Projects_search projects/search
		/// </summary>
		/// <param name="requestBody">Search Parameters</param>
		/// <returns>OK. An array of projects</returns>
		public async Task<Project[]> Projects_searchAsync(ProjectsSearch requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/search";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Project[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Public Project
		/// View a project
		/// Project_details projects/{project_id}
		/// </summary>
		/// <param name="project_id">Project Unique identifier
		/// Minimum: 1
		// </param>
		/// <returns>OK. Project representation</returns>
		public async Task<ProjectComplete> Project_detailsAsync(long project_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+project_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProjectComplete>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Public Project Articles
		/// List articles in project
		/// Project_articles projects/{project_id}/articles
		/// </summary>
		/// <param name="project_id">Project Unique identifier
		/// Minimum: 1
		// </param>
		/// <returns>OK. Project articles list</returns>
		public async Task<Article[]> Project_articlesAsync(long project_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+project_id+"/articles";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Article[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum Private_projects_listStorage
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group")]
		group = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="individual")]
		individual = 1,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
